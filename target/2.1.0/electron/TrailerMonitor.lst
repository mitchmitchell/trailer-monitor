
c:/Users/Mitch/Documents/Particle/projects/TrailerMonitor/target/2.1.0/electron/TrailerMonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000a130  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000224  40024000  0808a150  00024000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000130  20000000  0808a374  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000460  20000130  20000130  00040130  2**3
                  ALLOC
  6 .module_info_suffix 00000028  0808a4a4  0808a4a4  0003a4a4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  0808a4cc  0808a4cc  0003a4cc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0023c007  00000000  00000000  0003a4d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00024c0e  00000000  00000000  002764d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002fe8  00000000  00000000  0029b0e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00007cc8  00000000  00000000  0029e0cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00038d05  00000000  00000000  002a5d95  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000528ac  00000000  00000000  002dea9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000c8ca5  00000000  00000000  00331346  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000084cc  00000000  00000000  003f9fec  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0002dcc3  00000000  00000000  004024b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080020 <localtime_r>:
#endif // !(defined(DYNALIB_IMPORT) && (defined(PARTICLE_COMPILE_LTO) || defined(PARTICLE_COMPILE_LTO_FAT)))
DYNALIB_FN(18, services2, mktime32, time32_t(struct tm*))
DYNALIB_FN(19, services2, __ssvfscanf_r, int(struct _reent*, FILE*, const char*, va_list))
DYNALIB_FN(20, services2, _printf_i, int(struct _reent*, struct _prt_data_t*, FILE*, int (*pfunc)(struct _reent *, FILE *, const char *, size_t), va_list*))
DYNALIB_FN(21, services2, localtime32_r, struct tm*(const time32_t*, struct tm*))
DYNALIB_FN(22, services2, localtime_r, struct tm*(const time_t*, struct tm*))
 8080020:	b508      	push	{r3, lr}
 8080022:	4b02      	ldr	r3, [pc, #8]	; (808002c <localtime_r+0xc>)
 8080024:	681b      	ldr	r3, [r3, #0]
 8080026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8080028:	9301      	str	r3, [sp, #4]
 808002a:	bd08      	pop	{r3, pc}
 808002c:	0806002c 	.word	0x0806002c

08080030 <strftime>:
DYNALIB_FN(23, services2, mktime, time_t(struct tm*))
DYNALIB_FN(24, services2, gmtime_r, struct tm*(const time_t*, struct tm*))
DYNALIB_FN(25, services2, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
 8080030:	b508      	push	{r3, lr}
 8080032:	4b02      	ldr	r3, [pc, #8]	; (808003c <strftime+0xc>)
 8080034:	681b      	ldr	r3, [r3, #0]
 8080036:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8080038:	9301      	str	r3, [sp, #4]
 808003a:	bd08      	pop	{r3, pc}
 808003c:	0806002c 	.word	0x0806002c

08080040 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080040:	4809      	ldr	r0, [pc, #36]	; (8080068 <module_user_pre_init+0x28>)
 8080042:	490a      	ldr	r1, [pc, #40]	; (808006c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 8080044:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080046:	4288      	cmp	r0, r1
 8080048:	d005      	beq.n	8080056 <module_user_pre_init+0x16>
 808004a:	4a09      	ldr	r2, [pc, #36]	; (8080070 <module_user_pre_init+0x30>)
 808004c:	4282      	cmp	r2, r0
 808004e:	d002      	beq.n	8080056 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 8080050:	1a12      	subs	r2, r2, r0
 8080052:	f008 ff9d 	bl	8088f90 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080056:	4807      	ldr	r0, [pc, #28]	; (8080074 <module_user_pre_init+0x34>)
 8080058:	4a07      	ldr	r2, [pc, #28]	; (8080078 <module_user_pre_init+0x38>)
 808005a:	2100      	movs	r1, #0
 808005c:	1a12      	subs	r2, r2, r0
 808005e:	f008 ffbf 	bl	8088fe0 <memset>
    return &link_heap_start;
}
 8080062:	4806      	ldr	r0, [pc, #24]	; (808007c <module_user_pre_init+0x3c>)
 8080064:	bd08      	pop	{r3, pc}
 8080066:	bf00      	nop
 8080068:	20000000 	.word	0x20000000
 808006c:	0808a374 	.word	0x0808a374
 8080070:	20000130 	.word	0x20000130
 8080074:	20000130 	.word	0x20000130
 8080078:	20000590 	.word	0x20000590
 808007c:	20000590 	.word	0x20000590

08080080 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 8080080:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 8080082:	f006 fbb7 	bl	80867f4 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080086:	2500      	movs	r5, #0
 8080088:	4e05      	ldr	r6, [pc, #20]	; (80800a0 <module_user_init+0x20>)
 808008a:	4c06      	ldr	r4, [pc, #24]	; (80800a4 <module_user_init+0x24>)
 808008c:	1ba4      	subs	r4, r4, r6
 808008e:	08a4      	lsrs	r4, r4, #2
 8080090:	42a5      	cmp	r5, r4
 8080092:	d100      	bne.n	8080096 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080094:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 8080096:	f856 3b04 	ldr.w	r3, [r6], #4
 808009a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808009c:	3501      	adds	r5, #1
 808009e:	e7f7      	b.n	8080090 <module_user_init+0x10>
 80800a0:	0808a108 	.word	0x0808a108
 80800a4:	0808a144 	.word	0x0808a144

080800a8 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80800a8:	f000 bf60 	b.w	8080f6c <setup>

080800ac <module_user_loop>:
}

void module_user_loop() {
 80800ac:	b508      	push	{r3, lr}
    loop();
 80800ae:	f000 fd4b 	bl	8080b48 <loop>
    _post_loop();
}
 80800b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80800b6:	f006 bb5f 	b.w	8086778 <_post_loop>

080800ba <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80800ba:	f004 bc0d 	b.w	80848d8 <malloc>

080800be <_Znaj>:
 80800be:	f004 bc0b 	b.w	80848d8 <malloc>

080800c2 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80800c2:	f004 bc11 	b.w	80848e8 <free>
	...

080800c8 <__cxa_pure_virtual>:
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 80800c8:	2100      	movs	r1, #0
 80800ca:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 80800cc:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80800ce:	4a02      	ldr	r2, [pc, #8]	; (80800d8 <__cxa_pure_virtual+0x10>)
 80800d0:	f004 faba 	bl	8084648 <panic_>
  while (1);
 80800d4:	e7fe      	b.n	80800d4 <__cxa_pure_virtual+0xc>
 80800d6:	bf00      	nop
 80800d8:	08084269 	.word	0x08084269

080800dc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800dc:	7800      	ldrb	r0, [r0, #0]
 80800de:	fab0 f080 	clz	r0, r0
 80800e2:	0940      	lsrs	r0, r0, #5
 80800e4:	4770      	bx	lr

080800e6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800e6:	2301      	movs	r3, #1
 80800e8:	7003      	strb	r3, [r0, #0]
 80800ea:	4770      	bx	lr

080800ec <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 80800ec:	4770      	bx	lr

080800ee <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
 80800ee:	6a00      	ldr	r0, [r0, #32]
 80800f0:	6803      	ldr	r3, [r0, #0]
 80800f2:	68db      	ldr	r3, [r3, #12]
 80800f4:	4718      	bx	r3

080800f6 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
 80800f6:	6803      	ldr	r3, [r0, #0]
 80800f8:	4718      	bx	r3

080800fa <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
 80800fa:	2a01      	cmp	r2, #1
 80800fc:	d003      	beq.n	8080106 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
 80800fe:	2a02      	cmp	r2, #2
 8080100:	d003      	beq.n	808010a <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
 8080102:	2000      	movs	r0, #0
 8080104:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8080106:	6001      	str	r1, [r0, #0]
	      break;
 8080108:	e7fb      	b.n	8080102 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 808010a:	680b      	ldr	r3, [r1, #0]
 808010c:	6003      	str	r3, [r0, #0]
	}
 808010e:	e7f8      	b.n	8080102 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>

08080110 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	  switch (__op)
 8080110:	2a01      	cmp	r2, #1
 8080112:	d003      	beq.n	808011c <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xc>
 8080114:	2a02      	cmp	r2, #2
 8080116:	d003      	beq.n	8080120 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x10>
	}
 8080118:	2000      	movs	r0, #0
 808011a:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 808011c:	6001      	str	r1, [r0, #0]
	      break;
 808011e:	e7fb      	b.n	8080118 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8080120:	680b      	ldr	r3, [r1, #0]
 8080122:	6003      	str	r3, [r0, #0]
	}
 8080124:	e7f8      	b.n	8080118 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x8>
	...

08080128 <_Z7callGPSv>:
//int transmittingData = ( TRANSMITTINGGPSDATA | TRANSMITTINGACCDATA | TRANSMITTINGPWRDATA | TRANSMITTINGDHTDATA );
// Run the GPS off a timer interrupt.
// read all bytes available, if an entire message was received,
// parse it store the data for access by the get routines.
void callGPS() {
     t.updateGPS();
 8080128:	4801      	ldr	r0, [pc, #4]	; (8080130 <_Z7callGPSv+0x8>)
 808012a:	f002 bd85 	b.w	8082c38 <_ZN13AssetTracker29updateGPSEv>
 808012e:	bf00      	nop
 8080130:	20000228 	.word	0x20000228

08080134 <_ZNSt17_Function_handlerIFi6StringEPFbS0_EE9_M_invokeERKSt9_Any_dataOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8080134:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return (*_Base::_M_get_pointer(__functor))(
 8080136:	6804      	ldr	r4, [r0, #0]
 8080138:	4668      	mov	r0, sp
 808013a:	f004 fe6f 	bl	8084e1c <_ZN6StringC1EOS_>
 808013e:	4668      	mov	r0, sp
 8080140:	47a0      	blx	r4
 8080142:	4604      	mov	r4, r0
 8080144:	4668      	mov	r0, sp
 8080146:	f004 fdef 	bl	8084d28 <_ZN6StringD1Ev>
      }
 808014a:	4620      	mov	r0, r4
 808014c:	b004      	add	sp, #16
 808014e:	bd10      	pop	{r4, pc}

08080150 <_Z16accelThresholder6String>:
		else
		  transmittingData &= ~( SERIALBTNDATA | SERIALCONNDATA | SERIALLOOPDATA | SERIALSETUPDATA | SERIALGPSDATA | SERIALACCDATA | SERIALPWRDATA | SERIALDHTDATA );
}

// Remotely change the trigger threshold!
int accelThresholder(String command) {
 8080150:	b508      	push	{r3, lr}
    accelThreshold = atoi(command);
 8080152:	6800      	ldr	r0, [r0, #0]
 8080154:	f008 ff06 	bl	8088f64 <atoi>
 8080158:	4b01      	ldr	r3, [pc, #4]	; (8080160 <_Z16accelThresholder6String+0x10>)
 808015a:	6018      	str	r0, [r3, #0]
    return accelThreshold;
}
 808015c:	bd08      	pop	{r3, pc}
 808015e:	bf00      	nop
 8080160:	20000000 	.word	0x20000000

08080164 <_Z18setDelayGPSMinutes6String>:
// Remotely change the publishing delay for GPS!
int setDelayGPSMinutes(String command) {
 8080164:	b508      	push	{r3, lr}
    delayGPSMinutes = atoi(command);
 8080166:	6800      	ldr	r0, [r0, #0]
 8080168:	f008 fefc 	bl	8088f64 <atoi>
 808016c:	4b01      	ldr	r3, [pc, #4]	; (8080174 <_Z18setDelayGPSMinutes6String+0x10>)
 808016e:	6018      	str	r0, [r3, #0]
    return delayGPSMinutes;
}
 8080170:	bd08      	pop	{r3, pc}
 8080172:	bf00      	nop
 8080174:	2000000c 	.word	0x2000000c

08080178 <_Z18setDelayACCMinutes6String>:

// Remotely change the publishing delay for ACC!
int setDelayACCMinutes(String command) {
 8080178:	b508      	push	{r3, lr}
    delayACCMinutes = atoi(command);
 808017a:	6800      	ldr	r0, [r0, #0]
 808017c:	f008 fef2 	bl	8088f64 <atoi>
 8080180:	4b01      	ldr	r3, [pc, #4]	; (8080188 <_Z18setDelayACCMinutes6String+0x10>)
 8080182:	6018      	str	r0, [r3, #0]
    return delayACCMinutes;
}
 8080184:	bd08      	pop	{r3, pc}
 8080186:	bf00      	nop
 8080188:	20000004 	.word	0x20000004

0808018c <_Z18setDelayDHTMinutes6String>:

// Remotely change the publishing delay for DHT!
int setDelayDHTMinutes(String command) {
 808018c:	b508      	push	{r3, lr}
    delayDHTMinutes = atoi(command);
 808018e:	6800      	ldr	r0, [r0, #0]
 8080190:	f008 fee8 	bl	8088f64 <atoi>
 8080194:	4b01      	ldr	r3, [pc, #4]	; (808019c <_Z18setDelayDHTMinutes6String+0x10>)
 8080196:	6018      	str	r0, [r3, #0]
    return delayDHTMinutes;
}
 8080198:	bd08      	pop	{r3, pc}
 808019a:	bf00      	nop
 808019c:	20000008 	.word	0x20000008

080801a0 <_Z12transmitMode6String>:

// Allows you to remotely change whether a device is publishing to the cloud
// or is only reporting data over Serial. Saves data when using only Serial!
// Change the default at the top of the code.
int transmitMode(String command) {
 80801a0:	b508      	push	{r3, lr}
    transmittingData = atoi(command);
 80801a2:	6800      	ldr	r0, [r0, #0]
 80801a4:	f008 fede 	bl	8088f64 <atoi>
 80801a8:	4b01      	ldr	r3, [pc, #4]	; (80801b0 <_Z12transmitMode6String+0x10>)
 80801aa:	6018      	str	r0, [r3, #0]
    return transmittingData;
}
 80801ac:	bd08      	pop	{r3, pc}
 80801ae:	bf00      	nop
 80801b0:	20000014 	.word	0x20000014

080801b4 <_Z8resetODO6String>:
      }
}


// Reset the trip odometer
int resetODO(String command) {
 80801b4:	b508      	push	{r3, lr}
    t.gpsResetODO();
 80801b6:	4802      	ldr	r0, [pc, #8]	; (80801c0 <_Z8resetODO6String+0xc>)
 80801b8:	f002 fd4a 	bl	8082c50 <_ZN13AssetTracker211gpsResetODOEv>
    return 1;
}
 80801bc:	2001      	movs	r0, #1
 80801be:	bd08      	pop	{r3, pc}
 80801c0:	20000228 	.word	0x20000228

080801c4 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
 80801c4:	6943      	ldr	r3, [r0, #20]
 80801c6:	b113      	cbz	r3, 80801ce <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80801c8:	6983      	ldr	r3, [r0, #24]
 80801ca:	300c      	adds	r0, #12
 80801cc:	4718      	bx	r3
            callback();
        }
    }
 80801ce:	4770      	bx	lr

080801d0 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
 80801d0:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
 80801d2:	2100      	movs	r1, #0
 80801d4:	4604      	mov	r4, r0
 80801d6:	4608      	mov	r0, r1
 80801d8:	f004 f896 	bl	8084308 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
 80801dc:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
 80801de:	4620      	mov	r0, r4
 80801e0:	a901      	add	r1, sp, #4
            void* id = nullptr;
 80801e2:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
 80801e4:	f004 f8a8 	bl	8084338 <os_timer_get_id>
            t = static_cast<Timer*>(id);
 80801e8:	9c01      	ldr	r4, [sp, #4]
            if (t) {
 80801ea:	b10c      	cbz	r4, 80801f0 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
 80801ec:	2301      	movs	r3, #1
 80801ee:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
 80801f0:	2100      	movs	r1, #0
 80801f2:	2001      	movs	r0, #1
 80801f4:	f004 f888 	bl	8084308 <os_thread_scheduling>
            }
        }
        if (t) {
 80801f8:	b12c      	cbz	r4, 8080206 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
 80801fa:	6823      	ldr	r3, [r4, #0]
 80801fc:	4620      	mov	r0, r4
 80801fe:	689b      	ldr	r3, [r3, #8]
 8080200:	4798      	blx	r3
            t->running = false;
 8080202:	2300      	movs	r3, #0
 8080204:	7123      	strb	r3, [r4, #4]
        }
    }
 8080206:	b002      	add	sp, #8
 8080208:	bd10      	pop	{r4, pc}
	...

0808020c <_Z13SetGPSAntenna6String>:
bool SetGPSAntenna(String command) {
 808020c:	b510      	push	{r4, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 808020e:	490d      	ldr	r1, [pc, #52]	; (8080244 <_Z13SetGPSAntenna6String+0x38>)
 8080210:	4604      	mov	r4, r0
 8080212:	f004 fe78 	bl	8084f06 <_ZNK6String6equalsEPKc>
  if (command == "internal") {
 8080216:	b138      	cbz	r0, 8080228 <_Z13SetGPSAntenna6String+0x1c>
    gpsAntennaExternal = false;
 8080218:	2200      	movs	r2, #0
 808021a:	4b0b      	ldr	r3, [pc, #44]	; (8080248 <_Z13SetGPSAntenna6String+0x3c>)
    return t.antennaInternal();
 808021c:	480b      	ldr	r0, [pc, #44]	; (808024c <_Z13SetGPSAntenna6String+0x40>)
    gpsAntennaExternal = false;
 808021e:	701a      	strb	r2, [r3, #0]
}
 8080220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return t.antennaInternal();
 8080224:	f002 bce4 	b.w	8082bf0 <_ZN13AssetTracker215antennaInternalEv>
 8080228:	4620      	mov	r0, r4
 808022a:	4909      	ldr	r1, [pc, #36]	; (8080250 <_Z13SetGPSAntenna6String+0x44>)
 808022c:	f004 fe6b 	bl	8084f06 <_ZNK6String6equalsEPKc>
  } else if (command == "external") {
 8080230:	b138      	cbz	r0, 8080242 <_Z13SetGPSAntenna6String+0x36>
    gpsAntennaExternal = true;
 8080232:	2201      	movs	r2, #1
 8080234:	4b04      	ldr	r3, [pc, #16]	; (8080248 <_Z13SetGPSAntenna6String+0x3c>)
    return t.antennaExternal();
 8080236:	4805      	ldr	r0, [pc, #20]	; (808024c <_Z13SetGPSAntenna6String+0x40>)
    gpsAntennaExternal = true;
 8080238:	701a      	strb	r2, [r3, #0]
}
 808023a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return t.antennaExternal();
 808023e:	f002 bce9 	b.w	8082c14 <_ZN13AssetTracker215antennaExternalEv>
}
 8080242:	bd10      	pop	{r4, pc}
 8080244:	08089304 	.word	0x08089304
 8080248:	20000010 	.word	0x20000010
 808024c:	20000228 	.word	0x20000228
 8080250:	0808930d 	.word	0x0808930d

08080254 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 8080254:	b510      	push	{r4, lr}
 8080256:	4604      	mov	r4, r0
        if (wakeupSource_) {
 8080258:	6800      	ldr	r0, [r0, #0]
 808025a:	b108      	cbz	r0, 8080260 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 808025c:	f004 fb44 	bl	80848e8 <free>
class SystemClass {
 8080260:	4620      	mov	r0, r4
 8080262:	bd10      	pop	{r4, pc}

08080264 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 8080264:	b510      	push	{r4, lr}
 8080266:	4604      	mov	r4, r0
 8080268:	4b09      	ldr	r3, [pc, #36]	; (8080290 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 808026a:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 808026c:	f005 f9ac 	bl	80855c8 <_ZN5spark10LogManager8instanceEv>
 8080270:	4621      	mov	r1, r4
 8080272:	f005 fbc5 	bl	8085a00 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 8080276:	f006 fe9f 	bl	8086fb8 <_Z16_fetch_usbserialv>
 808027a:	f006 fe91 	bl	8086fa0 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 808027e:	4620      	mov	r0, r4
 8080280:	4b04      	ldr	r3, [pc, #16]	; (8080294 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 8080282:	f840 3b04 	str.w	r3, [r0], #4
 8080286:	f005 faa9 	bl	80857dc <_ZN5spark6detail9LogFilterD1Ev>
    }
 808028a:	4620      	mov	r0, r4
 808028c:	bd10      	pop	{r4, pc}
 808028e:	bf00      	nop
 8080290:	080897e0 	.word	0x080897e0
 8080294:	080897c8 	.word	0x080897c8

08080298 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 8080298:	b510      	push	{r4, lr}
 808029a:	4604      	mov	r4, r0
    }
 808029c:	f7ff ffe2 	bl	8080264 <_ZN5spark16SerialLogHandlerD1Ev>
 80802a0:	4620      	mov	r0, r4
 80802a2:	2124      	movs	r1, #36	; 0x24
 80802a4:	f007 fcf5 	bl	8087c92 <_ZdlPvj>
 80802a8:	4620      	mov	r0, r4
 80802aa:	bd10      	pop	{r4, pc}

080802ac <_Z7gpsRate6String>:
// Allows changing the measurement rate
int gpsRate(String command) {
 80802ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80802ae:	4604      	mov	r4, r0
    uint16_t rate = atoi(command);
 80802b0:	6800      	ldr	r0, [r0, #0]
 80802b2:	f008 fe57 	bl	8088f64 <atoi>
    int nav = atoi(command.substring(command.indexOf(' ')));
 80802b6:	2120      	movs	r1, #32
    uint16_t rate = atoi(command);
 80802b8:	b286      	uxth	r6, r0
    int nav = atoi(command.substring(command.indexOf(' ')));
 80802ba:	4620      	mov	r0, r4
 80802bc:	f004 fe6d 	bl	8084f9a <_ZNK6String7indexOfEc>
 80802c0:	4621      	mov	r1, r4
 80802c2:	4602      	mov	r2, r0
 80802c4:	4668      	mov	r0, sp
 80802c6:	f004 fe8d 	bl	8084fe4 <_ZNK6String9substringEj>
 80802ca:	9800      	ldr	r0, [sp, #0]
 80802cc:	f008 fe4a 	bl	8088f64 <atoi>
 80802d0:	4604      	mov	r4, r0
 80802d2:	4668      	mov	r0, sp
 80802d4:	f004 fd28 	bl	8084d28 <_ZN6StringD1Ev>
		if ((transmittingData & SERIALGPSDATA) == SERIALGPSDATA) {
 80802d8:	4b16      	ldr	r3, [pc, #88]	; (8080334 <_Z7gpsRate6String+0x88>)
 80802da:	681b      	ldr	r3, [r3, #0]
 80802dc:	00db      	lsls	r3, r3, #3
 80802de:	d51f      	bpl.n	8080320 <_Z7gpsRate6String+0x74>
			Serial.print("rate: ");
 80802e0:	f006 fe6a 	bl	8086fb8 <_Z16_fetch_usbserialv>
 80802e4:	4914      	ldr	r1, [pc, #80]	; (8080338 <_Z7gpsRate6String+0x8c>)
 80802e6:	f004 fed7 	bl	8085098 <_ZN5Print5printEPKc>
	    Serial.print(rate);
 80802ea:	f006 fe65 	bl	8086fb8 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80802ee:	220a      	movs	r2, #10
 80802f0:	4631      	mov	r1, r6
 80802f2:	f004 feee 	bl	80850d2 <_ZN5Print11printNumberEmh>
	    Serial.print(" nav: ");
 80802f6:	f006 fe5f 	bl	8086fb8 <_Z16_fetch_usbserialv>
 80802fa:	4910      	ldr	r1, [pc, #64]	; (808033c <_Z7gpsRate6String+0x90>)
 80802fc:	f004 fecc 	bl	8085098 <_ZN5Print5printEPKc>
	    Serial.println(nav);
 8080300:	f006 fe5a 	bl	8086fb8 <_Z16_fetch_usbserialv>
        if (n < 0 && base == 10) {
 8080304:	2c00      	cmp	r4, #0
 8080306:	4605      	mov	r5, r0
 8080308:	da12      	bge.n	8080330 <_Z7gpsRate6String+0x84>
            t = print('-');
 808030a:	212d      	movs	r1, #45	; 0x2d
 808030c:	f004 fec8 	bl	80850a0 <_ZN5Print5printEc>
            val = -n;
 8080310:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
 8080312:	220a      	movs	r2, #10
 8080314:	4628      	mov	r0, r5
 8080316:	f004 fedc 	bl	80850d2 <_ZN5Print11printNumberEmh>
        n += println();
 808031a:	4628      	mov	r0, r5
 808031c:	f004 fec3 	bl	80850a6 <_ZN5Print7printlnEv>
		}
    t.gpsRate(rate, nav);
 8080320:	4622      	mov	r2, r4
 8080322:	4631      	mov	r1, r6
 8080324:	4806      	ldr	r0, [pc, #24]	; (8080340 <_Z7gpsRate6String+0x94>)
 8080326:	f002 fc8d 	bl	8082c44 <_ZN13AssetTracker27gpsRateEti>
    return 1;
}
 808032a:	2001      	movs	r0, #1
 808032c:	b004      	add	sp, #16
 808032e:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
 8080330:	4621      	mov	r1, r4
 8080332:	e7ee      	b.n	8080312 <_Z7gpsRate6String+0x66>
 8080334:	20000014 	.word	0x20000014
 8080338:	08089316 	.word	0x08089316
 808033c:	0808931d 	.word	0x0808931d
 8080340:	20000228 	.word	0x20000228

08080344 <_ZN5Print8printlnfEPKcz>:
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 8080344:	b40e      	push	{r1, r2, r3}
 8080346:	b503      	push	{r0, r1, lr}
 8080348:	ab03      	add	r3, sp, #12
 808034a:	f853 2b04 	ldr.w	r2, [r3], #4
        auto r = this->vprintf(true, format, args);
 808034e:	2101      	movs	r1, #1
        va_start(args, format);
 8080350:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
 8080352:	f004 ffb7 	bl	80852c4 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
 8080356:	b002      	add	sp, #8
 8080358:	f85d eb04 	ldr.w	lr, [sp], #4
 808035c:	b003      	add	sp, #12
 808035e:	4770      	bx	lr

08080360 <_Z14button_clickedyi>:
{
 8080360:	b538      	push	{r3, r4, r5, lr}
		if ((transmittingData & SERIALBTNDATA) == SERIALBTNDATA)
 8080362:	4c0a      	ldr	r4, [pc, #40]	; (808038c <_Z14button_clickedyi+0x2c>)
{
 8080364:	4615      	mov	r5, r2
		if ((transmittingData & SERIALBTNDATA) == SERIALBTNDATA)
 8080366:	6823      	ldr	r3, [r4, #0]
 8080368:	01d9      	lsls	r1, r3, #7
 808036a:	d506      	bpl.n	808037a <_Z14button_clickedyi+0x1a>
    	Serial.printlnf("button was clicked %d times", times);
 808036c:	f006 fe24 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8080370:	4907      	ldr	r1, [pc, #28]	; (8080390 <_Z14button_clickedyi+0x30>)
 8080372:	f005 020f 	and.w	r2, r5, #15
 8080376:	f7ff ffe5 	bl	8080344 <_ZN5Print8printlnfEPKcz>
		if ((transmittingData & SERIALLOOPDATA) == 0)
 808037a:	6823      	ldr	r3, [r4, #0]
 808037c:	011a      	lsls	r2, r3, #4
		 	transmittingData |= ( SERIALBTNDATA | SERIALCONNDATA | SERIALLOOPDATA | SERIALSETUPDATA | SERIALGPSDATA | SERIALACCDATA | SERIALPWRDATA | SERIALDHTDATA );
 808037e:	bf54      	ite	pl
 8080380:	f043 437f 	orrpl.w	r3, r3, #4278190080	; 0xff000000
		  transmittingData &= ~( SERIALBTNDATA | SERIALCONNDATA | SERIALLOOPDATA | SERIALSETUPDATA | SERIALGPSDATA | SERIALACCDATA | SERIALPWRDATA | SERIALDHTDATA );
 8080384:	f023 437f 	bicmi.w	r3, r3, #4278190080	; 0xff000000
 8080388:	6023      	str	r3, [r4, #0]
}
 808038a:	bd38      	pop	{r3, r4, r5, pc}
 808038c:	20000014 	.word	0x20000014
 8080390:	08089324 	.word	0x08089324

08080394 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 8080394:	b510      	push	{r4, lr}
      if (_M_manager)
 8080396:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 8080398:	4604      	mov	r4, r0
      if (_M_manager)
 808039a:	b113      	cbz	r3, 80803a2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 808039c:	2203      	movs	r2, #3
 808039e:	4601      	mov	r1, r0
 80803a0:	4798      	blx	r3
    }
 80803a2:	4620      	mov	r0, r4
 80803a4:	bd10      	pop	{r4, pc}
	...

080803a8 <_ZN10CloudClass9_functionEPKcPFi6StringE>:
            "\n\nIn Particle.function, name must be " __XSTRING(USER_FUNC_KEY_LENGTH) " characters or less\n\n");

        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
 80803a8:	4602      	mov	r2, r0
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
 80803aa:	4801      	ldr	r0, [pc, #4]	; (80803b0 <_ZN10CloudClass9_functionEPKcPFi6StringE+0x8>)
 80803ac:	f006 bad1 	b.w	8086952 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80803b0:	080868e3 	.word	0x080868e3

080803b4 <_ZN5Timer5_stopEjb>:
    bool _stop(unsigned block, bool fromISR=false)
 80803b4:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
 80803b6:	6880      	ldr	r0, [r0, #8]
 80803b8:	2300      	movs	r3, #0
 80803ba:	b138      	cbz	r0, 80803cc <_ZN5Timer5_stopEjb+0x18>
 80803bc:	e9cd 1300 	strd	r1, r3, [sp]
 80803c0:	2102      	movs	r1, #2
 80803c2:	f003 ffc1 	bl	8084348 <os_timer_change>
 80803c6:	fab0 f080 	clz	r0, r0
 80803ca:	0940      	lsrs	r0, r0, #5
    }
 80803cc:	b003      	add	sp, #12
 80803ce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080803d4 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
 80803d4:	b538      	push	{r3, r4, r5, lr}
 80803d6:	4b10      	ldr	r3, [pc, #64]	; (8080418 <_ZN5TimerD1Ev+0x44>)
 80803d8:	4604      	mov	r4, r0
 80803da:	6003      	str	r3, [r0, #0]
        if (handle) {
 80803dc:	6883      	ldr	r3, [r0, #8]
 80803de:	b1a3      	cbz	r3, 808040a <_ZN5TimerD1Ev+0x36>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
 80803e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80803e4:	2200      	movs	r2, #0
 80803e6:	f7ff ffe5 	bl	80803b4 <_ZN5Timer5_stopEjb>
            os_timer_set_id(handle, nullptr);
 80803ea:	2100      	movs	r1, #0
 80803ec:	68a0      	ldr	r0, [r4, #8]
 80803ee:	f003 ffdb 	bl	80843a8 <os_timer_set_id>
            while (running) {
 80803f2:	7923      	ldrb	r3, [r4, #4]
 80803f4:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80803f8:	b113      	cbz	r3, 8080400 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
 80803fa:	f003 ff6d 	bl	80842d8 <os_thread_yield>
            while (running) {
 80803fe:	e7f8      	b.n	80803f2 <_ZN5TimerD1Ev+0x1e>
            os_timer_destroy(handle, nullptr);
 8080400:	4629      	mov	r1, r5
 8080402:	68a0      	ldr	r0, [r4, #8]
 8080404:	f003 ff90 	bl	8084328 <os_timer_destroy>
            handle = nullptr;
 8080408:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
 808040a:	f104 000c 	add.w	r0, r4, #12
 808040e:	f7ff ffc1 	bl	8080394 <_ZNSt14_Function_baseD1Ev>
    }
 8080412:	4620      	mov	r0, r4
 8080414:	bd38      	pop	{r3, r4, r5, pc}
 8080416:	bf00      	nop
 8080418:	080897b4 	.word	0x080897b4

0808041c <_ZN5TimerD0Ev>:
    virtual ~Timer() {
 808041c:	b510      	push	{r4, lr}
 808041e:	4604      	mov	r4, r0
    }
 8080420:	f7ff ffd8 	bl	80803d4 <_ZN5TimerD1Ev>
 8080424:	4620      	mov	r0, r4
 8080426:	211c      	movs	r1, #28
 8080428:	f007 fc33 	bl	8087c92 <_ZdlPvj>
 808042c:	4620      	mov	r0, r4
 808042e:	bd10      	pop	{r4, pc}

08080430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8080430:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 8080432:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 8080434:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 8080436:	b17c      	cbz	r4, 8080458 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 8080438:	6863      	ldr	r3, [r4, #4]
 808043a:	3b01      	subs	r3, #1
 808043c:	6063      	str	r3, [r4, #4]
 808043e:	b95b      	cbnz	r3, 8080458 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 8080440:	6823      	ldr	r3, [r4, #0]
 8080442:	4620      	mov	r0, r4
 8080444:	689b      	ldr	r3, [r3, #8]
 8080446:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8080448:	68a3      	ldr	r3, [r4, #8]
 808044a:	3b01      	subs	r3, #1
 808044c:	60a3      	str	r3, [r4, #8]
 808044e:	b91b      	cbnz	r3, 8080458 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 8080450:	6823      	ldr	r3, [r4, #0]
 8080452:	4620      	mov	r0, r4
 8080454:	68db      	ldr	r3, [r3, #12]
 8080456:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 8080458:	4628      	mov	r0, r5
 808045a:	bd38      	pop	{r3, r4, r5, pc}

0808045c <_Z10gpsPublish6String>:
int gpsPublish(String command) {
 808045c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (t.gpsFix()) {
 8080460:	482e      	ldr	r0, [pc, #184]	; (808051c <_Z10gpsPublish6String+0xc0>)
int gpsPublish(String command) {
 8080462:	b092      	sub	sp, #72	; 0x48
    if (t.gpsFix()) {
 8080464:	f002 fbbe 	bl	8082be4 <_ZN13AssetTracker26gpsFixEv>
 8080468:	2800      	cmp	r0, #0
 808046a:	d054      	beq.n	8080516 <_Z10gpsPublish6String+0xba>
			  time_t time = Time.now();
 808046c:	f006 f849 	bl	8086502 <_ZN9TimeClass3nowEv>
 8080470:	4605      	mov	r5, r0
			  Particle.publish("LJGPSFIX", String::format("{\"la\":%f,\"lo\":%f,\"ht\":%f,\"ac\":%f,\"tm\":\"%s\"}",t.readLatDeg(),t.readLonDeg(),(t.getAltitude() / 1000),(t.getGpsAccuracy() / 1000),Time.format(time, TIME_FORMAT_ISO8601_FULL).c_str()), 60, PRIVATE);
 8080472:	482a      	ldr	r0, [pc, #168]	; (808051c <_Z10gpsPublish6String+0xc0>)
 8080474:	f002 fad2 	bl	8082a1c <_ZN13AssetTracker210readLatDegEv>
 8080478:	4604      	mov	r4, r0
 808047a:	4828      	ldr	r0, [pc, #160]	; (808051c <_Z10gpsPublish6String+0xc0>)
 808047c:	f002 fad4 	bl	8082a28 <_ZN13AssetTracker210readLonDegEv>
 8080480:	4606      	mov	r6, r0
 8080482:	4826      	ldr	r0, [pc, #152]	; (808051c <_Z10gpsPublish6String+0xc0>)
 8080484:	f002 fb50 	bl	8082b28 <_ZN13AssetTracker211getAltitudeEv>
 8080488:	4607      	mov	r7, r0
 808048a:	4824      	ldr	r0, [pc, #144]	; (808051c <_Z10gpsPublish6String+0xc0>)
 808048c:	f002 fad2 	bl	8082a34 <_ZN13AssetTracker214getGpsAccuracyEv>
 8080490:	4b23      	ldr	r3, [pc, #140]	; (8080520 <_Z10gpsPublish6String+0xc4>)
 8080492:	462a      	mov	r2, r5
 8080494:	681b      	ldr	r3, [r3, #0]
 8080496:	4680      	mov	r8, r0
 8080498:	4922      	ldr	r1, [pc, #136]	; (8080524 <_Z10gpsPublish6String+0xc8>)
 808049a:	9300      	str	r3, [sp, #0]
 808049c:	a80e      	add	r0, sp, #56	; 0x38
 808049e:	17eb      	asrs	r3, r5, #31
 80804a0:	f005 ffd0 	bl	8086444 <_ZN9TimeClass6formatExPKc>
 80804a4:	4620      	mov	r0, r4
 80804a6:	f007 fe87 	bl	80881b8 <__aeabi_f2d>
 80804aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80804ac:	4604      	mov	r4, r0
 80804ae:	460d      	mov	r5, r1
 80804b0:	4640      	mov	r0, r8
 80804b2:	491d      	ldr	r1, [pc, #116]	; (8080528 <_Z10gpsPublish6String+0xcc>)
 80804b4:	9306      	str	r3, [sp, #24]
 80804b6:	f008 fbe1 	bl	8088c7c <__aeabi_fdiv>
 80804ba:	f007 fe7d 	bl	80881b8 <__aeabi_f2d>
 80804be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80804c2:	4919      	ldr	r1, [pc, #100]	; (8080528 <_Z10gpsPublish6String+0xcc>)
 80804c4:	4638      	mov	r0, r7
 80804c6:	f008 fbd9 	bl	8088c7c <__aeabi_fdiv>
 80804ca:	f007 fe75 	bl	80881b8 <__aeabi_f2d>
 80804ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80804d2:	4630      	mov	r0, r6
 80804d4:	f007 fe70 	bl	80881b8 <__aeabi_f2d>
 80804d8:	4622      	mov	r2, r4
 80804da:	e9cd 0100 	strd	r0, r1, [sp]
 80804de:	462b      	mov	r3, r5
 80804e0:	4912      	ldr	r1, [pc, #72]	; (808052c <_Z10gpsPublish6String+0xd0>)
 80804e2:	a80a      	add	r0, sp, #40	; 0x28
 80804e4:	f004 fd8a 	bl	8084ffc <_ZN6String6formatEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80804e8:	4b11      	ldr	r3, [pc, #68]	; (8080530 <_Z10gpsPublish6String+0xd4>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80804ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80804ec:	781b      	ldrb	r3, [r3, #0]
 80804ee:	4911      	ldr	r1, [pc, #68]	; (8080534 <_Z10gpsPublish6String+0xd8>)
 80804f0:	f88d 3000 	strb.w	r3, [sp]
 80804f4:	a808      	add	r0, sp, #32
 80804f6:	233c      	movs	r3, #60	; 0x3c
 80804f8:	f006 fb38 	bl	8086b6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80804fc:	a809      	add	r0, sp, #36	; 0x24
 80804fe:	f7ff ff97 	bl	8080430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080502:	a80a      	add	r0, sp, #40	; 0x28
 8080504:	f004 fc10 	bl	8084d28 <_ZN6StringD1Ev>
 8080508:	a80e      	add	r0, sp, #56	; 0x38
 808050a:	f004 fc0d 	bl	8084d28 <_ZN6StringD1Ev>
 808050e:	2001      	movs	r0, #1
}
 8080510:	b012      	add	sp, #72	; 0x48
 8080512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return 2;
 8080516:	2002      	movs	r0, #2
 8080518:	e7fa      	b.n	8080510 <_Z10gpsPublish6String+0xb4>
 808051a:	bf00      	nop
 808051c:	20000228 	.word	0x20000228
 8080520:	200000c4 	.word	0x200000c4
 8080524:	200003e0 	.word	0x200003e0
 8080528:	447a0000 	.word	0x447a0000
 808052c:	08089340 	.word	0x08089340
 8080530:	20000140 	.word	0x20000140
 8080534:	0808936c 	.word	0x0808936c

08080538 <_Z10pwrPublish6String>:
int pwrPublish(String command){
 8080538:	b530      	push	{r4, r5, lr}
    Particle.publish("LJPWRSTAT", String::format("{\"s\": %d,\"n\": 0,\"v\":%.2f,\"c\":%.2f}",pc.getHasPower(),fuel.getVCell(),fuel.getSoC()), 60, PRIVATE );
 808053a:	481b      	ldr	r0, [pc, #108]	; (80805a8 <_Z10pwrPublish6String+0x70>)
int pwrPublish(String command){
 808053c:	b08b      	sub	sp, #44	; 0x2c
    Particle.publish("LJPWRSTAT", String::format("{\"s\": %d,\"n\": 0,\"v\":%.2f,\"c\":%.2f}",pc.getHasPower(),fuel.getVCell(),fuel.getSoC()), 60, PRIVATE );
 808053e:	f002 fa45 	bl	80829cc <_ZN10PowerCheck11getHasPowerEv>
 8080542:	4604      	mov	r4, r0
 8080544:	4819      	ldr	r0, [pc, #100]	; (80805ac <_Z10pwrPublish6String+0x74>)
 8080546:	f006 f88d 	bl	8086664 <_ZN9FuelGauge8getVCellEv>
 808054a:	4605      	mov	r5, r0
 808054c:	4817      	ldr	r0, [pc, #92]	; (80805ac <_Z10pwrPublish6String+0x74>)
 808054e:	f006 f8a7 	bl	80866a0 <_ZN9FuelGauge6getSoCEv>
 8080552:	f007 fe31 	bl	80881b8 <__aeabi_f2d>
 8080556:	e9cd 0102 	strd	r0, r1, [sp, #8]
 808055a:	4628      	mov	r0, r5
 808055c:	f007 fe2c 	bl	80881b8 <__aeabi_f2d>
 8080560:	4622      	mov	r2, r4
 8080562:	e9cd 0100 	strd	r0, r1, [sp]
 8080566:	a806      	add	r0, sp, #24
 8080568:	4911      	ldr	r1, [pc, #68]	; (80805b0 <_Z10pwrPublish6String+0x78>)
 808056a:	f004 fd47 	bl	8084ffc <_ZN6String6formatEPKcz>
 808056e:	4b11      	ldr	r3, [pc, #68]	; (80805b4 <_Z10pwrPublish6String+0x7c>)
 8080570:	9a06      	ldr	r2, [sp, #24]
 8080572:	781b      	ldrb	r3, [r3, #0]
 8080574:	4910      	ldr	r1, [pc, #64]	; (80805b8 <_Z10pwrPublish6String+0x80>)
 8080576:	f88d 3000 	strb.w	r3, [sp]
 808057a:	a804      	add	r0, sp, #16
 808057c:	233c      	movs	r3, #60	; 0x3c
 808057e:	f006 faf5 	bl	8086b6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8080582:	a805      	add	r0, sp, #20
 8080584:	f7ff ff54 	bl	8080430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080588:	a806      	add	r0, sp, #24
 808058a:	f004 fbcd 	bl	8084d28 <_ZN6StringD1Ev>
    if (fuel.getSoC()>10){ return 1;}
 808058e:	4807      	ldr	r0, [pc, #28]	; (80805ac <_Z10pwrPublish6String+0x74>)
 8080590:	f006 f886 	bl	80866a0 <_ZN9FuelGauge6getSoCEv>
 8080594:	4909      	ldr	r1, [pc, #36]	; (80805bc <_Z10pwrPublish6String+0x84>)
 8080596:	f008 fc79 	bl	8088e8c <__aeabi_fcmpgt>
 808059a:	2800      	cmp	r0, #0
}
 808059c:	bf14      	ite	ne
 808059e:	2001      	movne	r0, #1
 80805a0:	2002      	moveq	r0, #2
 80805a2:	b00b      	add	sp, #44	; 0x2c
 80805a4:	bd30      	pop	{r4, r5, pc}
 80805a6:	bf00      	nop
 80805a8:	200001cc 	.word	0x200001cc
 80805ac:	20000194 	.word	0x20000194
 80805b0:	08089375 	.word	0x08089375
 80805b4:	20000140 	.word	0x20000140
 80805b8:	08089398 	.word	0x08089398
 80805bc:	41200000 	.word	0x41200000

080805c0 <_Z10accPublish6String>:
int accPublish(String command){
 80805c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  Particle.publish("LJACELRT", String::format("{\"x\":%d,\"y\":%d,\"z\":%d,\"m\":%d}", t.readX(), t.readY(), t.readZ(), t.readXYZmagnitude()), 60, PRIVATE);
 80805c2:	4c16      	ldr	r4, [pc, #88]	; (808061c <_Z10accPublish6String+0x5c>)
int accPublish(String command){
 80805c4:	b089      	sub	sp, #36	; 0x24
  Particle.publish("LJACELRT", String::format("{\"x\":%d,\"y\":%d,\"z\":%d,\"m\":%d}", t.readX(), t.readY(), t.readZ(), t.readXYZmagnitude()), 60, PRIVATE);
 80805c6:	4620      	mov	r0, r4
 80805c8:	f002 fb48 	bl	8082c5c <_ZN13AssetTracker25readXEv>
 80805cc:	4605      	mov	r5, r0
 80805ce:	4620      	mov	r0, r4
 80805d0:	f002 fb4e 	bl	8082c70 <_ZN13AssetTracker25readYEv>
 80805d4:	4606      	mov	r6, r0
 80805d6:	4620      	mov	r0, r4
 80805d8:	f002 fb54 	bl	8082c84 <_ZN13AssetTracker25readZEv>
 80805dc:	4607      	mov	r7, r0
 80805de:	4620      	mov	r0, r4
 80805e0:	f002 fb5a 	bl	8082c98 <_ZN13AssetTracker216readXYZmagnitudeEv>
 80805e4:	4633      	mov	r3, r6
 80805e6:	462a      	mov	r2, r5
 80805e8:	e9cd 7000 	strd	r7, r0, [sp]
 80805ec:	490c      	ldr	r1, [pc, #48]	; (8080620 <_Z10accPublish6String+0x60>)
 80805ee:	a804      	add	r0, sp, #16
 80805f0:	f004 fd04 	bl	8084ffc <_ZN6String6formatEPKcz>
 80805f4:	4b0b      	ldr	r3, [pc, #44]	; (8080624 <_Z10accPublish6String+0x64>)
 80805f6:	9a04      	ldr	r2, [sp, #16]
 80805f8:	781b      	ldrb	r3, [r3, #0]
 80805fa:	490b      	ldr	r1, [pc, #44]	; (8080628 <_Z10accPublish6String+0x68>)
 80805fc:	f88d 3000 	strb.w	r3, [sp]
 8080600:	a802      	add	r0, sp, #8
 8080602:	233c      	movs	r3, #60	; 0x3c
 8080604:	f006 fab2 	bl	8086b6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8080608:	a803      	add	r0, sp, #12
 808060a:	f7ff ff11 	bl	8080430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808060e:	a804      	add	r0, sp, #16
 8080610:	f004 fb8a 	bl	8084d28 <_ZN6StringD1Ev>
}
 8080614:	2001      	movs	r0, #1
 8080616:	b009      	add	sp, #36	; 0x24
 8080618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808061a:	bf00      	nop
 808061c:	20000228 	.word	0x20000228
 8080620:	080893a2 	.word	0x080893a2
 8080624:	20000140 	.word	0x20000140
 8080628:	080893c0 	.word	0x080893c0

0808062c <_Z10envPublish6String>:
int envPublish(String command){
 808062c:	b5f0      	push	{r4, r5, r6, r7, lr}
		delay(2000); // DHT 22 minumum sampling period
 808062e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
int envPublish(String command){
 8080632:	b089      	sub	sp, #36	; 0x24
		delay(2000); // DHT 22 minumum sampling period
 8080634:	f005 ff80 	bl	8086538 <delay>
  	float h = dht.getHumidity();
 8080638:	4820      	ldr	r0, [pc, #128]	; (80806bc <_Z10envPublish6String+0x90>)
 808063a:	f002 fcd1 	bl	8082fe0 <_ZN3DHT11getHumidityEv>
 808063e:	4604      	mov	r4, r0
  	float f = dht.getTempFarenheit();
 8080640:	481e      	ldr	r0, [pc, #120]	; (80806bc <_Z10envPublish6String+0x90>)
 8080642:	f002 fc93 	bl	8082f6c <_ZN3DHT16getTempFarenheitEv>
  	if (isnan(h) || isnan(f)) {
 8080646:	4621      	mov	r1, r4
  	float f = dht.getTempFarenheit();
 8080648:	4605      	mov	r5, r0
  	if (isnan(h) || isnan(f)) {
 808064a:	4620      	mov	r0, r4
 808064c:	f008 fc28 	bl	8088ea0 <__aeabi_fcmpun>
 8080650:	b920      	cbnz	r0, 808065c <_Z10envPublish6String+0x30>
 8080652:	4629      	mov	r1, r5
 8080654:	4628      	mov	r0, r5
 8080656:	f008 fc23 	bl	8088ea0 <__aeabi_fcmpun>
 808065a:	b128      	cbz	r0, 8080668 <_Z10envPublish6String+0x3c>
			if ((transmittingData & SERIALDHTDATA) == SERIALDHTDATA)
 808065c:	4b18      	ldr	r3, [pc, #96]	; (80806c0 <_Z10envPublish6String+0x94>)
 808065e:	681b      	ldr	r3, [r3, #0]
 8080660:	2b00      	cmp	r3, #0
 8080662:	db24      	blt.n	80806ae <_Z10envPublish6String+0x82>
  		return 2;
 8080664:	2002      	movs	r0, #2
 8080666:	e020      	b.n	80806aa <_Z10envPublish6String+0x7e>
    Particle.publish("LJENVMT", String::format("{\"t\":%.2f,\"h\":%.2f}",f,h), 60, PRIVATE);
 8080668:	4628      	mov	r0, r5
 808066a:	f007 fda5 	bl	80881b8 <__aeabi_f2d>
 808066e:	4606      	mov	r6, r0
 8080670:	4620      	mov	r0, r4
 8080672:	460f      	mov	r7, r1
 8080674:	f007 fda0 	bl	80881b8 <__aeabi_f2d>
 8080678:	4632      	mov	r2, r6
 808067a:	e9cd 0100 	strd	r0, r1, [sp]
 808067e:	463b      	mov	r3, r7
 8080680:	4910      	ldr	r1, [pc, #64]	; (80806c4 <_Z10envPublish6String+0x98>)
 8080682:	a804      	add	r0, sp, #16
 8080684:	f004 fcba 	bl	8084ffc <_ZN6String6formatEPKcz>
 8080688:	4b0f      	ldr	r3, [pc, #60]	; (80806c8 <_Z10envPublish6String+0x9c>)
 808068a:	9a04      	ldr	r2, [sp, #16]
 808068c:	781b      	ldrb	r3, [r3, #0]
 808068e:	490f      	ldr	r1, [pc, #60]	; (80806cc <_Z10envPublish6String+0xa0>)
 8080690:	f88d 3000 	strb.w	r3, [sp]
 8080694:	a802      	add	r0, sp, #8
 8080696:	233c      	movs	r3, #60	; 0x3c
 8080698:	f006 fa68 	bl	8086b6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 808069c:	a803      	add	r0, sp, #12
 808069e:	f7ff fec7 	bl	8080430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80806a2:	a804      	add	r0, sp, #16
 80806a4:	f004 fb40 	bl	8084d28 <_ZN6StringD1Ev>
    return 1;
 80806a8:	2001      	movs	r0, #1
}
 80806aa:	b009      	add	sp, #36	; 0x24
 80806ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
      	Serial.println("Failed to read from DHT sensor!");
 80806ae:	f006 fc83 	bl	8086fb8 <_Z16_fetch_usbserialv>
 80806b2:	4907      	ldr	r1, [pc, #28]	; (80806d0 <_Z10envPublish6String+0xa4>)
 80806b4:	f004 fd03 	bl	80850be <_ZN5Print7printlnEPKc>
 80806b8:	e7d4      	b.n	8080664 <_Z10envPublish6String+0x38>
 80806ba:	bf00      	nop
 80806bc:	20000180 	.word	0x20000180
 80806c0:	20000014 	.word	0x20000014
 80806c4:	080893c9 	.word	0x080893c9
 80806c8:	20000140 	.word	0x20000140
 80806cc:	080893dd 	.word	0x080893dd
 80806d0:	080893e5 	.word	0x080893e5

080806d4 <_Z8pubValue6String>:
int pubValue(String command) {
 80806d4:	b530      	push	{r4, r5, lr}
 80806d6:	492a      	ldr	r1, [pc, #168]	; (8080780 <_Z8pubValue6String+0xac>)
 80806d8:	b08d      	sub	sp, #52	; 0x34
 80806da:	4605      	mov	r5, r0
 80806dc:	f004 fc13 	bl	8084f06 <_ZNK6String6equalsEPKc>
  if (command == "pwr") {
 80806e0:	b168      	cbz	r0, 80806fe <_Z8pubValue6String+0x2a>
    return pwrPublish(command);
 80806e2:	4629      	mov	r1, r5
 80806e4:	a808      	add	r0, sp, #32
 80806e6:	f004 fbb3 	bl	8084e50 <_ZN6StringC1ERKS_>
 80806ea:	a808      	add	r0, sp, #32
 80806ec:	f7ff ff24 	bl	8080538 <_Z10pwrPublish6String>
    return envPublish(command);
 80806f0:	4604      	mov	r4, r0
	  Particle.publish("LJCMDERR", String::format("{\"cmd\":\"%s\"}", command), 60, PRIVATE);
 80806f2:	a808      	add	r0, sp, #32
 80806f4:	f004 fb18 	bl	8084d28 <_ZN6StringD1Ev>
}
 80806f8:	4620      	mov	r0, r4
 80806fa:	b00d      	add	sp, #52	; 0x34
 80806fc:	bd30      	pop	{r4, r5, pc}
 80806fe:	4628      	mov	r0, r5
 8080700:	4920      	ldr	r1, [pc, #128]	; (8080784 <_Z8pubValue6String+0xb0>)
 8080702:	f004 fc00 	bl	8084f06 <_ZNK6String6equalsEPKc>
  } else if (command == "gps") {
 8080706:	b138      	cbz	r0, 8080718 <_Z8pubValue6String+0x44>
    return gpsPublish(command);
 8080708:	4629      	mov	r1, r5
 808070a:	a808      	add	r0, sp, #32
 808070c:	f004 fba0 	bl	8084e50 <_ZN6StringC1ERKS_>
 8080710:	a808      	add	r0, sp, #32
 8080712:	f7ff fea3 	bl	808045c <_Z10gpsPublish6String>
 8080716:	e7eb      	b.n	80806f0 <_Z8pubValue6String+0x1c>
 8080718:	4628      	mov	r0, r5
 808071a:	491b      	ldr	r1, [pc, #108]	; (8080788 <_Z8pubValue6String+0xb4>)
 808071c:	f004 fbf3 	bl	8084f06 <_ZNK6String6equalsEPKc>
  } else if (command == "acc") {
 8080720:	b138      	cbz	r0, 8080732 <_Z8pubValue6String+0x5e>
    return accPublish(command);
 8080722:	4629      	mov	r1, r5
 8080724:	a808      	add	r0, sp, #32
 8080726:	f004 fb93 	bl	8084e50 <_ZN6StringC1ERKS_>
 808072a:	a808      	add	r0, sp, #32
 808072c:	f7ff ff48 	bl	80805c0 <_Z10accPublish6String>
 8080730:	e7de      	b.n	80806f0 <_Z8pubValue6String+0x1c>
 8080732:	4916      	ldr	r1, [pc, #88]	; (808078c <_Z8pubValue6String+0xb8>)
 8080734:	4628      	mov	r0, r5
 8080736:	f004 fbe6 	bl	8084f06 <_ZNK6String6equalsEPKc>
  } else if (command == "env") {
 808073a:	4604      	mov	r4, r0
    return envPublish(command);
 808073c:	4629      	mov	r1, r5
 808073e:	a808      	add	r0, sp, #32
  } else if (command == "env") {
 8080740:	b12c      	cbz	r4, 808074e <_Z8pubValue6String+0x7a>
    return envPublish(command);
 8080742:	f004 fb85 	bl	8084e50 <_ZN6StringC1ERKS_>
 8080746:	a808      	add	r0, sp, #32
 8080748:	f7ff ff70 	bl	808062c <_Z10envPublish6String>
 808074c:	e7d0      	b.n	80806f0 <_Z8pubValue6String+0x1c>
	  Particle.publish("LJCMDERR", String::format("{\"cmd\":\"%s\"}", command), 60, PRIVATE);
 808074e:	f004 fb7f 	bl	8084e50 <_ZN6StringC1ERKS_>
 8080752:	aa08      	add	r2, sp, #32
 8080754:	a804      	add	r0, sp, #16
 8080756:	490e      	ldr	r1, [pc, #56]	; (8080790 <_Z8pubValue6String+0xbc>)
 8080758:	f004 fc50 	bl	8084ffc <_ZN6String6formatEPKcz>
 808075c:	4b0d      	ldr	r3, [pc, #52]	; (8080794 <_Z8pubValue6String+0xc0>)
 808075e:	9a04      	ldr	r2, [sp, #16]
 8080760:	781b      	ldrb	r3, [r3, #0]
 8080762:	490d      	ldr	r1, [pc, #52]	; (8080798 <_Z8pubValue6String+0xc4>)
 8080764:	f88d 3000 	strb.w	r3, [sp]
 8080768:	a802      	add	r0, sp, #8
 808076a:	233c      	movs	r3, #60	; 0x3c
 808076c:	f006 f9fe 	bl	8086b6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8080770:	a803      	add	r0, sp, #12
 8080772:	f7ff fe5d 	bl	8080430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080776:	a804      	add	r0, sp, #16
 8080778:	f004 fad6 	bl	8084d28 <_ZN6StringD1Ev>
 808077c:	e7b9      	b.n	80806f2 <_Z8pubValue6String+0x1e>
 808077e:	bf00      	nop
 8080780:	08089405 	.word	0x08089405
 8080784:	08089409 	.word	0x08089409
 8080788:	0808940d 	.word	0x0808940d
 808078c:	08089411 	.word	0x08089411
 8080790:	08089415 	.word	0x08089415
 8080794:	20000140 	.word	0x20000140
 8080798:	08089422 	.word	0x08089422

0808079c <_Z16checkPowerStatusv>:
int checkPowerStatus() {
 808079c:	b570      	push	{r4, r5, r6, lr}
    bool currentPower = pc.getHasPower();
 808079e:	481b      	ldr	r0, [pc, #108]	; (808080c <_Z16checkPowerStatusv+0x70>)
int checkPowerStatus() {
 80807a0:	b08a      	sub	sp, #40	; 0x28
    bool currentPower = pc.getHasPower();
 80807a2:	f002 f913 	bl	80829cc <_ZN10PowerCheck11getHasPowerEv>
    if (lastPower != currentPower) {
 80807a6:	4e1a      	ldr	r6, [pc, #104]	; (8080810 <_Z16checkPowerStatusv+0x74>)
    bool currentPower = pc.getHasPower();
 80807a8:	4604      	mov	r4, r0
    if (lastPower != currentPower) {
 80807aa:	7833      	ldrb	r3, [r6, #0]
 80807ac:	4283      	cmp	r3, r0
 80807ae:	d029      	beq.n	8080804 <_Z16checkPowerStatusv+0x68>
      if ((transmittingData & TRANSMITTINGPWRDATA) == TRANSMITTINGPWRDATA) {
 80807b0:	4b18      	ldr	r3, [pc, #96]	; (8080814 <_Z16checkPowerStatusv+0x78>)
 80807b2:	681b      	ldr	r3, [r3, #0]
 80807b4:	075b      	lsls	r3, r3, #29
 80807b6:	d525      	bpl.n	8080804 <_Z16checkPowerStatusv+0x68>
        Particle.publish("LJPWRSTAT", String::format("{\"s\": %d,\"n\": 1,\"v\":%.2f,\"c\":%.2f}",currentPower,fuel.getVCell(),fuel.getSoC()), 60, PRIVATE );
 80807b8:	4817      	ldr	r0, [pc, #92]	; (8080818 <_Z16checkPowerStatusv+0x7c>)
 80807ba:	f005 ff53 	bl	8086664 <_ZN9FuelGauge8getVCellEv>
 80807be:	4605      	mov	r5, r0
 80807c0:	4815      	ldr	r0, [pc, #84]	; (8080818 <_Z16checkPowerStatusv+0x7c>)
 80807c2:	f005 ff6d 	bl	80866a0 <_ZN9FuelGauge6getSoCEv>
 80807c6:	f007 fcf7 	bl	80881b8 <__aeabi_f2d>
 80807ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80807ce:	4628      	mov	r0, r5
 80807d0:	f007 fcf2 	bl	80881b8 <__aeabi_f2d>
 80807d4:	4622      	mov	r2, r4
 80807d6:	e9cd 0100 	strd	r0, r1, [sp]
 80807da:	4910      	ldr	r1, [pc, #64]	; (808081c <_Z16checkPowerStatusv+0x80>)
 80807dc:	a806      	add	r0, sp, #24
 80807de:	f004 fc0d 	bl	8084ffc <_ZN6String6formatEPKcz>
 80807e2:	4b0f      	ldr	r3, [pc, #60]	; (8080820 <_Z16checkPowerStatusv+0x84>)
 80807e4:	9a06      	ldr	r2, [sp, #24]
 80807e6:	781b      	ldrb	r3, [r3, #0]
 80807e8:	490e      	ldr	r1, [pc, #56]	; (8080824 <_Z16checkPowerStatusv+0x88>)
 80807ea:	f88d 3000 	strb.w	r3, [sp]
 80807ee:	a804      	add	r0, sp, #16
 80807f0:	233c      	movs	r3, #60	; 0x3c
 80807f2:	f006 f9bb 	bl	8086b6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80807f6:	a805      	add	r0, sp, #20
 80807f8:	f7ff fe1a 	bl	8080430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80807fc:	a806      	add	r0, sp, #24
 80807fe:	f004 fa93 	bl	8084d28 <_ZN6StringD1Ev>
        lastPower = currentPower; // note that we only update power status if we actually transmitted data so that when data is turned back on we will report
 8080802:	7034      	strb	r4, [r6, #0]
}
 8080804:	2001      	movs	r0, #1
 8080806:	b00a      	add	sp, #40	; 0x28
 8080808:	bd70      	pop	{r4, r5, r6, pc}
 808080a:	bf00      	nop
 808080c:	200001cc 	.word	0x200001cc
 8080810:	20000011 	.word	0x20000011
 8080814:	20000014 	.word	0x20000014
 8080818:	20000194 	.word	0x20000194
 808081c:	0808942b 	.word	0x0808942b
 8080820:	20000140 	.word	0x20000140
 8080824:	08089398 	.word	0x08089398

08080828 <_Z14checkGPSStatusv>:
void checkGPSStatus() {
 8080828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808082c:	b095      	sub	sp, #84	; 0x54

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 808082e:	f003 fd23 	bl	8084278 <HAL_Timer_Get_Milli_Seconds>
    if (millis()-lastGPSPublish > ((unsigned long) delayGPSMinutes*60*1000)) {
 8080832:	f8df a140 	ldr.w	sl, [pc, #320]	; 8080974 <_Z14checkGPSStatusv+0x14c>
 8080836:	f8da 3000 	ldr.w	r3, [sl]
 808083a:	1ac0      	subs	r0, r0, r3
 808083c:	4b45      	ldr	r3, [pc, #276]	; (8080954 <_Z14checkGPSStatusv+0x12c>)
 808083e:	681a      	ldr	r2, [r3, #0]
 8080840:	f64e 2360 	movw	r3, #60000	; 0xea60
 8080844:	4353      	muls	r3, r2
 8080846:	4298      	cmp	r0, r3
 8080848:	f240 8081 	bls.w	808094e <_Z14checkGPSStatusv+0x126>
        if (t.gpsFix()) {
 808084c:	4842      	ldr	r0, [pc, #264]	; (8080958 <_Z14checkGPSStatusv+0x130>)
 808084e:	f002 f9c9 	bl	8082be4 <_ZN13AssetTracker26gpsFixEv>
 8080852:	2800      	cmp	r0, #0
 8080854:	d07b      	beq.n	808094e <_Z14checkGPSStatusv+0x126>
            if ((transmittingData & TRANSMITTINGGPSDATA) == TRANSMITTINGGPSDATA) {
 8080856:	4b41      	ldr	r3, [pc, #260]	; (808095c <_Z14checkGPSStatusv+0x134>)
 8080858:	681a      	ldr	r2, [r3, #0]
 808085a:	9309      	str	r3, [sp, #36]	; 0x24
 808085c:	f012 0f01 	tst.w	r2, #1
 8080860:	d063      	beq.n	808092a <_Z14checkGPSStatusv+0x102>
							time_t time = Time.now();
 8080862:	f005 fe4e 	bl	8086502 <_ZN9TimeClass3nowEv>
							Time.format(time, TIME_FORMAT_ISO8601_FULL); // 2004-01-10T08:22:04-05:15
 8080866:	f8df b110 	ldr.w	fp, [pc, #272]	; 8080978 <_Z14checkGPSStatusv+0x150>
							time_t time = Time.now();
 808086a:	17c5      	asrs	r5, r0, #31
							Time.format(time, TIME_FORMAT_ISO8601_FULL); // 2004-01-10T08:22:04-05:15
 808086c:	f8db 3000 	ldr.w	r3, [fp]
 8080870:	4602      	mov	r2, r0
 8080872:	493b      	ldr	r1, [pc, #236]	; (8080960 <_Z14checkGPSStatusv+0x138>)
							time_t time = Time.now();
 8080874:	4604      	mov	r4, r0
							Time.format(time, TIME_FORMAT_ISO8601_FULL); // 2004-01-10T08:22:04-05:15
 8080876:	9300      	str	r3, [sp, #0]
 8080878:	a810      	add	r0, sp, #64	; 0x40
 808087a:	462b      	mov	r3, r5
 808087c:	f005 fde2 	bl	8086444 <_ZN9TimeClass6formatExPKc>
 8080880:	a810      	add	r0, sp, #64	; 0x40
 8080882:	f004 fa51 	bl	8084d28 <_ZN6StringD1Ev>
              Particle.publish("LJGPSFIX", String::format("{\"la\":%f,\"lo\":%f,\"ht\":%f,\"ac\":%f,\"tm\":\"%s\"}",t.readLatDeg(),t.readLonDeg(),(t.getAltitude() / 1000),(t.getGpsAccuracy() / 1000),Time.format(time, TIME_FORMAT_ISO8601_FULL).c_str()), 60, PRIVATE);
 8080886:	4834      	ldr	r0, [pc, #208]	; (8080958 <_Z14checkGPSStatusv+0x130>)
 8080888:	f002 f8c8 	bl	8082a1c <_ZN13AssetTracker210readLatDegEv>
 808088c:	4681      	mov	r9, r0
 808088e:	4832      	ldr	r0, [pc, #200]	; (8080958 <_Z14checkGPSStatusv+0x130>)
 8080890:	f002 f8ca 	bl	8082a28 <_ZN13AssetTracker210readLonDegEv>
 8080894:	4606      	mov	r6, r0
 8080896:	4830      	ldr	r0, [pc, #192]	; (8080958 <_Z14checkGPSStatusv+0x130>)
 8080898:	f002 f946 	bl	8082b28 <_ZN13AssetTracker211getAltitudeEv>
 808089c:	4607      	mov	r7, r0
 808089e:	482e      	ldr	r0, [pc, #184]	; (8080958 <_Z14checkGPSStatusv+0x130>)
 80808a0:	f002 f8c8 	bl	8082a34 <_ZN13AssetTracker214getGpsAccuracyEv>
 80808a4:	f8db 3000 	ldr.w	r3, [fp]
 80808a8:	4622      	mov	r2, r4
 80808aa:	4680      	mov	r8, r0
 80808ac:	492c      	ldr	r1, [pc, #176]	; (8080960 <_Z14checkGPSStatusv+0x138>)
 80808ae:	9300      	str	r3, [sp, #0]
 80808b0:	a810      	add	r0, sp, #64	; 0x40
 80808b2:	462b      	mov	r3, r5
 80808b4:	f005 fdc6 	bl	8086444 <_ZN9TimeClass6formatExPKc>
 80808b8:	4648      	mov	r0, r9
 80808ba:	f007 fc7d 	bl	80881b8 <__aeabi_f2d>
 80808be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80808c0:	4604      	mov	r4, r0
 80808c2:	460d      	mov	r5, r1
 80808c4:	4640      	mov	r0, r8
 80808c6:	4927      	ldr	r1, [pc, #156]	; (8080964 <_Z14checkGPSStatusv+0x13c>)
 80808c8:	9306      	str	r3, [sp, #24]
 80808ca:	f008 f9d7 	bl	8088c7c <__aeabi_fdiv>
 80808ce:	f007 fc73 	bl	80881b8 <__aeabi_f2d>
 80808d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80808d6:	4923      	ldr	r1, [pc, #140]	; (8080964 <_Z14checkGPSStatusv+0x13c>)
 80808d8:	4638      	mov	r0, r7
 80808da:	f008 f9cf 	bl	8088c7c <__aeabi_fdiv>
 80808de:	f007 fc6b 	bl	80881b8 <__aeabi_f2d>
 80808e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80808e6:	4630      	mov	r0, r6
 80808e8:	f007 fc66 	bl	80881b8 <__aeabi_f2d>
 80808ec:	4622      	mov	r2, r4
 80808ee:	e9cd 0100 	strd	r0, r1, [sp]
 80808f2:	462b      	mov	r3, r5
 80808f4:	491c      	ldr	r1, [pc, #112]	; (8080968 <_Z14checkGPSStatusv+0x140>)
 80808f6:	a80c      	add	r0, sp, #48	; 0x30
 80808f8:	f004 fb80 	bl	8084ffc <_ZN6String6formatEPKcz>
 80808fc:	4b1b      	ldr	r3, [pc, #108]	; (808096c <_Z14checkGPSStatusv+0x144>)
 80808fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8080900:	781b      	ldrb	r3, [r3, #0]
 8080902:	491b      	ldr	r1, [pc, #108]	; (8080970 <_Z14checkGPSStatusv+0x148>)
 8080904:	f88d 3000 	strb.w	r3, [sp]
 8080908:	a80a      	add	r0, sp, #40	; 0x28
 808090a:	233c      	movs	r3, #60	; 0x3c
 808090c:	f006 f92e 	bl	8086b6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8080910:	a80b      	add	r0, sp, #44	; 0x2c
 8080912:	f7ff fd8d 	bl	8080430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080916:	a80c      	add	r0, sp, #48	; 0x30
 8080918:	f004 fa06 	bl	8084d28 <_ZN6StringD1Ev>
 808091c:	a810      	add	r0, sp, #64	; 0x40
 808091e:	f004 fa03 	bl	8084d28 <_ZN6StringD1Ev>
 8080922:	f003 fca9 	bl	8084278 <HAL_Timer_Get_Milli_Seconds>
              lastGPSPublish = millis();
 8080926:	f8ca 0000 	str.w	r0, [sl]
						if ((transmittingData & SERIALGPSDATA) == SERIALGPSDATA)
 808092a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808092c:	681b      	ldr	r3, [r3, #0]
 808092e:	00db      	lsls	r3, r3, #3
 8080930:	d50d      	bpl.n	808094e <_Z14checkGPSStatusv+0x126>
            	Serial.println(t.readLatLon());
 8080932:	f006 fb41 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8080936:	4604      	mov	r4, r0
 8080938:	4907      	ldr	r1, [pc, #28]	; (8080958 <_Z14checkGPSStatusv+0x130>)
 808093a:	a810      	add	r0, sp, #64	; 0x40
 808093c:	f002 f8fa 	bl	8082b34 <_ZN13AssetTracker210readLatLonEv>
 8080940:	4620      	mov	r0, r4
 8080942:	9910      	ldr	r1, [sp, #64]	; 0x40
 8080944:	f004 fbbb 	bl	80850be <_ZN5Print7printlnEPKc>
 8080948:	a810      	add	r0, sp, #64	; 0x40
 808094a:	f004 f9ed 	bl	8084d28 <_ZN6StringD1Ev>
}
 808094e:	b015      	add	sp, #84	; 0x54
 8080950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8080954:	2000000c 	.word	0x2000000c
 8080958:	20000228 	.word	0x20000228
 808095c:	20000014 	.word	0x20000014
 8080960:	200003e0 	.word	0x200003e0
 8080964:	447a0000 	.word	0x447a0000
 8080968:	08089340 	.word	0x08089340
 808096c:	20000140 	.word	0x20000140
 8080970:	0808936c 	.word	0x0808936c
 8080974:	200001a4 	.word	0x200001a4
 8080978:	200000c4 	.word	0x200000c4

0808097c <_Z16checkAccelStatusv>:
void checkAccelStatus() {
 808097c:	b570      	push	{r4, r5, r6, lr}
      int readMagnitude = t.readXYZmagnitude();
 808097e:	4831      	ldr	r0, [pc, #196]	; (8080a44 <_Z16checkAccelStatusv+0xc8>)
void checkAccelStatus() {
 8080980:	b086      	sub	sp, #24
      int readMagnitude = t.readXYZmagnitude();
 8080982:	f002 f989 	bl	8082c98 <_ZN13AssetTracker216readXYZmagnitudeEv>
      if (readMagnitude > accelThreshold) {
 8080986:	4b30      	ldr	r3, [pc, #192]	; (8080a48 <_Z16checkAccelStatusv+0xcc>)
      int readMagnitude = t.readXYZmagnitude();
 8080988:	4604      	mov	r4, r0
      if (readMagnitude > accelThreshold) {
 808098a:	681b      	ldr	r3, [r3, #0]
 808098c:	4283      	cmp	r3, r0
 808098e:	da23      	bge.n	80809d8 <_Z16checkAccelStatusv+0x5c>
          pubAccel = String::format("{\"x\":%d,\"y\":%d,\"z\":%d,\"m\":%d}", t.readX(), t.readY(), t.readZ(), readMagnitude);
 8080990:	482c      	ldr	r0, [pc, #176]	; (8080a44 <_Z16checkAccelStatusv+0xc8>)
 8080992:	f002 f963 	bl	8082c5c <_ZN13AssetTracker25readXEv>
 8080996:	4605      	mov	r5, r0
 8080998:	482a      	ldr	r0, [pc, #168]	; (8080a44 <_Z16checkAccelStatusv+0xc8>)
 808099a:	f002 f969 	bl	8082c70 <_ZN13AssetTracker25readYEv>
 808099e:	4606      	mov	r6, r0
 80809a0:	4828      	ldr	r0, [pc, #160]	; (8080a44 <_Z16checkAccelStatusv+0xc8>)
 80809a2:	f002 f96f 	bl	8082c84 <_ZN13AssetTracker25readZEv>
 80809a6:	e9cd 0400 	strd	r0, r4, [sp]
 80809aa:	4c28      	ldr	r4, [pc, #160]	; (8080a4c <_Z16checkAccelStatusv+0xd0>)
 80809ac:	4633      	mov	r3, r6
 80809ae:	462a      	mov	r2, r5
 80809b0:	4927      	ldr	r1, [pc, #156]	; (8080a50 <_Z16checkAccelStatusv+0xd4>)
 80809b2:	a802      	add	r0, sp, #8
 80809b4:	f004 fb22 	bl	8084ffc <_ZN6String6formatEPKcz>
 80809b8:	a902      	add	r1, sp, #8
 80809ba:	4620      	mov	r0, r4
 80809bc:	f004 fa53 	bl	8084e66 <_ZN6StringaSEOS_>
 80809c0:	a802      	add	r0, sp, #8
 80809c2:	f004 f9b1 	bl	8084d28 <_ZN6StringD1Ev>
					if ((transmittingData & SERIALACCDATA) == SERIALACCDATA)
 80809c6:	4b23      	ldr	r3, [pc, #140]	; (8080a54 <_Z16checkAccelStatusv+0xd8>)
 80809c8:	681b      	ldr	r3, [r3, #0]
 80809ca:	009a      	lsls	r2, r3, #2
 80809cc:	d504      	bpl.n	80809d8 <_Z16checkAccelStatusv+0x5c>
          	Serial.println(pubAccel);
 80809ce:	f006 faf3 	bl	8086fb8 <_Z16_fetch_usbserialv>
 80809d2:	6821      	ldr	r1, [r4, #0]
 80809d4:	f004 fb73 	bl	80850be <_ZN5Print7printlnEPKc>
 80809d8:	f003 fc4e 	bl	8084278 <HAL_Timer_Get_Milli_Seconds>
      if (millis()-lastACCPublish > ((unsigned long) delayACCMinutes*60*1000)) {
 80809dc:	4d1e      	ldr	r5, [pc, #120]	; (8080a58 <_Z16checkAccelStatusv+0xdc>)
 80809de:	682b      	ldr	r3, [r5, #0]
 80809e0:	1ac0      	subs	r0, r0, r3
 80809e2:	4b1e      	ldr	r3, [pc, #120]	; (8080a5c <_Z16checkAccelStatusv+0xe0>)
 80809e4:	681a      	ldr	r2, [r3, #0]
 80809e6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80809ea:	4353      	muls	r3, r2
 80809ec:	4298      	cmp	r0, r3
 80809ee:	d927      	bls.n	8080a40 <_Z16checkAccelStatusv+0xc4>
          if ((transmittingData & TRANSMITTINGACCDATA) == TRANSMITTINGACCDATA) {
 80809f0:	4b18      	ldr	r3, [pc, #96]	; (8080a54 <_Z16checkAccelStatusv+0xd8>)
 80809f2:	681b      	ldr	r3, [r3, #0]
 80809f4:	079b      	lsls	r3, r3, #30
 80809f6:	d523      	bpl.n	8080a40 <_Z16checkAccelStatusv+0xc4>
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 80809f8:	4c14      	ldr	r4, [pc, #80]	; (8080a4c <_Z16checkAccelStatusv+0xd0>)
 80809fa:	4919      	ldr	r1, [pc, #100]	; (8080a60 <_Z16checkAccelStatusv+0xe4>)
 80809fc:	4620      	mov	r0, r4
 80809fe:	f004 fa82 	bl	8084f06 <_ZNK6String6equalsEPKc>
            if (pubAccel != "") {
 8080a02:	b9e8      	cbnz	r0, 8080a40 <_Z16checkAccelStatusv+0xc4>
 8080a04:	4b17      	ldr	r3, [pc, #92]	; (8080a64 <_Z16checkAccelStatusv+0xe8>)
 8080a06:	4918      	ldr	r1, [pc, #96]	; (8080a68 <_Z16checkAccelStatusv+0xec>)
 8080a08:	781b      	ldrb	r3, [r3, #0]
 8080a0a:	a802      	add	r0, sp, #8
 8080a0c:	f88d 3000 	strb.w	r3, [sp]
 8080a10:	6822      	ldr	r2, [r4, #0]
 8080a12:	233c      	movs	r3, #60	; 0x3c
 8080a14:	f006 f8aa 	bl	8086b6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8080a18:	a803      	add	r0, sp, #12
 8080a1a:	f7ff fd09 	bl	8080430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
							gpsPublish(""); // publish position if we get an accelleration alert
 8080a1e:	4910      	ldr	r1, [pc, #64]	; (8080a60 <_Z16checkAccelStatusv+0xe4>)
 8080a20:	a802      	add	r0, sp, #8
 8080a22:	f004 f9cb 	bl	8084dbc <_ZN6StringC1EPKc>
 8080a26:	a802      	add	r0, sp, #8
 8080a28:	f7ff fd18 	bl	808045c <_Z10gpsPublish6String>
 8080a2c:	a802      	add	r0, sp, #8
 8080a2e:	f004 f97b 	bl	8084d28 <_ZN6StringD1Ev>
 8080a32:	f003 fc21 	bl	8084278 <HAL_Timer_Get_Milli_Seconds>
              pubAccel = "";
 8080a36:	490a      	ldr	r1, [pc, #40]	; (8080a60 <_Z16checkAccelStatusv+0xe4>)
              lastACCPublish = millis();
 8080a38:	6028      	str	r0, [r5, #0]
              pubAccel = "";
 8080a3a:	4620      	mov	r0, r4
 8080a3c:	f004 fa1b 	bl	8084e76 <_ZN6StringaSEPKc>
}
 8080a40:	b006      	add	sp, #24
 8080a42:	bd70      	pop	{r4, r5, r6, pc}
 8080a44:	20000228 	.word	0x20000228
 8080a48:	20000000 	.word	0x20000000
 8080a4c:	200001d8 	.word	0x200001d8
 8080a50:	080893a2 	.word	0x080893a2
 8080a54:	20000014 	.word	0x20000014
 8080a58:	2000019c 	.word	0x2000019c
 8080a5c:	20000004 	.word	0x20000004
 8080a60:	080898a4 	.word	0x080898a4
 8080a64:	20000140 	.word	0x20000140
 8080a68:	080893c0 	.word	0x080893c0

08080a6c <_Z14checkDHTStatusv>:
void checkDHTStatus() {
 8080a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	delay(2000); // DHT 22 minumum sampling period
 8080a70:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
void checkDHTStatus() {
 8080a74:	b088      	sub	sp, #32
	delay(2000); // DHT 22 minumum sampling period
 8080a76:	f005 fd5f 	bl	8086538 <delay>
	float h = dht.getHumidity();
 8080a7a:	482b      	ldr	r0, [pc, #172]	; (8080b28 <_Z14checkDHTStatusv+0xbc>)
 8080a7c:	f002 fab0 	bl	8082fe0 <_ZN3DHT11getHumidityEv>
 8080a80:	4604      	mov	r4, r0
	float f = dht.getTempFarenheit();
 8080a82:	4829      	ldr	r0, [pc, #164]	; (8080b28 <_Z14checkDHTStatusv+0xbc>)
 8080a84:	f002 fa72 	bl	8082f6c <_ZN3DHT16getTempFarenheitEv>
	if (isnan(h) || isnan(f)) {
 8080a88:	4621      	mov	r1, r4
	float f = dht.getTempFarenheit();
 8080a8a:	4605      	mov	r5, r0
	if (isnan(h) || isnan(f)) {
 8080a8c:	4620      	mov	r0, r4
 8080a8e:	f008 fa07 	bl	8088ea0 <__aeabi_fcmpun>
 8080a92:	b920      	cbnz	r0, 8080a9e <_Z14checkDHTStatusv+0x32>
 8080a94:	4629      	mov	r1, r5
 8080a96:	4628      	mov	r0, r5
 8080a98:	f008 fa02 	bl	8088ea0 <__aeabi_fcmpun>
 8080a9c:	b148      	cbz	r0, 8080ab2 <_Z14checkDHTStatusv+0x46>
		if ((transmittingData & SERIALDHTDATA) == SERIALDHTDATA)
 8080a9e:	4b23      	ldr	r3, [pc, #140]	; (8080b2c <_Z14checkDHTStatusv+0xc0>)
 8080aa0:	681b      	ldr	r3, [r3, #0]
 8080aa2:	2b00      	cmp	r3, #0
 8080aa4:	da13      	bge.n	8080ace <_Z14checkDHTStatusv+0x62>
			Serial.println("Failed to read from DHT sensor!");
 8080aa6:	f006 fa87 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8080aaa:	4921      	ldr	r1, [pc, #132]	; (8080b30 <_Z14checkDHTStatusv+0xc4>)
 8080aac:	f004 fb07 	bl	80850be <_ZN5Print7printlnEPKc>
 8080ab0:	e00d      	b.n	8080ace <_Z14checkDHTStatusv+0x62>
 8080ab2:	f003 fbe1 	bl	8084278 <HAL_Timer_Get_Milli_Seconds>
  if (millis()-lastDHTPublish > ((unsigned long) delayDHTMinutes*60*1000)) {
 8080ab6:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8080b44 <_Z14checkDHTStatusv+0xd8>
 8080aba:	f8d8 3000 	ldr.w	r3, [r8]
 8080abe:	1ac0      	subs	r0, r0, r3
 8080ac0:	4b1c      	ldr	r3, [pc, #112]	; (8080b34 <_Z14checkDHTStatusv+0xc8>)
 8080ac2:	681a      	ldr	r2, [r3, #0]
 8080ac4:	f64e 2360 	movw	r3, #60000	; 0xea60
 8080ac8:	4353      	muls	r3, r2
 8080aca:	4298      	cmp	r0, r3
 8080acc:	d802      	bhi.n	8080ad4 <_Z14checkDHTStatusv+0x68>
}
 8080ace:	b008      	add	sp, #32
 8080ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((transmittingData & TRANSMITTINGDHTDATA) == TRANSMITTINGDHTDATA) {
 8080ad4:	4b15      	ldr	r3, [pc, #84]	; (8080b2c <_Z14checkDHTStatusv+0xc0>)
 8080ad6:	681b      	ldr	r3, [r3, #0]
 8080ad8:	071b      	lsls	r3, r3, #28
 8080ada:	d5f8      	bpl.n	8080ace <_Z14checkDHTStatusv+0x62>
          Particle.publish("LJENVMT", String::format("{\"t\":%.2f,\"h\":%.2f}",f,h), 60, PRIVATE);
 8080adc:	4628      	mov	r0, r5
 8080ade:	f007 fb6b 	bl	80881b8 <__aeabi_f2d>
 8080ae2:	4606      	mov	r6, r0
 8080ae4:	4620      	mov	r0, r4
 8080ae6:	460f      	mov	r7, r1
 8080ae8:	f007 fb66 	bl	80881b8 <__aeabi_f2d>
 8080aec:	4632      	mov	r2, r6
 8080aee:	e9cd 0100 	strd	r0, r1, [sp]
 8080af2:	463b      	mov	r3, r7
 8080af4:	4910      	ldr	r1, [pc, #64]	; (8080b38 <_Z14checkDHTStatusv+0xcc>)
 8080af6:	a804      	add	r0, sp, #16
 8080af8:	f004 fa80 	bl	8084ffc <_ZN6String6formatEPKcz>
 8080afc:	4b0f      	ldr	r3, [pc, #60]	; (8080b3c <_Z14checkDHTStatusv+0xd0>)
 8080afe:	9a04      	ldr	r2, [sp, #16]
 8080b00:	781b      	ldrb	r3, [r3, #0]
 8080b02:	490f      	ldr	r1, [pc, #60]	; (8080b40 <_Z14checkDHTStatusv+0xd4>)
 8080b04:	f88d 3000 	strb.w	r3, [sp]
 8080b08:	a802      	add	r0, sp, #8
 8080b0a:	233c      	movs	r3, #60	; 0x3c
 8080b0c:	f006 f82e 	bl	8086b6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8080b10:	a803      	add	r0, sp, #12
 8080b12:	f7ff fc8d 	bl	8080430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080b16:	a804      	add	r0, sp, #16
 8080b18:	f004 f906 	bl	8084d28 <_ZN6StringD1Ev>
 8080b1c:	f003 fbac 	bl	8084278 <HAL_Timer_Get_Milli_Seconds>
          lastDHTPublish = millis();
 8080b20:	f8c8 0000 	str.w	r0, [r8]
 8080b24:	e7d3      	b.n	8080ace <_Z14checkDHTStatusv+0x62>
 8080b26:	bf00      	nop
 8080b28:	20000180 	.word	0x20000180
 8080b2c:	20000014 	.word	0x20000014
 8080b30:	080893e5 	.word	0x080893e5
 8080b34:	20000008 	.word	0x20000008
 8080b38:	080893c9 	.word	0x080893c9
 8080b3c:	20000140 	.word	0x20000140
 8080b40:	080893dd 	.word	0x080893dd
 8080b44:	200001a0 	.word	0x200001a0

08080b48 <loop>:
void loop() {
 8080b48:	b508      	push	{r3, lr}
	batteryCheck.loop();
 8080b4a:	4811      	ldr	r0, [pc, #68]	; (8080b90 <loop+0x48>)
 8080b4c:	f000 ff54 	bl	80819f8 <_ZN12BatteryCheck4loopEv>
	sessionCheck.loop();
 8080b50:	4810      	ldr	r0, [pc, #64]	; (8080b94 <loop+0x4c>)
 8080b52:	f001 fc4b 	bl	80823ec <_ZN12SessionCheck4loopEv>
	connectionCheck.loop();
 8080b56:	4810      	ldr	r0, [pc, #64]	; (8080b98 <loop+0x50>)
 8080b58:	f001 fa28 	bl	8081fac <_ZN15ConnectionCheck4loopEv>
	connectionEvents.loop();
 8080b5c:	480f      	ldr	r0, [pc, #60]	; (8080b9c <loop+0x54>)
 8080b5e:	f001 fe19 	bl	8082794 <_ZN16ConnectionEvents4loopEv>
	tester.loop();
 8080b62:	480f      	ldr	r0, [pc, #60]	; (8080ba0 <loop+0x58>)
 8080b64:	f001 f948 	bl	8081df8 <_ZN6Tester4loopEv>
  checkAccelStatus();
 8080b68:	f7ff ff08 	bl	808097c <_Z16checkAccelStatusv>
  checkGPSStatus();
 8080b6c:	f7ff fe5c 	bl	8080828 <_Z14checkGPSStatusv>
  checkPowerStatus();
 8080b70:	f7ff fe14 	bl	808079c <_Z16checkPowerStatusv>
  checkDHTStatus();
 8080b74:	f7ff ff7a 	bl	8080a6c <_Z14checkDHTStatusv>
  if ((transmittingData & SERIALLOOPDATA) == SERIALLOOPDATA)
 8080b78:	4b0a      	ldr	r3, [pc, #40]	; (8080ba4 <loop+0x5c>)
 8080b7a:	681b      	ldr	r3, [r3, #0]
 8080b7c:	011b      	lsls	r3, r3, #4
 8080b7e:	d506      	bpl.n	8080b8e <loop+0x46>
    Serial.println("End Of loop() function");
 8080b80:	f006 fa1a 	bl	8086fb8 <_Z16_fetch_usbserialv>
}
 8080b84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.println("End Of loop() function");
 8080b88:	4907      	ldr	r1, [pc, #28]	; (8080ba8 <loop+0x60>)
 8080b8a:	f004 ba98 	b.w	80850be <_ZN5Print7printlnEPKc>
}
 8080b8e:	bd08      	pop	{r3, pc}
 8080b90:	20000144 	.word	0x20000144
 8080b94:	200001e8 	.word	0x200001e8
 8080b98:	20000154 	.word	0x20000154
 8080b9c:	20000174 	.word	0x20000174
 8080ba0:	2000022c 	.word	0x2000022c
 8080ba4:	20000014 	.word	0x20000014
 8080ba8:	0808944e 	.word	0x0808944e

08080bac <_Z9postValue6String>:

// Type the name of the value you want to see into the console function
// argument and it will be published.
// See showAll() above for names of values and units.
int postValue(String cmd)
{
 8080bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080bb0:	b0a1      	sub	sp, #132	; 0x84
    String buf; // for publishing values
 8080bb2:	ae18      	add	r6, sp, #96	; 0x60
 8080bb4:	49a6      	ldr	r1, [pc, #664]	; (8080e50 <_Z9postValue6String+0x2a4>)
{
 8080bb6:	4605      	mov	r5, r0
    String buf; // for publishing values
 8080bb8:	4630      	mov	r0, r6
 8080bba:	f004 f8ff 	bl	8084dbc <_ZN6StringC1EPKc>

    bool initComplete = t.gpsInitComplete();
 8080bbe:	48a5      	ldr	r0, [pc, #660]	; (8080e54 <_Z9postValue6String+0x2a8>)
 8080bc0:	f002 f80a 	bl	8082bd8 <_ZN13AssetTracker215gpsInitCompleteEv>
 8080bc4:	9015      	str	r0, [sp, #84]	; 0x54
    uint8_t hour = t.getHour();
 8080bc6:	48a3      	ldr	r0, [pc, #652]	; (8080e54 <_Z9postValue6String+0x2a8>)
 8080bc8:	f001 ff6c 	bl	8082aa4 <_ZN13AssetTracker27getHourEv>
 8080bcc:	4683      	mov	fp, r0
    uint8_t minute = t.getMinute();
 8080bce:	48a1      	ldr	r0, [pc, #644]	; (8080e54 <_Z9postValue6String+0x2a8>)
 8080bd0:	f001 ff6e 	bl	8082ab0 <_ZN13AssetTracker29getMinuteEv>
 8080bd4:	4682      	mov	sl, r0
    uint8_t seconds = t.getSeconds();
 8080bd6:	489f      	ldr	r0, [pc, #636]	; (8080e54 <_Z9postValue6String+0x2a8>)
 8080bd8:	f001 ff70 	bl	8082abc <_ZN13AssetTracker210getSecondsEv>
 8080bdc:	4681      	mov	r9, r0
    uint8_t month = t.getMonth();
 8080bde:	489d      	ldr	r0, [pc, #628]	; (8080e54 <_Z9postValue6String+0x2a8>)
 8080be0:	f001 ff7e 	bl	8082ae0 <_ZN13AssetTracker28getMonthEv>
 8080be4:	4680      	mov	r8, r0
    uint8_t day = t.getDay();
 8080be6:	489b      	ldr	r0, [pc, #620]	; (8080e54 <_Z9postValue6String+0x2a8>)
 8080be8:	f001 ff80 	bl	8082aec <_ZN13AssetTracker26getDayEv>
 8080bec:	4607      	mov	r7, r0
    uint16_t year = t.getYear();
 8080bee:	4899      	ldr	r0, [pc, #612]	; (8080e54 <_Z9postValue6String+0x2a8>)
 8080bf0:	f001 ff70 	bl	8082ad4 <_ZN13AssetTracker27getYearEv>
 8080bf4:	9014      	str	r0, [sp, #80]	; 0x50
    uint16_t milliseconds = t.getMilliseconds();
 8080bf6:	4897      	ldr	r0, [pc, #604]	; (8080e54 <_Z9postValue6String+0x2a8>)
 8080bf8:	f001 ff66 	bl	8082ac8 <_ZN13AssetTracker215getMillisecondsEv>
 8080bfc:	9002      	str	r0, [sp, #8]
    float latitude = t.readLat();
 8080bfe:	4895      	ldr	r0, [pc, #596]	; (8080e54 <_Z9postValue6String+0x2a8>)
 8080c00:	f001 ff00 	bl	8082a04 <_ZN13AssetTracker27readLatEv>
 8080c04:	9005      	str	r0, [sp, #20]
    float longitude = t.readLon();
 8080c06:	4893      	ldr	r0, [pc, #588]	; (8080e54 <_Z9postValue6String+0x2a8>)
 8080c08:	f001 ff02 	bl	8082a10 <_ZN13AssetTracker27readLonEv>
 8080c0c:	9006      	str	r0, [sp, #24]
    float latitudeDegrees = t.readLatDeg();
 8080c0e:	4891      	ldr	r0, [pc, #580]	; (8080e54 <_Z9postValue6String+0x2a8>)
 8080c10:	f001 ff04 	bl	8082a1c <_ZN13AssetTracker210readLatDegEv>
 8080c14:	9007      	str	r0, [sp, #28]
    float longitudeDegrees = t.readLonDeg();
 8080c16:	488f      	ldr	r0, [pc, #572]	; (8080e54 <_Z9postValue6String+0x2a8>)
 8080c18:	f001 ff06 	bl	8082a28 <_ZN13AssetTracker210readLonDegEv>
 8080c1c:	9008      	str	r0, [sp, #32]
    float geoidheight = t.getGeoIdHeight();
 8080c1e:	488d      	ldr	r0, [pc, #564]	; (8080e54 <_Z9postValue6String+0x2a8>)
 8080c20:	f001 ff7c 	bl	8082b1c <_ZN13AssetTracker214getGeoIdHeightEv>
 8080c24:	9009      	str	r0, [sp, #36]	; 0x24
    float altitude = t.getAltitude();
 8080c26:	488b      	ldr	r0, [pc, #556]	; (8080e54 <_Z9postValue6String+0x2a8>)
 8080c28:	f001 ff7e 	bl	8082b28 <_ZN13AssetTracker211getAltitudeEv>
 8080c2c:	900a      	str	r0, [sp, #40]	; 0x28
    float speed = t.getSpeed();
 8080c2e:	4889      	ldr	r0, [pc, #548]	; (8080e54 <_Z9postValue6String+0x2a8>)
 8080c30:	f001 ff6e 	bl	8082b10 <_ZN13AssetTracker28getSpeedEv>
 8080c34:	900b      	str	r0, [sp, #44]	; 0x2c
    uint8_t fixquality = t.getFixQuality();
 8080c36:	4887      	ldr	r0, [pc, #540]	; (8080e54 <_Z9postValue6String+0x2a8>)
 8080c38:	f001 ff64 	bl	8082b04 <_ZN13AssetTracker213getFixQualityEv>
 8080c3c:	900c      	str	r0, [sp, #48]	; 0x30
    uint8_t satellites = t.getSatellites();
 8080c3e:	4885      	ldr	r0, [pc, #532]	; (8080e54 <_Z9postValue6String+0x2a8>)
 8080c40:	f001 ff5a 	bl	8082af8 <_ZN13AssetTracker213getSatellitesEv>
 8080c44:	900d      	str	r0, [sp, #52]	; 0x34
    uint32_t horzAcc = t.getHaccuracy();
 8080c46:	4883      	ldr	r0, [pc, #524]	; (8080e54 <_Z9postValue6String+0x2a8>)
 8080c48:	f001 fefc 	bl	8082a44 <_ZN13AssetTracker212getHaccuracyEv>
 8080c4c:	900e      	str	r0, [sp, #56]	; 0x38
    uint32_t vertAcc = t.getVaccuracy();
 8080c4e:	4881      	ldr	r0, [pc, #516]	; (8080e54 <_Z9postValue6String+0x2a8>)
 8080c50:	f001 fefe 	bl	8082a50 <_ZN13AssetTracker212getVaccuracyEv>
 8080c54:	900f      	str	r0, [sp, #60]	; 0x3c
    int32_t velN = t.getVelN();
 8080c56:	487f      	ldr	r0, [pc, #508]	; (8080e54 <_Z9postValue6String+0x2a8>)
 8080c58:	f001 ff00 	bl	8082a5c <_ZN13AssetTracker27getVelNEv>
 8080c5c:	9010      	str	r0, [sp, #64]	; 0x40
    uint32_t velE = t.getVelE();
 8080c5e:	487d      	ldr	r0, [pc, #500]	; (8080e54 <_Z9postValue6String+0x2a8>)
 8080c60:	f001 ff02 	bl	8082a68 <_ZN13AssetTracker27getVelEEv>
 8080c64:	9003      	str	r0, [sp, #12]
    uint32_t velD = t.getVelD();
 8080c66:	487b      	ldr	r0, [pc, #492]	; (8080e54 <_Z9postValue6String+0x2a8>)
 8080c68:	f001 ff04 	bl	8082a74 <_ZN13AssetTracker27getVelDEv>
 8080c6c:	9004      	str	r0, [sp, #16]
    int32_t gSpeed = t.getGspeed();
 8080c6e:	4879      	ldr	r0, [pc, #484]	; (8080e54 <_Z9postValue6String+0x2a8>)
 8080c70:	f001 ff12 	bl	8082a98 <_ZN13AssetTracker29getGspeedEv>
 8080c74:	9011      	str	r0, [sp, #68]	; 0x44
    int32_t odoTrip = t.getOdoTrip();
 8080c76:	4877      	ldr	r0, [pc, #476]	; (8080e54 <_Z9postValue6String+0x2a8>)
 8080c78:	f001 ff02 	bl	8082a80 <_ZN13AssetTracker210getOdoTripEv>
 8080c7c:	9012      	str	r0, [sp, #72]	; 0x48
    int32_t odoTotal = t.getOdoTotal();
 8080c7e:	4875      	ldr	r0, [pc, #468]	; (8080e54 <_Z9postValue6String+0x2a8>)
 8080c80:	f001 ff04 	bl	8082a8c <_ZN13AssetTracker211getOdoTotalEv>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8080c84:	4974      	ldr	r1, [pc, #464]	; (8080e58 <_Z9postValue6String+0x2ac>)
 8080c86:	9013      	str	r0, [sp, #76]	; 0x4c
 8080c88:	4628      	mov	r0, r5
 8080c8a:	f004 f93c 	bl	8084f06 <_ZNK6String6equalsEPKc>
 8080c8e:	ac1c      	add	r4, sp, #112	; 0x70



    // This implementation is a bit crude but it was easy to implement
    // and simple to read.
    if (cmd == "initComplete"){
 8080c90:	b368      	cbz	r0, 8080cee <_Z9postValue6String+0x142>
        buf = String::format("%d", initComplete);
 8080c92:	9a15      	ldr	r2, [sp, #84]	; 0x54
    } else if (cmd == "hour"){
        buf = String::format("%d", hour);
 8080c94:	4620      	mov	r0, r4
 8080c96:	4971      	ldr	r1, [pc, #452]	; (8080e5c <_Z9postValue6String+0x2b0>)
 8080c98:	f004 f9b0 	bl	8084ffc <_ZN6String6formatEPKcz>
 8080c9c:	4621      	mov	r1, r4
 8080c9e:	4630      	mov	r0, r6
 8080ca0:	f004 f8e1 	bl	8084e66 <_ZN6StringaSEOS_>
 8080ca4:	4620      	mov	r0, r4
 8080ca6:	f004 f83f 	bl	8084d28 <_ZN6StringD1Ev>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8080caa:	4629      	mov	r1, r5
 8080cac:	4620      	mov	r0, r4
 8080cae:	f004 f8cf 	bl	8084e50 <_ZN6StringC1ERKS_>
    } else if (cmd == "odoTotal"){
        buf = String::format("%lu", odoTotal);
    } else {
        buf = "Don't know that one. Check spelling.";
    }
    Particle.publish("LJCMDVAL", cmd + ": " + buf, 60, PRIVATE);
 8080cb2:	4620      	mov	r0, r4
 8080cb4:	496a      	ldr	r1, [pc, #424]	; (8080e60 <_Z9postValue6String+0x2b4>)
 8080cb6:	f004 f912 	bl	8084ede <_ZplRK15StringSumHelperPKc>
 8080cba:	4631      	mov	r1, r6
 8080cbc:	f004 f903 	bl	8084ec6 <_ZplRK15StringSumHelperRK6String>
        operator const char*() const { return c_str(); }
 8080cc0:	4b68      	ldr	r3, [pc, #416]	; (8080e64 <_Z9postValue6String+0x2b8>)
 8080cc2:	6802      	ldr	r2, [r0, #0]
 8080cc4:	781b      	ldrb	r3, [r3, #0]
 8080cc6:	4968      	ldr	r1, [pc, #416]	; (8080e68 <_Z9postValue6String+0x2bc>)
 8080cc8:	f88d 3000 	strb.w	r3, [sp]
 8080ccc:	a816      	add	r0, sp, #88	; 0x58
 8080cce:	233c      	movs	r3, #60	; 0x3c
 8080cd0:	f005 ff4c 	bl	8086b6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8080cd4:	a817      	add	r0, sp, #92	; 0x5c
 8080cd6:	f7ff fbab 	bl	8080430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class StringSumHelper : public String
 8080cda:	4620      	mov	r0, r4
 8080cdc:	f004 f824 	bl	8084d28 <_ZN6StringD1Ev>
    String buf; // for publishing values
 8080ce0:	4630      	mov	r0, r6
 8080ce2:	f004 f821 	bl	8084d28 <_ZN6StringD1Ev>


    return 1;
}
 8080ce6:	2001      	movs	r0, #1
 8080ce8:	b021      	add	sp, #132	; 0x84
 8080cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8080cee:	4628      	mov	r0, r5
 8080cf0:	495e      	ldr	r1, [pc, #376]	; (8080e6c <_Z9postValue6String+0x2c0>)
 8080cf2:	f004 f908 	bl	8084f06 <_ZNK6String6equalsEPKc>
    } else if (cmd == "hour"){
 8080cf6:	b108      	cbz	r0, 8080cfc <_Z9postValue6String+0x150>
        buf = String::format("%d", hour);
 8080cf8:	465a      	mov	r2, fp
 8080cfa:	e7cb      	b.n	8080c94 <_Z9postValue6String+0xe8>
 8080cfc:	4628      	mov	r0, r5
 8080cfe:	495c      	ldr	r1, [pc, #368]	; (8080e70 <_Z9postValue6String+0x2c4>)
 8080d00:	f004 f901 	bl	8084f06 <_ZNK6String6equalsEPKc>
    } else if (cmd == "minute"){
 8080d04:	b108      	cbz	r0, 8080d0a <_Z9postValue6String+0x15e>
        buf = String::format("%d", minute);
 8080d06:	4652      	mov	r2, sl
 8080d08:	e7c4      	b.n	8080c94 <_Z9postValue6String+0xe8>
 8080d0a:	4628      	mov	r0, r5
 8080d0c:	4959      	ldr	r1, [pc, #356]	; (8080e74 <_Z9postValue6String+0x2c8>)
 8080d0e:	f004 f8fa 	bl	8084f06 <_ZNK6String6equalsEPKc>
    } else if (cmd == "seconds"){
 8080d12:	b108      	cbz	r0, 8080d18 <_Z9postValue6String+0x16c>
        buf = String::format("%d", seconds);
 8080d14:	464a      	mov	r2, r9
 8080d16:	e7bd      	b.n	8080c94 <_Z9postValue6String+0xe8>
 8080d18:	4628      	mov	r0, r5
 8080d1a:	4957      	ldr	r1, [pc, #348]	; (8080e78 <_Z9postValue6String+0x2cc>)
 8080d1c:	f004 f8f3 	bl	8084f06 <_ZNK6String6equalsEPKc>
    } else if (cmd == "month"){
 8080d20:	b108      	cbz	r0, 8080d26 <_Z9postValue6String+0x17a>
        buf = String::format("%d", month);
 8080d22:	4642      	mov	r2, r8
 8080d24:	e7b6      	b.n	8080c94 <_Z9postValue6String+0xe8>
 8080d26:	4628      	mov	r0, r5
 8080d28:	4954      	ldr	r1, [pc, #336]	; (8080e7c <_Z9postValue6String+0x2d0>)
 8080d2a:	f004 f8ec 	bl	8084f06 <_ZNK6String6equalsEPKc>
    } else if (cmd == "day"){
 8080d2e:	b108      	cbz	r0, 8080d34 <_Z9postValue6String+0x188>
        buf = String::format("%d", day);
 8080d30:	463a      	mov	r2, r7
 8080d32:	e7af      	b.n	8080c94 <_Z9postValue6String+0xe8>
 8080d34:	4628      	mov	r0, r5
 8080d36:	4952      	ldr	r1, [pc, #328]	; (8080e80 <_Z9postValue6String+0x2d4>)
 8080d38:	f004 f8e5 	bl	8084f06 <_ZNK6String6equalsEPKc>
    } else if (cmd == "year"){
 8080d3c:	b108      	cbz	r0, 8080d42 <_Z9postValue6String+0x196>
        buf = String::format("%d", year);
 8080d3e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8080d40:	e7a8      	b.n	8080c94 <_Z9postValue6String+0xe8>
 8080d42:	4628      	mov	r0, r5
 8080d44:	494f      	ldr	r1, [pc, #316]	; (8080e84 <_Z9postValue6String+0x2d8>)
 8080d46:	f004 f8de 	bl	8084f06 <_ZNK6String6equalsEPKc>
    } else if (cmd == "milliseconds"){
 8080d4a:	b110      	cbz	r0, 8080d52 <_Z9postValue6String+0x1a6>
        buf = String::format("%d", milliseconds);
 8080d4c:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8080d50:	e7a0      	b.n	8080c94 <_Z9postValue6String+0xe8>
 8080d52:	4628      	mov	r0, r5
 8080d54:	494c      	ldr	r1, [pc, #304]	; (8080e88 <_Z9postValue6String+0x2dc>)
 8080d56:	f004 f8d6 	bl	8084f06 <_ZNK6String6equalsEPKc>
    } else if (cmd == "latitude"){
 8080d5a:	b148      	cbz	r0, 8080d70 <_Z9postValue6String+0x1c4>
        buf = String::format("%f", latitude);
 8080d5c:	9805      	ldr	r0, [sp, #20]
 8080d5e:	f007 fa2b 	bl	80881b8 <__aeabi_f2d>
 8080d62:	4602      	mov	r2, r0
 8080d64:	460b      	mov	r3, r1
 8080d66:	4620      	mov	r0, r4
 8080d68:	4948      	ldr	r1, [pc, #288]	; (8080e8c <_Z9postValue6String+0x2e0>)
 8080d6a:	f004 f947 	bl	8084ffc <_ZN6String6formatEPKcz>
 8080d6e:	e795      	b.n	8080c9c <_Z9postValue6String+0xf0>
 8080d70:	4628      	mov	r0, r5
 8080d72:	4947      	ldr	r1, [pc, #284]	; (8080e90 <_Z9postValue6String+0x2e4>)
 8080d74:	f004 f8c7 	bl	8084f06 <_ZNK6String6equalsEPKc>
 8080d78:	46b0      	mov	r8, r6
 8080d7a:	4627      	mov	r7, r4
    } else if (cmd == "longitude"){
 8080d7c:	b170      	cbz	r0, 8080d9c <_Z9postValue6String+0x1f0>
        buf = String::format("%f", longitude);
 8080d7e:	9806      	ldr	r0, [sp, #24]
        buf = String::format("%f", latitudeDegrees);
 8080d80:	f007 fa1a 	bl	80881b8 <__aeabi_f2d>
 8080d84:	4602      	mov	r2, r0
 8080d86:	460b      	mov	r3, r1
 8080d88:	4638      	mov	r0, r7
 8080d8a:	4940      	ldr	r1, [pc, #256]	; (8080e8c <_Z9postValue6String+0x2e0>)
 8080d8c:	f004 f936 	bl	8084ffc <_ZN6String6formatEPKcz>
        buf = String::format("%lu", vertAcc);
 8080d90:	4639      	mov	r1, r7
 8080d92:	4640      	mov	r0, r8
 8080d94:	f004 f867 	bl	8084e66 <_ZN6StringaSEOS_>
 8080d98:	4638      	mov	r0, r7
 8080d9a:	e784      	b.n	8080ca6 <_Z9postValue6String+0xfa>
 8080d9c:	4628      	mov	r0, r5
 8080d9e:	493d      	ldr	r1, [pc, #244]	; (8080e94 <_Z9postValue6String+0x2e8>)
 8080da0:	f004 f8b1 	bl	8084f06 <_ZNK6String6equalsEPKc>
    } else if (cmd == "latitudeDegrees"){
 8080da4:	b108      	cbz	r0, 8080daa <_Z9postValue6String+0x1fe>
        buf = String::format("%f", latitudeDegrees);
 8080da6:	9807      	ldr	r0, [sp, #28]
 8080da8:	e7ea      	b.n	8080d80 <_Z9postValue6String+0x1d4>
 8080daa:	4628      	mov	r0, r5
 8080dac:	493a      	ldr	r1, [pc, #232]	; (8080e98 <_Z9postValue6String+0x2ec>)
 8080dae:	f004 f8aa 	bl	8084f06 <_ZNK6String6equalsEPKc>
 8080db2:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    } else if (cmd == "longitudeDegrees"){
 8080db6:	b108      	cbz	r0, 8080dbc <_Z9postValue6String+0x210>
        buf = String::format("%f", longitudeDegrees);
 8080db8:	9808      	ldr	r0, [sp, #32]
 8080dba:	e7e1      	b.n	8080d80 <_Z9postValue6String+0x1d4>
 8080dbc:	4628      	mov	r0, r5
 8080dbe:	4937      	ldr	r1, [pc, #220]	; (8080e9c <_Z9postValue6String+0x2f0>)
 8080dc0:	f004 f8a1 	bl	8084f06 <_ZNK6String6equalsEPKc>
 8080dc4:	af1c      	add	r7, sp, #112	; 0x70
    } else if (cmd == "geoidheight"){
 8080dc6:	b108      	cbz	r0, 8080dcc <_Z9postValue6String+0x220>
        buf = String::format("%f", geoidheight);
 8080dc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8080dca:	e7d9      	b.n	8080d80 <_Z9postValue6String+0x1d4>
 8080dcc:	4628      	mov	r0, r5
 8080dce:	4934      	ldr	r1, [pc, #208]	; (8080ea0 <_Z9postValue6String+0x2f4>)
 8080dd0:	f004 f899 	bl	8084f06 <_ZNK6String6equalsEPKc>
    } else if (cmd == "altitude"){
 8080dd4:	b108      	cbz	r0, 8080dda <_Z9postValue6String+0x22e>
        buf = String::format("%f", altitude);
 8080dd6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8080dd8:	e7d2      	b.n	8080d80 <_Z9postValue6String+0x1d4>
 8080dda:	4628      	mov	r0, r5
 8080ddc:	4931      	ldr	r1, [pc, #196]	; (8080ea4 <_Z9postValue6String+0x2f8>)
 8080dde:	f004 f892 	bl	8084f06 <_ZNK6String6equalsEPKc>
    } else if (cmd == "speed"){
 8080de2:	b108      	cbz	r0, 8080de8 <_Z9postValue6String+0x23c>
        buf = String::format("%f", speed);
 8080de4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8080de6:	e7cb      	b.n	8080d80 <_Z9postValue6String+0x1d4>
 8080de8:	4628      	mov	r0, r5
 8080dea:	492f      	ldr	r1, [pc, #188]	; (8080ea8 <_Z9postValue6String+0x2fc>)
 8080dec:	f004 f88b 	bl	8084f06 <_ZNK6String6equalsEPKc>
 8080df0:	46c2      	mov	sl, r8
 8080df2:	46b9      	mov	r9, r7
    } else if (cmd == "fixquality"){
 8080df4:	b128      	cbz	r0, 8080e02 <_Z9postValue6String+0x256>
        buf = String::format("%d", fixquality);
 8080df6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        buf = String::format("%d", satellites);
 8080df8:	4918      	ldr	r1, [pc, #96]	; (8080e5c <_Z9postValue6String+0x2b0>)
        buf = String::format("%lu", vertAcc);
 8080dfa:	4638      	mov	r0, r7
 8080dfc:	f004 f8fe 	bl	8084ffc <_ZN6String6formatEPKcz>
 8080e00:	e7c6      	b.n	8080d90 <_Z9postValue6String+0x1e4>
 8080e02:	4628      	mov	r0, r5
 8080e04:	4929      	ldr	r1, [pc, #164]	; (8080eac <_Z9postValue6String+0x300>)
 8080e06:	f004 f87e 	bl	8084f06 <_ZNK6String6equalsEPKc>
    } else if (cmd == "satellites"){
 8080e0a:	b108      	cbz	r0, 8080e10 <_Z9postValue6String+0x264>
        buf = String::format("%d", satellites);
 8080e0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8080e0e:	e7f3      	b.n	8080df8 <_Z9postValue6String+0x24c>
 8080e10:	4628      	mov	r0, r5
 8080e12:	4927      	ldr	r1, [pc, #156]	; (8080eb0 <_Z9postValue6String+0x304>)
 8080e14:	f004 f877 	bl	8084f06 <_ZNK6String6equalsEPKc>
    } else if (cmd == "horzAcc"){
 8080e18:	b110      	cbz	r0, 8080e20 <_Z9postValue6String+0x274>
        buf = String::format("%lu", horzAcc);
 8080e1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
        buf = String::format("%lu", vertAcc);
 8080e1c:	4925      	ldr	r1, [pc, #148]	; (8080eb4 <_Z9postValue6String+0x308>)
 8080e1e:	e7ec      	b.n	8080dfa <_Z9postValue6String+0x24e>
 8080e20:	4628      	mov	r0, r5
 8080e22:	4925      	ldr	r1, [pc, #148]	; (8080eb8 <_Z9postValue6String+0x30c>)
 8080e24:	f004 f86f 	bl	8084f06 <_ZNK6String6equalsEPKc>
    } else if (cmd == "vertAcc"){
 8080e28:	b108      	cbz	r0, 8080e2e <_Z9postValue6String+0x282>
        buf = String::format("%lu", vertAcc);
 8080e2a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8080e2c:	e7f6      	b.n	8080e1c <_Z9postValue6String+0x270>
 8080e2e:	4628      	mov	r0, r5
 8080e30:	4922      	ldr	r1, [pc, #136]	; (8080ebc <_Z9postValue6String+0x310>)
 8080e32:	f004 f868 	bl	8084f06 <_ZNK6String6equalsEPKc>
    } else if (cmd == "velN"){
 8080e36:	2800      	cmp	r0, #0
 8080e38:	d044      	beq.n	8080ec4 <_Z9postValue6String+0x318>
        buf = String::format("%ld", velN);
 8080e3a:	9a10      	ldr	r2, [sp, #64]	; 0x40
        buf = String::format("%ld", velE);
 8080e3c:	4920      	ldr	r1, [pc, #128]	; (8080ec0 <_Z9postValue6String+0x314>)
        buf = String::format("%lu", odoTotal);
 8080e3e:	4648      	mov	r0, r9
 8080e40:	f004 f8dc 	bl	8084ffc <_ZN6String6formatEPKcz>
 8080e44:	4649      	mov	r1, r9
 8080e46:	4650      	mov	r0, sl
 8080e48:	f004 f80d 	bl	8084e66 <_ZN6StringaSEOS_>
 8080e4c:	4648      	mov	r0, r9
 8080e4e:	e72a      	b.n	8080ca6 <_Z9postValue6String+0xfa>
 8080e50:	080898a4 	.word	0x080898a4
 8080e54:	20000228 	.word	0x20000228
 8080e58:	08089465 	.word	0x08089465
 8080e5c:	080899fb 	.word	0x080899fb
 8080e60:	08089d97 	.word	0x08089d97
 8080e64:	20000140 	.word	0x20000140
 8080e68:	08089563 	.word	0x08089563
 8080e6c:	08089472 	.word	0x08089472
 8080e70:	08089477 	.word	0x08089477
 8080e74:	08089492 	.word	0x08089492
 8080e78:	0808947e 	.word	0x0808947e
 8080e7c:	08089484 	.word	0x08089484
 8080e80:	08089488 	.word	0x08089488
 8080e84:	0808948d 	.word	0x0808948d
 8080e88:	0808949a 	.word	0x0808949a
 8080e8c:	08089a4f 	.word	0x08089a4f
 8080e90:	080894a3 	.word	0x080894a3
 8080e94:	080894ad 	.word	0x080894ad
 8080e98:	080894bd 	.word	0x080894bd
 8080e9c:	080894ce 	.word	0x080894ce
 8080ea0:	080894da 	.word	0x080894da
 8080ea4:	080894e3 	.word	0x080894e3
 8080ea8:	080894e9 	.word	0x080894e9
 8080eac:	080894f4 	.word	0x080894f4
 8080eb0:	080894ff 	.word	0x080894ff
 8080eb4:	08089507 	.word	0x08089507
 8080eb8:	0808950b 	.word	0x0808950b
 8080ebc:	08089513 	.word	0x08089513
 8080ec0:	08089518 	.word	0x08089518
 8080ec4:	4628      	mov	r0, r5
 8080ec6:	4914      	ldr	r1, [pc, #80]	; (8080f18 <_Z9postValue6String+0x36c>)
 8080ec8:	f004 f81d 	bl	8084f06 <_ZNK6String6equalsEPKc>
    } else if (cmd == "velE"){
 8080ecc:	b108      	cbz	r0, 8080ed2 <_Z9postValue6String+0x326>
        buf = String::format("%ld", velE);
 8080ece:	9a03      	ldr	r2, [sp, #12]
 8080ed0:	e7b4      	b.n	8080e3c <_Z9postValue6String+0x290>
 8080ed2:	4628      	mov	r0, r5
 8080ed4:	4911      	ldr	r1, [pc, #68]	; (8080f1c <_Z9postValue6String+0x370>)
 8080ed6:	f004 f816 	bl	8084f06 <_ZNK6String6equalsEPKc>
    } else if (cmd == "velD"){
 8080eda:	b108      	cbz	r0, 8080ee0 <_Z9postValue6String+0x334>
        buf = String::format("%ld", velD);
 8080edc:	9a04      	ldr	r2, [sp, #16]
 8080ede:	e7ad      	b.n	8080e3c <_Z9postValue6String+0x290>
 8080ee0:	4628      	mov	r0, r5
 8080ee2:	490f      	ldr	r1, [pc, #60]	; (8080f20 <_Z9postValue6String+0x374>)
 8080ee4:	f004 f80f 	bl	8084f06 <_ZNK6String6equalsEPKc>
    } else if (cmd == "gSpeed"){
 8080ee8:	b110      	cbz	r0, 8080ef0 <_Z9postValue6String+0x344>
        buf = String::format("%lu", gSpeed);
 8080eea:	9a11      	ldr	r2, [sp, #68]	; 0x44
        buf = String::format("%lu", odoTotal);
 8080eec:	490d      	ldr	r1, [pc, #52]	; (8080f24 <_Z9postValue6String+0x378>)
 8080eee:	e7a6      	b.n	8080e3e <_Z9postValue6String+0x292>
 8080ef0:	4628      	mov	r0, r5
 8080ef2:	490d      	ldr	r1, [pc, #52]	; (8080f28 <_Z9postValue6String+0x37c>)
 8080ef4:	f004 f807 	bl	8084f06 <_ZNK6String6equalsEPKc>
    } else if (cmd == "odoTrip"){
 8080ef8:	b108      	cbz	r0, 8080efe <_Z9postValue6String+0x352>
        buf = String::format("%lu", odoTrip);
 8080efa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8080efc:	e7f6      	b.n	8080eec <_Z9postValue6String+0x340>
 8080efe:	4628      	mov	r0, r5
 8080f00:	490a      	ldr	r1, [pc, #40]	; (8080f2c <_Z9postValue6String+0x380>)
 8080f02:	f004 f800 	bl	8084f06 <_ZNK6String6equalsEPKc>
    } else if (cmd == "odoTotal"){
 8080f06:	b108      	cbz	r0, 8080f0c <_Z9postValue6String+0x360>
        buf = String::format("%lu", odoTotal);
 8080f08:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8080f0a:	e7ef      	b.n	8080eec <_Z9postValue6String+0x340>
        buf = "Don't know that one. Check spelling.";
 8080f0c:	4640      	mov	r0, r8
 8080f0e:	4908      	ldr	r1, [pc, #32]	; (8080f30 <_Z9postValue6String+0x384>)
 8080f10:	f003 ffb1 	bl	8084e76 <_ZN6StringaSEPKc>
 8080f14:	e6c9      	b.n	8080caa <_Z9postValue6String+0xfe>
 8080f16:	bf00      	nop
 8080f18:	0808951c 	.word	0x0808951c
 8080f1c:	08089521 	.word	0x08089521
 8080f20:	08089526 	.word	0x08089526
 8080f24:	08089507 	.word	0x08089507
 8080f28:	0808952d 	.word	0x0808952d
 8080f2c:	08089535 	.word	0x08089535
 8080f30:	0808953e 	.word	0x0808953e

08080f34 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 8080f34:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 8080f36:	2614      	movs	r6, #20
 8080f38:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 8080f3c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 8080f3e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 8080f42:	42ae      	cmp	r6, r5
 8080f44:	d004      	beq.n	8080f50 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 8080f46:	4628      	mov	r0, r5
 8080f48:	f003 feee 	bl	8084d28 <_ZN6StringD1Ev>
 8080f4c:	3514      	adds	r5, #20
 8080f4e:	e7f8      	b.n	8080f42 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 8080f50:	6820      	ldr	r0, [r4, #0]
 8080f52:	f003 fcc9 	bl	80848e8 <free>
    AllocatorT::free(data_);
}
 8080f56:	4620      	mov	r0, r4
 8080f58:	bd70      	pop	{r4, r5, r6, pc}

08080f5a <_ZN10CloudClass8variableIA12_cJRiEEEbRKT_DpOT0_>:
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 8080f5a:	2300      	movs	r3, #0
 8080f5c:	2202      	movs	r2, #2
 8080f5e:	f003 bc63 	b.w	8084828 <spark_variable>

08080f62 <_ZN10CloudClass8variableIA11_cJRlEEEbRKT_DpOT0_>:
        return spark_variable(varKey, (const void*)userVar, CloudVariableTypeInt::TYPE_ID, NULL);
 8080f62:	2300      	movs	r3, #0
 8080f64:	2202      	movs	r2, #2
 8080f66:	f003 bc5f 	b.w	8084828 <spark_variable>
	...

08080f6c <setup>:
void setup() {
 8080f6c:	b510      	push	{r4, lr}
 8080f6e:	b086      	sub	sp, #24
	Serial.begin(9600);
 8080f70:	f006 f822 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8080f74:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8080f78:	f006 f80e 	bl	8086f98 <_ZN9USBSerial5beginEl>
  delay(10000);
 8080f7c:	f242 7010 	movw	r0, #10000	; 0x2710
 8080f80:	f005 fada 	bl	8086538 <delay>
  pc.setup();
 8080f84:	4868      	ldr	r0, [pc, #416]	; (8081128 <setup+0x1bc>)
 8080f86:	f001 fcf7 	bl	8082978 <_ZN10PowerCheck5setupEv>
  dht.begin();
 8080f8a:	4868      	ldr	r0, [pc, #416]	; (808112c <setup+0x1c0>)
 8080f8c:	f001 fec5 	bl	8082d1a <_ZN3DHT5beginEv>
  t.begin();
 8080f90:	4867      	ldr	r0, [pc, #412]	; (8081130 <setup+0x1c4>)
 8080f92:	f001 fd25 	bl	80829e0 <_ZN13AssetTracker25beginEv>
  t.gpsOn();
 8080f96:	4866      	ldr	r0, [pc, #408]	; (8081130 <setup+0x1c4>)
 8080f98:	f001 fde6 	bl	8082b68 <_ZN13AssetTracker25gpsOnEv>
  SetGPSAntenna("external"); // set up for external antenna
 8080f9c:	4965      	ldr	r1, [pc, #404]	; (8081134 <setup+0x1c8>)
 8080f9e:	a802      	add	r0, sp, #8
 8080fa0:	f003 ff0c 	bl	8084dbc <_ZN6StringC1EPKc>
 8080fa4:	a802      	add	r0, sp, #8
 8080fa6:	f7ff f931 	bl	808020c <_Z13SetGPSAntenna6String>
 8080faa:	a802      	add	r0, sp, #8
 8080fac:	f003 febc 	bl	8084d28 <_ZN6StringD1Ev>
	connectionEvents.setup();
 8080fb0:	4861      	ldr	r0, [pc, #388]	; (8081138 <setup+0x1cc>)
 8080fb2:	f001 fc41 	bl	8082838 <_ZN16ConnectionEvents5setupEv>
	batteryCheck.setup();
 8080fb6:	4861      	ldr	r0, [pc, #388]	; (808113c <setup+0x1d0>)
 8080fb8:	f000 fd1c 	bl	80819f4 <_ZN12BatteryCheck5setupEv>
	sessionCheck.setup();
 8080fbc:	4860      	ldr	r0, [pc, #384]	; (8081140 <setup+0x1d4>)
 8080fbe:	f001 fa2f 	bl	8082420 <_ZN12SessionCheck5setupEv>
	connectionCheck.setup();
 8080fc2:	4860      	ldr	r0, [pc, #384]	; (8081144 <setup+0x1d8>)
 8080fc4:	f000 ff90 	bl	8081ee8 <_ZN15ConnectionCheck5setupEv>
	tester.setup();
 8080fc8:	485f      	ldr	r0, [pc, #380]	; (8081148 <setup+0x1dc>)
 8080fca:	f000 fda9 	bl	8081b20 <_ZN6Tester5setupEv>
        return _function(name, args...);
 8080fce:	495f      	ldr	r1, [pc, #380]	; (808114c <setup+0x1e0>)
 8080fd0:	485f      	ldr	r0, [pc, #380]	; (8081150 <setup+0x1e4>)
 8080fd2:	f7ff f9e9 	bl	80803a8 <_ZN10CloudClass9_functionEPKcPFi6StringE>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8080fd6:	4b5f      	ldr	r3, [pc, #380]	; (8081154 <setup+0x1e8>)
            auto wrapper = new user_std_function_int_str_t(func);
 8080fd8:	2010      	movs	r0, #16
 8080fda:	9302      	str	r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
 8080fdc:	4b5e      	ldr	r3, [pc, #376]	; (8081158 <setup+0x1ec>)
 8080fde:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 8080fe0:	4b5e      	ldr	r3, [pc, #376]	; (808115c <setup+0x1f0>)
 8080fe2:	9304      	str	r3, [sp, #16]
 8080fe4:	f7ff f869 	bl	80800ba <_Znwj>
 8080fe8:	4604      	mov	r4, r0
 8080fea:	b178      	cbz	r0, 808100c <setup+0xa0>
    _Function_base() : _M_manager(nullptr) { }
 8080fec:	2300      	movs	r3, #0
 8080fee:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 8080ff0:	9b04      	ldr	r3, [sp, #16]
      if (static_cast<bool>(__x))
 8080ff2:	b133      	cbz	r3, 8081002 <setup+0x96>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8080ff4:	2202      	movs	r2, #2
 8080ff6:	a902      	add	r1, sp, #8
 8080ff8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8080ffa:	9b05      	ldr	r3, [sp, #20]
 8080ffc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8080ffe:	9b04      	ldr	r3, [sp, #16]
 8081000:	60a3      	str	r3, [r4, #8]
                success = register_function(call_std_user_function, wrapper, funcKey);
 8081002:	4621      	mov	r1, r4
 8081004:	4a56      	ldr	r2, [pc, #344]	; (8081160 <setup+0x1f4>)
 8081006:	4857      	ldr	r0, [pc, #348]	; (8081164 <setup+0x1f8>)
 8081008:	f005 fca3 	bl	8086952 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
    class function<_Res(_ArgTypes...)>
 808100c:	a802      	add	r0, sp, #8
 808100e:	f7ff f9c1 	bl	8080394 <_ZNSt14_Function_baseD1Ev>
        return _function(name, args...);
 8081012:	4955      	ldr	r1, [pc, #340]	; (8081168 <setup+0x1fc>)
 8081014:	4855      	ldr	r0, [pc, #340]	; (808116c <setup+0x200>)
 8081016:	f7ff f9c7 	bl	80803a8 <_ZN10CloudClass9_functionEPKcPFi6StringE>
 808101a:	4955      	ldr	r1, [pc, #340]	; (8081170 <setup+0x204>)
 808101c:	4855      	ldr	r0, [pc, #340]	; (8081174 <setup+0x208>)
 808101e:	f7ff f9c3 	bl	80803a8 <_ZN10CloudClass9_functionEPKcPFi6StringE>
 8081022:	4955      	ldr	r1, [pc, #340]	; (8081178 <setup+0x20c>)
 8081024:	4855      	ldr	r0, [pc, #340]	; (808117c <setup+0x210>)
 8081026:	f7ff f9bf 	bl	80803a8 <_ZN10CloudClass9_functionEPKcPFi6StringE>
 808102a:	4955      	ldr	r1, [pc, #340]	; (8081180 <setup+0x214>)
 808102c:	4855      	ldr	r0, [pc, #340]	; (8081184 <setup+0x218>)
 808102e:	f7ff f9bb 	bl	80803a8 <_ZN10CloudClass9_functionEPKcPFi6StringE>
 8081032:	4955      	ldr	r1, [pc, #340]	; (8081188 <setup+0x21c>)
 8081034:	4855      	ldr	r0, [pc, #340]	; (808118c <setup+0x220>)
 8081036:	f7ff f9b7 	bl	80803a8 <_ZN10CloudClass9_functionEPKcPFi6StringE>
 808103a:	4955      	ldr	r1, [pc, #340]	; (8081190 <setup+0x224>)
 808103c:	4855      	ldr	r0, [pc, #340]	; (8081194 <setup+0x228>)
 808103e:	f7ff f9b3 	bl	80803a8 <_ZN10CloudClass9_functionEPKcPFi6StringE>
 8081042:	4955      	ldr	r1, [pc, #340]	; (8081198 <setup+0x22c>)
 8081044:	4855      	ldr	r0, [pc, #340]	; (808119c <setup+0x230>)
 8081046:	f7ff f9af 	bl	80803a8 <_ZN10CloudClass9_functionEPKcPFi6StringE>
 808104a:	4955      	ldr	r1, [pc, #340]	; (80811a0 <setup+0x234>)
 808104c:	4855      	ldr	r0, [pc, #340]	; (80811a4 <setup+0x238>)
 808104e:	f7ff f9ab 	bl	80803a8 <_ZN10CloudClass9_functionEPKcPFi6StringE>
 8081052:	4955      	ldr	r1, [pc, #340]	; (80811a8 <setup+0x23c>)
 8081054:	4855      	ldr	r0, [pc, #340]	; (80811ac <setup+0x240>)
 8081056:	f7ff f9a7 	bl	80803a8 <_ZN10CloudClass9_functionEPKcPFi6StringE>
 808105a:	4955      	ldr	r1, [pc, #340]	; (80811b0 <setup+0x244>)
 808105c:	4855      	ldr	r0, [pc, #340]	; (80811b4 <setup+0x248>)
 808105e:	f7ff f9a3 	bl	80803a8 <_ZN10CloudClass9_functionEPKcPFi6StringE>
 8081062:	4955      	ldr	r1, [pc, #340]	; (80811b8 <setup+0x24c>)
 8081064:	4855      	ldr	r0, [pc, #340]	; (80811bc <setup+0x250>)
 8081066:	f7ff f99f 	bl	80803a8 <_ZN10CloudClass9_functionEPKcPFi6StringE>
 808106a:	4955      	ldr	r1, [pc, #340]	; (80811c0 <setup+0x254>)
 808106c:	4855      	ldr	r0, [pc, #340]	; (80811c4 <setup+0x258>)
 808106e:	f7ff f99b 	bl	80803a8 <_ZN10CloudClass9_functionEPKcPFi6StringE>
 8081072:	4955      	ldr	r1, [pc, #340]	; (80811c8 <setup+0x25c>)
 8081074:	4855      	ldr	r0, [pc, #340]	; (80811cc <setup+0x260>)
 8081076:	f7ff f997 	bl	80803a8 <_ZN10CloudClass9_functionEPKcPFi6StringE>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 808107a:	2300      	movs	r3, #0
 808107c:	2201      	movs	r2, #1
 808107e:	4954      	ldr	r1, [pc, #336]	; (80811d0 <setup+0x264>)
 8081080:	4854      	ldr	r0, [pc, #336]	; (80811d4 <setup+0x268>)
 8081082:	f003 fbd1 	bl	8084828 <spark_variable>
  Particle.variable("accelThresh", accelThreshold);
 8081086:	4954      	ldr	r1, [pc, #336]	; (80811d8 <setup+0x26c>)
 8081088:	4854      	ldr	r0, [pc, #336]	; (80811dc <setup+0x270>)
 808108a:	f7ff ff66 	bl	8080f5a <_ZN10CloudClass8variableIA12_cJRiEEEbRKT_DpOT0_>
 808108e:	2300      	movs	r3, #0
 8081090:	2202      	movs	r2, #2
 8081092:	4953      	ldr	r1, [pc, #332]	; (80811e0 <setup+0x274>)
 8081094:	4853      	ldr	r0, [pc, #332]	; (80811e4 <setup+0x278>)
 8081096:	f003 fbc7 	bl	8084828 <spark_variable>
  Particle.variable("lastGPSPub", lastGPSPublish);
 808109a:	4953      	ldr	r1, [pc, #332]	; (80811e8 <setup+0x27c>)
 808109c:	4853      	ldr	r0, [pc, #332]	; (80811ec <setup+0x280>)
 808109e:	f7ff ff60 	bl	8080f62 <_ZN10CloudClass8variableIA11_cJRlEEEbRKT_DpOT0_>
  Particle.variable("lastACCPub", lastACCPublish);
 80810a2:	4953      	ldr	r1, [pc, #332]	; (80811f0 <setup+0x284>)
 80810a4:	4853      	ldr	r0, [pc, #332]	; (80811f4 <setup+0x288>)
 80810a6:	f7ff ff5c 	bl	8080f62 <_ZN10CloudClass8variableIA11_cJRlEEEbRKT_DpOT0_>
  Particle.variable("lastDHTPub", lastDHTPublish);
 80810aa:	4953      	ldr	r1, [pc, #332]	; (80811f8 <setup+0x28c>)
 80810ac:	4853      	ldr	r0, [pc, #332]	; (80811fc <setup+0x290>)
 80810ae:	f7ff ff58 	bl	8080f62 <_ZN10CloudClass8variableIA11_cJRlEEEbRKT_DpOT0_>
  Particle.variable("delayGPSMin", delayGPSMinutes);
 80810b2:	4953      	ldr	r1, [pc, #332]	; (8081200 <setup+0x294>)
 80810b4:	4853      	ldr	r0, [pc, #332]	; (8081204 <setup+0x298>)
 80810b6:	f7ff ff50 	bl	8080f5a <_ZN10CloudClass8variableIA12_cJRiEEEbRKT_DpOT0_>
  Particle.variable("delayACCMin", delayACCMinutes);
 80810ba:	4953      	ldr	r1, [pc, #332]	; (8081208 <setup+0x29c>)
 80810bc:	4853      	ldr	r0, [pc, #332]	; (808120c <setup+0x2a0>)
 80810be:	f7ff ff4c 	bl	8080f5a <_ZN10CloudClass8variableIA12_cJRiEEEbRKT_DpOT0_>
  Particle.variable("delayDHTMin", delayDHTMinutes);
 80810c2:	4953      	ldr	r1, [pc, #332]	; (8081210 <setup+0x2a4>)
 80810c4:	4853      	ldr	r0, [pc, #332]	; (8081214 <setup+0x2a8>)
 80810c6:	f7ff ff48 	bl	8080f5a <_ZN10CloudClass8variableIA12_cJRiEEEbRKT_DpOT0_>
 80810ca:	2300      	movs	r3, #0
 80810cc:	2201      	movs	r2, #1
 80810ce:	4952      	ldr	r1, [pc, #328]	; (8081218 <setup+0x2ac>)
 80810d0:	4852      	ldr	r0, [pc, #328]	; (808121c <setup+0x2b0>)
 80810d2:	f003 fba9 	bl	8084828 <spark_variable>
    static bool on(system_event_t events, void(*handler)(system_event_t, int,void*)) {
        return !system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), nullptr);
    }

    static bool on(system_event_t events, void(*handler)(system_event_t, int)) {
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
 80810d6:	2300      	movs	r3, #0
 80810d8:	2100      	movs	r1, #0
 80810da:	4a51      	ldr	r2, [pc, #324]	; (8081220 <setup+0x2b4>)
 80810dc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80810e0:	f003 faf2 	bl	80846c8 <system_subscribe_event>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 80810e4:	f003 fbb8 	bl	8084858 <spark_cloud_flag_connect>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
 80810e8:	2200      	movs	r2, #0
 80810ea:	4c4e      	ldr	r4, [pc, #312]	; (8081224 <setup+0x2b8>)
 80810ec:	4611      	mov	r1, r2
 80810ee:	4620      	mov	r0, r4
 80810f0:	f7ff f960 	bl	80803b4 <_ZN5Timer5_stopEjb>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
 80810f4:	68a0      	ldr	r0, [r4, #8]
 80810f6:	b140      	cbz	r0, 808110a <setup+0x19e>
 80810f8:	2300      	movs	r3, #0
 80810fa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80810fe:	4619      	mov	r1, r3
 8081100:	e9cd 2300 	strd	r2, r3, [sp]
 8081104:	461a      	mov	r2, r3
 8081106:	f003 f91f 	bl	8084348 <os_timer_change>
	delay(2000); // DHT 22 minumum sampling period
 808110a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 808110e:	f005 fa13 	bl	8086538 <delay>
	if ((transmittingData & SERIALSETUPDATA) == SERIALSETUPDATA)
 8081112:	4b33      	ldr	r3, [pc, #204]	; (80811e0 <setup+0x274>)
 8081114:	681b      	ldr	r3, [r3, #0]
 8081116:	015b      	lsls	r3, r3, #5
 8081118:	d504      	bpl.n	8081124 <setup+0x1b8>
		Serial.println("End of setup() function");
 808111a:	f005 ff4d 	bl	8086fb8 <_Z16_fetch_usbserialv>
 808111e:	4942      	ldr	r1, [pc, #264]	; (8081228 <setup+0x2bc>)
 8081120:	f003 ffcd 	bl	80850be <_ZN5Print7printlnEPKc>
}
 8081124:	b006      	add	sp, #24
 8081126:	bd10      	pop	{r4, pc}
 8081128:	200001cc 	.word	0x200001cc
 808112c:	20000180 	.word	0x20000180
 8081130:	20000228 	.word	0x20000228
 8081134:	0808930d 	.word	0x0808930d
 8081138:	20000174 	.word	0x20000174
 808113c:	20000144 	.word	0x20000144
 8081140:	200001e8 	.word	0x200001e8
 8081144:	20000154 	.word	0x20000154
 8081148:	2000022c 	.word	0x2000022c
 808114c:	080801a1 	.word	0x080801a1
 8081150:	0808960b 	.word	0x0808960b
 8081154:	0808020d 	.word	0x0808020d
 8081158:	08080135 	.word	0x08080135
 808115c:	08080111 	.word	0x08080111
 8081160:	0808967a 	.word	0x0808967a
 8081164:	0808690f 	.word	0x0808690f
 8081168:	080806d5 	.word	0x080806d5
 808116c:	0808956c 	.word	0x0808956c
 8081170:	08080151 	.word	0x08080151
 8081174:	08089573 	.word	0x08089573
 8081178:	08080165 	.word	0x08080165
 808117c:	0808957d 	.word	0x0808957d
 8081180:	08080179 	.word	0x08080179
 8081184:	08089587 	.word	0x08089587
 8081188:	0808018d 	.word	0x0808018d
 808118c:	08089591 	.word	0x08089591
 8081190:	080802ad 	.word	0x080802ad
 8081194:	0808959b 	.word	0x0808959b
 8081198:	080801b5 	.word	0x080801b5
 808119c:	080895a3 	.word	0x080895a3
 80811a0:	08081291 	.word	0x08081291
 80811a4:	080895ac 	.word	0x080895ac
 80811a8:	08080bad 	.word	0x08080bad
 80811ac:	080895b4 	.word	0x080895b4
 80811b0:	08083f11 	.word	0x08083f11
 80811b4:	080895be 	.word	0x080895be
 80811b8:	08083f95 	.word	0x08083f95
 80811bc:	080895ca 	.word	0x080895ca
 80811c0:	0808405d 	.word	0x0808405d
 80811c4:	080895d7 	.word	0x080895d7
 80811c8:	080840e1 	.word	0x080840e1
 80811cc:	080895e2 	.word	0x080895e2
 80811d0:	20000011 	.word	0x20000011
 80811d4:	080895ee 	.word	0x080895ee
 80811d8:	20000000 	.word	0x20000000
 80811dc:	080895f8 	.word	0x080895f8
 80811e0:	20000014 	.word	0x20000014
 80811e4:	08089604 	.word	0x08089604
 80811e8:	200001a4 	.word	0x200001a4
 80811ec:	08089611 	.word	0x08089611
 80811f0:	2000019c 	.word	0x2000019c
 80811f4:	0808961c 	.word	0x0808961c
 80811f8:	200001a0 	.word	0x200001a0
 80811fc:	08089627 	.word	0x08089627
 8081200:	2000000c 	.word	0x2000000c
 8081204:	08089632 	.word	0x08089632
 8081208:	20000004 	.word	0x20000004
 808120c:	0808963e 	.word	0x0808963e
 8081210:	20000008 	.word	0x20000008
 8081214:	0808964a 	.word	0x0808964a
 8081218:	20000010 	.word	0x20000010
 808121c:	08089656 	.word	0x08089656
 8081220:	08080361 	.word	0x08080361
 8081224:	20000248 	.word	0x20000248
 8081228:	08089662 	.word	0x08089662

0808122c <_ZN5Print7printlnIhLi0EEEjT_i>:
    size_t println(T b, int base = DEC) {
 808122c:	b538      	push	{r3, r4, r5, lr}
 808122e:	4605      	mov	r5, r0
    if (base == 0) {
 8081230:	b942      	cbnz	r2, 8081244 <_ZN5Print7printlnIhLi0EEEjT_i+0x18>
        return write(n);
 8081232:	6803      	ldr	r3, [r0, #0]
 8081234:	689b      	ldr	r3, [r3, #8]
 8081236:	4798      	blx	r3
        return printNumber(val, base) + t;
 8081238:	4604      	mov	r4, r0
        n += println();
 808123a:	4628      	mov	r0, r5
 808123c:	f003 ff33 	bl	80850a6 <_ZN5Print7printlnEv>
    }
 8081240:	4420      	add	r0, r4
 8081242:	bd38      	pop	{r3, r4, r5, pc}
        return printNumber(val, base) + t;
 8081244:	b2d2      	uxtb	r2, r2
 8081246:	f003 ff44 	bl	80850d2 <_ZN5Print11printNumberEmh>
 808124a:	e7f5      	b.n	8081238 <_ZN5Print7printlnIhLi0EEEjT_i+0xc>

0808124c <_ZN5Print7printlnIlLi0EEEjT_i>:
    size_t println(T b, int base = DEC) {
 808124c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808124e:	4605      	mov	r5, r0
 8081250:	460c      	mov	r4, r1
    if (base == 0) {
 8081252:	4616      	mov	r6, r2
 8081254:	b94a      	cbnz	r2, 808126a <_ZN5Print7printlnIlLi0EEEjT_i+0x1e>
        return write(n);
 8081256:	6803      	ldr	r3, [r0, #0]
 8081258:	b2c9      	uxtb	r1, r1
 808125a:	689b      	ldr	r3, [r3, #8]
 808125c:	4798      	blx	r3
 808125e:	4607      	mov	r7, r0
        n += println();
 8081260:	4628      	mov	r0, r5
 8081262:	f003 ff20 	bl	80850a6 <_ZN5Print7printlnEv>
    }
 8081266:	4438      	add	r0, r7
 8081268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n < 0 && base == 10) {
 808126a:	2900      	cmp	r1, #0
 808126c:	da0c      	bge.n	8081288 <_ZN5Print7printlnIlLi0EEEjT_i+0x3c>
 808126e:	2a0a      	cmp	r2, #10
 8081270:	d10a      	bne.n	8081288 <_ZN5Print7printlnIlLi0EEEjT_i+0x3c>
            t = print('-');
 8081272:	212d      	movs	r1, #45	; 0x2d
 8081274:	f003 ff14 	bl	80850a0 <_ZN5Print5printEc>
 8081278:	4607      	mov	r7, r0
            val = -n;
 808127a:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
 808127c:	4628      	mov	r0, r5
 808127e:	b2f2      	uxtb	r2, r6
 8081280:	f003 ff27 	bl	80850d2 <_ZN5Print11printNumberEmh>
 8081284:	4407      	add	r7, r0
 8081286:	e7eb      	b.n	8081260 <_ZN5Print7printlnIlLi0EEEjT_i+0x14>
            val = n;
 8081288:	4621      	mov	r1, r4
        size_t t = 0;
 808128a:	2700      	movs	r7, #0
 808128c:	e7f6      	b.n	808127c <_ZN5Print7printlnIlLi0EEEjT_i+0x30>
	...

08081290 <_Z7showAll6String>:
{
 8081290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bool initComplete = t.gpsInitComplete();
 8081294:	4cc9      	ldr	r4, [pc, #804]	; (80815bc <_Z7showAll6String+0x32c>)
{
 8081296:	b093      	sub	sp, #76	; 0x4c
    bool initComplete = t.gpsInitComplete();
 8081298:	4620      	mov	r0, r4
 808129a:	f001 fc9d 	bl	8082bd8 <_ZN13AssetTracker215gpsInitCompleteEv>
 808129e:	4683      	mov	fp, r0
    uint8_t hour = t.getHour(); // Time is UTC
 80812a0:	4620      	mov	r0, r4
 80812a2:	f001 fbff 	bl	8082aa4 <_ZN13AssetTracker27getHourEv>
 80812a6:	4682      	mov	sl, r0
    uint8_t minute = t.getMinute();
 80812a8:	4620      	mov	r0, r4
 80812aa:	f001 fc01 	bl	8082ab0 <_ZN13AssetTracker29getMinuteEv>
 80812ae:	4681      	mov	r9, r0
    uint8_t seconds = t.getSeconds();
 80812b0:	4620      	mov	r0, r4
 80812b2:	f001 fc03 	bl	8082abc <_ZN13AssetTracker210getSecondsEv>
 80812b6:	4680      	mov	r8, r0
    uint8_t month = t.getMonth();
 80812b8:	4620      	mov	r0, r4
 80812ba:	f001 fc11 	bl	8082ae0 <_ZN13AssetTracker28getMonthEv>
 80812be:	4607      	mov	r7, r0
    uint8_t day = t.getDay();
 80812c0:	4620      	mov	r0, r4
 80812c2:	f001 fc13 	bl	8082aec <_ZN13AssetTracker26getDayEv>
 80812c6:	4606      	mov	r6, r0
    uint16_t year = t.getYear();
 80812c8:	4620      	mov	r0, r4
 80812ca:	f001 fc03 	bl	8082ad4 <_ZN13AssetTracker27getYearEv>
 80812ce:	4605      	mov	r5, r0
    uint16_t milliseconds = t.getMilliseconds(); // Since last measurement
 80812d0:	4620      	mov	r0, r4
 80812d2:	f001 fbf9 	bl	8082ac8 <_ZN13AssetTracker215getMillisecondsEv>
 80812d6:	9000      	str	r0, [sp, #0]
    float latitude = t.readLat(); // degrees
 80812d8:	4620      	mov	r0, r4
 80812da:	f001 fb93 	bl	8082a04 <_ZN13AssetTracker27readLatEv>
 80812de:	9001      	str	r0, [sp, #4]
    float longitude = t.readLon(); // degrees
 80812e0:	4620      	mov	r0, r4
 80812e2:	f001 fb95 	bl	8082a10 <_ZN13AssetTracker27readLonEv>
 80812e6:	9002      	str	r0, [sp, #8]
    float latitudeDegrees = t.readLatDeg(); // degrees
 80812e8:	4620      	mov	r0, r4
 80812ea:	f001 fb97 	bl	8082a1c <_ZN13AssetTracker210readLatDegEv>
 80812ee:	9003      	str	r0, [sp, #12]
    float longitudeDegrees = t.readLonDeg(); // degrees
 80812f0:	4620      	mov	r0, r4
 80812f2:	f001 fb99 	bl	8082a28 <_ZN13AssetTracker210readLonDegEv>
 80812f6:	9004      	str	r0, [sp, #16]
    float geoidheight = t.getGeoIdHeight(); // Height above ellipsoid, mm
 80812f8:	4620      	mov	r0, r4
 80812fa:	f001 fc0f 	bl	8082b1c <_ZN13AssetTracker214getGeoIdHeightEv>
 80812fe:	9005      	str	r0, [sp, #20]
    float altitude = t.getAltitude(); // Height above mean sea level, mm
 8081300:	4620      	mov	r0, r4
 8081302:	f001 fc11 	bl	8082b28 <_ZN13AssetTracker211getAltitudeEv>
 8081306:	9006      	str	r0, [sp, #24]
    float speed = t.getSpeed();  // m/s
 8081308:	4620      	mov	r0, r4
 808130a:	f001 fc01 	bl	8082b10 <_ZN13AssetTracker28getSpeedEv>
 808130e:	9007      	str	r0, [sp, #28]
    uint8_t fixquality = t.getFixQuality(); // 0:no fix,1:dead rec,2:2d,3:3d,4:gnss+dead rec,5:time only
 8081310:	4620      	mov	r0, r4
 8081312:	f001 fbf7 	bl	8082b04 <_ZN13AssetTracker213getFixQualityEv>
 8081316:	900f      	str	r0, [sp, #60]	; 0x3c
    uint8_t satellites = t.getSatellites(); // how many
 8081318:	4620      	mov	r0, r4
 808131a:	f001 fbed 	bl	8082af8 <_ZN13AssetTracker213getSatellitesEv>
 808131e:	9010      	str	r0, [sp, #64]	; 0x40
    uint32_t horzAcc = t.getHaccuracy(); // estimate, mm
 8081320:	4620      	mov	r0, r4
 8081322:	f001 fb8f 	bl	8082a44 <_ZN13AssetTracker212getHaccuracyEv>
 8081326:	9008      	str	r0, [sp, #32]
    uint32_t vertAcc = t.getVaccuracy(); // estimate, mm
 8081328:	4620      	mov	r0, r4
 808132a:	f001 fb91 	bl	8082a50 <_ZN13AssetTracker212getVaccuracyEv>
 808132e:	9009      	str	r0, [sp, #36]	; 0x24
    int32_t velN = t.getVelN(); // North velocity, mm/s
 8081330:	4620      	mov	r0, r4
 8081332:	f001 fb93 	bl	8082a5c <_ZN13AssetTracker27getVelNEv>
 8081336:	900a      	str	r0, [sp, #40]	; 0x28
    int32_t velE = t.getVelE(); // East velocity, mm/s
 8081338:	4620      	mov	r0, r4
 808133a:	f001 fb95 	bl	8082a68 <_ZN13AssetTracker27getVelEEv>
 808133e:	900b      	str	r0, [sp, #44]	; 0x2c
    int32_t velD = t.getVelD(); // Down velocity, mm/s
 8081340:	4620      	mov	r0, r4
 8081342:	f001 fb97 	bl	8082a74 <_ZN13AssetTracker27getVelDEv>
 8081346:	900c      	str	r0, [sp, #48]	; 0x30
    int32_t gSpeed = t.getGspeed(); // Ground speed, mm/s
 8081348:	4620      	mov	r0, r4
 808134a:	f001 fba5 	bl	8082a98 <_ZN13AssetTracker29getGspeedEv>
 808134e:	900d      	str	r0, [sp, #52]	; 0x34
    int32_t odoTrip = t.getOdoTrip(); // m
 8081350:	4620      	mov	r0, r4
 8081352:	f001 fb95 	bl	8082a80 <_ZN13AssetTracker210getOdoTripEv>
 8081356:	900e      	str	r0, [sp, #56]	; 0x38
    int32_t odoTotal = t.getOdoTotal(); // m
 8081358:	4620      	mov	r0, r4
 808135a:	f001 fb97 	bl	8082a8c <_ZN13AssetTracker211getOdoTotalEv>
 808135e:	4604      	mov	r4, r0
    Serial.print("initComplete: ");
 8081360:	f005 fe2a 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8081364:	4996      	ldr	r1, [pc, #600]	; (80815c0 <_Z7showAll6String+0x330>)
 8081366:	f003 fe97 	bl	8085098 <_ZN5Print5printEPKc>
    Serial.println(initComplete);
 808136a:	f005 fe25 	bl	8086fb8 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
 808136e:	220a      	movs	r2, #10
 8081370:	4659      	mov	r1, fp
 8081372:	9011      	str	r0, [sp, #68]	; 0x44
 8081374:	f003 fead 	bl	80850d2 <_ZN5Print11printNumberEmh>
        n += println();
 8081378:	9b11      	ldr	r3, [sp, #68]	; 0x44
 808137a:	4618      	mov	r0, r3
 808137c:	f003 fe93 	bl	80850a6 <_ZN5Print7printlnEv>
    Serial.print("hour: ");
 8081380:	f005 fe1a 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8081384:	498f      	ldr	r1, [pc, #572]	; (80815c4 <_Z7showAll6String+0x334>)
 8081386:	f003 fe87 	bl	8085098 <_ZN5Print5printEPKc>
    Serial.println(hour);
 808138a:	f005 fe15 	bl	8086fb8 <_Z16_fetch_usbserialv>
 808138e:	220a      	movs	r2, #10
 8081390:	4651      	mov	r1, sl
 8081392:	f7ff ff4b 	bl	808122c <_ZN5Print7printlnIhLi0EEEjT_i>
    Serial.print("minute: ");
 8081396:	f005 fe0f 	bl	8086fb8 <_Z16_fetch_usbserialv>
 808139a:	498b      	ldr	r1, [pc, #556]	; (80815c8 <_Z7showAll6String+0x338>)
 808139c:	f003 fe7c 	bl	8085098 <_ZN5Print5printEPKc>
    Serial.println(minute);
 80813a0:	f005 fe0a 	bl	8086fb8 <_Z16_fetch_usbserialv>
 80813a4:	220a      	movs	r2, #10
 80813a6:	4649      	mov	r1, r9
 80813a8:	f7ff ff40 	bl	808122c <_ZN5Print7printlnIhLi0EEEjT_i>
    Serial.print("seconds: ");
 80813ac:	f005 fe04 	bl	8086fb8 <_Z16_fetch_usbserialv>
 80813b0:	4986      	ldr	r1, [pc, #536]	; (80815cc <_Z7showAll6String+0x33c>)
 80813b2:	f003 fe71 	bl	8085098 <_ZN5Print5printEPKc>
    Serial.println(seconds);
 80813b6:	f005 fdff 	bl	8086fb8 <_Z16_fetch_usbserialv>
 80813ba:	220a      	movs	r2, #10
 80813bc:	4641      	mov	r1, r8
 80813be:	f7ff ff35 	bl	808122c <_ZN5Print7printlnIhLi0EEEjT_i>
    Serial.print("month: ");
 80813c2:	f005 fdf9 	bl	8086fb8 <_Z16_fetch_usbserialv>
 80813c6:	4982      	ldr	r1, [pc, #520]	; (80815d0 <_Z7showAll6String+0x340>)
 80813c8:	f003 fe66 	bl	8085098 <_ZN5Print5printEPKc>
    Serial.println(month);
 80813cc:	f005 fdf4 	bl	8086fb8 <_Z16_fetch_usbserialv>
 80813d0:	220a      	movs	r2, #10
 80813d2:	4639      	mov	r1, r7
 80813d4:	f7ff ff2a 	bl	808122c <_ZN5Print7printlnIhLi0EEEjT_i>
    Serial.print("day: ");
 80813d8:	f005 fdee 	bl	8086fb8 <_Z16_fetch_usbserialv>
 80813dc:	497d      	ldr	r1, [pc, #500]	; (80815d4 <_Z7showAll6String+0x344>)
 80813de:	f003 fe5b 	bl	8085098 <_ZN5Print5printEPKc>
    Serial.println(day);
 80813e2:	f005 fde9 	bl	8086fb8 <_Z16_fetch_usbserialv>
 80813e6:	220a      	movs	r2, #10
 80813e8:	4631      	mov	r1, r6
 80813ea:	f7ff ff1f 	bl	808122c <_ZN5Print7printlnIhLi0EEEjT_i>
    Serial.print("year: ");
 80813ee:	f005 fde3 	bl	8086fb8 <_Z16_fetch_usbserialv>
 80813f2:	4979      	ldr	r1, [pc, #484]	; (80815d8 <_Z7showAll6String+0x348>)
 80813f4:	f003 fe50 	bl	8085098 <_ZN5Print5printEPKc>
    Serial.println(year);
 80813f8:	f005 fdde 	bl	8086fb8 <_Z16_fetch_usbserialv>
 80813fc:	4606      	mov	r6, r0
        return printNumber(val, base) + t;
 80813fe:	220a      	movs	r2, #10
 8081400:	4629      	mov	r1, r5
 8081402:	f003 fe66 	bl	80850d2 <_ZN5Print11printNumberEmh>
        n += println();
 8081406:	4630      	mov	r0, r6
 8081408:	f003 fe4d 	bl	80850a6 <_ZN5Print7printlnEv>
    Serial.print("milliseconds: ");
 808140c:	f005 fdd4 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8081410:	4972      	ldr	r1, [pc, #456]	; (80815dc <_Z7showAll6String+0x34c>)
 8081412:	f003 fe41 	bl	8085098 <_ZN5Print5printEPKc>
    Serial.println(milliseconds);
 8081416:	f005 fdcf 	bl	8086fb8 <_Z16_fetch_usbserialv>
 808141a:	4605      	mov	r5, r0
        return printNumber(val, base) + t;
 808141c:	220a      	movs	r2, #10
 808141e:	f8bd 1000 	ldrh.w	r1, [sp]
 8081422:	f003 fe56 	bl	80850d2 <_ZN5Print11printNumberEmh>
        n += println();
 8081426:	4628      	mov	r0, r5
 8081428:	f003 fe3d 	bl	80850a6 <_ZN5Print7printlnEv>
    Serial.print("latitude: ");
 808142c:	f005 fdc4 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8081430:	496b      	ldr	r1, [pc, #428]	; (80815e0 <_Z7showAll6String+0x350>)
 8081432:	f003 fe31 	bl	8085098 <_ZN5Print5printEPKc>
    Serial.println(latitude);
 8081436:	f005 fdbf 	bl	8086fb8 <_Z16_fetch_usbserialv>
 808143a:	2202      	movs	r2, #2
 808143c:	9901      	ldr	r1, [sp, #4]
 808143e:	f003 ff33 	bl	80852a8 <_ZN5Print7printlnEfi>
    Serial.print("longitude: ");
 8081442:	f005 fdb9 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8081446:	4967      	ldr	r1, [pc, #412]	; (80815e4 <_Z7showAll6String+0x354>)
 8081448:	f003 fe26 	bl	8085098 <_ZN5Print5printEPKc>
    Serial.println(longitude);
 808144c:	f005 fdb4 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8081450:	2202      	movs	r2, #2
 8081452:	9902      	ldr	r1, [sp, #8]
 8081454:	f003 ff28 	bl	80852a8 <_ZN5Print7printlnEfi>
    Serial.print("latitudeDegrees: ");
 8081458:	f005 fdae 	bl	8086fb8 <_Z16_fetch_usbserialv>
 808145c:	4962      	ldr	r1, [pc, #392]	; (80815e8 <_Z7showAll6String+0x358>)
 808145e:	f003 fe1b 	bl	8085098 <_ZN5Print5printEPKc>
    Serial.println(latitudeDegrees);
 8081462:	f005 fda9 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8081466:	2202      	movs	r2, #2
 8081468:	9903      	ldr	r1, [sp, #12]
 808146a:	f003 ff1d 	bl	80852a8 <_ZN5Print7printlnEfi>
    Serial.print("longitudeDegrees: ");
 808146e:	f005 fda3 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8081472:	495e      	ldr	r1, [pc, #376]	; (80815ec <_Z7showAll6String+0x35c>)
 8081474:	f003 fe10 	bl	8085098 <_ZN5Print5printEPKc>
    Serial.println(longitudeDegrees);
 8081478:	f005 fd9e 	bl	8086fb8 <_Z16_fetch_usbserialv>
 808147c:	2202      	movs	r2, #2
 808147e:	9904      	ldr	r1, [sp, #16]
 8081480:	f003 ff12 	bl	80852a8 <_ZN5Print7printlnEfi>
    Serial.print("geoidheight: ");
 8081484:	f005 fd98 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8081488:	4959      	ldr	r1, [pc, #356]	; (80815f0 <_Z7showAll6String+0x360>)
 808148a:	f003 fe05 	bl	8085098 <_ZN5Print5printEPKc>
    Serial.println(geoidheight);
 808148e:	f005 fd93 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8081492:	2202      	movs	r2, #2
 8081494:	9905      	ldr	r1, [sp, #20]
 8081496:	f003 ff07 	bl	80852a8 <_ZN5Print7printlnEfi>
    Serial.print("altitude: ");
 808149a:	f005 fd8d 	bl	8086fb8 <_Z16_fetch_usbserialv>
 808149e:	4955      	ldr	r1, [pc, #340]	; (80815f4 <_Z7showAll6String+0x364>)
 80814a0:	f003 fdfa 	bl	8085098 <_ZN5Print5printEPKc>
    Serial.println(altitude);
 80814a4:	f005 fd88 	bl	8086fb8 <_Z16_fetch_usbserialv>
 80814a8:	2202      	movs	r2, #2
 80814aa:	9906      	ldr	r1, [sp, #24]
 80814ac:	f003 fefc 	bl	80852a8 <_ZN5Print7printlnEfi>
    Serial.print("speed: ");
 80814b0:	f005 fd82 	bl	8086fb8 <_Z16_fetch_usbserialv>
 80814b4:	4950      	ldr	r1, [pc, #320]	; (80815f8 <_Z7showAll6String+0x368>)
 80814b6:	f003 fdef 	bl	8085098 <_ZN5Print5printEPKc>
    Serial.println(speed);
 80814ba:	f005 fd7d 	bl	8086fb8 <_Z16_fetch_usbserialv>
 80814be:	2202      	movs	r2, #2
 80814c0:	9907      	ldr	r1, [sp, #28]
 80814c2:	f003 fef1 	bl	80852a8 <_ZN5Print7printlnEfi>
    Serial.print("fixquality: ");
 80814c6:	f005 fd77 	bl	8086fb8 <_Z16_fetch_usbserialv>
 80814ca:	494c      	ldr	r1, [pc, #304]	; (80815fc <_Z7showAll6String+0x36c>)
 80814cc:	f003 fde4 	bl	8085098 <_ZN5Print5printEPKc>
    Serial.println(fixquality);
 80814d0:	f005 fd72 	bl	8086fb8 <_Z16_fetch_usbserialv>
 80814d4:	220a      	movs	r2, #10
 80814d6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80814d8:	f7ff fea8 	bl	808122c <_ZN5Print7printlnIhLi0EEEjT_i>
    Serial.print("satellites: ");
 80814dc:	f005 fd6c 	bl	8086fb8 <_Z16_fetch_usbserialv>
 80814e0:	4947      	ldr	r1, [pc, #284]	; (8081600 <_Z7showAll6String+0x370>)
 80814e2:	f003 fdd9 	bl	8085098 <_ZN5Print5printEPKc>
    Serial.println(satellites);
 80814e6:	f005 fd67 	bl	8086fb8 <_Z16_fetch_usbserialv>
 80814ea:	220a      	movs	r2, #10
 80814ec:	9910      	ldr	r1, [sp, #64]	; 0x40
 80814ee:	f7ff fe9d 	bl	808122c <_ZN5Print7printlnIhLi0EEEjT_i>
    Serial.print("horzAcc: ");
 80814f2:	f005 fd61 	bl	8086fb8 <_Z16_fetch_usbserialv>
 80814f6:	4943      	ldr	r1, [pc, #268]	; (8081604 <_Z7showAll6String+0x374>)
 80814f8:	f003 fdce 	bl	8085098 <_ZN5Print5printEPKc>
    Serial.println(horzAcc);
 80814fc:	f005 fd5c 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8081500:	4605      	mov	r5, r0
        return printNumber(val, base) + t;
 8081502:	220a      	movs	r2, #10
 8081504:	9908      	ldr	r1, [sp, #32]
 8081506:	f003 fde4 	bl	80850d2 <_ZN5Print11printNumberEmh>
        n += println();
 808150a:	4628      	mov	r0, r5
 808150c:	f003 fdcb 	bl	80850a6 <_ZN5Print7printlnEv>
    Serial.print("vertAcc: ");
 8081510:	f005 fd52 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8081514:	493c      	ldr	r1, [pc, #240]	; (8081608 <_Z7showAll6String+0x378>)
 8081516:	f003 fdbf 	bl	8085098 <_ZN5Print5printEPKc>
    Serial.println(vertAcc);
 808151a:	f005 fd4d 	bl	8086fb8 <_Z16_fetch_usbserialv>
 808151e:	4605      	mov	r5, r0
        return printNumber(val, base) + t;
 8081520:	220a      	movs	r2, #10
 8081522:	9909      	ldr	r1, [sp, #36]	; 0x24
 8081524:	f003 fdd5 	bl	80850d2 <_ZN5Print11printNumberEmh>
        n += println();
 8081528:	4628      	mov	r0, r5
 808152a:	f003 fdbc 	bl	80850a6 <_ZN5Print7printlnEv>
    Serial.print("velN: ");
 808152e:	f005 fd43 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8081532:	4936      	ldr	r1, [pc, #216]	; (808160c <_Z7showAll6String+0x37c>)
 8081534:	f003 fdb0 	bl	8085098 <_ZN5Print5printEPKc>
    Serial.println(velN);
 8081538:	f005 fd3e 	bl	8086fb8 <_Z16_fetch_usbserialv>
 808153c:	220a      	movs	r2, #10
 808153e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8081540:	f7ff fe84 	bl	808124c <_ZN5Print7printlnIlLi0EEEjT_i>
    Serial.print("velE: ");
 8081544:	f005 fd38 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8081548:	4931      	ldr	r1, [pc, #196]	; (8081610 <_Z7showAll6String+0x380>)
 808154a:	f003 fda5 	bl	8085098 <_ZN5Print5printEPKc>
    Serial.println(velE);
 808154e:	f005 fd33 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8081552:	220a      	movs	r2, #10
 8081554:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8081556:	f7ff fe79 	bl	808124c <_ZN5Print7printlnIlLi0EEEjT_i>
    Serial.print("velD: ");
 808155a:	f005 fd2d 	bl	8086fb8 <_Z16_fetch_usbserialv>
 808155e:	492d      	ldr	r1, [pc, #180]	; (8081614 <_Z7showAll6String+0x384>)
 8081560:	f003 fd9a 	bl	8085098 <_ZN5Print5printEPKc>
    Serial.println(velD);
 8081564:	f005 fd28 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8081568:	220a      	movs	r2, #10
 808156a:	990c      	ldr	r1, [sp, #48]	; 0x30
 808156c:	f7ff fe6e 	bl	808124c <_ZN5Print7printlnIlLi0EEEjT_i>
    Serial.print("gSpeed: ");
 8081570:	f005 fd22 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8081574:	4928      	ldr	r1, [pc, #160]	; (8081618 <_Z7showAll6String+0x388>)
 8081576:	f003 fd8f 	bl	8085098 <_ZN5Print5printEPKc>
    Serial.println(gSpeed);
 808157a:	f005 fd1d 	bl	8086fb8 <_Z16_fetch_usbserialv>
 808157e:	220a      	movs	r2, #10
 8081580:	990d      	ldr	r1, [sp, #52]	; 0x34
 8081582:	f7ff fe63 	bl	808124c <_ZN5Print7printlnIlLi0EEEjT_i>
    Serial.print("odoTrip: ");
 8081586:	f005 fd17 	bl	8086fb8 <_Z16_fetch_usbserialv>
 808158a:	4924      	ldr	r1, [pc, #144]	; (808161c <_Z7showAll6String+0x38c>)
 808158c:	f003 fd84 	bl	8085098 <_ZN5Print5printEPKc>
    Serial.println(odoTrip);
 8081590:	f005 fd12 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8081594:	220a      	movs	r2, #10
 8081596:	990e      	ldr	r1, [sp, #56]	; 0x38
 8081598:	f7ff fe58 	bl	808124c <_ZN5Print7printlnIlLi0EEEjT_i>
    Serial.print("odoTotal: ");
 808159c:	f005 fd0c 	bl	8086fb8 <_Z16_fetch_usbserialv>
 80815a0:	491f      	ldr	r1, [pc, #124]	; (8081620 <_Z7showAll6String+0x390>)
 80815a2:	f003 fd79 	bl	8085098 <_ZN5Print5printEPKc>
    Serial.println(odoTotal);
 80815a6:	f005 fd07 	bl	8086fb8 <_Z16_fetch_usbserialv>
 80815aa:	220a      	movs	r2, #10
 80815ac:	4621      	mov	r1, r4
 80815ae:	f7ff fe4d 	bl	808124c <_ZN5Print7printlnIlLi0EEEjT_i>
}
 80815b2:	2001      	movs	r0, #1
 80815b4:	b013      	add	sp, #76	; 0x4c
 80815b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80815ba:	bf00      	nop
 80815bc:	20000228 	.word	0x20000228
 80815c0:	08089684 	.word	0x08089684
 80815c4:	08089693 	.word	0x08089693
 80815c8:	0808969a 	.word	0x0808969a
 80815cc:	080896bd 	.word	0x080896bd
 80815d0:	080896a3 	.word	0x080896a3
 80815d4:	080896ab 	.word	0x080896ab
 80815d8:	080896b1 	.word	0x080896b1
 80815dc:	080896b8 	.word	0x080896b8
 80815e0:	080896c7 	.word	0x080896c7
 80815e4:	080896d2 	.word	0x080896d2
 80815e8:	080896de 	.word	0x080896de
 80815ec:	080896f0 	.word	0x080896f0
 80815f0:	08089703 	.word	0x08089703
 80815f4:	08089711 	.word	0x08089711
 80815f8:	0808971c 	.word	0x0808971c
 80815fc:	08089724 	.word	0x08089724
 8081600:	08089731 	.word	0x08089731
 8081604:	0808973e 	.word	0x0808973e
 8081608:	08089748 	.word	0x08089748
 808160c:	08089752 	.word	0x08089752
 8081610:	08089759 	.word	0x08089759
 8081614:	08089760 	.word	0x08089760
 8081618:	08089767 	.word	0x08089767
 808161c:	08089770 	.word	0x08089770
 8081620:	0808977a 	.word	0x0808977a

08081624 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 8081624:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 8081626:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081628:	4604      	mov	r4, r0
 808162a:	460d      	mov	r5, r1
 808162c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 808162e:	d916      	bls.n	808165e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 8081630:	4290      	cmp	r0, r2
 8081632:	d215      	bcs.n	8081660 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 8081634:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 8081638:	1a75      	subs	r5, r6, r1
 808163a:	f1a1 0714 	sub.w	r7, r1, #20
 808163e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 8081640:	42b7      	cmp	r7, r6
 8081642:	d01c      	beq.n	808167e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 8081644:	b12c      	cbz	r4, 8081652 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 8081646:	4631      	mov	r1, r6
 8081648:	4620      	mov	r0, r4
 808164a:	f003 fbe7 	bl	8084e1c <_ZN6StringC1EOS_>
 808164e:	7c33      	ldrb	r3, [r6, #16]
 8081650:	7423      	strb	r3, [r4, #16]
 8081652:	4630      	mov	r0, r6
 8081654:	f003 fb68 	bl	8084d28 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 8081658:	3e14      	subs	r6, #20
 808165a:	3c14      	subs	r4, #20
 808165c:	e7f0      	b.n	8081640 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 808165e:	d00e      	beq.n	808167e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 8081660:	42b5      	cmp	r5, r6
 8081662:	d00c      	beq.n	808167e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 8081664:	b12c      	cbz	r4, 8081672 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 8081666:	4629      	mov	r1, r5
 8081668:	4620      	mov	r0, r4
 808166a:	f003 fbd7 	bl	8084e1c <_ZN6StringC1EOS_>
 808166e:	7c2b      	ldrb	r3, [r5, #16]
 8081670:	7423      	strb	r3, [r4, #16]
 8081672:	4628      	mov	r0, r5
 8081674:	f003 fb58 	bl	8084d28 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 8081678:	3514      	adds	r5, #20
 808167a:	3414      	adds	r4, #20
 808167c:	e7f0      	b.n	8081660 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 808167e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081680 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 8081680:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 8081682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 8081686:	e9c0 3300 	strd	r3, r3, [r0]
 808168a:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 808168c:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 808168e:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 8081690:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 8081692:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 8081694:	dd24      	ble.n	80816e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 8081696:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 808169a:	fb08 f007 	mul.w	r0, r8, r7
 808169e:	f003 f91b 	bl	80848d8 <malloc>
            if (!d) {
 80816a2:	4605      	mov	r5, r0
 80816a4:	b1e0      	cbz	r0, 80816e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 80816a6:	e9d4 1200 	ldrd	r1, r2, [r4]
 80816aa:	fb08 1202 	mla	r2, r8, r2, r1
 80816ae:	f7ff ffb9 	bl	8081624 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 80816b2:	6820      	ldr	r0, [r4, #0]
 80816b4:	f003 f918 	bl	80848e8 <free>
        data_ = d;
 80816b8:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 80816ba:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 80816bc:	e9d6 7300 	ldrd	r7, r3, [r6]
 80816c0:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 80816c4:	45b8      	cmp	r8, r7
 80816c6:	d009      	beq.n	80816dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 80816c8:	4639      	mov	r1, r7
 80816ca:	4628      	mov	r0, r5
 80816cc:	f003 fbc0 	bl	8084e50 <_ZN6StringC1ERKS_>
 80816d0:	7c3b      	ldrb	r3, [r7, #16]
 80816d2:	3514      	adds	r5, #20
 80816d4:	f805 3c04 	strb.w	r3, [r5, #-4]
 80816d8:	3714      	adds	r7, #20
 80816da:	e7f3      	b.n	80816c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 80816dc:	6873      	ldr	r3, [r6, #4]
 80816de:	6063      	str	r3, [r4, #4]
}
 80816e0:	4620      	mov	r0, r4
 80816e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080816e8 <_GLOBAL__sub_I_logHandler>:
}
 80816e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        val_(val) {
 80816ec:	f04f 0a01 	mov.w	sl, #1
        capacity_(0) {
 80816f0:	2400      	movs	r4, #0
 80816f2:	4b78      	ldr	r3, [pc, #480]	; (80818d4 <_GLOBAL__sub_I_logHandler+0x1ec>)
 80816f4:	b090      	sub	sp, #64	; 0x40
 80816f6:	f883 a000 	strb.w	sl, [r3]
 80816fa:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80816fe:	9405      	str	r4, [sp, #20]
            StreamLogHandler(Serial, level, filters) {
 8081700:	f005 fc5a 	bl	8086fb8 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
 8081704:	4e74      	ldr	r6, [pc, #464]	; (80818d8 <_GLOBAL__sub_I_logHandler+0x1f0>)
 8081706:	4605      	mov	r5, r0
 8081708:	46b1      	mov	r9, r6
        stream_(&stream) {
 808170a:	f10d 0824 	add.w	r8, sp, #36	; 0x24
 808170e:	a903      	add	r1, sp, #12
 8081710:	a806      	add	r0, sp, #24
 8081712:	f7ff ffb5 	bl	8081680 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 8081716:	a906      	add	r1, sp, #24
 8081718:	4640      	mov	r0, r8
 808171a:	f7ff ffb1 	bl	8081680 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 808171e:	4b6f      	ldr	r3, [pc, #444]	; (80818dc <_GLOBAL__sub_I_logHandler+0x1f4>)
 8081720:	af0c      	add	r7, sp, #48	; 0x30
 8081722:	f849 3b04 	str.w	r3, [r9], #4
 8081726:	4641      	mov	r1, r8
 8081728:	4638      	mov	r0, r7
 808172a:	f7ff ffa9 	bl	8081680 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 808172e:	463a      	mov	r2, r7
 8081730:	211e      	movs	r1, #30
 8081732:	4648      	mov	r0, r9
 8081734:	f004 fab6 	bl	8085ca4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 8081738:	4638      	mov	r0, r7
 808173a:	f7ff fbfb 	bl	8080f34 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 808173e:	4640      	mov	r0, r8
 8081740:	f7ff fbf8 	bl	8080f34 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 8081744:	4b66      	ldr	r3, [pc, #408]	; (80818e0 <_GLOBAL__sub_I_logHandler+0x1f8>)
 8081746:	6235      	str	r5, [r6, #32]
 8081748:	6033      	str	r3, [r6, #0]
 808174a:	a806      	add	r0, sp, #24
 808174c:	f7ff fbf2 	bl	8080f34 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 8081750:	4b64      	ldr	r3, [pc, #400]	; (80818e4 <_GLOBAL__sub_I_logHandler+0x1fc>)
SerialLogHandler logHandler;
 8081752:	4d65      	ldr	r5, [pc, #404]	; (80818e8 <_GLOBAL__sub_I_logHandler+0x200>)
 8081754:	6033      	str	r3, [r6, #0]
        Serial.begin();
 8081756:	f005 fc2f 	bl	8086fb8 <_Z16_fetch_usbserialv>
 808175a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 808175e:	f005 fc1b 	bl	8086f98 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 8081762:	f003 ff31 	bl	80855c8 <_ZN5spark10LogManager8instanceEv>
 8081766:	4631      	mov	r1, r6
 8081768:	f004 fa2f 	bl	8085bca <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
 808176c:	a803      	add	r0, sp, #12
 808176e:	f7ff fbe1 	bl	8080f34 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 8081772:	462a      	mov	r2, r5
 8081774:	4630      	mov	r0, r6
 8081776:	495d      	ldr	r1, [pc, #372]	; (80818ec <_GLOBAL__sub_I_logHandler+0x204>)
 8081778:	f006 fa86 	bl	8087c88 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);
 808177c:	4621      	mov	r1, r4
 808177e:	4650      	mov	r0, sl
 8081780:	f002 ffaa 	bl	80846d8 <system_thread_set_state>
              error_(SYSTEM_ERROR_NONE) {
 8081784:	4e5a      	ldr	r6, [pc, #360]	; (80818f0 <_GLOBAL__sub_I_logHandler+0x208>)
    SleepResult() {}
 8081786:	4b5b      	ldr	r3, [pc, #364]	; (80818f4 <_GLOBAL__sub_I_logHandler+0x20c>)
              error_(SYSTEM_ERROR_NONE) {
 8081788:	6034      	str	r4, [r6, #0]
    SleepResult() {}
 808178a:	60b3      	str	r3, [r6, #8]
              error_(SYSTEM_ERROR_NONE) {
 808178c:	80b4      	strh	r4, [r6, #4]
    SleepResult() {}
 808178e:	71b4      	strb	r4, [r6, #6]
        set_system_mode(mode);
 8081790:	2002      	movs	r0, #2
 8081792:	f002 ff81 	bl	8084698 <set_system_mode>
SYSTEM_MODE(SEMI_AUTOMATIC);
 8081796:	4630      	mov	r0, r6
ConnectionEvents connectionEvents("connEventStats");
 8081798:	4e57      	ldr	r6, [pc, #348]	; (80818f8 <_GLOBAL__sub_I_logHandler+0x210>)
SYSTEM_MODE(SEMI_AUTOMATIC);
 808179a:	462a      	mov	r2, r5
 808179c:	4957      	ldr	r1, [pc, #348]	; (80818fc <_GLOBAL__sub_I_logHandler+0x214>)
 808179e:	f006 fa73 	bl	8087c88 <__aeabi_atexit>
ConnectionEvents connectionEvents("connEventStats");
 80817a2:	4630      	mov	r0, r6
 80817a4:	4956      	ldr	r1, [pc, #344]	; (8081900 <_GLOBAL__sub_I_logHandler+0x218>)
 80817a6:	f000 ffe9 	bl	808277c <_ZN16ConnectionEventsC1EPKc>
 80817aa:	462a      	mov	r2, r5
 80817ac:	4955      	ldr	r1, [pc, #340]	; (8081904 <_GLOBAL__sub_I_logHandler+0x21c>)
 80817ae:	4630      	mov	r0, r6
 80817b0:	f006 fa6a 	bl	8087c88 <__aeabi_atexit>
SessionCheck sessionCheck(3600);
 80817b4:	4e54      	ldr	r6, [pc, #336]	; (8081908 <_GLOBAL__sub_I_logHandler+0x220>)
 80817b6:	4b55      	ldr	r3, [pc, #340]	; (808190c <_GLOBAL__sub_I_logHandler+0x224>)
 80817b8:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80817bc:	9300      	str	r3, [sp, #0]
 80817be:	4630      	mov	r0, r6
 80817c0:	2300      	movs	r3, #0
 80817c2:	f000 fdd3 	bl	808236c <_ZN12SessionCheckC1ExPKc>
 80817c6:	4630      	mov	r0, r6
ConnectionCheck connectionCheck;
 80817c8:	4e51      	ldr	r6, [pc, #324]	; (8081910 <_GLOBAL__sub_I_logHandler+0x228>)
SessionCheck sessionCheck(3600);
 80817ca:	462a      	mov	r2, r5
 80817cc:	4951      	ldr	r1, [pc, #324]	; (8081914 <_GLOBAL__sub_I_logHandler+0x22c>)
 80817ce:	f006 fa5b 	bl	8087c88 <__aeabi_atexit>
ConnectionCheck connectionCheck;
 80817d2:	4630      	mov	r0, r6
 80817d4:	f000 fb64 	bl	8081ea0 <_ZN15ConnectionCheckC1Ev>
 80817d8:	4630      	mov	r0, r6
Tester tester("testerFn", D2);
 80817da:	4e4f      	ldr	r6, [pc, #316]	; (8081918 <_GLOBAL__sub_I_logHandler+0x230>)
ConnectionCheck connectionCheck;
 80817dc:	462a      	mov	r2, r5
 80817de:	494f      	ldr	r1, [pc, #316]	; (808191c <_GLOBAL__sub_I_logHandler+0x234>)
 80817e0:	f006 fa52 	bl	8087c88 <__aeabi_atexit>
Tester tester("testerFn", D2);
 80817e4:	2202      	movs	r2, #2
 80817e6:	4630      	mov	r0, r6
 80817e8:	494d      	ldr	r1, [pc, #308]	; (8081920 <_GLOBAL__sub_I_logHandler+0x238>)
 80817ea:	f000 f98b 	bl	8081b04 <_ZN6TesterC1EPKci>
 80817ee:	4630      	mov	r0, r6
BatteryCheck batteryCheck(15.0, 3600);
 80817f0:	4e4c      	ldr	r6, [pc, #304]	; (8081924 <_GLOBAL__sub_I_logHandler+0x23c>)
Tester tester("testerFn", D2);
 80817f2:	462a      	mov	r2, r5
 80817f4:	494c      	ldr	r1, [pc, #304]	; (8081928 <_GLOBAL__sub_I_logHandler+0x240>)
 80817f6:	f006 fa47 	bl	8087c88 <__aeabi_atexit>
BatteryCheck batteryCheck(15.0, 3600);
 80817fa:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80817fe:	4630      	mov	r0, r6
 8081800:	494a      	ldr	r1, [pc, #296]	; (808192c <_GLOBAL__sub_I_logHandler+0x244>)
 8081802:	f000 f8c3 	bl	808198c <_ZN12BatteryCheckC1Efl>
 8081806:	4630      	mov	r0, r6
AppWatchdogWrapper watchdog(APP_WATCHDOG_TIMEOUT);
 8081808:	4e49      	ldr	r6, [pc, #292]	; (8081930 <_GLOBAL__sub_I_logHandler+0x248>)
BatteryCheck batteryCheck(15.0, 3600);
 808180a:	462a      	mov	r2, r5
 808180c:	4949      	ldr	r1, [pc, #292]	; (8081934 <_GLOBAL__sub_I_logHandler+0x24c>)
 808180e:	f006 fa3b 	bl	8087c88 <__aeabi_atexit>
AppWatchdogWrapper watchdog(APP_WATCHDOG_TIMEOUT);
 8081812:	f64e 2160 	movw	r1, #60000	; 0xea60
 8081816:	4630      	mov	r0, r6
 8081818:	f000 fcd0 	bl	80821bc <_ZN18AppWatchdogWrapperC1Em>
 808181c:	462a      	mov	r2, r5
 808181e:	4946      	ldr	r1, [pc, #280]	; (8081938 <_GLOBAL__sub_I_logHandler+0x250>)
 8081820:	4630      	mov	r0, r6
FuelGauge fuel = FuelGauge();
 8081822:	4e46      	ldr	r6, [pc, #280]	; (808193c <_GLOBAL__sub_I_logHandler+0x254>)
AppWatchdogWrapper watchdog(APP_WATCHDOG_TIMEOUT);
 8081824:	f006 fa30 	bl	8087c88 <__aeabi_atexit>
AssetTracker2 t = AssetTracker2();
 8081828:	4845      	ldr	r0, [pc, #276]	; (8081940 <_GLOBAL__sub_I_logHandler+0x258>)
 808182a:	f001 f8d7 	bl	80829dc <_ZN13AssetTracker2C1Ev>
FuelGauge fuel = FuelGauge();
 808182e:	4621      	mov	r1, r4
 8081830:	4630      	mov	r0, r6
 8081832:	f004 fec1 	bl	80865b8 <_ZN9FuelGaugeC1Eb>
 8081836:	4630      	mov	r0, r6
PowerCheck pc = PowerCheck();
 8081838:	4e42      	ldr	r6, [pc, #264]	; (8081944 <_GLOBAL__sub_I_logHandler+0x25c>)
FuelGauge fuel = FuelGauge();
 808183a:	462a      	mov	r2, r5
 808183c:	4942      	ldr	r1, [pc, #264]	; (8081948 <_GLOBAL__sub_I_logHandler+0x260>)
 808183e:	f006 fa23 	bl	8087c88 <__aeabi_atexit>
PowerCheck pc = PowerCheck();
 8081842:	4630      	mov	r0, r6
 8081844:	f001 f888 	bl	8082958 <_ZN10PowerCheckC1Ev>
 8081848:	462a      	mov	r2, r5
 808184a:	4630      	mov	r0, r6
 808184c:	493f      	ldr	r1, [pc, #252]	; (808194c <_GLOBAL__sub_I_logHandler+0x264>)
String pubAccel = "";
 808184e:	4e40      	ldr	r6, [pc, #256]	; (8081950 <_GLOBAL__sub_I_logHandler+0x268>)
PowerCheck pc = PowerCheck();
 8081850:	f006 fa1a 	bl	8087c88 <__aeabi_atexit>
DHT dht(DHTPIN, DHTTYPE);
 8081854:	2306      	movs	r3, #6
 8081856:	2216      	movs	r2, #22
 8081858:	2103      	movs	r1, #3
 808185a:	483e      	ldr	r0, [pc, #248]	; (8081954 <_GLOBAL__sub_I_logHandler+0x26c>)
 808185c:	f001 fa56 	bl	8082d0c <_ZN3DHTC1Ehhh>
String pubAccel = "";
 8081860:	4630      	mov	r0, r6
 8081862:	493d      	ldr	r1, [pc, #244]	; (8081958 <_GLOBAL__sub_I_logHandler+0x270>)
 8081864:	f003 faaa 	bl	8084dbc <_ZN6StringC1EPKc>
 8081868:	462a      	mov	r2, r5
 808186a:	4630      	mov	r0, r6
 808186c:	493b      	ldr	r1, [pc, #236]	; (808195c <_GLOBAL__sub_I_logHandler+0x274>)
 808186e:	f006 fa0b 	bl	8087c88 <__aeabi_atexit>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8081872:	4b3b      	ldr	r3, [pc, #236]	; (8081960 <_GLOBAL__sub_I_logHandler+0x278>)
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
 8081874:	4e3b      	ldr	r6, [pc, #236]	; (8081964 <_GLOBAL__sub_I_logHandler+0x27c>)
 8081876:	930c      	str	r3, [sp, #48]	; 0x30
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081878:	e897 0003 	ldmia.w	r7, {r0, r1}
 808187c:	4b3a      	ldr	r3, [pc, #232]	; (8081968 <_GLOBAL__sub_I_logHandler+0x280>)
 808187e:	e888 0003 	stmia.w	r8, {r0, r1}
 8081882:	6033      	str	r3, [r6, #0]
      __a = _GLIBCXX_MOVE(__b);
 8081884:	f106 030c 	add.w	r3, r6, #12
 8081888:	e893 0003 	ldmia.w	r3, {r0, r1}
 808188c:	e887 0003 	stmia.w	r7, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8081890:	e898 0003 	ldmia.w	r8, {r0, r1}
 8081894:	e883 0003 	stmia.w	r3, {r0, r1}
 8081898:	4b34      	ldr	r3, [pc, #208]	; (808196c <_GLOBAL__sub_I_logHandler+0x284>)
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
 808189a:	2132      	movs	r1, #50	; 0x32
 808189c:	6173      	str	r3, [r6, #20]
      __a = _GLIBCXX_MOVE(__b);
 808189e:	69b3      	ldr	r3, [r6, #24]
 80818a0:	4a33      	ldr	r2, [pc, #204]	; (8081970 <_GLOBAL__sub_I_logHandler+0x288>)
 80818a2:	930f      	str	r3, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
 80818a4:	4b33      	ldr	r3, [pc, #204]	; (8081974 <_GLOBAL__sub_I_logHandler+0x28c>)
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
 80818a6:	7134      	strb	r4, [r6, #4]
 80818a8:	61b3      	str	r3, [r6, #24]
 80818aa:	60b4      	str	r4, [r6, #8]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
 80818ac:	4633      	mov	r3, r6
 80818ae:	e9cd 4400 	strd	r4, r4, [sp]
 80818b2:	f106 0008 	add.w	r0, r6, #8
      __a = _GLIBCXX_MOVE(__b);
 80818b6:	940e      	str	r4, [sp, #56]	; 0x38
 80818b8:	f002 fd2e 	bl	8084318 <os_timer_create>
    class function<_Res(_ArgTypes...)>
 80818bc:	4638      	mov	r0, r7
 80818be:	f7fe fd69 	bl	8080394 <_ZNSt14_Function_baseD1Ev>
Timer timer(50, callGPS);
 80818c2:	462a      	mov	r2, r5
 80818c4:	4630      	mov	r0, r6
 80818c6:	492c      	ldr	r1, [pc, #176]	; (8081978 <_GLOBAL__sub_I_logHandler+0x290>)
 80818c8:	f006 f9de 	bl	8087c88 <__aeabi_atexit>
}
 80818cc:	b010      	add	sp, #64	; 0x40
 80818ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80818d2:	bf00      	nop
 80818d4:	20000140 	.word	0x20000140
 80818d8:	200001a8 	.word	0x200001a8
 80818dc:	080897c8 	.word	0x080897c8
 80818e0:	08089de8 	.word	0x08089de8
 80818e4:	080897e0 	.word	0x080897e0
 80818e8:	20000130 	.word	0x20000130
 80818ec:	08080265 	.word	0x08080265
 80818f0:	20000134 	.word	0x20000134
 80818f4:	ffff0000 	.word	0xffff0000
 80818f8:	20000174 	.word	0x20000174
 80818fc:	08080255 	.word	0x08080255
 8081900:	08089785 	.word	0x08089785
 8081904:	08082685 	.word	0x08082685
 8081908:	200001e8 	.word	0x200001e8
 808190c:	08089794 	.word	0x08089794
 8081910:	20000154 	.word	0x20000154
 8081914:	08082339 	.word	0x08082339
 8081918:	2000022c 	.word	0x2000022c
 808191c:	08081e61 	.word	0x08081e61
 8081920:	080897a1 	.word	0x080897a1
 8081924:	20000144 	.word	0x20000144
 8081928:	08081a71 	.word	0x08081a71
 808192c:	41700000 	.word	0x41700000
 8081930:	20000264 	.word	0x20000264
 8081934:	0808197d 	.word	0x0808197d
 8081938:	0808215d 	.word	0x0808215d
 808193c:	20000194 	.word	0x20000194
 8081940:	20000228 	.word	0x20000228
 8081944:	200001cc 	.word	0x200001cc
 8081948:	080865d7 	.word	0x080865d7
 808194c:	080828b1 	.word	0x080828b1
 8081950:	200001d8 	.word	0x200001d8
 8081954:	20000180 	.word	0x20000180
 8081958:	080898a4 	.word	0x080898a4
 808195c:	08084d29 	.word	0x08084d29
 8081960:	08080129 	.word	0x08080129
 8081964:	20000248 	.word	0x20000248
 8081968:	080897b4 	.word	0x080897b4
 808196c:	080800fb 	.word	0x080800fb
 8081970:	080801d1 	.word	0x080801d1
 8081974:	080800f7 	.word	0x080800f7
 8081978:	080803d5 	.word	0x080803d5

0808197c <_ZN12BatteryCheckD1Ev>:


}
BatteryCheck::~BatteryCheck() {

}
 808197c:	4770      	bx	lr

0808197e <_ZN12BatteryCheckD0Ev>:
BatteryCheck::~BatteryCheck() {
 808197e:	b510      	push	{r4, lr}
 8081980:	4604      	mov	r4, r0
}
 8081982:	2110      	movs	r1, #16
 8081984:	f006 f985 	bl	8087c92 <_ZdlPvj>
 8081988:	4620      	mov	r0, r4
 808198a:	bd10      	pop	{r4, pc}

0808198c <_ZN12BatteryCheckC1Efl>:
BatteryCheck::BatteryCheck(float minimumSoC, long sleepTimeSecs) : minimumSoC(minimumSoC), sleepTimeSecs(sleepTimeSecs) {
 808198c:	6082      	str	r2, [r0, #8]
 808198e:	2200      	movs	r2, #0
 8081990:	b510      	push	{r4, lr}
 8081992:	4c02      	ldr	r4, [pc, #8]	; (808199c <_ZN12BatteryCheckC1Efl+0x10>)
 8081994:	6041      	str	r1, [r0, #4]
 8081996:	6004      	str	r4, [r0, #0]
 8081998:	60c2      	str	r2, [r0, #12]
}
 808199a:	bd10      	pop	{r4, pc}
 808199c:	080897f8 	.word	0x080897f8

080819a0 <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv>:
		lastCheckMs = millis();
		checkAndSleepIfNecessary();
	}
}

void BatteryCheck::checkAndSleepIfNecessary() {
 80819a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80819a2:	4604      	mov	r4, r0
	float soc = fuel.getSoC();
 80819a4:	4810      	ldr	r0, [pc, #64]	; (80819e8 <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv+0x48>)
 80819a6:	f004 fe7b 	bl	80866a0 <_ZN9FuelGauge6getSoCEv>

	// There is an SoC, it's less than the minimum, and there's no external power (USB or VIN)
	if (soc != 0.0 && soc < minimumSoC && !pmic.isPowerGood()) {
 80819aa:	2100      	movs	r1, #0
	float soc = fuel.getSoC();
 80819ac:	4605      	mov	r5, r0
	if (soc != 0.0 && soc < minimumSoC && !pmic.isPowerGood()) {
 80819ae:	f007 fa45 	bl	8088e3c <__aeabi_fcmpeq>
 80819b2:	b9b0      	cbnz	r0, 80819e2 <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv+0x42>
 80819b4:	4629      	mov	r1, r5
 80819b6:	6860      	ldr	r0, [r4, #4]
 80819b8:	f007 fa68 	bl	8088e8c <__aeabi_fcmpgt>
 80819bc:	b188      	cbz	r0, 80819e2 <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv+0x42>
 80819be:	480b      	ldr	r0, [pc, #44]	; (80819ec <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv+0x4c>)
 80819c0:	f003 f831 	bl	8084a26 <_ZN4PMIC11isPowerGoodEv>
 80819c4:	b968      	cbnz	r0, 80819e2 <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv+0x42>
		ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_LOW_BATTERY_SLEEP, static_cast<int>(soc));
 80819c6:	4628      	mov	r0, r5
 80819c8:	f007 fa80 	bl	8088ecc <__aeabi_f2iz>
 80819cc:	4601      	mov	r1, r0
 80819ce:	200d      	movs	r0, #13
 80819d0:	f000 ff5c 	bl	808288c <_ZN16ConnectionEvents8addEventEii>

		System.sleep(SLEEP_MODE_DEEP, sleepTimeSecs);
 80819d4:	4b06      	ldr	r3, [pc, #24]	; (80819f0 <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv+0x50>)
 80819d6:	2101      	movs	r1, #1
 80819d8:	4668      	mov	r0, sp
 80819da:	681b      	ldr	r3, [r3, #0]
 80819dc:	68a2      	ldr	r2, [r4, #8]
 80819de:	f003 f90f 	bl	8084c00 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
	}

}
 80819e2:	b003      	add	sp, #12
 80819e4:	bd30      	pop	{r4, r5, pc}
 80819e6:	bf00      	nop
 80819e8:	20000284 	.word	0x20000284
 80819ec:	2000028c 	.word	0x2000028c
 80819f0:	20000280 	.word	0x20000280

080819f4 <_ZN12BatteryCheck5setupEv>:
	checkAndSleepIfNecessary();
 80819f4:	f7ff bfd4 	b.w	80819a0 <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv>

080819f8 <_ZN12BatteryCheck4loopEv>:
void BatteryCheck::loop() {
 80819f8:	b510      	push	{r4, lr}
 80819fa:	4604      	mov	r4, r0
 80819fc:	f002 fc3c 	bl	8084278 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastCheckMs >= CHECK_PERIOD_MS) {
 8081a00:	68e3      	ldr	r3, [r4, #12]
 8081a02:	1ac0      	subs	r0, r0, r3
 8081a04:	f64e 235f 	movw	r3, #59999	; 0xea5f
 8081a08:	4298      	cmp	r0, r3
 8081a0a:	d907      	bls.n	8081a1c <_ZN12BatteryCheck4loopEv+0x24>
 8081a0c:	f002 fc34 	bl	8084278 <HAL_Timer_Get_Milli_Seconds>
		lastCheckMs = millis();
 8081a10:	60e0      	str	r0, [r4, #12]
		checkAndSleepIfNecessary();
 8081a12:	4620      	mov	r0, r4
}
 8081a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		checkAndSleepIfNecessary();
 8081a18:	f7ff bfc2 	b.w	80819a0 <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv>
}
 8081a1c:	bd10      	pop	{r4, pc}
	...

08081a20 <_GLOBAL__sub_I__ZN12BatteryCheckC2Efl>:
}
 8081a20:	b570      	push	{r4, r5, r6, lr}
 8081a22:	2400      	movs	r4, #0
 8081a24:	4b0c      	ldr	r3, [pc, #48]	; (8081a58 <_GLOBAL__sub_I__ZN12BatteryCheckC2Efl+0x38>)
static FuelGauge fuel;
 8081a26:	4d0d      	ldr	r5, [pc, #52]	; (8081a5c <_GLOBAL__sub_I__ZN12BatteryCheckC2Efl+0x3c>)
 8081a28:	601c      	str	r4, [r3, #0]
 8081a2a:	4621      	mov	r1, r4
 8081a2c:	4e0c      	ldr	r6, [pc, #48]	; (8081a60 <_GLOBAL__sub_I__ZN12BatteryCheckC2Efl+0x40>)
 8081a2e:	4628      	mov	r0, r5
 8081a30:	f004 fdc2 	bl	80865b8 <_ZN9FuelGaugeC1Eb>
 8081a34:	4628      	mov	r0, r5
static PMIC pmic;
 8081a36:	4d0b      	ldr	r5, [pc, #44]	; (8081a64 <_GLOBAL__sub_I__ZN12BatteryCheckC2Efl+0x44>)
static FuelGauge fuel;
 8081a38:	4632      	mov	r2, r6
 8081a3a:	490b      	ldr	r1, [pc, #44]	; (8081a68 <_GLOBAL__sub_I__ZN12BatteryCheckC2Efl+0x48>)
 8081a3c:	f006 f924 	bl	8087c88 <__aeabi_atexit>
static PMIC pmic;
 8081a40:	4621      	mov	r1, r4
 8081a42:	4628      	mov	r0, r5
 8081a44:	f002 ff9f 	bl	8084986 <_ZN4PMICC1Eb>
 8081a48:	4632      	mov	r2, r6
 8081a4a:	4628      	mov	r0, r5
}
 8081a4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
static PMIC pmic;
 8081a50:	4906      	ldr	r1, [pc, #24]	; (8081a6c <_GLOBAL__sub_I__ZN12BatteryCheckC2Efl+0x4c>)
 8081a52:	f006 b919 	b.w	8087c88 <__aeabi_atexit>
 8081a56:	bf00      	nop
 8081a58:	20000280 	.word	0x20000280
 8081a5c:	20000284 	.word	0x20000284
 8081a60:	20000130 	.word	0x20000130
 8081a64:	2000028c 	.word	0x2000028c
 8081a68:	080865d7 	.word	0x080865d7
 8081a6c:	080849a5 	.word	0x080849a5

08081a70 <_ZN6TesterD1Ev>:
}


Tester::~Tester() {

}
 8081a70:	4770      	bx	lr

08081a72 <_ZN6TesterD0Ev>:
Tester::~Tester() {
 8081a72:	b510      	push	{r4, lr}
 8081a74:	4604      	mov	r4, r0
}
 8081a76:	211c      	movs	r1, #28
 8081a78:	f006 f90b 	bl	8087c92 <_ZdlPvj>
 8081a7c:	4620      	mov	r0, r4
 8081a7e:	bd10      	pop	{r4, pc}

08081a80 <_ZN6Tester15functionHandlerE6String>:

// This is the function registered with Particle.function(). Just copy the data and return so
// the successful response can be returned to the caller. Since we do things like reset, or
// enter an infinite loop, or sleep, doing this right from the callback causes the caller to
// time out because the response will never be received.
int Tester::functionHandler(String argStr) {
 8081a80:	b510      	push	{r4, lr}
 8081a82:	4604      	mov	r4, r0
	// Process this in loop so the function won't time out
	functionData = strdup(argStr.c_str());
 8081a84:	6808      	ldr	r0, [r1, #0]
 8081a86:	f007 fb01 	bl	808908c <strdup>
 8081a8a:	60e0      	str	r0, [r4, #12]

	return 0;
}
 8081a8c:	2000      	movs	r0, #0
 8081a8e:	bd10      	pop	{r4, pc}

08081a90 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM6TesterFi6StringEPS2_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 8081a90:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8081a92:	b538      	push	{r3, r4, r5, lr}
 8081a94:	4604      	mov	r4, r0
	  switch (__op)
 8081a96:	d007      	beq.n	8081aa8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM6TesterFi6StringEPS2_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 8081a98:	2a03      	cmp	r2, #3
 8081a9a:	d011      	beq.n	8081ac0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM6TesterFi6StringEPS2_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x30>
 8081a9c:	2a01      	cmp	r2, #1
 8081a9e:	d101      	bne.n	8081aa4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM6TesterFi6StringEPS2_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 8081aa0:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
 8081aa2:	6023      	str	r3, [r4, #0]
	}
 8081aa4:	2000      	movs	r0, #0
 8081aa6:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 8081aa8:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
 8081aaa:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 8081aac:	f7fe fb05 	bl	80800ba <_Znwj>
 8081ab0:	4603      	mov	r3, r0
 8081ab2:	2800      	cmp	r0, #0
 8081ab4:	d0f5      	beq.n	8081aa2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM6TesterFi6StringEPS2_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x12>
 8081ab6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8081aba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8081abe:	e7f0      	b.n	8081aa2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM6TesterFi6StringEPS2_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
 8081ac0:	6800      	ldr	r0, [r0, #0]
 8081ac2:	2800      	cmp	r0, #0
 8081ac4:	d0ee      	beq.n	8081aa4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM6TesterFi6StringEPS2_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 8081ac6:	210c      	movs	r1, #12
 8081ac8:	f006 f8e3 	bl	8087c92 <_ZdlPvj>
 8081acc:	e7ea      	b.n	8081aa4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM6TesterFi6StringEPS2_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

08081ace <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM6TesterFiS0_EPS3_St12_PlaceholderILi1EEEEE9_M_invokeERKSt9_Any_dataOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8081ace:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	    return __source._M_access<_Functor*>();
 8081ad0:	6802      	ldr	r2, [r0, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
 8081ad2:	6853      	ldr	r3, [r2, #4]
 8081ad4:	6890      	ldr	r0, [r2, #8]
 8081ad6:	105e      	asrs	r6, r3, #1
 8081ad8:	eb00 0563 	add.w	r5, r0, r3, asr #1
 8081adc:	07db      	lsls	r3, r3, #31
 8081ade:	6814      	ldr	r4, [r2, #0]
 8081ae0:	bf48      	it	mi
 8081ae2:	5983      	ldrmi	r3, [r0, r6]
 8081ae4:	4668      	mov	r0, sp
 8081ae6:	bf48      	it	mi
 8081ae8:	591c      	ldrmi	r4, [r3, r4]
 8081aea:	f003 f997 	bl	8084e1c <_ZN6StringC1EOS_>
 8081aee:	4669      	mov	r1, sp
 8081af0:	4628      	mov	r0, r5
 8081af2:	47a0      	blx	r4
 8081af4:	4604      	mov	r4, r0
 8081af6:	4668      	mov	r0, sp
 8081af8:	f003 f916 	bl	8084d28 <_ZN6StringD1Ev>
      }
 8081afc:	4620      	mov	r0, r4
 8081afe:	b004      	add	sp, #16
 8081b00:	bd70      	pop	{r4, r5, r6, pc}
	...

08081b04 <_ZN6TesterC1EPKci>:
	functionName(functionName), sleepTestPin(sleepTestPin) {
 8081b04:	6082      	str	r2, [r0, #8]
 8081b06:	2200      	movs	r2, #0
Tester::Tester(const char *functionName, int sleepTestPin) :
 8081b08:	b510      	push	{r4, lr}
	functionName(functionName), sleepTestPin(sleepTestPin) {
 8081b0a:	4c04      	ldr	r4, [pc, #16]	; (8081b1c <_ZN6TesterC1EPKci+0x18>)
 8081b0c:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8081b10:	e9c0 4100 	strd	r4, r1, [r0]
 8081b14:	e9c0 2205 	strd	r2, r2, [r0, #20]
}
 8081b18:	bd10      	pop	{r4, pc}
 8081b1a:	bf00      	nop
 8081b1c:	08089888 	.word	0x08089888

08081b20 <_ZN6Tester5setupEv>:
void Tester::setup() {
 8081b20:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    _Function_base() : _M_manager(nullptr) { }
 8081b22:	2400      	movs	r4, #0
 8081b24:	4605      	mov	r5, r0
	Particle.function(functionName, &Tester::functionHandler, this);
 8081b26:	6846      	ldr	r6, [r0, #4]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081b28:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
 8081b2a:	9402      	str	r4, [sp, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081b2c:	f7fe fac5 	bl	80800ba <_Znwj>
 8081b30:	b118      	cbz	r0, 8081b3a <_ZN6Tester5setupEv+0x1a>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
 8081b32:	4b16      	ldr	r3, [pc, #88]	; (8081b8c <_ZN6Tester5setupEv+0x6c>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8081b34:	6085      	str	r5, [r0, #8]
 8081b36:	e9c0 3400 	strd	r3, r4, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
 8081b3a:	4b15      	ldr	r3, [pc, #84]	; (8081b90 <_ZN6Tester5setupEv+0x70>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081b3c:	9000      	str	r0, [sp, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 8081b3e:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 8081b40:	4b14      	ldr	r3, [pc, #80]	; (8081b94 <_ZN6Tester5setupEv+0x74>)
            auto wrapper = new user_std_function_int_str_t(func);
 8081b42:	2010      	movs	r0, #16
 8081b44:	9302      	str	r3, [sp, #8]
 8081b46:	f7fe fab8 	bl	80800ba <_Znwj>
 8081b4a:	4604      	mov	r4, r0
 8081b4c:	b178      	cbz	r0, 8081b6e <_ZN6Tester5setupEv+0x4e>
    _Function_base() : _M_manager(nullptr) { }
 8081b4e:	2300      	movs	r3, #0
 8081b50:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 8081b52:	9b02      	ldr	r3, [sp, #8]
      if (static_cast<bool>(__x))
 8081b54:	b133      	cbz	r3, 8081b64 <_ZN6Tester5setupEv+0x44>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8081b56:	2202      	movs	r2, #2
 8081b58:	4669      	mov	r1, sp
 8081b5a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8081b5c:	9b03      	ldr	r3, [sp, #12]
 8081b5e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8081b60:	9b02      	ldr	r3, [sp, #8]
 8081b62:	60a3      	str	r3, [r4, #8]
                success = register_function(call_std_user_function, wrapper, funcKey);
 8081b64:	4632      	mov	r2, r6
 8081b66:	4621      	mov	r1, r4
 8081b68:	480b      	ldr	r0, [pc, #44]	; (8081b98 <_ZN6Tester5setupEv+0x78>)
 8081b6a:	f004 fef2 	bl	8086952 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
      if (_M_manager)
 8081b6e:	9b02      	ldr	r3, [sp, #8]
 8081b70:	b11b      	cbz	r3, 8081b7a <_ZN6Tester5setupEv+0x5a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8081b72:	4669      	mov	r1, sp
 8081b74:	2203      	movs	r2, #3
 8081b76:	4608      	mov	r0, r1
 8081b78:	4798      	blx	r3
	if (sleepTestPin >= 0) {
 8081b7a:	68a8      	ldr	r0, [r5, #8]
 8081b7c:	2800      	cmp	r0, #0
 8081b7e:	db03      	blt.n	8081b88 <_ZN6Tester5setupEv+0x68>
		pinMode(sleepTestPin, INPUT_PULLUP);
 8081b80:	2102      	movs	r1, #2
 8081b82:	b280      	uxth	r0, r0
 8081b84:	f005 ff36 	bl	80879f4 <pinMode>
}
 8081b88:	b004      	add	sp, #16
 8081b8a:	bd70      	pop	{r4, r5, r6, pc}
 8081b8c:	08081a81 	.word	0x08081a81
 8081b90:	08081acf 	.word	0x08081acf
 8081b94:	08081a91 	.word	0x08081a91
 8081b98:	0808690f 	.word	0x0808690f

08081b9c <_ZN6Tester14processOptionsEPc>:

// This does the actual work from the Particle.function(). It's called from looo().
void Tester::processOptions(char *mutableData) {
 8081b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081b9e:	4605      	mov	r5, r0
 8081ba0:	b08d      	sub	sp, #52	; 0x34
 8081ba2:	4608      	mov	r0, r1
	// Parse argument into space-separated fields
	const char *argv[MAX_ARGS];
	size_t argc = 0;

	char *cp = strtok(mutableData, " ");
 8081ba4:	4981      	ldr	r1, [pc, #516]	; (8081dac <_ZN6Tester14processOptionsEPc+0x210>)
 8081ba6:	f007 facd 	bl	8089144 <strtok>
 8081baa:	2400      	movs	r4, #0
	while(cp && argc < MAX_ARGS) {
		argv[argc++] = cp;
		cp = strtok(NULL, " ");
 8081bac:	4e7f      	ldr	r6, [pc, #508]	; (8081dac <_ZN6Tester14processOptionsEPc+0x210>)
		argv[argc++] = cp;
 8081bae:	af07      	add	r7, sp, #28
	while(cp && argc < MAX_ARGS) {
 8081bb0:	b148      	cbz	r0, 8081bc6 <_ZN6Tester14processOptionsEPc+0x2a>
 8081bb2:	2c05      	cmp	r4, #5
 8081bb4:	d008      	beq.n	8081bc8 <_ZN6Tester14processOptionsEPc+0x2c>
		argv[argc++] = cp;
 8081bb6:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
		cp = strtok(NULL, " ");
 8081bba:	4631      	mov	r1, r6
 8081bbc:	2000      	movs	r0, #0
 8081bbe:	f007 fac1 	bl	8089144 <strtok>
 8081bc2:	3401      	adds	r4, #1
	while(cp && argc < MAX_ARGS) {
 8081bc4:	e7f4      	b.n	8081bb0 <_ZN6Tester14processOptionsEPc+0x14>
	}
	if (argc == 0) {
 8081bc6:	b17c      	cbz	r4, 8081be8 <_ZN6Tester14processOptionsEPc+0x4c>
		return;
	}

	// Delay a bit here to make sure the function result is returned, otherwise if we
	// immediately go to sleep the function may return a timeout error.
	delay(500);
 8081bc8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8081bcc:	f004 fcb4 	bl	8086538 <delay>

	// Process options here
	if (strcmp(argv[0], "reset") == 0) {
 8081bd0:	9e07      	ldr	r6, [sp, #28]
 8081bd2:	4977      	ldr	r1, [pc, #476]	; (8081db0 <_ZN6Tester14processOptionsEPc+0x214>)
 8081bd4:	4630      	mov	r0, r6
 8081bd6:	f007 fa46 	bl	8089066 <strcmp>
 8081bda:	b938      	cbnz	r0, 8081bec <_ZN6Tester14processOptionsEPc+0x50>
		ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_TESTER_RESET);
 8081bdc:	2100      	movs	r1, #0
 8081bde:	200a      	movs	r0, #10
 8081be0:	f000 fe54 	bl	808288c <_ZN16ConnectionEvents8addEventEii>
		System.reset();
 8081be4:	f002 fffd 	bl	8084be2 <_ZN11SystemClass5resetEv>
			pingInterval = 0;
		}

	}

}
 8081be8:	b00d      	add	sp, #52	; 0x34
 8081bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (strcmp(argv[0], "modemReset") == 0) {
 8081bec:	4971      	ldr	r1, [pc, #452]	; (8081db4 <_ZN6Tester14processOptionsEPc+0x218>)
 8081bee:	4630      	mov	r0, r6
 8081bf0:	f007 fa39 	bl	8089066 <strcmp>
 8081bf4:	4601      	mov	r1, r0
 8081bf6:	b950      	cbnz	r0, 8081c0e <_ZN6Tester14processOptionsEPc+0x72>
	inline ConnectionCheck &withListenWaitForReboot(unsigned long value) { listenWaitForReboot = value; return *this; };
	inline ConnectionCheck &withCloudWaitForReboot(unsigned long value) { cloudWaitForReboot = value; return *this; };
	inline ConnectionCheck &withPingTimeout(unsigned long value) { pingTimeout = value; return *this; };
	inline ConnectionCheck &withFailureSleepSec(unsigned long value) { failureSleepSec = value; return *this; };

	static inline ConnectionCheck *getInstance() { return instance; };
 8081bf8:	4c6f      	ldr	r4, [pc, #444]	; (8081db8 <_ZN6Tester14processOptionsEPc+0x21c>)
		if (ConnectionCheck::getInstance()) {
 8081bfa:	6823      	ldr	r3, [r4, #0]
 8081bfc:	2b00      	cmp	r3, #0
 8081bfe:	d0ed      	beq.n	8081bdc <_ZN6Tester14processOptionsEPc+0x40>
			ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_TESTER_RESET_MODEM);
 8081c00:	2011      	movs	r0, #17
 8081c02:	f000 fe43 	bl	808288c <_ZN16ConnectionEvents8addEventEii>
			ConnectionCheck::getInstance()->fullModemReset();
 8081c06:	6820      	ldr	r0, [r4, #0]
 8081c08:	f000 f990 	bl	8081f2c <_ZN15ConnectionCheck14fullModemResetEv>
 8081c0c:	e7ec      	b.n	8081be8 <_ZN6Tester14processOptionsEPc+0x4c>
	if (strcmp(argv[0], "resetSession") == 0) {
 8081c0e:	496b      	ldr	r1, [pc, #428]	; (8081dbc <_ZN6Tester14processOptionsEPc+0x220>)
 8081c10:	4630      	mov	r0, r6
 8081c12:	f007 fa28 	bl	8089066 <strcmp>
 8081c16:	4601      	mov	r1, r0
 8081c18:	bb10      	cbnz	r0, 8081c60 <_ZN6Tester14processOptionsEPc+0xc4>
		ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_TESTER_RESET_SESSION);
 8081c1a:	2010      	movs	r0, #16
 8081c1c:	f000 fe36 	bl	808288c <_ZN16ConnectionEvents8addEventEii>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 8081c20:	4b67      	ldr	r3, [pc, #412]	; (8081dc0 <_ZN6Tester14processOptionsEPc+0x224>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8081c22:	4a68      	ldr	r2, [pc, #416]	; (8081dc4 <_ZN6Tester14processOptionsEPc+0x228>)
 8081c24:	781b      	ldrb	r3, [r3, #0]
 8081c26:	4968      	ldr	r1, [pc, #416]	; (8081dc8 <_ZN6Tester14processOptionsEPc+0x22c>)
 8081c28:	f88d 3000 	strb.w	r3, [sp]
 8081c2c:	a805      	add	r0, sp, #20
 8081c2e:	233c      	movs	r3, #60	; 0x3c
 8081c30:	f004 ff9c 	bl	8086b6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
 8081c34:	9c06      	ldr	r4, [sp, #24]
 8081c36:	2c00      	cmp	r4, #0
 8081c38:	d0d6      	beq.n	8081be8 <_ZN6Tester14processOptionsEPc+0x4c>
      if (--_M_use_count == 0)
 8081c3a:	6863      	ldr	r3, [r4, #4]
 8081c3c:	3b01      	subs	r3, #1
 8081c3e:	6063      	str	r3, [r4, #4]
 8081c40:	2b00      	cmp	r3, #0
 8081c42:	d1d1      	bne.n	8081be8 <_ZN6Tester14processOptionsEPc+0x4c>
          _M_dispose();
 8081c44:	6823      	ldr	r3, [r4, #0]
 8081c46:	4620      	mov	r0, r4
 8081c48:	689b      	ldr	r3, [r3, #8]
 8081c4a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8081c4c:	68a3      	ldr	r3, [r4, #8]
 8081c4e:	3b01      	subs	r3, #1
 8081c50:	60a3      	str	r3, [r4, #8]
 8081c52:	2b00      	cmp	r3, #0
 8081c54:	d1c8      	bne.n	8081be8 <_ZN6Tester14processOptionsEPc+0x4c>
            _M_destroy();
 8081c56:	6823      	ldr	r3, [r4, #0]
 8081c58:	4620      	mov	r0, r4
 8081c5a:	68db      	ldr	r3, [r3, #12]
 8081c5c:	4798      	blx	r3
 8081c5e:	e7c3      	b.n	8081be8 <_ZN6Tester14processOptionsEPc+0x4c>
	if (strcmp(argv[0], "safeMode") == 0) {
 8081c60:	4630      	mov	r0, r6
 8081c62:	495a      	ldr	r1, [pc, #360]	; (8081dcc <_ZN6Tester14processOptionsEPc+0x230>)
 8081c64:	f007 f9ff 	bl	8089066 <strcmp>
 8081c68:	4607      	mov	r7, r0
 8081c6a:	b938      	cbnz	r0, 8081c7c <_ZN6Tester14processOptionsEPc+0xe0>
		ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_TESTER_SAFE_MODE);
 8081c6c:	4601      	mov	r1, r0
 8081c6e:	2013      	movs	r0, #19
 8081c70:	f000 fe0c 	bl	808288c <_ZN16ConnectionEvents8addEventEii>
		System.enterSafeMode();
 8081c74:	4638      	mov	r0, r7
 8081c76:	f002 ffb7 	bl	8084be8 <_ZN11SystemClass13enterSafeModeEN8particle5FlagsI19SystemResetFlagTypemEE>
 8081c7a:	e7b5      	b.n	8081be8 <_ZN6Tester14processOptionsEPc+0x4c>
	if (strcmp(argv[0], "appWatchdog") == 0) {
 8081c7c:	4954      	ldr	r1, [pc, #336]	; (8081dd0 <_ZN6Tester14processOptionsEPc+0x234>)
 8081c7e:	4630      	mov	r0, r6
 8081c80:	f007 f9f1 	bl	8089066 <strcmp>
 8081c84:	4601      	mov	r1, r0
 8081c86:	b918      	cbnz	r0, 8081c90 <_ZN6Tester14processOptionsEPc+0xf4>
		ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_TESTER_APP_WATCHDOG, 0);
 8081c88:	200b      	movs	r0, #11
 8081c8a:	f000 fdff 	bl	808288c <_ZN16ConnectionEvents8addEventEii>
		while(true) {
 8081c8e:	e7fe      	b.n	8081c8e <_ZN6Tester14processOptionsEPc+0xf2>
	if (strcmp(argv[0], "sleep") == 0 && argc >= 2) {
 8081c90:	4630      	mov	r0, r6
 8081c92:	4950      	ldr	r1, [pc, #320]	; (8081dd4 <_ZN6Tester14processOptionsEPc+0x238>)
 8081c94:	f007 f9e7 	bl	8089066 <strcmp>
 8081c98:	2800      	cmp	r0, #0
 8081c9a:	d165      	bne.n	8081d68 <_ZN6Tester14processOptionsEPc+0x1cc>
 8081c9c:	2c01      	cmp	r4, #1
 8081c9e:	d063      	beq.n	8081d68 <_ZN6Tester14processOptionsEPc+0x1cc>
		if (argc >= 3) {
 8081ca0:	2c02      	cmp	r4, #2
 8081ca2:	d112      	bne.n	8081cca <_ZN6Tester14processOptionsEPc+0x12e>
		int duration = 30;
 8081ca4:	241e      	movs	r4, #30
		ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_TESTER_SLEEP, duration);
 8081ca6:	4621      	mov	r1, r4
 8081ca8:	200c      	movs	r0, #12
 8081caa:	f000 fdef 	bl	808288c <_ZN16ConnectionEvents8addEventEii>
		if (strcmp(argv[1], "deep") == 0) {
 8081cae:	9e08      	ldr	r6, [sp, #32]
 8081cb0:	4949      	ldr	r1, [pc, #292]	; (8081dd8 <_ZN6Tester14processOptionsEPc+0x23c>)
 8081cb2:	4630      	mov	r0, r6
 8081cb4:	f007 f9d7 	bl	8089066 <strcmp>
 8081cb8:	b970      	cbnz	r0, 8081cd8 <_ZN6Tester14processOptionsEPc+0x13c>
			System.sleep(SLEEP_MODE_DEEP, duration);
 8081cba:	4b48      	ldr	r3, [pc, #288]	; (8081ddc <_ZN6Tester14processOptionsEPc+0x240>)
			System.sleep(SLEEP_MODE_DEEP, duration, SLEEP_NETWORK_STANDBY);
 8081cbc:	4622      	mov	r2, r4
 8081cbe:	2101      	movs	r1, #1
 8081cc0:	681b      	ldr	r3, [r3, #0]
 8081cc2:	a805      	add	r0, sp, #20
 8081cc4:	f002 ff9c 	bl	8084c00 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
 8081cc8:	e78e      	b.n	8081be8 <_ZN6Tester14processOptionsEPc+0x4c>
			duration = atoi(argv[2]);
 8081cca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8081ccc:	f007 f94a 	bl	8088f64 <atoi>
			if (duration == 0) {
 8081cd0:	4604      	mov	r4, r0
 8081cd2:	2800      	cmp	r0, #0
 8081cd4:	d0e6      	beq.n	8081ca4 <_ZN6Tester14processOptionsEPc+0x108>
 8081cd6:	e7e6      	b.n	8081ca6 <_ZN6Tester14processOptionsEPc+0x10a>
		if (strcmp(argv[1], "deepStandby") == 0) {
 8081cd8:	4630      	mov	r0, r6
 8081cda:	4941      	ldr	r1, [pc, #260]	; (8081de0 <_ZN6Tester14processOptionsEPc+0x244>)
 8081cdc:	f007 f9c3 	bl	8089066 <strcmp>
 8081ce0:	b908      	cbnz	r0, 8081ce6 <_ZN6Tester14processOptionsEPc+0x14a>
			System.sleep(SLEEP_MODE_DEEP, duration, SLEEP_NETWORK_STANDBY);
 8081ce2:	4b40      	ldr	r3, [pc, #256]	; (8081de4 <_ZN6Tester14processOptionsEPc+0x248>)
 8081ce4:	e7ea      	b.n	8081cbc <_ZN6Tester14processOptionsEPc+0x120>
		if (strcmp(argv[1], "stop") == 0) {
 8081ce6:	4630      	mov	r0, r6
 8081ce8:	493f      	ldr	r1, [pc, #252]	; (8081de8 <_ZN6Tester14processOptionsEPc+0x24c>)
 8081cea:	f007 f9bc 	bl	8089066 <strcmp>
 8081cee:	4607      	mov	r7, r0
 8081cf0:	b9d0      	cbnz	r0, 8081d28 <_ZN6Tester14processOptionsEPc+0x18c>
			if (sleepTestPin >= 0) {
 8081cf2:	68ab      	ldr	r3, [r5, #8]
 8081cf4:	2b00      	cmp	r3, #0
 8081cf6:	f6ff af77 	blt.w	8081be8 <_ZN6Tester14processOptionsEPc+0x4c>
				System.sleep(sleepTestPin, FALLING, duration);
 8081cfa:	4a38      	ldr	r2, [pc, #224]	; (8081ddc <_ZN6Tester14processOptionsEPc+0x240>)
 8081cfc:	f8ad 3012 	strh.w	r3, [sp, #18]
 8081d00:	6812      	ldr	r2, [r2, #0]
inline ValueT particle::Flag<TagT, ValueT>::value() const {
 8081d02:	2302      	movs	r3, #2
    inline static SleepResult sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF) { return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag); }
 8081d04:	e9cd 4201 	strd	r4, r2, [sp, #4]
 8081d08:	2201      	movs	r2, #1
 8081d0a:	f88d 3011 	strb.w	r3, [sp, #17]
 8081d0e:	f10d 0112 	add.w	r1, sp, #18
 8081d12:	9200      	str	r2, [sp, #0]
 8081d14:	f10d 0311 	add.w	r3, sp, #17
 8081d18:	a805      	add	r0, sp, #20
 8081d1a:	f002 ffaf 	bl	8084c7c <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
				ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_STOP_SLEEP_WAKE, 0);
 8081d1e:	4639      	mov	r1, r7
				ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_STOP_SLEEP_WAKE, 0);
 8081d20:	2015      	movs	r0, #21
 8081d22:	f000 fdb3 	bl	808288c <_ZN16ConnectionEvents8addEventEii>
 8081d26:	e75f      	b.n	8081be8 <_ZN6Tester14processOptionsEPc+0x4c>
		if (strcmp(argv[1], "stopStandby") == 0) {
 8081d28:	4630      	mov	r0, r6
 8081d2a:	4930      	ldr	r1, [pc, #192]	; (8081dec <_ZN6Tester14processOptionsEPc+0x250>)
 8081d2c:	f007 f99b 	bl	8089066 <strcmp>
 8081d30:	4606      	mov	r6, r0
 8081d32:	2800      	cmp	r0, #0
 8081d34:	f47f af58 	bne.w	8081be8 <_ZN6Tester14processOptionsEPc+0x4c>
			if (sleepTestPin >= 0) {
 8081d38:	68ab      	ldr	r3, [r5, #8]
 8081d3a:	2b00      	cmp	r3, #0
 8081d3c:	f6ff af54 	blt.w	8081be8 <_ZN6Tester14processOptionsEPc+0x4c>
				System.sleep(sleepTestPin, FALLING, duration, SLEEP_NETWORK_STANDBY);
 8081d40:	4a28      	ldr	r2, [pc, #160]	; (8081de4 <_ZN6Tester14processOptionsEPc+0x248>)
 8081d42:	f8ad 3012 	strh.w	r3, [sp, #18]
 8081d46:	6812      	ldr	r2, [r2, #0]
 8081d48:	2302      	movs	r3, #2
 8081d4a:	e9cd 4201 	strd	r4, r2, [sp, #4]
 8081d4e:	2201      	movs	r2, #1
 8081d50:	f88d 3011 	strb.w	r3, [sp, #17]
 8081d54:	f10d 0112 	add.w	r1, sp, #18
 8081d58:	9200      	str	r2, [sp, #0]
 8081d5a:	f10d 0311 	add.w	r3, sp, #17
 8081d5e:	a805      	add	r0, sp, #20
 8081d60:	f002 ff8c 	bl	8084c7c <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
				ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_STOP_SLEEP_WAKE, 0);
 8081d64:	4631      	mov	r1, r6
 8081d66:	e7db      	b.n	8081d20 <_ZN6Tester14processOptionsEPc+0x184>
	if (strcmp(argv[0], "ping") == 0 && argc >= 2) {
 8081d68:	4630      	mov	r0, r6
 8081d6a:	4921      	ldr	r1, [pc, #132]	; (8081df0 <_ZN6Tester14processOptionsEPc+0x254>)
 8081d6c:	f007 f97b 	bl	8089066 <strcmp>
 8081d70:	2800      	cmp	r0, #0
 8081d72:	f47f af39 	bne.w	8081be8 <_ZN6Tester14processOptionsEPc+0x4c>
 8081d76:	2c01      	cmp	r4, #1
 8081d78:	f43f af36 	beq.w	8081be8 <_ZN6Tester14processOptionsEPc+0x4c>
		if (strcmp(argv[1], "start") == 0) {
 8081d7c:	9e08      	ldr	r6, [sp, #32]
 8081d7e:	491d      	ldr	r1, [pc, #116]	; (8081df4 <_ZN6Tester14processOptionsEPc+0x258>)
 8081d80:	4630      	mov	r0, r6
 8081d82:	f007 f970 	bl	8089066 <strcmp>
 8081d86:	b948      	cbnz	r0, 8081d9c <_ZN6Tester14processOptionsEPc+0x200>
			if (argc >= 3) {
 8081d88:	2c02      	cmp	r4, #2
 8081d8a:	d004      	beq.n	8081d96 <_ZN6Tester14processOptionsEPc+0x1fa>
				pingInterval = (unsigned long) atoi(argv[2]);
 8081d8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8081d8e:	f007 f8e9 	bl	8088f64 <atoi>
			pingInterval = 0;
 8081d92:	6168      	str	r0, [r5, #20]
 8081d94:	e728      	b.n	8081be8 <_ZN6Tester14processOptionsEPc+0x4c>
				pingInterval = 30;
 8081d96:	231e      	movs	r3, #30
 8081d98:	616b      	str	r3, [r5, #20]
 8081d9a:	e725      	b.n	8081be8 <_ZN6Tester14processOptionsEPc+0x4c>
		if (strcmp(argv[1], "stop") == 0) {
 8081d9c:	4630      	mov	r0, r6
 8081d9e:	4912      	ldr	r1, [pc, #72]	; (8081de8 <_ZN6Tester14processOptionsEPc+0x24c>)
 8081da0:	f007 f961 	bl	8089066 <strcmp>
 8081da4:	2800      	cmp	r0, #0
 8081da6:	f47f af1f 	bne.w	8081be8 <_ZN6Tester14processOptionsEPc+0x4c>
 8081daa:	e7f2      	b.n	8081d92 <_ZN6Tester14processOptionsEPc+0x1f6>
 8081dac:	08089a89 	.word	0x08089a89
 8081db0:	08089800 	.word	0x08089800
 8081db4:	08089806 	.word	0x08089806
 8081db8:	200002a0 	.word	0x200002a0
 8081dbc:	08089811 	.word	0x08089811
 8081dc0:	20000298 	.word	0x20000298
 8081dc4:	080898a4 	.word	0x080898a4
 8081dc8:	0808981e 	.word	0x0808981e
 8081dcc:	08089837 	.word	0x08089837
 8081dd0:	08089840 	.word	0x08089840
 8081dd4:	0808984c 	.word	0x0808984c
 8081dd8:	08089852 	.word	0x08089852
 8081ddc:	20000290 	.word	0x20000290
 8081de0:	08089857 	.word	0x08089857
 8081de4:	20000294 	.word	0x20000294
 8081de8:	08089863 	.word	0x08089863
 8081dec:	08089868 	.word	0x08089868
 8081df0:	08089874 	.word	0x08089874
 8081df4:	08089879 	.word	0x08089879

08081df8 <_ZN6Tester4loopEv>:
void Tester::loop() {
 8081df8:	b510      	push	{r4, lr}
	if (functionData) {
 8081dfa:	68c1      	ldr	r1, [r0, #12]
void Tester::loop() {
 8081dfc:	4604      	mov	r4, r0
	if (functionData) {
 8081dfe:	b131      	cbz	r1, 8081e0e <_ZN6Tester4loopEv+0x16>
		processOptions(functionData);
 8081e00:	f7ff fecc 	bl	8081b9c <_ZN6Tester14processOptionsEPc>
		free(functionData);
 8081e04:	68e0      	ldr	r0, [r4, #12]
 8081e06:	f002 fd6f 	bl	80848e8 <free>
		functionData = NULL;
 8081e0a:	2300      	movs	r3, #0
 8081e0c:	60e3      	str	r3, [r4, #12]
	if (pingInterval > 0) {
 8081e0e:	6963      	ldr	r3, [r4, #20]
 8081e10:	2b00      	cmp	r3, #0
 8081e12:	dd14      	ble.n	8081e3e <_ZN6Tester4loopEv+0x46>
 8081e14:	f002 fa30 	bl	8084278 <HAL_Timer_Get_Milli_Seconds>
		if (millis() - lastPing >= (unsigned long) (pingInterval * 1000)) {
 8081e18:	6923      	ldr	r3, [r4, #16]
 8081e1a:	6962      	ldr	r2, [r4, #20]
 8081e1c:	1ac0      	subs	r0, r0, r3
 8081e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8081e22:	4353      	muls	r3, r2
 8081e24:	4298      	cmp	r0, r3
 8081e26:	d30a      	bcc.n	8081e3e <_ZN6Tester4loopEv+0x46>
 8081e28:	f002 fa26 	bl	8084278 <HAL_Timer_Get_Milli_Seconds>
			ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_TESTER_PING, ++pingCounter);
 8081e2c:	69a1      	ldr	r1, [r4, #24]
			lastPing = millis();
 8081e2e:	6120      	str	r0, [r4, #16]
			ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_TESTER_PING, ++pingCounter);
 8081e30:	3101      	adds	r1, #1
 8081e32:	61a1      	str	r1, [r4, #24]
 8081e34:	2014      	movs	r0, #20
}
 8081e36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_TESTER_PING, ++pingCounter);
 8081e3a:	f000 bd27 	b.w	808288c <_ZN16ConnectionEvents8addEventEii>
}
 8081e3e:	bd10      	pop	{r4, pc}

08081e40 <_GLOBAL__sub_I__ZN6TesterC2EPKci>:
        val_(val) {
 8081e40:	2200      	movs	r2, #0
 8081e42:	4b04      	ldr	r3, [pc, #16]	; (8081e54 <_GLOBAL__sub_I__ZN6TesterC2EPKci+0x14>)
 8081e44:	601a      	str	r2, [r3, #0]
 8081e46:	2301      	movs	r3, #1
 8081e48:	4a03      	ldr	r2, [pc, #12]	; (8081e58 <_GLOBAL__sub_I__ZN6TesterC2EPKci+0x18>)
 8081e4a:	6013      	str	r3, [r2, #0]
 8081e4c:	4a03      	ldr	r2, [pc, #12]	; (8081e5c <_GLOBAL__sub_I__ZN6TesterC2EPKci+0x1c>)
 8081e4e:	7013      	strb	r3, [r2, #0]
}
 8081e50:	4770      	bx	lr
 8081e52:	bf00      	nop
 8081e54:	20000290 	.word	0x20000290
 8081e58:	20000294 	.word	0x20000294
 8081e5c:	20000298 	.word	0x20000298

08081e60 <_ZN15ConnectionCheckD1Ev>:
		connectionCheckRetainedData.numFailures = 0;
	}
}
ConnectionCheck::~ConnectionCheck() {

}
 8081e60:	4770      	bx	lr

08081e62 <_ZN15ConnectionCheckD0Ev>:
ConnectionCheck::~ConnectionCheck() {
 8081e62:	b510      	push	{r4, lr}
 8081e64:	4604      	mov	r4, r0
}
 8081e66:	2120      	movs	r1, #32
 8081e68:	f005 ff13 	bl	8087c92 <_ZdlPvj>
 8081e6c:	4620      	mov	r0, r4
 8081e6e:	bd10      	pop	{r4, pc}

08081e70 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 8081e70:	b40e      	push	{r1, r2, r3}
 8081e72:	b510      	push	{r4, lr}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 8081e74:	2300      	movs	r3, #0
    log(LOG_LEVEL_INFO, fmt, args);
 8081e76:	6801      	ldr	r1, [r0, #0]
    attr.flags = 0;
 8081e78:	2020      	movs	r0, #32
inline void spark::Logger::info(const char *fmt, ...) const {
 8081e7a:	b08d      	sub	sp, #52	; 0x34
 8081e7c:	aa0f      	add	r2, sp, #60	; 0x3c
 8081e7e:	f852 4b04 	ldr.w	r4, [r2], #4
    attr.flags = 0;
 8081e82:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8081e86:	e9cd 4200 	strd	r4, r2, [sp]
    va_start(args, fmt);
 8081e8a:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8081e8c:	201e      	movs	r0, #30
 8081e8e:	aa04      	add	r2, sp, #16
 8081e90:	f002 fbe2 	bl	8084658 <log_message_v>
}
 8081e94:	b00d      	add	sp, #52	; 0x34
 8081e96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8081e9a:	b003      	add	sp, #12
 8081e9c:	4770      	bx	lr
	...

08081ea0 <_ZN15ConnectionCheckC1Ev>:
ConnectionCheck::ConnectionCheck()  {
 8081ea0:	f247 5230 	movw	r2, #30000	; 0x7530
 8081ea4:	4b0b      	ldr	r3, [pc, #44]	; (8081ed4 <_ZN15ConnectionCheckC1Ev+0x34>)
 8081ea6:	f242 7110 	movw	r1, #10000	; 0x2710
 8081eaa:	6003      	str	r3, [r0, #0]
 8081eac:	4b0a      	ldr	r3, [pc, #40]	; (8081ed8 <_ZN15ConnectionCheckC1Ev+0x38>)
 8081eae:	b510      	push	{r4, lr}
 8081eb0:	e9c0 2301 	strd	r2, r3, [r0, #4]
 8081eb4:	2300      	movs	r3, #0
	instance = this;
 8081eb6:	4a09      	ldr	r2, [pc, #36]	; (8081edc <_ZN15ConnectionCheckC1Ev+0x3c>)
ConnectionCheck::ConnectionCheck()  {
 8081eb8:	e9c0 1303 	strd	r1, r3, [r0, #12]
	instance = this;
 8081ebc:	6010      	str	r0, [r2, #0]
	if (connectionCheckRetainedData.magic != CONNECTION_CHECK_MAGIC) {
 8081ebe:	4a08      	ldr	r2, [pc, #32]	; (8081ee0 <_ZN15ConnectionCheckC1Ev+0x40>)
 8081ec0:	4908      	ldr	r1, [pc, #32]	; (8081ee4 <_ZN15ConnectionCheckC1Ev+0x44>)
 8081ec2:	6814      	ldr	r4, [r2, #0]
ConnectionCheck::ConnectionCheck()  {
 8081ec4:	e9c0 3306 	strd	r3, r3, [r0, #24]
	if (connectionCheckRetainedData.magic != CONNECTION_CHECK_MAGIC) {
 8081ec8:	428c      	cmp	r4, r1
		connectionCheckRetainedData.numFailures = 0;
 8081eca:	bf18      	it	ne
 8081ecc:	e9c2 1300 	strdne	r1, r3, [r2]
ConnectionCheck::ConnectionCheck()  {
 8081ed0:	8283      	strh	r3, [r0, #20]
}
 8081ed2:	bd10      	pop	{r4, pc}
 8081ed4:	08089928 	.word	0x08089928
 8081ed8:	0002bf20 	.word	0x0002bf20
 8081edc:	200002a0 	.word	0x200002a0
 8081ee0:	40024000 	.word	0x40024000
 8081ee4:	2e4ec594 	.word	0x2e4ec594

08081ee8 <_ZN15ConnectionCheck5setupEv>:

void ConnectionCheck::setup() {

}
 8081ee8:	4770      	bx	lr
	...

08081eec <_ZN15ConnectionCheck17cloudConnectDebugEv>:
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
 8081eec:	2100      	movs	r1, #0


// This is called when timing out connecting to the cloud. It adds some debugging events to
// help log the current state for debugging purposes.
// It returns true to force a modem reset immediately, false to use the normal logic for whether to reset the modem.
bool ConnectionCheck::cloudConnectDebug() {
 8081eee:	b510      	push	{r4, lr}
 8081ef0:	4b0c      	ldr	r3, [pc, #48]	; (8081f24 <_ZN15ConnectionCheck17cloudConnectDebugEv+0x38>)
 8081ef2:	68c2      	ldr	r2, [r0, #12]
 8081ef4:	4604      	mov	r4, r0
 8081ef6:	4608      	mov	r0, r1
 8081ef8:	f002 fb5e 	bl	80845b8 <cellular_command>
 8081efc:	4601      	mov	r1, r0
	int res = Cellular.command(pingTimeout, "AT+UPING=\"8.8.8.8\"\r\n");
	ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_PING_DNS, res);
 8081efe:	2007      	movs	r0, #7
 8081f00:	f000 fcc4 	bl	808288c <_ZN16ConnectionEvents8addEventEii>
 8081f04:	2100      	movs	r1, #0
 8081f06:	68e2      	ldr	r2, [r4, #12]
 8081f08:	4b07      	ldr	r3, [pc, #28]	; (8081f28 <_ZN15ConnectionCheck17cloudConnectDebugEv+0x3c>)
 8081f0a:	4608      	mov	r0, r1
 8081f0c:	f002 fb54 	bl	80845b8 <cellular_command>
 8081f10:	4604      	mov	r4, r0

	res = Cellular.command(pingTimeout, "AT+UPING=\"api.particle.io\"\r\n");
	ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_PING_API, res);
 8081f12:	4601      	mov	r1, r0
 8081f14:	2008      	movs	r0, #8
 8081f16:	f000 fcb9 	bl	808288c <_ZN16ConnectionEvents8addEventEii>

	// If pinging api.particle.io does not succeed, then reboot the modem right away
	return (res != RESP_OK);
}
 8081f1a:	1ca0      	adds	r0, r4, #2
 8081f1c:	bf18      	it	ne
 8081f1e:	2001      	movne	r0, #1
 8081f20:	bd10      	pop	{r4, pc}
 8081f22:	bf00      	nop
 8081f24:	08089890 	.word	0x08089890
 8081f28:	080898a5 	.word	0x080898a5

08081f2c <_ZN15ConnectionCheck14fullModemResetEv>:


// reason is the reason code, one of the ConnectionEvents::CONNECTION_EVENT_* constants
// forceResetMode will reset the modem even immediately instead of waiting for multiple failures
void ConnectionCheck::fullModemReset() {
 8081f2c:	b530      	push	{r4, r5, lr}

	Log.info("resetting modem");
 8081f2e:	491b      	ldr	r1, [pc, #108]	; (8081f9c <_ZN15ConnectionCheck14fullModemResetEv+0x70>)
void ConnectionCheck::fullModemReset() {
 8081f30:	b085      	sub	sp, #20
	Log.info("resetting modem");
 8081f32:	481b      	ldr	r0, [pc, #108]	; (8081fa0 <_ZN15ConnectionCheck14fullModemResetEv+0x74>)
 8081f34:	f7ff ff9c 	bl	8081e70 <_ZNK5spark6Logger4infoEPKcz>

	ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_MODEM_RESET);
 8081f38:	2100      	movs	r1, #0
 8081f3a:	2004      	movs	r0, #4
 8081f3c:	f000 fca6 	bl	808288c <_ZN16ConnectionEvents8addEventEii>
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
 8081f40:	2300      	movs	r3, #0

	// Disconnect from the cloud
	Particle.disconnect();
 8081f42:	a801      	add	r0, sp, #4
 8081f44:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8081f48:	f8ad 300c 	strh.w	r3, [sp, #12]
 8081f4c:	f004 fd12 	bl	8086974 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
 8081f50:	f002 f992 	bl	8084278 <HAL_Timer_Get_Milli_Seconds>

	// Wait up to 15 seconds to disconnect
	unsigned long startTime = millis();
	while(Particle.connected() && millis() - startTime < 15000) {
 8081f54:	f643 2597 	movw	r5, #14999	; 0x3a97
 8081f58:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8081f5a:	f002 fc85 	bl	8084868 <spark_cloud_flag_connected>
 8081f5e:	b140      	cbz	r0, 8081f72 <_ZN15ConnectionCheck14fullModemResetEv+0x46>
 8081f60:	f002 f98a 	bl	8084278 <HAL_Timer_Get_Milli_Seconds>
 8081f64:	1b00      	subs	r0, r0, r4
 8081f66:	42a8      	cmp	r0, r5
 8081f68:	d803      	bhi.n	8081f72 <_ZN15ConnectionCheck14fullModemResetEv+0x46>
		delay(100);
 8081f6a:	2064      	movs	r0, #100	; 0x64
 8081f6c:	f004 fae4 	bl	8086538 <delay>
	while(Particle.connected() && millis() - startTime < 15000) {
 8081f70:	e7f3      	b.n	8081f5a <_ZN15ConnectionCheck14fullModemResetEv+0x2e>
 8081f72:	2100      	movs	r1, #0
 8081f74:	f247 5230 	movw	r2, #30000	; 0x7530
 8081f78:	4608      	mov	r0, r1
 8081f7a:	4b0a      	ldr	r3, [pc, #40]	; (8081fa4 <_ZN15ConnectionCheck14fullModemResetEv+0x78>)
 8081f7c:	f002 fb1c 	bl	80845b8 <cellular_command>

	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");

	delay(1000);
 8081f80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8081f84:	f004 fad8 	bl	8086538 <delay>

	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
 8081f88:	4b07      	ldr	r3, [pc, #28]	; (8081fa8 <_ZN15ConnectionCheck14fullModemResetEv+0x7c>)
 8081f8a:	220a      	movs	r2, #10
 8081f8c:	2101      	movs	r1, #1
 8081f8e:	681b      	ldr	r3, [r3, #0]
 8081f90:	a801      	add	r0, sp, #4
 8081f92:	f002 fe35 	bl	8084c00 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
 8081f96:	b005      	add	sp, #20
 8081f98:	bd30      	pop	{r4, r5, pc}
 8081f9a:	bf00      	nop
 8081f9c:	080898c2 	.word	0x080898c2
 8081fa0:	200003b4 	.word	0x200003b4
 8081fa4:	080898d2 	.word	0x080898d2
 8081fa8:	2000029c 	.word	0x2000029c

08081fac <_ZN15ConnectionCheck4loopEv>:
void ConnectionCheck::loop() {
 8081fac:	b537      	push	{r0, r1, r2, r4, r5, lr}
        return network_ready(*this, 0,  NULL);
 8081fae:	2200      	movs	r2, #0
 8081fb0:	4d45      	ldr	r5, [pc, #276]	; (80820c8 <_ZN15ConnectionCheck4loopEv+0x11c>)
 8081fb2:	4604      	mov	r4, r0
 8081fb4:	4611      	mov	r1, r2
 8081fb6:	6868      	ldr	r0, [r5, #4]
 8081fb8:	f002 fbee 	bl	8084798 <network_ready>
	if (temp != isCellularReady) {
 8081fbc:	7d23      	ldrb	r3, [r4, #20]
 8081fbe:	4601      	mov	r1, r0
 8081fc0:	4283      	cmp	r3, r0
 8081fc2:	d00d      	beq.n	8081fe0 <_ZN15ConnectionCheck4loopEv+0x34>
		isCellularReady = temp;
 8081fc4:	7520      	strb	r0, [r4, #20]
		ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_CELLULAR_READY, isCellularReady);
 8081fc6:	2001      	movs	r0, #1
 8081fc8:	f000 fc60 	bl	808288c <_ZN16ConnectionEvents8addEventEii>
		Log.info("cellular %s", isCellularReady ? "up" : "down");
 8081fcc:	7d21      	ldrb	r1, [r4, #20]
 8081fce:	4a3f      	ldr	r2, [pc, #252]	; (80820cc <_ZN15ConnectionCheck4loopEv+0x120>)
 8081fd0:	4b3f      	ldr	r3, [pc, #252]	; (80820d0 <_ZN15ConnectionCheck4loopEv+0x124>)
 8081fd2:	4840      	ldr	r0, [pc, #256]	; (80820d4 <_ZN15ConnectionCheck4loopEv+0x128>)
 8081fd4:	2900      	cmp	r1, #0
 8081fd6:	bf08      	it	eq
 8081fd8:	461a      	moveq	r2, r3
 8081fda:	493f      	ldr	r1, [pc, #252]	; (80820d8 <_ZN15ConnectionCheck4loopEv+0x12c>)
 8081fdc:	f7ff ff48 	bl	8081e70 <_ZNK5spark6Logger4infoEPKcz>
 8081fe0:	f002 fc42 	bl	8084868 <spark_cloud_flag_connected>
	if (temp != isCloudConnected) {
 8081fe4:	7d63      	ldrb	r3, [r4, #21]
 8081fe6:	4601      	mov	r1, r0
 8081fe8:	4283      	cmp	r3, r0
 8081fea:	d02b      	beq.n	8082044 <_ZN15ConnectionCheck4loopEv+0x98>
		isCloudConnected = temp;
 8081fec:	7560      	strb	r0, [r4, #21]
		ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_CLOUD_CONNECTED, isCloudConnected);
 8081fee:	2002      	movs	r0, #2
 8081ff0:	f000 fc4c 	bl	808288c <_ZN16ConnectionEvents8addEventEii>
		Log.info("cloud connection %s", isCloudConnected ? "up" : "down");
 8081ff4:	7d61      	ldrb	r1, [r4, #21]
 8081ff6:	4b36      	ldr	r3, [pc, #216]	; (80820d0 <_ZN15ConnectionCheck4loopEv+0x124>)
 8081ff8:	4a34      	ldr	r2, [pc, #208]	; (80820cc <_ZN15ConnectionCheck4loopEv+0x120>)
 8081ffa:	4836      	ldr	r0, [pc, #216]	; (80820d4 <_ZN15ConnectionCheck4loopEv+0x128>)
 8081ffc:	2900      	cmp	r1, #0
 8081ffe:	bf08      	it	eq
 8082000:	461a      	moveq	r2, r3
 8082002:	4936      	ldr	r1, [pc, #216]	; (80820dc <_ZN15ConnectionCheck4loopEv+0x130>)
 8082004:	f7ff ff34 	bl	8081e70 <_ZNK5spark6Logger4infoEPKcz>
		if (isCloudConnected) {
 8082008:	7d63      	ldrb	r3, [r4, #21]
 808200a:	b1c3      	cbz	r3, 808203e <_ZN15ConnectionCheck4loopEv+0x92>
			connectionCheckRetainedData.numFailures = 0;
 808200c:	2200      	movs	r2, #0
 808200e:	4b34      	ldr	r3, [pc, #208]	; (80820e0 <_ZN15ConnectionCheck4loopEv+0x134>)
 8082010:	605a      	str	r2, [r3, #4]
        return network_listening(*this, 0, NULL);
 8082012:	2200      	movs	r2, #0
 8082014:	6868      	ldr	r0, [r5, #4]
 8082016:	4611      	mov	r1, r2
 8082018:	f002 fbde 	bl	80847d8 <network_listening>
	if (Cellular.listening()) {
 808201c:	b168      	cbz	r0, 808203a <_ZN15ConnectionCheck4loopEv+0x8e>
		if (listeningStart == 0) {
 808201e:	69a5      	ldr	r5, [r4, #24]
 8082020:	2d00      	cmp	r5, #0
 8082022:	d13c      	bne.n	808209e <_ZN15ConnectionCheck4loopEv+0xf2>
 8082024:	f002 f928 	bl	8084278 <HAL_Timer_Get_Milli_Seconds>
			ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_LISTENING_ENTERED);
 8082028:	4629      	mov	r1, r5
			listeningStart = millis();
 808202a:	61a0      	str	r0, [r4, #24]
			ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_LISTENING_ENTERED);
 808202c:	2003      	movs	r0, #3
 808202e:	f000 fc2d 	bl	808288c <_ZN16ConnectionEvents8addEventEii>
			Log.info("entered listening mode");
 8082032:	492c      	ldr	r1, [pc, #176]	; (80820e4 <_ZN15ConnectionCheck4loopEv+0x138>)
 8082034:	4827      	ldr	r0, [pc, #156]	; (80820d4 <_ZN15ConnectionCheck4loopEv+0x128>)
 8082036:	f7ff ff1b 	bl	8081e70 <_ZNK5spark6Logger4infoEPKcz>
}
 808203a:	b003      	add	sp, #12
 808203c:	bd30      	pop	{r4, r5, pc}
 808203e:	f002 f91b 	bl	8084278 <HAL_Timer_Get_Milli_Seconds>
			cloudCheckStart = millis();
 8082042:	61e0      	str	r0, [r4, #28]
	if (!isCloudConnected) {
 8082044:	7d63      	ldrb	r3, [r4, #21]
 8082046:	2b00      	cmp	r3, #0
 8082048:	d1e3      	bne.n	8082012 <_ZN15ConnectionCheck4loopEv+0x66>
		if (cloudWaitForReboot != 0 && millis() - cloudCheckStart >= cloudWaitForReboot) {
 808204a:	68a3      	ldr	r3, [r4, #8]
 808204c:	2b00      	cmp	r3, #0
 808204e:	d0e0      	beq.n	8082012 <_ZN15ConnectionCheck4loopEv+0x66>
 8082050:	f002 f912 	bl	8084278 <HAL_Timer_Get_Milli_Seconds>
 8082054:	69e3      	ldr	r3, [r4, #28]
 8082056:	1ac0      	subs	r0, r0, r3
 8082058:	68a3      	ldr	r3, [r4, #8]
 808205a:	4298      	cmp	r0, r3
 808205c:	d3d9      	bcc.n	8082012 <_ZN15ConnectionCheck4loopEv+0x66>
			if (isCellularReady) {
 808205e:	7d23      	ldrb	r3, [r4, #20]
 8082060:	b113      	cbz	r3, 8082068 <_ZN15ConnectionCheck4loopEv+0xbc>
				cloudConnectDebug();
 8082062:	4620      	mov	r0, r4
 8082064:	f7ff ff42 	bl	8081eec <_ZN15ConnectionCheck17cloudConnectDebugEv>
			connectionCheckRetainedData.numFailures++;
 8082068:	4a1d      	ldr	r2, [pc, #116]	; (80820e0 <_ZN15ConnectionCheck4loopEv+0x134>)
 808206a:	6853      	ldr	r3, [r2, #4]
 808206c:	3301      	adds	r3, #1
 808206e:	6053      	str	r3, [r2, #4]
			if (failureSleepSec > 0 && connectionCheckRetainedData.numFailures > 1) {
 8082070:	6922      	ldr	r2, [r4, #16]
 8082072:	b162      	cbz	r2, 808208e <_ZN15ConnectionCheck4loopEv+0xe2>
 8082074:	2b01      	cmp	r3, #1
 8082076:	d90a      	bls.n	808208e <_ZN15ConnectionCheck4loopEv+0xe2>
				ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_FAILURE_SLEEP);
 8082078:	2100      	movs	r1, #0
 808207a:	2016      	movs	r0, #22
 808207c:	f000 fc06 	bl	808288c <_ZN16ConnectionEvents8addEventEii>
				System.sleep(SLEEP_MODE_DEEP, failureSleepSec);
 8082080:	4b19      	ldr	r3, [pc, #100]	; (80820e8 <_ZN15ConnectionCheck4loopEv+0x13c>)
 8082082:	2101      	movs	r1, #1
 8082084:	4668      	mov	r0, sp
 8082086:	681b      	ldr	r3, [r3, #0]
 8082088:	6922      	ldr	r2, [r4, #16]
 808208a:	f002 fdb9 	bl	8084c00 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
			ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_REBOOT_NO_CLOUD);
 808208e:	2100      	movs	r1, #0
 8082090:	2006      	movs	r0, #6
 8082092:	f000 fbfb 	bl	808288c <_ZN16ConnectionEvents8addEventEii>
			fullModemReset();
 8082096:	4620      	mov	r0, r4
 8082098:	f7ff ff48 	bl	8081f2c <_ZN15ConnectionCheck14fullModemResetEv>
 808209c:	e7b9      	b.n	8082012 <_ZN15ConnectionCheck4loopEv+0x66>
			if (listenWaitForReboot != 0 && millis() - listeningStart >= listenWaitForReboot) {
 808209e:	6863      	ldr	r3, [r4, #4]
 80820a0:	2b00      	cmp	r3, #0
 80820a2:	d0ca      	beq.n	808203a <_ZN15ConnectionCheck4loopEv+0x8e>
 80820a4:	f002 f8e8 	bl	8084278 <HAL_Timer_Get_Milli_Seconds>
 80820a8:	69a3      	ldr	r3, [r4, #24]
 80820aa:	1ac0      	subs	r0, r0, r3
 80820ac:	6863      	ldr	r3, [r4, #4]
 80820ae:	4298      	cmp	r0, r3
 80820b0:	d3c3      	bcc.n	808203a <_ZN15ConnectionCheck4loopEv+0x8e>
				ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_REBOOT_LISTENING);
 80820b2:	2100      	movs	r1, #0
 80820b4:	2005      	movs	r0, #5
 80820b6:	f000 fbe9 	bl	808288c <_ZN16ConnectionEvents8addEventEii>
				fullModemReset();
 80820ba:	4620      	mov	r0, r4
}
 80820bc:	b003      	add	sp, #12
 80820be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				fullModemReset();
 80820c2:	f7ff bf33 	b.w	8081f2c <_ZN15ConnectionCheck14fullModemResetEv>
 80820c6:	bf00      	nop
 80820c8:	200004fc 	.word	0x200004fc
 80820cc:	080898df 	.word	0x080898df
 80820d0:	080898e2 	.word	0x080898e2
 80820d4:	200003b4 	.word	0x200003b4
 80820d8:	080898e7 	.word	0x080898e7
 80820dc:	080898f3 	.word	0x080898f3
 80820e0:	40024000 	.word	0x40024000
 80820e4:	08089907 	.word	0x08089907
 80820e8:	2000029c 	.word	0x2000029c

080820ec <_GLOBAL__sub_I__ZN15ConnectionCheck8instanceE>:
 80820ec:	2200      	movs	r2, #0
 80820ee:	4b01      	ldr	r3, [pc, #4]	; (80820f4 <_GLOBAL__sub_I__ZN15ConnectionCheck8instanceE+0x8>)
 80820f0:	601a      	str	r2, [r3, #0]
}
 80820f2:	4770      	bx	lr
 80820f4:	2000029c 	.word	0x2000029c

080820f8 <_ZN6Thread3runEPv>:

private:

    static os_thread_return_t run(void* param) {
        Data* th = (Data*)param;
        th->started = true;
 80820f8:	2301      	movs	r3, #1
    static os_thread_return_t run(void* param) {
 80820fa:	b510      	push	{r4, lr}
        th->started = true;
 80820fc:	7403      	strb	r3, [r0, #16]
        if (th->func) {
 80820fe:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
 8082100:	4604      	mov	r4, r0
        if (th->func) {
 8082102:	b143      	cbz	r3, 8082116 <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
 8082104:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082106:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
 8082108:	2301      	movs	r3, #1
        os_thread_exit(nullptr);
 808210a:	2000      	movs	r0, #0
        th->exited = true;
 808210c:	7463      	strb	r3, [r4, #17]
    }
 808210e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
 8082112:	f002 b941 	b.w	8084398 <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8082116:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
 8082118:	2800      	cmp	r0, #0
 808211a:	d0f5      	beq.n	8082108 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
 808211c:	6883      	ldr	r3, [r0, #8]
 808211e:	b90b      	cbnz	r3, 8082124 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
 8082120:	f005 fdbd 	bl	8087c9e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082124:	68c3      	ldr	r3, [r0, #12]
 8082126:	e7ee      	b.n	8082106 <_ZN6Thread3runEPv+0xe>

08082128 <_ZN18AppWatchdogWrapper16watchdogCallbackEv>:

}


// static
void AppWatchdogWrapper::watchdogCallback() {
 8082128:	b508      	push	{r3, lr}
	// This isn't quite safe; connectionEvents.add should only be called from the main loop thread,
	// but since by definition the main loop thread is stuck when the app watchdog fires, this is
	// probably not that unsafe. (The application watchdog runs in a separate thread.)
	ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_APP_WATCHDOG);
 808212a:	2100      	movs	r1, #0
 808212c:	2009      	movs	r0, #9
 808212e:	f000 fbad 	bl	808288c <_ZN16ConnectionEvents8addEventEii>
	System.reset();
}
 8082132:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	System.reset();
 8082136:	f002 bd54 	b.w	8084be2 <_ZN11SystemClass5resetEv>

0808213a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>:
      operator()(_Tp* __ptr) const
 808213a:	b538      	push	{r3, r4, r5, lr}
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
 808213c:	6805      	ldr	r5, [r0, #0]
      operator()(_Tp* __ptr) const
 808213e:	4604      	mov	r4, r0
	if (__ptr != nullptr)
 8082140:	b135      	cbz	r5, 8082150 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0+0x16>
    class function<_Res(_ArgTypes...)>
 8082142:	4628      	mov	r0, r5
 8082144:	f7fe f926 	bl	8080394 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
 8082148:	2110      	movs	r1, #16
 808214a:	4628      	mov	r0, r5
 808214c:	f005 fda1 	bl	8087c92 <_ZdlPvj>
 8082150:	4620      	mov	r0, r4
      }
 8082152:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delete __ptr;
 8082156:	2114      	movs	r1, #20
 8082158:	f005 bd9b 	b.w	8087c92 <_ZdlPvj>

0808215c <_ZN18AppWatchdogWrapperD1Ev>:
AppWatchdogWrapper::~AppWatchdogWrapper() {
 808215c:	b510      	push	{r4, lr}
 808215e:	4b11      	ldr	r3, [pc, #68]	; (80821a4 <_ZN18AppWatchdogWrapperD1Ev+0x48>)
 8082160:	4604      	mov	r4, r0
 8082162:	6003      	str	r3, [r0, #0]
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8082164:	6983      	ldr	r3, [r0, #24]
        if (!isValid())
 8082166:	b19b      	cbz	r3, 8082190 <_ZN18AppWatchdogWrapperD1Ev+0x34>
        return isValid() && os_thread_is_current(d_->handle);
 8082168:	6858      	ldr	r0, [r3, #4]
 808216a:	f002 f8ad 	bl	80842c8 <os_thread_is_current>
 808216e:	b978      	cbnz	r0, 8082190 <_ZN18AppWatchdogWrapperD1Ev+0x34>
 8082170:	69a3      	ldr	r3, [r4, #24]
        if (!d_->exited) {
 8082172:	7c5a      	ldrb	r2, [r3, #17]
 8082174:	b912      	cbnz	r2, 808217c <_ZN18AppWatchdogWrapperD1Ev+0x20>
        return isValid() && os_thread_join(d_->handle)==0;
 8082176:	6858      	ldr	r0, [r3, #4]
 8082178:	f002 f8b6 	bl	80842e8 <os_thread_join>
        os_thread_cleanup(d_->handle);
 808217c:	69a3      	ldr	r3, [r4, #24]
 808217e:	6858      	ldr	r0, [r3, #4]
 8082180:	f002 f8ba 	bl	80842f8 <os_thread_cleanup>
 8082184:	2300      	movs	r3, #0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082186:	69a0      	ldr	r0, [r4, #24]
      __a = _GLIBCXX_MOVE(__b);
 8082188:	61a3      	str	r3, [r4, #24]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
 808218a:	b108      	cbz	r0, 8082190 <_ZN18AppWatchdogWrapperD1Ev+0x34>
      operator()(_Tp* __ptr) const
 808218c:	f7ff ffd5 	bl	808213a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
	if (__ptr != nullptr)
 8082190:	69a0      	ldr	r0, [r4, #24]
 8082192:	b108      	cbz	r0, 8082198 <_ZN18AppWatchdogWrapperD1Ev+0x3c>
      operator()(_Tp* __ptr) const
 8082194:	f7ff ffd1 	bl	808213a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
 8082198:	f104 0008 	add.w	r0, r4, #8
 808219c:	f7fe f8fa 	bl	8080394 <_ZNSt14_Function_baseD1Ev>
}
 80821a0:	4620      	mov	r0, r4
 80821a2:	bd10      	pop	{r4, pc}
 80821a4:	08089940 	.word	0x08089940

080821a8 <_ZN18AppWatchdogWrapperD0Ev>:
AppWatchdogWrapper::~AppWatchdogWrapper() {
 80821a8:	b510      	push	{r4, lr}
 80821aa:	4604      	mov	r4, r0
}
 80821ac:	f7ff ffd6 	bl	808215c <_ZN18AppWatchdogWrapperD1Ev>
 80821b0:	4620      	mov	r0, r4
 80821b2:	211c      	movs	r1, #28
 80821b4:	f005 fd6d 	bl	8087c92 <_ZdlPvj>
 80821b8:	4620      	mov	r0, r4
 80821ba:	bd10      	pop	{r4, pc}

080821bc <_ZN18AppWatchdogWrapperC1Em>:
AppWatchdogWrapper::AppWatchdogWrapper(unsigned long timeoutMs) : wd(timeoutMs, watchdogCallback, 1800) {
 80821bc:	b570      	push	{r4, r5, r6, lr}
 80821be:	4606      	mov	r6, r0
    _Function_base() : _M_manager(nullptr) { }
 80821c0:	2500      	movs	r5, #0
 80821c2:	4604      	mov	r4, r0
 80821c4:	4b23      	ldr	r3, [pc, #140]	; (8082254 <_ZN18AppWatchdogWrapperC1Em+0x98>)
 80821c6:	b086      	sub	sp, #24
 80821c8:	f846 3b04 	str.w	r3, [r6], #4
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 80821cc:	4b22      	ldr	r3, [pc, #136]	; (8082258 <_ZN18AppWatchdogWrapperC1Em+0x9c>)
    static const unsigned DEFAULT_STACK_SIZE = 512;

	ApplicationWatchdog(unsigned timeout_ms, std::function<void(void)> fn, unsigned stack_size=DEFAULT_STACK_SIZE) :
		timeout(timeout_ms),
		timeout_fn(fn),
		thread("appwdt", start, this, OS_THREAD_PRIORITY_CRITICAL, stack_size)
 80821ce:	6041      	str	r1, [r0, #4]
 80821d0:	9302      	str	r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
 80821d2:	4b22      	ldr	r3, [pc, #136]	; (808225c <_ZN18AppWatchdogWrapperC1Em+0xa0>)
    _Function_base() : _M_manager(nullptr) { }
 80821d4:	6105      	str	r5, [r0, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 80821d6:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 80821d8:	4b21      	ldr	r3, [pc, #132]	; (8082260 <_ZN18AppWatchdogWrapperC1Em+0xa4>)
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80821da:	a902      	add	r1, sp, #8
 80821dc:	2202      	movs	r2, #2
 80821de:	1d30      	adds	r0, r6, #4
	    _M_manager = &_My_handler::_M_manager;
 80821e0:	9304      	str	r3, [sp, #16]
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80821e2:	f7fd ff8a 	bl	80800fa <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	  _M_invoker = __x._M_invoker;
 80821e6:	9b05      	ldr	r3, [sp, #20]
        : d_(new(std::nothrow) Data)
 80821e8:	2014      	movs	r0, #20
 80821ea:	6163      	str	r3, [r4, #20]
	  _M_manager = __x._M_manager;
 80821ec:	9b04      	ldr	r3, [sp, #16]
 80821ee:	491d      	ldr	r1, [pc, #116]	; (8082264 <_ZN18AppWatchdogWrapperC1Em+0xa8>)
 80821f0:	6123      	str	r3, [r4, #16]
 80821f2:	f005 fd50 	bl	8087c96 <_ZnwjRKSt9nothrow_t>
 80821f6:	b128      	cbz	r0, 8082204 <_ZN18AppWatchdogWrapperC1Em+0x48>
            exited(false) {
 80821f8:	e9c0 5500 	strd	r5, r5, [r0]
 80821fc:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8082200:	7405      	strb	r5, [r0, #16]
 8082202:	7445      	strb	r5, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8082204:	61a0      	str	r0, [r4, #24]
        if (!d_) {
 8082206:	b1a0      	cbz	r0, 8082232 <_ZN18AppWatchdogWrapperC1Em+0x76>
        d_->func = function;
 8082208:	4b17      	ldr	r3, [pc, #92]	; (8082268 <_ZN18AppWatchdogWrapperC1Em+0xac>)
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 808220a:	2209      	movs	r2, #9
        d_->func_param = function_param;
 808220c:	e9c0 3602 	strd	r3, r6, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 8082210:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8082214:	4915      	ldr	r1, [pc, #84]	; (808226c <_ZN18AppWatchdogWrapperC1Em+0xb0>)
 8082216:	e9cd 0300 	strd	r0, r3, [sp]
 808221a:	4b15      	ldr	r3, [pc, #84]	; (8082270 <_ZN18AppWatchdogWrapperC1Em+0xb4>)
 808221c:	3004      	adds	r0, #4
 808221e:	f002 f84b 	bl	80842b8 <os_thread_create>
 8082222:	b930      	cbnz	r0, 8082232 <_ZN18AppWatchdogWrapperC1Em+0x76>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8082224:	69a3      	ldr	r3, [r4, #24]
        while (!d_->started) {
 8082226:	7c1b      	ldrb	r3, [r3, #16]
 8082228:	b94b      	cbnz	r3, 808223e <_ZN18AppWatchdogWrapperC1Em+0x82>
            HAL_Delay_Milliseconds(1);
 808222a:	2001      	movs	r0, #1
 808222c:	f002 f814 	bl	8084258 <HAL_Delay_Milliseconds>
        while (!d_->started) {
 8082230:	e7f8      	b.n	8082224 <_ZN18AppWatchdogWrapperC1Em+0x68>
 8082232:	2300      	movs	r3, #0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082234:	69a0      	ldr	r0, [r4, #24]
      __a = _GLIBCXX_MOVE(__b);
 8082236:	61a3      	str	r3, [r4, #24]
	if (__p != pointer())
 8082238:	b108      	cbz	r0, 808223e <_ZN18AppWatchdogWrapperC1Em+0x82>
      operator()(_Tp* __ptr) const
 808223a:	f7ff ff7e 	bl	808213a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 808223e:	f002 f81b 	bl	8084278 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8082242:	4b0c      	ldr	r3, [pc, #48]	; (8082274 <_ZN18AppWatchdogWrapperC1Em+0xb8>)
 8082244:	6018      	str	r0, [r3, #0]
    class function<_Res(_ArgTypes...)>
 8082246:	a802      	add	r0, sp, #8
 8082248:	f7fe f8a4 	bl	8080394 <_ZNSt14_Function_baseD1Ev>
}
 808224c:	4620      	mov	r0, r4
 808224e:	b006      	add	sp, #24
 8082250:	bd70      	pop	{r4, r5, r6, pc}
 8082252:	bf00      	nop
 8082254:	08089940 	.word	0x08089940
 8082258:	08082129 	.word	0x08082129
 808225c:	080800f7 	.word	0x080800f7
 8082260:	080800fb 	.word	0x080800fb
 8082264:	08089fa5 	.word	0x08089fa5
 8082268:	08087b61 	.word	0x08087b61
 808226c:	08089930 	.word	0x08089930
 8082270:	080820f9 	.word	0x080820f9
 8082274:	20000554 	.word	0x20000554

08082278 <_ZN12SessionCheck19subscriptionHandlerEPKcS1_>:
void SessionCheck::loop() {
	stateHandler(*this);
}

void SessionCheck::subscriptionHandler(const char *eventName, const char *data) {
	gotResponse = true;
 8082278:	2301      	movs	r3, #1
 808227a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 808227e:	4770      	bx	lr

08082280 <_ZNSt17_Function_handlerIFvR12SessionCheckEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
 8082280:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8082282:	4603      	mov	r3, r0
	switch (__op)
 8082284:	d102      	bne.n	808228c <_ZNSt17_Function_handlerIFvR12SessionCheckEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
 8082286:	6001      	str	r1, [r0, #0]
      }
 8082288:	2000      	movs	r0, #0
 808228a:	4770      	bx	lr
	  switch (__op)
 808228c:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 808228e:	bf04      	itt	eq
 8082290:	e9d1 0100 	ldrdeq	r0, r1, [r1]
 8082294:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
 8082298:	e7f6      	b.n	8082288 <_ZNSt17_Function_handlerIFvR12SessionCheckEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

0808229a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
 808229a:	b510      	push	{r4, lr}
 808229c:	4604      	mov	r4, r0
          _M_dispose();
 808229e:	6803      	ldr	r3, [r0, #0]
 80822a0:	689b      	ldr	r3, [r3, #8]
 80822a2:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80822a4:	68a3      	ldr	r3, [r4, #8]
 80822a6:	3b01      	subs	r3, #1
 80822a8:	60a3      	str	r3, [r4, #8]
 80822aa:	b92b      	cbnz	r3, 80822b8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
 80822ac:	6823      	ldr	r3, [r4, #0]
 80822ae:	4620      	mov	r0, r4
    }
 80822b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 80822b4:	68db      	ldr	r3, [r3, #12]
 80822b6:	4718      	bx	r3
    }
 80822b8:	bd10      	pop	{r4, pc}

080822ba <_ZNSt17_Function_handlerIFvR12SessionCheckEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80822ba:	4603      	mov	r3, r0
 80822bc:	b410      	push	{r4}
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
 80822be:	6842      	ldr	r2, [r0, #4]
 80822c0:	681b      	ldr	r3, [r3, #0]
 80822c2:	1054      	asrs	r4, r2, #1
 80822c4:	eb01 0062 	add.w	r0, r1, r2, asr #1
 80822c8:	07d2      	lsls	r2, r2, #31
 80822ca:	bf48      	it	mi
 80822cc:	590a      	ldrmi	r2, [r1, r4]
      }
 80822ce:	bc10      	pop	{r4}
 80822d0:	bf48      	it	mi
 80822d2:	58d3      	ldrmi	r3, [r2, r3]
 80822d4:	4718      	bx	r3

080822d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM12SessionCheckFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	  switch (__op)
 80822d6:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80822d8:	b538      	push	{r3, r4, r5, lr}
 80822da:	4604      	mov	r4, r0
	  switch (__op)
 80822dc:	d007      	beq.n	80822ee <_ZNSt14_Function_base13_Base_managerISt5_BindIFM12SessionCheckFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x18>
 80822de:	2a03      	cmp	r2, #3
 80822e0:	d011      	beq.n	8082306 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM12SessionCheckFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x30>
 80822e2:	2a01      	cmp	r2, #1
 80822e4:	d101      	bne.n	80822ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFM12SessionCheckFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80822e6:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
 80822e8:	6023      	str	r3, [r4, #0]
	}
 80822ea:	2000      	movs	r0, #0
 80822ec:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80822ee:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
 80822f0:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80822f2:	f7fd fee2 	bl	80800ba <_Znwj>
 80822f6:	4603      	mov	r3, r0
 80822f8:	2800      	cmp	r0, #0
 80822fa:	d0f5      	beq.n	80822e8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM12SessionCheckFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
 80822fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8082300:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8082304:	e7f0      	b.n	80822e8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM12SessionCheckFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
 8082306:	6800      	ldr	r0, [r0, #0]
 8082308:	2800      	cmp	r0, #0
 808230a:	d0ee      	beq.n	80822ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFM12SessionCheckFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
 808230c:	210c      	movs	r1, #12
 808230e:	f005 fcc0 	bl	8087c92 <_ZdlPvj>
 8082312:	e7ea      	b.n	80822ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFM12SessionCheckFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>

08082314 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM12SessionCheckFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE9_M_invokeERKSt9_Any_dataOS1_SH_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8082314:	b470      	push	{r4, r5, r6}
	    return __source._M_access<_Functor*>();
 8082316:	6803      	ldr	r3, [r0, #0]
	  return std::__invoke(_M_f,
 8082318:	6809      	ldr	r1, [r1, #0]
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
 808231a:	685c      	ldr	r4, [r3, #4]
 808231c:	689d      	ldr	r5, [r3, #8]
 808231e:	1066      	asrs	r6, r4, #1
 8082320:	eb05 0064 	add.w	r0, r5, r4, asr #1
 8082324:	07e4      	lsls	r4, r4, #31
 8082326:	bf48      	it	mi
 8082328:	59ac      	ldrmi	r4, [r5, r6]
 808232a:	681b      	ldr	r3, [r3, #0]
 808232c:	6812      	ldr	r2, [r2, #0]
 808232e:	bf48      	it	mi
 8082330:	58e3      	ldrmi	r3, [r4, r3]
      }
 8082332:	bc70      	pop	{r4, r5, r6}
 8082334:	4718      	bx	r3
	...

08082338 <_ZN12SessionCheckD1Ev>:
SessionCheck::~SessionCheck() {
 8082338:	b510      	push	{r4, lr}
 808233a:	4604      	mov	r4, r0
 808233c:	4b05      	ldr	r3, [pc, #20]	; (8082354 <_ZN12SessionCheckD1Ev+0x1c>)
 808233e:	f840 3b2c 	str.w	r3, [r0], #44
    class function<_Res(_ArgTypes...)>
 8082342:	f7fe f827 	bl	8080394 <_ZNSt14_Function_baseD1Ev>
 8082346:	f104 0010 	add.w	r0, r4, #16
 808234a:	f002 fced 	bl	8084d28 <_ZN6StringD1Ev>
}
 808234e:	4620      	mov	r0, r4
 8082350:	bd10      	pop	{r4, pc}
 8082352:	bf00      	nop
 8082354:	08089974 	.word	0x08089974

08082358 <_ZN12SessionCheckD0Ev>:
SessionCheck::~SessionCheck() {
 8082358:	b510      	push	{r4, lr}
 808235a:	4604      	mov	r4, r0
}
 808235c:	f7ff ffec 	bl	8082338 <_ZN12SessionCheckD1Ev>
 8082360:	4620      	mov	r0, r4
 8082362:	2140      	movs	r1, #64	; 0x40
 8082364:	f005 fc95 	bl	8087c92 <_ZdlPvj>
 8082368:	4620      	mov	r0, r4
 808236a:	bd10      	pop	{r4, pc}

0808236c <_ZN12SessionCheckC1ExPKc>:
SessionCheck::SessionCheck(time_t checkPeriodSecs, const char *eventSuffix) : checkPeriodSecs(checkPeriodSecs) {
 808236c:	b530      	push	{r4, r5, lr}
 808236e:	4919      	ldr	r1, [pc, #100]	; (80823d4 <_ZN12SessionCheckC1ExPKc+0x68>)
 8082370:	f100 0510 	add.w	r5, r0, #16
 8082374:	b089      	sub	sp, #36	; 0x24
 8082376:	4604      	mov	r4, r0
 8082378:	e9c0 2302 	strd	r2, r3, [r0, #8]
 808237c:	6001      	str	r1, [r0, #0]
 808237e:	4916      	ldr	r1, [pc, #88]	; (80823d8 <_ZN12SessionCheckC1ExPKc+0x6c>)
 8082380:	4628      	mov	r0, r5
 8082382:	f002 fd1b 	bl	8084dbc <_ZN6StringC1EPKc>
 8082386:	2300      	movs	r3, #0
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8082388:	4a14      	ldr	r2, [pc, #80]	; (80823dc <_ZN12SessionCheckC1ExPKc+0x70>)
 808238a:	6223      	str	r3, [r4, #32]
 808238c:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
 8082390:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8082394:	62a3      	str	r3, [r4, #40]	; 0x28
	    _M_invoker = &_My_handler::_M_invoke;
 8082396:	4b12      	ldr	r3, [pc, #72]	; (80823e0 <_ZN12SessionCheckC1ExPKc+0x74>)
    static String deviceID(void) { return spark_deviceID(); }
 8082398:	a804      	add	r0, sp, #16
 808239a:	63a3      	str	r3, [r4, #56]	; 0x38
	    _M_manager = &_My_handler::_M_manager;
 808239c:	4b11      	ldr	r3, [pc, #68]	; (80823e4 <_ZN12SessionCheckC1ExPKc+0x78>)
 808239e:	6363      	str	r3, [r4, #52]	; 0x34
 80823a0:	f002 fa6a 	bl	8084878 <spark_deviceID>
	StringSumHelper(const String &s) : String(s) {}
 80823a4:	a904      	add	r1, sp, #16
 80823a6:	4668      	mov	r0, sp
 80823a8:	f002 fd52 	bl	8084e50 <_ZN6StringC1ERKS_>
	eventName = System.deviceID() + "/" + eventSuffix;
 80823ac:	4668      	mov	r0, sp
 80823ae:	490e      	ldr	r1, [pc, #56]	; (80823e8 <_ZN12SessionCheckC1ExPKc+0x7c>)
 80823b0:	f002 fd95 	bl	8084ede <_ZplRK15StringSumHelperPKc>
 80823b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80823b6:	f002 fd92 	bl	8084ede <_ZplRK15StringSumHelperPKc>
 80823ba:	4601      	mov	r1, r0
 80823bc:	4628      	mov	r0, r5
 80823be:	f002 fd38 	bl	8084e32 <_ZN6StringaSERKS_>
class StringSumHelper : public String
 80823c2:	4668      	mov	r0, sp
 80823c4:	f002 fcb0 	bl	8084d28 <_ZN6StringD1Ev>
 80823c8:	a804      	add	r0, sp, #16
 80823ca:	f002 fcad 	bl	8084d28 <_ZN6StringD1Ev>
}
 80823ce:	4620      	mov	r0, r4
 80823d0:	b009      	add	sp, #36	; 0x24
 80823d2:	bd30      	pop	{r4, r5, pc}
 80823d4:	08089974 	.word	0x08089974
 80823d8:	080898a4 	.word	0x080898a4
 80823dc:	08082575 	.word	0x08082575
 80823e0:	080822bb 	.word	0x080822bb
 80823e4:	08082281 	.word	0x08082281
 80823e8:	08089948 	.word	0x08089948

080823ec <_ZN12SessionCheck4loopEv>:
void SessionCheck::loop() {
 80823ec:	b510      	push	{r4, lr}
      if (_M_empty())
 80823ee:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80823f0:	4601      	mov	r1, r0
 80823f2:	b90b      	cbnz	r3, 80823f8 <_ZN12SessionCheck4loopEv+0xc>
	__throw_bad_function_call();
 80823f4:	f005 fc53 	bl	8087c9e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80823f8:	6b83      	ldr	r3, [r0, #56]	; 0x38
}
 80823fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80823fe:	302c      	adds	r0, #44	; 0x2c
 8082400:	4718      	bx	r3

08082402 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 8082402:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8082404:	2300      	movs	r3, #0
 8082406:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 8082408:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 808240a:	4604      	mov	r4, r0
 808240c:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 808240e:	b12b      	cbz	r3, 808241c <_ZNSt8functionIFvPKcS1_EEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8082410:	2202      	movs	r2, #2
 8082412:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8082414:	68eb      	ldr	r3, [r5, #12]
 8082416:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8082418:	68ab      	ldr	r3, [r5, #8]
 808241a:	60a3      	str	r3, [r4, #8]
    }
 808241c:	4620      	mov	r0, r4
 808241e:	bd38      	pop	{r3, r4, r5, pc}

08082420 <_ZN12SessionCheck5setupEv>:
void SessionCheck::setup() {
 8082420:	b570      	push	{r4, r5, r6, lr}
	if (sessionRetainedData.magic != SESSION_MAGIC) {
 8082422:	4b1d      	ldr	r3, [pc, #116]	; (8082498 <_ZN12SessionCheck5setupEv+0x78>)
 8082424:	4a1d      	ldr	r2, [pc, #116]	; (808249c <_ZN12SessionCheck5setupEv+0x7c>)
 8082426:	6819      	ldr	r1, [r3, #0]
void SessionCheck::setup() {
 8082428:	4604      	mov	r4, r0
	if (sessionRetainedData.magic != SESSION_MAGIC) {
 808242a:	4291      	cmp	r1, r2
void SessionCheck::setup() {
 808242c:	b08a      	sub	sp, #40	; 0x28
	if (sessionRetainedData.magic != SESSION_MAGIC) {
 808242e:	d004      	beq.n	808243a <_ZN12SessionCheck5setupEv+0x1a>
		sessionRetainedData.lastCheckSecs = 0;
 8082430:	2000      	movs	r0, #0
 8082432:	2100      	movs	r1, #0
 8082434:	e9c3 0102 	strd	r0, r1, [r3, #8]
		sessionRetainedData.magic = SESSION_MAGIC;
 8082438:	601a      	str	r2, [r3, #0]
    _Function_base() : _M_manager(nullptr) { }
 808243a:	2500      	movs	r5, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808243c:	200c      	movs	r0, #12
        operator const char*() const { return c_str(); }
 808243e:	6926      	ldr	r6, [r4, #16]
    _Function_base() : _M_manager(nullptr) { }
 8082440:	9504      	str	r5, [sp, #16]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082442:	f7fd fe3a 	bl	80800ba <_Znwj>
 8082446:	b118      	cbz	r0, 8082450 <_ZN12SessionCheck5setupEv+0x30>
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
 8082448:	4b15      	ldr	r3, [pc, #84]	; (80824a0 <_ZN12SessionCheck5setupEv+0x80>)
 808244a:	6084      	str	r4, [r0, #8]
 808244c:	e9c0 3500 	strd	r3, r5, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
 8082450:	4b14      	ldr	r3, [pc, #80]	; (80824a4 <_ZN12SessionCheck5setupEv+0x84>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082452:	9002      	str	r0, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
 8082454:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 8082456:	4b14      	ldr	r3, [pc, #80]	; (80824a8 <_ZN12SessionCheck5setupEv+0x88>)
        return subscribe_wiring(eventName, handler, scope);
 8082458:	a902      	add	r1, sp, #8
 808245a:	a806      	add	r0, sp, #24
 808245c:	9304      	str	r3, [sp, #16]
 808245e:	f7ff ffd0 	bl	8082402 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
        if (handler) // if the call-wrapper has wrapped a callable object
 8082462:	9b08      	ldr	r3, [sp, #32]
 8082464:	b17b      	cbz	r3, 8082486 <_ZN12SessionCheck5setupEv+0x66>
            auto wrapper = new wiring_event_handler_t(handler);
 8082466:	2010      	movs	r0, #16
 8082468:	f7fd fe27 	bl	80800ba <_Znwj>
 808246c:	4604      	mov	r4, r0
 808246e:	b150      	cbz	r0, 8082486 <_ZN12SessionCheck5setupEv+0x66>
 8082470:	a906      	add	r1, sp, #24
 8082472:	f7ff ffc6 	bl	8082402 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
                success = spark_subscribe(eventName, (EventHandler)call_wiring_event_handler, wrapper, scope, deviceID, NULL);
 8082476:	2300      	movs	r3, #0
 8082478:	4622      	mov	r2, r4
 808247a:	4630      	mov	r0, r6
 808247c:	e9cd 3300 	strd	r3, r3, [sp]
 8082480:	490a      	ldr	r1, [pc, #40]	; (80824ac <_ZN12SessionCheck5setupEv+0x8c>)
 8082482:	f002 fa09 	bl	8084898 <spark_subscribe>
    class function<_Res(_ArgTypes...)>
 8082486:	a806      	add	r0, sp, #24
 8082488:	f7fd ff84 	bl	8080394 <_ZNSt14_Function_baseD1Ev>
 808248c:	a802      	add	r0, sp, #8
 808248e:	f7fd ff81 	bl	8080394 <_ZNSt14_Function_baseD1Ev>
}
 8082492:	b00a      	add	sp, #40	; 0x28
 8082494:	bd70      	pop	{r4, r5, r6, pc}
 8082496:	bf00      	nop
 8082498:	40024008 	.word	0x40024008
 808249c:	4a6849fe 	.word	0x4a6849fe
 80824a0:	08082279 	.word	0x08082279
 80824a4:	08082315 	.word	0x08082315
 80824a8:	080822d7 	.word	0x080822d7
 80824ac:	08086937 	.word	0x08086937

080824b0 <_ZNSt8functionIFvR12SessionCheckEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
 80824b0:	b510      	push	{r4, lr}
 80824b2:	e9d1 2300 	ldrd	r2, r3, [r1]
    _Function_base() : _M_manager(nullptr) { }
 80824b6:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
 80824b8:	b086      	sub	sp, #24
 80824ba:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
 80824bc:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
 80824be:	b90a      	cbnz	r2, 80824c4 <_ZNSt8functionIFvR12SessionCheckEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
 80824c0:	07d9      	lsls	r1, r3, #31
 80824c2:	d505      	bpl.n	80824d0 <_ZNSt8functionIFvR12SessionCheckEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 80824c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
 80824c8:	4b0f      	ldr	r3, [pc, #60]	; (8082508 <_ZNSt8functionIFvR12SessionCheckEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
 80824ca:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 80824cc:	4b0f      	ldr	r3, [pc, #60]	; (808250c <_ZNSt8functionIFvR12SessionCheckEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
 80824ce:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80824d0:	466a      	mov	r2, sp
 80824d2:	ab02      	add	r3, sp, #8
 80824d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80824d8:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80824dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80824e0:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80824e4:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80824e8:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80824ea:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80824ee:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80824f0:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80824f2:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80824f4:	9104      	str	r1, [sp, #16]
 80824f6:	68e1      	ldr	r1, [r4, #12]
    class function<_Res(_ArgTypes...)>
 80824f8:	4618      	mov	r0, r3
      __b = _GLIBCXX_MOVE(__tmp);
 80824fa:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 80824fc:	9105      	str	r1, [sp, #20]
 80824fe:	f7fd ff49 	bl	8080394 <_ZNSt14_Function_baseD1Ev>
	}
 8082502:	4620      	mov	r0, r4
 8082504:	b006      	add	sp, #24
 8082506:	bd10      	pop	{r4, pc}
 8082508:	080822bb 	.word	0x080822bb
 808250c:	08082281 	.word	0x08082281

08082510 <_ZN12SessionCheck9sendEventEv>:
	numFailures = 0;

	sendEvent();
}

void SessionCheck::sendEvent() {
 8082510:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	gotResponse = false;
 8082512:	2300      	movs	r3, #0
	stateHandler = &SessionCheck::waitForResponseState;
 8082514:	4a12      	ldr	r2, [pc, #72]	; (8082560 <_ZN12SessionCheck9sendEventEv+0x50>)
	gotResponse = false;
 8082516:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
void SessionCheck::sendEvent() {
 808251a:	4604      	mov	r4, r0
	stateHandler = &SessionCheck::waitForResponseState;
 808251c:	a902      	add	r1, sp, #8
 808251e:	302c      	adds	r0, #44	; 0x2c
 8082520:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8082524:	f7ff ffc4 	bl	80824b0 <_ZNSt8functionIFvR12SessionCheckEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
 8082528:	f001 fea6 	bl	8084278 <HAL_Timer_Get_Milli_Seconds>
	stateTime = millis();

	Log.info("publishing session check event %s", eventName.c_str());
 808252c:	6922      	ldr	r2, [r4, #16]
 808252e:	490d      	ldr	r1, [pc, #52]	; (8082564 <_ZN12SessionCheck9sendEventEv+0x54>)
	stateTime = millis();
 8082530:	6220      	str	r0, [r4, #32]
	Log.info("publishing session check event %s", eventName.c_str());
 8082532:	480d      	ldr	r0, [pc, #52]	; (8082568 <_ZN12SessionCheck9sendEventEv+0x58>)
 8082534:	f7ff fc9c 	bl	8081e70 <_ZNK5spark6Logger4infoEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 8082538:	4b0c      	ldr	r3, [pc, #48]	; (808256c <_ZN12SessionCheck9sendEventEv+0x5c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 808253a:	a802      	add	r0, sp, #8
 808253c:	781b      	ldrb	r3, [r3, #0]
 808253e:	4a0c      	ldr	r2, [pc, #48]	; (8082570 <_ZN12SessionCheck9sendEventEv+0x60>)
 8082540:	f88d 3000 	strb.w	r3, [sp]
 8082544:	6921      	ldr	r1, [r4, #16]
 8082546:	233c      	movs	r3, #60	; 0x3c
 8082548:	f004 fb10 	bl	8086b6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
 808254c:	9803      	ldr	r0, [sp, #12]
 808254e:	b128      	cbz	r0, 808255c <_ZN12SessionCheck9sendEventEv+0x4c>
      if (--_M_use_count == 0)
 8082550:	6843      	ldr	r3, [r0, #4]
 8082552:	3b01      	subs	r3, #1
 8082554:	6043      	str	r3, [r0, #4]
 8082556:	b90b      	cbnz	r3, 808255c <_ZN12SessionCheck9sendEventEv+0x4c>
 8082558:	f7ff fe9f 	bl	808229a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>

	// Post our event
	Particle.publish(eventName, "", PRIVATE);
}
 808255c:	b004      	add	sp, #16
 808255e:	bd10      	pop	{r4, pc}
 8082560:	080825d1 	.word	0x080825d1
 8082564:	0808994a 	.word	0x0808994a
 8082568:	200003b4 	.word	0x200003b4
 808256c:	200002a4 	.word	0x200002a4
 8082570:	080898a4 	.word	0x080898a4

08082574 <_ZN12SessionCheck15waitToSendStateEv>:
void SessionCheck::waitToSendState() {
 8082574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082576:	4604      	mov	r4, r0
 8082578:	f001 fe7e 	bl	8084278 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - stateTime < CHECK_PERIOD_MS) {
 808257c:	6a23      	ldr	r3, [r4, #32]
 808257e:	1ac0      	subs	r0, r0, r3
 8082580:	f247 532f 	movw	r3, #29999	; 0x752f
 8082584:	4298      	cmp	r0, r3
 8082586:	d920      	bls.n	80825ca <_ZN12SessionCheck15waitToSendStateEv+0x56>
 8082588:	f001 fe76 	bl	8084278 <HAL_Timer_Get_Milli_Seconds>
	stateTime = millis();
 808258c:	6220      	str	r0, [r4, #32]
	if (!Time.isValid()) {
 808258e:	f003 ff9b 	bl	80864c8 <_ZN9TimeClass7isValidEv>
 8082592:	b1d0      	cbz	r0, 80825ca <_ZN12SessionCheck15waitToSendStateEv+0x56>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8082594:	f002 f968 	bl	8084868 <spark_cloud_flag_connected>
	if (!Particle.connected()) {
 8082598:	b1b8      	cbz	r0, 80825ca <_ZN12SessionCheck15waitToSendStateEv+0x56>
	time_t now = Time.now();
 808259a:	f003 ffb2 	bl	8086502 <_ZN9TimeClass3nowEv>
	if (now - sessionRetainedData.lastCheckSecs < checkPeriodSecs) {
 808259e:	4d0b      	ldr	r5, [pc, #44]	; (80825cc <_ZN12SessionCheck15waitToSendStateEv+0x58>)
	time_t now = Time.now();
 80825a0:	17c1      	asrs	r1, r0, #31
	if (now - sessionRetainedData.lastCheckSecs < checkPeriodSecs) {
 80825a2:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 80825a6:	1ac6      	subs	r6, r0, r3
 80825a8:	eb61 0702 	sbc.w	r7, r1, r2
 80825ac:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80825b0:	4296      	cmp	r6, r2
 80825b2:	eb77 0303 	sbcs.w	r3, r7, r3
 80825b6:	db08      	blt.n	80825ca <_ZN12SessionCheck15waitToSendStateEv+0x56>
	numFailures = 0;
 80825b8:	2300      	movs	r3, #0
	sessionRetainedData.lastCheckSecs = now;
 80825ba:	e9c5 0102 	strd	r0, r1, [r5, #8]
	numFailures = 0;
 80825be:	62a3      	str	r3, [r4, #40]	; 0x28
	sendEvent();
 80825c0:	4620      	mov	r0, r4
}
 80825c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	sendEvent();
 80825c6:	f7ff bfa3 	b.w	8082510 <_ZN12SessionCheck9sendEventEv>
}
 80825ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80825cc:	40024008 	.word	0x40024008

080825d0 <_ZN12SessionCheck20waitForResponseStateEv>:

void SessionCheck::waitForResponseState() {
 80825d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (gotResponse) {
 80825d2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
void SessionCheck::waitForResponseState() {
 80825d6:	4604      	mov	r4, r0
	if (gotResponse) {
 80825d8:	b153      	cbz	r3, 80825f0 <_ZN12SessionCheck20waitForResponseStateEv+0x20>
		// Success
		stateHandler = &SessionCheck::waitToSendState;
 80825da:	4b22      	ldr	r3, [pc, #136]	; (8082664 <_ZN12SessionCheck20waitForResponseStateEv+0x94>)
 80825dc:	a902      	add	r1, sp, #8
 80825de:	9302      	str	r3, [sp, #8]
 80825e0:	2300      	movs	r3, #0
 80825e2:	302c      	adds	r0, #44	; 0x2c
 80825e4:	9303      	str	r3, [sp, #12]
 80825e6:	f7ff ff63 	bl	80824b0 <_ZNSt8functionIFvR12SessionCheckEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
 80825ea:	f001 fe45 	bl	8084278 <HAL_Timer_Get_Milli_Seconds>
		stateTime = millis();
 80825ee:	6220      	str	r0, [r4, #32]
 80825f0:	f001 fe42 	bl	8084278 <HAL_Timer_Get_Milli_Seconds>
	}

	if (millis() - stateTime < RECEIVE_TIMEOUT_MS) {
 80825f4:	6a23      	ldr	r3, [r4, #32]
 80825f6:	1ac0      	subs	r0, r0, r3
 80825f8:	f64a 73c7 	movw	r3, #44999	; 0xafc7
 80825fc:	4298      	cmp	r0, r3
 80825fe:	d90b      	bls.n	8082618 <_ZN12SessionCheck20waitForResponseStateEv+0x48>
		// Waiting still
		return;
	}

	ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_SESSION_EVENT_LOST);
 8082600:	2100      	movs	r1, #0
 8082602:	200e      	movs	r0, #14
 8082604:	f000 f942 	bl	808288c <_ZN16ConnectionEvents8addEventEii>

	// Failed to receive event
	if (++numFailures < NUM_FAILURES_BEFORE_RESET_SESSION) {
 8082608:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 808260a:	3301      	adds	r3, #1
 808260c:	2b01      	cmp	r3, #1
 808260e:	62a3      	str	r3, [r4, #40]	; 0x28
 8082610:	dc04      	bgt.n	808261c <_ZN12SessionCheck20waitForResponseStateEv+0x4c>
		// Try sending again just in case
		sendEvent();
 8082612:	4620      	mov	r0, r4
 8082614:	f7ff ff7c 	bl	8082510 <_ZN12SessionCheck9sendEventEv>
		ConnectionCheck::getInstance()->fullModemReset();
	}
	else {
		System.reset();
	}
}
 8082618:	b004      	add	sp, #16
 808261a:	bd10      	pop	{r4, pc}
	ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_SESSION_RESET);
 808261c:	2100      	movs	r1, #0
 808261e:	200f      	movs	r0, #15
 8082620:	f000 f934 	bl	808288c <_ZN16ConnectionEvents8addEventEii>
 8082624:	4b10      	ldr	r3, [pc, #64]	; (8082668 <_ZN12SessionCheck20waitForResponseStateEv+0x98>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8082626:	a802      	add	r0, sp, #8
 8082628:	781b      	ldrb	r3, [r3, #0]
 808262a:	4a10      	ldr	r2, [pc, #64]	; (808266c <_ZN12SessionCheck20waitForResponseStateEv+0x9c>)
 808262c:	f88d 3000 	strb.w	r3, [sp]
 8082630:	490f      	ldr	r1, [pc, #60]	; (8082670 <_ZN12SessionCheck20waitForResponseStateEv+0xa0>)
 8082632:	233c      	movs	r3, #60	; 0x3c
 8082634:	f004 fa9a 	bl	8086b6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
 8082638:	9803      	ldr	r0, [sp, #12]
 808263a:	b128      	cbz	r0, 8082648 <_ZN12SessionCheck20waitForResponseStateEv+0x78>
      if (--_M_use_count == 0)
 808263c:	6843      	ldr	r3, [r0, #4]
 808263e:	3b01      	subs	r3, #1
 8082640:	6043      	str	r3, [r0, #4]
 8082642:	b90b      	cbnz	r3, 8082648 <_ZN12SessionCheck20waitForResponseStateEv+0x78>
 8082644:	f7ff fe29 	bl	808229a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	delay(2000);
 8082648:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 808264c:	f003 ff74 	bl	8086538 <delay>
 8082650:	4b08      	ldr	r3, [pc, #32]	; (8082674 <_ZN12SessionCheck20waitForResponseStateEv+0xa4>)
 8082652:	6818      	ldr	r0, [r3, #0]
	if (ConnectionCheck::getInstance()) {
 8082654:	b110      	cbz	r0, 808265c <_ZN12SessionCheck20waitForResponseStateEv+0x8c>
		ConnectionCheck::getInstance()->fullModemReset();
 8082656:	f7ff fc69 	bl	8081f2c <_ZN15ConnectionCheck14fullModemResetEv>
 808265a:	e7dd      	b.n	8082618 <_ZN12SessionCheck20waitForResponseStateEv+0x48>
		System.reset();
 808265c:	f002 fac1 	bl	8084be2 <_ZN11SystemClass5resetEv>
 8082660:	e7da      	b.n	8082618 <_ZN12SessionCheck20waitForResponseStateEv+0x48>
 8082662:	bf00      	nop
 8082664:	08082575 	.word	0x08082575
 8082668:	200002a4 	.word	0x200002a4
 808266c:	080898a4 	.word	0x080898a4
 8082670:	0808981e 	.word	0x0808981e
 8082674:	200002a0 	.word	0x200002a0

08082678 <_GLOBAL__sub_I__ZN12SessionCheck19sessionRetainedDataE>:
        val_(val) {
 8082678:	2201      	movs	r2, #1
 808267a:	4b01      	ldr	r3, [pc, #4]	; (8082680 <_GLOBAL__sub_I__ZN12SessionCheck19sessionRetainedDataE+0x8>)
 808267c:	701a      	strb	r2, [r3, #0]
}
 808267e:	4770      	bx	lr
 8082680:	200002a4 	.word	0x200002a4

08082684 <_ZN16ConnectionEventsD1Ev>:
	instance = this;
}

ConnectionEvents::~ConnectionEvents() {

}
 8082684:	4770      	bx	lr

08082686 <_ZN16ConnectionEventsD0Ev>:
ConnectionEvents::~ConnectionEvents() {
 8082686:	b510      	push	{r4, lr}
 8082688:	4604      	mov	r4, r0
}
 808268a:	210c      	movs	r1, #12
 808268c:	f005 fb01 	bl	8087c92 <_ZdlPvj>
 8082690:	4620      	mov	r0, r4
 8082692:	bd10      	pop	{r4, pc}

08082694 <_ZN16ConnectionEvents4loopEv.part.0>:
	}
}

// This should be called from loop()
// If there are queued events and there is a cloud connection they're published, oldest first.
void ConnectionEvents::loop() {
 8082694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	}

	// Send events
	char buf[256]; // 255 data bytes, plus null-terminator
	size_t numHandled;
	size_t offset = 0;
 8082698:	f04f 0800 	mov.w	r8, #0
 808269c:	4d30      	ldr	r5, [pc, #192]	; (8082760 <_ZN16ConnectionEvents4loopEv.part.0+0xcc>)
void ConnectionEvents::loop() {
 808269e:	4607      	mov	r7, r0

	// Pack as many events as we have, up to what will fit in a 255 byte publish
	for(numHandled = 0; numHandled < connectionEventData.eventCount; numHandled++) {
 80826a0:	4646      	mov	r6, r8
 80826a2:	462c      	mov	r4, r5
		char entryBuf[64];

		ConnectionEventInfo *ev = &connectionEventData.events[numHandled];
		size_t len = snprintf(entryBuf, sizeof(entryBuf), "%lu,%lu,%d,%d;", ev->tsDate, ev->tsMillis, ev->eventCode, ev->data);
 80826a4:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 8082778 <_ZN16ConnectionEvents4loopEv.part.0+0xe4>
void ConnectionEvents::loop() {
 80826a8:	b0d4      	sub	sp, #336	; 0x150
	for(numHandled = 0; numHandled < connectionEventData.eventCount; numHandled++) {
 80826aa:	6863      	ldr	r3, [r4, #4]
 80826ac:	42b3      	cmp	r3, r6
 80826ae:	d91b      	bls.n	80826e8 <_ZN16ConnectionEvents4loopEv.part.0+0x54>
		size_t len = snprintf(entryBuf, sizeof(entryBuf), "%lu,%lu,%d,%d;", ev->tsDate, ev->tsMillis, ev->eventCode, ev->data);
 80826b0:	696b      	ldr	r3, [r5, #20]
 80826b2:	4652      	mov	r2, sl
 80826b4:	9302      	str	r3, [sp, #8]
 80826b6:	692b      	ldr	r3, [r5, #16]
 80826b8:	2140      	movs	r1, #64	; 0x40
 80826ba:	9301      	str	r3, [sp, #4]
 80826bc:	68eb      	ldr	r3, [r5, #12]
 80826be:	a804      	add	r0, sp, #16
 80826c0:	9300      	str	r3, [sp, #0]
 80826c2:	68ab      	ldr	r3, [r5, #8]
 80826c4:	f002 f928 	bl	8084918 <snprintf>
		if ((offset + len) >= sizeof(buf)) {
 80826c8:	eb00 0908 	add.w	r9, r0, r8
 80826cc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80826d0:	f105 0510 	add.w	r5, r5, #16
 80826d4:	d808      	bhi.n	80826e8 <_ZN16ConnectionEvents4loopEv.part.0+0x54>
			// Not enough buffer space to send in this publish; try again later
			break;
		}
		strcpy(&buf[offset], entryBuf);
 80826d6:	ab14      	add	r3, sp, #80	; 0x50
 80826d8:	eb03 0008 	add.w	r0, r3, r8
 80826dc:	a904      	add	r1, sp, #16
 80826de:	f006 fccc 	bl	808907a <strcpy>
	for(numHandled = 0; numHandled < connectionEventData.eventCount; numHandled++) {
 80826e2:	46c8      	mov	r8, r9
 80826e4:	3601      	adds	r6, #1
 80826e6:	e7e0      	b.n	80826aa <_ZN16ConnectionEvents4loopEv.part.0+0x16>
		offset += len;
	}
	connectionEventData.eventCount -= numHandled;
 80826e8:	6862      	ldr	r2, [r4, #4]
 80826ea:	1b92      	subs	r2, r2, r6
 80826ec:	6062      	str	r2, [r4, #4]
	if (connectionEventData.eventCount > 0) {
 80826ee:	2a00      	cmp	r2, #0
 80826f0:	d02f      	beq.n	8082752 <_ZN16ConnectionEvents4loopEv.part.0+0xbe>
		Log.info("couldn't send all events, saving %d for later", connectionEventData.eventCount);
 80826f2:	491c      	ldr	r1, [pc, #112]	; (8082764 <_ZN16ConnectionEvents4loopEv.part.0+0xd0>)
 80826f4:	481c      	ldr	r0, [pc, #112]	; (8082768 <_ZN16ConnectionEvents4loopEv.part.0+0xd4>)
 80826f6:	f7ff fbbb 	bl	8081e70 <_ZNK5spark6Logger4infoEPKcz>
		memmove(&connectionEventData.events[0], &connectionEventData.events[numHandled], connectionEventData.eventCount * sizeof(ConnectionEventData));
 80826fa:	f44f 7202 	mov.w	r2, #520	; 0x208
 80826fe:	6863      	ldr	r3, [r4, #4]
 8082700:	eb04 1106 	add.w	r1, r4, r6, lsl #4
 8082704:	435a      	muls	r2, r3
 8082706:	4819      	ldr	r0, [pc, #100]	; (808276c <_ZN16ConnectionEvents4loopEv.part.0+0xd8>)
 8082708:	3108      	adds	r1, #8
 808270a:	f006 fc4f 	bl	8088fac <memmove>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 808270e:	4b18      	ldr	r3, [pc, #96]	; (8082770 <_ZN16ConnectionEvents4loopEv.part.0+0xdc>)
 8082710:	6879      	ldr	r1, [r7, #4]
 8082712:	781b      	ldrb	r3, [r3, #0]
 8082714:	aa14      	add	r2, sp, #80	; 0x50
 8082716:	f88d 3000 	strb.w	r3, [sp]
 808271a:	a804      	add	r0, sp, #16
 808271c:	233c      	movs	r3, #60	; 0x3c
 808271e:	f004 fa25 	bl	8086b6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
 8082722:	9c05      	ldr	r4, [sp, #20]
 8082724:	b17c      	cbz	r4, 8082746 <_ZN16ConnectionEvents4loopEv.part.0+0xb2>
      if (--_M_use_count == 0)
 8082726:	6863      	ldr	r3, [r4, #4]
 8082728:	3b01      	subs	r3, #1
 808272a:	6063      	str	r3, [r4, #4]
 808272c:	b95b      	cbnz	r3, 8082746 <_ZN16ConnectionEvents4loopEv.part.0+0xb2>
          _M_dispose();
 808272e:	6823      	ldr	r3, [r4, #0]
 8082730:	4620      	mov	r0, r4
 8082732:	689b      	ldr	r3, [r3, #8]
 8082734:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8082736:	68a3      	ldr	r3, [r4, #8]
 8082738:	3b01      	subs	r3, #1
 808273a:	60a3      	str	r3, [r4, #8]
 808273c:	b91b      	cbnz	r3, 8082746 <_ZN16ConnectionEvents4loopEv.part.0+0xb2>
            _M_destroy();
 808273e:	6823      	ldr	r3, [r4, #0]
 8082740:	4620      	mov	r0, r4
 8082742:	68db      	ldr	r3, [r3, #12]
 8082744:	4798      	blx	r3
 8082746:	f001 fd97 	bl	8084278 <HAL_Timer_Get_Milli_Seconds>
	else {
		Log.info("sent %d events", numHandled);
	}

	Particle.publish(connectionEventName, buf, PRIVATE);
	connectionEventLastSent = millis();
 808274a:	60b8      	str	r0, [r7, #8]
}
 808274c:	b054      	add	sp, #336	; 0x150
 808274e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		Log.info("sent %d events", numHandled);
 8082752:	4632      	mov	r2, r6
 8082754:	4907      	ldr	r1, [pc, #28]	; (8082774 <_ZN16ConnectionEvents4loopEv.part.0+0xe0>)
 8082756:	4804      	ldr	r0, [pc, #16]	; (8082768 <_ZN16ConnectionEvents4loopEv.part.0+0xd4>)
 8082758:	f7ff fb8a 	bl	8081e70 <_ZNK5spark6Logger4infoEPKcz>
 808275c:	e7d7      	b.n	808270e <_ZN16ConnectionEvents4loopEv.part.0+0x7a>
 808275e:	bf00      	nop
 8082760:	40024018 	.word	0x40024018
 8082764:	0808998b 	.word	0x0808998b
 8082768:	200003b4 	.word	0x200003b4
 808276c:	40024020 	.word	0x40024020
 8082770:	200002a5 	.word	0x200002a5
 8082774:	080899b9 	.word	0x080899b9
 8082778:	0808997c 	.word	0x0808997c

0808277c <_ZN16ConnectionEventsC1EPKc>:
ConnectionEvents::ConnectionEvents(const char *connectionEventName) : connectionEventName(connectionEventName) {
 808277c:	4a03      	ldr	r2, [pc, #12]	; (808278c <_ZN16ConnectionEventsC1EPKc+0x10>)
 808277e:	e9c0 2100 	strd	r2, r1, [r0]
 8082782:	2200      	movs	r2, #0
 8082784:	6082      	str	r2, [r0, #8]
	instance = this;
 8082786:	4a02      	ldr	r2, [pc, #8]	; (8082790 <_ZN16ConnectionEventsC1EPKc+0x14>)
 8082788:	6010      	str	r0, [r2, #0]
}
 808278a:	4770      	bx	lr
 808278c:	08089a34 	.word	0x08089a34
 8082790:	200002a8 	.word	0x200002a8

08082794 <_ZN16ConnectionEvents4loopEv>:
void ConnectionEvents::loop() {
 8082794:	b510      	push	{r4, lr}
	if (connectionEventData.eventCount == 0) {
 8082796:	4b0a      	ldr	r3, [pc, #40]	; (80827c0 <_ZN16ConnectionEvents4loopEv+0x2c>)
void ConnectionEvents::loop() {
 8082798:	4604      	mov	r4, r0
	if (connectionEventData.eventCount == 0) {
 808279a:	685b      	ldr	r3, [r3, #4]
 808279c:	b17b      	cbz	r3, 80827be <_ZN16ConnectionEvents4loopEv+0x2a>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 808279e:	f002 f863 	bl	8084868 <spark_cloud_flag_connected>
	if (!Particle.connected()) {
 80827a2:	b160      	cbz	r0, 80827be <_ZN16ConnectionEvents4loopEv+0x2a>
 80827a4:	f001 fd68 	bl	8084278 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - connectionEventLastSent < PUBLISH_MIN_PERIOD_MS) {
 80827a8:	68a3      	ldr	r3, [r4, #8]
 80827aa:	1ac0      	subs	r0, r0, r3
 80827ac:	f240 33f1 	movw	r3, #1009	; 0x3f1
 80827b0:	4298      	cmp	r0, r3
 80827b2:	d904      	bls.n	80827be <_ZN16ConnectionEvents4loopEv+0x2a>
 80827b4:	4620      	mov	r0, r4
}
 80827b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80827ba:	f7ff bf6b 	b.w	8082694 <_ZN16ConnectionEvents4loopEv.part.0>
 80827be:	bd10      	pop	{r4, pc}
 80827c0:	40024018 	.word	0x40024018

080827c4 <_ZN16ConnectionEvents3addEii>:

// Add a new event. This should only be called from the main loop thread.
// Do not call from other threads like the system thread, software timer, or interrupt service routine.
void ConnectionEvents::add(int eventCode, int data /* = 0 */) {
 80827c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (connectionEventData.eventCount >= CONNECTION_EVENTS_MAX_EVENTS) {
 80827c8:	4c17      	ldr	r4, [pc, #92]	; (8082828 <_ZN16ConnectionEvents3addEii+0x64>)
void ConnectionEvents::add(int eventCode, int data /* = 0 */) {
 80827ca:	460f      	mov	r7, r1
	if (connectionEventData.eventCount >= CONNECTION_EVENTS_MAX_EVENTS) {
 80827cc:	6863      	ldr	r3, [r4, #4]
void ConnectionEvents::add(int eventCode, int data /* = 0 */) {
 80827ce:	4690      	mov	r8, r2
	if (connectionEventData.eventCount >= CONNECTION_EVENTS_MAX_EVENTS) {
 80827d0:	2b1f      	cmp	r3, #31
 80827d2:	d90f      	bls.n	80827f4 <_ZN16ConnectionEvents3addEii+0x30>
		// Throw out oldest event
		Log.info("discarding old event");
 80827d4:	4915      	ldr	r1, [pc, #84]	; (808282c <_ZN16ConnectionEvents3addEii+0x68>)
 80827d6:	4816      	ldr	r0, [pc, #88]	; (8082830 <_ZN16ConnectionEvents3addEii+0x6c>)
 80827d8:	f7ff fb4a 	bl	8081e70 <_ZNK5spark6Logger4infoEPKcz>
		connectionEventData.eventCount--;
		memmove(&connectionEventData.events[0], &connectionEventData.events[1], connectionEventData.eventCount * sizeof(ConnectionEventData));
 80827dc:	f44f 7202 	mov.w	r2, #520	; 0x208
		connectionEventData.eventCount--;
 80827e0:	6863      	ldr	r3, [r4, #4]
		memmove(&connectionEventData.events[0], &connectionEventData.events[1], connectionEventData.eventCount * sizeof(ConnectionEventData));
 80827e2:	f104 0118 	add.w	r1, r4, #24
		connectionEventData.eventCount--;
 80827e6:	3b01      	subs	r3, #1
		memmove(&connectionEventData.events[0], &connectionEventData.events[1], connectionEventData.eventCount * sizeof(ConnectionEventData));
 80827e8:	435a      	muls	r2, r3
 80827ea:	f104 0008 	add.w	r0, r4, #8
		connectionEventData.eventCount--;
 80827ee:	6063      	str	r3, [r4, #4]
		memmove(&connectionEventData.events[0], &connectionEventData.events[1], connectionEventData.eventCount * sizeof(ConnectionEventData));
 80827f0:	f006 fbdc 	bl	8088fac <memmove>
	}

	// Add new event
	ConnectionEventInfo *ev = &connectionEventData.events[connectionEventData.eventCount++];
 80827f4:	6866      	ldr	r6, [r4, #4]
 80827f6:	1c75      	adds	r5, r6, #1
 80827f8:	6065      	str	r5, [r4, #4]
	ev->tsDate = Time.now();
 80827fa:	f003 fe82 	bl	8086502 <_ZN9TimeClass3nowEv>
 80827fe:	eb04 1606 	add.w	r6, r4, r6, lsl #4
 8082802:	60b0      	str	r0, [r6, #8]
 8082804:	f001 fd38 	bl	8084278 <HAL_Timer_Get_Milli_Seconds>
	ev->tsMillis = millis();
	ev->eventCode = eventCode;
 8082808:	012b      	lsls	r3, r5, #4
 808280a:	eb04 1505 	add.w	r5, r4, r5, lsl #4
	ev->tsMillis = millis();
 808280e:	60f0      	str	r0, [r6, #12]
	ev->eventCode = eventCode;
 8082810:	50e7      	str	r7, [r4, r3]
	ev->data = data;

	Log.info("connectionEvent event=%d data=%d", eventCode, data);
 8082812:	463a      	mov	r2, r7
 8082814:	4643      	mov	r3, r8
 8082816:	4907      	ldr	r1, [pc, #28]	; (8082834 <_ZN16ConnectionEvents3addEii+0x70>)
 8082818:	4805      	ldr	r0, [pc, #20]	; (8082830 <_ZN16ConnectionEvents3addEii+0x6c>)
	ev->data = data;
 808281a:	f8c5 8004 	str.w	r8, [r5, #4]
	Log.info("connectionEvent event=%d data=%d", eventCode, data);
 808281e:	f7ff fb27 	bl	8081e70 <_ZNK5spark6Logger4infoEPKcz>
}
 8082822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8082826:	bf00      	nop
 8082828:	40024018 	.word	0x40024018
 808282c:	080899c8 	.word	0x080899c8
 8082830:	200003b4 	.word	0x200003b4
 8082834:	080899dd 	.word	0x080899dd

08082838 <_ZN16ConnectionEvents5setupEv>:
void ConnectionEvents::setup() {
 8082838:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (connectionEventData.eventMagic != CONNECTION_EVENT_MAGIC ||
 808283a:	4c10      	ldr	r4, [pc, #64]	; (808287c <_ZN16ConnectionEvents5setupEv+0x44>)
 808283c:	4e10      	ldr	r6, [pc, #64]	; (8082880 <_ZN16ConnectionEvents5setupEv+0x48>)
 808283e:	6822      	ldr	r2, [r4, #0]
void ConnectionEvents::setup() {
 8082840:	4605      	mov	r5, r0
	if (connectionEventData.eventMagic != CONNECTION_EVENT_MAGIC ||
 8082842:	42b2      	cmp	r2, r6
 8082844:	d102      	bne.n	808284c <_ZN16ConnectionEvents5setupEv+0x14>
 8082846:	6863      	ldr	r3, [r4, #4]
 8082848:	2b20      	cmp	r3, #32
 808284a:	d904      	bls.n	8082856 <_ZN16ConnectionEvents5setupEv+0x1e>
		Log.info("initializing connection event retained memory");
 808284c:	490d      	ldr	r1, [pc, #52]	; (8082884 <_ZN16ConnectionEvents5setupEv+0x4c>)
 808284e:	480e      	ldr	r0, [pc, #56]	; (8082888 <_ZN16ConnectionEvents5setupEv+0x50>)
 8082850:	f7ff fb0e 	bl	8081e70 <_ZNK5spark6Logger4infoEPKcz>
		connectionEventData.eventMagic = CONNECTION_EVENT_MAGIC;
 8082854:	6026      	str	r6, [r4, #0]
	add(CONNECTION_EVENT_SETUP_STARTED);
 8082856:	2200      	movs	r2, #0
 8082858:	4628      	mov	r0, r5
 808285a:	4611      	mov	r1, r2
 808285c:	f7ff ffb2 	bl	80827c4 <_ZN16ConnectionEvents3addEii>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 8082860:	2200      	movs	r2, #0
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8082862:	a801      	add	r0, sp, #4
 8082864:	4611      	mov	r1, r2
        int reason = RESET_REASON_NONE;
 8082866:	9201      	str	r2, [sp, #4]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8082868:	f001 fd1e 	bl	80842a8 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 808286c:	9a01      	ldr	r2, [sp, #4]
	if (resetReason != RESET_REASON_NONE) {
 808286e:	b11a      	cbz	r2, 8082878 <_ZN16ConnectionEvents5setupEv+0x40>
		add(CONNECTION_EVENT_RESET_REASON, resetReason);
 8082870:	2112      	movs	r1, #18
 8082872:	4628      	mov	r0, r5
 8082874:	f7ff ffa6 	bl	80827c4 <_ZN16ConnectionEvents3addEii>
}
 8082878:	b002      	add	sp, #8
 808287a:	bd70      	pop	{r4, r5, r6, pc}
 808287c:	40024018 	.word	0x40024018
 8082880:	5c39d416 	.word	0x5c39d416
 8082884:	080899fe 	.word	0x080899fe
 8082888:	200003b4 	.word	0x200003b4

0808288c <_ZN16ConnectionEvents8addEventEii>:

// static
void ConnectionEvents::addEvent(int eventCode, int data) {
 808288c:	460a      	mov	r2, r1
	if (instance) {
 808288e:	4904      	ldr	r1, [pc, #16]	; (80828a0 <_ZN16ConnectionEvents8addEventEii+0x14>)
void ConnectionEvents::addEvent(int eventCode, int data) {
 8082890:	4603      	mov	r3, r0
	if (instance) {
 8082892:	6808      	ldr	r0, [r1, #0]
 8082894:	b110      	cbz	r0, 808289c <_ZN16ConnectionEvents8addEventEii+0x10>
		instance->add(eventCode, data);
 8082896:	4619      	mov	r1, r3
 8082898:	f7ff bf94 	b.w	80827c4 <_ZN16ConnectionEvents3addEii>
	}
}
 808289c:	4770      	bx	lr
 808289e:	bf00      	nop
 80828a0:	200002a8 	.word	0x200002a8

080828a4 <_GLOBAL__sub_I__ZN16ConnectionEvents19connectionEventDataE>:
        val_(val) {
 80828a4:	2201      	movs	r2, #1
 80828a6:	4b01      	ldr	r3, [pc, #4]	; (80828ac <_GLOBAL__sub_I__ZN16ConnectionEvents19connectionEventDataE+0x8>)
 80828a8:	701a      	strb	r2, [r3, #0]
 80828aa:	4770      	bx	lr
 80828ac:	200002a5 	.word	0x200002a5

080828b0 <_ZN10PowerCheckD1Ev>:
#include "Particle.h"
#include "PowerCheck.h"
PowerCheck::PowerCheck() {
}

PowerCheck::~PowerCheck() {
 80828b0:	b510      	push	{r4, lr}
 80828b2:	4604      	mov	r4, r0
 80828b4:	4b03      	ldr	r3, [pc, #12]	; (80828c4 <_ZN10PowerCheckD1Ev+0x14>)
 80828b6:	f840 3b04 	str.w	r3, [r0], #4
 80828ba:	f002 f873 	bl	80849a4 <_ZN4PMICD1Ev>
}
 80828be:	4620      	mov	r0, r4
 80828c0:	bd10      	pop	{r4, pc}
 80828c2:	bf00      	nop
 80828c4:	08089a44 	.word	0x08089a44

080828c8 <_ZN10PowerCheckD0Ev>:
PowerCheck::~PowerCheck() {
 80828c8:	b510      	push	{r4, lr}
 80828ca:	4604      	mov	r4, r0
}
 80828cc:	f7ff fff0 	bl	80828b0 <_ZN10PowerCheckD1Ev>
 80828d0:	4620      	mov	r0, r4
 80828d2:	210c      	movs	r1, #12
 80828d4:	f005 f9dd 	bl	8087c92 <_ZdlPvj>
 80828d8:	4620      	mov	r0, r4
 80828da:	bd10      	pop	{r4, pc}

080828dc <_ZN10PowerCheck16interruptHandlerEv>:
		// between charging and done when there is no battery.
		return false;
	}
}

void PowerCheck::interruptHandler() {
 80828dc:	b510      	push	{r4, lr}
 80828de:	4604      	mov	r4, r0
 80828e0:	f001 fcca 	bl	8084278 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastChange < 100) {
 80828e4:	68a3      	ldr	r3, [r4, #8]
 80828e6:	1ac0      	subs	r0, r0, r3
 80828e8:	2863      	cmp	r0, #99	; 0x63
		// We very recently had a change; assume there is no battey and we're rapidly switching
		// between fast charge and charge done
		hasBattery = false;
 80828ea:	bf94      	ite	ls
 80828ec:	2300      	movls	r3, #0
	}
	else {
		// Note: It's quite possible that hasBattery will be false when there is a battery; the logic
		// in getHasBattery() takes this into account by checking lastChange as well.
		hasBattery = true;
 80828ee:	2301      	movhi	r3, #1
 80828f0:	7163      	strb	r3, [r4, #5]
 80828f2:	f001 fcc1 	bl	8084278 <HAL_Timer_Get_Milli_Seconds>
	}
	lastChange = millis();
 80828f6:	60a0      	str	r0, [r4, #8]
}
 80828f8:	bd10      	pop	{r4, pc}

080828fa <_ZNSt14_Function_base13_Base_managerISt5_BindIFM10PowerCheckFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	  switch (__op)
 80828fa:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80828fc:	b538      	push	{r3, r4, r5, lr}
 80828fe:	4604      	mov	r4, r0
	  switch (__op)
 8082900:	d007      	beq.n	8082912 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM10PowerCheckFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x18>
 8082902:	2a03      	cmp	r2, #3
 8082904:	d011      	beq.n	808292a <_ZNSt14_Function_base13_Base_managerISt5_BindIFM10PowerCheckFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x30>
 8082906:	2a01      	cmp	r2, #1
 8082908:	d101      	bne.n	808290e <_ZNSt14_Function_base13_Base_managerISt5_BindIFM10PowerCheckFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 808290a:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
 808290c:	6023      	str	r3, [r4, #0]
	}
 808290e:	2000      	movs	r0, #0
 8082910:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 8082912:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
 8082914:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 8082916:	f7fd fbd0 	bl	80800ba <_Znwj>
 808291a:	4603      	mov	r3, r0
 808291c:	2800      	cmp	r0, #0
 808291e:	d0f5      	beq.n	808290c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM10PowerCheckFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x12>
 8082920:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8082924:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8082928:	e7f0      	b.n	808290c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM10PowerCheckFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
 808292a:	6800      	ldr	r0, [r0, #0]
 808292c:	2800      	cmp	r0, #0
 808292e:	d0ee      	beq.n	808290e <_ZNSt14_Function_base13_Base_managerISt5_BindIFM10PowerCheckFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x14>
 8082930:	210c      	movs	r1, #12
 8082932:	f005 f9ae 	bl	8087c92 <_ZdlPvj>
 8082936:	e7ea      	b.n	808290e <_ZNSt14_Function_base13_Base_managerISt5_BindIFM10PowerCheckFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x14>

08082938 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PowerCheckFvvEPS2_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8082938:	b410      	push	{r4}
	    return __source._M_access<_Functor*>();
 808293a:	6803      	ldr	r3, [r0, #0]
 808293c:	685a      	ldr	r2, [r3, #4]
 808293e:	6899      	ldr	r1, [r3, #8]
 8082940:	1054      	asrs	r4, r2, #1
 8082942:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8082946:	07d2      	lsls	r2, r2, #31
 8082948:	bf48      	it	mi
 808294a:	590a      	ldrmi	r2, [r1, r4]
 808294c:	681b      	ldr	r3, [r3, #0]
      }
 808294e:	bc10      	pop	{r4}
 8082950:	bf48      	it	mi
 8082952:	58d3      	ldrmi	r3, [r2, r3]
 8082954:	4718      	bx	r3
	...

08082958 <_ZN10PowerCheckC1Ev>:
PowerCheck::PowerCheck() {
 8082958:	4b06      	ldr	r3, [pc, #24]	; (8082974 <_ZN10PowerCheckC1Ev+0x1c>)
 808295a:	b510      	push	{r4, lr}
 808295c:	2100      	movs	r1, #0
 808295e:	4604      	mov	r4, r0
 8082960:	f840 3b04 	str.w	r3, [r0], #4
 8082964:	f002 f80f 	bl	8084986 <_ZN4PMICC1Eb>
 8082968:	2301      	movs	r3, #1
 808296a:	7163      	strb	r3, [r4, #5]
 808296c:	2300      	movs	r3, #0
}
 808296e:	4620      	mov	r0, r4
PowerCheck::PowerCheck() {
 8082970:	60a3      	str	r3, [r4, #8]
}
 8082972:	bd10      	pop	{r4, pc}
 8082974:	08089a44 	.word	0x08089a44

08082978 <_ZN10PowerCheck5setupEv>:
void PowerCheck::setup() {
 8082978:	b530      	push	{r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 808297a:	2500      	movs	r5, #0
 808297c:	b087      	sub	sp, #28
 808297e:	4604      	mov	r4, r0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082980:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
 8082982:	9504      	str	r5, [sp, #16]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082984:	f7fd fb99 	bl	80800ba <_Znwj>
 8082988:	b118      	cbz	r0, 8082992 <_ZN10PowerCheck5setupEv+0x1a>
 808298a:	4b0d      	ldr	r3, [pc, #52]	; (80829c0 <_ZN10PowerCheck5setupEv+0x48>)
 808298c:	6084      	str	r4, [r0, #8]
 808298e:	e9c0 3500 	strd	r3, r5, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
 8082992:	4b0c      	ldr	r3, [pc, #48]	; (80829c4 <_ZN10PowerCheck5setupEv+0x4c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082994:	9002      	str	r0, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
 8082996:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 8082998:	4b0b      	ldr	r3, [pc, #44]	; (80829c8 <_ZN10PowerCheck5setupEv+0x50>)
bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
template <typename T>
bool attachInterrupt(uint16_t pin, void (T::*handler)(), T *instance, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0) {
    using namespace std::placeholders;
    return attachInterrupt(pin, std::bind(handler, instance), mode, priority, subpriority);
 808299a:	2202      	movs	r2, #2
 808299c:	9304      	str	r3, [sp, #16]
 808299e:	2300      	movs	r3, #0
 80829a0:	202e      	movs	r0, #46	; 0x2e
 80829a2:	9300      	str	r3, [sp, #0]
 80829a4:	a902      	add	r1, sp, #8
 80829a6:	f04f 33ff 	mov.w	r3, #4294967295
 80829aa:	f004 fb95 	bl	80870d8 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>
      if (_M_manager)
 80829ae:	9b04      	ldr	r3, [sp, #16]
 80829b0:	b11b      	cbz	r3, 80829ba <_ZN10PowerCheck5setupEv+0x42>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80829b2:	a902      	add	r1, sp, #8
 80829b4:	2203      	movs	r2, #3
 80829b6:	4608      	mov	r0, r1
 80829b8:	4798      	blx	r3
}
 80829ba:	b007      	add	sp, #28
 80829bc:	bd30      	pop	{r4, r5, pc}
 80829be:	bf00      	nop
 80829c0:	080828dd 	.word	0x080828dd
 80829c4:	08082939 	.word	0x08082939
 80829c8:	080828fb 	.word	0x080828fb

080829cc <_ZN10PowerCheck11getHasPowerEv>:
bool PowerCheck::getHasPower() {
 80829cc:	b508      	push	{r3, lr}
	byte systemStatus = pmic.getSystemStatus();
 80829ce:	3004      	adds	r0, #4
 80829d0:	f002 f830 	bl	8084a34 <_ZN4PMIC15getSystemStatusEv>
}
 80829d4:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80829d8:	bd08      	pop	{r3, pc}

080829da <_ZN15Adafruit_LIS3DHD1Ev>:
  LIS3DH_INT1_SRC_YL = 0x04,
  LIS3DH_INT1_SRC_XH = 0x02,
  LIS3DH_INT1_SRC_XL = 0x01
} list3dh_ctrl_int2_src_t;

class Adafruit_LIS3DH : public Adafruit_Sensor {
 80829da:	4770      	bx	lr

080829dc <_ZN13AssetTracker2C1Ev>:
uint8_t internalANT[]={0xB5,0x62,0x06,0x13,0x04,0x00,0x00,0x00,0xF0,0x7D,0x8A,0x2A};
uint8_t externalANT[]={0xB5,0x62,0x06,0x13,0x04,0x00,0x01,0x00,0xF0,0x7D,0x8B,0x2E};

AssetTracker2::AssetTracker2() {

}
 80829dc:	4770      	bx	lr
	...

080829e0 <_ZN13AssetTracker25beginEv>:

void AssetTracker2::begin() {
 80829e0:	b510      	push	{r4, lr}
    accel.begin(LIS3DH_DEFAULT_ADDRESS);
 80829e2:	4c07      	ldr	r4, [pc, #28]	; (8082a00 <_ZN13AssetTracker25beginEv+0x20>)
 80829e4:	2118      	movs	r1, #24
 80829e6:	4620      	mov	r0, r4
 80829e8:	f000 fc4b 	bl	8083282 <_ZN15Adafruit_LIS3DH5beginEh>

    // Default to 5kHz low-power sampling
    accel.setDataRate(LIS3DH_DATARATE_LOWPOWER_5KHZ);
 80829ec:	4620      	mov	r0, r4
 80829ee:	2109      	movs	r1, #9
 80829f0:	f000 fc36 	bl	8083260 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>

    // Default to 4 gravities range
    accel.setRange(LIS3DH_RANGE_4_G);
 80829f4:	4620      	mov	r0, r4

}
 80829f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    accel.setRange(LIS3DH_RANGE_4_G);
 80829fa:	2101      	movs	r1, #1
 80829fc:	f000 bc18 	b.w	8083230 <_ZN15Adafruit_LIS3DH8setRangeE14lis3dh_range_t>
 8082a00:	200002ac 	.word	0x200002ac

08082a04 <_ZN13AssetTracker27readLatEv>:

float AssetTracker2::readLat() {
    return gps.latitude;
}
 8082a04:	4b01      	ldr	r3, [pc, #4]	; (8082a0c <_ZN13AssetTracker27readLatEv+0x8>)
 8082a06:	6958      	ldr	r0, [r3, #20]
 8082a08:	4770      	bx	lr
 8082a0a:	bf00      	nop
 8082a0c:	200002d8 	.word	0x200002d8

08082a10 <_ZN13AssetTracker27readLonEv>:

float AssetTracker2::readLon() {
    return gps.longitude;
}
 8082a10:	4b01      	ldr	r3, [pc, #4]	; (8082a18 <_ZN13AssetTracker27readLonEv+0x8>)
 8082a12:	6998      	ldr	r0, [r3, #24]
 8082a14:	4770      	bx	lr
 8082a16:	bf00      	nop
 8082a18:	200002d8 	.word	0x200002d8

08082a1c <_ZN13AssetTracker210readLatDegEv>:

float AssetTracker2::readLatDeg() {
    return gps.latitudeDegrees;
}
 8082a1c:	4b01      	ldr	r3, [pc, #4]	; (8082a24 <_ZN13AssetTracker210readLatDegEv+0x8>)
 8082a1e:	69d8      	ldr	r0, [r3, #28]
 8082a20:	4770      	bx	lr
 8082a22:	bf00      	nop
 8082a24:	200002d8 	.word	0x200002d8

08082a28 <_ZN13AssetTracker210readLonDegEv>:

float AssetTracker2::readLonDeg() {
    return gps.longitudeDegrees;
}
 8082a28:	4b01      	ldr	r3, [pc, #4]	; (8082a30 <_ZN13AssetTracker210readLonDegEv+0x8>)
 8082a2a:	6a18      	ldr	r0, [r3, #32]
 8082a2c:	4770      	bx	lr
 8082a2e:	bf00      	nop
 8082a30:	200002d8 	.word	0x200002d8

08082a34 <_ZN13AssetTracker214getGpsAccuracyEv>:

float AssetTracker2::getGpsAccuracy() {
 8082a34:	b508      	push	{r3, lr}
  return (float)gps.horzAcc;
 8082a36:	4b02      	ldr	r3, [pc, #8]	; (8082a40 <_ZN13AssetTracker214getGpsAccuracyEv+0xc>)
 8082a38:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8082a3a:	f006 f813 	bl	8088a64 <__aeabi_ui2f>
}
 8082a3e:	bd08      	pop	{r3, pc}
 8082a40:	200002d8 	.word	0x200002d8

08082a44 <_ZN13AssetTracker212getHaccuracyEv>:
  return gps.headVehValid;
}

uint32_t AssetTracker2::getHaccuracy() {
  return gps.horzAcc;
}
 8082a44:	4b01      	ldr	r3, [pc, #4]	; (8082a4c <_ZN13AssetTracker212getHaccuracyEv+0x8>)
 8082a46:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8082a48:	4770      	bx	lr
 8082a4a:	bf00      	nop
 8082a4c:	200002d8 	.word	0x200002d8

08082a50 <_ZN13AssetTracker212getVaccuracyEv>:
uint32_t AssetTracker2::getVaccuracy() {
  return gps.vertAcc;
}
 8082a50:	4b01      	ldr	r3, [pc, #4]	; (8082a58 <_ZN13AssetTracker212getVaccuracyEv+0x8>)
 8082a52:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8082a54:	4770      	bx	lr
 8082a56:	bf00      	nop
 8082a58:	200002d8 	.word	0x200002d8

08082a5c <_ZN13AssetTracker27getVelNEv>:
int32_t AssetTracker2::getVelN() {
  return gps.velN;
}
 8082a5c:	4b01      	ldr	r3, [pc, #4]	; (8082a64 <_ZN13AssetTracker27getVelNEv+0x8>)
 8082a5e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8082a60:	4770      	bx	lr
 8082a62:	bf00      	nop
 8082a64:	200002d8 	.word	0x200002d8

08082a68 <_ZN13AssetTracker27getVelEEv>:
int32_t AssetTracker2::getVelE() {
  return gps.velE;
}
 8082a68:	4b01      	ldr	r3, [pc, #4]	; (8082a70 <_ZN13AssetTracker27getVelEEv+0x8>)
 8082a6a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8082a6c:	4770      	bx	lr
 8082a6e:	bf00      	nop
 8082a70:	200002d8 	.word	0x200002d8

08082a74 <_ZN13AssetTracker27getVelDEv>:
int32_t AssetTracker2::getVelD() {
  return gps.velD;
}
 8082a74:	4b01      	ldr	r3, [pc, #4]	; (8082a7c <_ZN13AssetTracker27getVelDEv+0x8>)
 8082a76:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8082a78:	4770      	bx	lr
 8082a7a:	bf00      	nop
 8082a7c:	200002d8 	.word	0x200002d8

08082a80 <_ZN13AssetTracker210getOdoTripEv>:
int32_t AssetTracker2::getOdoTrip() {
  return gps.odoTrip;
}
 8082a80:	4b01      	ldr	r3, [pc, #4]	; (8082a88 <_ZN13AssetTracker210getOdoTripEv+0x8>)
 8082a82:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8082a84:	4770      	bx	lr
 8082a86:	bf00      	nop
 8082a88:	200002d8 	.word	0x200002d8

08082a8c <_ZN13AssetTracker211getOdoTotalEv>:
int32_t AssetTracker2::getOdoTotal() {
  return gps.odoTotal;
}
 8082a8c:	4b01      	ldr	r3, [pc, #4]	; (8082a94 <_ZN13AssetTracker211getOdoTotalEv+0x8>)
 8082a8e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8082a90:	4770      	bx	lr
 8082a92:	bf00      	nop
 8082a94:	200002d8 	.word	0x200002d8

08082a98 <_ZN13AssetTracker29getGspeedEv>:
int32_t AssetTracker2::getGspeed() {
  return gps.gSpeed;
}
 8082a98:	4b01      	ldr	r3, [pc, #4]	; (8082aa0 <_ZN13AssetTracker29getGspeedEv+0x8>)
 8082a9a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8082a9c:	4770      	bx	lr
 8082a9e:	bf00      	nop
 8082aa0:	200002d8 	.word	0x200002d8

08082aa4 <_ZN13AssetTracker27getHourEv>:

uint8_t AssetTracker2::getHour(){
  return gps.hour;
}
 8082aa4:	4b01      	ldr	r3, [pc, #4]	; (8082aac <_ZN13AssetTracker27getHourEv+0x8>)
 8082aa6:	7858      	ldrb	r0, [r3, #1]
 8082aa8:	4770      	bx	lr
 8082aaa:	bf00      	nop
 8082aac:	200002d8 	.word	0x200002d8

08082ab0 <_ZN13AssetTracker29getMinuteEv>:

uint8_t AssetTracker2::getMinute(){
  return gps.minute;
}
 8082ab0:	4b01      	ldr	r3, [pc, #4]	; (8082ab8 <_ZN13AssetTracker29getMinuteEv+0x8>)
 8082ab2:	7898      	ldrb	r0, [r3, #2]
 8082ab4:	4770      	bx	lr
 8082ab6:	bf00      	nop
 8082ab8:	200002d8 	.word	0x200002d8

08082abc <_ZN13AssetTracker210getSecondsEv>:

uint8_t AssetTracker2::getSeconds(){
  return gps.seconds;
}
 8082abc:	4b01      	ldr	r3, [pc, #4]	; (8082ac4 <_ZN13AssetTracker210getSecondsEv+0x8>)
 8082abe:	78d8      	ldrb	r0, [r3, #3]
 8082ac0:	4770      	bx	lr
 8082ac2:	bf00      	nop
 8082ac4:	200002d8 	.word	0x200002d8

08082ac8 <_ZN13AssetTracker215getMillisecondsEv>:

int32_t AssetTracker2::getMilliseconds(){
  return gps.milliseconds;
}
 8082ac8:	4b01      	ldr	r3, [pc, #4]	; (8082ad0 <_ZN13AssetTracker215getMillisecondsEv+0x8>)
 8082aca:	6898      	ldr	r0, [r3, #8]
 8082acc:	4770      	bx	lr
 8082ace:	bf00      	nop
 8082ad0:	200002d8 	.word	0x200002d8

08082ad4 <_ZN13AssetTracker27getYearEv>:

uint16_t AssetTracker2::getYear(){
  return gps.year;
}
 8082ad4:	4b01      	ldr	r3, [pc, #4]	; (8082adc <_ZN13AssetTracker27getYearEv+0x8>)
 8082ad6:	88d8      	ldrh	r0, [r3, #6]
 8082ad8:	4770      	bx	lr
 8082ada:	bf00      	nop
 8082adc:	200002d8 	.word	0x200002d8

08082ae0 <_ZN13AssetTracker28getMonthEv>:

uint8_t AssetTracker2::getMonth(){
  return gps.month;
}
 8082ae0:	4b01      	ldr	r3, [pc, #4]	; (8082ae8 <_ZN13AssetTracker28getMonthEv+0x8>)
 8082ae2:	7918      	ldrb	r0, [r3, #4]
 8082ae4:	4770      	bx	lr
 8082ae6:	bf00      	nop
 8082ae8:	200002d8 	.word	0x200002d8

08082aec <_ZN13AssetTracker26getDayEv>:

uint8_t AssetTracker2::getDay(){
  return gps.day;
}
 8082aec:	4b01      	ldr	r3, [pc, #4]	; (8082af4 <_ZN13AssetTracker26getDayEv+0x8>)
 8082aee:	7958      	ldrb	r0, [r3, #5]
 8082af0:	4770      	bx	lr
 8082af2:	bf00      	nop
 8082af4:	200002d8 	.word	0x200002d8

08082af8 <_ZN13AssetTracker213getSatellitesEv>:

uint8_t AssetTracker2::getSatellites(){
  return gps.satellites;
}
 8082af8:	4b01      	ldr	r3, [pc, #4]	; (8082b00 <_ZN13AssetTracker213getSatellitesEv+0x8>)
 8082afa:	f893 003b 	ldrb.w	r0, [r3, #59]	; 0x3b
 8082afe:	4770      	bx	lr
 8082b00:	200002d8 	.word	0x200002d8

08082b04 <_ZN13AssetTracker213getFixQualityEv>:

uint8_t AssetTracker2::getFixQuality(){
  return gps.fixquality;
}
 8082b04:	4b01      	ldr	r3, [pc, #4]	; (8082b0c <_ZN13AssetTracker213getFixQualityEv+0x8>)
 8082b06:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
 8082b0a:	4770      	bx	lr
 8082b0c:	200002d8 	.word	0x200002d8

08082b10 <_ZN13AssetTracker28getSpeedEv>:

float AssetTracker2::getSpeed(){
  return gps.speed;
}
 8082b10:	4b01      	ldr	r3, [pc, #4]	; (8082b18 <_ZN13AssetTracker28getSpeedEv+0x8>)
 8082b12:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8082b14:	4770      	bx	lr
 8082b16:	bf00      	nop
 8082b18:	200002d8 	.word	0x200002d8

08082b1c <_ZN13AssetTracker214getGeoIdHeightEv>:

float AssetTracker2::getGeoIdHeight(){
  return gps.geoidheight;
}
 8082b1c:	4b01      	ldr	r3, [pc, #4]	; (8082b24 <_ZN13AssetTracker214getGeoIdHeightEv+0x8>)
 8082b1e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8082b20:	4770      	bx	lr
 8082b22:	bf00      	nop
 8082b24:	200002d8 	.word	0x200002d8

08082b28 <_ZN13AssetTracker211getAltitudeEv>:

float AssetTracker2::getAltitude(){
  return gps.altitude;
}
 8082b28:	4b01      	ldr	r3, [pc, #4]	; (8082b30 <_ZN13AssetTracker211getAltitudeEv+0x8>)
 8082b2a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8082b2c:	4770      	bx	lr
 8082b2e:	bf00      	nop
 8082b30:	200002d8 	.word	0x200002d8

08082b34 <_ZN13AssetTracker210readLatLonEv>:

String AssetTracker2::readLatLon() {
 8082b34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    String latLon = String::format("%f,%f",gps.latitudeDegrees,gps.longitudeDegrees);
 8082b36:	4d0a      	ldr	r5, [pc, #40]	; (8082b60 <_ZN13AssetTracker210readLatLonEv+0x2c>)
String AssetTracker2::readLatLon() {
 8082b38:	4604      	mov	r4, r0
    String latLon = String::format("%f,%f",gps.latitudeDegrees,gps.longitudeDegrees);
 8082b3a:	69e8      	ldr	r0, [r5, #28]
 8082b3c:	f005 fb3c 	bl	80881b8 <__aeabi_f2d>
 8082b40:	4606      	mov	r6, r0
 8082b42:	6a28      	ldr	r0, [r5, #32]
 8082b44:	460f      	mov	r7, r1
 8082b46:	f005 fb37 	bl	80881b8 <__aeabi_f2d>
 8082b4a:	4632      	mov	r2, r6
 8082b4c:	e9cd 0100 	strd	r0, r1, [sp]
 8082b50:	463b      	mov	r3, r7
 8082b52:	4620      	mov	r0, r4
 8082b54:	4903      	ldr	r1, [pc, #12]	; (8082b64 <_ZN13AssetTracker210readLatLonEv+0x30>)
 8082b56:	f002 fa51 	bl	8084ffc <_ZN6String6formatEPKcz>
    return latLon;
}
 8082b5a:	4620      	mov	r0, r4
 8082b5c:	b003      	add	sp, #12
 8082b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8082b60:	200002d8 	.word	0x200002d8
 8082b64:	08089a4c 	.word	0x08089a4c

08082b68 <_ZN13AssetTracker25gpsOnEv>:

void AssetTracker2::gpsOn() {
 8082b68:	b538      	push	{r3, r4, r5, lr}
    enum ubxReturn err;
    // Power to the GPS is controlled by a FET connected to D6
    pinMode(D6,OUTPUT);
 8082b6a:	2101      	movs	r1, #1
 8082b6c:	2006      	movs	r0, #6
 8082b6e:	f004 ff41 	bl	80879f4 <pinMode>
    digitalWrite(D6,LOW);
 8082b72:	2100      	movs	r1, #0
 8082b74:	2006      	movs	r0, #6
 8082b76:	f004 ff4e 	bl	8087a16 <digitalWrite>
    Serial1.begin(9600);
 8082b7a:	f004 fba5 	bl	80872c8 <_Z22__fetch_global_Serial1v>
 8082b7e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8082b82:	f004 fb9b 	bl	80872bc <_ZN11USARTSerial5beginEm>
    delay(10);
 8082b86:	200a      	movs	r0, #10
 8082b88:	f003 fcd6 	bl	8086538 <delay>
	if (err != ubxPENDING ){
	    Serial.print("gps.begin failed: ");
	    Serial.println(err);
	    return;
	}
	err=gps.begin();
 8082b8c:	4d0f      	ldr	r5, [pc, #60]	; (8082bcc <_ZN13AssetTracker25gpsOnEv+0x64>)
 8082b8e:	4628      	mov	r0, r5
 8082b90:	f001 f90a 	bl	8083da8 <_ZN12UbloxM8Q_GPS5beginEv>
    while (err != ubxSUCCESS){
 8082b94:	4604      	mov	r4, r0
 8082b96:	b930      	cbnz	r0, 8082ba6 <_ZN13AssetTracker25gpsOnEv+0x3e>
    }
    Serial.println("GPS started");
 8082b98:	f004 fa0e 	bl	8086fb8 <_Z16_fetch_usbserialv>
}
 8082b9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Serial.println("GPS started");
 8082ba0:	490b      	ldr	r1, [pc, #44]	; (8082bd0 <_ZN13AssetTracker25gpsOnEv+0x68>)
 8082ba2:	f002 ba8c 	b.w	80850be <_ZN5Print7printlnEPKc>
	if (err != ubxPENDING ){
 8082ba6:	2c01      	cmp	r4, #1
 8082ba8:	d0f1      	beq.n	8082b8e <_ZN13AssetTracker25gpsOnEv+0x26>
	    Serial.print("gps.begin failed: ");
 8082baa:	f004 fa05 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8082bae:	4909      	ldr	r1, [pc, #36]	; (8082bd4 <_ZN13AssetTracker25gpsOnEv+0x6c>)
 8082bb0:	f002 fa72 	bl	8085098 <_ZN5Print5printEPKc>
	    Serial.println(err);
 8082bb4:	f004 fa00 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8082bb8:	4605      	mov	r5, r0
        return printNumber(val, base) + t;
 8082bba:	4621      	mov	r1, r4
 8082bbc:	220a      	movs	r2, #10
 8082bbe:	f002 fa88 	bl	80850d2 <_ZN5Print11printNumberEmh>
        n += println();
 8082bc2:	4628      	mov	r0, r5
}
 8082bc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8082bc8:	f002 ba6d 	b.w	80850a6 <_ZN5Print7printlnEv>
 8082bcc:	200002d8 	.word	0x200002d8
 8082bd0:	08089a65 	.word	0x08089a65
 8082bd4:	08089a52 	.word	0x08089a52

08082bd8 <_ZN13AssetTracker215gpsInitCompleteEv>:
    digitalWrite(D6,HIGH);
}

bool AssetTracker2::gpsInitComplete() {
    return gps.initComplete;
}
 8082bd8:	4b01      	ldr	r3, [pc, #4]	; (8082be0 <_ZN13AssetTracker215gpsInitCompleteEv+0x8>)
 8082bda:	7818      	ldrb	r0, [r3, #0]
 8082bdc:	4770      	bx	lr
 8082bde:	bf00      	nop
 8082be0:	200002d8 	.word	0x200002d8

08082be4 <_ZN13AssetTracker26gpsFixEv>:

bool AssetTracker2::gpsFix() {
    return gps.fix;
}
 8082be4:	4b01      	ldr	r3, [pc, #4]	; (8082bec <_ZN13AssetTracker26gpsFixEv+0x8>)
 8082be6:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 8082bea:	4770      	bx	lr
 8082bec:	200002d8 	.word	0x200002d8

08082bf0 <_ZN13AssetTracker215antennaInternalEv>:

bool AssetTracker2::gpsTimeValid() {
    return gps.timeValid;
}

bool AssetTracker2::antennaInternal(){
 8082bf0:	b538      	push	{r3, r4, r5, lr}
 8082bf2:	240c      	movs	r4, #12
 8082bf4:	4d06      	ldr	r5, [pc, #24]	; (8082c10 <_ZN13AssetTracker215antennaInternalEv+0x20>)

  for(uint8_t i=0;i<12;i++)
    {
        Serial1.write(internalANT[i]); //send the command to gps modul
 8082bf6:	f004 fb67 	bl	80872c8 <_Z22__fetch_global_Serial1v>
 8082bfa:	6803      	ldr	r3, [r0, #0]
 8082bfc:	f815 1b01 	ldrb.w	r1, [r5], #1
 8082c00:	689b      	ldr	r3, [r3, #8]
 8082c02:	3c01      	subs	r4, #1
 8082c04:	4798      	blx	r3
  for(uint8_t i=0;i<12;i++)
 8082c06:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8082c0a:	d1f4      	bne.n	8082bf6 <_ZN13AssetTracker215antennaInternalEv+0x6>
    }
  return true;

}
 8082c0c:	2001      	movs	r0, #1
 8082c0e:	bd38      	pop	{r3, r4, r5, pc}
 8082c10:	20000024 	.word	0x20000024

08082c14 <_ZN13AssetTracker215antennaExternalEv>:

bool AssetTracker2::antennaExternal(){
 8082c14:	b538      	push	{r3, r4, r5, lr}
 8082c16:	240c      	movs	r4, #12
 8082c18:	4d06      	ldr	r5, [pc, #24]	; (8082c34 <_ZN13AssetTracker215antennaExternalEv+0x20>)

  for(uint8_t i=0;i<12;i++)
    {
        Serial1.write(externalANT[i]); //send the command to gps modul
 8082c1a:	f004 fb55 	bl	80872c8 <_Z22__fetch_global_Serial1v>
 8082c1e:	6803      	ldr	r3, [r0, #0]
 8082c20:	f815 1b01 	ldrb.w	r1, [r5], #1
 8082c24:	689b      	ldr	r3, [r3, #8]
 8082c26:	3c01      	subs	r4, #1
 8082c28:	4798      	blx	r3
  for(uint8_t i=0;i<12;i++)
 8082c2a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8082c2e:	d1f4      	bne.n	8082c1a <_ZN13AssetTracker215antennaExternalEv+0x6>
    }
  return true;

}
 8082c30:	2001      	movs	r0, #1
 8082c32:	bd38      	pop	{r3, r4, r5, pc}
 8082c34:	20000018 	.word	0x20000018

08082c38 <_ZN13AssetTracker29updateGPSEv>:

void AssetTracker2::updateGPS() {
    gps.read();
 8082c38:	4801      	ldr	r0, [pc, #4]	; (8082c40 <_ZN13AssetTracker29updateGPSEv+0x8>)
 8082c3a:	f000 bff3 	b.w	8083c24 <_ZN12UbloxM8Q_GPS4readEv>
 8082c3e:	bf00      	nop
 8082c40:	200002d8 	.word	0x200002d8

08082c44 <_ZN13AssetTracker27gpsRateEti>:
}

void AssetTracker2::gpsRate(uint16_t measurement, int navigation) {
    gps.setRate(measurement, navigation);
 8082c44:	4801      	ldr	r0, [pc, #4]	; (8082c4c <_ZN13AssetTracker27gpsRateEti+0x8>)
 8082c46:	f001 b8f1 	b.w	8083e2c <_ZN12UbloxM8Q_GPS7setRateEti>
 8082c4a:	bf00      	nop
 8082c4c:	200002d8 	.word	0x200002d8

08082c50 <_ZN13AssetTracker211gpsResetODOEv>:
}

void AssetTracker2::gpsResetODO(void) {
    gps.resetODO();
 8082c50:	4801      	ldr	r0, [pc, #4]	; (8082c58 <_ZN13AssetTracker211gpsResetODOEv+0x8>)
 8082c52:	f001 b8a3 	b.w	8083d9c <_ZN12UbloxM8Q_GPS8resetODOEv>
 8082c56:	bf00      	nop
 8082c58:	200002d8 	.word	0x200002d8

08082c5c <_ZN13AssetTracker25readXEv>:

void AssetTracker2::gpsHoldThresh(int speed, uint16_t distance) {
    gps.setThresh(speed, distance);
}

int AssetTracker2::readX() {
 8082c5c:	b510      	push	{r4, lr}
    accel.read();
 8082c5e:	4c03      	ldr	r4, [pc, #12]	; (8082c6c <_ZN13AssetTracker25readXEv+0x10>)
 8082c60:	4620      	mov	r0, r4
 8082c62:	f000 fb5f 	bl	8083324 <_ZN15Adafruit_LIS3DH4readEv>
    return accel.x;
}
 8082c66:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 8082c6a:	bd10      	pop	{r4, pc}
 8082c6c:	200002ac 	.word	0x200002ac

08082c70 <_ZN13AssetTracker25readYEv>:

int AssetTracker2::readY() {
 8082c70:	b510      	push	{r4, lr}
    accel.read();
 8082c72:	4c03      	ldr	r4, [pc, #12]	; (8082c80 <_ZN13AssetTracker25readYEv+0x10>)
 8082c74:	4620      	mov	r0, r4
 8082c76:	f000 fb55 	bl	8083324 <_ZN15Adafruit_LIS3DH4readEv>
    return accel.y;
}
 8082c7a:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8082c7e:	bd10      	pop	{r4, pc}
 8082c80:	200002ac 	.word	0x200002ac

08082c84 <_ZN13AssetTracker25readZEv>:

int AssetTracker2::readZ() {
 8082c84:	b510      	push	{r4, lr}
    accel.read();
 8082c86:	4c03      	ldr	r4, [pc, #12]	; (8082c94 <_ZN13AssetTracker25readZEv+0x10>)
 8082c88:	4620      	mov	r0, r4
 8082c8a:	f000 fb4b 	bl	8083324 <_ZN15Adafruit_LIS3DH4readEv>
    return accel.z;
}
 8082c8e:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
 8082c92:	bd10      	pop	{r4, pc}
 8082c94:	200002ac 	.word	0x200002ac

08082c98 <_ZN13AssetTracker216readXYZmagnitudeEv>:
    *y = accel.y;
    *z = accel.z;
}


int AssetTracker2::readXYZmagnitude() {
 8082c98:	b510      	push	{r4, lr}
    accel.read();
 8082c9a:	4c0b      	ldr	r4, [pc, #44]	; (8082cc8 <_ZN13AssetTracker216readXYZmagnitudeEv+0x30>)
 8082c9c:	4620      	mov	r0, r4
 8082c9e:	f000 fb41 	bl	8083324 <_ZN15Adafruit_LIS3DH4readEv>
    int magnitude = sqrt((accel.x*accel.x)+(accel.y*accel.y)+(accel.z*accel.z));
 8082ca2:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8082ca6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8082caa:	4352      	muls	r2, r2
 8082cac:	fb03 2303 	mla	r3, r3, r3, r2
 8082cb0:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    sqrt(_Tp __x)
    { return __builtin_sqrt(__x); }
 8082cb4:	fb00 3000 	mla	r0, r0, r0, r3
 8082cb8:	f005 fa6c 	bl	8088194 <__aeabi_i2d>
 8082cbc:	f004 fff2 	bl	8087ca4 <sqrt>
 8082cc0:	f005 fd82 	bl	80887c8 <__aeabi_d2iz>
    return magnitude;
}
 8082cc4:	bd10      	pop	{r4, pc}
 8082cc6:	bf00      	nop
 8082cc8:	200002ac 	.word	0x200002ac

08082ccc <_ZN15Adafruit_LIS3DHD0Ev>:
 8082ccc:	b510      	push	{r4, lr}
 8082cce:	4604      	mov	r4, r0
 8082cd0:	212c      	movs	r1, #44	; 0x2c
 8082cd2:	f004 ffde 	bl	8087c92 <_ZdlPvj>
 8082cd6:	4620      	mov	r0, r4
 8082cd8:	bd10      	pop	{r4, pc}
	...

08082cdc <_GLOBAL__sub_I_gps>:
	return accel.setupLowPowerWakeMode(movementThreshold);
}

uint8_t AssetTracker2::clearAccelInterrupt() {
	return accel.clearInterrupt();
}
 8082cdc:	b510      	push	{r4, lr}
Adafruit_LIS3DH accel = Adafruit_LIS3DH(A2);
 8082cde:	4c07      	ldr	r4, [pc, #28]	; (8082cfc <_GLOBAL__sub_I_gps+0x20>)
UbloxM8Q_GPS gps = UbloxM8Q_GPS();
 8082ce0:	4807      	ldr	r0, [pc, #28]	; (8082d00 <_GLOBAL__sub_I_gps+0x24>)
 8082ce2:	f000 fc20 	bl	8083526 <_ZN12UbloxM8Q_GPSC1Ev>
Adafruit_LIS3DH accel = Adafruit_LIS3DH(A2);
 8082ce6:	210c      	movs	r1, #12
 8082ce8:	4620      	mov	r0, r4
 8082cea:	f000 f9a5 	bl	8083038 <_ZN15Adafruit_LIS3DHC1Ea>
 8082cee:	4620      	mov	r0, r4
}
 8082cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
Adafruit_LIS3DH accel = Adafruit_LIS3DH(A2);
 8082cf4:	4a03      	ldr	r2, [pc, #12]	; (8082d04 <_GLOBAL__sub_I_gps+0x28>)
 8082cf6:	4904      	ldr	r1, [pc, #16]	; (8082d08 <_GLOBAL__sub_I_gps+0x2c>)
 8082cf8:	f004 bfc6 	b.w	8087c88 <__aeabi_atexit>
 8082cfc:	200002ac 	.word	0x200002ac
 8082d00:	200002d8 	.word	0x200002d8
 8082d04:	20000130 	.word	0x20000130
 8082d08:	080829db 	.word	0x080829db

08082d0c <_ZN3DHTC1Ehhh>:
#include "Adafruit_DHT.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
	_pin = pin;
	_type = type;
	_count = count;
 8082d0c:	7203      	strb	r3, [r0, #8]
	firstreading = true;
 8082d0e:	2301      	movs	r3, #1
DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
 8082d10:	b510      	push	{r4, lr}
	_pin = pin;
 8082d12:	7181      	strb	r1, [r0, #6]
	_type = type;
 8082d14:	71c2      	strb	r2, [r0, #7]
	firstreading = true;
 8082d16:	7403      	strb	r3, [r0, #16]
}
 8082d18:	bd10      	pop	{r4, pc}

08082d1a <_ZN3DHT5beginEv>:

void DHT::begin(void) {
 8082d1a:	b510      	push	{r4, lr}
 8082d1c:	4604      	mov	r4, r0
// set up the pins!
	pinMode(_pin, INPUT);
 8082d1e:	2100      	movs	r1, #0
 8082d20:	7980      	ldrb	r0, [r0, #6]
 8082d22:	f004 fe67 	bl	80879f4 <pinMode>
	digitalWrite(_pin, HIGH);
 8082d26:	2101      	movs	r1, #1
 8082d28:	79a0      	ldrb	r0, [r4, #6]
 8082d2a:	f004 fe74 	bl	8087a16 <digitalWrite>
	_lastreadtime = 0;
 8082d2e:	2300      	movs	r3, #0
 8082d30:	60e3      	str	r3, [r4, #12]
}
 8082d32:	bd10      	pop	{r4, pc}

08082d34 <_ZN3DHT4readEv>:
	double Td = (b * tC) / (a - tC);
	return Td;
}


boolean DHT::read(void) {
 8082d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8082d38:	4604      	mov	r4, r0
 8082d3a:	f001 fa9d 	bl	8084278 <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime) {
 8082d3e:	68e3      	ldr	r3, [r4, #12]
 8082d40:	4606      	mov	r6, r0
 8082d42:	4283      	cmp	r3, r0
// ie there was a rollover
		_lastreadtime = 0;
 8082d44:	bf84      	itt	hi
 8082d46:	2300      	movhi	r3, #0
 8082d48:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
 8082d4a:	7c23      	ldrb	r3, [r4, #16]
 8082d4c:	b92b      	cbnz	r3, 8082d5a <_ZN3DHT4readEv+0x26>
 8082d4e:	68e3      	ldr	r3, [r4, #12]
 8082d50:	1ac3      	subs	r3, r0, r3
 8082d52:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8082d56:	f0c0 80cf 	bcc.w	8082ef8 <_ZN3DHT4readEv+0x1c4>
		return true; // return last correct measurement
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
 8082d5a:	2500      	movs	r5, #0
 8082d5c:	7425      	strb	r5, [r4, #16]

	Serial.print("Currtime: "); Serial.print(currenttime);
 8082d5e:	f004 f92b 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8082d62:	4967      	ldr	r1, [pc, #412]	; (8082f00 <_ZN3DHT4readEv+0x1cc>)
 8082d64:	f002 f998 	bl	8085098 <_ZN5Print5printEPKc>
 8082d68:	f004 f926 	bl	8086fb8 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
 8082d6c:	220a      	movs	r2, #10
 8082d6e:	4631      	mov	r1, r6
 8082d70:	f002 f9af 	bl	80850d2 <_ZN5Print11printNumberEmh>
	Serial.println(" Lasttime: "); Serial.print(_lastreadtime);
 8082d74:	f004 f920 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8082d78:	4962      	ldr	r1, [pc, #392]	; (8082f04 <_ZN3DHT4readEv+0x1d0>)
 8082d7a:	f002 f9a0 	bl	80850be <_ZN5Print7printlnEPKc>
 8082d7e:	f004 f91b 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8082d82:	220a      	movs	r2, #10
 8082d84:	68e1      	ldr	r1, [r4, #12]
 8082d86:	f002 f9a4 	bl	80850d2 <_ZN5Print11printNumberEmh>
 8082d8a:	f001 fa75 	bl	8084278 <HAL_Timer_Get_Milli_Seconds>
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
  
// pull the pin high and wait 250 milliseconds
	digitalWrite(_pin, HIGH);
 8082d8e:	2101      	movs	r1, #1
	_lastreadtime = millis();
 8082d90:	60e0      	str	r0, [r4, #12]
	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
 8082d92:	6025      	str	r5, [r4, #0]
	digitalWrite(_pin, HIGH);
 8082d94:	79a0      	ldrb	r0, [r4, #6]
	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
 8082d96:	7125      	strb	r5, [r4, #4]
	digitalWrite(_pin, HIGH);
 8082d98:	f004 fe3d 	bl	8087a16 <digitalWrite>
	delay(250);
 8082d9c:	20fa      	movs	r0, #250	; 0xfa
 8082d9e:	f003 fbcb 	bl	8086538 <delay>

// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
 8082da2:	2101      	movs	r1, #1
 8082da4:	79a0      	ldrb	r0, [r4, #6]
 8082da6:	f004 fe25 	bl	80879f4 <pinMode>
	digitalWrite(_pin, LOW);
 8082daa:	4629      	mov	r1, r5
 8082dac:	79a0      	ldrb	r0, [r4, #6]
 8082dae:	f004 fe32 	bl	8087a16 <digitalWrite>
	delay(20);
 8082db2:	2014      	movs	r0, #20
 8082db4:	f003 fbc0 	bl	8086538 <delay>
	noInterrupts();
 8082db8:	f004 f95f 	bl	808707a <_Z12noInterruptsv>
	digitalWrite(_pin, HIGH);
 8082dbc:	2101      	movs	r1, #1
 8082dbe:	79a0      	ldrb	r0, [r4, #6]
 8082dc0:	f004 fe29 	bl	8087a16 <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 8082dc4:	2028      	movs	r0, #40	; 0x28
 8082dc6:	f001 fa4f 	bl	8084268 <HAL_Delay_Microseconds>
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
 8082dca:	4629      	mov	r1, r5
 8082dcc:	79a0      	ldrb	r0, [r4, #6]
 8082dce:	f004 fe11 	bl	80879f4 <pinMode>
	uint8_t j = 0, i;
 8082dd2:	462e      	mov	r6, r5
	uint8_t laststate = HIGH;
 8082dd4:	2701      	movs	r7, #1
 8082dd6:	f04f 0800 	mov.w	r8, #0

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
		counter = 0;
		while (digitalRead(_pin) == laststate) {
 8082dda:	79a0      	ldrb	r0, [r4, #6]
 8082ddc:	f004 fe34 	bl	8087a48 <digitalRead>
 8082de0:	42b8      	cmp	r0, r7
 8082de2:	fa5f f988 	uxtb.w	r9, r8
 8082de6:	d108      	bne.n	8082dfa <_ZN3DHT4readEv+0xc6>
 8082de8:	2001      	movs	r0, #1
 8082dea:	f108 0801 	add.w	r8, r8, #1
 8082dee:	f001 fa3b 	bl	8084268 <HAL_Delay_Microseconds>
			counter++;
			delayMicroseconds(1);
			if (counter == 255) {
 8082df2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8082df6:	d1f0      	bne.n	8082dda <_ZN3DHT4readEv+0xa6>
 8082df8:	46c1      	mov	r9, r8
				break;
			}
		}
		laststate = digitalRead(_pin);
 8082dfa:	79a0      	ldrb	r0, [r4, #6]
 8082dfc:	f004 fe24 	bl	8087a48 <digitalRead>

		if (counter == 255) break;
 8082e00:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		laststate = digitalRead(_pin);
 8082e04:	b2c7      	uxtb	r7, r0
		if (counter == 255) break;
 8082e06:	d014      	beq.n	8082e32 <_ZN3DHT4readEv+0xfe>

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
 8082e08:	2d03      	cmp	r5, #3
 8082e0a:	d90e      	bls.n	8082e2a <_ZN3DHT4readEv+0xf6>
 8082e0c:	07ea      	lsls	r2, r5, #31
 8082e0e:	d40c      	bmi.n	8082e2a <_ZN3DHT4readEv+0xf6>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
 8082e10:	08f2      	lsrs	r2, r6, #3
 8082e12:	5ca3      	ldrb	r3, [r4, r2]
			if (counter > _count)
				data[j/8] |= 1;
			j++;
 8082e14:	3601      	adds	r6, #1
			data[j/8] <<= 1;
 8082e16:	005b      	lsls	r3, r3, #1
 8082e18:	b2db      	uxtb	r3, r3
 8082e1a:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
 8082e1c:	7a21      	ldrb	r1, [r4, #8]
			j++;
 8082e1e:	b2f6      	uxtb	r6, r6
			if (counter > _count)
 8082e20:	4549      	cmp	r1, r9
				data[j/8] |= 1;
 8082e22:	bf3c      	itt	cc
 8082e24:	f043 0301 	orrcc.w	r3, r3, #1
 8082e28:	54a3      	strbcc	r3, [r4, r2]
	for ( i=0; i< MAXTIMINGS; i++) {
 8082e2a:	3501      	adds	r5, #1
 8082e2c:	b2ed      	uxtb	r5, r5
 8082e2e:	2d55      	cmp	r5, #85	; 0x55
 8082e30:	d1d1      	bne.n	8082dd6 <_ZN3DHT4readEv+0xa2>
		}

	}

	interrupts();
 8082e32:	f004 f924 	bl	808707e <_Z10interruptsv>


	Serial.println(j, DEC);
 8082e36:	f004 f8bf 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8082e3a:	4605      	mov	r5, r0
 8082e3c:	220a      	movs	r2, #10
 8082e3e:	4631      	mov	r1, r6
 8082e40:	f002 f947 	bl	80850d2 <_ZN5Print11printNumberEmh>
        n += println();
 8082e44:	4628      	mov	r0, r5
 8082e46:	f002 f92e 	bl	80850a6 <_ZN5Print7printlnEv>
	Serial.print(data[0], HEX); Serial.print(", ");
 8082e4a:	f004 f8b5 	bl	8086fb8 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
 8082e4e:	2210      	movs	r2, #16
 8082e50:	7821      	ldrb	r1, [r4, #0]
 8082e52:	f002 f93e 	bl	80850d2 <_ZN5Print11printNumberEmh>
 8082e56:	f004 f8af 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8082e5a:	492b      	ldr	r1, [pc, #172]	; (8082f08 <_ZN3DHT4readEv+0x1d4>)
 8082e5c:	f002 f91c 	bl	8085098 <_ZN5Print5printEPKc>
	Serial.print(data[1], HEX); Serial.print(", ");
 8082e60:	f004 f8aa 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8082e64:	2210      	movs	r2, #16
 8082e66:	7861      	ldrb	r1, [r4, #1]
 8082e68:	f002 f933 	bl	80850d2 <_ZN5Print11printNumberEmh>
 8082e6c:	f004 f8a4 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8082e70:	4925      	ldr	r1, [pc, #148]	; (8082f08 <_ZN3DHT4readEv+0x1d4>)
 8082e72:	f002 f911 	bl	8085098 <_ZN5Print5printEPKc>
	Serial.print(data[2], HEX); Serial.print(", ");
 8082e76:	f004 f89f 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8082e7a:	2210      	movs	r2, #16
 8082e7c:	78a1      	ldrb	r1, [r4, #2]
 8082e7e:	f002 f928 	bl	80850d2 <_ZN5Print11printNumberEmh>
 8082e82:	f004 f899 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8082e86:	4920      	ldr	r1, [pc, #128]	; (8082f08 <_ZN3DHT4readEv+0x1d4>)
 8082e88:	f002 f906 	bl	8085098 <_ZN5Print5printEPKc>
	Serial.print(data[3], HEX); Serial.print(", ");
 8082e8c:	f004 f894 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8082e90:	2210      	movs	r2, #16
 8082e92:	78e1      	ldrb	r1, [r4, #3]
 8082e94:	f002 f91d 	bl	80850d2 <_ZN5Print11printNumberEmh>
 8082e98:	f004 f88e 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8082e9c:	491a      	ldr	r1, [pc, #104]	; (8082f08 <_ZN3DHT4readEv+0x1d4>)
 8082e9e:	f002 f8fb 	bl	8085098 <_ZN5Print5printEPKc>
	Serial.print(data[4], HEX); Serial.print(" =? ");
 8082ea2:	f004 f889 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8082ea6:	2210      	movs	r2, #16
 8082ea8:	7921      	ldrb	r1, [r4, #4]
 8082eaa:	f002 f912 	bl	80850d2 <_ZN5Print11printNumberEmh>
 8082eae:	f004 f883 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8082eb2:	4916      	ldr	r1, [pc, #88]	; (8082f0c <_ZN3DHT4readEv+0x1d8>)
 8082eb4:	f002 f8f0 	bl	8085098 <_ZN5Print5printEPKc>
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
 8082eb8:	f004 f87e 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8082ebc:	4605      	mov	r5, r0
 8082ebe:	7861      	ldrb	r1, [r4, #1]
 8082ec0:	7823      	ldrb	r3, [r4, #0]
 8082ec2:	2210      	movs	r2, #16
 8082ec4:	440b      	add	r3, r1
 8082ec6:	78a1      	ldrb	r1, [r4, #2]
 8082ec8:	440b      	add	r3, r1
 8082eca:	78e1      	ldrb	r1, [r4, #3]
 8082ecc:	4419      	add	r1, r3
 8082ece:	f002 f900 	bl	80850d2 <_ZN5Print11printNumberEmh>
        n += println();
 8082ed2:	4628      	mov	r0, r5
 8082ed4:	f002 f8e7 	bl	80850a6 <_ZN5Print7printlnEv>


// check we read 40 bits and that the checksum matches
	if ((j >= 40) && 
 8082ed8:	2e27      	cmp	r6, #39	; 0x27
 8082eda:	d90f      	bls.n	8082efc <_ZN3DHT4readEv+0x1c8>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
 8082edc:	7863      	ldrb	r3, [r4, #1]
 8082ede:	7820      	ldrb	r0, [r4, #0]
 8082ee0:	4418      	add	r0, r3
 8082ee2:	78a3      	ldrb	r3, [r4, #2]
 8082ee4:	4418      	add	r0, r3
 8082ee6:	78e3      	ldrb	r3, [r4, #3]
 8082ee8:	4418      	add	r0, r3
 8082eea:	7923      	ldrb	r3, [r4, #4]
 8082eec:	b2c0      	uxtb	r0, r0
	if ((j >= 40) && 
 8082eee:	1ac3      	subs	r3, r0, r3
 8082ef0:	4258      	negs	r0, r3
 8082ef2:	4158      	adcs	r0, r3
		return true;
	}
 
	return false;

}
 8082ef4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return true; // return last correct measurement
 8082ef8:	2001      	movs	r0, #1
 8082efa:	e7fb      	b.n	8082ef4 <_ZN3DHT4readEv+0x1c0>
	return false;
 8082efc:	2000      	movs	r0, #0
 8082efe:	e7f9      	b.n	8082ef4 <_ZN3DHT4readEv+0x1c0>
 8082f00:	08089a71 	.word	0x08089a71
 8082f04:	08089a7c 	.word	0x08089a7c
 8082f08:	08089a88 	.word	0x08089a88
 8082f0c:	08089a8b 	.word	0x08089a8b

08082f10 <_ZN3DHT15readTemperatureEv>:
float DHT::readTemperature() {
 8082f10:	b570      	push	{r4, r5, r6, lr}
 8082f12:	4604      	mov	r4, r0
	if (read()) {
 8082f14:	f7ff ff0e 	bl	8082d34 <_ZN3DHT4readEv>
 8082f18:	b308      	cbz	r0, 8082f5e <_ZN3DHT15readTemperatureEv+0x4e>
		switch (_type) {
 8082f1a:	79e3      	ldrb	r3, [r4, #7]
 8082f1c:	2b0b      	cmp	r3, #11
 8082f1e:	d01a      	beq.n	8082f56 <_ZN3DHT15readTemperatureEv+0x46>
 8082f20:	3b15      	subs	r3, #21
 8082f22:	2b01      	cmp	r3, #1
 8082f24:	d81b      	bhi.n	8082f5e <_ZN3DHT15readTemperatureEv+0x4e>
				f = data[2] & 0x7F;
 8082f26:	78a6      	ldrb	r6, [r4, #2]
 8082f28:	f006 007f 	and.w	r0, r6, #127	; 0x7f
 8082f2c:	f005 fd9e 	bl	8088a6c <__aeabi_i2f>
				f *= 256;
 8082f30:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8082f34:	f005 fdee 	bl	8088b14 <__aeabi_fmul>
 8082f38:	4605      	mov	r5, r0
				f += data[3];
 8082f3a:	78e0      	ldrb	r0, [r4, #3]
 8082f3c:	f005 fd96 	bl	8088a6c <__aeabi_i2f>
 8082f40:	4629      	mov	r1, r5
 8082f42:	f005 fcdf 	bl	8088904 <__addsf3>
				f /= 10;
 8082f46:	4907      	ldr	r1, [pc, #28]	; (8082f64 <_ZN3DHT15readTemperatureEv+0x54>)
 8082f48:	f005 fe98 	bl	8088c7c <__aeabi_fdiv>
				if (data[2] & 0x80)
 8082f4c:	0633      	lsls	r3, r6, #24
 8082f4e:	d505      	bpl.n	8082f5c <_ZN3DHT15readTemperatureEv+0x4c>
					f *= -1;
 8082f50:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8082f54:	e002      	b.n	8082f5c <_ZN3DHT15readTemperatureEv+0x4c>
				f = data[2];
 8082f56:	78a0      	ldrb	r0, [r4, #2]
 8082f58:	f005 fd84 	bl	8088a64 <__aeabi_ui2f>
}
 8082f5c:	bd70      	pop	{r4, r5, r6, pc}
		switch (_type) {
 8082f5e:	4802      	ldr	r0, [pc, #8]	; (8082f68 <_ZN3DHT15readTemperatureEv+0x58>)
 8082f60:	e7fc      	b.n	8082f5c <_ZN3DHT15readTemperatureEv+0x4c>
 8082f62:	bf00      	nop
 8082f64:	41200000 	.word	0x41200000
 8082f68:	7fc00000 	.word	0x7fc00000

08082f6c <_ZN3DHT16getTempFarenheitEv>:
float DHT::getTempFarenheit() {
 8082f6c:	b508      	push	{r3, lr}
	return convertCtoF(readTemperature());
 8082f6e:	f7ff ffcf 	bl	8082f10 <_ZN3DHT15readTemperatureEv>
	return c * 9 / 5 + 32;
 8082f72:	4905      	ldr	r1, [pc, #20]	; (8082f88 <_ZN3DHT16getTempFarenheitEv+0x1c>)
 8082f74:	f005 fdce 	bl	8088b14 <__aeabi_fmul>
 8082f78:	4904      	ldr	r1, [pc, #16]	; (8082f8c <_ZN3DHT16getTempFarenheitEv+0x20>)
 8082f7a:	f005 fe7f 	bl	8088c7c <__aeabi_fdiv>
 8082f7e:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 8082f82:	f005 fcbf 	bl	8088904 <__addsf3>
}
 8082f86:	bd08      	pop	{r3, pc}
 8082f88:	41100000 	.word	0x41100000
 8082f8c:	40a00000 	.word	0x40a00000

08082f90 <_ZN3DHT12readHumidityEv>:
float DHT::readHumidity(void) {
 8082f90:	b538      	push	{r3, r4, r5, lr}
 8082f92:	4604      	mov	r4, r0
	if (read()) {
 8082f94:	f7ff fece 	bl	8082d34 <_ZN3DHT4readEv>
 8082f98:	b1d8      	cbz	r0, 8082fd2 <_ZN3DHT12readHumidityEv+0x42>
		switch (_type) {
 8082f9a:	79e3      	ldrb	r3, [r4, #7]
 8082f9c:	2b0b      	cmp	r3, #11
 8082f9e:	d014      	beq.n	8082fca <_ZN3DHT12readHumidityEv+0x3a>
 8082fa0:	3b15      	subs	r3, #21
 8082fa2:	2b01      	cmp	r3, #1
 8082fa4:	d815      	bhi.n	8082fd2 <_ZN3DHT12readHumidityEv+0x42>
				f = data[0];
 8082fa6:	7820      	ldrb	r0, [r4, #0]
 8082fa8:	f005 fd5c 	bl	8088a64 <__aeabi_ui2f>
				f *= 256;
 8082fac:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8082fb0:	f005 fdb0 	bl	8088b14 <__aeabi_fmul>
 8082fb4:	4605      	mov	r5, r0
				f += data[1];
 8082fb6:	7860      	ldrb	r0, [r4, #1]
 8082fb8:	f005 fd58 	bl	8088a6c <__aeabi_i2f>
 8082fbc:	4629      	mov	r1, r5
 8082fbe:	f005 fca1 	bl	8088904 <__addsf3>
				f /= 10;
 8082fc2:	4905      	ldr	r1, [pc, #20]	; (8082fd8 <_ZN3DHT12readHumidityEv+0x48>)
 8082fc4:	f005 fe5a 	bl	8088c7c <__aeabi_fdiv>
}
 8082fc8:	bd38      	pop	{r3, r4, r5, pc}
				f = data[0];
 8082fca:	7820      	ldrb	r0, [r4, #0]
 8082fcc:	f005 fd4a 	bl	8088a64 <__aeabi_ui2f>
				return f;
 8082fd0:	e7fa      	b.n	8082fc8 <_ZN3DHT12readHumidityEv+0x38>
		switch (_type) {
 8082fd2:	4802      	ldr	r0, [pc, #8]	; (8082fdc <_ZN3DHT12readHumidityEv+0x4c>)
 8082fd4:	e7f8      	b.n	8082fc8 <_ZN3DHT12readHumidityEv+0x38>
 8082fd6:	bf00      	nop
 8082fd8:	41200000 	.word	0x41200000
 8082fdc:	7fc00000 	.word	0x7fc00000

08082fe0 <_ZN3DHT11getHumidityEv>:
	return readHumidity();
 8082fe0:	f7ff bfd6 	b.w	8082f90 <_ZN3DHT12readHumidityEv>

08082fe4 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
 8082fe4:	4770      	bx	lr
	...

08082fe8 <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data
*/
/**************************************************************************/
void Adafruit_LIS3DH::getSensor(sensor_t *sensor) {
 8082fe8:	460b      	mov	r3, r1
 8082fea:	b510      	push	{r4, lr}
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
 8082fec:	2228      	movs	r2, #40	; 0x28
void Adafruit_LIS3DH::getSensor(sensor_t *sensor) {
 8082fee:	4604      	mov	r4, r0
  memset(sensor, 0, sizeof(sensor_t));
 8082ff0:	2100      	movs	r1, #0
 8082ff2:	4618      	mov	r0, r3
 8082ff4:	f005 fff4 	bl	8088fe0 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
 8082ff8:	220b      	movs	r2, #11
 8082ffa:	4908      	ldr	r1, [pc, #32]	; (808301c <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t+0x34>)
 8082ffc:	f006 f87b 	bl	80890f6 <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
 8083000:	2200      	movs	r2, #0
  sensor->version     = 1;
 8083002:	2101      	movs	r1, #1
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
 8083004:	4603      	mov	r3, r0
  sensor->name[sizeof(sensor->name)- 1] = 0;
 8083006:	72c2      	strb	r2, [r0, #11]
  sensor->version     = 1;
 8083008:	60c1      	str	r1, [r0, #12]
  sensor->sensor_id   = _sensorID;
 808300a:	69a0      	ldr	r0, [r4, #24]
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
  sensor->min_delay   = 0;
 808300c:	625a      	str	r2, [r3, #36]	; 0x24
  sensor->max_value   = 0;
 808300e:	2200      	movs	r2, #0
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
 8083010:	e9c3 0104 	strd	r0, r1, [r3, #16]
  sensor->max_value   = 0;
 8083014:	619a      	str	r2, [r3, #24]
  sensor->min_value   = 0;
 8083016:	61da      	str	r2, [r3, #28]
  sensor->resolution  = 0;
 8083018:	621a      	str	r2, [r3, #32]
}
 808301a:	bd10      	pop	{r4, pc}
 808301c:	08089a90 	.word	0x08089a90

08083020 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 8083020:	b510      	push	{r4, lr}
 8083022:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 8083024:	6880      	ldr	r0, [r0, #8]
 8083026:	b108      	cbz	r0, 808302c <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 8083028:	f001 f99e 	bl	8084368 <os_mutex_recursive_destroy>
 808302c:	4620      	mov	r0, r4
 808302e:	bd10      	pop	{r4, pc}

08083030 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 8083030:	6803      	ldr	r3, [r0, #0]
 8083032:	b2c9      	uxtb	r1, r1
 8083034:	689b      	ldr	r3, [r3, #8]
 8083036:	4718      	bx	r3

08083038 <_ZN15Adafruit_LIS3DHC1Ea>:
  : _sensorID(-1), _cs(cspin), _mosi(-1), _miso(-1), _sck(-1)
 8083038:	4a06      	ldr	r2, [pc, #24]	; (8083054 <_ZN15Adafruit_LIS3DHC1Ea+0x1c>)
 808303a:	7741      	strb	r1, [r0, #29]
 808303c:	6002      	str	r2, [r0, #0]
 808303e:	f04f 32ff 	mov.w	r2, #4294967295
 8083042:	6182      	str	r2, [r0, #24]
 8083044:	83c2      	strh	r2, [r0, #30]
 8083046:	f64f 72ff 	movw	r2, #65535	; 0xffff
 808304a:	f880 2020 	strb.w	r2, [r0, #32]
 808304e:	2211      	movs	r2, #17
 8083050:	6242      	str	r2, [r0, #36]	; 0x24
{ }
 8083052:	4770      	bx	lr
 8083054:	08089aa0 	.word	0x08089aa0

08083058 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
 8083058:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
 808305a:	4d0c      	ldr	r5, [pc, #48]	; (808308c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
 808305c:	7829      	ldrb	r1, [r5, #0]
 808305e:	f3bf 8f5b 	dmb	ish
 8083062:	f011 0401 	ands.w	r4, r1, #1
 8083066:	d10f      	bne.n	8083088 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>
 8083068:	4628      	mov	r0, r5
 808306a:	f7fd f837 	bl	80800dc <__cxa_guard_acquire>
 808306e:	b158      	cbz	r0, 8083088 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>
 8083070:	4621      	mov	r1, r4
 8083072:	4807      	ldr	r0, [pc, #28]	; (8083090 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x38>)
 8083074:	f001 fce4 	bl	8084a40 <_ZN8SPIClassC1E19hal_spi_interface_t>
 8083078:	4628      	mov	r0, r5
 808307a:	f7fd f834 	bl	80800e6 <__cxa_guard_release>
 808307e:	4a05      	ldr	r2, [pc, #20]	; (8083094 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x3c>)
 8083080:	4905      	ldr	r1, [pc, #20]	; (8083098 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x40>)
 8083082:	4803      	ldr	r0, [pc, #12]	; (8083090 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x38>)
 8083084:	f004 fe00 	bl	8087c88 <__aeabi_atexit>
        return instance;
    }
 8083088:	4801      	ldr	r0, [pc, #4]	; (8083090 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x38>)
 808308a:	bd38      	pop	{r3, r4, r5, pc}
 808308c:	2000033c 	.word	0x2000033c
 8083090:	20000340 	.word	0x20000340
 8083094:	20000130 	.word	0x20000130
 8083098:	08083021 	.word	0x08083021

0808309c <_ZN15Adafruit_LIS3DH7spixferEh>:
/*!
    @brief  Low level SPI
*/
/**************************************************************************/

uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
 808309c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  #ifndef __AVR_ATtiny85__
  if (_sck == -1)
 80830a0:	f990 3020 	ldrsb.w	r3, [r0, #32]
uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
 80830a4:	4605      	mov	r5, r0
  if (_sck == -1)
 80830a6:	3301      	adds	r3, #1
uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
 80830a8:	460f      	mov	r7, r1
  if (_sck == -1)
 80830aa:	d106      	bne.n	80830ba <_ZN15Adafruit_LIS3DH7spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
 80830ac:	f7ff ffd4 	bl	8083058 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 80830b0:	4639      	mov	r1, r7
    if (digitalRead(_miso))
      reply |= 1;
  }
  return reply;
  #endif
}
 80830b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80830b6:	f001 bd3f 	b.w	8084b38 <_ZN8SPIClass8transferEh>
  uint8_t reply = 0;
 80830ba:	2400      	movs	r4, #0
  for (int i=7; i>=0; i--) {
 80830bc:	2607      	movs	r6, #7
    digitalWrite(_mosi, x & (1<<i));
 80830be:	f04f 0801 	mov.w	r8, #1
    digitalWrite(_sck, LOW);
 80830c2:	f995 0020 	ldrsb.w	r0, [r5, #32]
 80830c6:	2100      	movs	r1, #0
 80830c8:	b280      	uxth	r0, r0
 80830ca:	f004 fca4 	bl	8087a16 <digitalWrite>
    digitalWrite(_mosi, x & (1<<i));
 80830ce:	f995 001e 	ldrsb.w	r0, [r5, #30]
 80830d2:	fa08 f106 	lsl.w	r1, r8, r6
 80830d6:	4039      	ands	r1, r7
 80830d8:	b280      	uxth	r0, r0
 80830da:	f004 fc9c 	bl	8087a16 <digitalWrite>
    digitalWrite(_sck, HIGH);
 80830de:	f995 0020 	ldrsb.w	r0, [r5, #32]
 80830e2:	2101      	movs	r1, #1
 80830e4:	b280      	uxth	r0, r0
 80830e6:	f004 fc96 	bl	8087a16 <digitalWrite>
    if (digitalRead(_miso))
 80830ea:	f995 001f 	ldrsb.w	r0, [r5, #31]
    reply <<= 1;
 80830ee:	0064      	lsls	r4, r4, #1
    if (digitalRead(_miso))
 80830f0:	b280      	uxth	r0, r0
    reply <<= 1;
 80830f2:	b2e4      	uxtb	r4, r4
    if (digitalRead(_miso))
 80830f4:	f004 fca8 	bl	8087a48 <digitalRead>
 80830f8:	b108      	cbz	r0, 80830fe <_ZN15Adafruit_LIS3DH7spixferEh+0x62>
      reply |= 1;
 80830fa:	f044 0401 	orr.w	r4, r4, #1
  for (int i=7; i>=0; i--) {
 80830fe:	3e01      	subs	r6, #1
 8083100:	d2df      	bcs.n	80830c2 <_ZN15Adafruit_LIS3DH7spixferEh+0x26>
}
 8083102:	4620      	mov	r0, r4
 8083104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08083108 <_ZN15Adafruit_LIS3DH16beginTransactionEv>:
  #endif
  return value;
}


void Adafruit_LIS3DH::beginTransaction() {
 8083108:	b508      	push	{r3, lr}
        instance().setBitOrder(order);
 808310a:	f7ff ffa5 	bl	8083058 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 808310e:	2101      	movs	r1, #1
 8083110:	f001 fcb3 	bl	8084a7a <_ZN8SPIClass11setBitOrderEh>
        return instance().setClockSpeed(value, scale);
 8083114:	f7ff ffa0 	bl	8083058 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 8083118:	4905      	ldr	r1, [pc, #20]	; (8083130 <_ZN15Adafruit_LIS3DH16beginTransactionEv+0x28>)
 808311a:	2201      	movs	r2, #1
 808311c:	f001 fce0 	bl	8084ae0 <_ZN8SPIClass13setClockSpeedEjj>
        instance().setDataMode(mode);
 8083120:	f7ff ff9a 	bl	8083058 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    SPI.setClockSpeed(500000);
    SPI.setDataMode(SPI_MODE0);
#else
  SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
#endif
}
 8083124:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8083128:	2100      	movs	r1, #0
 808312a:	f001 bcb4 	b.w	8084a96 <_ZN8SPIClass11setDataModeEh>
 808312e:	bf00      	nop
 8083130:	0007a120 	.word	0x0007a120

08083134 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>:
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
 8083134:	b570      	push	{r4, r5, r6, lr}
  if (_cs == -1) {
 8083136:	f990 301d 	ldrsb.w	r3, [r0, #29]
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
 808313a:	4604      	mov	r4, r0
  if (_cs == -1) {
 808313c:	3301      	adds	r3, #1
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
 808313e:	460e      	mov	r6, r1
 8083140:	4615      	mov	r5, r2
  if (_cs == -1) {
 8083142:	d116      	bne.n	8083172 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x3e>
    Wire.beginTransmission((uint8_t)_i2caddr);
 8083144:	f004 fd50 	bl	8087be8 <_Z19__fetch_global_Wirev>
 8083148:	7f21      	ldrb	r1, [r4, #28]
 808314a:	f004 f983 	bl	8087454 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
 808314e:	f004 fd4b 	bl	8087be8 <_Z19__fetch_global_Wirev>
 8083152:	6803      	ldr	r3, [r0, #0]
 8083154:	4631      	mov	r1, r6
 8083156:	689b      	ldr	r3, [r3, #8]
 8083158:	4798      	blx	r3
    Wire.write((uint8_t)value);
 808315a:	f004 fd45 	bl	8087be8 <_Z19__fetch_global_Wirev>
 808315e:	6803      	ldr	r3, [r0, #0]
 8083160:	4629      	mov	r1, r5
 8083162:	689b      	ldr	r3, [r3, #8]
 8083164:	4798      	blx	r3
    Wire.endTransmission();
 8083166:	f004 fd3f 	bl	8087be8 <_Z19__fetch_global_Wirev>
}
 808316a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Wire.endTransmission();
 808316e:	f004 b994 	b.w	808749a <_ZN7TwoWire15endTransmissionEv>
	if (_sck == -1)
 8083172:	f990 3020 	ldrsb.w	r3, [r0, #32]
 8083176:	3301      	adds	r3, #1
 8083178:	d101      	bne.n	808317e <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x4a>
	  beginTransaction();
 808317a:	f7ff ffc5 	bl	8083108 <_ZN15Adafruit_LIS3DH16beginTransactionEv>
    digitalWrite(_cs, LOW);
 808317e:	f994 001d 	ldrsb.w	r0, [r4, #29]
 8083182:	2100      	movs	r1, #0
 8083184:	b280      	uxth	r0, r0
 8083186:	f004 fc46 	bl	8087a16 <digitalWrite>
    spixfer(reg & ~0x80); // write, bit 7 low
 808318a:	f006 017f 	and.w	r1, r6, #127	; 0x7f
 808318e:	4620      	mov	r0, r4
 8083190:	f7ff ff84 	bl	808309c <_ZN15Adafruit_LIS3DH7spixferEh>
    spixfer(value);
 8083194:	4629      	mov	r1, r5
 8083196:	4620      	mov	r0, r4
 8083198:	f7ff ff80 	bl	808309c <_ZN15Adafruit_LIS3DH7spixferEh>
    digitalWrite(_cs, HIGH);
 808319c:	f994 001d 	ldrsb.w	r0, [r4, #29]
 80831a0:	2101      	movs	r1, #1
}
 80831a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    digitalWrite(_cs, HIGH);
 80831a6:	b280      	uxth	r0, r0
 80831a8:	f004 bc35 	b.w	8087a16 <digitalWrite>

080831ac <_ZN15Adafruit_LIS3DH13readRegister8Eh>:
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
 80831ac:	b538      	push	{r3, r4, r5, lr}
  if (_cs == -1) {
 80831ae:	f990 301d 	ldrsb.w	r3, [r0, #29]
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
 80831b2:	4604      	mov	r4, r0
  if (_cs == -1) {
 80831b4:	3301      	adds	r3, #1
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
 80831b6:	460d      	mov	r5, r1
  if (_cs == -1) {
 80831b8:	d11d      	bne.n	80831f6 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x4a>
    Wire.beginTransmission(_i2caddr);
 80831ba:	f004 fd15 	bl	8087be8 <_Z19__fetch_global_Wirev>
 80831be:	f994 101c 	ldrsb.w	r1, [r4, #28]
 80831c2:	f004 f94b 	bl	808745c <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((uint8_t)reg);
 80831c6:	f004 fd0f 	bl	8087be8 <_Z19__fetch_global_Wirev>
 80831ca:	6803      	ldr	r3, [r0, #0]
 80831cc:	4629      	mov	r1, r5
 80831ce:	689b      	ldr	r3, [r3, #8]
 80831d0:	4798      	blx	r3
    Wire.endTransmission();
 80831d2:	f004 fd09 	bl	8087be8 <_Z19__fetch_global_Wirev>
 80831d6:	f004 f960 	bl	808749a <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(_i2caddr, 1);
 80831da:	f004 fd05 	bl	8087be8 <_Z19__fetch_global_Wirev>
 80831de:	2201      	movs	r2, #1
 80831e0:	7f21      	ldrb	r1, [r4, #28]
 80831e2:	f004 f934 	bl	808744e <_ZN7TwoWire11requestFromEhj>
    value = Wire.read();
 80831e6:	f004 fcff 	bl	8087be8 <_Z19__fetch_global_Wirev>
 80831ea:	6803      	ldr	r3, [r0, #0]
 80831ec:	695b      	ldr	r3, [r3, #20]
 80831ee:	4798      	blx	r3
 80831f0:	b2c5      	uxtb	r5, r0
}
 80831f2:	4628      	mov	r0, r5
 80831f4:	bd38      	pop	{r3, r4, r5, pc}
	if (_sck == -1)
 80831f6:	f990 3020 	ldrsb.w	r3, [r0, #32]
 80831fa:	3301      	adds	r3, #1
 80831fc:	d101      	bne.n	8083202 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x56>
	  beginTransaction();
 80831fe:	f7ff ff83 	bl	8083108 <_ZN15Adafruit_LIS3DH16beginTransactionEv>
	digitalWrite(_cs, LOW);
 8083202:	f994 001d 	ldrsb.w	r0, [r4, #29]
 8083206:	2100      	movs	r1, #0
 8083208:	b280      	uxth	r0, r0
 808320a:	f004 fc04 	bl	8087a16 <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
 808320e:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 8083212:	4620      	mov	r0, r4
 8083214:	f7ff ff42 	bl	808309c <_ZN15Adafruit_LIS3DH7spixferEh>
    value = spixfer(0);
 8083218:	2100      	movs	r1, #0
 808321a:	4620      	mov	r0, r4
 808321c:	f7ff ff3e 	bl	808309c <_ZN15Adafruit_LIS3DH7spixferEh>
 8083220:	4605      	mov	r5, r0
    digitalWrite(_cs, HIGH);
 8083222:	f994 001d 	ldrsb.w	r0, [r4, #29]
 8083226:	2101      	movs	r1, #1
 8083228:	b280      	uxth	r0, r0
 808322a:	f004 fbf4 	bl	8087a16 <digitalWrite>
    if (_sck == -1)
 808322e:	e7e0      	b.n	80831f2 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x46>

08083230 <_ZN15Adafruit_LIS3DH8setRangeE14lis3dh_range_t>:
{
 8083230:	b538      	push	{r3, r4, r5, lr}
 8083232:	460d      	mov	r5, r1
  uint8_t r = readRegister8(LIS3DH_REG_CTRL4);
 8083234:	2123      	movs	r1, #35	; 0x23
{
 8083236:	4604      	mov	r4, r0
  uint8_t r = readRegister8(LIS3DH_REG_CTRL4);
 8083238:	f7ff ffb8 	bl	80831ac <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  r &= ~(0x30);
 808323c:	f020 0230 	bic.w	r2, r0, #48	; 0x30
  r |= range << 4;
 8083240:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL4, r);
 8083244:	4620      	mov	r0, r4
}
 8083246:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeRegister8(LIS3DH_REG_CTRL4, r);
 808324a:	2123      	movs	r1, #35	; 0x23
 808324c:	b2d2      	uxtb	r2, r2
 808324e:	f7ff bf71 	b.w	8083134 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

08083252 <_ZN15Adafruit_LIS3DH8getRangeEv>:
  return (lis3dh_range_t)((readRegister8(LIS3DH_REG_CTRL4) >> 4) & 0x03);
 8083252:	2123      	movs	r1, #35	; 0x23
{
 8083254:	b508      	push	{r3, lr}
  return (lis3dh_range_t)((readRegister8(LIS3DH_REG_CTRL4) >> 4) & 0x03);
 8083256:	f7ff ffa9 	bl	80831ac <_ZN15Adafruit_LIS3DH13readRegister8Eh>
}
 808325a:	f3c0 1001 	ubfx	r0, r0, #4, #2
 808325e:	bd08      	pop	{r3, pc}

08083260 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>:
{
 8083260:	b538      	push	{r3, r4, r5, lr}
 8083262:	460d      	mov	r5, r1
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
 8083264:	2120      	movs	r1, #32
{
 8083266:	4604      	mov	r4, r0
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
 8083268:	f7ff ffa0 	bl	80831ac <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  ctl1 &= ~(0xF0); // mask off bits
 808326c:	f000 020f 	and.w	r2, r0, #15
  ctl1 |= (dataRate << 4);
 8083270:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
 8083274:	4620      	mov	r0, r4
}
 8083276:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
 808327a:	2120      	movs	r1, #32
 808327c:	b2d2      	uxtb	r2, r2
 808327e:	f7ff bf59 	b.w	8083134 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

08083282 <_ZN15Adafruit_LIS3DH5beginEh>:
bool Adafruit_LIS3DH::begin(uint8_t i2caddr) {
 8083282:	b510      	push	{r4, lr}
 8083284:	4604      	mov	r4, r0
  _i2caddr = i2caddr;
 8083286:	7701      	strb	r1, [r0, #28]
  if (_cs == -1) {
 8083288:	f990 001d 	ldrsb.w	r0, [r0, #29]
 808328c:	1c42      	adds	r2, r0, #1
 808328e:	d123      	bne.n	80832d8 <_ZN15Adafruit_LIS3DH5beginEh+0x56>
    Wire.begin();
 8083290:	f004 fcaa 	bl	8087be8 <_Z19__fetch_global_Wirev>
 8083294:	f004 f8ac 	bl	80873f0 <_ZN7TwoWire5beginEv>
  uint8_t deviceid = readRegister8(LIS3DH_REG_WHOAMI);
 8083298:	210f      	movs	r1, #15
 808329a:	4620      	mov	r0, r4
 808329c:	f7ff ff86 	bl	80831ac <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  if (deviceid != 0x33)
 80832a0:	2833      	cmp	r0, #51	; 0x33
 80832a2:	d13d      	bne.n	8083320 <_ZN15Adafruit_LIS3DH5beginEh+0x9e>
  writeRegister8(LIS3DH_REG_CTRL1, 0x07);
 80832a4:	2207      	movs	r2, #7
 80832a6:	2120      	movs	r1, #32
 80832a8:	4620      	mov	r0, r4
 80832aa:	f7ff ff43 	bl	8083134 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  setDataRate(LIS3DH_DATARATE_400_HZ);
 80832ae:	2107      	movs	r1, #7
 80832b0:	4620      	mov	r0, r4
 80832b2:	f7ff ffd5 	bl	8083260 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>
  writeRegister8(LIS3DH_REG_CTRL4, 0x88);
 80832b6:	2288      	movs	r2, #136	; 0x88
 80832b8:	2123      	movs	r1, #35	; 0x23
 80832ba:	4620      	mov	r0, r4
 80832bc:	f7ff ff3a 	bl	8083134 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_CTRL3, 0x10);
 80832c0:	2210      	movs	r2, #16
 80832c2:	2122      	movs	r1, #34	; 0x22
 80832c4:	4620      	mov	r0, r4
 80832c6:	f7ff ff35 	bl	8083134 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_TEMPCFG, 0x80);
 80832ca:	4620      	mov	r0, r4
 80832cc:	2280      	movs	r2, #128	; 0x80
 80832ce:	211f      	movs	r1, #31
 80832d0:	f7ff ff30 	bl	8083134 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  return true;
 80832d4:	2001      	movs	r0, #1
}
 80832d6:	bd10      	pop	{r4, pc}
    digitalWrite(_cs, HIGH);
 80832d8:	2101      	movs	r1, #1
 80832da:	b280      	uxth	r0, r0
 80832dc:	f004 fb9b 	bl	8087a16 <digitalWrite>
    pinMode(_cs, OUTPUT);
 80832e0:	f994 001d 	ldrsb.w	r0, [r4, #29]
 80832e4:	2101      	movs	r1, #1
 80832e6:	b280      	uxth	r0, r0
 80832e8:	f004 fb84 	bl	80879f4 <pinMode>
    if (_sck == -1) {
 80832ec:	f994 0020 	ldrsb.w	r0, [r4, #32]
 80832f0:	1c43      	adds	r3, r0, #1
 80832f2:	d104      	bne.n	80832fe <_ZN15Adafruit_LIS3DH5beginEh+0x7c>
        instance().begin();
 80832f4:	f7ff feb0 	bl	8083058 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 80832f8:	f001 fbb1 	bl	8084a5e <_ZN8SPIClass5beginEv>
    }
 80832fc:	e7cc      	b.n	8083298 <_ZN15Adafruit_LIS3DH5beginEh+0x16>
      pinMode(_sck, OUTPUT);
 80832fe:	2101      	movs	r1, #1
 8083300:	b280      	uxth	r0, r0
 8083302:	f004 fb77 	bl	80879f4 <pinMode>
      pinMode(_mosi, OUTPUT);
 8083306:	f994 001e 	ldrsb.w	r0, [r4, #30]
 808330a:	2101      	movs	r1, #1
 808330c:	b280      	uxth	r0, r0
 808330e:	f004 fb71 	bl	80879f4 <pinMode>
      pinMode(_miso, INPUT);
 8083312:	f994 001f 	ldrsb.w	r0, [r4, #31]
 8083316:	2100      	movs	r1, #0
 8083318:	b280      	uxth	r0, r0
 808331a:	f004 fb6b 	bl	80879f4 <pinMode>
 808331e:	e7bb      	b.n	8083298 <_ZN15Adafruit_LIS3DH5beginEh+0x16>
    return false;
 8083320:	2000      	movs	r0, #0
 8083322:	e7d8      	b.n	80832d6 <_ZN15Adafruit_LIS3DH5beginEh+0x54>

08083324 <_ZN15Adafruit_LIS3DH4readEv>:
void Adafruit_LIS3DH::read(void) {
 8083324:	b538      	push	{r3, r4, r5, lr}
  if (_cs == -1) {
 8083326:	f990 301d 	ldrsb.w	r3, [r0, #29]
void Adafruit_LIS3DH::read(void) {
 808332a:	4604      	mov	r4, r0
  if (_cs == -1) {
 808332c:	3301      	adds	r3, #1
 808332e:	d16f      	bne.n	8083410 <_ZN15Adafruit_LIS3DH4readEv+0xec>
    Wire.beginTransmission(_i2caddr);
 8083330:	f004 fc5a 	bl	8087be8 <_Z19__fetch_global_Wirev>
 8083334:	f994 101c 	ldrsb.w	r1, [r4, #28]
 8083338:	f004 f890 	bl	808745c <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(LIS3DH_REG_OUT_X_L | 0x80); // 0x80 for autoincrement
 808333c:	f004 fc54 	bl	8087be8 <_Z19__fetch_global_Wirev>
 8083340:	21a8      	movs	r1, #168	; 0xa8
 8083342:	f7ff fe75 	bl	8083030 <_ZN7TwoWire5writeEi>
    Wire.endTransmission();
 8083346:	f004 fc4f 	bl	8087be8 <_Z19__fetch_global_Wirev>
 808334a:	f004 f8a6 	bl	808749a <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(_i2caddr, 6);
 808334e:	f004 fc4b 	bl	8087be8 <_Z19__fetch_global_Wirev>
 8083352:	2206      	movs	r2, #6
 8083354:	7f21      	ldrb	r1, [r4, #28]
 8083356:	f004 f87a 	bl	808744e <_ZN7TwoWire11requestFromEhj>
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
 808335a:	f004 fc45 	bl	8087be8 <_Z19__fetch_global_Wirev>
 808335e:	6803      	ldr	r3, [r0, #0]
 8083360:	4d4f      	ldr	r5, [pc, #316]	; (80834a0 <_ZN15Adafruit_LIS3DH4readEv+0x17c>)
 8083362:	695b      	ldr	r3, [r3, #20]
 8083364:	4798      	blx	r3
 8083366:	80e0      	strh	r0, [r4, #6]
 8083368:	f004 fc3e 	bl	8087be8 <_Z19__fetch_global_Wirev>
 808336c:	6803      	ldr	r3, [r0, #0]
 808336e:	695b      	ldr	r3, [r3, #20]
 8083370:	4798      	blx	r3
 8083372:	88e3      	ldrh	r3, [r4, #6]
 8083374:	ea05 2000 	and.w	r0, r5, r0, lsl #8
 8083378:	4318      	orrs	r0, r3
 808337a:	80e0      	strh	r0, [r4, #6]
    y = Wire.read(); y |= ((uint16_t)Wire.read()) << 8;
 808337c:	f004 fc34 	bl	8087be8 <_Z19__fetch_global_Wirev>
 8083380:	6803      	ldr	r3, [r0, #0]
 8083382:	695b      	ldr	r3, [r3, #20]
 8083384:	4798      	blx	r3
 8083386:	8120      	strh	r0, [r4, #8]
 8083388:	f004 fc2e 	bl	8087be8 <_Z19__fetch_global_Wirev>
 808338c:	6803      	ldr	r3, [r0, #0]
 808338e:	695b      	ldr	r3, [r3, #20]
 8083390:	4798      	blx	r3
 8083392:	8923      	ldrh	r3, [r4, #8]
 8083394:	ea05 2000 	and.w	r0, r5, r0, lsl #8
 8083398:	4318      	orrs	r0, r3
 808339a:	8120      	strh	r0, [r4, #8]
    z = Wire.read(); z |= ((uint16_t)Wire.read()) << 8;
 808339c:	f004 fc24 	bl	8087be8 <_Z19__fetch_global_Wirev>
 80833a0:	6803      	ldr	r3, [r0, #0]
 80833a2:	695b      	ldr	r3, [r3, #20]
 80833a4:	4798      	blx	r3
 80833a6:	8160      	strh	r0, [r4, #10]
 80833a8:	f004 fc1e 	bl	8087be8 <_Z19__fetch_global_Wirev>
 80833ac:	6803      	ldr	r3, [r0, #0]
 80833ae:	695b      	ldr	r3, [r3, #20]
 80833b0:	4798      	blx	r3
 80833b2:	ea05 2500 	and.w	r5, r5, r0, lsl #8
 80833b6:	8960      	ldrh	r0, [r4, #10]
 80833b8:	4305      	orrs	r5, r0
 80833ba:	8165      	strh	r5, [r4, #10]
  uint8_t range = getRange();
 80833bc:	4620      	mov	r0, r4
 80833be:	f7ff ff48 	bl	8083252 <_ZN15Adafruit_LIS3DH8getRangeEv>
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
 80833c2:	2803      	cmp	r0, #3
 80833c4:	d062      	beq.n	808348c <_ZN15Adafruit_LIS3DH4readEv+0x168>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
 80833c6:	2802      	cmp	r0, #2
 80833c8:	d063      	beq.n	8083492 <_ZN15Adafruit_LIS3DH4readEv+0x16e>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
 80833ca:	2801      	cmp	r0, #1
 80833cc:	d064      	beq.n	8083498 <_ZN15Adafruit_LIS3DH4readEv+0x174>
  if (range == LIS3DH_RANGE_2_G) divider = 16380;
 80833ce:	2800      	cmp	r0, #0
 80833d0:	f643 70fc 	movw	r0, #16380	; 0x3ffc
 80833d4:	bf18      	it	ne
 80833d6:	2001      	movne	r0, #1
  x_g = (float)x / divider;
 80833d8:	f005 fb48 	bl	8088a6c <__aeabi_i2f>
 80833dc:	4605      	mov	r5, r0
 80833de:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 80833e2:	f005 fb43 	bl	8088a6c <__aeabi_i2f>
 80833e6:	4629      	mov	r1, r5
 80833e8:	f005 fc48 	bl	8088c7c <__aeabi_fdiv>
 80833ec:	60e0      	str	r0, [r4, #12]
  y_g = (float)y / divider;
 80833ee:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 80833f2:	f005 fb3b 	bl	8088a6c <__aeabi_i2f>
 80833f6:	4629      	mov	r1, r5
 80833f8:	f005 fc40 	bl	8088c7c <__aeabi_fdiv>
 80833fc:	6120      	str	r0, [r4, #16]
  z_g = (float)z / divider;
 80833fe:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
 8083402:	f005 fb33 	bl	8088a6c <__aeabi_i2f>
 8083406:	4629      	mov	r1, r5
 8083408:	f005 fc38 	bl	8088c7c <__aeabi_fdiv>
 808340c:	6160      	str	r0, [r4, #20]
}
 808340e:	bd38      	pop	{r3, r4, r5, pc}
    if (_sck == -1)
 8083410:	f990 3020 	ldrsb.w	r3, [r0, #32]
 8083414:	3301      	adds	r3, #1
 8083416:	d101      	bne.n	808341c <_ZN15Adafruit_LIS3DH4readEv+0xf8>
      beginTransaction();
 8083418:	f7ff fe76 	bl	8083108 <_ZN15Adafruit_LIS3DH16beginTransactionEv>
    digitalWrite(_cs, LOW);
 808341c:	f994 001d 	ldrsb.w	r0, [r4, #29]
 8083420:	2100      	movs	r1, #0
 8083422:	b280      	uxth	r0, r0
 8083424:	f004 faf7 	bl	8087a16 <digitalWrite>
    spixfer(LIS3DH_REG_OUT_X_L | 0x80 | 0x40); // read multiple, bit 7&6 high
 8083428:	21e8      	movs	r1, #232	; 0xe8
 808342a:	4620      	mov	r0, r4
 808342c:	f7ff fe36 	bl	808309c <_ZN15Adafruit_LIS3DH7spixferEh>
    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
 8083430:	21ff      	movs	r1, #255	; 0xff
 8083432:	4620      	mov	r0, r4
 8083434:	f7ff fe32 	bl	808309c <_ZN15Adafruit_LIS3DH7spixferEh>
 8083438:	21ff      	movs	r1, #255	; 0xff
 808343a:	80e0      	strh	r0, [r4, #6]
 808343c:	4620      	mov	r0, r4
 808343e:	f7ff fe2d 	bl	808309c <_ZN15Adafruit_LIS3DH7spixferEh>
 8083442:	88e3      	ldrh	r3, [r4, #6]
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
 8083444:	21ff      	movs	r1, #255	; 0xff
    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
 8083446:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 808344a:	80e3      	strh	r3, [r4, #6]
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
 808344c:	4620      	mov	r0, r4
 808344e:	f7ff fe25 	bl	808309c <_ZN15Adafruit_LIS3DH7spixferEh>
 8083452:	21ff      	movs	r1, #255	; 0xff
 8083454:	8120      	strh	r0, [r4, #8]
 8083456:	4620      	mov	r0, r4
 8083458:	f7ff fe20 	bl	808309c <_ZN15Adafruit_LIS3DH7spixferEh>
 808345c:	8923      	ldrh	r3, [r4, #8]
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
 808345e:	21ff      	movs	r1, #255	; 0xff
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
 8083460:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8083464:	8123      	strh	r3, [r4, #8]
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
 8083466:	4620      	mov	r0, r4
 8083468:	f7ff fe18 	bl	808309c <_ZN15Adafruit_LIS3DH7spixferEh>
 808346c:	21ff      	movs	r1, #255	; 0xff
 808346e:	8160      	strh	r0, [r4, #10]
 8083470:	4620      	mov	r0, r4
 8083472:	f7ff fe13 	bl	808309c <_ZN15Adafruit_LIS3DH7spixferEh>
 8083476:	8963      	ldrh	r3, [r4, #10]
    digitalWrite(_cs, HIGH);
 8083478:	2101      	movs	r1, #1
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
 808347a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    digitalWrite(_cs, HIGH);
 808347e:	f994 001d 	ldrsb.w	r0, [r4, #29]
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
 8083482:	8163      	strh	r3, [r4, #10]
    digitalWrite(_cs, HIGH);
 8083484:	b280      	uxth	r0, r0
 8083486:	f004 fac6 	bl	8087a16 <digitalWrite>
    if (_sck == -1)
 808348a:	e797      	b.n	80833bc <_ZN15Adafruit_LIS3DH4readEv+0x98>
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
 808348c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8083490:	e7a2      	b.n	80833d8 <_ZN15Adafruit_LIS3DH4readEv+0xb4>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
 8083492:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8083496:	e79f      	b.n	80833d8 <_ZN15Adafruit_LIS3DH4readEv+0xb4>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
 8083498:	f641 70fe 	movw	r0, #8190	; 0x1ffe
 808349c:	e79c      	b.n	80833d8 <_ZN15Adafruit_LIS3DH4readEv+0xb4>
 808349e:	bf00      	nop
 80834a0:	00ffff00 	.word	0x00ffff00

080834a4 <_ZN15Adafruit_LIS3DH8getEventEP15sensors_event_t>:
bool Adafruit_LIS3DH::getEvent(sensors_event_t *event) {
 80834a4:	b570      	push	{r4, r5, r6, lr}
 80834a6:	460c      	mov	r4, r1
 80834a8:	4605      	mov	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
 80834aa:	2220      	movs	r2, #32
 80834ac:	2100      	movs	r1, #0
 80834ae:	1d20      	adds	r0, r4, #4
 80834b0:	f005 fd96 	bl	8088fe0 <memset>
  event->version   = sizeof(sensors_event_t);
 80834b4:	2324      	movs	r3, #36	; 0x24
 80834b6:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
 80834b8:	69ab      	ldr	r3, [r5, #24]
  event->type      = SENSOR_TYPE_ACCELEROMETER;
 80834ba:	2601      	movs	r6, #1
  event->sensor_id = _sensorID;
 80834bc:	6063      	str	r3, [r4, #4]
  event->timestamp = 0;
 80834be:	2300      	movs	r3, #0
  read();
 80834c0:	4628      	mov	r0, r5
  event->timestamp = 0;
 80834c2:	6123      	str	r3, [r4, #16]
  event->type      = SENSOR_TYPE_ACCELEROMETER;
 80834c4:	60a6      	str	r6, [r4, #8]
  read();
 80834c6:	f7ff ff2d 	bl	8083324 <_ZN15Adafruit_LIS3DH4readEv>
  event->acceleration.x = x_g;
 80834ca:	68eb      	ldr	r3, [r5, #12]
}
 80834cc:	4630      	mov	r0, r6
  event->acceleration.x = x_g;
 80834ce:	6163      	str	r3, [r4, #20]
  event->acceleration.y = y_g;
 80834d0:	692b      	ldr	r3, [r5, #16]
 80834d2:	61a3      	str	r3, [r4, #24]
  event->acceleration.z = z_g;
 80834d4:	696b      	ldr	r3, [r5, #20]
 80834d6:	61e3      	str	r3, [r4, #28]
}
 80834d8:	bd70      	pop	{r4, r5, r6, pc}

080834da <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>:
    return((m[1]*256)+(m[0]));
}
int32_t
UbloxM8Q_GPS::getLong(uint8_t *m)
{
    return((m[3]*(0xFFFFFF+1))+(m[2]*(0xFFFF+1))+(m[1]*(0xFF+1))+(m[0]));
 80834da:	7883      	ldrb	r3, [r0, #2]
 80834dc:	78c2      	ldrb	r2, [r0, #3]
 80834de:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 80834e2:	7843      	ldrb	r3, [r0, #1]
 80834e4:	7800      	ldrb	r0, [r0, #0]
 80834e6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
}
 80834ea:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 80834ee:	4770      	bx	lr

080834f0 <_ZN12UbloxM8Q_GPS11common_initEv>:
  latitude = longitude = 0.0;
 80834f0:	2200      	movs	r2, #0
  initComplete = false;
 80834f2:	2300      	movs	r3, #0
  latitude = longitude = 0.0;
 80834f4:	6142      	str	r2, [r0, #20]
  hour = minute = seconds = month = day = 0;
 80834f6:	e9c0 3300 	strd	r3, r3, [r0]
  milliseconds = tow = 0;
 80834fa:	e9c0 3302 	strd	r3, r3, [r0, #8]
  horzAcc = vertAcc = 0; // mm
 80834fe:	e9c0 330e 	strd	r3, r3, [r0, #56]	; 0x38
  velN = velE = velD = 0; // north, east, down velocity, mm/s
 8083502:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
 8083506:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
  odoTrip = 0; // odometer since last time commanded reset, m
 808350a:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
  odoAcc = 0; // odometer accuracy, m (1-sigma)
 808350e:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
  dateValid = false;
 8083512:	8203      	strh	r3, [r0, #16]
  latitude = longitude = 0.0;
 8083514:	6182      	str	r2, [r0, #24]
  latitudeDegrees = longitudeDegrees = 0.0;
 8083516:	61c2      	str	r2, [r0, #28]
 8083518:	6202      	str	r2, [r0, #32]
  geoidheight = altitude = 0.0;
 808351a:	6242      	str	r2, [r0, #36]	; 0x24
 808351c:	6282      	str	r2, [r0, #40]	; 0x28
  speed = 0.0; // m/s - its just gSpeed/1000.0
 808351e:	62c2      	str	r2, [r0, #44]	; 0x2c
  headingMot = headingVeh = 0.0; // degrees
 8083520:	6302      	str	r2, [r0, #48]	; 0x30
 8083522:	6342      	str	r2, [r0, #52]	; 0x34
}
 8083524:	4770      	bx	lr

08083526 <_ZN12UbloxM8Q_GPSC1Ev>:
UbloxM8Q_GPS::UbloxM8Q_GPS()
 8083526:	b508      	push	{r3, lr}
    common_init();
 8083528:	f7ff ffe2 	bl	80834f0 <_ZN12UbloxM8Q_GPS11common_initEv>
}
 808352c:	bd08      	pop	{r3, pc}

0808352e <_ZN12UbloxM8Q_GPS5ubxCSEPhS0_S0_>:
    *ck_a = 0, *ck_b = 0;
 808352e:	2000      	movs	r0, #0
{
 8083530:	b530      	push	{r4, r5, lr}
    *ck_a = 0, *ck_b = 0;
 8083532:	7010      	strb	r0, [r2, #0]
 8083534:	7018      	strb	r0, [r3, #0]

  // set when receiver enabled
  bool gpsOn;
  // length is 2 bytes, little endian
  int ubx_length(uint8_t *m) {
        return( ((m[LENGTH_IDX])+(m[LENGTH_IDX+1]*256)));}
 8083536:	794d      	ldrb	r5, [r1, #5]
 8083538:	7908      	ldrb	r0, [r1, #4]
 808353a:	1c4c      	adds	r4, r1, #1
 808353c:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 8083540:	3105      	adds	r1, #5
 8083542:	4408      	add	r0, r1
	*ck_a = *ck_a + msg[i + 2]; // skip the 2 byte header
 8083544:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8083548:	7811      	ldrb	r1, [r2, #0]
    for(i=0;i < length + 4;i++)
 808354a:	42a0      	cmp	r0, r4
	*ck_a = *ck_a + msg[i + 2]; // skip the 2 byte header
 808354c:	4429      	add	r1, r5
 808354e:	b2c9      	uxtb	r1, r1
 8083550:	7011      	strb	r1, [r2, #0]
	*ck_b = *ck_b + *ck_a;
 8083552:	781d      	ldrb	r5, [r3, #0]
 8083554:	4429      	add	r1, r5
 8083556:	7019      	strb	r1, [r3, #0]
    for(i=0;i < length + 4;i++)
 8083558:	d1f4      	bne.n	8083544 <_ZN12UbloxM8Q_GPS5ubxCSEPhS0_S0_+0x16>
}
 808355a:	bd30      	pop	{r4, r5, pc}

0808355c <_ZN12UbloxM8Q_GPS8ubxAddCSEPh>:
{
 808355c:	460a      	mov	r2, r1
 808355e:	b410      	push	{r4}
 8083560:	794b      	ldrb	r3, [r1, #5]
 8083562:	790c      	ldrb	r4, [r1, #4]
 8083564:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    ubxCS(msg, &msg[length+6], &msg[length+7]);
 8083568:	1de3      	adds	r3, r4, #7
 808356a:	3406      	adds	r4, #6
 808356c:	4422      	add	r2, r4
 808356e:	440b      	add	r3, r1
}
 8083570:	bc10      	pop	{r4}
    ubxCS(msg, &msg[length+6], &msg[length+7]);
 8083572:	f7ff bfdc 	b.w	808352e <_ZN12UbloxM8Q_GPS5ubxCSEPhS0_S0_>
	...

08083578 <_ZN12UbloxM8Q_GPS7showUbxEPh>:
{
 8083578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808357a:	460d      	mov	r5, r1
    for (i = 0; i < length + 8; i++){
 808357c:	2600      	movs	r6, #0
 808357e:	794b      	ldrb	r3, [r1, #5]
 8083580:	790c      	ldrb	r4, [r1, #4]
	Serial.print(msg[i], HEX); Serial.print(",");
 8083582:	4f0c      	ldr	r7, [pc, #48]	; (80835b4 <_ZN12UbloxM8Q_GPS7showUbxEPh+0x3c>)
 8083584:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    for (i = 0; i < length + 8; i++){
 8083588:	3407      	adds	r4, #7
	Serial.print(msg[i], HEX); Serial.print(",");
 808358a:	f003 fd15 	bl	8086fb8 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
 808358e:	5da9      	ldrb	r1, [r5, r6]
 8083590:	2210      	movs	r2, #16
 8083592:	f001 fd9e 	bl	80850d2 <_ZN5Print11printNumberEmh>
    for (i = 0; i < length + 8; i++){
 8083596:	3601      	adds	r6, #1
	Serial.print(msg[i], HEX); Serial.print(",");
 8083598:	f003 fd0e 	bl	8086fb8 <_Z16_fetch_usbserialv>
 808359c:	4639      	mov	r1, r7
 808359e:	f001 fd7b 	bl	8085098 <_ZN5Print5printEPKc>
    for (i = 0; i < length + 8; i++){
 80835a2:	42b4      	cmp	r4, r6
 80835a4:	daf1      	bge.n	808358a <_ZN12UbloxM8Q_GPS7showUbxEPh+0x12>
    Serial.println(" ");
 80835a6:	f003 fd07 	bl	8086fb8 <_Z16_fetch_usbserialv>
}
 80835aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Serial.println(" ");
 80835ae:	4902      	ldr	r1, [pc, #8]	; (80835b8 <_ZN12UbloxM8Q_GPS7showUbxEPh+0x40>)
 80835b0:	f001 bd85 	b.w	80850be <_ZN5Print7printlnEPKc>
 80835b4:	08089ab4 	.word	0x08089ab4
 80835b8:	08089a89 	.word	0x08089a89

080835bc <_ZN12UbloxM8Q_GPS8getULongEPh>:
uint32_t 
UbloxM8Q_GPS::getULong(uint8_t *m)
{
    return((m[3]*(0xFFFFFF+1))+(m[2]*(0xFFFF+1))+(m[1]*(0xFF+1))+(m[0]));
 80835bc:	78cb      	ldrb	r3, [r1, #3]
 80835be:	7888      	ldrb	r0, [r1, #2]
 80835c0:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 80835c4:	784b      	ldrb	r3, [r1, #1]
 80835c6:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 80835ca:	7808      	ldrb	r0, [r1, #0]
}
 80835cc:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 80835d0:	4770      	bx	lr
 80835d2:	0000      	movs	r0, r0
 80835d4:	0000      	movs	r0, r0
	...

080835d8 <_ZN12UbloxM8Q_GPS11parsePOSLLHEPh>:
{
 80835d8:	b538      	push	{r3, r4, r5, lr}
 80835da:	4604      	mov	r4, r0
       ((float) getLong(&data[4])) * 0.0000001;
 80835dc:	f101 000a 	add.w	r0, r1, #10
{
 80835e0:	460d      	mov	r5, r1
       ((float) getLong(&data[4])) * 0.0000001;
 80835e2:	f7ff ff7a 	bl	80834da <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
 80835e6:	f005 fa41 	bl	8088a6c <__aeabi_i2f>
 80835ea:	f004 fde5 	bl	80881b8 <__aeabi_f2d>
 80835ee:	a31c      	add	r3, pc, #112	; (adr r3, 8083660 <_ZN12UbloxM8Q_GPS11parsePOSLLHEPh+0x88>)
 80835f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80835f4:	f004 fe38 	bl	8088268 <__aeabi_dmul>
 80835f8:	f005 f92e 	bl	8088858 <__aeabi_d2f>
    longitudeDegrees =
 80835fc:	6220      	str	r0, [r4, #32]
    longitude =              // Longitude, deg
 80835fe:	61a0      	str	r0, [r4, #24]
       ((float) getLong(&data[8])) * 0.0000001;
 8083600:	f105 000e 	add.w	r0, r5, #14
 8083604:	f7ff ff69 	bl	80834da <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
 8083608:	f005 fa30 	bl	8088a6c <__aeabi_i2f>
 808360c:	f004 fdd4 	bl	80881b8 <__aeabi_f2d>
 8083610:	a313      	add	r3, pc, #76	; (adr r3, 8083660 <_ZN12UbloxM8Q_GPS11parsePOSLLHEPh+0x88>)
 8083612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8083616:	f004 fe27 	bl	8088268 <__aeabi_dmul>
 808361a:	f005 f91d 	bl	8088858 <__aeabi_d2f>
    latitudeDegrees =
 808361e:	61e0      	str	r0, [r4, #28]
    latitude =              // Latitude, deg
 8083620:	6160      	str	r0, [r4, #20]
       (float)getLong(&data[12]);  // WGS84 unless user altered. See ublox spec.
 8083622:	f105 0012 	add.w	r0, r5, #18
 8083626:	f7ff ff58 	bl	80834da <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
 808362a:	f005 fa1f 	bl	8088a6c <__aeabi_i2f>
       (float)getULong(&data[16]);
 808362e:	f105 0116 	add.w	r1, r5, #22
       (float)getLong(&data[12]);  // WGS84 unless user altered. See ublox spec.
 8083632:	6260      	str	r0, [r4, #36]	; 0x24
       (float)getULong(&data[16]);
 8083634:	4620      	mov	r0, r4
 8083636:	f7ff ffc1 	bl	80835bc <_ZN12UbloxM8Q_GPS8getULongEPh>
 808363a:	f005 fa13 	bl	8088a64 <__aeabi_ui2f>
       getULong(&data[20]);
 808363e:	f105 011a 	add.w	r1, r5, #26
       (float)getULong(&data[16]);
 8083642:	62a0      	str	r0, [r4, #40]	; 0x28
       getULong(&data[20]);
 8083644:	4620      	mov	r0, r4
 8083646:	f7ff ffb9 	bl	80835bc <_ZN12UbloxM8Q_GPS8getULongEPh>
       getULong(&data[24]);
 808364a:	f105 011e 	add.w	r1, r5, #30
    horzAcc =                // Horizontal Accuracy estimate, mm
 808364e:	63e0      	str	r0, [r4, #60]	; 0x3c
       getULong(&data[24]);
 8083650:	4620      	mov	r0, r4
 8083652:	f7ff ffb3 	bl	80835bc <_ZN12UbloxM8Q_GPS8getULongEPh>
    vertAcc =                // Vertical Accuracy extimate, mm
 8083656:	6420      	str	r0, [r4, #64]	; 0x40
}
 8083658:	bd38      	pop	{r3, r4, r5, pc}
 808365a:	bf00      	nop
 808365c:	f3af 8000 	nop.w
 8083660:	9abcaf48 	.word	0x9abcaf48
 8083664:	3e7ad7f2 	.word	0x3e7ad7f2

08083668 <_ZN12UbloxM8Q_GPS8parsePVTEPh>:
{
 8083668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808366a:	460d      	mov	r5, r1
    tow = getULong(&data[0]);
 808366c:	3106      	adds	r1, #6
{
 808366e:	4604      	mov	r4, r0
    tow = getULong(&data[0]);
 8083670:	f7ff ffa4 	bl	80835bc <_ZN12UbloxM8Q_GPS8getULongEPh>
 8083674:	60e0      	str	r0, [r4, #12]
    if ((data[21] & 0x01) == 0){
 8083676:	7eeb      	ldrb	r3, [r5, #27]
 8083678:	07db      	lsls	r3, r3, #31
 808367a:	f140 80af 	bpl.w	80837dc <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x174>
    uint8_t flags = data[11];
 808367e:	7c6b      	ldrb	r3, [r5, #17]
    if ( flags & 0x01){
 8083680:	f013 0201 	ands.w	r2, r3, #1
 8083684:	f000 80ab 	beq.w	80837de <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x176>
	dateValid = true;
 8083688:	2201      	movs	r2, #1
 808368a:	7422      	strb	r2, [r4, #16]
    return((m[1]*256)+(m[0]));
 808368c:	7ae9      	ldrb	r1, [r5, #11]
 808368e:	7aaa      	ldrb	r2, [r5, #10]
 8083690:	eb02 2201 	add.w	r2, r2, r1, lsl #8
	year = getUInt(&data[4]);  // UTC
 8083694:	80e2      	strh	r2, [r4, #6]
	month = data[6];
 8083696:	7b2a      	ldrb	r2, [r5, #12]
 8083698:	7122      	strb	r2, [r4, #4]
	day = data[7];
 808369a:	7b6a      	ldrb	r2, [r5, #13]
 808369c:	7162      	strb	r2, [r4, #5]
    if ( flags & 0x02){
 808369e:	f013 0302 	ands.w	r3, r3, #2
 80836a2:	f000 809e 	beq.w	80837e2 <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x17a>
	timeValid = true;
 80836a6:	2301      	movs	r3, #1
 80836a8:	7463      	strb	r3, [r4, #17]
	hour = data[8];
 80836aa:	7bab      	ldrb	r3, [r5, #14]
 80836ac:	7063      	strb	r3, [r4, #1]
	minute = data[9];
 80836ae:	7beb      	ldrb	r3, [r5, #15]
 80836b0:	70a3      	strb	r3, [r4, #2]
	seconds = data[10];
 80836b2:	7c2b      	ldrb	r3, [r5, #16]
 80836b4:	70e3      	strb	r3, [r4, #3]
    int32_t nanoseconds = getLong(&data[16]);
 80836b6:	f105 0016 	add.w	r0, r5, #22
 80836ba:	f7ff ff0e 	bl	80834da <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
    if (nanoseconds > 0){
 80836be:	2800      	cmp	r0, #0
        milliseconds = nanoseconds/1000;
 80836c0:	bfca      	itet	gt
 80836c2:	f44f 737a 	movgt.w	r3, #1000	; 0x3e8
        milliseconds = 0;
 80836c6:	2000      	movle	r0, #0
        milliseconds = nanoseconds/1000;
 80836c8:	fb90 f0f3 	sdivgt	r0, r0, r3
 80836cc:	60a0      	str	r0, [r4, #8]
    fixquality = data[20];
 80836ce:	7eab      	ldrb	r3, [r5, #26]
          ((float) getLong(&data[24]))*0.0000001;
 80836d0:	f105 001e 	add.w	r0, r5, #30
    fixquality = data[20];
 80836d4:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    fix =  ((fixquality == 3) || (fixquality == 2));
 80836d8:	3b02      	subs	r3, #2
 80836da:	2b01      	cmp	r3, #1
 80836dc:	bf8c      	ite	hi
 80836de:	2300      	movhi	r3, #0
 80836e0:	2301      	movls	r3, #1
 80836e2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    satellites = data[23];
 80836e6:	7f6b      	ldrb	r3, [r5, #29]
        (float) (getLong(&data[64])/100000.0);
 80836e8:	f105 0746 	add.w	r7, r5, #70	; 0x46
    satellites = data[23];
 80836ec:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
          ((float) getLong(&data[24]))*0.0000001;
 80836f0:	f7ff fef3 	bl	80834da <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
 80836f4:	f005 f9ba 	bl	8088a6c <__aeabi_i2f>
 80836f8:	f004 fd5e 	bl	80881b8 <__aeabi_f2d>
 80836fc:	a33a      	add	r3, pc, #232	; (adr r3, 80837e8 <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x180>)
 80836fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8083702:	f004 fdb1 	bl	8088268 <__aeabi_dmul>
 8083706:	f005 f8a7 	bl	8088858 <__aeabi_d2f>
    longitudeDegrees =
 808370a:	6220      	str	r0, [r4, #32]
    longitude =              // Longitude, deg
 808370c:	61a0      	str	r0, [r4, #24]
       ((float) getLong(&data[28]))*0.0000001;
 808370e:	f105 0022 	add.w	r0, r5, #34	; 0x22
 8083712:	f7ff fee2 	bl	80834da <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
 8083716:	f005 f9a9 	bl	8088a6c <__aeabi_i2f>
 808371a:	f004 fd4d 	bl	80881b8 <__aeabi_f2d>
 808371e:	a332      	add	r3, pc, #200	; (adr r3, 80837e8 <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x180>)
 8083720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8083724:	f004 fda0 	bl	8088268 <__aeabi_dmul>
 8083728:	f005 f896 	bl	8088858 <__aeabi_d2f>
    latitudeDegrees =
 808372c:	61e0      	str	r0, [r4, #28]
    latitude =              // Latitude, deg
 808372e:	6160      	str	r0, [r4, #20]
       (float)getLong(&data[32]); // WGS84 unless user altered. See ublox spec.
 8083730:	f105 0026 	add.w	r0, r5, #38	; 0x26
 8083734:	f7ff fed1 	bl	80834da <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
 8083738:	f005 f998 	bl	8088a6c <__aeabi_i2f>
       (float)getULong(&data[36]);
 808373c:	f105 012a 	add.w	r1, r5, #42	; 0x2a
       (float)getLong(&data[32]); // WGS84 unless user altered. See ublox spec.
 8083740:	6260      	str	r0, [r4, #36]	; 0x24
       (float)getULong(&data[36]);
 8083742:	4620      	mov	r0, r4
 8083744:	f7ff ff3a 	bl	80835bc <_ZN12UbloxM8Q_GPS8getULongEPh>
 8083748:	f005 f98c 	bl	8088a64 <__aeabi_ui2f>
       getULong(&data[40]);
 808374c:	f105 012e 	add.w	r1, r5, #46	; 0x2e
       (float)getULong(&data[36]);
 8083750:	62a0      	str	r0, [r4, #40]	; 0x28
       getULong(&data[40]);
 8083752:	4620      	mov	r0, r4
 8083754:	f7ff ff32 	bl	80835bc <_ZN12UbloxM8Q_GPS8getULongEPh>
       getULong(&data[44]);
 8083758:	f105 0132 	add.w	r1, r5, #50	; 0x32
    horzAcc =                // Horizontal Accuracy estimate, mm
 808375c:	63e0      	str	r0, [r4, #60]	; 0x3c
       getULong(&data[44]);
 808375e:	4620      	mov	r0, r4
 8083760:	f7ff ff2c 	bl	80835bc <_ZN12UbloxM8Q_GPS8getULongEPh>
    vertAcc =                // Vertical Accuracy extimate, mm
 8083764:	6420      	str	r0, [r4, #64]	; 0x40
        getLong(&data[48]);
 8083766:	f105 0036 	add.w	r0, r5, #54	; 0x36
 808376a:	f7ff feb6 	bl	80834da <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
    velN =                   // North velocity, mm/s
 808376e:	6460      	str	r0, [r4, #68]	; 0x44
        getLong(&data[52]);
 8083770:	f105 003a 	add.w	r0, r5, #58	; 0x3a
 8083774:	f7ff feb1 	bl	80834da <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
    velE =                   // East velocity, mm/s
 8083778:	64a0      	str	r0, [r4, #72]	; 0x48
        getLong(&data[56]);
 808377a:	f105 003e 	add.w	r0, r5, #62	; 0x3e
 808377e:	f7ff feac 	bl	80834da <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
    velD =                   // Down velocity, mm/s
 8083782:	64e0      	str	r0, [r4, #76]	; 0x4c
        getLong(&data[60]);
 8083784:	f105 0042 	add.w	r0, r5, #66	; 0x42
 8083788:	f7ff fea7 	bl	80834da <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
 808378c:	4606      	mov	r6, r0
    gSpeed =                   // Ground speed, mm/s
 808378e:	6520      	str	r0, [r4, #80]	; 0x50
        (float) (getLong(&data[64])/100000.0);
 8083790:	4638      	mov	r0, r7
 8083792:	f7ff fea2 	bl	80834da <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
 8083796:	f004 fcfd 	bl	8088194 <__aeabi_i2d>
 808379a:	a315      	add	r3, pc, #84	; (adr r3, 80837f0 <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x188>)
 808379c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80837a0:	f004 fe8c 	bl	80884bc <__aeabi_ddiv>
 80837a4:	f005 f858 	bl	8088858 <__aeabi_d2f>
 80837a8:	6320      	str	r0, [r4, #48]	; 0x30
        (float) (getLong(&data[64])/100000.0);
 80837aa:	4638      	mov	r0, r7
 80837ac:	f7ff fe95 	bl	80834da <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
 80837b0:	f004 fcf0 	bl	8088194 <__aeabi_i2d>
 80837b4:	a30e      	add	r3, pc, #56	; (adr r3, 80837f0 <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x188>)
 80837b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80837ba:	f004 fe7f 	bl	80884bc <__aeabi_ddiv>
 80837be:	f005 f84b 	bl	8088858 <__aeabi_d2f>
 80837c2:	6360      	str	r0, [r4, #52]	; 0x34
    if (data[21] & 0x20){
 80837c4:	7eeb      	ldrb	r3, [r5, #27]
    speed = ((float)gSpeed/1000.0); // from integer mm/s to float m/s
 80837c6:	4630      	mov	r0, r6
    if (data[21] & 0x20){
 80837c8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80837cc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    speed = ((float)gSpeed/1000.0); // from integer mm/s to float m/s
 80837d0:	f005 f94c 	bl	8088a6c <__aeabi_i2f>
 80837d4:	4908      	ldr	r1, [pc, #32]	; (80837f8 <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x190>)
 80837d6:	f005 fa51 	bl	8088c7c <__aeabi_fdiv>
 80837da:	62e0      	str	r0, [r4, #44]	; 0x2c
}
 80837dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	dateValid = false;
 80837de:	7422      	strb	r2, [r4, #16]
 80837e0:	e75d      	b.n	808369e <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x36>
	timeValid = false;
 80837e2:	7463      	strb	r3, [r4, #17]
 80837e4:	e767      	b.n	80836b6 <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x4e>
 80837e6:	bf00      	nop
 80837e8:	9abcaf48 	.word	0x9abcaf48
 80837ec:	3e7ad7f2 	.word	0x3e7ad7f2
 80837f0:	00000000 	.word	0x00000000
 80837f4:	40f86a00 	.word	0x40f86a00
 80837f8:	447a0000 	.word	0x447a0000

080837fc <_ZN12UbloxM8Q_GPS8parseODOEPh>:
{
 80837fc:	b510      	push	{r4, lr}
 80837fe:	460c      	mov	r4, r1
    odoTrip = getULong(&data[8]); // since reset, m
 8083800:	310e      	adds	r1, #14
{
 8083802:	4602      	mov	r2, r0
    odoTrip = getULong(&data[8]); // since reset, m
 8083804:	f7ff feda 	bl	80835bc <_ZN12UbloxM8Q_GPS8getULongEPh>
    odoTotal = getULong(&data[12]); // since power up, m
 8083808:	f104 0112 	add.w	r1, r4, #18
    odoTrip = getULong(&data[8]); // since reset, m
 808380c:	6550      	str	r0, [r2, #84]	; 0x54
    odoTotal = getULong(&data[12]); // since power up, m
 808380e:	4610      	mov	r0, r2
 8083810:	f7ff fed4 	bl	80835bc <_ZN12UbloxM8Q_GPS8getULongEPh>
    odoAcc = getULong(&data[16]); // m 1-sigma
 8083814:	f104 0116 	add.w	r1, r4, #22
    odoTotal = getULong(&data[12]); // since power up, m
 8083818:	6590      	str	r0, [r2, #88]	; 0x58
    odoAcc = getULong(&data[16]); // m 1-sigma
 808381a:	4610      	mov	r0, r2
 808381c:	f7ff fece 	bl	80835bc <_ZN12UbloxM8Q_GPS8getULongEPh>
 8083820:	65d0      	str	r0, [r2, #92]	; 0x5c
}
 8083822:	bd10      	pop	{r4, pc}

08083824 <_ZN12UbloxM8Q_GPS7readVerEv>:
// Used only by UbloxM8Q_GPS.begin() to read the initial report of version
// information from the receiver, write it to Serial, and then turn off
// the NMEA ascii messages.
void
UbloxM8Q_GPS::readVer()
{
 8083824:	b538      	push	{r3, r4, r5, lr}
    int linecnt = 0;
 8083826:	2500      	movs	r5, #0
    char c;
    while (linecnt < 10){
	while (Serial1.available()){
 8083828:	f003 fd4e 	bl	80872c8 <_Z22__fetch_global_Serial1v>
 808382c:	6803      	ldr	r3, [r0, #0]
 808382e:	691b      	ldr	r3, [r3, #16]
 8083830:	4798      	blx	r3
 8083832:	b960      	cbnz	r0, 808384e <_ZN12UbloxM8Q_GPS7readVerEv+0x2a>
    while (linecnt < 10){
 8083834:	2d09      	cmp	r5, #9
 8083836:	ddf7      	ble.n	8083828 <_ZN12UbloxM8Q_GPS7readVerEv+0x4>
		linecnt++;
	    }
	    Serial.print(c);
	} 
    }
    Serial1.print("$PUBX,41,1,3,1,9600,0*16\r\n");  // Turn off nmea
 8083838:	f003 fd46 	bl	80872c8 <_Z22__fetch_global_Serial1v>
 808383c:	490b      	ldr	r1, [pc, #44]	; (808386c <_ZN12UbloxM8Q_GPS7readVerEv+0x48>)
 808383e:	f001 fc2b 	bl	8085098 <_ZN5Print5printEPKc>
    // Must wait for nmea data to rattle out or it gets confused
    // with ubx data.
    delay(2000);
}
 8083842:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    delay(2000);
 8083846:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 808384a:	f002 be75 	b.w	8086538 <delay>
	    c = Serial1.read();
 808384e:	f003 fd3b 	bl	80872c8 <_Z22__fetch_global_Serial1v>
 8083852:	6803      	ldr	r3, [r0, #0]
 8083854:	695b      	ldr	r3, [r3, #20]
 8083856:	4798      	blx	r3
 8083858:	b2c4      	uxtb	r4, r0
	    if ( c == '\n'){
 808385a:	2c0a      	cmp	r4, #10
		linecnt++;
 808385c:	bf08      	it	eq
 808385e:	3501      	addeq	r5, #1
	    Serial.print(c);
 8083860:	f003 fbaa 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8083864:	4621      	mov	r1, r4
 8083866:	f001 fc1b 	bl	80850a0 <_ZN5Print5printEc>
	while (Serial1.available()){
 808386a:	e7dd      	b.n	8083828 <_ZN12UbloxM8Q_GPS7readVerEv+0x4>
 808386c:	08089ab6 	.word	0x08089ab6

08083870 <_ZN12UbloxM8Q_GPS11reportErrorEi9ubxReturn>:

// report error from begin()
void
UbloxM8Q_GPS::reportError(int state, enum ubxReturn ret)
{
 8083870:	b570      	push	{r4, r5, r6, lr}
 8083872:	460c      	mov	r4, r1
 8083874:	4615      	mov	r5, r2
    Serial.print("begin failed, state: ");
 8083876:	f003 fb9f 	bl	8086fb8 <_Z16_fetch_usbserialv>
 808387a:	4911      	ldr	r1, [pc, #68]	; (80838c0 <_ZN12UbloxM8Q_GPS11reportErrorEi9ubxReturn+0x50>)
 808387c:	f001 fc0c 	bl	8085098 <_ZN5Print5printEPKc>
    Serial.print(state);
 8083880:	f003 fb9a 	bl	8086fb8 <_Z16_fetch_usbserialv>
        if (n < 0 && base == 10) {
 8083884:	2c00      	cmp	r4, #0
 8083886:	4606      	mov	r6, r0
 8083888:	da18      	bge.n	80838bc <_ZN12UbloxM8Q_GPS11reportErrorEi9ubxReturn+0x4c>
            t = print('-');
 808388a:	212d      	movs	r1, #45	; 0x2d
 808388c:	f001 fc08 	bl	80850a0 <_ZN5Print5printEc>
            val = -n;
 8083890:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
 8083892:	220a      	movs	r2, #10
 8083894:	4630      	mov	r0, r6
 8083896:	f001 fc1c 	bl	80850d2 <_ZN5Print11printNumberEmh>
    Serial.print(" error: ");
 808389a:	f003 fb8d 	bl	8086fb8 <_Z16_fetch_usbserialv>
 808389e:	4909      	ldr	r1, [pc, #36]	; (80838c4 <_ZN12UbloxM8Q_GPS11reportErrorEi9ubxReturn+0x54>)
 80838a0:	f001 fbfa 	bl	8085098 <_ZN5Print5printEPKc>
    Serial.println(ret);
 80838a4:	f003 fb88 	bl	8086fb8 <_Z16_fetch_usbserialv>
 80838a8:	4604      	mov	r4, r0
 80838aa:	4629      	mov	r1, r5
 80838ac:	220a      	movs	r2, #10
 80838ae:	f001 fc10 	bl	80850d2 <_ZN5Print11printNumberEmh>
        n += println();
 80838b2:	4620      	mov	r0, r4
}
 80838b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80838b8:	f001 bbf5 	b.w	80850a6 <_ZN5Print7printlnEv>
            val = n;
 80838bc:	4621      	mov	r1, r4
 80838be:	e7e8      	b.n	8083892 <_ZN12UbloxM8Q_GPS11reportErrorEi9ubxReturn+0x22>
 80838c0:	08089ad1 	.word	0x08089ad1
 80838c4:	08089ae7 	.word	0x08089ae7

080838c8 <_ZN8AckedMsgC1Ev>:

// AckedMsg methods
AckedMsg::AckedMsg()
{
    for(uint16_t i=0;i<sizeof(ackList)/sizeof(int);i++) {
	ackList[i] = 0;
 80838c8:	2100      	movs	r1, #0
 80838ca:	1f03      	subs	r3, r0, #4
 80838cc:	f100 0224 	add.w	r2, r0, #36	; 0x24
 80838d0:	f843 1f04 	str.w	r1, [r3, #4]!
    for(uint16_t i=0;i<sizeof(ackList)/sizeof(int);i++) {
 80838d4:	4293      	cmp	r3, r2
 80838d6:	d1fb      	bne.n	80838d0 <_ZN8AckedMsgC1Ev+0x8>
    }
}
 80838d8:	4770      	bx	lr

080838da <_ZN8AckedMsg6setAckEi>:
int 
AckedMsg::setAck(int msgType)
{
 80838da:	4602      	mov	r2, r0
 80838dc:	2300      	movs	r3, #0
    for(uint16_t i=0;i<sizeof(ackList)/sizeof(int);i++) {
	if (!ackList[i]){
 80838de:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80838e2:	b910      	cbnz	r0, 80838ea <_ZN8AckedMsg6setAckEi+0x10>
	    ackList[i] = msgType;
 80838e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    return 0;
 80838e8:	4770      	bx	lr
    for(uint16_t i=0;i<sizeof(ackList)/sizeof(int);i++) {
 80838ea:	3301      	adds	r3, #1
 80838ec:	2b0a      	cmp	r3, #10
 80838ee:	d1f6      	bne.n	80838de <_ZN8AckedMsg6setAckEi+0x4>
	}
    }
    return -1;
 80838f0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80838f4:	4770      	bx	lr

080838f6 <_ZN8AckedMsg8clearAckEi>:
void
AckedMsg::clearAck(int msgType)
{
    for(uint16_t i=0;i<sizeof(ackList)/sizeof(int);i++) {
	if (ackList[i] == msgType){
	    ackList[i] = 0;
 80838f6:	2200      	movs	r2, #0
{
 80838f8:	b510      	push	{r4, lr}
 80838fa:	1f03      	subs	r3, r0, #4
 80838fc:	3024      	adds	r0, #36	; 0x24
	if (ackList[i] == msgType){
 80838fe:	f853 4f04 	ldr.w	r4, [r3, #4]!
 8083902:	428c      	cmp	r4, r1
	    ackList[i] = 0;
 8083904:	bf08      	it	eq
 8083906:	601a      	streq	r2, [r3, #0]
    for(uint16_t i=0;i<sizeof(ackList)/sizeof(int);i++) {
 8083908:	4283      	cmp	r3, r0
 808390a:	d1f8      	bne.n	80838fe <_ZN8AckedMsg8clearAckEi+0x8>
	}
    }
}
 808390c:	bd10      	pop	{r4, pc}

0808390e <_ZN8AckedMsg7isAckedEi>:
bool
AckedMsg::isAcked(int msgType)
{
    for(uint16_t i=0;i<sizeof(ackList)/sizeof(int);i++) {
 808390e:	1f03      	subs	r3, r0, #4
 8083910:	3024      	adds	r0, #36	; 0x24
	if (ackList[i] == msgType){
 8083912:	f853 2f04 	ldr.w	r2, [r3, #4]!
 8083916:	428a      	cmp	r2, r1
 8083918:	d003      	beq.n	8083922 <_ZN8AckedMsg7isAckedEi+0x14>
    for(uint16_t i=0;i<sizeof(ackList)/sizeof(int);i++) {
 808391a:	4283      	cmp	r3, r0
 808391c:	d1f9      	bne.n	8083912 <_ZN8AckedMsg7isAckedEi+0x4>
	    return true;
	}
    }
    return false;
 808391e:	2000      	movs	r0, #0
 8083920:	4770      	bx	lr
	    return true;
 8083922:	2001      	movs	r0, #1
}
 8083924:	4770      	bx	lr

08083926 <_ZN5Print7printlnIiLi0EEEjT_i>:
    size_t println(T b, int base = DEC) {
 8083926:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8083928:	4605      	mov	r5, r0
 808392a:	460c      	mov	r4, r1
    if (base == 0) {
 808392c:	4616      	mov	r6, r2
 808392e:	b94a      	cbnz	r2, 8083944 <_ZN5Print7printlnIiLi0EEEjT_i+0x1e>
        return write(n);
 8083930:	6803      	ldr	r3, [r0, #0]
 8083932:	b2c9      	uxtb	r1, r1
 8083934:	689b      	ldr	r3, [r3, #8]
 8083936:	4798      	blx	r3
 8083938:	4607      	mov	r7, r0
        n += println();
 808393a:	4628      	mov	r0, r5
 808393c:	f001 fbb3 	bl	80850a6 <_ZN5Print7printlnEv>
    }
 8083940:	4438      	add	r0, r7
 8083942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n < 0 && base == 10) {
 8083944:	2900      	cmp	r1, #0
 8083946:	da0c      	bge.n	8083962 <_ZN5Print7printlnIiLi0EEEjT_i+0x3c>
 8083948:	2a0a      	cmp	r2, #10
 808394a:	d10a      	bne.n	8083962 <_ZN5Print7printlnIiLi0EEEjT_i+0x3c>
            t = print('-');
 808394c:	212d      	movs	r1, #45	; 0x2d
 808394e:	f001 fba7 	bl	80850a0 <_ZN5Print5printEc>
 8083952:	4607      	mov	r7, r0
            val = -n;
 8083954:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
 8083956:	4628      	mov	r0, r5
 8083958:	b2f2      	uxtb	r2, r6
 808395a:	f001 fbba 	bl	80850d2 <_ZN5Print11printNumberEmh>
 808395e:	4407      	add	r7, r0
 8083960:	e7eb      	b.n	808393a <_ZN5Print7printlnIiLi0EEEjT_i+0x14>
            val = n;
 8083962:	4621      	mov	r1, r4
        size_t t = 0;
 8083964:	2700      	movs	r7, #0
 8083966:	e7f6      	b.n	8083956 <_ZN5Print7printlnIiLi0EEEjT_i+0x30>

08083968 <_ZN12UbloxM8Q_GPS5parseEPhii>:
    switch(type) {
 8083968:	f240 1309 	movw	r3, #265	; 0x109
 808396c:	429a      	cmp	r2, r3
{
 808396e:	b570      	push	{r4, r5, r6, lr}
 8083970:	4606      	mov	r6, r0
 8083972:	460d      	mov	r5, r1
 8083974:	4614      	mov	r4, r2
    switch(type) {
 8083976:	d051      	beq.n	8083a1c <_ZN12UbloxM8Q_GPS5parseEPhii+0xb4>
 8083978:	f5b2 7f85 	cmp.w	r2, #266	; 0x10a
 808397c:	da17      	bge.n	80839ae <_ZN12UbloxM8Q_GPS5parseEPhii+0x46>
 808397e:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 8083982:	d043      	beq.n	8083a0c <_ZN12UbloxM8Q_GPS5parseEPhii+0xa4>
 8083984:	f240 1307 	movw	r3, #263	; 0x107
 8083988:	429a      	cmp	r2, r3
 808398a:	d043      	beq.n	8083a14 <_ZN12UbloxM8Q_GPS5parseEPhii+0xac>
	Serial.print("parse: Unknown type: ");
 808398c:	f003 fb14 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8083990:	4924      	ldr	r1, [pc, #144]	; (8083a24 <_ZN12UbloxM8Q_GPS5parseEPhii+0xbc>)
 8083992:	f001 fb81 	bl	8085098 <_ZN5Print5printEPKc>
	Serial.println(type, HEX);
 8083996:	f003 fb0f 	bl	8086fb8 <_Z16_fetch_usbserialv>
 808399a:	4621      	mov	r1, r4
 808399c:	2210      	movs	r2, #16
 808399e:	f7ff ffc2 	bl	8083926 <_ZN5Print7printlnIiLi0EEEjT_i>
	showUbx(msg);
 80839a2:	4629      	mov	r1, r5
 80839a4:	4630      	mov	r0, r6
}
 80839a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	showUbx(msg);
 80839aa:	f7ff bde5 	b.w	8083578 <_ZN12UbloxM8Q_GPS7showUbxEPh>
    switch(type) {
 80839ae:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 80839b2:	d01b      	beq.n	80839ec <_ZN12UbloxM8Q_GPS5parseEPhii+0x84>
 80839b4:	f240 5301 	movw	r3, #1281	; 0x501
 80839b8:	429a      	cmp	r2, r3
 80839ba:	d1e7      	bne.n	808398c <_ZN12UbloxM8Q_GPS5parseEPhii+0x24>
  // type is the class and id combined
  int ubxMsgType(uint8_t *m) { return((m[CLASS_IDX]<<8)|(m[ID_IDX]));}
  // For extracting type from the payload of msg, parameter points into payload
  int ubxMsgParm(uint8_t *m) { return((m[0]<<8)|(m[1]));}
 80839bc:	88cc      	ldrh	r4, [r1, #6]
	ackedMsg.setAck(typeAcked);
 80839be:	481a      	ldr	r0, [pc, #104]	; (8083a28 <_ZN12UbloxM8Q_GPS5parseEPhii+0xc0>)
 80839c0:	ba64      	rev16	r4, r4
 80839c2:	b2a4      	uxth	r4, r4
 80839c4:	4621      	mov	r1, r4
 80839c6:	f7ff ff88 	bl	80838da <_ZN8AckedMsg6setAckEi>
	Serial.print("parse: ACK_TYPE: ");
 80839ca:	f003 faf5 	bl	8086fb8 <_Z16_fetch_usbserialv>
 80839ce:	4917      	ldr	r1, [pc, #92]	; (8083a2c <_ZN12UbloxM8Q_GPS5parseEPhii+0xc4>)
 80839d0:	f001 fb62 	bl	8085098 <_ZN5Print5printEPKc>
	Serial.print("message acked: ");
 80839d4:	f003 faf0 	bl	8086fb8 <_Z16_fetch_usbserialv>
 80839d8:	4915      	ldr	r1, [pc, #84]	; (8083a30 <_ZN12UbloxM8Q_GPS5parseEPhii+0xc8>)
	Serial.print("message NAKed: ");
 80839da:	f001 fb5d 	bl	8085098 <_ZN5Print5printEPKc>
	Serial.println(typeAcked, HEX);
 80839de:	f003 faeb 	bl	8086fb8 <_Z16_fetch_usbserialv>
 80839e2:	2210      	movs	r2, #16
 80839e4:	4621      	mov	r1, r4
 80839e6:	f7ff ff9e 	bl	8083926 <_ZN5Print7printlnIiLi0EEEjT_i>
}
 80839ea:	bd70      	pop	{r4, r5, r6, pc}
 80839ec:	88cc      	ldrh	r4, [r1, #6]
	ackedMsg.clearAck(typeAcked);
 80839ee:	480e      	ldr	r0, [pc, #56]	; (8083a28 <_ZN12UbloxM8Q_GPS5parseEPhii+0xc0>)
 80839f0:	ba64      	rev16	r4, r4
 80839f2:	b2a4      	uxth	r4, r4
 80839f4:	4621      	mov	r1, r4
 80839f6:	f7ff ff7e 	bl	80838f6 <_ZN8AckedMsg8clearAckEi>
	Serial.print("parse: NAK_TYPE: ");
 80839fa:	f003 fadd 	bl	8086fb8 <_Z16_fetch_usbserialv>
 80839fe:	490d      	ldr	r1, [pc, #52]	; (8083a34 <_ZN12UbloxM8Q_GPS5parseEPhii+0xcc>)
 8083a00:	f001 fb4a 	bl	8085098 <_ZN5Print5printEPKc>
	Serial.print("message NAKed: ");
 8083a04:	f003 fad8 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8083a08:	490b      	ldr	r1, [pc, #44]	; (8083a38 <_ZN12UbloxM8Q_GPS5parseEPhii+0xd0>)
 8083a0a:	e7e6      	b.n	80839da <_ZN12UbloxM8Q_GPS5parseEPhii+0x72>
}
 8083a0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	parsePOSLLH(msg);
 8083a10:	f7ff bde2 	b.w	80835d8 <_ZN12UbloxM8Q_GPS11parsePOSLLHEPh>
}
 8083a14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	parsePVT(msg);
 8083a18:	f7ff be26 	b.w	8083668 <_ZN12UbloxM8Q_GPS8parsePVTEPh>
}
 8083a1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	parseODO(msg);
 8083a20:	f7ff beec 	b.w	80837fc <_ZN12UbloxM8Q_GPS8parseODOEPh>
 8083a24:	08089b34 	.word	0x08089b34
 8083a28:	20000370 	.word	0x20000370
 8083a2c:	08089af0 	.word	0x08089af0
 8083a30:	08089b02 	.word	0x08089b02
 8083a34:	08089b12 	.word	0x08089b12
 8083a38:	08089b24 	.word	0x08089b24

08083a3c <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_>:
{
 8083a3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    switch (state){
 8083a40:	4e6f      	ldr	r6, [pc, #444]	; (8083c00 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1c4>)
{
 8083a42:	4681      	mov	r9, r0
    switch (state){
 8083a44:	7835      	ldrb	r5, [r6, #0]
{
 8083a46:	460c      	mov	r4, r1
 8083a48:	4690      	mov	r8, r2
 8083a4a:	461f      	mov	r7, r3
 8083a4c:	2d03      	cmp	r5, #3
 8083a4e:	d824      	bhi.n	8083a9a <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x5e>
 8083a50:	e8df f005 	tbb	[pc, r5]
 8083a54:	9b834b02 	.word	0x9b834b02
	if (firstTime){
 8083a58:	4d6a      	ldr	r5, [pc, #424]	; (8083c04 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1c8>)
 8083a5a:	782b      	ldrb	r3, [r5, #0]
 8083a5c:	b12b      	cbz	r3, 8083a6a <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x2e>
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8083a5e:	f000 fc0b 	bl	8084278 <HAL_Timer_Get_Milli_Seconds>
	    startTime = millis();
 8083a62:	4b69      	ldr	r3, [pc, #420]	; (8083c08 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1cc>)
 8083a64:	6018      	str	r0, [r3, #0]
	    firstTime = false;
 8083a66:	2300      	movs	r3, #0
 8083a68:	702b      	strb	r3, [r5, #0]
	if(Serial1.available()){
 8083a6a:	f003 fc2d 	bl	80872c8 <_Z22__fetch_global_Serial1v>
 8083a6e:	6803      	ldr	r3, [r0, #0]
 8083a70:	691b      	ldr	r3, [r3, #16]
 8083a72:	4798      	blx	r3
 8083a74:	b168      	cbz	r0, 8083a92 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x56>
	    msg[0] = Serial1.read();
 8083a76:	f003 fc27 	bl	80872c8 <_Z22__fetch_global_Serial1v>
 8083a7a:	6803      	ldr	r3, [r0, #0]
 8083a7c:	695b      	ldr	r3, [r3, #20]
 8083a7e:	4798      	blx	r3
 8083a80:	b2c0      	uxtb	r0, r0
	    if (msg[0] == 0xb5){
 8083a82:	28b5      	cmp	r0, #181	; 0xb5
	    msg[0] = Serial1.read();
 8083a84:	7020      	strb	r0, [r4, #0]
	    if (msg[0] == 0xb5){
 8083a86:	d10a      	bne.n	8083a9e <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x62>
		i = 1;
 8083a88:	2301      	movs	r3, #1
 8083a8a:	4a60      	ldr	r2, [pc, #384]	; (8083c0c <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1d0>)
		state = ubxLength;
 8083a8c:	7033      	strb	r3, [r6, #0]
		i = 1;
 8083a8e:	6013      	str	r3, [r2, #0]
		firstTime = true;
 8083a90:	702b      	strb	r3, [r5, #0]
 8083a92:	f000 fbf1 	bl	8084278 <HAL_Timer_Get_Milli_Seconds>
	if ((state == waitB5) && ((cur - startTime)> ubxWatchdog)){
 8083a96:	7834      	ldrb	r4, [r6, #0]
 8083a98:	b16c      	cbz	r4, 8083ab6 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x7a>
    switch (state){
 8083a9a:	2501      	movs	r5, #1
 8083a9c:	e051      	b.n	8083b42 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x106>
		Serial.print(">");
 8083a9e:	f003 fa8b 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8083aa2:	495b      	ldr	r1, [pc, #364]	; (8083c10 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1d4>)
 8083aa4:	f001 faf8 	bl	8085098 <_ZN5Print5printEPKc>
		Serial.print(msg[0], HEX);
 8083aa8:	f003 fa86 	bl	8086fb8 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
 8083aac:	2210      	movs	r2, #16
 8083aae:	7821      	ldrb	r1, [r4, #0]
 8083ab0:	f001 fb0f 	bl	80850d2 <_ZN5Print11printNumberEmh>
 8083ab4:	e7ed      	b.n	8083a92 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x56>
	if ((state == waitB5) && ((cur - startTime)> ubxWatchdog)){
 8083ab6:	4b54      	ldr	r3, [pc, #336]	; (8083c08 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1cc>)
 8083ab8:	681b      	ldr	r3, [r3, #0]
 8083aba:	1ac0      	subs	r0, r0, r3
 8083abc:	4b55      	ldr	r3, [pc, #340]	; (8083c14 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1d8>)
 8083abe:	681b      	ldr	r3, [r3, #0]
 8083ac0:	4298      	cmp	r0, r3
 8083ac2:	d9ea      	bls.n	8083a9a <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x5e>
	    Serial.println("Tired of waiting for the GPS. I'm going shut it off and reboot.");
 8083ac4:	f003 fa78 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8083ac8:	4953      	ldr	r1, [pc, #332]	; (8083c18 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1dc>)
 8083aca:	f001 faf8 	bl	80850be <_ZN5Print7printlnEPKc>
	    delay(2000);
 8083ace:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8083ad2:	f002 fd31 	bl	8086538 <delay>
	    digitalWrite(D6,HIGH);
 8083ad6:	2101      	movs	r1, #1
 8083ad8:	2006      	movs	r0, #6
 8083ada:	f003 ff9c 	bl	8087a16 <digitalWrite>
	    delay(2000);
 8083ade:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8083ae2:	f002 fd29 	bl	8086538 <delay>
	    resetFunc();
 8083ae6:	47a0      	blx	r4
 8083ae8:	e7d7      	b.n	8083a9a <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x5e>
	if(Serial1.available()){
 8083aea:	f003 fbed 	bl	80872c8 <_Z22__fetch_global_Serial1v>
 8083aee:	6803      	ldr	r3, [r0, #0]
 8083af0:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8083c0c <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1d0>
 8083af4:	691b      	ldr	r3, [r3, #16]
 8083af6:	4798      	blx	r3
 8083af8:	b150      	cbz	r0, 8083b10 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0xd4>
	    msg[i] = Serial1.read();
 8083afa:	f003 fbe5 	bl	80872c8 <_Z22__fetch_global_Serial1v>
 8083afe:	6803      	ldr	r3, [r0, #0]
 8083b00:	695b      	ldr	r3, [r3, #20]
 8083b02:	4798      	blx	r3
 8083b04:	f8d9 3000 	ldr.w	r3, [r9]
 8083b08:	54e0      	strb	r0, [r4, r3]
	    i++;
 8083b0a:	3301      	adds	r3, #1
 8083b0c:	f8c9 3000 	str.w	r3, [r9]
	if (i == 6){ // read all the header
 8083b10:	f8d9 3000 	ldr.w	r3, [r9]
 8083b14:	2b06      	cmp	r3, #6
 8083b16:	d1c0      	bne.n	8083a9a <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x5e>
        return( ((m[LENGTH_IDX])+(m[LENGTH_IDX+1]*256)));}
 8083b18:	7962      	ldrb	r2, [r4, #5]
 8083b1a:	7923      	ldrb	r3, [r4, #4]
 8083b1c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	    if ( *length > (256 - 8) ){
 8083b20:	2bf8      	cmp	r3, #248	; 0xf8
	    *length = ubx_length(msg);
 8083b22:	603b      	str	r3, [r7, #0]
	    if ( *length > (256 - 8) ){
 8083b24:	dd11      	ble.n	8083b4a <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x10e>
		Serial.print("readUBXmsg bad length: ");
 8083b26:	f003 fa47 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8083b2a:	493c      	ldr	r1, [pc, #240]	; (8083c1c <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1e0>)
 8083b2c:	f001 fab4 	bl	8085098 <_ZN5Print5printEPKc>
		Serial.println(*length);
 8083b30:	f003 fa42 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8083b34:	220a      	movs	r2, #10
 8083b36:	6839      	ldr	r1, [r7, #0]
 8083b38:	f7ff fef5 	bl	8083926 <_ZN5Print7printlnIiLi0EEEjT_i>
		state = waitB5;
 8083b3c:	2300      	movs	r3, #0
		return ubxBAD_LENGTH;
 8083b3e:	2502      	movs	r5, #2
		state = waitB5;
 8083b40:	7033      	strb	r3, [r6, #0]
}
 8083b42:	4628      	mov	r0, r5
 8083b44:	b003      	add	sp, #12
 8083b46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*type = ubxMsgType(msg);
 8083b4a:	8863      	ldrh	r3, [r4, #2]
 8083b4c:	ba5b      	rev16	r3, r3
 8083b4e:	b29b      	uxth	r3, r3
 8083b50:	f8c8 3000 	str.w	r3, [r8]
		state = payload;
 8083b54:	2302      	movs	r3, #2
 8083b56:	7033      	strb	r3, [r6, #0]
 8083b58:	e7f3      	b.n	8083b42 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x106>
	if(Serial1.available()){
 8083b5a:	f003 fbb5 	bl	80872c8 <_Z22__fetch_global_Serial1v>
 8083b5e:	6803      	ldr	r3, [r0, #0]
 8083b60:	4d2a      	ldr	r5, [pc, #168]	; (8083c0c <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1d0>)
 8083b62:	691b      	ldr	r3, [r3, #16]
 8083b64:	4798      	blx	r3
 8083b66:	b140      	cbz	r0, 8083b7a <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x13e>
	    msg[i] = Serial1.read();
 8083b68:	f003 fbae 	bl	80872c8 <_Z22__fetch_global_Serial1v>
 8083b6c:	6803      	ldr	r3, [r0, #0]
 8083b6e:	695b      	ldr	r3, [r3, #20]
 8083b70:	4798      	blx	r3
 8083b72:	682b      	ldr	r3, [r5, #0]
 8083b74:	54e0      	strb	r0, [r4, r3]
	    i++;
 8083b76:	3301      	adds	r3, #1
 8083b78:	602b      	str	r3, [r5, #0]
	if ( i == (6 + *length)){
 8083b7a:	683b      	ldr	r3, [r7, #0]
 8083b7c:	682a      	ldr	r2, [r5, #0]
 8083b7e:	3306      	adds	r3, #6
 8083b80:	4293      	cmp	r3, r2
 8083b82:	d18a      	bne.n	8083a9a <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x5e>
	    state = checksum;
 8083b84:	2303      	movs	r3, #3
 8083b86:	7033      	strb	r3, [r6, #0]
 8083b88:	e787      	b.n	8083a9a <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x5e>
	if(Serial1.available()){
 8083b8a:	f003 fb9d 	bl	80872c8 <_Z22__fetch_global_Serial1v>
 8083b8e:	6803      	ldr	r3, [r0, #0]
 8083b90:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8083c0c <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1d0>
 8083b94:	691b      	ldr	r3, [r3, #16]
 8083b96:	4798      	blx	r3
 8083b98:	b150      	cbz	r0, 8083bb0 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x174>
	    msg[i] = Serial1.read();
 8083b9a:	f003 fb95 	bl	80872c8 <_Z22__fetch_global_Serial1v>
 8083b9e:	6803      	ldr	r3, [r0, #0]
 8083ba0:	695b      	ldr	r3, [r3, #20]
 8083ba2:	4798      	blx	r3
 8083ba4:	f8d8 3000 	ldr.w	r3, [r8]
 8083ba8:	54e0      	strb	r0, [r4, r3]
	    i++;
 8083baa:	3301      	adds	r3, #1
 8083bac:	f8c8 3000 	str.w	r3, [r8]
	if ( i == (8 + *length)){
 8083bb0:	683f      	ldr	r7, [r7, #0]
 8083bb2:	f8d8 3000 	ldr.w	r3, [r8]
 8083bb6:	3708      	adds	r7, #8
 8083bb8:	429f      	cmp	r7, r3
 8083bba:	f47f af6e 	bne.w	8083a9a <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x5e>
	    state = waitB5; // going to start over error or not
 8083bbe:	f04f 0800 	mov.w	r8, #0
	    ubxCS(msg, &ck_a, &ck_b);
 8083bc2:	4621      	mov	r1, r4
 8083bc4:	f10d 0307 	add.w	r3, sp, #7
 8083bc8:	f10d 0206 	add.w	r2, sp, #6
 8083bcc:	4648      	mov	r0, r9
	    if ( (msg[i-2] != ck_a) || (msg[i-1] != ck_b)){
 8083bce:	443c      	add	r4, r7
	    state = waitB5; // going to start over error or not
 8083bd0:	f886 8000 	strb.w	r8, [r6]
	    ubxCS(msg, &ck_a, &ck_b);
 8083bd4:	f7ff fcab 	bl	808352e <_ZN12UbloxM8Q_GPS5ubxCSEPhS0_S0_>
	    if ( (msg[i-2] != ck_a) || (msg[i-1] != ck_b)){
 8083bd8:	f814 2c02 	ldrb.w	r2, [r4, #-2]
 8083bdc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8083be0:	429a      	cmp	r2, r3
 8083be2:	d105      	bne.n	8083bf0 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1b4>
 8083be4:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8083be8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8083bec:	429a      	cmp	r2, r3
 8083bee:	d005      	beq.n	8083bfc <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1c0>
		Serial.println("readUBXmsg bad check sum ");
 8083bf0:	f003 f9e2 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8083bf4:	490a      	ldr	r1, [pc, #40]	; (8083c20 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1e4>)
 8083bf6:	f001 fa62 	bl	80850be <_ZN5Print7printlnEPKc>
		return ubxBAD_CHECK_SUM;
 8083bfa:	e7a2      	b.n	8083b42 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x106>
	    return ubxSUCCESS;
 8083bfc:	4645      	mov	r5, r8
 8083bfe:	e7a0      	b.n	8083b42 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x106>
 8083c00:	20000350 	.word	0x20000350
 8083c04:	20000030 	.word	0x20000030
 8083c08:	20000354 	.word	0x20000354
 8083c0c:	2000034c 	.word	0x2000034c
 8083c10:	08089b4a 	.word	0x08089b4a
 8083c14:	200000b4 	.word	0x200000b4
 8083c18:	08089b4c 	.word	0x08089b4c
 8083c1c:	08089b8c 	.word	0x08089b8c
 8083c20:	08089ba4 	.word	0x08089ba4

08083c24 <_ZN12UbloxM8Q_GPS4readEv>:
{
 8083c24:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (gpsOn){
 8083c26:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
{
 8083c2a:	4604      	mov	r4, r0
 8083c2c:	b0c1      	sub	sp, #260	; 0x104
    if (gpsOn){
 8083c2e:	b32b      	cbz	r3, 8083c7c <_ZN12UbloxM8Q_GPS4readEv+0x58>
	    r = readUBXmsg(msg, &type, &length);
 8083c30:	4d13      	ldr	r5, [pc, #76]	; (8083c80 <_ZN12UbloxM8Q_GPS4readEv+0x5c>)
 8083c32:	4e14      	ldr	r6, [pc, #80]	; (8083c84 <_ZN12UbloxM8Q_GPS4readEv+0x60>)
		Serial.println("gps.read got ubxBAD_CHECK_SUM");
 8083c34:	4f14      	ldr	r7, [pc, #80]	; (8083c88 <_ZN12UbloxM8Q_GPS4readEv+0x64>)
	while(Serial1.available()){
 8083c36:	f003 fb47 	bl	80872c8 <_Z22__fetch_global_Serial1v>
 8083c3a:	6803      	ldr	r3, [r0, #0]
 8083c3c:	691b      	ldr	r3, [r3, #16]
 8083c3e:	4798      	blx	r3
 8083c40:	b1e0      	cbz	r0, 8083c7c <_ZN12UbloxM8Q_GPS4readEv+0x58>
	    r = readUBXmsg(msg, &type, &length);
 8083c42:	462b      	mov	r3, r5
 8083c44:	4669      	mov	r1, sp
 8083c46:	4620      	mov	r0, r4
 8083c48:	4a0e      	ldr	r2, [pc, #56]	; (8083c84 <_ZN12UbloxM8Q_GPS4readEv+0x60>)
 8083c4a:	f7ff fef7 	bl	8083a3c <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_>
	    if (r == ubxBAD_LENGTH){
 8083c4e:	2802      	cmp	r0, #2
 8083c50:	d105      	bne.n	8083c5e <_ZN12UbloxM8Q_GPS4readEv+0x3a>
		Serial.println("gps.read got ubxBAD_LENGTH");
 8083c52:	f003 f9b1 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8083c56:	490d      	ldr	r1, [pc, #52]	; (8083c8c <_ZN12UbloxM8Q_GPS4readEv+0x68>)
		Serial.println("gps.read got ubxBAD_CHECK_SUM");
 8083c58:	f001 fa31 	bl	80850be <_ZN5Print7printlnEPKc>
	    if (r == ubxSUCCESS){
 8083c5c:	e7eb      	b.n	8083c36 <_ZN12UbloxM8Q_GPS4readEv+0x12>
	    if (r == ubxBAD_CHECK_SUM){
 8083c5e:	2803      	cmp	r0, #3
 8083c60:	d008      	beq.n	8083c74 <_ZN12UbloxM8Q_GPS4readEv+0x50>
	    if (r == ubxSUCCESS){
 8083c62:	2800      	cmp	r0, #0
 8083c64:	d1e7      	bne.n	8083c36 <_ZN12UbloxM8Q_GPS4readEv+0x12>
		parse(msg, type, length);
 8083c66:	4669      	mov	r1, sp
 8083c68:	4620      	mov	r0, r4
 8083c6a:	682b      	ldr	r3, [r5, #0]
 8083c6c:	6832      	ldr	r2, [r6, #0]
 8083c6e:	f7ff fe7b 	bl	8083968 <_ZN12UbloxM8Q_GPS5parseEPhii>
 8083c72:	e7df      	b.n	8083c34 <_ZN12UbloxM8Q_GPS4readEv+0x10>
		Serial.println("gps.read got ubxBAD_CHECK_SUM");
 8083c74:	f003 f9a0 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8083c78:	4639      	mov	r1, r7
 8083c7a:	e7ed      	b.n	8083c58 <_ZN12UbloxM8Q_GPS4readEv+0x34>
}
 8083c7c:	b041      	add	sp, #260	; 0x104
 8083c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8083c80:	2000035c 	.word	0x2000035c
 8083c84:	20000358 	.word	0x20000358
 8083c88:	08089bd9 	.word	0x08089bd9
 8083c8c:	08089bbe 	.word	0x08089bbe

08083c90 <_ZN12UbloxM8Q_GPS8writeUBXEPh>:
{
 8083c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (!sent){
 8083c94:	4f29      	ldr	r7, [pc, #164]	; (8083d3c <_ZN12UbloxM8Q_GPS8writeUBXEPh+0xac>)
{
 8083c96:	4680      	mov	r8, r0
    if (!sent){
 8083c98:	783d      	ldrb	r5, [r7, #0]
{
 8083c9a:	460c      	mov	r4, r1
 8083c9c:	463e      	mov	r6, r7
 8083c9e:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8083d4c <_ZN12UbloxM8Q_GPS8writeUBXEPh+0xbc>
    if (!sent){
 8083ca2:	bb8d      	cbnz	r5, 8083d08 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0x78>
  int ubxMsgType(uint8_t *m) { return((m[CLASS_IDX]<<8)|(m[ID_IDX]));}
 8083ca4:	8849      	ldrh	r1, [r1, #2]
	ackedMsg.clearAck(msgType);
 8083ca6:	4826      	ldr	r0, [pc, #152]	; (8083d40 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0xb0>)
 8083ca8:	ba49      	rev16	r1, r1
 8083caa:	b289      	uxth	r1, r1
	msgType = ubxMsgType(msg);
 8083cac:	f8c9 1000 	str.w	r1, [r9]
	ackedMsg.clearAck(msgType);
 8083cb0:	f7ff fe21 	bl	80838f6 <_ZN8AckedMsg8clearAckEi>
	ubxAddCS(msg);
 8083cb4:	4621      	mov	r1, r4
 8083cb6:	4640      	mov	r0, r8
 8083cb8:	f7ff fc50 	bl	808355c <_ZN12UbloxM8Q_GPS8ubxAddCSEPh>
	Serial.print("writeUBX: type: "); Serial.println(msgType,HEX);
 8083cbc:	f003 f97c 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8083cc0:	4920      	ldr	r1, [pc, #128]	; (8083d44 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0xb4>)
 8083cc2:	f001 f9e9 	bl	8085098 <_ZN5Print5printEPKc>
 8083cc6:	f003 f977 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8083cca:	2210      	movs	r2, #16
 8083ccc:	f8d9 1000 	ldr.w	r1, [r9]
 8083cd0:	f7ff fe29 	bl	8083926 <_ZN5Print7printlnIiLi0EEEjT_i>
	showUbx(msg);
 8083cd4:	4621      	mov	r1, r4
 8083cd6:	4640      	mov	r0, r8
 8083cd8:	f7ff fc4e 	bl	8083578 <_ZN12UbloxM8Q_GPS7showUbxEPh>
        return( ((m[LENGTH_IDX])+(m[LENGTH_IDX+1]*256)));}
 8083cdc:	7963      	ldrb	r3, [r4, #5]
 8083cde:	7927      	ldrb	r7, [r4, #4]
 8083ce0:	eb07 2703 	add.w	r7, r7, r3, lsl #8
	for (i = 0; i < length + 8; i++ ){
 8083ce4:	3707      	adds	r7, #7
	    Serial1.write(msg[i]);
 8083ce6:	f003 faef 	bl	80872c8 <_Z22__fetch_global_Serial1v>
 8083cea:	6803      	ldr	r3, [r0, #0]
 8083cec:	5d61      	ldrb	r1, [r4, r5]
 8083cee:	689b      	ldr	r3, [r3, #8]
	for (i = 0; i < length + 8; i++ ){
 8083cf0:	3501      	adds	r5, #1
	    Serial1.write(msg[i]);
 8083cf2:	4798      	blx	r3
	for (i = 0; i < length + 8; i++ ){
 8083cf4:	42af      	cmp	r7, r5
 8083cf6:	daf6      	bge.n	8083ce6 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0x56>
 8083cf8:	f000 fabe 	bl	8084278 <HAL_Timer_Get_Milli_Seconds>
	prev = millis();
 8083cfc:	4b12      	ldr	r3, [pc, #72]	; (8083d48 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0xb8>)
 8083cfe:	6018      	str	r0, [r3, #0]
	sent = true;
 8083d00:	2001      	movs	r0, #1
 8083d02:	7030      	strb	r0, [r6, #0]
}
 8083d04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	read();
 8083d08:	f7ff ff8c 	bl	8083c24 <_ZN12UbloxM8Q_GPS4readEv>
	if (!ackedMsg.isAcked(msgType)){
 8083d0c:	f8d9 1000 	ldr.w	r1, [r9]
 8083d10:	480b      	ldr	r0, [pc, #44]	; (8083d40 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0xb0>)
 8083d12:	f7ff fdfc 	bl	808390e <_ZN8AckedMsg7isAckedEi>
 8083d16:	4604      	mov	r4, r0
 8083d18:	b950      	cbnz	r0, 8083d30 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0xa0>
 8083d1a:	f000 faad 	bl	8084278 <HAL_Timer_Get_Milli_Seconds>
	    if (cur - prev > 2000){
 8083d1e:	4b0a      	ldr	r3, [pc, #40]	; (8083d48 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0xb8>)
 8083d20:	681b      	ldr	r3, [r3, #0]
 8083d22:	1ac0      	subs	r0, r0, r3
 8083d24:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8083d28:	d905      	bls.n	8083d36 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0xa6>
		return ubxNO_ACK;
 8083d2a:	2004      	movs	r0, #4
		sent = false;
 8083d2c:	703c      	strb	r4, [r7, #0]
		return ubxNO_ACK;
 8083d2e:	e7e9      	b.n	8083d04 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0x74>
	    sent = false;
 8083d30:	2000      	movs	r0, #0
 8083d32:	7038      	strb	r0, [r7, #0]
	    return ubxSUCCESS;
 8083d34:	e7e6      	b.n	8083d04 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0x74>
    return ubxPENDING;
 8083d36:	2001      	movs	r0, #1
 8083d38:	e7e4      	b.n	8083d04 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0x74>
 8083d3a:	bf00      	nop
 8083d3c:	20000368 	.word	0x20000368
 8083d40:	20000370 	.word	0x20000370
 8083d44:	08089bf7 	.word	0x08089bf7
 8083d48:	20000364 	.word	0x20000364
 8083d4c:	2000036c 	.word	0x2000036c

08083d50 <_ZN12UbloxM8Q_GPS11sendCommandEPh>:
{
 8083d50:	b538      	push	{r3, r4, r5, lr}
 8083d52:	4604      	mov	r4, r0
 8083d54:	460d      	mov	r5, r1
	r = writeUBX(msg);
 8083d56:	4629      	mov	r1, r5
 8083d58:	4620      	mov	r0, r4
 8083d5a:	f7ff ff99 	bl	8083c90 <_ZN12UbloxM8Q_GPS8writeUBXEPh>
    while( r == ubxPENDING ){
 8083d5e:	2801      	cmp	r0, #1
 8083d60:	d0f9      	beq.n	8083d56 <_ZN12UbloxM8Q_GPS11sendCommandEPh+0x6>
    if (r == ubxBAD_LENGTH){
 8083d62:	2802      	cmp	r0, #2
 8083d64:	d106      	bne.n	8083d74 <_ZN12UbloxM8Q_GPS11sendCommandEPh+0x24>
	Serial.println("gps.sendCommand got ubxBAD_LENGTH");
 8083d66:	f003 f927 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8083d6a:	4909      	ldr	r1, [pc, #36]	; (8083d90 <_ZN12UbloxM8Q_GPS11sendCommandEPh+0x40>)
}
 8083d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Serial.println("gps.sendCommand got ubxNO_ACK");
 8083d70:	f001 b9a5 	b.w	80850be <_ZN5Print7printlnEPKc>
    if (r == ubxBAD_CHECK_SUM){
 8083d74:	2803      	cmp	r0, #3
 8083d76:	d005      	beq.n	8083d84 <_ZN12UbloxM8Q_GPS11sendCommandEPh+0x34>
    if (r == ubxNO_ACK){
 8083d78:	2804      	cmp	r0, #4
 8083d7a:	d107      	bne.n	8083d8c <_ZN12UbloxM8Q_GPS11sendCommandEPh+0x3c>
	Serial.println("gps.sendCommand got ubxNO_ACK");
 8083d7c:	f003 f91c 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8083d80:	4904      	ldr	r1, [pc, #16]	; (8083d94 <_ZN12UbloxM8Q_GPS11sendCommandEPh+0x44>)
 8083d82:	e7f3      	b.n	8083d6c <_ZN12UbloxM8Q_GPS11sendCommandEPh+0x1c>
	Serial.println("gps.sendCommand got ubxBAD_CHECK_SUM");
 8083d84:	f003 f918 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8083d88:	4903      	ldr	r1, [pc, #12]	; (8083d98 <_ZN12UbloxM8Q_GPS11sendCommandEPh+0x48>)
 8083d8a:	e7ef      	b.n	8083d6c <_ZN12UbloxM8Q_GPS11sendCommandEPh+0x1c>
}
 8083d8c:	bd38      	pop	{r3, r4, r5, pc}
 8083d8e:	bf00      	nop
 8083d90:	08089c08 	.word	0x08089c08
 8083d94:	08089c4f 	.word	0x08089c4f
 8083d98:	08089c2a 	.word	0x08089c2a

08083d9c <_ZN12UbloxM8Q_GPS8resetODOEv>:
    sendCommand(resetODOmsg);
 8083d9c:	4901      	ldr	r1, [pc, #4]	; (8083da4 <_ZN12UbloxM8Q_GPS8resetODOEv+0x8>)
 8083d9e:	f7ff bfd7 	b.w	8083d50 <_ZN12UbloxM8Q_GPS11sendCommandEPh>
 8083da2:	bf00      	nop
 8083da4:	200000ab 	.word	0x200000ab

08083da8 <_ZN12UbloxM8Q_GPS5beginEv>:
{
 8083da8:	b570      	push	{r4, r5, r6, lr}
    switch (state){
 8083daa:	4d1a      	ldr	r5, [pc, #104]	; (8083e14 <_ZN12UbloxM8Q_GPS5beginEv+0x6c>)
{
 8083dac:	4606      	mov	r6, r0
 8083dae:	682b      	ldr	r3, [r5, #0]
 8083db0:	2b05      	cmp	r3, #5
 8083db2:	d829      	bhi.n	8083e08 <_ZN12UbloxM8Q_GPS5beginEv+0x60>
 8083db4:	e8df f003 	tbb	[pc, r3]
 8083db8:	1b190b03 	.word	0x1b190b03
 8083dbc:	1f1d      	.short	0x1f1d
	    readVer();
 8083dbe:	f7ff fd31 	bl	8083824 <_ZN12UbloxM8Q_GPS7readVerEv>
	    gpsOn = true;
 8083dc2:	2301      	movs	r3, #1
 8083dc4:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60
	    state++;
 8083dc8:	682b      	ldr	r3, [r5, #0]
 8083dca:	3301      	adds	r3, #1
 8083dcc:	602b      	str	r3, [r5, #0]
	    ret = writeUBX(cfgRate) ;
 8083dce:	4912      	ldr	r1, [pc, #72]	; (8083e18 <_ZN12UbloxM8Q_GPS5beginEv+0x70>)
	    ret = writeUBX(cfgNav5) ;
 8083dd0:	4630      	mov	r0, r6
 8083dd2:	f7ff ff5d 	bl	8083c90 <_ZN12UbloxM8Q_GPS8writeUBXEPh>
	    if ( ret == ubxPENDING){
 8083dd6:	2801      	cmp	r0, #1
	    ret = writeUBX(cfgNav5) ;
 8083dd8:	4604      	mov	r4, r0
	    if ( ret == ubxPENDING){
 8083dda:	d003      	beq.n	8083de4 <_ZN12UbloxM8Q_GPS5beginEv+0x3c>
	    if ( ret == ubxSUCCESS){
 8083ddc:	6829      	ldr	r1, [r5, #0]
 8083dde:	b960      	cbnz	r0, 8083dfa <_ZN12UbloxM8Q_GPS5beginEv+0x52>
		state++;
 8083de0:	3101      	adds	r1, #1
 8083de2:	6029      	str	r1, [r5, #0]
		return ubxPENDING;
 8083de4:	2401      	movs	r4, #1
}
 8083de6:	4620      	mov	r0, r4
 8083de8:	bd70      	pop	{r4, r5, r6, pc}
	    ret = writeUBX(enablePVT) ;
 8083dea:	490c      	ldr	r1, [pc, #48]	; (8083e1c <_ZN12UbloxM8Q_GPS5beginEv+0x74>)
 8083dec:	e7f0      	b.n	8083dd0 <_ZN12UbloxM8Q_GPS5beginEv+0x28>
	    ret = writeUBX(cfgNav5) ;
 8083dee:	490c      	ldr	r1, [pc, #48]	; (8083e20 <_ZN12UbloxM8Q_GPS5beginEv+0x78>)
 8083df0:	e7ee      	b.n	8083dd0 <_ZN12UbloxM8Q_GPS5beginEv+0x28>
	    ret = writeUBX(cfgODOmsg) ;
 8083df2:	490c      	ldr	r1, [pc, #48]	; (8083e24 <_ZN12UbloxM8Q_GPS5beginEv+0x7c>)
 8083df4:	e7ec      	b.n	8083dd0 <_ZN12UbloxM8Q_GPS5beginEv+0x28>
	    ret = writeUBX(enableODO) ;
 8083df6:	490c      	ldr	r1, [pc, #48]	; (8083e28 <_ZN12UbloxM8Q_GPS5beginEv+0x80>)
 8083df8:	e7ea      	b.n	8083dd0 <_ZN12UbloxM8Q_GPS5beginEv+0x28>
		reportError(state, ret);
 8083dfa:	4602      	mov	r2, r0
 8083dfc:	4630      	mov	r0, r6
 8083dfe:	f7ff fd37 	bl	8083870 <_ZN12UbloxM8Q_GPS11reportErrorEi9ubxReturn>
		state = 0;
 8083e02:	2300      	movs	r3, #0
 8083e04:	602b      	str	r3, [r5, #0]
		return ret;
 8083e06:	e7ee      	b.n	8083de6 <_ZN12UbloxM8Q_GPS5beginEv+0x3e>
	    initComplete = true;
 8083e08:	2301      	movs	r3, #1
	    state = 0;
 8083e0a:	2400      	movs	r4, #0
	    initComplete = true;
 8083e0c:	7003      	strb	r3, [r0, #0]
	    state = 0;
 8083e0e:	602c      	str	r4, [r5, #0]
	    return ubxSUCCESS;
 8083e10:	e7e9      	b.n	8083de6 <_ZN12UbloxM8Q_GPS5beginEv+0x3e>
 8083e12:	bf00      	nop
 8083e14:	20000360 	.word	0x20000360
 8083e18:	20000079 	.word	0x20000079
 8083e1c:	20000092 	.word	0x20000092
 8083e20:	20000031 	.word	0x20000031
 8083e24:	2000005d 	.word	0x2000005d
 8083e28:	20000087 	.word	0x20000087

08083e2c <_ZN12UbloxM8Q_GPS7setRateEti>:
    if (measurement < 10){ // I don't know what the real minimum is
 8083e2c:	2909      	cmp	r1, #9
{
 8083e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8083e32:	4606      	mov	r6, r0
 8083e34:	460c      	mov	r4, r1
 8083e36:	4615      	mov	r5, r2
    if (measurement < 10){ // I don't know what the real minimum is
 8083e38:	d805      	bhi.n	8083e46 <_ZN12UbloxM8Q_GPS7setRateEti+0x1a>
	Serial.println("setRate: changed measurement to minimum 10 ms");
 8083e3a:	f003 f8bd 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8083e3e:	4929      	ldr	r1, [pc, #164]	; (8083ee4 <_ZN12UbloxM8Q_GPS7setRateEti+0xb8>)
 8083e40:	f001 f93d 	bl	80850be <_ZN5Print7printlnEPKc>
	measurement = 10;
 8083e44:	240a      	movs	r4, #10
    if ( navigationSol < 1 ){ 
 8083e46:	2d00      	cmp	r5, #0
 8083e48:	dc43      	bgt.n	8083ed2 <_ZN12UbloxM8Q_GPS7setRateEti+0xa6>
	Serial.println("setRate: changed navigationSol to minimum 1");
 8083e4a:	f003 f8b5 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8083e4e:	4926      	ldr	r1, [pc, #152]	; (8083ee8 <_ZN12UbloxM8Q_GPS7setRateEti+0xbc>)
 8083e50:	f001 f935 	bl	80850be <_ZN5Print7printlnEPKc>
	navigationSol = 1;
 8083e54:	2501      	movs	r5, #1
    ubxWatchdog = measurement * navigationSol * 5;
 8083e56:	fb05 f304 	mul.w	r3, r5, r4
 8083e5a:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8083f00 <_ZN12UbloxM8Q_GPS7setRateEti+0xd4>
 8083e5e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8083e62:	f8c8 3000 	str.w	r3, [r8]
    Serial.print("setRate: measurement: ");
 8083e66:	f003 f8a7 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8083e6a:	4920      	ldr	r1, [pc, #128]	; (8083eec <_ZN12UbloxM8Q_GPS7setRateEti+0xc0>)
 8083e6c:	f001 f914 	bl	8085098 <_ZN5Print5printEPKc>
    Serial.println(measurement);
 8083e70:	f003 f8a2 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8083e74:	4607      	mov	r7, r0
 8083e76:	220a      	movs	r2, #10
 8083e78:	4621      	mov	r1, r4
 8083e7a:	f001 f92a 	bl	80850d2 <_ZN5Print11printNumberEmh>
        n += println();
 8083e7e:	4638      	mov	r0, r7
 8083e80:	f001 f911 	bl	80850a6 <_ZN5Print7printlnEv>
    Serial.print("setRate: navigationSol: ");
 8083e84:	f003 f898 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8083e88:	4919      	ldr	r1, [pc, #100]	; (8083ef0 <_ZN12UbloxM8Q_GPS7setRateEti+0xc4>)
 8083e8a:	f001 f905 	bl	8085098 <_ZN5Print5printEPKc>
    Serial.println(navigationSol);
 8083e8e:	f003 f893 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8083e92:	220a      	movs	r2, #10
 8083e94:	4629      	mov	r1, r5
 8083e96:	f7ff fd46 	bl	8083926 <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.print("setRate: ubxWatchdog: ");
 8083e9a:	f003 f88d 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8083e9e:	4915      	ldr	r1, [pc, #84]	; (8083ef4 <_ZN12UbloxM8Q_GPS7setRateEti+0xc8>)
 8083ea0:	f001 f8fa 	bl	8085098 <_ZN5Print5printEPKc>
    Serial.println(ubxWatchdog);
 8083ea4:	f003 f888 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8083ea8:	4607      	mov	r7, r0
        return printNumber(val, base) + t;
 8083eaa:	f8d8 1000 	ldr.w	r1, [r8]
 8083eae:	220a      	movs	r2, #10
 8083eb0:	f001 f90f 	bl	80850d2 <_ZN5Print11printNumberEmh>
        n += println();
 8083eb4:	4638      	mov	r0, r7
 8083eb6:	f001 f8f6 	bl	80850a6 <_ZN5Print7printlnEv>
    rateMsg[PAYLOAD_IDX + 3] = 0;
 8083eba:	2300      	movs	r3, #0
    rateMsg[PAYLOAD_IDX] = (measurement & 0xFF); // little endian
 8083ebc:	490e      	ldr	r1, [pc, #56]	; (8083ef8 <_ZN12UbloxM8Q_GPS7setRateEti+0xcc>)
    sendCommand(rateMsg);
 8083ebe:	4630      	mov	r0, r6
    rateMsg[PAYLOAD_IDX] = (measurement & 0xFF); // little endian
 8083ec0:	718c      	strb	r4, [r1, #6]
    rateMsg[PAYLOAD_IDX + 1] = ((measurement/256) & 0xFF);
 8083ec2:	0a24      	lsrs	r4, r4, #8
 8083ec4:	71cc      	strb	r4, [r1, #7]
    rateMsg[PAYLOAD_IDX + 2] = (navigationSol & 0xFF);
 8083ec6:	720d      	strb	r5, [r1, #8]
    rateMsg[PAYLOAD_IDX + 3] = 0;
 8083ec8:	724b      	strb	r3, [r1, #9]
}
 8083eca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    sendCommand(rateMsg);
 8083ece:	f7ff bf3f 	b.w	8083d50 <_ZN12UbloxM8Q_GPS11sendCommandEPh>
    if ( navigationSol > 127 ){ 
 8083ed2:	2d7f      	cmp	r5, #127	; 0x7f
 8083ed4:	ddbf      	ble.n	8083e56 <_ZN12UbloxM8Q_GPS7setRateEti+0x2a>
	Serial.println("setRate: changed navigationSol to maximum 127");
 8083ed6:	f003 f86f 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8083eda:	4908      	ldr	r1, [pc, #32]	; (8083efc <_ZN12UbloxM8Q_GPS7setRateEti+0xd0>)
 8083edc:	f001 f8ef 	bl	80850be <_ZN5Print7printlnEPKc>
	navigationSol = 127;
 8083ee0:	257f      	movs	r5, #127	; 0x7f
 8083ee2:	e7b8      	b.n	8083e56 <_ZN12UbloxM8Q_GPS7setRateEti+0x2a>
 8083ee4:	08089c6d 	.word	0x08089c6d
 8083ee8:	08089c9b 	.word	0x08089c9b
 8083eec:	08089cf5 	.word	0x08089cf5
 8083ef0:	08089d0c 	.word	0x08089d0c
 8083ef4:	08089d25 	.word	0x08089d25
 8083ef8:	2000009d 	.word	0x2000009d
 8083efc:	08089cc7 	.word	0x08089cc7
 8083f00:	200000b4 	.word	0x200000b4

08083f04 <_GLOBAL__sub_I_enablePOSLLH>:
AckedMsg ackedMsg = AckedMsg();
 8083f04:	4801      	ldr	r0, [pc, #4]	; (8083f0c <_GLOBAL__sub_I_enablePOSLLH+0x8>)
 8083f06:	f7ff bcdf 	b.w	80838c8 <_ZN8AckedMsgC1Ev>
 8083f0a:	bf00      	nop
 8083f0c:	20000370 	.word	0x20000370

08083f10 <_Z17tinkerDigitalRead6String>:
 * Output         : None.
 * Return         : Value of the pin (0 or 1) in INT type
                    Returns a negative number on failure
 *******************************************************************************/
int tinkerDigitalRead(String pin)
{
 8083f10:	b5f0      	push	{r4, r5, r6, r7, lr}
	//convert ascii to integer
	int pinNumber = pin.charAt(1) - '0';
 8083f12:	2101      	movs	r1, #1
{
 8083f14:	b085      	sub	sp, #20
 8083f16:	4606      	mov	r6, r0
	int pinNumber = pin.charAt(1) - '0';
 8083f18:	f001 f82f 	bl	8084f7a <_ZNK6String6charAtEj>
 8083f1c:	f1a0 0530 	sub.w	r5, r0, #48	; 0x30
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 8083f20:	2d07      	cmp	r5, #7
	int pinNumber = pin.charAt(1) - '0';
 8083f22:	4604      	mov	r4, r0
	if (pinNumber< 0 || pinNumber >7) return -1;
 8083f24:	d82b      	bhi.n	8083f7e <_Z17tinkerDigitalRead6String+0x6e>

	if(pin.startsWith("D"))
 8083f26:	4919      	ldr	r1, [pc, #100]	; (8083f8c <_Z17tinkerDigitalRead6String+0x7c>)
 8083f28:	4668      	mov	r0, sp
 8083f2a:	f000 ff47 	bl	8084dbc <_ZN6StringC1EPKc>
 8083f2e:	4669      	mov	r1, sp
 8083f30:	4630      	mov	r0, r6
 8083f32:	f001 f810 	bl	8084f56 <_ZNK6String10startsWithERKS_>
 8083f36:	4607      	mov	r7, r0
 8083f38:	4668      	mov	r0, sp
 8083f3a:	f000 fef5 	bl	8084d28 <_ZN6StringD1Ev>
 8083f3e:	b14f      	cbz	r7, 8083f54 <_Z17tinkerDigitalRead6String+0x44>
	{
		pinMode(pinNumber, INPUT_PULLDOWN);
 8083f40:	b2ad      	uxth	r5, r5
 8083f42:	4628      	mov	r0, r5
 8083f44:	2103      	movs	r1, #3
 8083f46:	f003 fd55 	bl	80879f4 <pinMode>
		return digitalRead(pinNumber);
 8083f4a:	4628      	mov	r0, r5
	}
	else if (pin.startsWith("A"))
	{
		pinMode(pinNumber+10, INPUT_PULLDOWN);
		return digitalRead(pinNumber+10);
 8083f4c:	f003 fd7c 	bl	8087a48 <digitalRead>
	}
	return -2;
}
 8083f50:	b005      	add	sp, #20
 8083f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if (pin.startsWith("A"))
 8083f54:	490e      	ldr	r1, [pc, #56]	; (8083f90 <_Z17tinkerDigitalRead6String+0x80>)
 8083f56:	4668      	mov	r0, sp
 8083f58:	f000 ff30 	bl	8084dbc <_ZN6StringC1EPKc>
 8083f5c:	4669      	mov	r1, sp
 8083f5e:	4630      	mov	r0, r6
 8083f60:	f000 fff9 	bl	8084f56 <_ZNK6String10startsWithERKS_>
 8083f64:	4605      	mov	r5, r0
 8083f66:	4668      	mov	r0, sp
 8083f68:	f000 fede 	bl	8084d28 <_ZN6StringD1Ev>
 8083f6c:	b155      	cbz	r5, 8083f84 <_Z17tinkerDigitalRead6String+0x74>
		pinMode(pinNumber+10, INPUT_PULLDOWN);
 8083f6e:	3c26      	subs	r4, #38	; 0x26
 8083f70:	b2a4      	uxth	r4, r4
 8083f72:	4620      	mov	r0, r4
 8083f74:	2103      	movs	r1, #3
 8083f76:	f003 fd3d 	bl	80879f4 <pinMode>
		return digitalRead(pinNumber+10);
 8083f7a:	4620      	mov	r0, r4
 8083f7c:	e7e6      	b.n	8083f4c <_Z17tinkerDigitalRead6String+0x3c>
	if (pinNumber< 0 || pinNumber >7) return -1;
 8083f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8083f82:	e7e5      	b.n	8083f50 <_Z17tinkerDigitalRead6String+0x40>
	return -2;
 8083f84:	f06f 0001 	mvn.w	r0, #1
 8083f88:	e7e2      	b.n	8083f50 <_Z17tinkerDigitalRead6String+0x40>
 8083f8a:	bf00      	nop
 8083f8c:	08089524 	.word	0x08089524
 8083f90:	08089d3c 	.word	0x08089d3c

08083f94 <_Z18tinkerDigitalWrite6String>:
 * Input          : Pin and value
 * Output         : None.
 * Return         : 1 on success and a negative number on failure
 *******************************************************************************/
int tinkerDigitalWrite(String command)
{
 8083f94:	b5f0      	push	{r4, r5, r6, r7, lr}
	bool value = 0;
	//convert ascii to integer
	int pinNumber = command.charAt(1) - '0';
 8083f96:	2101      	movs	r1, #1
{
 8083f98:	b085      	sub	sp, #20
 8083f9a:	4606      	mov	r6, r0
	int pinNumber = command.charAt(1) - '0';
 8083f9c:	f000 ffed 	bl	8084f7a <_ZNK6String6charAtEj>
 8083fa0:	f1a0 0430 	sub.w	r4, r0, #48	; 0x30
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 8083fa4:	2c07      	cmp	r4, #7
 8083fa6:	d847      	bhi.n	8084038 <_Z18tinkerDigitalWrite6String+0xa4>

	if(command.substring(3,7) == "HIGH") value = 1;
 8083fa8:	2307      	movs	r3, #7
 8083faa:	2203      	movs	r2, #3
 8083fac:	4631      	mov	r1, r6
 8083fae:	4668      	mov	r0, sp
 8083fb0:	f000 fff6 	bl	8084fa0 <_ZNK6String9substringEjj>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8083fb4:	4668      	mov	r0, sp
 8083fb6:	4925      	ldr	r1, [pc, #148]	; (808404c <_Z18tinkerDigitalWrite6String+0xb8>)
 8083fb8:	f000 ffa5 	bl	8084f06 <_ZNK6String6equalsEPKc>
 8083fbc:	4605      	mov	r5, r0
 8083fbe:	4668      	mov	r0, sp
 8083fc0:	f000 feb2 	bl	8084d28 <_ZN6StringD1Ev>
 8083fc4:	bb3d      	cbnz	r5, 8084016 <_Z18tinkerDigitalWrite6String+0x82>
	else if(command.substring(3,6) == "LOW") value = 0;
 8083fc6:	2306      	movs	r3, #6
 8083fc8:	2203      	movs	r2, #3
 8083fca:	4631      	mov	r1, r6
 8083fcc:	4668      	mov	r0, sp
 8083fce:	f000 ffe7 	bl	8084fa0 <_ZNK6String9substringEjj>
 8083fd2:	4668      	mov	r0, sp
 8083fd4:	491e      	ldr	r1, [pc, #120]	; (8084050 <_Z18tinkerDigitalWrite6String+0xbc>)
 8083fd6:	f000 ff96 	bl	8084f06 <_ZNK6String6equalsEPKc>
 8083fda:	4607      	mov	r7, r0
 8083fdc:	4668      	mov	r0, sp
 8083fde:	f000 fea3 	bl	8084d28 <_ZN6StringD1Ev>
 8083fe2:	b367      	cbz	r7, 808403e <_Z18tinkerDigitalWrite6String+0xaa>
	else return -2;

	if(command.startsWith("D"))
 8083fe4:	491b      	ldr	r1, [pc, #108]	; (8084054 <_Z18tinkerDigitalWrite6String+0xc0>)
 8083fe6:	4668      	mov	r0, sp
 8083fe8:	f000 fee8 	bl	8084dbc <_ZN6StringC1EPKc>
 8083fec:	4669      	mov	r1, sp
 8083fee:	4630      	mov	r0, r6
 8083ff0:	f000 ffb1 	bl	8084f56 <_ZNK6String10startsWithERKS_>
 8083ff4:	4607      	mov	r7, r0
 8083ff6:	4668      	mov	r0, sp
 8083ff8:	f000 fe96 	bl	8084d28 <_ZN6StringD1Ev>
 8083ffc:	b16f      	cbz	r7, 808401a <_Z18tinkerDigitalWrite6String+0x86>
		digitalWrite(pinNumber, value);
		return 1;
	}
	else if(command.startsWith("A"))
	{
		pinMode(pinNumber+10, OUTPUT);
 8083ffe:	b2a4      	uxth	r4, r4
 8084000:	2101      	movs	r1, #1
 8084002:	4620      	mov	r0, r4
 8084004:	f003 fcf6 	bl	80879f4 <pinMode>
		digitalWrite(pinNumber+10, value);
 8084008:	4620      	mov	r0, r4
 808400a:	4629      	mov	r1, r5
 808400c:	f003 fd03 	bl	8087a16 <digitalWrite>
		return 1;
 8084010:	2001      	movs	r0, #1
	}
	else return -3;
}
 8084012:	b005      	add	sp, #20
 8084014:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(command.substring(3,7) == "HIGH") value = 1;
 8084016:	2501      	movs	r5, #1
 8084018:	e7e4      	b.n	8083fe4 <_Z18tinkerDigitalWrite6String+0x50>
	else if(command.startsWith("A"))
 808401a:	490f      	ldr	r1, [pc, #60]	; (8084058 <_Z18tinkerDigitalWrite6String+0xc4>)
 808401c:	4668      	mov	r0, sp
 808401e:	f000 fecd 	bl	8084dbc <_ZN6StringC1EPKc>
 8084022:	4630      	mov	r0, r6
 8084024:	4669      	mov	r1, sp
 8084026:	f000 ff96 	bl	8084f56 <_ZNK6String10startsWithERKS_>
 808402a:	4606      	mov	r6, r0
 808402c:	4668      	mov	r0, sp
 808402e:	f000 fe7b 	bl	8084d28 <_ZN6StringD1Ev>
 8084032:	b13e      	cbz	r6, 8084044 <_Z18tinkerDigitalWrite6String+0xb0>
		pinMode(pinNumber+10, OUTPUT);
 8084034:	340a      	adds	r4, #10
 8084036:	e7e2      	b.n	8083ffe <_Z18tinkerDigitalWrite6String+0x6a>
	if (pinNumber< 0 || pinNumber >7) return -1;
 8084038:	f04f 30ff 	mov.w	r0, #4294967295
 808403c:	e7e9      	b.n	8084012 <_Z18tinkerDigitalWrite6String+0x7e>
	else return -2;
 808403e:	f06f 0001 	mvn.w	r0, #1
 8084042:	e7e6      	b.n	8084012 <_Z18tinkerDigitalWrite6String+0x7e>
	else return -3;
 8084044:	f06f 0002 	mvn.w	r0, #2
 8084048:	e7e3      	b.n	8084012 <_Z18tinkerDigitalWrite6String+0x7e>
 808404a:	bf00      	nop
 808404c:	08089d3e 	.word	0x08089d3e
 8084050:	08089d43 	.word	0x08089d43
 8084054:	08089524 	.word	0x08089524
 8084058:	08089d3c 	.word	0x08089d3c

0808405c <_Z16tinkerAnalogRead6String>:
 * Output         : None.
 * Return         : Returns the analog value in INT type (0 to 4095)
                    Returns a negative number on failure
 *******************************************************************************/
int tinkerAnalogRead(String pin)
{
 808405c:	b5f0      	push	{r4, r5, r6, r7, lr}
	//convert ascii to integer
	int pinNumber = pin.charAt(1) - '0';
 808405e:	2101      	movs	r1, #1
{
 8084060:	b085      	sub	sp, #20
 8084062:	4607      	mov	r7, r0
	int pinNumber = pin.charAt(1) - '0';
 8084064:	f000 ff89 	bl	8084f7a <_ZNK6String6charAtEj>
 8084068:	f1a0 0530 	sub.w	r5, r0, #48	; 0x30
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 808406c:	2d07      	cmp	r5, #7
	int pinNumber = pin.charAt(1) - '0';
 808406e:	4604      	mov	r4, r0
	if (pinNumber< 0 || pinNumber >7) return -1;
 8084070:	d82b      	bhi.n	80840ca <_Z16tinkerAnalogRead6String+0x6e>

	if(pin.startsWith("D"))
 8084072:	4919      	ldr	r1, [pc, #100]	; (80840d8 <_Z16tinkerAnalogRead6String+0x7c>)
 8084074:	4668      	mov	r0, sp
 8084076:	f000 fea1 	bl	8084dbc <_ZN6StringC1EPKc>
 808407a:	4669      	mov	r1, sp
 808407c:	4638      	mov	r0, r7
 808407e:	f000 ff6a 	bl	8084f56 <_ZNK6String10startsWithERKS_>
 8084082:	4606      	mov	r6, r0
 8084084:	4668      	mov	r0, sp
 8084086:	f000 fe4f 	bl	8084d28 <_ZN6StringD1Ev>
 808408a:	b14e      	cbz	r6, 80840a0 <_Z16tinkerAnalogRead6String+0x44>
	{
		pinMode(pinNumber, INPUT);
 808408c:	b2ad      	uxth	r5, r5
 808408e:	4628      	mov	r0, r5
 8084090:	2100      	movs	r1, #0
 8084092:	f003 fcaf 	bl	80879f4 <pinMode>
		return analogRead(pinNumber);
 8084096:	4628      	mov	r0, r5
	}
	else if (pin.startsWith("A"))
	{
		pinMode(pinNumber+10, INPUT);
		return analogRead(pinNumber+10);
 8084098:	f003 fce9 	bl	8087a6e <analogRead>
	}
	return -2;
}
 808409c:	b005      	add	sp, #20
 808409e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if (pin.startsWith("A"))
 80840a0:	490e      	ldr	r1, [pc, #56]	; (80840dc <_Z16tinkerAnalogRead6String+0x80>)
 80840a2:	4668      	mov	r0, sp
 80840a4:	f000 fe8a 	bl	8084dbc <_ZN6StringC1EPKc>
 80840a8:	4669      	mov	r1, sp
 80840aa:	4638      	mov	r0, r7
 80840ac:	f000 ff53 	bl	8084f56 <_ZNK6String10startsWithERKS_>
 80840b0:	4605      	mov	r5, r0
 80840b2:	4668      	mov	r0, sp
 80840b4:	f000 fe38 	bl	8084d28 <_ZN6StringD1Ev>
 80840b8:	b155      	cbz	r5, 80840d0 <_Z16tinkerAnalogRead6String+0x74>
		pinMode(pinNumber+10, INPUT);
 80840ba:	3c26      	subs	r4, #38	; 0x26
 80840bc:	b2a4      	uxth	r4, r4
 80840be:	4620      	mov	r0, r4
 80840c0:	4631      	mov	r1, r6
 80840c2:	f003 fc97 	bl	80879f4 <pinMode>
		return analogRead(pinNumber+10);
 80840c6:	4620      	mov	r0, r4
 80840c8:	e7e6      	b.n	8084098 <_Z16tinkerAnalogRead6String+0x3c>
	if (pinNumber< 0 || pinNumber >7) return -1;
 80840ca:	f04f 30ff 	mov.w	r0, #4294967295
 80840ce:	e7e5      	b.n	808409c <_Z16tinkerAnalogRead6String+0x40>
	return -2;
 80840d0:	f06f 0001 	mvn.w	r0, #1
 80840d4:	e7e2      	b.n	808409c <_Z16tinkerAnalogRead6String+0x40>
 80840d6:	bf00      	nop
 80840d8:	08089524 	.word	0x08089524
 80840dc:	08089d3c 	.word	0x08089d3c

080840e0 <_Z17tinkerAnalogWrite6String>:
 * Input          : Pin and Value (0 to 255)
 * Output         : None.
 * Return         : 1 on success and a negative number on failure
 *******************************************************************************/
int tinkerAnalogWrite(String command)
{
 80840e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	//convert ascii to integer
	int pinNumber = command.charAt(1) - '0';
 80840e2:	2101      	movs	r1, #1
{
 80840e4:	b089      	sub	sp, #36	; 0x24
 80840e6:	4605      	mov	r5, r0
	int pinNumber = command.charAt(1) - '0';
 80840e8:	f000 ff47 	bl	8084f7a <_ZNK6String6charAtEj>
 80840ec:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 80840f0:	2e07      	cmp	r6, #7
	int pinNumber = command.charAt(1) - '0';
 80840f2:	4604      	mov	r4, r0
	if (pinNumber< 0 || pinNumber >7) return -1;
 80840f4:	d840      	bhi.n	8084178 <_Z17tinkerAnalogWrite6String+0x98>

	String value = command.substring(3);
 80840f6:	2203      	movs	r2, #3
 80840f8:	4629      	mov	r1, r5
 80840fa:	4668      	mov	r0, sp
 80840fc:	f000 ff72 	bl	8084fe4 <_ZNK6String9substringEj>

	if(command.startsWith("D"))
 8084100:	491f      	ldr	r1, [pc, #124]	; (8084180 <_Z17tinkerAnalogWrite6String+0xa0>)
 8084102:	a804      	add	r0, sp, #16
 8084104:	f000 fe5a 	bl	8084dbc <_ZN6StringC1EPKc>
 8084108:	4628      	mov	r0, r5
 808410a:	a904      	add	r1, sp, #16
 808410c:	f000 ff23 	bl	8084f56 <_ZNK6String10startsWithERKS_>
 8084110:	4607      	mov	r7, r0
 8084112:	a804      	add	r0, sp, #16
 8084114:	f000 fe08 	bl	8084d28 <_ZN6StringD1Ev>
 8084118:	b197      	cbz	r7, 8084140 <_Z17tinkerAnalogWrite6String+0x60>
	{
		pinMode(pinNumber, OUTPUT);
 808411a:	b2b6      	uxth	r6, r6
 808411c:	2101      	movs	r1, #1
 808411e:	4630      	mov	r0, r6
 8084120:	f003 fc68 	bl	80879f4 <pinMode>
		analogWrite(pinNumber, value.toInt());
 8084124:	4668      	mov	r0, sp
 8084126:	f000 ff64 	bl	8084ff2 <_ZNK6String5toIntEv>
 808412a:	4601      	mov	r1, r0
 808412c:	4630      	mov	r0, r6
		return 1;
	}
	else if(command.startsWith("A"))
	{
		pinMode(pinNumber+10, OUTPUT);
		analogWrite(pinNumber+10, value.toInt());
 808412e:	f003 fcb5 	bl	8087a9c <_Z11analogWritetm>
		return 1;
 8084132:	2401      	movs	r4, #1
	String value = command.substring(3);
 8084134:	4668      	mov	r0, sp
 8084136:	f000 fdf7 	bl	8084d28 <_ZN6StringD1Ev>
	}
	else return -2;
}
 808413a:	4620      	mov	r0, r4
 808413c:	b009      	add	sp, #36	; 0x24
 808413e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(command.startsWith("A"))
 8084140:	4910      	ldr	r1, [pc, #64]	; (8084184 <_Z17tinkerAnalogWrite6String+0xa4>)
 8084142:	a804      	add	r0, sp, #16
 8084144:	f000 fe3a 	bl	8084dbc <_ZN6StringC1EPKc>
 8084148:	4628      	mov	r0, r5
 808414a:	a904      	add	r1, sp, #16
 808414c:	f000 ff03 	bl	8084f56 <_ZNK6String10startsWithERKS_>
 8084150:	4605      	mov	r5, r0
 8084152:	a804      	add	r0, sp, #16
 8084154:	f000 fde8 	bl	8084d28 <_ZN6StringD1Ev>
 8084158:	b15d      	cbz	r5, 8084172 <_Z17tinkerAnalogWrite6String+0x92>
		pinMode(pinNumber+10, OUTPUT);
 808415a:	3c26      	subs	r4, #38	; 0x26
 808415c:	b2a4      	uxth	r4, r4
 808415e:	2101      	movs	r1, #1
 8084160:	4620      	mov	r0, r4
 8084162:	f003 fc47 	bl	80879f4 <pinMode>
		analogWrite(pinNumber+10, value.toInt());
 8084166:	4668      	mov	r0, sp
 8084168:	f000 ff43 	bl	8084ff2 <_ZNK6String5toIntEv>
 808416c:	4601      	mov	r1, r0
 808416e:	4620      	mov	r0, r4
 8084170:	e7dd      	b.n	808412e <_Z17tinkerAnalogWrite6String+0x4e>
	else return -2;
 8084172:	f06f 0401 	mvn.w	r4, #1
 8084176:	e7dd      	b.n	8084134 <_Z17tinkerAnalogWrite6String+0x54>
	if (pinNumber< 0 || pinNumber >7) return -1;
 8084178:	f04f 34ff 	mov.w	r4, #4294967295
 808417c:	e7dd      	b.n	808413a <_Z17tinkerAnalogWrite6String+0x5a>
 808417e:	bf00      	nop
 8084180:	08089524 	.word	0x08089524
 8084184:	08089d3c 	.word	0x08089d3c

08084188 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 8084188:	b508      	push	{r3, lr}
 808418a:	4b02      	ldr	r3, [pc, #8]	; (8084194 <HAL_Validate_Pin_Function+0xc>)
 808418c:	681b      	ldr	r3, [r3, #0]
 808418e:	685b      	ldr	r3, [r3, #4]
 8084190:	9301      	str	r3, [sp, #4]
 8084192:	bd08      	pop	{r3, pc}
 8084194:	080401b0 	.word	0x080401b0

08084198 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8084198:	b508      	push	{r3, lr}
 808419a:	4b02      	ldr	r3, [pc, #8]	; (80841a4 <HAL_Pin_Mode+0xc>)
 808419c:	681b      	ldr	r3, [r3, #0]
 808419e:	689b      	ldr	r3, [r3, #8]
 80841a0:	9301      	str	r3, [sp, #4]
 80841a2:	bd08      	pop	{r3, pc}
 80841a4:	080401b0 	.word	0x080401b0

080841a8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80841a8:	b508      	push	{r3, lr}
 80841aa:	4b02      	ldr	r3, [pc, #8]	; (80841b4 <HAL_Get_Pin_Mode+0xc>)
 80841ac:	681b      	ldr	r3, [r3, #0]
 80841ae:	68db      	ldr	r3, [r3, #12]
 80841b0:	9301      	str	r3, [sp, #4]
 80841b2:	bd08      	pop	{r3, pc}
 80841b4:	080401b0 	.word	0x080401b0

080841b8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80841b8:	b508      	push	{r3, lr}
 80841ba:	4b02      	ldr	r3, [pc, #8]	; (80841c4 <HAL_GPIO_Write+0xc>)
 80841bc:	681b      	ldr	r3, [r3, #0]
 80841be:	691b      	ldr	r3, [r3, #16]
 80841c0:	9301      	str	r3, [sp, #4]
 80841c2:	bd08      	pop	{r3, pc}
 80841c4:	080401b0 	.word	0x080401b0

080841c8 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80841c8:	b508      	push	{r3, lr}
 80841ca:	4b02      	ldr	r3, [pc, #8]	; (80841d4 <HAL_GPIO_Read+0xc>)
 80841cc:	681b      	ldr	r3, [r3, #0]
 80841ce:	695b      	ldr	r3, [r3, #20]
 80841d0:	9301      	str	r3, [sp, #4]
 80841d2:	bd08      	pop	{r3, pc}
 80841d4:	080401b0 	.word	0x080401b0

080841d8 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 80841d8:	b508      	push	{r3, lr}
 80841da:	4b02      	ldr	r3, [pc, #8]	; (80841e4 <HAL_Interrupts_Attach+0xc>)
 80841dc:	681b      	ldr	r3, [r3, #0]
 80841de:	699b      	ldr	r3, [r3, #24]
 80841e0:	9301      	str	r3, [sp, #4]
 80841e2:	bd08      	pop	{r3, pc}
 80841e4:	080401b0 	.word	0x080401b0

080841e8 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
 80841e8:	b508      	push	{r3, lr}
 80841ea:	4b02      	ldr	r3, [pc, #8]	; (80841f4 <HAL_Interrupts_Detach+0xc>)
 80841ec:	681b      	ldr	r3, [r3, #0]
 80841ee:	69db      	ldr	r3, [r3, #28]
 80841f0:	9301      	str	r3, [sp, #4]
 80841f2:	bd08      	pop	{r3, pc}
 80841f4:	080401b0 	.word	0x080401b0

080841f8 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
 80841f8:	b508      	push	{r3, lr}
 80841fa:	4b02      	ldr	r3, [pc, #8]	; (8084204 <HAL_Interrupts_Enable_All+0xc>)
 80841fc:	681b      	ldr	r3, [r3, #0]
 80841fe:	6a1b      	ldr	r3, [r3, #32]
 8084200:	9301      	str	r3, [sp, #4]
 8084202:	bd08      	pop	{r3, pc}
 8084204:	080401b0 	.word	0x080401b0

08084208 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
 8084208:	b508      	push	{r3, lr}
 808420a:	4b02      	ldr	r3, [pc, #8]	; (8084214 <HAL_Interrupts_Disable_All+0xc>)
 808420c:	681b      	ldr	r3, [r3, #0]
 808420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8084210:	9301      	str	r3, [sp, #4]
 8084212:	bd08      	pop	{r3, pc}
 8084214:	080401b0 	.word	0x080401b0

08084218 <HAL_DAC_Write>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
 8084218:	b508      	push	{r3, lr}
 808421a:	4b02      	ldr	r3, [pc, #8]	; (8084224 <HAL_DAC_Write+0xc>)
 808421c:	681b      	ldr	r3, [r3, #0]
 808421e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8084220:	9301      	str	r3, [sp, #4]
 8084222:	bd08      	pop	{r3, pc}
 8084224:	080401b0 	.word	0x080401b0

08084228 <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 8084228:	b508      	push	{r3, lr}
 808422a:	4b02      	ldr	r3, [pc, #8]	; (8084234 <hal_adc_read+0xc>)
 808422c:	681b      	ldr	r3, [r3, #0]
 808422e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8084230:	9301      	str	r3, [sp, #4]
 8084232:	bd08      	pop	{r3, pc}
 8084234:	080401b0 	.word	0x080401b0

08084238 <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
 8084238:	b508      	push	{r3, lr}
 808423a:	4b02      	ldr	r3, [pc, #8]	; (8084244 <hal_pwm_write_ext+0xc>)
 808423c:	681b      	ldr	r3, [r3, #0]
 808423e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8084240:	9301      	str	r3, [sp, #4]
 8084242:	bd08      	pop	{r3, pc}
 8084244:	080401b0 	.word	0x080401b0

08084248 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8084248:	b508      	push	{r3, lr}
 808424a:	4b02      	ldr	r3, [pc, #8]	; (8084254 <HAL_RNG_GetRandomNumber+0xc>)
 808424c:	681b      	ldr	r3, [r3, #0]
 808424e:	685b      	ldr	r3, [r3, #4]
 8084250:	9301      	str	r3, [sp, #4]
 8084252:	bd08      	pop	{r3, pc}
 8084254:	0804019c 	.word	0x0804019c

08084258 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
 8084258:	b508      	push	{r3, lr}
 808425a:	4b02      	ldr	r3, [pc, #8]	; (8084264 <HAL_Delay_Milliseconds+0xc>)
 808425c:	681b      	ldr	r3, [r3, #0]
 808425e:	689b      	ldr	r3, [r3, #8]
 8084260:	9301      	str	r3, [sp, #4]
 8084262:	bd08      	pop	{r3, pc}
 8084264:	0804019c 	.word	0x0804019c

08084268 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 8084268:	b508      	push	{r3, lr}
 808426a:	4b02      	ldr	r3, [pc, #8]	; (8084274 <HAL_Delay_Microseconds+0xc>)
 808426c:	681b      	ldr	r3, [r3, #0]
 808426e:	68db      	ldr	r3, [r3, #12]
 8084270:	9301      	str	r3, [sp, #4]
 8084272:	bd08      	pop	{r3, pc}
 8084274:	0804019c 	.word	0x0804019c

08084278 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8084278:	b508      	push	{r3, lr}
 808427a:	4b02      	ldr	r3, [pc, #8]	; (8084284 <HAL_Timer_Get_Milli_Seconds+0xc>)
 808427c:	681b      	ldr	r3, [r3, #0]
 808427e:	695b      	ldr	r3, [r3, #20]
 8084280:	9301      	str	r3, [sp, #4]
 8084282:	bd08      	pop	{r3, pc}
 8084284:	0804019c 	.word	0x0804019c

08084288 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 8084288:	b508      	push	{r3, lr}
 808428a:	4b02      	ldr	r3, [pc, #8]	; (8084294 <hal_rtc_time_is_valid+0xc>)
 808428c:	681b      	ldr	r3, [r3, #0]
 808428e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8084290:	9301      	str	r3, [sp, #4]
 8084292:	bd08      	pop	{r3, pc}
 8084294:	0804019c 	.word	0x0804019c

08084298 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 8084298:	b508      	push	{r3, lr}
 808429a:	4b02      	ldr	r3, [pc, #8]	; (80842a4 <hal_rtc_get_time+0xc>)
 808429c:	681b      	ldr	r3, [r3, #0]
 808429e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80842a0:	9301      	str	r3, [sp, #4]
 80842a2:	bd08      	pop	{r3, pc}
 80842a4:	0804019c 	.word	0x0804019c

080842a8 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 80842a8:	b508      	push	{r3, lr}
 80842aa:	4b02      	ldr	r3, [pc, #8]	; (80842b4 <HAL_Core_Get_Last_Reset_Info+0xc>)
 80842ac:	681b      	ldr	r3, [r3, #0]
 80842ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80842b0:	9301      	str	r3, [sp, #4]
 80842b2:	bd08      	pop	{r3, pc}
 80842b4:	080401b8 	.word	0x080401b8

080842b8 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
 80842b8:	b508      	push	{r3, lr}
 80842ba:	4b02      	ldr	r3, [pc, #8]	; (80842c4 <os_thread_create+0xc>)
 80842bc:	681b      	ldr	r3, [r3, #0]
 80842be:	685b      	ldr	r3, [r3, #4]
 80842c0:	9301      	str	r3, [sp, #4]
 80842c2:	bd08      	pop	{r3, pc}
 80842c4:	080401d0 	.word	0x080401d0

080842c8 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
 80842c8:	b508      	push	{r3, lr}
 80842ca:	4b02      	ldr	r3, [pc, #8]	; (80842d4 <os_thread_is_current+0xc>)
 80842cc:	681b      	ldr	r3, [r3, #0]
 80842ce:	689b      	ldr	r3, [r3, #8]
 80842d0:	9301      	str	r3, [sp, #4]
 80842d2:	bd08      	pop	{r3, pc}
 80842d4:	080401d0 	.word	0x080401d0

080842d8 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
 80842d8:	b508      	push	{r3, lr}
 80842da:	4b02      	ldr	r3, [pc, #8]	; (80842e4 <os_thread_yield+0xc>)
 80842dc:	681b      	ldr	r3, [r3, #0]
 80842de:	68db      	ldr	r3, [r3, #12]
 80842e0:	9301      	str	r3, [sp, #4]
 80842e2:	bd08      	pop	{r3, pc}
 80842e4:	080401d0 	.word	0x080401d0

080842e8 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
 80842e8:	b508      	push	{r3, lr}
 80842ea:	4b02      	ldr	r3, [pc, #8]	; (80842f4 <os_thread_join+0xc>)
 80842ec:	681b      	ldr	r3, [r3, #0]
 80842ee:	691b      	ldr	r3, [r3, #16]
 80842f0:	9301      	str	r3, [sp, #4]
 80842f2:	bd08      	pop	{r3, pc}
 80842f4:	080401d0 	.word	0x080401d0

080842f8 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
 80842f8:	b508      	push	{r3, lr}
 80842fa:	4b02      	ldr	r3, [pc, #8]	; (8084304 <os_thread_cleanup+0xc>)
 80842fc:	681b      	ldr	r3, [r3, #0]
 80842fe:	695b      	ldr	r3, [r3, #20]
 8084300:	9301      	str	r3, [sp, #4]
 8084302:	bd08      	pop	{r3, pc}
 8084304:	080401d0 	.word	0x080401d0

08084308 <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
 8084308:	b508      	push	{r3, lr}
 808430a:	4b02      	ldr	r3, [pc, #8]	; (8084314 <os_thread_scheduling+0xc>)
 808430c:	681b      	ldr	r3, [r3, #0]
 808430e:	69db      	ldr	r3, [r3, #28]
 8084310:	9301      	str	r3, [sp, #4]
 8084312:	bd08      	pop	{r3, pc}
 8084314:	080401d0 	.word	0x080401d0

08084318 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
 8084318:	b508      	push	{r3, lr}
 808431a:	4b02      	ldr	r3, [pc, #8]	; (8084324 <os_timer_create+0xc>)
 808431c:	681b      	ldr	r3, [r3, #0]
 808431e:	6a1b      	ldr	r3, [r3, #32]
 8084320:	9301      	str	r3, [sp, #4]
 8084322:	bd08      	pop	{r3, pc}
 8084324:	080401d0 	.word	0x080401d0

08084328 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
 8084328:	b508      	push	{r3, lr}
 808432a:	4b02      	ldr	r3, [pc, #8]	; (8084334 <os_timer_destroy+0xc>)
 808432c:	681b      	ldr	r3, [r3, #0]
 808432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8084330:	9301      	str	r3, [sp, #4]
 8084332:	bd08      	pop	{r3, pc}
 8084334:	080401d0 	.word	0x080401d0

08084338 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
 8084338:	b508      	push	{r3, lr}
 808433a:	4b02      	ldr	r3, [pc, #8]	; (8084344 <os_timer_get_id+0xc>)
 808433c:	681b      	ldr	r3, [r3, #0]
 808433e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8084340:	9301      	str	r3, [sp, #4]
 8084342:	bd08      	pop	{r3, pc}
 8084344:	080401d0 	.word	0x080401d0

08084348 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
 8084348:	b508      	push	{r3, lr}
 808434a:	4b02      	ldr	r3, [pc, #8]	; (8084354 <os_timer_change+0xc>)
 808434c:	681b      	ldr	r3, [r3, #0]
 808434e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8084350:	9301      	str	r3, [sp, #4]
 8084352:	bd08      	pop	{r3, pc}
 8084354:	080401d0 	.word	0x080401d0

08084358 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 8084358:	b508      	push	{r3, lr}
 808435a:	4b02      	ldr	r3, [pc, #8]	; (8084364 <os_mutex_recursive_create+0xc>)
 808435c:	681b      	ldr	r3, [r3, #0]
 808435e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8084360:	9301      	str	r3, [sp, #4]
 8084362:	bd08      	pop	{r3, pc}
 8084364:	080401d0 	.word	0x080401d0

08084368 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 8084368:	b508      	push	{r3, lr}
 808436a:	4b02      	ldr	r3, [pc, #8]	; (8084374 <os_mutex_recursive_destroy+0xc>)
 808436c:	681b      	ldr	r3, [r3, #0]
 808436e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8084370:	9301      	str	r3, [sp, #4]
 8084372:	bd08      	pop	{r3, pc}
 8084374:	080401d0 	.word	0x080401d0

08084378 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 8084378:	b508      	push	{r3, lr}
 808437a:	4b02      	ldr	r3, [pc, #8]	; (8084384 <os_mutex_recursive_lock+0xc>)
 808437c:	681b      	ldr	r3, [r3, #0]
 808437e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8084380:	9301      	str	r3, [sp, #4]
 8084382:	bd08      	pop	{r3, pc}
 8084384:	080401d0 	.word	0x080401d0

08084388 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 8084388:	b508      	push	{r3, lr}
 808438a:	4b02      	ldr	r3, [pc, #8]	; (8084394 <os_mutex_recursive_unlock+0xc>)
 808438c:	681b      	ldr	r3, [r3, #0]
 808438e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8084390:	9301      	str	r3, [sp, #4]
 8084392:	bd08      	pop	{r3, pc}
 8084394:	080401d0 	.word	0x080401d0

08084398 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
 8084398:	b508      	push	{r3, lr}
 808439a:	4b02      	ldr	r3, [pc, #8]	; (80843a4 <os_thread_exit+0xc>)
 808439c:	681b      	ldr	r3, [r3, #0]
 808439e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80843a0:	9301      	str	r3, [sp, #4]
 80843a2:	bd08      	pop	{r3, pc}
 80843a4:	080401d0 	.word	0x080401d0

080843a8 <os_timer_set_id>:

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
 80843a8:	b508      	push	{r3, lr}
 80843aa:	4b02      	ldr	r3, [pc, #8]	; (80843b4 <os_timer_set_id+0xc>)
 80843ac:	681b      	ldr	r3, [r3, #0]
 80843ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80843b0:	9301      	str	r3, [sp, #4]
 80843b2:	bd08      	pop	{r3, pc}
 80843b4:	080401d0 	.word	0x080401d0

080843b8 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80843b8:	b508      	push	{r3, lr}
 80843ba:	4b02      	ldr	r3, [pc, #8]	; (80843c4 <hal_usart_init+0xc>)
 80843bc:	681b      	ldr	r3, [r3, #0]
 80843be:	699b      	ldr	r3, [r3, #24]
 80843c0:	9301      	str	r3, [sp, #4]
 80843c2:	bd08      	pop	{r3, pc}
 80843c4:	080401c4 	.word	0x080401c4

080843c8 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 80843c8:	b508      	push	{r3, lr}
 80843ca:	4b02      	ldr	r3, [pc, #8]	; (80843d4 <hal_usart_end+0xc>)
 80843cc:	681b      	ldr	r3, [r3, #0]
 80843ce:	6a1b      	ldr	r3, [r3, #32]
 80843d0:	9301      	str	r3, [sp, #4]
 80843d2:	bd08      	pop	{r3, pc}
 80843d4:	080401c4 	.word	0x080401c4

080843d8 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80843d8:	b508      	push	{r3, lr}
 80843da:	4b02      	ldr	r3, [pc, #8]	; (80843e4 <hal_usart_write+0xc>)
 80843dc:	681b      	ldr	r3, [r3, #0]
 80843de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80843e0:	9301      	str	r3, [sp, #4]
 80843e2:	bd08      	pop	{r3, pc}
 80843e4:	080401c4 	.word	0x080401c4

080843e8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80843e8:	b508      	push	{r3, lr}
 80843ea:	4b02      	ldr	r3, [pc, #8]	; (80843f4 <hal_usart_available+0xc>)
 80843ec:	681b      	ldr	r3, [r3, #0]
 80843ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80843f0:	9301      	str	r3, [sp, #4]
 80843f2:	bd08      	pop	{r3, pc}
 80843f4:	080401c4 	.word	0x080401c4

080843f8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80843f8:	b508      	push	{r3, lr}
 80843fa:	4b02      	ldr	r3, [pc, #8]	; (8084404 <hal_usart_read+0xc>)
 80843fc:	681b      	ldr	r3, [r3, #0]
 80843fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8084400:	9301      	str	r3, [sp, #4]
 8084402:	bd08      	pop	{r3, pc}
 8084404:	080401c4 	.word	0x080401c4

08084408 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 8084408:	b508      	push	{r3, lr}
 808440a:	4b02      	ldr	r3, [pc, #8]	; (8084414 <hal_usart_peek+0xc>)
 808440c:	681b      	ldr	r3, [r3, #0]
 808440e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8084410:	9301      	str	r3, [sp, #4]
 8084412:	bd08      	pop	{r3, pc}
 8084414:	080401c4 	.word	0x080401c4

08084418 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 8084418:	b508      	push	{r3, lr}
 808441a:	4b02      	ldr	r3, [pc, #8]	; (8084424 <hal_usart_flush+0xc>)
 808441c:	681b      	ldr	r3, [r3, #0]
 808441e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8084420:	9301      	str	r3, [sp, #4]
 8084422:	bd08      	pop	{r3, pc}
 8084424:	080401c4 	.word	0x080401c4

08084428 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 8084428:	b508      	push	{r3, lr}
 808442a:	4b02      	ldr	r3, [pc, #8]	; (8084434 <hal_usart_is_enabled+0xc>)
 808442c:	681b      	ldr	r3, [r3, #0]
 808442e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8084430:	9301      	str	r3, [sp, #4]
 8084432:	bd08      	pop	{r3, pc}
 8084434:	080401c4 	.word	0x080401c4

08084438 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 8084438:	b508      	push	{r3, lr}
 808443a:	4b02      	ldr	r3, [pc, #8]	; (8084444 <hal_usart_available_data_for_write+0xc>)
 808443c:	681b      	ldr	r3, [r3, #0]
 808443e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8084440:	9301      	str	r3, [sp, #4]
 8084442:	bd08      	pop	{r3, pc}
 8084444:	080401c4 	.word	0x080401c4

08084448 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 8084448:	b508      	push	{r3, lr}
 808444a:	4b02      	ldr	r3, [pc, #8]	; (8084454 <hal_usart_begin_config+0xc>)
 808444c:	681b      	ldr	r3, [r3, #0]
 808444e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8084450:	9301      	str	r3, [sp, #4]
 8084452:	bd08      	pop	{r3, pc}
 8084454:	080401c4 	.word	0x080401c4

08084458 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 8084458:	b508      	push	{r3, lr}
 808445a:	4b02      	ldr	r3, [pc, #8]	; (8084464 <hal_i2c_begin+0xc>)
 808445c:	681b      	ldr	r3, [r3, #0]
 808445e:	68db      	ldr	r3, [r3, #12]
 8084460:	9301      	str	r3, [sp, #4]
 8084462:	bd08      	pop	{r3, pc}
 8084464:	080401ac 	.word	0x080401ac

08084468 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 8084468:	b508      	push	{r3, lr}
 808446a:	4b02      	ldr	r3, [pc, #8]	; (8084474 <hal_i2c_begin_transmission+0xc>)
 808446c:	681b      	ldr	r3, [r3, #0]
 808446e:	699b      	ldr	r3, [r3, #24]
 8084470:	9301      	str	r3, [sp, #4]
 8084472:	bd08      	pop	{r3, pc}
 8084474:	080401ac 	.word	0x080401ac

08084478 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 8084478:	b508      	push	{r3, lr}
 808447a:	4b02      	ldr	r3, [pc, #8]	; (8084484 <hal_i2c_end_transmission+0xc>)
 808447c:	681b      	ldr	r3, [r3, #0]
 808447e:	69db      	ldr	r3, [r3, #28]
 8084480:	9301      	str	r3, [sp, #4]
 8084482:	bd08      	pop	{r3, pc}
 8084484:	080401ac 	.word	0x080401ac

08084488 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 8084488:	b508      	push	{r3, lr}
 808448a:	4b02      	ldr	r3, [pc, #8]	; (8084494 <hal_i2c_write+0xc>)
 808448c:	681b      	ldr	r3, [r3, #0]
 808448e:	6a1b      	ldr	r3, [r3, #32]
 8084490:	9301      	str	r3, [sp, #4]
 8084492:	bd08      	pop	{r3, pc}
 8084494:	080401ac 	.word	0x080401ac

08084498 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 8084498:	b508      	push	{r3, lr}
 808449a:	4b02      	ldr	r3, [pc, #8]	; (80844a4 <hal_i2c_available+0xc>)
 808449c:	681b      	ldr	r3, [r3, #0]
 808449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80844a0:	9301      	str	r3, [sp, #4]
 80844a2:	bd08      	pop	{r3, pc}
 80844a4:	080401ac 	.word	0x080401ac

080844a8 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80844a8:	b508      	push	{r3, lr}
 80844aa:	4b02      	ldr	r3, [pc, #8]	; (80844b4 <hal_i2c_read+0xc>)
 80844ac:	681b      	ldr	r3, [r3, #0]
 80844ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80844b0:	9301      	str	r3, [sp, #4]
 80844b2:	bd08      	pop	{r3, pc}
 80844b4:	080401ac 	.word	0x080401ac

080844b8 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80844b8:	b508      	push	{r3, lr}
 80844ba:	4b02      	ldr	r3, [pc, #8]	; (80844c4 <hal_i2c_peek+0xc>)
 80844bc:	681b      	ldr	r3, [r3, #0]
 80844be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80844c0:	9301      	str	r3, [sp, #4]
 80844c2:	bd08      	pop	{r3, pc}
 80844c4:	080401ac 	.word	0x080401ac

080844c8 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80844c8:	b508      	push	{r3, lr}
 80844ca:	4b02      	ldr	r3, [pc, #8]	; (80844d4 <hal_i2c_flush+0xc>)
 80844cc:	681b      	ldr	r3, [r3, #0]
 80844ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80844d0:	9301      	str	r3, [sp, #4]
 80844d2:	bd08      	pop	{r3, pc}
 80844d4:	080401ac 	.word	0x080401ac

080844d8 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80844d8:	b508      	push	{r3, lr}
 80844da:	4b02      	ldr	r3, [pc, #8]	; (80844e4 <hal_i2c_is_enabled+0xc>)
 80844dc:	681b      	ldr	r3, [r3, #0]
 80844de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80844e0:	9301      	str	r3, [sp, #4]
 80844e2:	bd08      	pop	{r3, pc}
 80844e4:	080401ac 	.word	0x080401ac

080844e8 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80844e8:	b508      	push	{r3, lr}
 80844ea:	4b02      	ldr	r3, [pc, #8]	; (80844f4 <hal_i2c_init+0xc>)
 80844ec:	681b      	ldr	r3, [r3, #0]
 80844ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80844f0:	9301      	str	r3, [sp, #4]
 80844f2:	bd08      	pop	{r3, pc}
 80844f4:	080401ac 	.word	0x080401ac

080844f8 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
 80844f8:	b508      	push	{r3, lr}
 80844fa:	4b02      	ldr	r3, [pc, #8]	; (8084504 <hal_i2c_lock+0xc>)
 80844fc:	681b      	ldr	r3, [r3, #0]
 80844fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8084500:	9301      	str	r3, [sp, #4]
 8084502:	bd08      	pop	{r3, pc}
 8084504:	080401ac 	.word	0x080401ac

08084508 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
 8084508:	b508      	push	{r3, lr}
 808450a:	4b02      	ldr	r3, [pc, #8]	; (8084514 <hal_i2c_unlock+0xc>)
 808450c:	681b      	ldr	r3, [r3, #0]
 808450e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8084510:	9301      	str	r3, [sp, #4]
 8084512:	bd08      	pop	{r3, pc}
 8084514:	080401ac 	.word	0x080401ac

08084518 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 8084518:	b508      	push	{r3, lr}
 808451a:	4b02      	ldr	r3, [pc, #8]	; (8084524 <hal_i2c_request_ex+0xc>)
 808451c:	681b      	ldr	r3, [r3, #0]
 808451e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8084520:	9301      	str	r3, [sp, #4]
 8084522:	bd08      	pop	{r3, pc}
 8084524:	080401ac 	.word	0x080401ac

08084528 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 8084528:	b508      	push	{r3, lr}
 808452a:	4b02      	ldr	r3, [pc, #8]	; (8084534 <hal_spi_begin+0xc>)
 808452c:	681b      	ldr	r3, [r3, #0]
 808452e:	681b      	ldr	r3, [r3, #0]
 8084530:	9301      	str	r3, [sp, #4]
 8084532:	bd08      	pop	{r3, pc}
 8084534:	080401b4 	.word	0x080401b4

08084538 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
 8084538:	b508      	push	{r3, lr}
 808453a:	4b02      	ldr	r3, [pc, #8]	; (8084544 <hal_spi_set_bit_order+0xc>)
 808453c:	681b      	ldr	r3, [r3, #0]
 808453e:	689b      	ldr	r3, [r3, #8]
 8084540:	9301      	str	r3, [sp, #4]
 8084542:	bd08      	pop	{r3, pc}
 8084544:	080401b4 	.word	0x080401b4

08084548 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
 8084548:	b508      	push	{r3, lr}
 808454a:	4b02      	ldr	r3, [pc, #8]	; (8084554 <hal_spi_set_data_mode+0xc>)
 808454c:	681b      	ldr	r3, [r3, #0]
 808454e:	68db      	ldr	r3, [r3, #12]
 8084550:	9301      	str	r3, [sp, #4]
 8084552:	bd08      	pop	{r3, pc}
 8084554:	080401b4 	.word	0x080401b4

08084558 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
 8084558:	b508      	push	{r3, lr}
 808455a:	4b02      	ldr	r3, [pc, #8]	; (8084564 <hal_spi_set_clock_divider+0xc>)
 808455c:	681b      	ldr	r3, [r3, #0]
 808455e:	691b      	ldr	r3, [r3, #16]
 8084560:	9301      	str	r3, [sp, #4]
 8084562:	bd08      	pop	{r3, pc}
 8084564:	080401b4 	.word	0x080401b4

08084568 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 8084568:	b508      	push	{r3, lr}
 808456a:	4b02      	ldr	r3, [pc, #8]	; (8084574 <hal_spi_transfer+0xc>)
 808456c:	681b      	ldr	r3, [r3, #0]
 808456e:	695b      	ldr	r3, [r3, #20]
 8084570:	9301      	str	r3, [sp, #4]
 8084572:	bd08      	pop	{r3, pc}
 8084574:	080401b4 	.word	0x080401b4

08084578 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 8084578:	b508      	push	{r3, lr}
 808457a:	4b02      	ldr	r3, [pc, #8]	; (8084584 <hal_spi_init+0xc>)
 808457c:	681b      	ldr	r3, [r3, #0]
 808457e:	69db      	ldr	r3, [r3, #28]
 8084580:	9301      	str	r3, [sp, #4]
 8084582:	bd08      	pop	{r3, pc}
 8084584:	080401b4 	.word	0x080401b4

08084588 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 8084588:	b508      	push	{r3, lr}
 808458a:	4b02      	ldr	r3, [pc, #8]	; (8084594 <hal_spi_is_enabled+0xc>)
 808458c:	681b      	ldr	r3, [r3, #0]
 808458e:	6a1b      	ldr	r3, [r3, #32]
 8084590:	9301      	str	r3, [sp, #4]
 8084592:	bd08      	pop	{r3, pc}
 8084594:	080401b4 	.word	0x080401b4

08084598 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 8084598:	b508      	push	{r3, lr}
 808459a:	4b02      	ldr	r3, [pc, #8]	; (80845a4 <hal_spi_info+0xc>)
 808459c:	681b      	ldr	r3, [r3, #0]
 808459e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80845a0:	9301      	str	r3, [sp, #4]
 80845a2:	bd08      	pop	{r3, pc}
 80845a4:	080401b4 	.word	0x080401b4

080845a8 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80845a8:	b508      	push	{r3, lr}
 80845aa:	4b02      	ldr	r3, [pc, #8]	; (80845b4 <inet_gethostbyname+0xc>)
 80845ac:	681b      	ldr	r3, [r3, #0]
 80845ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80845b0:	9301      	str	r3, [sp, #4]
 80845b2:	bd08      	pop	{r3, pc}
 80845b4:	08060020 	.word	0x08060020

080845b8 <cellular_command>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
 80845b8:	b508      	push	{r3, lr}
 80845ba:	4b02      	ldr	r3, [pc, #8]	; (80845c4 <cellular_command+0xc>)
 80845bc:	681b      	ldr	r3, [r3, #0]
 80845be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80845c0:	9301      	str	r3, [sp, #4]
 80845c2:	bd08      	pop	{r3, pc}
 80845c4:	08060020 	.word	0x08060020

080845c8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80845c8:	b508      	push	{r3, lr}
 80845ca:	4b02      	ldr	r3, [pc, #8]	; (80845d4 <HAL_USB_USART_Init+0xc>)
 80845cc:	681b      	ldr	r3, [r3, #0]
 80845ce:	681b      	ldr	r3, [r3, #0]
 80845d0:	9301      	str	r3, [sp, #4]
 80845d2:	bd08      	pop	{r3, pc}
 80845d4:	0806001c 	.word	0x0806001c

080845d8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80845d8:	b508      	push	{r3, lr}
 80845da:	4b02      	ldr	r3, [pc, #8]	; (80845e4 <HAL_USB_USART_Begin+0xc>)
 80845dc:	681b      	ldr	r3, [r3, #0]
 80845de:	685b      	ldr	r3, [r3, #4]
 80845e0:	9301      	str	r3, [sp, #4]
 80845e2:	bd08      	pop	{r3, pc}
 80845e4:	0806001c 	.word	0x0806001c

080845e8 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 80845e8:	b508      	push	{r3, lr}
 80845ea:	4b02      	ldr	r3, [pc, #8]	; (80845f4 <HAL_USB_USART_End+0xc>)
 80845ec:	681b      	ldr	r3, [r3, #0]
 80845ee:	689b      	ldr	r3, [r3, #8]
 80845f0:	9301      	str	r3, [sp, #4]
 80845f2:	bd08      	pop	{r3, pc}
 80845f4:	0806001c 	.word	0x0806001c

080845f8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80845f8:	b508      	push	{r3, lr}
 80845fa:	4b02      	ldr	r3, [pc, #8]	; (8084604 <HAL_USB_USART_Available_Data+0xc>)
 80845fc:	681b      	ldr	r3, [r3, #0]
 80845fe:	691b      	ldr	r3, [r3, #16]
 8084600:	9301      	str	r3, [sp, #4]
 8084602:	bd08      	pop	{r3, pc}
 8084604:	0806001c 	.word	0x0806001c

08084608 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8084608:	b508      	push	{r3, lr}
 808460a:	4b02      	ldr	r3, [pc, #8]	; (8084614 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 808460c:	681b      	ldr	r3, [r3, #0]
 808460e:	695b      	ldr	r3, [r3, #20]
 8084610:	9301      	str	r3, [sp, #4]
 8084612:	bd08      	pop	{r3, pc}
 8084614:	0806001c 	.word	0x0806001c

08084618 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8084618:	b508      	push	{r3, lr}
 808461a:	4b02      	ldr	r3, [pc, #8]	; (8084624 <HAL_USB_USART_Receive_Data+0xc>)
 808461c:	681b      	ldr	r3, [r3, #0]
 808461e:	699b      	ldr	r3, [r3, #24]
 8084620:	9301      	str	r3, [sp, #4]
 8084622:	bd08      	pop	{r3, pc}
 8084624:	0806001c 	.word	0x0806001c

08084628 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8084628:	b508      	push	{r3, lr}
 808462a:	4b02      	ldr	r3, [pc, #8]	; (8084634 <HAL_USB_USART_Send_Data+0xc>)
 808462c:	681b      	ldr	r3, [r3, #0]
 808462e:	69db      	ldr	r3, [r3, #28]
 8084630:	9301      	str	r3, [sp, #4]
 8084632:	bd08      	pop	{r3, pc}
 8084634:	0806001c 	.word	0x0806001c

08084638 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8084638:	b508      	push	{r3, lr}
 808463a:	4b02      	ldr	r3, [pc, #8]	; (8084644 <HAL_USB_USART_Flush_Data+0xc>)
 808463c:	681b      	ldr	r3, [r3, #0]
 808463e:	6a1b      	ldr	r3, [r3, #32]
 8084640:	9301      	str	r3, [sp, #4]
 8084642:	bd08      	pop	{r3, pc}
 8084644:	0806001c 	.word	0x0806001c

08084648 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 8084648:	b508      	push	{r3, lr}
 808464a:	4b02      	ldr	r3, [pc, #8]	; (8084654 <panic_+0xc>)
 808464c:	681b      	ldr	r3, [r3, #0]
 808464e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8084650:	9301      	str	r3, [sp, #4]
 8084652:	bd08      	pop	{r3, pc}
 8084654:	080201a0 	.word	0x080201a0

08084658 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 8084658:	b508      	push	{r3, lr}
 808465a:	4b02      	ldr	r3, [pc, #8]	; (8084664 <log_message_v+0xc>)
 808465c:	681b      	ldr	r3, [r3, #0]
 808465e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8084660:	9301      	str	r3, [sp, #4]
 8084662:	bd08      	pop	{r3, pc}
 8084664:	080201a0 	.word	0x080201a0

08084668 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 8084668:	b508      	push	{r3, lr}
 808466a:	4b02      	ldr	r3, [pc, #8]	; (8084674 <log_level_name+0xc>)
 808466c:	681b      	ldr	r3, [r3, #0]
 808466e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8084670:	9301      	str	r3, [sp, #4]
 8084672:	bd08      	pop	{r3, pc}
 8084674:	080201a0 	.word	0x080201a0

08084678 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 8084678:	b508      	push	{r3, lr}
 808467a:	4b02      	ldr	r3, [pc, #8]	; (8084684 <log_set_callbacks+0xc>)
 808467c:	681b      	ldr	r3, [r3, #0]
 808467e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8084680:	9301      	str	r3, [sp, #4]
 8084682:	bd08      	pop	{r3, pc}
 8084684:	080201a0 	.word	0x080201a0

08084688 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 8084688:	b508      	push	{r3, lr}
 808468a:	4b02      	ldr	r3, [pc, #8]	; (8084694 <system_mode+0xc>)
 808468c:	681b      	ldr	r3, [r3, #0]
 808468e:	681b      	ldr	r3, [r3, #0]
 8084690:	9301      	str	r3, [sp, #4]
 8084692:	bd08      	pop	{r3, pc}
 8084694:	080401a4 	.word	0x080401a4

08084698 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8084698:	b508      	push	{r3, lr}
 808469a:	4b02      	ldr	r3, [pc, #8]	; (80846a4 <set_system_mode+0xc>)
 808469c:	681b      	ldr	r3, [r3, #0]
 808469e:	685b      	ldr	r3, [r3, #4]
 80846a0:	9301      	str	r3, [sp, #4]
 80846a2:	bd08      	pop	{r3, pc}
 80846a4:	080401a4 	.word	0x080401a4

080846a8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80846a8:	b508      	push	{r3, lr}
 80846aa:	4b02      	ldr	r3, [pc, #8]	; (80846b4 <system_delay_ms+0xc>)
 80846ac:	681b      	ldr	r3, [r3, #0]
 80846ae:	695b      	ldr	r3, [r3, #20]
 80846b0:	9301      	str	r3, [sp, #4]
 80846b2:	bd08      	pop	{r3, pc}
 80846b4:	080401a4 	.word	0x080401a4

080846b8 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
 80846b8:	b508      	push	{r3, lr}
 80846ba:	4b02      	ldr	r3, [pc, #8]	; (80846c4 <system_sleep+0xc>)
 80846bc:	681b      	ldr	r3, [r3, #0]
 80846be:	699b      	ldr	r3, [r3, #24]
 80846c0:	9301      	str	r3, [sp, #4]
 80846c2:	bd08      	pop	{r3, pc}
 80846c4:	080401a4 	.word	0x080401a4

080846c8 <system_subscribe_event>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
 80846c8:	b508      	push	{r3, lr}
 80846ca:	4b02      	ldr	r3, [pc, #8]	; (80846d4 <system_subscribe_event+0xc>)
 80846cc:	681b      	ldr	r3, [r3, #0]
 80846ce:	6a1b      	ldr	r3, [r3, #32]
 80846d0:	9301      	str	r3, [sp, #4]
 80846d2:	bd08      	pop	{r3, pc}
 80846d4:	080401a4 	.word	0x080401a4

080846d8 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80846d8:	b508      	push	{r3, lr}
 80846da:	4b02      	ldr	r3, [pc, #8]	; (80846e4 <system_thread_set_state+0xc>)
 80846dc:	681b      	ldr	r3, [r3, #0]
 80846de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80846e0:	9301      	str	r3, [sp, #4]
 80846e2:	bd08      	pop	{r3, pc}
 80846e4:	080401a4 	.word	0x080401a4

080846e8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80846e8:	b508      	push	{r3, lr}
 80846ea:	4b02      	ldr	r3, [pc, #8]	; (80846f4 <application_thread_current+0xc>)
 80846ec:	681b      	ldr	r3, [r3, #0]
 80846ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80846f0:	9301      	str	r3, [sp, #4]
 80846f2:	bd08      	pop	{r3, pc}
 80846f4:	080401a4 	.word	0x080401a4

080846f8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80846f8:	b508      	push	{r3, lr}
 80846fa:	4b02      	ldr	r3, [pc, #8]	; (8084704 <application_thread_invoke+0xc>)
 80846fc:	681b      	ldr	r3, [r3, #0]
 80846fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8084700:	9301      	str	r3, [sp, #4]
 8084702:	bd08      	pop	{r3, pc}
 8084704:	080401a4 	.word	0x080401a4

08084708 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 8084708:	b508      	push	{r3, lr}
 808470a:	4b02      	ldr	r3, [pc, #8]	; (8084714 <system_thread_get_state+0xc>)
 808470c:	681b      	ldr	r3, [r3, #0]
 808470e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8084710:	9301      	str	r3, [sp, #4]
 8084712:	bd08      	pop	{r3, pc}
 8084714:	080401a4 	.word	0x080401a4

08084718 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 8084718:	b508      	push	{r3, lr}
 808471a:	4b03      	ldr	r3, [pc, #12]	; (8084728 <system_ctrl_set_app_request_handler+0x10>)
 808471c:	681b      	ldr	r3, [r3, #0]
 808471e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8084722:	9301      	str	r3, [sp, #4]
 8084724:	bd08      	pop	{r3, pc}
 8084726:	0000      	.short	0x0000
 8084728:	080401a4 	.word	0x080401a4

0808472c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 808472c:	b508      	push	{r3, lr}
 808472e:	4b03      	ldr	r3, [pc, #12]	; (808473c <system_ctrl_set_result+0x10>)
 8084730:	681b      	ldr	r3, [r3, #0]
 8084732:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8084736:	9301      	str	r3, [sp, #4]
 8084738:	bd08      	pop	{r3, pc}
 808473a:	0000      	.short	0x0000
 808473c:	080401a4 	.word	0x080401a4

08084740 <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
 8084740:	b508      	push	{r3, lr}
 8084742:	4b03      	ldr	r3, [pc, #12]	; (8084750 <system_sleep_pins+0x10>)
 8084744:	681b      	ldr	r3, [r3, #0]
 8084746:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 808474a:	9301      	str	r3, [sp, #4]
 808474c:	bd08      	pop	{r3, pc}
 808474e:	0000      	.short	0x0000
 8084750:	080401a4 	.word	0x080401a4

08084754 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
 8084754:	b508      	push	{r3, lr}
 8084756:	4b03      	ldr	r3, [pc, #12]	; (8084764 <system_reset+0x10>)
 8084758:	681b      	ldr	r3, [r3, #0]
 808475a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 808475e:	9301      	str	r3, [sp, #4]
 8084760:	bd08      	pop	{r3, pc}
 8084762:	0000      	.short	0x0000
 8084764:	080401a4 	.word	0x080401a4

08084768 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 8084768:	b508      	push	{r3, lr}
 808476a:	4b02      	ldr	r3, [pc, #8]	; (8084774 <network_connect+0xc>)
 808476c:	681b      	ldr	r3, [r3, #0]
 808476e:	685b      	ldr	r3, [r3, #4]
 8084770:	9301      	str	r3, [sp, #4]
 8084772:	bd08      	pop	{r3, pc}
 8084774:	080401c8 	.word	0x080401c8

08084778 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 8084778:	b508      	push	{r3, lr}
 808477a:	4b02      	ldr	r3, [pc, #8]	; (8084784 <network_connecting+0xc>)
 808477c:	681b      	ldr	r3, [r3, #0]
 808477e:	689b      	ldr	r3, [r3, #8]
 8084780:	9301      	str	r3, [sp, #4]
 8084782:	bd08      	pop	{r3, pc}
 8084784:	080401c8 	.word	0x080401c8

08084788 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 8084788:	b508      	push	{r3, lr}
 808478a:	4b02      	ldr	r3, [pc, #8]	; (8084794 <network_disconnect+0xc>)
 808478c:	681b      	ldr	r3, [r3, #0]
 808478e:	68db      	ldr	r3, [r3, #12]
 8084790:	9301      	str	r3, [sp, #4]
 8084792:	bd08      	pop	{r3, pc}
 8084794:	080401c8 	.word	0x080401c8

08084798 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8084798:	b508      	push	{r3, lr}
 808479a:	4b02      	ldr	r3, [pc, #8]	; (80847a4 <network_ready+0xc>)
 808479c:	681b      	ldr	r3, [r3, #0]
 808479e:	691b      	ldr	r3, [r3, #16]
 80847a0:	9301      	str	r3, [sp, #4]
 80847a2:	bd08      	pop	{r3, pc}
 80847a4:	080401c8 	.word	0x080401c8

080847a8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80847a8:	b508      	push	{r3, lr}
 80847aa:	4b02      	ldr	r3, [pc, #8]	; (80847b4 <network_on+0xc>)
 80847ac:	681b      	ldr	r3, [r3, #0]
 80847ae:	695b      	ldr	r3, [r3, #20]
 80847b0:	9301      	str	r3, [sp, #4]
 80847b2:	bd08      	pop	{r3, pc}
 80847b4:	080401c8 	.word	0x080401c8

080847b8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80847b8:	b508      	push	{r3, lr}
 80847ba:	4b02      	ldr	r3, [pc, #8]	; (80847c4 <network_off+0xc>)
 80847bc:	681b      	ldr	r3, [r3, #0]
 80847be:	699b      	ldr	r3, [r3, #24]
 80847c0:	9301      	str	r3, [sp, #4]
 80847c2:	bd08      	pop	{r3, pc}
 80847c4:	080401c8 	.word	0x080401c8

080847c8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80847c8:	b508      	push	{r3, lr}
 80847ca:	4b02      	ldr	r3, [pc, #8]	; (80847d4 <network_listen+0xc>)
 80847cc:	681b      	ldr	r3, [r3, #0]
 80847ce:	69db      	ldr	r3, [r3, #28]
 80847d0:	9301      	str	r3, [sp, #4]
 80847d2:	bd08      	pop	{r3, pc}
 80847d4:	080401c8 	.word	0x080401c8

080847d8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80847d8:	b508      	push	{r3, lr}
 80847da:	4b02      	ldr	r3, [pc, #8]	; (80847e4 <network_listening+0xc>)
 80847dc:	681b      	ldr	r3, [r3, #0]
 80847de:	6a1b      	ldr	r3, [r3, #32]
 80847e0:	9301      	str	r3, [sp, #4]
 80847e2:	bd08      	pop	{r3, pc}
 80847e4:	080401c8 	.word	0x080401c8

080847e8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80847e8:	b508      	push	{r3, lr}
 80847ea:	4b02      	ldr	r3, [pc, #8]	; (80847f4 <network_set_listen_timeout+0xc>)
 80847ec:	681b      	ldr	r3, [r3, #0]
 80847ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80847f0:	9301      	str	r3, [sp, #4]
 80847f2:	bd08      	pop	{r3, pc}
 80847f4:	080401c8 	.word	0x080401c8

080847f8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80847f8:	b508      	push	{r3, lr}
 80847fa:	4b02      	ldr	r3, [pc, #8]	; (8084804 <network_get_listen_timeout+0xc>)
 80847fc:	681b      	ldr	r3, [r3, #0]
 80847fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8084800:	9301      	str	r3, [sp, #4]
 8084802:	bd08      	pop	{r3, pc}
 8084804:	080401c8 	.word	0x080401c8

08084808 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 8084808:	b508      	push	{r3, lr}
 808480a:	4b02      	ldr	r3, [pc, #8]	; (8084814 <network_is_on+0xc>)
 808480c:	681b      	ldr	r3, [r3, #0]
 808480e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8084810:	9301      	str	r3, [sp, #4]
 8084812:	bd08      	pop	{r3, pc}
 8084814:	080401c8 	.word	0x080401c8

08084818 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 8084818:	b508      	push	{r3, lr}
 808481a:	4b02      	ldr	r3, [pc, #8]	; (8084824 <network_is_off+0xc>)
 808481c:	681b      	ldr	r3, [r3, #0]
 808481e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8084820:	9301      	str	r3, [sp, #4]
 8084822:	bd08      	pop	{r3, pc}
 8084824:	080401c8 	.word	0x080401c8

08084828 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 8084828:	b508      	push	{r3, lr}
 808482a:	4b02      	ldr	r3, [pc, #8]	; (8084834 <spark_variable+0xc>)
 808482c:	681b      	ldr	r3, [r3, #0]
 808482e:	681b      	ldr	r3, [r3, #0]
 8084830:	9301      	str	r3, [sp, #4]
 8084832:	bd08      	pop	{r3, pc}
 8084834:	080401cc 	.word	0x080401cc

08084838 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 8084838:	b508      	push	{r3, lr}
 808483a:	4b02      	ldr	r3, [pc, #8]	; (8084844 <spark_function+0xc>)
 808483c:	681b      	ldr	r3, [r3, #0]
 808483e:	685b      	ldr	r3, [r3, #4]
 8084840:	9301      	str	r3, [sp, #4]
 8084842:	bd08      	pop	{r3, pc}
 8084844:	080401cc 	.word	0x080401cc

08084848 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 8084848:	b508      	push	{r3, lr}
 808484a:	4b02      	ldr	r3, [pc, #8]	; (8084854 <spark_process+0xc>)
 808484c:	681b      	ldr	r3, [r3, #0]
 808484e:	689b      	ldr	r3, [r3, #8]
 8084850:	9301      	str	r3, [sp, #4]
 8084852:	bd08      	pop	{r3, pc}
 8084854:	080401cc 	.word	0x080401cc

08084858 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 8084858:	b508      	push	{r3, lr}
 808485a:	4b02      	ldr	r3, [pc, #8]	; (8084864 <spark_cloud_flag_connect+0xc>)
 808485c:	681b      	ldr	r3, [r3, #0]
 808485e:	68db      	ldr	r3, [r3, #12]
 8084860:	9301      	str	r3, [sp, #4]
 8084862:	bd08      	pop	{r3, pc}
 8084864:	080401cc 	.word	0x080401cc

08084868 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 8084868:	b508      	push	{r3, lr}
 808486a:	4b02      	ldr	r3, [pc, #8]	; (8084874 <spark_cloud_flag_connected+0xc>)
 808486c:	681b      	ldr	r3, [r3, #0]
 808486e:	695b      	ldr	r3, [r3, #20]
 8084870:	9301      	str	r3, [sp, #4]
 8084872:	bd08      	pop	{r3, pc}
 8084874:	080401cc 	.word	0x080401cc

08084878 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 8084878:	b508      	push	{r3, lr}
 808487a:	4b02      	ldr	r3, [pc, #8]	; (8084884 <spark_deviceID+0xc>)
 808487c:	681b      	ldr	r3, [r3, #0]
 808487e:	69db      	ldr	r3, [r3, #28]
 8084880:	9301      	str	r3, [sp, #4]
 8084882:	bd08      	pop	{r3, pc}
 8084884:	080401cc 	.word	0x080401cc

08084888 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 8084888:	b508      	push	{r3, lr}
 808488a:	4b02      	ldr	r3, [pc, #8]	; (8084894 <spark_send_event+0xc>)
 808488c:	681b      	ldr	r3, [r3, #0]
 808488e:	6a1b      	ldr	r3, [r3, #32]
 8084890:	9301      	str	r3, [sp, #4]
 8084892:	bd08      	pop	{r3, pc}
 8084894:	080401cc 	.word	0x080401cc

08084898 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 8084898:	b508      	push	{r3, lr}
 808489a:	4b02      	ldr	r3, [pc, #8]	; (80848a4 <spark_subscribe+0xc>)
 808489c:	681b      	ldr	r3, [r3, #0]
 808489e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80848a0:	9301      	str	r3, [sp, #4]
 80848a2:	bd08      	pop	{r3, pc}
 80848a4:	080401cc 	.word	0x080401cc

080848a8 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80848a8:	b508      	push	{r3, lr}
 80848aa:	4b02      	ldr	r3, [pc, #8]	; (80848b4 <spark_sync_time_pending+0xc>)
 80848ac:	681b      	ldr	r3, [r3, #0]
 80848ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80848b0:	9301      	str	r3, [sp, #4]
 80848b2:	bd08      	pop	{r3, pc}
 80848b4:	080401cc 	.word	0x080401cc

080848b8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80848b8:	b508      	push	{r3, lr}
 80848ba:	4b02      	ldr	r3, [pc, #8]	; (80848c4 <spark_set_random_seed_from_cloud_handler+0xc>)
 80848bc:	681b      	ldr	r3, [r3, #0]
 80848be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80848c0:	9301      	str	r3, [sp, #4]
 80848c2:	bd08      	pop	{r3, pc}
 80848c4:	080401cc 	.word	0x080401cc

080848c8 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
 80848c8:	b508      	push	{r3, lr}
 80848ca:	4b02      	ldr	r3, [pc, #8]	; (80848d4 <spark_cloud_disconnect+0xc>)
 80848cc:	681b      	ldr	r3, [r3, #0]
 80848ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80848d0:	9301      	str	r3, [sp, #4]
 80848d2:	bd08      	pop	{r3, pc}
 80848d4:	080401cc 	.word	0x080401cc

080848d8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80848d8:	b508      	push	{r3, lr}
 80848da:	4b02      	ldr	r3, [pc, #8]	; (80848e4 <malloc+0xc>)
 80848dc:	681b      	ldr	r3, [r3, #0]
 80848de:	681b      	ldr	r3, [r3, #0]
 80848e0:	9301      	str	r3, [sp, #4]
 80848e2:	bd08      	pop	{r3, pc}
 80848e4:	080401a0 	.word	0x080401a0

080848e8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80848e8:	b508      	push	{r3, lr}
 80848ea:	4b02      	ldr	r3, [pc, #8]	; (80848f4 <free+0xc>)
 80848ec:	681b      	ldr	r3, [r3, #0]
 80848ee:	685b      	ldr	r3, [r3, #4]
 80848f0:	9301      	str	r3, [sp, #4]
 80848f2:	bd08      	pop	{r3, pc}
 80848f4:	080401a0 	.word	0x080401a0

080848f8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80848f8:	b508      	push	{r3, lr}
 80848fa:	4b02      	ldr	r3, [pc, #8]	; (8084904 <realloc+0xc>)
 80848fc:	681b      	ldr	r3, [r3, #0]
 80848fe:	689b      	ldr	r3, [r3, #8]
 8084900:	9301      	str	r3, [sp, #4]
 8084902:	bd08      	pop	{r3, pc}
 8084904:	080401a0 	.word	0x080401a0

08084908 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 8084908:	b508      	push	{r3, lr}
 808490a:	4b02      	ldr	r3, [pc, #8]	; (8084914 <siprintf+0xc>)
 808490c:	681b      	ldr	r3, [r3, #0]
 808490e:	691b      	ldr	r3, [r3, #16]
 8084910:	9301      	str	r3, [sp, #4]
 8084912:	bd08      	pop	{r3, pc}
 8084914:	080401a0 	.word	0x080401a0

08084918 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 8084918:	b508      	push	{r3, lr}
 808491a:	4b02      	ldr	r3, [pc, #8]	; (8084924 <snprintf+0xc>)
 808491c:	681b      	ldr	r3, [r3, #0]
 808491e:	69db      	ldr	r3, [r3, #28]
 8084920:	9301      	str	r3, [sp, #4]
 8084922:	bd08      	pop	{r3, pc}
 8084924:	080401a0 	.word	0x080401a0

08084928 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 8084928:	b508      	push	{r3, lr}
 808492a:	4b02      	ldr	r3, [pc, #8]	; (8084934 <vsnprintf+0xc>)
 808492c:	681b      	ldr	r3, [r3, #0]
 808492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8084930:	9301      	str	r3, [sp, #4]
 8084932:	bd08      	pop	{r3, pc}
 8084934:	080401a0 	.word	0x080401a0

08084938 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 8084938:	b508      	push	{r3, lr}
 808493a:	4b02      	ldr	r3, [pc, #8]	; (8084944 <abort+0xc>)
 808493c:	681b      	ldr	r3, [r3, #0]
 808493e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8084940:	9301      	str	r3, [sp, #4]
 8084942:	bd08      	pop	{r3, pc}
 8084944:	080401a0 	.word	0x080401a0

08084948 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 8084948:	b508      	push	{r3, lr}
 808494a:	4b02      	ldr	r3, [pc, #8]	; (8084954 <_malloc_r+0xc>)
 808494c:	681b      	ldr	r3, [r3, #0]
 808494e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8084950:	9301      	str	r3, [sp, #4]
 8084952:	bd08      	pop	{r3, pc}
 8084954:	080401a0 	.word	0x080401a0

08084958 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 8084958:	b508      	push	{r3, lr}
 808495a:	4b02      	ldr	r3, [pc, #8]	; (8084964 <__errno+0xc>)
 808495c:	681b      	ldr	r3, [r3, #0]
 808495e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8084960:	9301      	str	r3, [sp, #4]
 8084962:	bd08      	pop	{r3, pc}
 8084964:	080401a0 	.word	0x080401a0

08084968 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 8084968:	b508      	push	{r3, lr}
 808496a:	4b02      	ldr	r3, [pc, #8]	; (8084974 <newlib_impure_ptr_callback+0xc>)
 808496c:	681b      	ldr	r3, [r3, #0]
 808496e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8084970:	9301      	str	r3, [sp, #4]
 8084972:	bd08      	pop	{r3, pc}
 8084974:	080401a0 	.word	0x080401a0

08084978 <_ZN4PMIC4lockEv.constprop.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
 8084978:	b508      	push	{r3, lr}
            return &Wire3;
 808497a:	f003 f95d 	bl	8087c38 <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->lock();
}
 808497e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
 8084982:	f002 bd8d 	b.w	80874a0 <_ZN7TwoWire4lockEv>

08084986 <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
 8084986:	b510      	push	{r4, lr}
 8084988:	4604      	mov	r4, r0
    lock_(_lock)
 808498a:	7001      	strb	r1, [r0, #0]
    if (lock_) {
 808498c:	b109      	cbz	r1, 8084992 <_ZN4PMICC1Eb+0xc>
        lock();
 808498e:	f7ff fff3 	bl	8084978 <_ZN4PMIC4lockEv.constprop.0>
}
 8084992:	4620      	mov	r0, r4
 8084994:	bd10      	pop	{r4, pc}

08084996 <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
 8084996:	b508      	push	{r3, lr}
            return &Wire3;
 8084998:	f003 f94e 	bl	8087c38 <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->unlock();
}
 808499c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
 80849a0:	f002 bd87 	b.w	80874b2 <_ZN7TwoWire6unlockEv>

080849a4 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
 80849a4:	b510      	push	{r4, lr}
    if (lock_) {
 80849a6:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
 80849a8:	4604      	mov	r4, r0
    if (lock_) {
 80849aa:	b10b      	cbz	r3, 80849b0 <_ZN4PMICD1Ev+0xc>
        unlock();
 80849ac:	f7ff fff3 	bl	8084996 <_ZN4PMIC6unlockEv>
}
 80849b0:	4620      	mov	r0, r4
 80849b2:	bd10      	pop	{r4, pc}

080849b4 <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 80849b4:	b510      	push	{r4, lr}
 80849b6:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 80849b8:	6800      	ldr	r0, [r0, #0]
 80849ba:	f7ff ffec 	bl	8084996 <_ZN4PMIC6unlockEv>
 80849be:	4620      	mov	r0, r4
 80849c0:	bd10      	pop	{r4, pc}

080849c2 <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
 80849c2:	b530      	push	{r4, r5, lr}
 80849c4:	b087      	sub	sp, #28
 80849c6:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80849c8:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 80849ca:	f7ff ffd5 	bl	8084978 <_ZN4PMIC4lockEv.constprop.0>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 80849ce:	236b      	movs	r3, #107	; 0x6b
 80849d0:	f88d 3008 	strb.w	r3, [sp, #8]
 80849d4:	2300      	movs	r3, #0
 80849d6:	2401      	movs	r4, #1
 80849d8:	9303      	str	r3, [sp, #12]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
 80849da:	230a      	movs	r3, #10
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 80849dc:	f88d 4010 	strb.w	r4, [sp, #16]
    timeout_ = ms;
 80849e0:	9305      	str	r3, [sp, #20]
            return &Wire3;
 80849e2:	f003 f929 	bl	8087c38 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->beginTransmission(config);
 80849e6:	a902      	add	r1, sp, #8
 80849e8:	f002 fd3b 	bl	8087462 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire3;
 80849ec:	f003 f924 	bl	8087c38 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->write(startAddress);
 80849f0:	6803      	ldr	r3, [r0, #0]
 80849f2:	4629      	mov	r1, r5
 80849f4:	689b      	ldr	r3, [r3, #8]
 80849f6:	4798      	blx	r3
            return &Wire3;
 80849f8:	f003 f91e 	bl	8087c38 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->endTransmission(true);
 80849fc:	4621      	mov	r1, r4
 80849fe:	f002 fd48 	bl	8087492 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
 8084a02:	9403      	str	r4, [sp, #12]
            return &Wire3;
 8084a04:	f003 f918 	bl	8087c38 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->requestFrom(config);
 8084a08:	a902      	add	r1, sp, #8
 8084a0a:	f002 fcf7 	bl	80873fc <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire3;
 8084a0e:	f003 f913 	bl	8087c38 <_Z20__fetch_global_Wire3v>
    DATA = pmicWireInstance()->read();
 8084a12:	6803      	ldr	r3, [r0, #0]
 8084a14:	695b      	ldr	r3, [r3, #20]
 8084a16:	4798      	blx	r3
 8084a18:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
 8084a1a:	a801      	add	r0, sp, #4
 8084a1c:	f7ff ffca 	bl	80849b4 <_ZNSt10lock_guardI4PMICED1Ev>
}
 8084a20:	b2e0      	uxtb	r0, r4
 8084a22:	b007      	add	sp, #28
 8084a24:	bd30      	pop	{r4, r5, pc}

08084a26 <_ZN4PMIC11isPowerGoodEv>:
    DATA = readRegister(SYSTEM_STATUS_REGISTER);
 8084a26:	2108      	movs	r1, #8
bool PMIC::isPowerGood(void) {
 8084a28:	b508      	push	{r3, lr}
    DATA = readRegister(SYSTEM_STATUS_REGISTER);
 8084a2a:	f7ff ffca 	bl	80849c2 <_ZN4PMIC12readRegisterEh>
}
 8084a2e:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8084a32:	bd08      	pop	{r3, pc}

08084a34 <_ZN4PMIC15getSystemStatusEv>:
    DATA = readRegister(SYSTEM_STATUS_REGISTER);
 8084a34:	2108      	movs	r1, #8
 8084a36:	f7ff bfc4 	b.w	80849c2 <_ZN4PMIC12readRegisterEh>

08084a3a <_ZN8SPIClass6unlockEv>:
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 8084a3a:	6880      	ldr	r0, [r0, #8]
 8084a3c:	f7ff bca4 	b.w	8084388 <os_mutex_recursive_unlock>

08084a40 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 8084a40:	b570      	push	{r4, r5, r6, lr}
    RecursiveMutex() : handle_(nullptr)
 8084a42:	2600      	movs	r6, #0
 8084a44:	4604      	mov	r4, r0
 8084a46:	460d      	mov	r5, r1
 8084a48:	f840 6f08 	str.w	r6, [r0, #8]!
        os_mutex_recursive_create(&handle_);
 8084a4c:	f7ff fc84 	bl	8084358 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 8084a50:	4628      	mov	r0, r5
    _spi = spi;
 8084a52:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 8084a54:	f7ff fd90 	bl	8084578 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 8084a58:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 8084a5a:	6066      	str	r6, [r4, #4]
}
 8084a5c:	bd70      	pop	{r4, r5, r6, pc}

08084a5e <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 8084a5e:	b510      	push	{r4, lr}
 8084a60:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
 8084a62:	6880      	ldr	r0, [r0, #8]
 8084a64:	f7ff fc88 	bl	8084378 <os_mutex_recursive_lock>
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
 8084a68:	7820      	ldrb	r0, [r4, #0]
 8084a6a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8084a6e:	f7ff fd5b 	bl	8084528 <hal_spi_begin>
        unlock();
 8084a72:	4620      	mov	r0, r4
 8084a74:	f7ff ffe1 	bl	8084a3a <_ZN8SPIClass6unlockEv>
    }
}
 8084a78:	bd10      	pop	{r4, pc}

08084a7a <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
 8084a7a:	b538      	push	{r3, r4, r5, lr}
 8084a7c:	4604      	mov	r4, r0
 8084a7e:	460d      	mov	r5, r1
 8084a80:	6880      	ldr	r0, [r0, #8]
 8084a82:	f7ff fc79 	bl	8084378 <os_mutex_recursive_lock>
    if (!lock())
    {
        hal_spi_set_bit_order(_spi, bitOrder);
 8084a86:	7820      	ldrb	r0, [r4, #0]
 8084a88:	4629      	mov	r1, r5
 8084a8a:	f7ff fd55 	bl	8084538 <hal_spi_set_bit_order>
        unlock();
 8084a8e:	4620      	mov	r0, r4
 8084a90:	f7ff ffd3 	bl	8084a3a <_ZN8SPIClass6unlockEv>
    }
}
 8084a94:	bd38      	pop	{r3, r4, r5, pc}

08084a96 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
 8084a96:	b538      	push	{r3, r4, r5, lr}
 8084a98:	4604      	mov	r4, r0
 8084a9a:	460d      	mov	r5, r1
 8084a9c:	6880      	ldr	r0, [r0, #8]
 8084a9e:	f7ff fc6b 	bl	8084378 <os_mutex_recursive_lock>
    if (!lock())
    {
        hal_spi_set_data_mode(_spi, mode);
 8084aa2:	7820      	ldrb	r0, [r4, #0]
 8084aa4:	4629      	mov	r1, r5
 8084aa6:	f7ff fd4f 	bl	8084548 <hal_spi_set_data_mode>
        unlock();
 8084aaa:	4620      	mov	r0, r4
 8084aac:	f7ff ffc5 	bl	8084a3a <_ZN8SPIClass6unlockEv>
    }
}
 8084ab0:	bd38      	pop	{r3, r4, r5, pc}
	...

08084ab4 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 8084ab4:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 8084ab6:	2400      	movs	r4, #0
 8084ab8:	0840      	lsrs	r0, r0, #1
 8084aba:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 8084abc:	6818      	ldr	r0, [r3, #0]
 8084abe:	b2e5      	uxtb	r5, r4
 8084ac0:	4288      	cmp	r0, r1
 8084ac2:	d906      	bls.n	8084ad2 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 8084ac4:	3401      	adds	r4, #1
 8084ac6:	2c08      	cmp	r4, #8
 8084ac8:	d002      	beq.n	8084ad0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 8084aca:	0840      	lsrs	r0, r0, #1
 8084acc:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 8084ace:	e7f5      	b.n	8084abc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 8084ad0:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 8084ad2:	4b02      	ldr	r3, [pc, #8]	; (8084adc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 8084ad4:	5d5b      	ldrb	r3, [r3, r5]
 8084ad6:	7013      	strb	r3, [r2, #0]
}
 8084ad8:	bd30      	pop	{r4, r5, pc}
 8084ada:	bf00      	nop
 8084adc:	08089d47 	.word	0x08089d47

08084ae0 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 8084ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned clock = 0;
 8084ae2:	2500      	movs	r5, #0
{
 8084ae4:	4604      	mov	r4, r0
 8084ae6:	b089      	sub	sp, #36	; 0x24
 8084ae8:	6880      	ldr	r0, [r0, #8]

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;
 8084aea:	fb02 f601 	mul.w	r6, r2, r1
    unsigned clock = 0;
 8084aee:	9502      	str	r5, [sp, #8]
 8084af0:	f7ff fc42 	bl	8084378 <os_mutex_recursive_lock>
    memset(info, 0, sizeof(hal_spi_info_t));
 8084af4:	4629      	mov	r1, r5
 8084af6:	2214      	movs	r2, #20
 8084af8:	a803      	add	r0, sp, #12

    if (!lock())
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
 8084afa:	7827      	ldrb	r7, [r4, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
 8084afc:	f004 fa70 	bl	8088fe0 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 8084b00:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 8084b02:	462a      	mov	r2, r5
 8084b04:	4638      	mov	r0, r7
 8084b06:	a903      	add	r1, sp, #12
    info->version = HAL_SPI_INFO_VERSION_1;
 8084b08:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
 8084b0c:	f7ff fd44 	bl	8084598 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 8084b10:	ab02      	add	r3, sp, #8
 8084b12:	f10d 0207 	add.w	r2, sp, #7
 8084b16:	4631      	mov	r1, r6
 8084b18:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
 8084b1a:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 8084b1e:	f7ff ffc9 	bl	8084ab4 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
 8084b22:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8084b26:	7820      	ldrb	r0, [r4, #0]
 8084b28:	f7ff fd16 	bl	8084558 <hal_spi_set_clock_divider>
        unlock();
 8084b2c:	4620      	mov	r0, r4
 8084b2e:	f7ff ff84 	bl	8084a3a <_ZN8SPIClass6unlockEv>
    }

    return clock;
}
 8084b32:	9802      	ldr	r0, [sp, #8]
 8084b34:	b009      	add	sp, #36	; 0x24
 8084b36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08084b38 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
 8084b38:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 8084b3a:	7800      	ldrb	r0, [r0, #0]
 8084b3c:	f7ff fd14 	bl	8084568 <hal_spi_transfer>
}
 8084b40:	b2c0      	uxtb	r0, r0
 8084b42:	bd08      	pop	{r3, pc}

08084b44 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 8084b44:	b510      	push	{r4, lr}
 8084b46:	4604      	mov	r4, r0
        if (wakeupSource_) {
 8084b48:	6800      	ldr	r0, [r0, #0]
 8084b4a:	b118      	cbz	r0, 8084b54 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 8084b4c:	f7ff fecc 	bl	80848e8 <free>
            wakeupSource_ = nullptr;
 8084b50:	2300      	movs	r3, #0
 8084b52:	6023      	str	r3, [r4, #0]
        }
    }
 8084b54:	bd10      	pop	{r4, pc}

08084b56 <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8084b56:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
 8084b58:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8084b5c:	460d      	mov	r5, r1
        error_ = result.error_;
 8084b5e:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
 8084b60:	460b      	mov	r3, r1
 8084b62:	f853 2f06 	ldr.w	r2, [r3, #6]!
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8084b66:	4604      	mov	r4, r0
        compatResult_ = result.compatResult_;
 8084b68:	f8c0 2006 	str.w	r2, [r0, #6]
 8084b6c:	889b      	ldrh	r3, [r3, #4]
 8084b6e:	8143      	strh	r3, [r0, #10]
        freeWakeupSourceMemory();
 8084b70:	f7ff ffe8 	bl	8084b44 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
 8084b74:	682b      	ldr	r3, [r5, #0]
 8084b76:	b113      	cbz	r3, 8084b7e <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
 8084b78:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
 8084b7a:	2300      	movs	r3, #0
 8084b7c:	602b      	str	r3, [r5, #0]
    }
 8084b7e:	4620      	mov	r0, r4
 8084b80:	bd38      	pop	{r3, r4, r5, pc}

08084b82 <_ZN17SystemSleepResult13toSleepResultEv>:
        if (error_ || wakeupSource_) {
 8084b82:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SleepResult toSleepResult() {
 8084b86:	b510      	push	{r4, lr}
 8084b88:	680a      	ldr	r2, [r1, #0]
        if (error_ || wakeupSource_) {
 8084b8a:	b933      	cbnz	r3, 8084b9a <_ZN17SystemSleepResult13toSleepResultEv+0x18>
 8084b8c:	b932      	cbnz	r2, 8084b9c <_ZN17SystemSleepResult13toSleepResultEv+0x1a>
        return compatResult_;
 8084b8e:	f851 3f06 	ldr.w	r3, [r1, #6]!
 8084b92:	6003      	str	r3, [r0, #0]
 8084b94:	888b      	ldrh	r3, [r1, #4]
 8084b96:	8083      	strh	r3, [r0, #4]
    }
 8084b98:	bd10      	pop	{r4, pc}
        if (wakeupSource_) {
 8084b9a:	b122      	cbz	r2, 8084ba6 <_ZN17SystemSleepResult13toSleepResultEv+0x24>
            return static_cast<SystemSleepWakeupReason>(wakeupSource_->type);
 8084b9c:	8894      	ldrh	r4, [r2, #4]
            switch (wakeupReason()) {
 8084b9e:	2c01      	cmp	r4, #1
 8084ba0:	d003      	beq.n	8084baa <_ZN17SystemSleepResult13toSleepResultEv+0x28>
 8084ba2:	2c04      	cmp	r4, #4
 8084ba4:	d006      	beq.n	8084bb4 <_ZN17SystemSleepResult13toSleepResultEv+0x32>
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 8084ba6:	2204      	movs	r2, #4
 8084ba8:	e005      	b.n	8084bb6 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
 8084baa:	8992      	ldrh	r2, [r2, #12]
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
 8084bac:	718c      	strb	r4, [r1, #6]
 8084bae:	810b      	strh	r3, [r1, #8]
 8084bb0:	814a      	strh	r2, [r1, #10]
                    break;
 8084bb2:	e7ec      	b.n	8084b8e <_ZN17SystemSleepResult13toSleepResultEv+0xc>
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
 8084bb4:	2202      	movs	r2, #2
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 8084bb6:	810b      	strh	r3, [r1, #8]
 8084bb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8084bbc:	718a      	strb	r2, [r1, #6]
 8084bbe:	814b      	strh	r3, [r1, #10]
                    break;
 8084bc0:	e7e5      	b.n	8084b8e <_ZN17SystemSleepResult13toSleepResultEv+0xc>

08084bc2 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
 8084bc2:	b507      	push	{r0, r1, r2, lr}
 8084bc4:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 8084bc6:	2100      	movs	r1, #0
{
 8084bc8:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 8084bca:	9100      	str	r1, [sp, #0]
 8084bcc:	2001      	movs	r0, #1
 8084bce:	218c      	movs	r1, #140	; 0x8c
 8084bd0:	f7ff fdc0 	bl	8084754 <system_reset>
}
 8084bd4:	b003      	add	sp, #12
 8084bd6:	f85d fb04 	ldr.w	pc, [sp], #4

08084bda <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
 8084bda:	4601      	mov	r1, r0
    reset(0, flags);
 8084bdc:	2000      	movs	r0, #0
 8084bde:	f7ff bff0 	b.w	8084bc2 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

08084be2 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
 8084be2:	2000      	movs	r0, #0
 8084be4:	f7ff bff9 	b.w	8084bda <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

08084be8 <_ZN11SystemClass13enterSafeModeEN8particle5FlagsI19SystemResetFlagTypemEE>:

void SystemClass::enterSafeMode(SystemResetFlags flags)
{
 8084be8:	b507      	push	{r0, r1, r2, lr}
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
 8084bea:	2200      	movs	r2, #0
{
 8084bec:	4603      	mov	r3, r0
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
 8084bee:	4611      	mov	r1, r2
 8084bf0:	9200      	str	r2, [sp, #0]
 8084bf2:	2003      	movs	r0, #3
 8084bf4:	f7ff fdae 	bl	8084754 <system_reset>
}
 8084bf8:	b003      	add	sp, #12
 8084bfa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08084c00 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
    }
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
 8084c00:	b530      	push	{r4, r5, lr}
 8084c02:	4604      	mov	r4, r0
 8084c04:	b085      	sub	sp, #20
 8084c06:	4608      	mov	r0, r1
 8084c08:	4611      	mov	r1, r2
 8084c0a:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
 8084c0c:	2300      	movs	r3, #0
 8084c0e:	f7ff fd53 	bl	80846b8 <system_sleep>
              compatResult_(r) {
 8084c12:	2300      	movs	r3, #0
 8084c14:	9301      	str	r3, [sp, #4]
 8084c16:	f8ad 3008 	strh.w	r3, [sp, #8]
 8084c1a:	f88d 300a 	strb.w	r3, [sp, #10]
 8084c1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
 8084c22:	4d09      	ldr	r5, [pc, #36]	; (8084c48 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
 8084c24:	a901      	add	r1, sp, #4
 8084c26:	f8ad 000c 	strh.w	r0, [sp, #12]
 8084c2a:	4628      	mov	r0, r5
 8084c2c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8084c30:	f7ff ff91 	bl	8084b56 <_ZN17SystemSleepResultaSEOS_>
        freeWakeupSourceMemory();
 8084c34:	a801      	add	r0, sp, #4
 8084c36:	f7ff ff85 	bl	8084b44 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        return toSleepResult();
 8084c3a:	4620      	mov	r0, r4
 8084c3c:	4629      	mov	r1, r5
 8084c3e:	f7ff ffa0 	bl	8084b82 <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
 8084c42:	4620      	mov	r0, r4
 8084c44:	b005      	add	sp, #20
 8084c46:	bd30      	pop	{r4, r5, pc}
 8084c48:	20000398 	.word	0x20000398

08084c4c <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
 8084c4c:	b510      	push	{r4, lr}
 8084c4e:	2400      	movs	r4, #0
 8084c50:	7004      	strb	r4, [r0, #0]
 8084c52:	8044      	strh	r4, [r0, #2]
 8084c54:	f64f 74ff 	movw	r4, #65535	; 0xffff
    if (ret > 0) {
 8084c58:	2900      	cmp	r1, #0
SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
 8084c5a:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
 8084c5c:	dd08      	ble.n	8084c70 <_ZN11SleepResultC1EiPKtj+0x24>
        // pin
        --ret;
 8084c5e:	3901      	subs	r1, #1
        if ((size_t)ret < pinsSize) {
 8084c60:	428b      	cmp	r3, r1
 8084c62:	d904      	bls.n	8084c6e <_ZN11SleepResultC1EiPKtj+0x22>
            pin_ = pins[ret];
 8084c64:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
 8084c68:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
 8084c6a:	2301      	movs	r3, #1
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
        reason_ = WAKEUP_REASON_RTC;
 8084c6c:	7003      	strb	r3, [r0, #0]
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
    }
}
 8084c6e:	bd10      	pop	{r4, pc}
    } else if (ret == 0) {
 8084c70:	d101      	bne.n	8084c76 <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
 8084c72:	2302      	movs	r3, #2
 8084c74:	e7fa      	b.n	8084c6c <_ZN11SleepResultC1EiPKtj+0x20>
        err_ = static_cast<system_error_t>(ret);
 8084c76:	8041      	strh	r1, [r0, #2]
 8084c78:	e7f9      	b.n	8084c6e <_ZN11SleepResultC1EiPKtj+0x22>
	...

08084c7c <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 8084c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8084c7e:	460d      	mov	r5, r1
 8084c80:	4616      	mov	r6, r2
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 8084c82:	2700      	movs	r7, #0
SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 8084c84:	b08b      	sub	sp, #44	; 0x2c
 8084c86:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 8084c88:	9b12      	ldr	r3, [sp, #72]	; 0x48
SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 8084c8a:	4604      	mov	r4, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 8084c8c:	9301      	str	r3, [sp, #4]
 8084c8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8084c90:	4631      	mov	r1, r6
 8084c92:	9300      	str	r3, [sp, #0]
 8084c94:	4628      	mov	r0, r5
 8084c96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8084c98:	9702      	str	r7, [sp, #8]
 8084c9a:	f7ff fd51 	bl	8084740 <system_sleep_pins>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
 8084c9e:	4633      	mov	r3, r6
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 8084ca0:	4601      	mov	r1, r0
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
 8084ca2:	462a      	mov	r2, r5
 8084ca4:	a805      	add	r0, sp, #20
 8084ca6:	f7ff ffd1 	bl	8084c4c <_ZN11SleepResultC1EiPKtj>
 8084caa:	4d0f      	ldr	r5, [pc, #60]	; (8084ce8 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x6c>)
 8084cac:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8084cb0:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 8084cb4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
              compatResult_(r) {
 8084cb8:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
 8084cbc:	4628      	mov	r0, r5
 8084cbe:	a907      	add	r1, sp, #28
 8084cc0:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8084cc4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8084cc8:	9707      	str	r7, [sp, #28]
 8084cca:	f8ad 7020 	strh.w	r7, [sp, #32]
 8084cce:	f7ff ff42 	bl	8084b56 <_ZN17SystemSleepResultaSEOS_>
        freeWakeupSourceMemory();
 8084cd2:	a807      	add	r0, sp, #28
 8084cd4:	f7ff ff36 	bl	8084b44 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        return toSleepResult();
 8084cd8:	4620      	mov	r0, r4
 8084cda:	4629      	mov	r1, r5
 8084cdc:	f7ff ff51 	bl	8084b82 <_ZN17SystemSleepResult13toSleepResultEv>
}
 8084ce0:	4620      	mov	r0, r4
 8084ce2:	b00b      	add	sp, #44	; 0x2c
 8084ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8084ce6:	bf00      	nop
 8084ce8:	20000398 	.word	0x20000398

08084cec <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 8084cec:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 8084cee:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 8084cf0:	b510      	push	{r4, lr}
 8084cf2:	4b08      	ldr	r3, [pc, #32]	; (8084d14 <_GLOBAL__sub_I_System+0x28>)
 8084cf4:	4c08      	ldr	r4, [pc, #32]	; (8084d18 <_GLOBAL__sub_I_System+0x2c>)
 8084cf6:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 8084cf8:	4b08      	ldr	r3, [pc, #32]	; (8084d1c <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 8084cfa:	6020      	str	r0, [r4, #0]
 8084cfc:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 8084cfe:	71a0      	strb	r0, [r4, #6]
 8084d00:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8084d02:	f7ff fcc9 	bl	8084698 <set_system_mode>
SystemClass System;
 8084d06:	4620      	mov	r0, r4
 8084d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 8084d0c:	4a04      	ldr	r2, [pc, #16]	; (8084d20 <_GLOBAL__sub_I_System+0x34>)
 8084d0e:	4905      	ldr	r1, [pc, #20]	; (8084d24 <_GLOBAL__sub_I_System+0x38>)
 8084d10:	f002 bfba 	b.w	8087c88 <__aeabi_atexit>
 8084d14:	200003a4 	.word	0x200003a4
 8084d18:	20000398 	.word	0x20000398
 8084d1c:	ffff0000 	.word	0xffff0000
 8084d20:	20000130 	.word	0x20000130
 8084d24:	08080255 	.word	0x08080255

08084d28 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8084d28:	b510      	push	{r4, lr}
 8084d2a:	4604      	mov	r4, r0
{
	free(buffer);
 8084d2c:	6800      	ldr	r0, [r0, #0]
 8084d2e:	f7ff fddb 	bl	80848e8 <free>
}
 8084d32:	4620      	mov	r0, r4
 8084d34:	bd10      	pop	{r4, pc}

08084d36 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 8084d36:	b510      	push	{r4, lr}
 8084d38:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 8084d3a:	6800      	ldr	r0, [r0, #0]
 8084d3c:	b108      	cbz	r0, 8084d42 <_ZN6String10invalidateEv+0xc>
 8084d3e:	f7ff fdd3 	bl	80848e8 <free>
	buffer = NULL;
 8084d42:	2300      	movs	r3, #0
	capacity = len = 0;
 8084d44:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 8084d48:	6023      	str	r3, [r4, #0]
}
 8084d4a:	bd10      	pop	{r4, pc}

08084d4c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 8084d4c:	b538      	push	{r3, r4, r5, lr}
 8084d4e:	4604      	mov	r4, r0
 8084d50:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 8084d52:	6800      	ldr	r0, [r0, #0]
 8084d54:	3101      	adds	r1, #1
 8084d56:	f7ff fdcf 	bl	80848f8 <realloc>
	if (newbuffer) {
 8084d5a:	b110      	cbz	r0, 8084d62 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 8084d5c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 8084d60:	2001      	movs	r0, #1
	}
	return 0;
}
 8084d62:	bd38      	pop	{r3, r4, r5, pc}

08084d64 <_ZN6String7reserveEj>:
{
 8084d64:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 8084d66:	6803      	ldr	r3, [r0, #0]
{
 8084d68:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 8084d6a:	b123      	cbz	r3, 8084d76 <_ZN6String7reserveEj+0x12>
 8084d6c:	6843      	ldr	r3, [r0, #4]
 8084d6e:	428b      	cmp	r3, r1
 8084d70:	d301      	bcc.n	8084d76 <_ZN6String7reserveEj+0x12>
 8084d72:	2001      	movs	r0, #1
}
 8084d74:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 8084d76:	4620      	mov	r0, r4
 8084d78:	f7ff ffe8 	bl	8084d4c <_ZN6String12changeBufferEj>
 8084d7c:	2800      	cmp	r0, #0
 8084d7e:	d0f9      	beq.n	8084d74 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 8084d80:	68a3      	ldr	r3, [r4, #8]
 8084d82:	2b00      	cmp	r3, #0
 8084d84:	d1f5      	bne.n	8084d72 <_ZN6String7reserveEj+0xe>
 8084d86:	6822      	ldr	r2, [r4, #0]
 8084d88:	7013      	strb	r3, [r2, #0]
 8084d8a:	e7f2      	b.n	8084d72 <_ZN6String7reserveEj+0xe>

08084d8c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8084d8c:	b570      	push	{r4, r5, r6, lr}
 8084d8e:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8084d90:	4611      	mov	r1, r2
{
 8084d92:	4604      	mov	r4, r0
 8084d94:	4615      	mov	r5, r2
	if (!reserve(length)) {
 8084d96:	f7ff ffe5 	bl	8084d64 <_ZN6String7reserveEj>
 8084d9a:	b920      	cbnz	r0, 8084da6 <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 8084d9c:	4620      	mov	r0, r4
 8084d9e:	f7ff ffca 	bl	8084d36 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 8084da2:	4620      	mov	r0, r4
 8084da4:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 8084da6:	462a      	mov	r2, r5
 8084da8:	4631      	mov	r1, r6
 8084daa:	6820      	ldr	r0, [r4, #0]
	len = length;
 8084dac:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 8084dae:	f004 f8ef 	bl	8088f90 <memcpy>
	buffer[len] = 0;
 8084db2:	2100      	movs	r1, #0
 8084db4:	6822      	ldr	r2, [r4, #0]
 8084db6:	68a3      	ldr	r3, [r4, #8]
 8084db8:	54d1      	strb	r1, [r2, r3]
	return *this;
 8084dba:	e7f2      	b.n	8084da2 <_ZN6String4copyEPKcj+0x16>

08084dbc <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 8084dbc:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 8084dbe:	2300      	movs	r3, #0
String::String(const char *cstr)
 8084dc0:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 8084dc2:	460d      	mov	r5, r1
	capacity = 0;
 8084dc4:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 8084dc8:	6083      	str	r3, [r0, #8]
	flags = 0;
 8084dca:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 8084dcc:	b139      	cbz	r1, 8084dde <_ZN6StringC1EPKc+0x22>
 8084dce:	4608      	mov	r0, r1
 8084dd0:	f004 f977 	bl	80890c2 <strlen>
 8084dd4:	4629      	mov	r1, r5
 8084dd6:	4602      	mov	r2, r0
 8084dd8:	4620      	mov	r0, r4
 8084dda:	f7ff ffd7 	bl	8084d8c <_ZN6String4copyEPKcj>
}
 8084dde:	4620      	mov	r0, r4
 8084de0:	bd38      	pop	{r3, r4, r5, pc}

08084de2 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 8084de2:	b538      	push	{r3, r4, r5, lr}
 8084de4:	4605      	mov	r5, r0
	if (buffer) {
 8084de6:	6800      	ldr	r0, [r0, #0]
{
 8084de8:	460c      	mov	r4, r1
	if (buffer) {
 8084dea:	b168      	cbz	r0, 8084e08 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 8084dec:	686a      	ldr	r2, [r5, #4]
 8084dee:	688b      	ldr	r3, [r1, #8]
 8084df0:	429a      	cmp	r2, r3
 8084df2:	d307      	bcc.n	8084e04 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 8084df4:	6809      	ldr	r1, [r1, #0]
 8084df6:	f004 f940 	bl	808907a <strcpy>
			len = rhs.len;
 8084dfa:	68a3      	ldr	r3, [r4, #8]
 8084dfc:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 8084dfe:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 8084e00:	60a3      	str	r3, [r4, #8]
}
 8084e02:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 8084e04:	f7ff fd70 	bl	80848e8 <free>
	buffer = rhs.buffer;
 8084e08:	6823      	ldr	r3, [r4, #0]
 8084e0a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 8084e0c:	6863      	ldr	r3, [r4, #4]
 8084e0e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 8084e10:	68a3      	ldr	r3, [r4, #8]
 8084e12:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 8084e14:	2300      	movs	r3, #0
	rhs.capacity = 0;
 8084e16:	e9c4 3300 	strd	r3, r3, [r4]
 8084e1a:	e7f1      	b.n	8084e00 <_ZN6String4moveERS_+0x1e>

08084e1c <_ZN6StringC1EOS_>:
	buffer = NULL;
 8084e1c:	2300      	movs	r3, #0
String::String(String &&rval)
 8084e1e:	b510      	push	{r4, lr}
 8084e20:	4604      	mov	r4, r0
	capacity = 0;
 8084e22:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 8084e26:	6083      	str	r3, [r0, #8]
	flags = 0;
 8084e28:	7303      	strb	r3, [r0, #12]
	move(rval);
 8084e2a:	f7ff ffda 	bl	8084de2 <_ZN6String4moveERS_>
}
 8084e2e:	4620      	mov	r0, r4
 8084e30:	bd10      	pop	{r4, pc}

08084e32 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8084e32:	4288      	cmp	r0, r1
{
 8084e34:	b510      	push	{r4, lr}
 8084e36:	460b      	mov	r3, r1
 8084e38:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 8084e3a:	d004      	beq.n	8084e46 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 8084e3c:	6809      	ldr	r1, [r1, #0]
 8084e3e:	b121      	cbz	r1, 8084e4a <_ZN6StringaSERKS_+0x18>
 8084e40:	689a      	ldr	r2, [r3, #8]
 8084e42:	f7ff ffa3 	bl	8084d8c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 8084e46:	4620      	mov	r0, r4
 8084e48:	bd10      	pop	{r4, pc}
	else invalidate();
 8084e4a:	f7ff ff74 	bl	8084d36 <_ZN6String10invalidateEv>
 8084e4e:	e7fa      	b.n	8084e46 <_ZN6StringaSERKS_+0x14>

08084e50 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 8084e50:	2300      	movs	r3, #0
String::String(const String &value)
 8084e52:	b510      	push	{r4, lr}
 8084e54:	4604      	mov	r4, r0
	capacity = 0;
 8084e56:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 8084e5a:	6083      	str	r3, [r0, #8]
	flags = 0;
 8084e5c:	7303      	strb	r3, [r0, #12]
	*this = value;
 8084e5e:	f7ff ffe8 	bl	8084e32 <_ZN6StringaSERKS_>
}
 8084e62:	4620      	mov	r0, r4
 8084e64:	bd10      	pop	{r4, pc}

08084e66 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 8084e66:	4288      	cmp	r0, r1
{
 8084e68:	b510      	push	{r4, lr}
 8084e6a:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 8084e6c:	d001      	beq.n	8084e72 <_ZN6StringaSEOS_+0xc>
 8084e6e:	f7ff ffb8 	bl	8084de2 <_ZN6String4moveERS_>
	return *this;
}
 8084e72:	4620      	mov	r0, r4
 8084e74:	bd10      	pop	{r4, pc}

08084e76 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 8084e76:	b538      	push	{r3, r4, r5, lr}
 8084e78:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 8084e7a:	460c      	mov	r4, r1
 8084e7c:	b149      	cbz	r1, 8084e92 <_ZN6StringaSEPKc+0x1c>
 8084e7e:	4608      	mov	r0, r1
 8084e80:	f004 f91f 	bl	80890c2 <strlen>
 8084e84:	4621      	mov	r1, r4
 8084e86:	4602      	mov	r2, r0
 8084e88:	4628      	mov	r0, r5
 8084e8a:	f7ff ff7f 	bl	8084d8c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 8084e8e:	4628      	mov	r0, r5
 8084e90:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 8084e92:	f7ff ff50 	bl	8084d36 <_ZN6String10invalidateEv>
 8084e96:	e7fa      	b.n	8084e8e <_ZN6StringaSEPKc+0x18>

08084e98 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 8084e98:	b570      	push	{r4, r5, r6, lr}
 8084e9a:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 8084e9c:	460e      	mov	r6, r1
 8084e9e:	b909      	cbnz	r1, 8084ea4 <_ZN6String6concatEPKcj+0xc>
 8084ea0:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 8084ea2:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 8084ea4:	b16a      	cbz	r2, 8084ec2 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 8084ea6:	6884      	ldr	r4, [r0, #8]
 8084ea8:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 8084eaa:	4621      	mov	r1, r4
 8084eac:	f7ff ff5a 	bl	8084d64 <_ZN6String7reserveEj>
 8084eb0:	2800      	cmp	r0, #0
 8084eb2:	d0f5      	beq.n	8084ea0 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 8084eb4:	6828      	ldr	r0, [r5, #0]
 8084eb6:	68ab      	ldr	r3, [r5, #8]
 8084eb8:	4631      	mov	r1, r6
 8084eba:	4418      	add	r0, r3
 8084ebc:	f004 f8dd 	bl	808907a <strcpy>
	len = newlen;
 8084ec0:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 8084ec2:	2001      	movs	r0, #1
 8084ec4:	e7ed      	b.n	8084ea2 <_ZN6String6concatEPKcj+0xa>

08084ec6 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 8084ec6:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 8084ec8:	688a      	ldr	r2, [r1, #8]
 8084eca:	6809      	ldr	r1, [r1, #0]
{
 8084ecc:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 8084ece:	f7ff ffe3 	bl	8084e98 <_ZN6String6concatEPKcj>
 8084ed2:	b910      	cbnz	r0, 8084eda <_ZplRK15StringSumHelperRK6String+0x14>
 8084ed4:	4620      	mov	r0, r4
 8084ed6:	f7ff ff2e 	bl	8084d36 <_ZN6String10invalidateEv>
	return a;
}
 8084eda:	4620      	mov	r0, r4
 8084edc:	bd10      	pop	{r4, pc}

08084ede <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 8084ede:	b538      	push	{r3, r4, r5, lr}
 8084ee0:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 8084ee2:	460d      	mov	r5, r1
 8084ee4:	b921      	cbnz	r1, 8084ef0 <_ZplRK15StringSumHelperPKc+0x12>
 8084ee6:	4620      	mov	r0, r4
 8084ee8:	f7ff ff25 	bl	8084d36 <_ZN6String10invalidateEv>
	return a;
}
 8084eec:	4620      	mov	r0, r4
 8084eee:	bd38      	pop	{r3, r4, r5, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 8084ef0:	4608      	mov	r0, r1
 8084ef2:	f004 f8e6 	bl	80890c2 <strlen>
 8084ef6:	4629      	mov	r1, r5
 8084ef8:	4602      	mov	r2, r0
 8084efa:	4620      	mov	r0, r4
 8084efc:	f7ff ffcc 	bl	8084e98 <_ZN6String6concatEPKcj>
 8084f00:	2800      	cmp	r0, #0
 8084f02:	d0f0      	beq.n	8084ee6 <_ZplRK15StringSumHelperPKc+0x8>
 8084f04:	e7f2      	b.n	8084eec <_ZplRK15StringSumHelperPKc+0xe>

08084f06 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8084f06:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8084f08:	6882      	ldr	r2, [r0, #8]
 8084f0a:	b93a      	cbnz	r2, 8084f1c <_ZNK6String6equalsEPKc+0x16>
 8084f0c:	b121      	cbz	r1, 8084f18 <_ZNK6String6equalsEPKc+0x12>
 8084f0e:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
 8084f10:	fab0 f080 	clz	r0, r0
 8084f14:	0940      	lsrs	r0, r0, #5
 8084f16:	e000      	b.n	8084f1a <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8084f18:	2001      	movs	r0, #1
}
 8084f1a:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 8084f1c:	6800      	ldr	r0, [r0, #0]
 8084f1e:	b909      	cbnz	r1, 8084f24 <_ZNK6String6equalsEPKc+0x1e>
 8084f20:	7800      	ldrb	r0, [r0, #0]
 8084f22:	e7f5      	b.n	8084f10 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
 8084f24:	f004 f89f 	bl	8089066 <strcmp>
 8084f28:	e7f2      	b.n	8084f10 <_ZNK6String6equalsEPKc+0xa>

08084f2a <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
 8084f2a:	4613      	mov	r3, r2
 8084f2c:	b510      	push	{r4, lr}
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
 8084f2e:	688a      	ldr	r2, [r1, #8]
 8084f30:	6884      	ldr	r4, [r0, #8]
 8084f32:	1aa4      	subs	r4, r4, r2
 8084f34:	429c      	cmp	r4, r3
 8084f36:	d30a      	bcc.n	8084f4e <_ZNK6String10startsWithERKS_j+0x24>
 8084f38:	6800      	ldr	r0, [r0, #0]
 8084f3a:	b138      	cbz	r0, 8084f4c <_ZNK6String10startsWithERKS_j+0x22>
 8084f3c:	6809      	ldr	r1, [r1, #0]
 8084f3e:	b141      	cbz	r1, 8084f52 <_ZNK6String10startsWithERKS_j+0x28>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
 8084f40:	4418      	add	r0, r3
 8084f42:	f004 f8c6 	bl	80890d2 <strncmp>
 8084f46:	fab0 f080 	clz	r0, r0
 8084f4a:	0940      	lsrs	r0, r0, #5
}
 8084f4c:	bd10      	pop	{r4, pc}
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
 8084f4e:	2000      	movs	r0, #0
 8084f50:	e7fc      	b.n	8084f4c <_ZNK6String10startsWithERKS_j+0x22>
 8084f52:	4608      	mov	r0, r1
 8084f54:	e7fa      	b.n	8084f4c <_ZNK6String10startsWithERKS_j+0x22>

08084f56 <_ZNK6String10startsWithERKS_>:
	if (len < s2.len) return 0;
 8084f56:	6882      	ldr	r2, [r0, #8]
 8084f58:	688b      	ldr	r3, [r1, #8]
 8084f5a:	429a      	cmp	r2, r3
 8084f5c:	d302      	bcc.n	8084f64 <_ZNK6String10startsWithERKS_+0xe>
	return startsWith(s2, 0);
 8084f5e:	2200      	movs	r2, #0
 8084f60:	f7ff bfe3 	b.w	8084f2a <_ZNK6String10startsWithERKS_j>
}
 8084f64:	2000      	movs	r0, #0
 8084f66:	4770      	bx	lr

08084f68 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
 8084f68:	6883      	ldr	r3, [r0, #8]
 8084f6a:	428b      	cmp	r3, r1
 8084f6c:	d903      	bls.n	8084f76 <_ZNK6StringixEj+0xe>
 8084f6e:	6800      	ldr	r0, [r0, #0]
 8084f70:	b110      	cbz	r0, 8084f78 <_ZNK6StringixEj+0x10>
	return buffer[index];
 8084f72:	5c40      	ldrb	r0, [r0, r1]
 8084f74:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
 8084f76:	2000      	movs	r0, #0
}
 8084f78:	4770      	bx	lr

08084f7a <_ZNK6String6charAtEj>:
	return operator[](loc);
 8084f7a:	f7ff bff5 	b.w	8084f68 <_ZNK6StringixEj>

08084f7e <_ZNK6String7indexOfEcj>:
{
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
 8084f7e:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
 8084f80:	6883      	ldr	r3, [r0, #8]
 8084f82:	4293      	cmp	r3, r2
 8084f84:	d906      	bls.n	8084f94 <_ZNK6String7indexOfEcj+0x16>
	const char* temp = strchr(buffer + fromIndex, ch);
 8084f86:	6804      	ldr	r4, [r0, #0]
 8084f88:	18a0      	adds	r0, r4, r2
 8084f8a:	f004 f855 	bl	8089038 <strchr>
	if (temp == NULL) return -1;
 8084f8e:	b108      	cbz	r0, 8084f94 <_ZNK6String7indexOfEcj+0x16>
	return temp - buffer;
 8084f90:	1b00      	subs	r0, r0, r4
}
 8084f92:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
 8084f94:	f04f 30ff 	mov.w	r0, #4294967295
 8084f98:	e7fb      	b.n	8084f92 <_ZNK6String7indexOfEcj+0x14>

08084f9a <_ZNK6String7indexOfEc>:
	return indexOf(c, 0);
 8084f9a:	2200      	movs	r2, #0
 8084f9c:	f7ff bfef 	b.w	8084f7e <_ZNK6String7indexOfEcj>

08084fa0 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 8084fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8084fa2:	461d      	mov	r5, r3
	if (left > right) {
 8084fa4:	429a      	cmp	r2, r3
 8084fa6:	bf88      	it	hi
 8084fa8:	4613      	movhi	r3, r2
{
 8084faa:	460f      	mov	r7, r1
 8084fac:	4614      	mov	r4, r2
	if (left > right) {
 8084fae:	bf88      	it	hi
 8084fb0:	462c      	movhi	r4, r5
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 8084fb2:	490b      	ldr	r1, [pc, #44]	; (8084fe0 <_ZNK6String9substringEjj+0x40>)
	if (left > right) {
 8084fb4:	bf88      	it	hi
 8084fb6:	461d      	movhi	r5, r3
{
 8084fb8:	4606      	mov	r6, r0
	String out;
 8084fba:	f7ff feff 	bl	8084dbc <_ZN6StringC1EPKc>
	if (left > len) return out;
 8084fbe:	68ba      	ldr	r2, [r7, #8]
 8084fc0:	42a2      	cmp	r2, r4
 8084fc2:	d30a      	bcc.n	8084fda <_ZNK6String9substringEjj+0x3a>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
 8084fc4:	6839      	ldr	r1, [r7, #0]
 8084fc6:	42aa      	cmp	r2, r5
 8084fc8:	bf94      	ite	ls
 8084fca:	ebc4 0202 	rsbls	r2, r4, r2
 8084fce:	ebc4 0205 	rsbhi	r2, r4, r5
 8084fd2:	4630      	mov	r0, r6
 8084fd4:	4421      	add	r1, r4
 8084fd6:	f7ff fed9 	bl	8084d8c <_ZN6String4copyEPKcj>
	return out;
}
 8084fda:	4630      	mov	r0, r6
 8084fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8084fde:	bf00      	nop
 8084fe0:	080898a4 	.word	0x080898a4

08084fe4 <_ZNK6String9substringEj>:
{
 8084fe4:	b510      	push	{r4, lr}
 8084fe6:	4604      	mov	r4, r0
	return substring(left, len);
 8084fe8:	688b      	ldr	r3, [r1, #8]
 8084fea:	f7ff ffd9 	bl	8084fa0 <_ZNK6String9substringEjj>
}
 8084fee:	4620      	mov	r0, r4
 8084ff0:	bd10      	pop	{r4, pc}

08084ff2 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 8084ff2:	6800      	ldr	r0, [r0, #0]
 8084ff4:	b108      	cbz	r0, 8084ffa <_ZNK6String5toIntEv+0x8>
 8084ff6:	f003 bfb9 	b.w	8088f6c <atol>
	return 0;
}
 8084ffa:	4770      	bx	lr

08084ffc <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
 8084ffc:	b40e      	push	{r1, r2, r3}
 8084ffe:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
 8085000:	ad09      	add	r5, sp, #36	; 0x24
 8085002:	f855 7b04 	ldr.w	r7, [r5], #4
 8085006:	4604      	mov	r4, r0
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 8085008:	462b      	mov	r3, r5
 808500a:	463a      	mov	r2, r7
 808500c:	2105      	movs	r1, #5
 808500e:	a802      	add	r0, sp, #8
    va_start(marker, fmt);
 8085010:	9501      	str	r5, [sp, #4]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 8085012:	f7ff fc89 	bl	8084928 <vsnprintf>
 8085016:	4606      	mov	r6, r0
    va_end(marker);

    String result;
 8085018:	490b      	ldr	r1, [pc, #44]	; (8085048 <_ZN6String6formatEPKcz+0x4c>)
 808501a:	4620      	mov	r0, r4
 808501c:	f7ff fece 	bl	8084dbc <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
 8085020:	4631      	mov	r1, r6
 8085022:	4620      	mov	r0, r4
 8085024:	f7ff fe9e 	bl	8084d64 <_ZN6String7reserveEj>
    if (result.buffer) {
 8085028:	6820      	ldr	r0, [r4, #0]
 808502a:	b130      	cbz	r0, 808503a <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 808502c:	462b      	mov	r3, r5
 808502e:	463a      	mov	r2, r7
 8085030:	1c71      	adds	r1, r6, #1
        va_start(marker, fmt);
 8085032:	9501      	str	r5, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 8085034:	f7ff fc78 	bl	8084928 <vsnprintf>
        va_end(marker);
        result.len = n;
 8085038:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
 808503a:	4620      	mov	r0, r4
 808503c:	b004      	add	sp, #16
 808503e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8085042:	b003      	add	sp, #12
 8085044:	4770      	bx	lr
 8085046:	bf00      	nop
 8085048:	080898a4 	.word	0x080898a4

0808504c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 808504c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808504e:	4606      	mov	r6, r0
 8085050:	460d      	mov	r5, r1
  size_t n = 0;
 8085052:	2400      	movs	r4, #0
 8085054:	188f      	adds	r7, r1, r2
  while (size--) {
 8085056:	42bd      	cmp	r5, r7
 8085058:	d00c      	beq.n	8085074 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 808505a:	6833      	ldr	r3, [r6, #0]
 808505c:	4630      	mov	r0, r6
 808505e:	689b      	ldr	r3, [r3, #8]
 8085060:	f815 1b01 	ldrb.w	r1, [r5], #1
 8085064:	4798      	blx	r3
     if (chunk>=0)
 8085066:	1e03      	subs	r3, r0, #0
 8085068:	db01      	blt.n	808506e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 808506a:	441c      	add	r4, r3
  while (size--) {
 808506c:	e7f3      	b.n	8085056 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 808506e:	2c00      	cmp	r4, #0
 8085070:	bf08      	it	eq
 8085072:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 8085074:	4620      	mov	r0, r4
 8085076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08085078 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8085078:	b570      	push	{r4, r5, r6, lr}
 808507a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 808507c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 808507e:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 8085080:	b149      	cbz	r1, 8085096 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8085082:	f004 f81e 	bl	80890c2 <strlen>
 8085086:	682b      	ldr	r3, [r5, #0]
 8085088:	4602      	mov	r2, r0
 808508a:	4621      	mov	r1, r4
 808508c:	4628      	mov	r0, r5
    }
 808508e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 8085092:	68db      	ldr	r3, [r3, #12]
 8085094:	4718      	bx	r3
    }
 8085096:	bd70      	pop	{r4, r5, r6, pc}

08085098 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 8085098:	b508      	push	{r3, lr}
  return write(str);
 808509a:	f7ff ffed 	bl	8085078 <_ZN5Print5writeEPKc>
}
 808509e:	bd08      	pop	{r3, pc}

080850a0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 80850a0:	6803      	ldr	r3, [r0, #0]
 80850a2:	689b      	ldr	r3, [r3, #8]
 80850a4:	4718      	bx	r3

080850a6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80850a6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80850a8:	210d      	movs	r1, #13
{
 80850aa:	4605      	mov	r5, r0
  size_t n = print('\r');
 80850ac:	f7ff fff8 	bl	80850a0 <_ZN5Print5printEc>
  n += print('\n');
 80850b0:	210a      	movs	r1, #10
  size_t n = print('\r');
 80850b2:	4604      	mov	r4, r0
  n += print('\n');
 80850b4:	4628      	mov	r0, r5
 80850b6:	f7ff fff3 	bl	80850a0 <_ZN5Print5printEc>
  return n;
}
 80850ba:	4420      	add	r0, r4
 80850bc:	bd38      	pop	{r3, r4, r5, pc}

080850be <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80850be:	b538      	push	{r3, r4, r5, lr}
 80850c0:	4605      	mov	r5, r0
  return write(str);
 80850c2:	f7ff ffd9 	bl	8085078 <_ZN5Print5writeEPKc>
 80850c6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80850c8:	4628      	mov	r0, r5
 80850ca:	f7ff ffec 	bl	80850a6 <_ZN5Print7printlnEv>
  return n;
}
 80850ce:	4420      	add	r0, r4
 80850d0:	bd38      	pop	{r3, r4, r5, pc}

080850d2 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80850d2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80850d4:	2a01      	cmp	r2, #1
 80850d6:	bf98      	it	ls
 80850d8:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80850da:	b530      	push	{r4, r5, lr}
 80850dc:	b08b      	sub	sp, #44	; 0x2c
 80850de:	460c      	mov	r4, r1
  *str = '\0';
 80850e0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80850e4:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80850e6:	4625      	mov	r5, r4
 80850e8:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80850ec:	fb04 5312 	mls	r3, r4, r2, r5
 80850f0:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80850f2:	2b09      	cmp	r3, #9
 80850f4:	bf94      	ite	ls
 80850f6:	3330      	addls	r3, #48	; 0x30
 80850f8:	3337      	addhi	r3, #55	; 0x37
 80850fa:	b2db      	uxtb	r3, r3
  } while(n);
 80850fc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80850fe:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 8085102:	d9f0      	bls.n	80850e6 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 8085104:	f7ff ffb8 	bl	8085078 <_ZN5Print5writeEPKc>
}
 8085108:	b00b      	add	sp, #44	; 0x2c
 808510a:	bd30      	pop	{r4, r5, pc}

0808510c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 808510c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8085110:	4605      	mov	r5, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 8085112:	4619      	mov	r1, r3
 8085114:	4610      	mov	r0, r2
{
 8085116:	4692      	mov	sl, r2
 8085118:	461f      	mov	r7, r3
 808511a:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
  if (isnan(number)) return print("nan");
 808511e:	f003 fb3d 	bl	808879c <__aeabi_dcmpun>
 8085122:	b140      	cbz	r0, 8085136 <_ZN5Print10printFloatEdh+0x2a>
  return write(str);
 8085124:	4950      	ldr	r1, [pc, #320]	; (8085268 <_ZN5Print10printFloatEdh+0x15c>)
 8085126:	4628      	mov	r0, r5
 8085128:	f7ff ffa6 	bl	8085078 <_ZN5Print5writeEPKc>
 808512c:	4604      	mov	r4, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
 808512e:	4620      	mov	r0, r4
 8085130:	b003      	add	sp, #12
 8085132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 8085136:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
 808513a:	f04f 32ff 	mov.w	r2, #4294967295
 808513e:	4650      	mov	r0, sl
 8085140:	4621      	mov	r1, r4
 8085142:	4b4a      	ldr	r3, [pc, #296]	; (808526c <_ZN5Print10printFloatEdh+0x160>)
 8085144:	f003 fb2a 	bl	808879c <__aeabi_dcmpun>
 8085148:	b948      	cbnz	r0, 808515e <_ZN5Print10printFloatEdh+0x52>
 808514a:	f04f 32ff 	mov.w	r2, #4294967295
 808514e:	4650      	mov	r0, sl
 8085150:	4621      	mov	r1, r4
 8085152:	4b46      	ldr	r3, [pc, #280]	; (808526c <_ZN5Print10printFloatEdh+0x160>)
 8085154:	f003 fb04 	bl	8088760 <__aeabi_dcmple>
 8085158:	b908      	cbnz	r0, 808515e <_ZN5Print10printFloatEdh+0x52>
  return write(str);
 808515a:	4945      	ldr	r1, [pc, #276]	; (8085270 <_ZN5Print10printFloatEdh+0x164>)
 808515c:	e7e3      	b.n	8085126 <_ZN5Print10printFloatEdh+0x1a>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 808515e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8085162:	4650      	mov	r0, sl
 8085164:	4639      	mov	r1, r7
 8085166:	4b43      	ldr	r3, [pc, #268]	; (8085274 <_ZN5Print10printFloatEdh+0x168>)
 8085168:	f003 fb0e 	bl	8088788 <__aeabi_dcmpgt>
 808516c:	b108      	cbz	r0, 8085172 <_ZN5Print10printFloatEdh+0x66>
  return write(str);
 808516e:	4942      	ldr	r1, [pc, #264]	; (8085278 <_ZN5Print10printFloatEdh+0x16c>)
 8085170:	e7d9      	b.n	8085126 <_ZN5Print10printFloatEdh+0x1a>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 8085172:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8085176:	4650      	mov	r0, sl
 8085178:	4639      	mov	r1, r7
 808517a:	4b40      	ldr	r3, [pc, #256]	; (808527c <_ZN5Print10printFloatEdh+0x170>)
 808517c:	f003 fae6 	bl	808874c <__aeabi_dcmplt>
 8085180:	2800      	cmp	r0, #0
 8085182:	d1f4      	bne.n	808516e <_ZN5Print10printFloatEdh+0x62>
  if (number < 0.0)
 8085184:	2200      	movs	r2, #0
 8085186:	2300      	movs	r3, #0
 8085188:	4650      	mov	r0, sl
 808518a:	4639      	mov	r1, r7
 808518c:	f003 fade 	bl	808874c <__aeabi_dcmplt>
 8085190:	4604      	mov	r4, r0
 8085192:	b130      	cbz	r0, 80851a2 <_ZN5Print10printFloatEdh+0x96>
     n += print('-');
 8085194:	212d      	movs	r1, #45	; 0x2d
 8085196:	4628      	mov	r0, r5
 8085198:	f7ff ff82 	bl	80850a0 <_ZN5Print5printEc>
 808519c:	4604      	mov	r4, r0
     number = -number;
 808519e:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
  size_t n = 0;
 80851a2:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
 80851a6:	2000      	movs	r0, #0
    rounding /= 10.0;
 80851a8:	f04f 0800 	mov.w	r8, #0
  double rounding = 0.5;
 80851ac:	4934      	ldr	r1, [pc, #208]	; (8085280 <_ZN5Print10printFloatEdh+0x174>)
    rounding /= 10.0;
 80851ae:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8085288 <_ZN5Print10printFloatEdh+0x17c>
  for (uint8_t i=0; i<digits; ++i)
 80851b2:	fa5f f38b 	uxtb.w	r3, fp
 80851b6:	429e      	cmp	r6, r3
 80851b8:	d906      	bls.n	80851c8 <_ZN5Print10printFloatEdh+0xbc>
    rounding /= 10.0;
 80851ba:	4642      	mov	r2, r8
 80851bc:	464b      	mov	r3, r9
 80851be:	f003 f97d 	bl	80884bc <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
 80851c2:	f10b 0b01 	add.w	fp, fp, #1
 80851c6:	e7f4      	b.n	80851b2 <_ZN5Print10printFloatEdh+0xa6>
  number += rounding;
 80851c8:	463b      	mov	r3, r7
 80851ca:	4652      	mov	r2, sl
 80851cc:	f002 fe96 	bl	8087efc <__adddf3>
 80851d0:	4689      	mov	r9, r1
 80851d2:	4680      	mov	r8, r0
  unsigned long int_part = (unsigned long)number;
 80851d4:	f003 fb20 	bl	8088818 <__aeabi_d2uiz>
 80851d8:	4607      	mov	r7, r0
  double remainder = number - (double)int_part;
 80851da:	f002 ffcb 	bl	8088174 <__aeabi_ui2d>
 80851de:	4602      	mov	r2, r0
 80851e0:	460b      	mov	r3, r1
 80851e2:	4640      	mov	r0, r8
 80851e4:	4649      	mov	r1, r9
 80851e6:	f002 fe87 	bl	8087ef8 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80851ea:	220a      	movs	r2, #10
 80851ec:	4680      	mov	r8, r0
 80851ee:	4689      	mov	r9, r1
 80851f0:	4628      	mov	r0, r5
 80851f2:	4639      	mov	r1, r7
 80851f4:	f7ff ff6d 	bl	80850d2 <_ZN5Print11printNumberEmh>
  n += print(int_part);
 80851f8:	4404      	add	r4, r0
  if (digits > 0) {
 80851fa:	b126      	cbz	r6, 8085206 <_ZN5Print10printFloatEdh+0xfa>
  return write(str);
 80851fc:	4628      	mov	r0, r5
 80851fe:	4921      	ldr	r1, [pc, #132]	; (8085284 <_ZN5Print10printFloatEdh+0x178>)
 8085200:	f7ff ff3a 	bl	8085078 <_ZN5Print5writeEPKc>
    n += print(".");
 8085204:	4404      	add	r4, r0
    remainder *= 10.0;
 8085206:	f04f 0a00 	mov.w	sl, #0
 808520a:	f8df b07c 	ldr.w	fp, [pc, #124]	; 8085288 <_ZN5Print10printFloatEdh+0x17c>
  while (digits-- > 0)
 808520e:	3e01      	subs	r6, #1
 8085210:	b2f6      	uxtb	r6, r6
 8085212:	2eff      	cmp	r6, #255	; 0xff
 8085214:	d08b      	beq.n	808512e <_ZN5Print10printFloatEdh+0x22>
    remainder *= 10.0;
 8085216:	4652      	mov	r2, sl
 8085218:	465b      	mov	r3, fp
 808521a:	4640      	mov	r0, r8
 808521c:	4649      	mov	r1, r9
 808521e:	f003 f823 	bl	8088268 <__aeabi_dmul>
 8085222:	4680      	mov	r8, r0
 8085224:	4689      	mov	r9, r1
    int toPrint = int(remainder);
 8085226:	f003 facf 	bl	80887c8 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
 808522a:	1e07      	subs	r7, r0, #0
 808522c:	da19      	bge.n	8085262 <_ZN5Print10printFloatEdh+0x156>
            t = print('-');
 808522e:	212d      	movs	r1, #45	; 0x2d
 8085230:	4628      	mov	r0, r5
 8085232:	f7ff ff35 	bl	80850a0 <_ZN5Print5printEc>
 8085236:	4603      	mov	r3, r0
            val = -n;
 8085238:	4279      	negs	r1, r7
        return printNumber(val, base) + t;
 808523a:	220a      	movs	r2, #10
 808523c:	4628      	mov	r0, r5
 808523e:	9301      	str	r3, [sp, #4]
 8085240:	f7ff ff47 	bl	80850d2 <_ZN5Print11printNumberEmh>
 8085244:	9b01      	ldr	r3, [sp, #4]
 8085246:	4403      	add	r3, r0
    remainder -= toPrint;
 8085248:	4638      	mov	r0, r7
    n += print(toPrint);
 808524a:	441c      	add	r4, r3
    remainder -= toPrint;
 808524c:	f002 ffa2 	bl	8088194 <__aeabi_i2d>
 8085250:	4602      	mov	r2, r0
 8085252:	460b      	mov	r3, r1
 8085254:	4640      	mov	r0, r8
 8085256:	4649      	mov	r1, r9
 8085258:	f002 fe4e 	bl	8087ef8 <__aeabi_dsub>
 808525c:	4680      	mov	r8, r0
 808525e:	4689      	mov	r9, r1
  while (digits-- > 0)
 8085260:	e7d5      	b.n	808520e <_ZN5Print10printFloatEdh+0x102>
            val = n;
 8085262:	4639      	mov	r1, r7
        size_t t = 0;
 8085264:	2300      	movs	r3, #0
 8085266:	e7e8      	b.n	808523a <_ZN5Print10printFloatEdh+0x12e>
 8085268:	08089d4f 	.word	0x08089d4f
 808526c:	7fefffff 	.word	0x7fefffff
 8085270:	08089d53 	.word	0x08089d53
 8085274:	41efffff 	.word	0x41efffff
 8085278:	08089d57 	.word	0x08089d57
 808527c:	c1efffff 	.word	0xc1efffff
 8085280:	3fe00000 	.word	0x3fe00000
 8085284:	08089561 	.word	0x08089561
 8085288:	40240000 	.word	0x40240000

0808528c <_ZN5Print7printlnEdi>:
{
 808528c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return printFloat(n, digits);
 808528e:	f89d 1018 	ldrb.w	r1, [sp, #24]
{
 8085292:	4605      	mov	r5, r0
  return printFloat(n, digits);
 8085294:	9100      	str	r1, [sp, #0]
 8085296:	f7ff ff39 	bl	808510c <_ZN5Print10printFloatEdh>
 808529a:	4604      	mov	r4, r0
  n += println();
 808529c:	4628      	mov	r0, r5
 808529e:	f7ff ff02 	bl	80850a6 <_ZN5Print7printlnEv>
}
 80852a2:	4420      	add	r0, r4
 80852a4:	b003      	add	sp, #12
 80852a6:	bd30      	pop	{r4, r5, pc}

080852a8 <_ZN5Print7printlnEfi>:
{
 80852a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80852aa:	4604      	mov	r4, r0
    return println((double)num, digits);
 80852ac:	4608      	mov	r0, r1
{
 80852ae:	4615      	mov	r5, r2
    return println((double)num, digits);
 80852b0:	f002 ff82 	bl	80881b8 <__aeabi_f2d>
 80852b4:	9500      	str	r5, [sp, #0]
 80852b6:	4602      	mov	r2, r0
 80852b8:	460b      	mov	r3, r1
 80852ba:	4620      	mov	r0, r4
 80852bc:	f7ff ffe6 	bl	808528c <_ZN5Print7printlnEdi>
}
 80852c0:	b003      	add	sp, #12
 80852c2:	bd30      	pop	{r4, r5, pc}

080852c4 <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 80852c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80852c8:	b086      	sub	sp, #24
 80852ca:	af00      	add	r7, sp, #0
 80852cc:	4605      	mov	r5, r0
 80852ce:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 80852d0:	1d38      	adds	r0, r7, #4
 80852d2:	2114      	movs	r1, #20
{
 80852d4:	4614      	mov	r4, r2
    va_copy(args2, args);
 80852d6:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 80852d8:	f7ff fb26 	bl	8084928 <vsnprintf>

    if (n<bufsize)
 80852dc:	2813      	cmp	r0, #19
 80852de:	d80e      	bhi.n	80852fe <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 80852e0:	4628      	mov	r0, r5
 80852e2:	1d39      	adds	r1, r7, #4
 80852e4:	f7ff fec8 	bl	8085078 <_ZN5Print5writeEPKc>
 80852e8:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 80852ea:	b11e      	cbz	r6, 80852f4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 80852ec:	4628      	mov	r0, r5
 80852ee:	f7ff feda 	bl	80850a6 <_ZN5Print7printlnEv>
 80852f2:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 80852f4:	4620      	mov	r0, r4
 80852f6:	3718      	adds	r7, #24
 80852f8:	46bd      	mov	sp, r7
 80852fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 80852fe:	f100 0308 	add.w	r3, r0, #8
 8085302:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 8085306:	46e8      	mov	r8, sp
        char bigger[n+1];
 8085308:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 808530c:	4622      	mov	r2, r4
 808530e:	1c41      	adds	r1, r0, #1
 8085310:	683b      	ldr	r3, [r7, #0]
 8085312:	4668      	mov	r0, sp
 8085314:	f7ff fb08 	bl	8084928 <vsnprintf>
  return write(str);
 8085318:	4669      	mov	r1, sp
 808531a:	4628      	mov	r0, r5
 808531c:	f7ff feac 	bl	8085078 <_ZN5Print5writeEPKc>
 8085320:	4604      	mov	r4, r0
 8085322:	46c5      	mov	sp, r8
 8085324:	e7e1      	b.n	80852ea <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

08085326 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 8085326:	6880      	ldr	r0, [r0, #8]
 8085328:	6803      	ldr	r3, [r0, #0]
 808532a:	68db      	ldr	r3, [r3, #12]
 808532c:	4718      	bx	r3

0808532e <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 808532e:	4770      	bx	lr

08085330 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 8085330:	4608      	mov	r0, r1
 8085332:	b111      	cbz	r1, 808533a <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 8085334:	680b      	ldr	r3, [r1, #0]
 8085336:	685b      	ldr	r3, [r3, #4]
 8085338:	4718      	bx	r3
}
 808533a:	4770      	bx	lr

0808533c <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 808533c:	4770      	bx	lr

0808533e <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 808533e:	4770      	bx	lr

08085340 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 8085340:	4770      	bx	lr

08085342 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
 8085342:	b538      	push	{r3, r4, r5, lr}
 8085344:	4604      	mov	r4, r0
 8085346:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 8085348:	6800      	ldr	r0, [r0, #0]
 808534a:	212e      	movs	r1, #46	; 0x2e
 808534c:	f003 fe81 	bl	8089052 <strchrnul>
    size = s - category;
 8085350:	6823      	ldr	r3, [r4, #0]
    const char *s = strchrnul(category, '.');
 8085352:	4602      	mov	r2, r0
    size = s - category;
 8085354:	1ac0      	subs	r0, r0, r3
 8085356:	6028      	str	r0, [r5, #0]
    if (size) {
 8085358:	b120      	cbz	r0, 8085364 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x22>
        if (*s) {
 808535a:	7813      	ldrb	r3, [r2, #0]
 808535c:	b103      	cbz	r3, 8085360 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1e>
            ++s;
 808535e:	3201      	adds	r2, #1
 8085360:	6820      	ldr	r0, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8085362:	6022      	str	r2, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
}
 8085364:	bd38      	pop	{r3, r4, r5, pc}

08085366 <_ZN5spark16JSONStreamWriterD0Ev>:
 8085366:	b510      	push	{r4, lr}
 8085368:	4604      	mov	r4, r0
 808536a:	210c      	movs	r1, #12
 808536c:	f002 fc91 	bl	8087c92 <_ZdlPvj>
 8085370:	4620      	mov	r0, r4
 8085372:	bd10      	pop	{r4, pc}

08085374 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 8085374:	b510      	push	{r4, lr}
 8085376:	4604      	mov	r4, r0
 8085378:	2104      	movs	r1, #4
 808537a:	f002 fc8a 	bl	8087c92 <_ZdlPvj>
 808537e:	4620      	mov	r0, r4
 8085380:	bd10      	pop	{r4, pc}

08085382 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 8085382:	b510      	push	{r4, lr}
 8085384:	4604      	mov	r4, r0
 8085386:	2104      	movs	r1, #4
 8085388:	f002 fc83 	bl	8087c92 <_ZdlPvj>
 808538c:	4620      	mov	r0, r4
 808538e:	bd10      	pop	{r4, pc}

08085390 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 8085390:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 8085392:	f003 fe68 	bl	8089066 <strcmp>
}
 8085396:	fab0 f080 	clz	r0, r0
 808539a:	0940      	lsrs	r0, r0, #5
 808539c:	bd08      	pop	{r3, pc}

0808539e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 808539e:	b510      	push	{r4, lr}
 80853a0:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
 80853a2:	f001 fe09 	bl	8086fb8 <_Z16_fetch_usbserialv>
 80853a6:	4284      	cmp	r4, r0
 80853a8:	d105      	bne.n	80853b6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 80853aa:	f001 fe05 	bl	8086fb8 <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
 80853ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        USBSerial1.end();
 80853b2:	f001 bdf5 	b.w	8086fa0 <_ZN9USBSerial3endEv>
    if (stream == &USBSerial1) {
 80853b6:	f001 fe2f 	bl	8087018 <_Z17_fetch_usbserial1v>
 80853ba:	4284      	cmp	r4, r0
 80853bc:	d102      	bne.n	80853c4 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x26>
        USBSerial1.end();
 80853be:	f001 fe2b 	bl	8087018 <_Z17_fetch_usbserial1v>
 80853c2:	e7f4      	b.n	80853ae <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x10>
    if (stream == &Serial1) {
 80853c4:	f001 ff80 	bl	80872c8 <_Z22__fetch_global_Serial1v>
 80853c8:	4284      	cmp	r4, r0
 80853ca:	d105      	bne.n	80853d8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
        Serial1.end();
 80853cc:	f001 ff7c 	bl	80872c8 <_Z22__fetch_global_Serial1v>
}
 80853d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 80853d4:	f001 bf75 	b.w	80872c2 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 80853d8:	b12c      	cbz	r4, 80853e6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x48>
 80853da:	6823      	ldr	r3, [r4, #0]
 80853dc:	4620      	mov	r0, r4
}
 80853de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80853e2:	685b      	ldr	r3, [r3, #4]
 80853e4:	4718      	bx	r3
 80853e6:	bd10      	pop	{r4, pc}

080853e8 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 80853e8:	b538      	push	{r3, r4, r5, lr}
 80853ea:	4605      	mov	r5, r0
    return value(val, strlen(val));
 80853ec:	4608      	mov	r0, r1
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 80853ee:	460c      	mov	r4, r1
    return value(val, strlen(val));
 80853f0:	f003 fe67 	bl	80890c2 <strlen>
 80853f4:	4621      	mov	r1, r4
 80853f6:	4602      	mov	r2, r0
 80853f8:	4628      	mov	r0, r5
}
 80853fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return value(val, strlen(val));
 80853fe:	f002 baa4 	b.w	808794a <_ZN5spark10JSONWriter5valueEPKcj>

08085402 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 8085402:	b570      	push	{r4, r5, r6, lr}
 8085404:	4604      	mov	r4, r0
    write(str, strlen(str));
 8085406:	4608      	mov	r0, r1
inline void spark::StreamLogHandler::write(const char *str) {
 8085408:	460d      	mov	r5, r1
    write(str, strlen(str));
 808540a:	f003 fe5a 	bl	80890c2 <strlen>
 808540e:	6823      	ldr	r3, [r4, #0]
 8085410:	4602      	mov	r2, r0
 8085412:	4629      	mov	r1, r5
 8085414:	4620      	mov	r0, r4
}
 8085416:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    write(str, strlen(str));
 808541a:	68db      	ldr	r3, [r3, #12]
 808541c:	4718      	bx	r3

0808541e <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 808541e:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 8085420:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 8085422:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 8085426:	2201      	movs	r2, #1
 8085428:	68db      	ldr	r3, [r3, #12]
 808542a:	f10d 0107 	add.w	r1, sp, #7
 808542e:	4798      	blx	r3
}
 8085430:	b003      	add	sp, #12
 8085432:	f85d fb04 	ldr.w	pc, [sp], #4

08085436 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
 8085436:	b40e      	push	{r1, r2, r3}
 8085438:	b503      	push	{r0, r1, lr}
 808543a:	ab03      	add	r3, sp, #12
 808543c:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
 8085440:	2100      	movs	r1, #0
 8085442:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
 8085444:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
 8085446:	f7ff ff3d 	bl	80852c4 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
 808544a:	b002      	add	sp, #8
 808544c:	f85d eb04 	ldr.w	lr, [sp], #4
 8085450:	b003      	add	sp, #12
 8085452:	4770      	bx	lr

08085454 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 8085454:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 8085458:	f04f 0814 	mov.w	r8, #20
 808545c:	e9d0 9500 	ldrd	r9, r5, [r0]
 8085460:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 8085462:	464c      	mov	r4, r9
 8085464:	fb08 f505 	mul.w	r5, r8, r5
 8085468:	9300      	str	r3, [sp, #0]
 808546a:	10ab      	asrs	r3, r5, #2
 808546c:	4d17      	ldr	r5, [pc, #92]	; (80854cc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
 808546e:	435d      	muls	r5, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 8085470:	2d00      	cmp	r5, #0
 8085472:	dd23      	ble.n	80854bc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
 8085474:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 8085476:	fb08 f006 	mul.w	r0, r8, r6
 808547a:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 808547e:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8085482:	463a      	mov	r2, r7
 8085484:	455f      	cmp	r7, fp
 8085486:	bf28      	it	cs
 8085488:	465a      	movcs	r2, fp
 808548a:	5820      	ldr	r0, [r4, r0]
 808548c:	9101      	str	r1, [sp, #4]
 808548e:	f003 fe20 	bl	80890d2 <strncmp>
                if (cmp == 0) {
 8085492:	2301      	movs	r3, #1
 8085494:	9901      	ldr	r1, [sp, #4]
 8085496:	b978      	cbnz	r0, 80854b8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
 8085498:	455f      	cmp	r7, fp
 808549a:	d103      	bne.n	80854a4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 808549c:	9a00      	ldr	r2, [sp, #0]
 808549e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 80854a0:	4635      	mov	r5, r6
 80854a2:	e7e5      	b.n	8085470 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
 80854a4:	bf8c      	ite	hi
 80854a6:	2001      	movhi	r0, #1
 80854a8:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 80854aa:	2800      	cmp	r0, #0
 80854ac:	d0f8      	beq.n	80854a0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 80854ae:	1bae      	subs	r6, r5, r6
	      ++__first;
 80854b0:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
 80854b4:	3e01      	subs	r6, #1
 80854b6:	e7f3      	b.n	80854a0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
 80854b8:	0fc0      	lsrs	r0, r0, #31
 80854ba:	e7f6      	b.n	80854aa <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
 80854bc:	eba4 0409 	sub.w	r4, r4, r9
}
 80854c0:	4802      	ldr	r0, [pc, #8]	; (80854cc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
 80854c2:	10a4      	asrs	r4, r4, #2
 80854c4:	4360      	muls	r0, r4
 80854c6:	b003      	add	sp, #12
 80854c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80854cc:	cccccccd 	.word	0xcccccccd

080854d0 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 80854d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 80854d2:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 80854d4:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 80854d6:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 80854d8:	b303      	cbz	r3, 808551c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 80854da:	b1f9      	cbz	r1, 808551c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 80854dc:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 80854de:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 80854e2:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 80854e4:	a903      	add	r1, sp, #12
 80854e6:	a801      	add	r0, sp, #4
 80854e8:	f7ff ff2b 	bl	8085342 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 80854ec:	4601      	mov	r1, r0
 80854ee:	b1a8      	cbz	r0, 808551c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 80854f0:	f10d 030b 	add.w	r3, sp, #11
 80854f4:	4620      	mov	r0, r4
 80854f6:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 80854f8:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 80854fc:	f7ff ffaa 	bl	8085454 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 8085500:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8085504:	b153      	cbz	r3, 808551c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 8085506:	2314      	movs	r3, #20
 8085508:	6824      	ldr	r4, [r4, #0]
 808550a:	fb03 4400 	mla	r4, r3, r0, r4
            if (node.level >= 0) {
 808550e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 8085512:	3408      	adds	r4, #8
            if (node.level >= 0) {
 8085514:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 8085516:	bfa8      	it	ge
 8085518:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
 808551a:	e7e3      	b.n	80854e4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 808551c:	4630      	mov	r0, r6
 808551e:	b004      	add	sp, #16
 8085520:	bd70      	pop	{r4, r5, r6, pc}
	...

08085524 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 8085524:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 8085526:	4c0a      	ldr	r4, [pc, #40]	; (8085550 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 8085528:	7823      	ldrb	r3, [r4, #0]
 808552a:	f3bf 8f5b 	dmb	ish
 808552e:	07db      	lsls	r3, r3, #31
 8085530:	d40b      	bmi.n	808554a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
 8085532:	4620      	mov	r0, r4
 8085534:	f7fa fdd2 	bl	80800dc <__cxa_guard_acquire>
 8085538:	b138      	cbz	r0, 808554a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
 808553a:	4620      	mov	r0, r4
 808553c:	f7fa fdd3 	bl	80800e6 <__cxa_guard_release>
 8085540:	4a04      	ldr	r2, [pc, #16]	; (8085554 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
 8085542:	4905      	ldr	r1, [pc, #20]	; (8085558 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
 8085544:	4805      	ldr	r0, [pc, #20]	; (808555c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
 8085546:	f002 fb9f 	bl	8087c88 <__aeabi_atexit>
}
 808554a:	4804      	ldr	r0, [pc, #16]	; (808555c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
 808554c:	bd10      	pop	{r4, pc}
 808554e:	bf00      	nop
 8085550:	200003ac 	.word	0x200003ac
 8085554:	20000130 	.word	0x20000130
 8085558:	0808533f 	.word	0x0808533f
 808555c:	200000b8 	.word	0x200000b8

08085560 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 8085560:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 8085562:	4c0a      	ldr	r4, [pc, #40]	; (808558c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 8085564:	7823      	ldrb	r3, [r4, #0]
 8085566:	f3bf 8f5b 	dmb	ish
 808556a:	07db      	lsls	r3, r3, #31
 808556c:	d40b      	bmi.n	8085586 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
 808556e:	4620      	mov	r0, r4
 8085570:	f7fa fdb4 	bl	80800dc <__cxa_guard_acquire>
 8085574:	b138      	cbz	r0, 8085586 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
 8085576:	4620      	mov	r0, r4
 8085578:	f7fa fdb5 	bl	80800e6 <__cxa_guard_release>
 808557c:	4a04      	ldr	r2, [pc, #16]	; (8085590 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
 808557e:	4905      	ldr	r1, [pc, #20]	; (8085594 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
 8085580:	4805      	ldr	r0, [pc, #20]	; (8085598 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
 8085582:	f002 fb81 	bl	8087c88 <__aeabi_atexit>
    return &factory;
}
 8085586:	4804      	ldr	r0, [pc, #16]	; (8085598 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
 8085588:	bd10      	pop	{r4, pc}
 808558a:	bf00      	nop
 808558c:	200003b0 	.word	0x200003b0
 8085590:	20000130 	.word	0x20000130
 8085594:	0808533d 	.word	0x0808533d
 8085598:	200000bc 	.word	0x200000bc

0808559c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 808559c:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 808559e:	2500      	movs	r5, #0
 80855a0:	4604      	mov	r4, r0
 80855a2:	e9c0 5500 	strd	r5, r5, [r0]
 80855a6:	e9c0 5504 	strd	r5, r5, [r0, #16]
 80855aa:	6085      	str	r5, [r0, #8]
 80855ac:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
 80855ae:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
 80855b2:	f7fe fed1 	bl	8084358 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 80855b6:	f7ff ffb5 	bl	8085524 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 80855ba:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 80855bc:	f7ff ffd0 	bl	8085560 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 80855c0:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 80855c2:	6220      	str	r0, [r4, #32]
}
 80855c4:	4620      	mov	r0, r4
 80855c6:	bd38      	pop	{r3, r4, r5, pc}

080855c8 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 80855c8:	b510      	push	{r4, lr}
    static LogManager mgr;
 80855ca:	4c0b      	ldr	r4, [pc, #44]	; (80855f8 <_ZN5spark10LogManager8instanceEv+0x30>)
 80855cc:	7823      	ldrb	r3, [r4, #0]
 80855ce:	f3bf 8f5b 	dmb	ish
 80855d2:	07db      	lsls	r3, r3, #31
 80855d4:	d40e      	bmi.n	80855f4 <_ZN5spark10LogManager8instanceEv+0x2c>
 80855d6:	4620      	mov	r0, r4
 80855d8:	f7fa fd80 	bl	80800dc <__cxa_guard_acquire>
 80855dc:	b150      	cbz	r0, 80855f4 <_ZN5spark10LogManager8instanceEv+0x2c>
 80855de:	4807      	ldr	r0, [pc, #28]	; (80855fc <_ZN5spark10LogManager8instanceEv+0x34>)
 80855e0:	f7ff ffdc 	bl	808559c <_ZN5spark10LogManagerC1Ev>
 80855e4:	4620      	mov	r0, r4
 80855e6:	f7fa fd7e 	bl	80800e6 <__cxa_guard_release>
 80855ea:	4a05      	ldr	r2, [pc, #20]	; (8085600 <_ZN5spark10LogManager8instanceEv+0x38>)
 80855ec:	4905      	ldr	r1, [pc, #20]	; (8085604 <_ZN5spark10LogManager8instanceEv+0x3c>)
 80855ee:	4803      	ldr	r0, [pc, #12]	; (80855fc <_ZN5spark10LogManager8instanceEv+0x34>)
 80855f0:	f002 fb4a 	bl	8087c88 <__aeabi_atexit>
    return &mgr;
}
 80855f4:	4801      	ldr	r0, [pc, #4]	; (80855fc <_ZN5spark10LogManager8instanceEv+0x34>)
 80855f6:	bd10      	pop	{r4, pc}
 80855f8:	200003a8 	.word	0x200003a8
 80855fc:	200003b8 	.word	0x200003b8
 8085600:	20000130 	.word	0x20000130
 8085604:	08085a8b 	.word	0x08085a8b

08085608 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 8085608:	2300      	movs	r3, #0
 808560a:	4a02      	ldr	r2, [pc, #8]	; (8085614 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 808560c:	4902      	ldr	r1, [pc, #8]	; (8085618 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 808560e:	4803      	ldr	r0, [pc, #12]	; (808561c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 8085610:	f7ff b832 	b.w	8084678 <log_set_callbacks>
 8085614:	08085969 	.word	0x08085969
 8085618:	080858f5 	.word	0x080858f5
 808561c:	08085875 	.word	0x08085875

08085620 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 8085620:	2300      	movs	r3, #0
 8085622:	461a      	mov	r2, r3
 8085624:	4619      	mov	r1, r3
 8085626:	4618      	mov	r0, r3
 8085628:	f7ff b826 	b.w	8084678 <log_set_callbacks>

0808562c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
 808562c:	680b      	ldr	r3, [r1, #0]
 808562e:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
 8085630:	b113      	cbz	r3, 8085638 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 8085632:	685a      	ldr	r2, [r3, #4]
 8085634:	3201      	adds	r2, #1
 8085636:	605a      	str	r2, [r3, #4]
      }
 8085638:	4770      	bx	lr

0808563a <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 808563a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808563c:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 808563e:	690d      	ldr	r5, [r1, #16]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8085640:	f851 3b04 	ldr.w	r3, [r1], #4
 8085644:	a801      	add	r0, sp, #4
 8085646:	9300      	str	r3, [sp, #0]
 8085648:	f7ff fff0 	bl	808562c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 808564c:	466a      	mov	r2, sp
 808564e:	4629      	mov	r1, r5
 8085650:	4620      	mov	r0, r4
 8085652:	f002 f825 	bl	80876a0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 8085656:	a801      	add	r0, sp, #4
 8085658:	f7fa feea 	bl	8080430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 808565c:	4620      	mov	r0, r4
 808565e:	b003      	add	sp, #12
 8085660:	bd30      	pop	{r4, r5, pc}

08085662 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 8085662:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8085664:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 8085666:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8085668:	f851 3b04 	ldr.w	r3, [r1], #4
 808566c:	a801      	add	r0, sp, #4
 808566e:	9300      	str	r3, [sp, #0]
 8085670:	f7ff ffdc 	bl	808562c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8085674:	466a      	mov	r2, sp
 8085676:	4629      	mov	r1, r5
 8085678:	4620      	mov	r0, r4
 808567a:	f002 f88d 	bl	8087798 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 808567e:	a801      	add	r0, sp, #4
 8085680:	f7fa fed6 	bl	8080430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 8085684:	4620      	mov	r0, r4
 8085686:	b003      	add	sp, #12
 8085688:	bd30      	pop	{r4, r5, pc}

0808568a <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 808568a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808568c:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 808568e:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8085690:	f851 3b04 	ldr.w	r3, [r1], #4
 8085694:	a801      	add	r0, sp, #4
 8085696:	9300      	str	r3, [sp, #0]
 8085698:	f7ff ffc8 	bl	808562c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 808569c:	466a      	mov	r2, sp
 808569e:	4629      	mov	r1, r5
 80856a0:	4620      	mov	r0, r4
 80856a2:	f002 f855 	bl	8087750 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 80856a6:	a801      	add	r0, sp, #4
 80856a8:	f7fa fec2 	bl	8080430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80856ac:	4620      	mov	r0, r4
 80856ae:	b003      	add	sp, #12
 80856b0:	bd30      	pop	{r4, r5, pc}
	...

080856b4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 80856b4:	b570      	push	{r4, r5, r6, lr}
 80856b6:	b08a      	sub	sp, #40	; 0x28
 80856b8:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 80856ba:	4601      	mov	r1, r0
 80856bc:	a804      	add	r0, sp, #16
 80856be:	f7ff ffd0 	bl	8085662 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 80856c2:	4e14      	ldr	r6, [pc, #80]	; (8085714 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 80856c4:	a804      	add	r0, sp, #16
 80856c6:	f002 f87f 	bl	80877c8 <_ZN5spark18JSONObjectIterator4nextEv>
 80856ca:	b1e8      	cbz	r0, 8085708 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 80856cc:	4668      	mov	r0, sp
 80856ce:	a904      	add	r1, sp, #16
 80856d0:	f7ff ffdb 	bl	808568a <_ZNK5spark18JSONObjectIterator4nameEv>
 80856d4:	4631      	mov	r1, r6
 80856d6:	9802      	ldr	r0, [sp, #8]
 80856d8:	f7ff fe5a 	bl	8085390 <_ZNK5spark10JSONStringeqEPKc.isra.0>
 80856dc:	4604      	mov	r4, r0
 80856de:	b110      	cbz	r0, 80856e6 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 80856e0:	1e2c      	subs	r4, r5, #0
 80856e2:	bf18      	it	ne
 80856e4:	2401      	movne	r4, #1
 80856e6:	a801      	add	r0, sp, #4
 80856e8:	f7fa fea2 	bl	8080430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80856ec:	2c00      	cmp	r4, #0
 80856ee:	d0e9      	beq.n	80856c4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 80856f0:	4668      	mov	r0, sp
 80856f2:	a904      	add	r1, sp, #16
 80856f4:	f7ff ffa1 	bl	808563a <_ZNK5spark18JSONObjectIterator5valueEv>
 80856f8:	4668      	mov	r0, sp
 80856fa:	f002 f808 	bl	808770e <_ZNK5spark9JSONValue5toIntEv>
 80856fe:	6028      	str	r0, [r5, #0]
 8085700:	a801      	add	r0, sp, #4
 8085702:	f7fa fe95 	bl	8080430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8085706:	e7dd      	b.n	80856c4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 8085708:	a805      	add	r0, sp, #20
 808570a:	f7fa fe91 	bl	8080430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 808570e:	b00a      	add	sp, #40	; 0x28
 8085710:	bd70      	pop	{r4, r5, r6, pc}
 8085712:	bf00      	nop
 8085714:	08089d5b 	.word	0x08089d5b

08085718 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 8085718:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808571a:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 808571c:	4919      	ldr	r1, [pc, #100]	; (8085784 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x6c>)
 808571e:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 8085720:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 8085722:	f003 fca0 	bl	8089066 <strcmp>
 8085726:	b948      	cbnz	r0, 808573c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
 8085728:	f001 fc46 	bl	8086fb8 <_Z16_fetch_usbserialv>
 808572c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8085730:	f001 fc32 	bl	8086f98 <_ZN9USBSerial5beginEl>
        return &Serial;
 8085734:	f001 fc40 	bl	8086fb8 <_Z16_fetch_usbserialv>
}
 8085738:	b003      	add	sp, #12
 808573a:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "USBSerial1") == 0) {
 808573c:	4620      	mov	r0, r4
 808573e:	4912      	ldr	r1, [pc, #72]	; (8085788 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x70>)
 8085740:	f003 fc91 	bl	8089066 <strcmp>
 8085744:	b940      	cbnz	r0, 8085758 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x40>
        USBSerial1.begin();
 8085746:	f001 fc67 	bl	8087018 <_Z17_fetch_usbserial1v>
 808574a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 808574e:	f001 fc23 	bl	8086f98 <_ZN9USBSerial5beginEl>
        return &USBSerial1;
 8085752:	f001 fc61 	bl	8087018 <_Z17_fetch_usbserial1v>
 8085756:	e7ef      	b.n	8085738 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    if (strcmp(type, "Serial1") == 0) {
 8085758:	4620      	mov	r0, r4
 808575a:	490c      	ldr	r1, [pc, #48]	; (808578c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x74>)
 808575c:	f003 fc83 	bl	8089066 <strcmp>
 8085760:	b970      	cbnz	r0, 8085780 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x68>
        int baud = 9600;
 8085762:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 8085766:	a901      	add	r1, sp, #4
 8085768:	4628      	mov	r0, r5
        int baud = 9600;
 808576a:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 808576c:	f7ff ffa2 	bl	80856b4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 8085770:	f001 fdaa 	bl	80872c8 <_Z22__fetch_global_Serial1v>
 8085774:	9901      	ldr	r1, [sp, #4]
 8085776:	f001 fda1 	bl	80872bc <_ZN11USARTSerial5beginEm>
        return &Serial1;
 808577a:	f001 fda5 	bl	80872c8 <_Z22__fetch_global_Serial1v>
 808577e:	e7db      	b.n	8085738 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
 8085780:	2000      	movs	r0, #0
 8085782:	e7d9      	b.n	8085738 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
 8085784:	08089d60 	.word	0x08089d60
 8085788:	08089d67 	.word	0x08089d67
 808578c:	08089d6a 	.word	0x08089d6a

08085790 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 8085790:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 8085792:	2614      	movs	r6, #20
 8085794:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 8085798:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 808579a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 808579e:	42ae      	cmp	r6, r5
 80857a0:	d005      	beq.n	80857ae <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 80857a2:	f105 0008 	add.w	r0, r5, #8
 80857a6:	f7ff fff3 	bl	8085790 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80857aa:	3514      	adds	r5, #20
 80857ac:	e7f7      	b.n	808579e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 80857ae:	6820      	ldr	r0, [r4, #0]
 80857b0:	f7ff f89a 	bl	80848e8 <free>
}
 80857b4:	4620      	mov	r0, r4
 80857b6:	bd70      	pop	{r4, r5, r6, pc}

080857b8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 80857b8:	b570      	push	{r4, r5, r6, lr}
 80857ba:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 80857bc:	e9d0 5300 	ldrd	r5, r3, [r0]
 80857c0:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 80857c4:	42ae      	cmp	r6, r5
 80857c6:	d004      	beq.n	80857d2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 80857c8:	4628      	mov	r0, r5
 80857ca:	f7ff faad 	bl	8084d28 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 80857ce:	3510      	adds	r5, #16
 80857d0:	e7f8      	b.n	80857c4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 80857d2:	6820      	ldr	r0, [r4, #0]
 80857d4:	f7ff f888 	bl	80848e8 <free>
}
 80857d8:	4620      	mov	r0, r4
 80857da:	bd70      	pop	{r4, r5, r6, pc}

080857dc <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 80857dc:	b510      	push	{r4, lr}
 80857de:	4604      	mov	r4, r0
 80857e0:	300c      	adds	r0, #12
 80857e2:	f7ff ffd5 	bl	8085790 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80857e6:	4620      	mov	r0, r4
 80857e8:	f7ff ffe6 	bl	80857b8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 80857ec:	4620      	mov	r0, r4
 80857ee:	bd10      	pop	{r4, pc}

080857f0 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 80857f0:	b510      	push	{r4, lr}
 80857f2:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 80857f4:	4b03      	ldr	r3, [pc, #12]	; (8085804 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 80857f6:	f840 3b04 	str.w	r3, [r0], #4
 80857fa:	f7ff ffef 	bl	80857dc <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 80857fe:	4620      	mov	r0, r4
 8085800:	bd10      	pop	{r4, pc}
 8085802:	bf00      	nop
 8085804:	080897c8 	.word	0x080897c8

08085808 <_ZN5spark16StreamLogHandlerD0Ev>:
 8085808:	b510      	push	{r4, lr}
 808580a:	4604      	mov	r4, r0
 808580c:	f7ff fff0 	bl	80857f0 <_ZN5spark16StreamLogHandlerD1Ev>
 8085810:	4620      	mov	r0, r4
 8085812:	2124      	movs	r1, #36	; 0x24
 8085814:	f002 fa3d 	bl	8087c92 <_ZdlPvj>
 8085818:	4620      	mov	r0, r4
 808581a:	bd10      	pop	{r4, pc}

0808581c <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 808581c:	b510      	push	{r4, lr}
 808581e:	4604      	mov	r4, r0
 8085820:	4b02      	ldr	r3, [pc, #8]	; (808582c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 8085822:	6003      	str	r3, [r0, #0]
 8085824:	f7ff ffe4 	bl	80857f0 <_ZN5spark16StreamLogHandlerD1Ev>
 8085828:	4620      	mov	r0, r4
 808582a:	bd10      	pop	{r4, pc}
 808582c:	08089e00 	.word	0x08089e00

08085830 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 8085830:	b510      	push	{r4, lr}
 8085832:	4604      	mov	r4, r0
 8085834:	f7ff fff2 	bl	808581c <_ZN5spark20JSONStreamLogHandlerD1Ev>
 8085838:	4620      	mov	r0, r4
 808583a:	2124      	movs	r1, #36	; 0x24
 808583c:	f002 fa29 	bl	8087c92 <_ZdlPvj>
 8085840:	4620      	mov	r0, r4
 8085842:	bd10      	pop	{r4, pc}

08085844 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 8085844:	2200      	movs	r2, #0
 8085846:	e9c0 2200 	strd	r2, r2, [r0]
 808584a:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 808584c:	b510      	push	{r4, lr}
      __a = _GLIBCXX_MOVE(__b);
 808584e:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8085850:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 8085852:	6004      	str	r4, [r0, #0]
 8085854:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8085856:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 8085858:	6044      	str	r4, [r0, #4]
 808585a:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808585c:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 808585e:	6084      	str	r4, [r0, #8]
}
 8085860:	bd10      	pop	{r4, pc}

08085862 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
 8085862:	b510      	push	{r4, lr}
 8085864:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 8085866:	6803      	ldr	r3, [r0, #0]
    void unlock() { os_mutex_recursive_unlock(handle_); }
 8085868:	6818      	ldr	r0, [r3, #0]
 808586a:	f7fe fd8d 	bl	8084388 <os_mutex_recursive_unlock>
 808586e:	4620      	mov	r0, r4
 8085870:	bd10      	pop	{r4, pc}
	...

08085874 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 8085874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8085878:	b087      	sub	sp, #28
 808587a:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 808587c:	4b1c      	ldr	r3, [pc, #112]	; (80858f0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 808587e:	4680      	mov	r8, r0
 8085880:	685b      	ldr	r3, [r3, #4]
 8085882:	4689      	mov	r9, r1
 8085884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8085888:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 808588a:	b96b      	cbnz	r3, 80858a8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 808588c:	f7ff fe9c 	bl	80855c8 <_ZN5spark10LogManager8instanceEv>
 8085890:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 8085892:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
 8085896:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8085898:	9305      	str	r3, [sp, #20]
 808589a:	f7fe fd6d 	bl	8084378 <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
 808589e:	7b23      	ldrb	r3, [r4, #12]
 80858a0:	b12b      	cbz	r3, 80858ae <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 80858a2:	a805      	add	r0, sp, #20
 80858a4:	f7ff ffdd 	bl	8085862 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 80858a8:	b007      	add	sp, #28
 80858aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 80858ae:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 80858b0:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 80858b4:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 80858b6:	e9d4 5300 	ldrd	r5, r3, [r4]
 80858ba:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 80858be:	45aa      	cmp	sl, r5
 80858c0:	d012      	beq.n	80858e8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 80858c2:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 80858c6:	4631      	mov	r1, r6
 80858c8:	1d38      	adds	r0, r7, #4
 80858ca:	f7ff fe01 	bl	80854d0 <_ZNK5spark6detail9LogFilter5levelEPKc>
 80858ce:	4581      	cmp	r9, r0
 80858d0:	d3f5      	bcc.n	80858be <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 80858d2:	9a03      	ldr	r2, [sp, #12]
 80858d4:	683b      	ldr	r3, [r7, #0]
 80858d6:	9200      	str	r2, [sp, #0]
 80858d8:	f8d3 b008 	ldr.w	fp, [r3, #8]
 80858dc:	464a      	mov	r2, r9
 80858de:	4633      	mov	r3, r6
 80858e0:	4641      	mov	r1, r8
 80858e2:	4638      	mov	r0, r7
 80858e4:	47d8      	blx	fp
 80858e6:	e7ea      	b.n	80858be <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 80858e8:	2300      	movs	r3, #0
 80858ea:	7323      	strb	r3, [r4, #12]
 80858ec:	e7d9      	b.n	80858a2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 80858ee:	bf00      	nop
 80858f0:	e000ed00 	.word	0xe000ed00

080858f4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 80858f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80858f8:	469b      	mov	fp, r3
 80858fa:	4b1a      	ldr	r3, [pc, #104]	; (8085964 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 80858fc:	4680      	mov	r8, r0
 80858fe:	685b      	ldr	r3, [r3, #4]
 8085900:	4689      	mov	r9, r1
 8085902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8085906:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
 8085908:	b96b      	cbnz	r3, 8085926 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 808590a:	f7ff fe5d 	bl	80855c8 <_ZN5spark10LogManager8instanceEv>
 808590e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 8085910:	f100 0324 	add.w	r3, r0, #36	; 0x24
 8085914:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8085916:	9301      	str	r3, [sp, #4]
 8085918:	f7fe fd2e 	bl	8084378 <os_mutex_recursive_lock>
        if (that->isActive()) {
 808591c:	7b23      	ldrb	r3, [r4, #12]
 808591e:	b12b      	cbz	r3, 808592c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 8085920:	a801      	add	r0, sp, #4
 8085922:	f7ff ff9e 	bl	8085862 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 8085926:	b003      	add	sp, #12
 8085928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 808592c:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 808592e:	b2f6      	uxtb	r6, r6
 8085930:	7323      	strb	r3, [r4, #12]
 8085932:	e9d4 5300 	ldrd	r5, r3, [r4]
 8085936:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 808593a:	4555      	cmp	r5, sl
 808593c:	d00e      	beq.n	808595c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 808593e:	f855 7b04 	ldr.w	r7, [r5], #4
 8085942:	4659      	mov	r1, fp
 8085944:	1d38      	adds	r0, r7, #4
 8085946:	f7ff fdc3 	bl	80854d0 <_ZNK5spark6detail9LogFilter5levelEPKc>
 808594a:	4286      	cmp	r6, r0
 808594c:	d3f5      	bcc.n	808593a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 808594e:	683b      	ldr	r3, [r7, #0]
 8085950:	464a      	mov	r2, r9
 8085952:	4641      	mov	r1, r8
 8085954:	4638      	mov	r0, r7
 8085956:	68db      	ldr	r3, [r3, #12]
 8085958:	4798      	blx	r3
 808595a:	e7ee      	b.n	808593a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 808595c:	2300      	movs	r3, #0
 808595e:	7323      	strb	r3, [r4, #12]
 8085960:	e7de      	b.n	8085920 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 8085962:	bf00      	nop
 8085964:	e000ed00 	.word	0xe000ed00

08085968 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 8085968:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 808596c:	4b16      	ldr	r3, [pc, #88]	; (80859c8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 808596e:	4605      	mov	r5, r0
 8085970:	685b      	ldr	r3, [r3, #4]
 8085972:	460f      	mov	r7, r1
 8085974:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (HAL_IsISR()) {
 8085978:	bb1b      	cbnz	r3, 80859c2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 808597a:	f7ff fe25 	bl	80855c8 <_ZN5spark10LogManager8instanceEv>
 808597e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 8085980:	f100 0324 	add.w	r3, r0, #36	; 0x24
 8085984:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8085986:	9301      	str	r3, [sp, #4]
 8085988:	f7fe fcf6 	bl	8084378 <os_mutex_recursive_lock>
 808598c:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 8085990:	2446      	movs	r4, #70	; 0x46
 8085992:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 8085996:	45b0      	cmp	r8, r6
 8085998:	d109      	bne.n	80859ae <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 808599a:	a801      	add	r0, sp, #4
 808599c:	f7ff ff61 	bl	8085862 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 80859a0:	42a5      	cmp	r5, r4
 80859a2:	bfb4      	ite	lt
 80859a4:	2000      	movlt	r0, #0
 80859a6:	2001      	movge	r0, #1
}
 80859a8:	b002      	add	sp, #8
 80859aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 80859ae:	f856 0b04 	ldr.w	r0, [r6], #4
 80859b2:	4639      	mov	r1, r7
 80859b4:	3004      	adds	r0, #4
 80859b6:	f7ff fd8b 	bl	80854d0 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 80859ba:	4284      	cmp	r4, r0
 80859bc:	bfa8      	it	ge
 80859be:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 80859c0:	e7e9      	b.n	8085996 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 80859c2:	2000      	movs	r0, #0
 80859c4:	e7f0      	b.n	80859a8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 80859c6:	bf00      	nop
 80859c8:	e000ed00 	.word	0xe000ed00

080859cc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 80859cc:	460b      	mov	r3, r1
 80859ce:	b570      	push	{r4, r5, r6, lr}
 80859d0:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 80859d2:	c805      	ldmia	r0, {r0, r2}
 80859d4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 80859d8:	4282      	cmp	r2, r0
 80859da:	d007      	beq.n	80859ec <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x20>
 80859dc:	4601      	mov	r1, r0
            if (*p == value) {
 80859de:	681d      	ldr	r5, [r3, #0]
 80859e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80859e4:	42ae      	cmp	r6, r5
 80859e6:	d003      	beq.n	80859f0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
 80859e8:	4608      	mov	r0, r1
 80859ea:	e7f5      	b.n	80859d8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
        return false;
 80859ec:	2000      	movs	r0, #0
}
 80859ee:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
 80859f0:	1a52      	subs	r2, r2, r1
 80859f2:	f003 fadb 	bl	8088fac <memmove>
    --size_;
 80859f6:	6863      	ldr	r3, [r4, #4]
    return true;
 80859f8:	2001      	movs	r0, #1
    --size_;
 80859fa:	3b01      	subs	r3, #1
 80859fc:	6063      	str	r3, [r4, #4]
    return true;
 80859fe:	e7f6      	b.n	80859ee <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>

08085a00 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 8085a00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8085a02:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 8085a04:	f100 0324 	add.w	r3, r0, #36	; 0x24
 8085a08:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 8085a0a:	9101      	str	r1, [sp, #4]
 8085a0c:	9303      	str	r3, [sp, #12]
 8085a0e:	f7fe fcb3 	bl	8084378 <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 8085a12:	4620      	mov	r0, r4
 8085a14:	a901      	add	r1, sp, #4
 8085a16:	f7ff ffd9 	bl	80859cc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 8085a1a:	b118      	cbz	r0, 8085a24 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 8085a1c:	6863      	ldr	r3, [r4, #4]
 8085a1e:	b90b      	cbnz	r3, 8085a24 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 8085a20:	f7ff fdfe 	bl	8085620 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 8085a24:	a803      	add	r0, sp, #12
 8085a26:	f7ff ff1c 	bl	8085862 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 8085a2a:	b004      	add	sp, #16
 8085a2c:	bd10      	pop	{r4, pc}

08085a2e <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 8085a2e:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 8085a30:	b570      	push	{r4, r5, r6, lr}
 8085a32:	4604      	mov	r4, r0
 8085a34:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 8085a38:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 8085a3c:	42ae      	cmp	r6, r5
 8085a3e:	d015      	beq.n	8085a6c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 8085a40:	4620      	mov	r0, r4
 8085a42:	f105 0110 	add.w	r1, r5, #16
 8085a46:	f7ff ffc1 	bl	80859cc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 8085a4a:	6863      	ldr	r3, [r4, #4]
 8085a4c:	b90b      	cbnz	r3, 8085a52 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 8085a4e:	f7ff fde7 	bl	8085620 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 8085a52:	69e0      	ldr	r0, [r4, #28]
 8085a54:	6929      	ldr	r1, [r5, #16]
 8085a56:	6803      	ldr	r3, [r0, #0]
 8085a58:	68db      	ldr	r3, [r3, #12]
 8085a5a:	4798      	blx	r3
        if (h.stream) {
 8085a5c:	6969      	ldr	r1, [r5, #20]
 8085a5e:	b119      	cbz	r1, 8085a68 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 8085a60:	6a20      	ldr	r0, [r4, #32]
 8085a62:	6803      	ldr	r3, [r0, #0]
 8085a64:	68db      	ldr	r3, [r3, #12]
 8085a66:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 8085a68:	3518      	adds	r5, #24
 8085a6a:	e7e7      	b.n	8085a3c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 8085a6c:	2618      	movs	r6, #24
 8085a6e:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 8085a72:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 8085a76:	42ae      	cmp	r6, r5
 8085a78:	d004      	beq.n	8085a84 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 8085a7a:	4628      	mov	r0, r5
 8085a7c:	f7ff f954 	bl	8084d28 <_ZN6StringD1Ev>
 8085a80:	3518      	adds	r5, #24
 8085a82:	e7f8      	b.n	8085a76 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 8085a84:	2300      	movs	r3, #0
 8085a86:	6163      	str	r3, [r4, #20]
}
 8085a88:	bd70      	pop	{r4, r5, r6, pc}

08085a8a <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 8085a8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8085a8c:	4604      	mov	r4, r0
    resetSystemCallbacks();
 8085a8e:	f7ff fdc7 	bl	8085620 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 8085a92:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8085a96:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8085a98:	9301      	str	r3, [sp, #4]
 8085a9a:	f7fe fc6d 	bl	8084378 <os_mutex_recursive_lock>
         destroyFactoryHandlers();
 8085a9e:	4620      	mov	r0, r4
 8085aa0:	f7ff ffc5 	bl	8085a2e <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 8085aa4:	a801      	add	r0, sp, #4
 8085aa6:	f7ff fedc 	bl	8085862 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 8085aaa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8085aac:	b108      	cbz	r0, 8085ab2 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 8085aae:	f7fe fc5b 	bl	8084368 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 8085ab2:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 8085ab6:	2618      	movs	r6, #24
 8085ab8:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 8085abc:	42ae      	cmp	r6, r5
 8085abe:	d004      	beq.n	8085aca <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 8085ac0:	4628      	mov	r0, r5
 8085ac2:	f7ff f931 	bl	8084d28 <_ZN6StringD1Ev>
 8085ac6:	3518      	adds	r5, #24
 8085ac8:	e7f8      	b.n	8085abc <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 8085aca:	6920      	ldr	r0, [r4, #16]
 8085acc:	f7fe ff0c 	bl	80848e8 <free>
 8085ad0:	6820      	ldr	r0, [r4, #0]
 8085ad2:	f7fe ff09 	bl	80848e8 <free>
}
 8085ad6:	4620      	mov	r0, r4
 8085ad8:	b002      	add	sp, #8
 8085ada:	bd70      	pop	{r4, r5, r6, pc}

08085adc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 8085adc:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 8085ade:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8085ae0:	4606      	mov	r6, r0
 8085ae2:	460c      	mov	r4, r1
 8085ae4:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
 8085ae6:	d927      	bls.n	8085b38 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
 8085ae8:	4290      	cmp	r0, r2
 8085aea:	d226      	bcs.n	8085b3a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
        capacity_(0) {
 8085aec:	2600      	movs	r6, #0
            --end;
 8085aee:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
 8085af2:	1a6c      	subs	r4, r5, r1
 8085af4:	f1a1 0714 	sub.w	r7, r1, #20
 8085af8:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
 8085afa:	42af      	cmp	r7, r5
 8085afc:	d03d      	beq.n	8085b7a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
 8085afe:	b1a4      	cbz	r4, 8085b2a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
 8085b00:	682b      	ldr	r3, [r5, #0]
 8085b02:	6023      	str	r3, [r4, #0]
 8085b04:	88ab      	ldrh	r3, [r5, #4]
 8085b06:	80a3      	strh	r3, [r4, #4]
 8085b08:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
        capacity_(0) {
 8085b0c:	e9c4 6602 	strd	r6, r6, [r4, #8]
 8085b10:	6126      	str	r6, [r4, #16]
 8085b12:	80e3      	strh	r3, [r4, #6]
 8085b14:	68ab      	ldr	r3, [r5, #8]
 8085b16:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8085b18:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8085b1a:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 8085b1c:	68ea      	ldr	r2, [r5, #12]
 8085b1e:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8085b20:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8085b22:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 8085b24:	692a      	ldr	r2, [r5, #16]
 8085b26:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 8085b28:	612b      	str	r3, [r5, #16]
 8085b2a:	f105 0008 	add.w	r0, r5, #8
 8085b2e:	f7ff fe2f 	bl	8085790 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 8085b32:	3d14      	subs	r5, #20
 8085b34:	3c14      	subs	r4, #20
 8085b36:	e7e0      	b.n	8085afa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
 8085b38:	d01f      	beq.n	8085b7a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
 8085b3a:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
 8085b3c:	42ac      	cmp	r4, r5
 8085b3e:	d01c      	beq.n	8085b7a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
 8085b40:	b1a6      	cbz	r6, 8085b6c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
 8085b42:	6823      	ldr	r3, [r4, #0]
 8085b44:	6033      	str	r3, [r6, #0]
 8085b46:	88a3      	ldrh	r3, [r4, #4]
 8085b48:	80b3      	strh	r3, [r6, #4]
 8085b4a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
        capacity_(0) {
 8085b4e:	e9c6 7702 	strd	r7, r7, [r6, #8]
 8085b52:	6137      	str	r7, [r6, #16]
 8085b54:	80f3      	strh	r3, [r6, #6]
      __a = _GLIBCXX_MOVE(__b);
 8085b56:	68a3      	ldr	r3, [r4, #8]
 8085b58:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8085b5a:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8085b5c:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
 8085b5e:	68e2      	ldr	r2, [r4, #12]
 8085b60:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8085b62:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8085b64:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
 8085b66:	6922      	ldr	r2, [r4, #16]
 8085b68:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 8085b6a:	6123      	str	r3, [r4, #16]
 8085b6c:	f104 0008 	add.w	r0, r4, #8
 8085b70:	f7ff fe0e 	bl	8085790 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 8085b74:	3414      	adds	r4, #20
 8085b76:	3614      	adds	r6, #20
 8085b78:	e7e0      	b.n	8085b3c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
 8085b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08085b7c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 8085b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 8085b7e:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 8085b82:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 8085b84:	4604      	mov	r4, r0
 8085b86:	460e      	mov	r6, r1
 8085b88:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 8085b8a:	db0d      	blt.n	8085ba8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
 8085b8c:	3501      	adds	r5, #1
        if (n > 0) {
 8085b8e:	2d00      	cmp	r5, #0
 8085b90:	6800      	ldr	r0, [r0, #0]
 8085b92:	dd04      	ble.n	8085b9e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
 8085b94:	00a9      	lsls	r1, r5, #2
 8085b96:	f7fe feaf 	bl	80848f8 <realloc>
            if (!d) {
 8085b9a:	b918      	cbnz	r0, 8085ba4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
 8085b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 8085b9e:	f7fe fea3 	bl	80848e8 <free>
        T* d = nullptr;
 8085ba2:	2000      	movs	r0, #0
        data_ = d;
 8085ba4:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 8085ba6:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
 8085ba8:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
 8085baa:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 8085bac:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
 8085bb0:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 8085bb2:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
 8085bb6:	1d08      	adds	r0, r1, #4
 8085bb8:	f003 f9f8 	bl	8088fac <memmove>
    new(p) T(std::move(value));
 8085bbc:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
 8085bc0:	6863      	ldr	r3, [r4, #4]
    return true;
 8085bc2:	2001      	movs	r0, #1
    ++size_;
 8085bc4:	3301      	adds	r3, #1
 8085bc6:	6063      	str	r3, [r4, #4]
    return true;
 8085bc8:	e7e8      	b.n	8085b9c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

08085bca <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 8085bca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8085bcc:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 8085bce:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
 8085bd2:	6a40      	ldr	r0, [r0, #36]	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
 8085bd4:	460d      	mov	r5, r1
 8085bd6:	9301      	str	r3, [sp, #4]
 8085bd8:	f7fe fbce 	bl	8084378 <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
 8085bdc:	e9d4 3100 	ldrd	r3, r1, [r4]
 8085be0:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
 8085be4:	4283      	cmp	r3, r0
 8085be6:	461a      	mov	r2, r3
 8085be8:	d00a      	beq.n	8085c00 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 8085bea:	6812      	ldr	r2, [r2, #0]
 8085bec:	3304      	adds	r3, #4
 8085bee:	42aa      	cmp	r2, r5
 8085bf0:	d1f8      	bne.n	8085be4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
 8085bf2:	a801      	add	r0, sp, #4
 8085bf4:	f7ff fe35 	bl	8085862 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
 8085bf8:	2500      	movs	r5, #0
}
 8085bfa:	4628      	mov	r0, r5
 8085bfc:	b003      	add	sp, #12
 8085bfe:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
 8085c00:	462a      	mov	r2, r5
 8085c02:	4620      	mov	r0, r4
 8085c04:	f7ff ffba 	bl	8085b7c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 8085c08:	4605      	mov	r5, r0
 8085c0a:	2800      	cmp	r0, #0
 8085c0c:	d0f1      	beq.n	8085bf2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 8085c0e:	6863      	ldr	r3, [r4, #4]
 8085c10:	2b01      	cmp	r3, #1
 8085c12:	d101      	bne.n	8085c18 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 8085c14:	f7ff fcf8 	bl	8085608 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 8085c18:	a801      	add	r0, sp, #4
 8085c1a:	f7ff fe22 	bl	8085862 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 8085c1e:	e7ec      	b.n	8085bfa <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

08085c20 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 8085c20:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 8085c22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8085c24:	4604      	mov	r4, r0
 8085c26:	460d      	mov	r5, r1
 8085c28:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 8085c2a:	d914      	bls.n	8085c56 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 8085c2c:	4290      	cmp	r0, r2
 8085c2e:	d213      	bcs.n	8085c58 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 8085c30:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 8085c34:	1a75      	subs	r5, r6, r1
 8085c36:	f1a1 0710 	sub.w	r7, r1, #16
 8085c3a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 8085c3c:	42b7      	cmp	r7, r6
 8085c3e:	d018      	beq.n	8085c72 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 8085c40:	b11c      	cbz	r4, 8085c4a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 8085c42:	4631      	mov	r1, r6
 8085c44:	4620      	mov	r0, r4
 8085c46:	f7ff f8e9 	bl	8084e1c <_ZN6StringC1EOS_>
                end->~T();
 8085c4a:	4630      	mov	r0, r6
 8085c4c:	f7ff f86c 	bl	8084d28 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 8085c50:	3e10      	subs	r6, #16
 8085c52:	3c10      	subs	r4, #16
 8085c54:	e7f2      	b.n	8085c3c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 8085c56:	d00c      	beq.n	8085c72 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 8085c58:	42b5      	cmp	r5, r6
 8085c5a:	d00a      	beq.n	8085c72 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 8085c5c:	b11c      	cbz	r4, 8085c66 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 8085c5e:	4629      	mov	r1, r5
 8085c60:	4620      	mov	r0, r4
 8085c62:	f7ff f8db 	bl	8084e1c <_ZN6StringC1EOS_>
                p->~T();
 8085c66:	4628      	mov	r0, r5
 8085c68:	f7ff f85e 	bl	8084d28 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 8085c6c:	3510      	adds	r5, #16
 8085c6e:	3410      	adds	r4, #16
 8085c70:	e7f2      	b.n	8085c58 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 8085c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08085c74 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 8085c74:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 8085c76:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 8085c78:	4605      	mov	r5, r0
        if (n > 0) {
 8085c7a:	dd11      	ble.n	8085ca0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 8085c7c:	0130      	lsls	r0, r6, #4
 8085c7e:	f7fe fe2b 	bl	80848d8 <malloc>
            if (!d) {
 8085c82:	4604      	mov	r4, r0
 8085c84:	b158      	cbz	r0, 8085c9e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 8085c86:	e9d5 1200 	ldrd	r1, r2, [r5]
 8085c8a:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8085c8e:	f7ff ffc7 	bl	8085c20 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 8085c92:	6828      	ldr	r0, [r5, #0]
 8085c94:	f7fe fe28 	bl	80848e8 <free>
        return true;
 8085c98:	2001      	movs	r0, #1
        data_ = d;
 8085c9a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 8085c9c:	60ae      	str	r6, [r5, #8]
    }
 8085c9e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 8085ca0:	2400      	movs	r4, #0
 8085ca2:	e7f6      	b.n	8085c92 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

08085ca4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 8085ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8085ca8:	4691      	mov	r9, r2
        capacity_(0) {
 8085caa:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 8085cac:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 8085cae:	b097      	sub	sp, #92	; 0x5c
 8085cb0:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
 8085cb2:	f8d9 1004 	ldr.w	r1, [r9, #4]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 8085cb6:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 8085cb8:	4299      	cmp	r1, r3
        capacity_(0) {
 8085cba:	e9c0 3300 	strd	r3, r3, [r0]
 8085cbe:	e9c0 3302 	strd	r3, r3, [r0, #8]
 8085cc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8085cc6:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 8085cca:	7602      	strb	r2, [r0, #24]
 8085ccc:	930c      	str	r3, [sp, #48]	; 0x30
    if (n > capacity_ && !realloc(n)) {
 8085cce:	dc23      	bgt.n	8085d18 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 8085cd0:	e9d9 5700 	ldrd	r5, r7, [r9]
 8085cd4:	2314      	movs	r3, #20
 8085cd6:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 8085cda:	42af      	cmp	r7, r5
 8085cdc:	d03b      	beq.n	8085d56 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 8085cde:	4629      	mov	r1, r5
 8085ce0:	a80d      	add	r0, sp, #52	; 0x34
 8085ce2:	f7ff f89b 	bl	8084e1c <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 8085ce6:	a90d      	add	r1, sp, #52	; 0x34
 8085ce8:	a811      	add	r0, sp, #68	; 0x44
 8085cea:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8085cec:	f7ff f896 	bl	8084e1c <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 8085cf0:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
 8085cf4:	4299      	cmp	r1, r3
 8085cf6:	da1b      	bge.n	8085d30 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 8085cf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
 8085cfa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
 8085cfc:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 8085d00:	4631      	mov	r1, r6
 8085d02:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8085d06:	f106 0010 	add.w	r0, r6, #16
 8085d0a:	f7ff ff89 	bl	8085c20 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 8085d0e:	b9ee      	cbnz	r6, 8085d4c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 8085d10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8085d12:	3301      	adds	r3, #1
 8085d14:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
 8085d16:	e011      	b.n	8085d3c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 8085d18:	a80a      	add	r0, sp, #40	; 0x28
 8085d1a:	f7ff ffab 	bl	8085c74 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 8085d1e:	2800      	cmp	r0, #0
 8085d20:	d1d6      	bne.n	8085cd0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
 8085d22:	a80a      	add	r0, sp, #40	; 0x28
 8085d24:	f7ff fd48 	bl	80857b8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 8085d28:	4620      	mov	r0, r4
 8085d2a:	b017      	add	sp, #92	; 0x5c
 8085d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 8085d30:	3101      	adds	r1, #1
 8085d32:	a80a      	add	r0, sp, #40	; 0x28
 8085d34:	f7ff ff9e 	bl	8085c74 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 8085d38:	2800      	cmp	r0, #0
 8085d3a:	d1dd      	bne.n	8085cf8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 8085d3c:	a811      	add	r0, sp, #68	; 0x44
 8085d3e:	f7fe fff3 	bl	8084d28 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 8085d42:	a80d      	add	r0, sp, #52	; 0x34
 8085d44:	f7fe fff0 	bl	8084d28 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 8085d48:	3514      	adds	r5, #20
 8085d4a:	e7c6      	b.n	8085cda <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 8085d4c:	4630      	mov	r0, r6
 8085d4e:	a911      	add	r1, sp, #68	; 0x44
 8085d50:	f7ff f864 	bl	8084e1c <_ZN6StringC1EOS_>
 8085d54:	e7dc      	b.n	8085d10 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 8085d56:	2600      	movs	r6, #0
 8085d58:	f04f 0a14 	mov.w	sl, #20
        size_t size = 0; // Name length
 8085d5c:	4637      	mov	r7, r6
 8085d5e:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
 8085d62:	960f      	str	r6, [sp, #60]	; 0x3c
    for (int i = 0; i < cats.size(); ++i) {
 8085d64:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8085d68:	429e      	cmp	r6, r3
 8085d6a:	f280 8097 	bge.w	8085e9c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
 8085d6e:	0133      	lsls	r3, r6, #4
 8085d70:	58d3      	ldr	r3, [r2, r3]
 8085d72:	9308      	str	r3, [sp, #32]
        if (!category) {
 8085d74:	b90b      	cbnz	r3, 8085d7a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
 8085d76:	3601      	adds	r6, #1
 8085d78:	e7f4      	b.n	8085d64 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
 8085d7a:	fb0a f306 	mul.w	r3, sl, r6
 8085d7e:	9709      	str	r7, [sp, #36]	; 0x24
 8085d80:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
 8085d82:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
 8085d84:	a909      	add	r1, sp, #36	; 0x24
 8085d86:	a808      	add	r0, sp, #32
 8085d88:	f7ff fadb 	bl	8085342 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 8085d8c:	4683      	mov	fp, r0
 8085d8e:	2800      	cmp	r0, #0
 8085d90:	d0f1      	beq.n	8085d76 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
 8085d92:	4601      	mov	r1, r0
 8085d94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8085d96:	4628      	mov	r0, r5
 8085d98:	f10d 031f 	add.w	r3, sp, #31
            bool found = false;
 8085d9c:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
 8085da0:	f7ff fb58 	bl	8085454 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 8085da4:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
 8085da8:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 8085daa:	f1b8 0f00 	cmp.w	r8, #0
 8085dae:	d166      	bne.n	8085e7e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
 8085db0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8085db4:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
            level(-1) {
 8085db8:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
 8085dbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8085dc0:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8085dc4:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 8085dc8:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 8085dcc:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 8085dd0:	4293      	cmp	r3, r2
 8085dd2:	db1a      	blt.n	8085e0a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
 8085dd4:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
 8085dd8:	f1bb 0f00 	cmp.w	fp, #0
 8085ddc:	dd4a      	ble.n	8085e74 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
 8085dde:	fb0a f00b 	mul.w	r0, sl, fp
 8085de2:	f7fe fd79 	bl	80848d8 <malloc>
            if (!d) {
 8085de6:	9004      	str	r0, [sp, #16]
 8085de8:	2800      	cmp	r0, #0
 8085dea:	d045      	beq.n	8085e78 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
 8085dec:	e9d5 1200 	ldrd	r1, r2, [r5]
 8085df0:	fb0a 1202 	mla	r2, sl, r2, r1
 8085df4:	f7ff fe72 	bl	8085adc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
 8085df8:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
 8085dfa:	6828      	ldr	r0, [r5, #0]
 8085dfc:	9304      	str	r3, [sp, #16]
 8085dfe:	f7fe fd73 	bl	80848e8 <free>
        data_ = d;
 8085e02:	9b04      	ldr	r3, [sp, #16]
        capacity_ = n;
 8085e04:	f8c5 b008 	str.w	fp, [r5, #8]
        data_ = d;
 8085e08:	602b      	str	r3, [r5, #0]
    T* const p = data_ + i;
 8085e0a:	9b01      	ldr	r3, [sp, #4]
 8085e0c:	f8d5 b000 	ldr.w	fp, [r5]
 8085e10:	fb0a f303 	mul.w	r3, sl, r3
    move(p + 1, p, data_ + size_);
 8085e14:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
 8085e16:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
 8085e1a:	f101 0014 	add.w	r0, r1, #20
 8085e1e:	fb0a b202 	mla	r2, sl, r2, fp
 8085e22:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
 8085e24:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
 8085e26:	f7ff fe59 	bl	8085adc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 8085e2a:	9904      	ldr	r1, [sp, #16]
 8085e2c:	b1a9      	cbz	r1, 8085e5a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
 8085e2e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8085e30:	9b05      	ldr	r3, [sp, #20]
 8085e32:	f84b 2003 	str.w	r2, [fp, r3]
 8085e36:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8085e3a:	808b      	strh	r3, [r1, #4]
 8085e3c:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
        capacity_(0) {
 8085e40:	e9c1 7702 	strd	r7, r7, [r1, #8]
 8085e44:	610f      	str	r7, [r1, #16]
 8085e46:	80cb      	strh	r3, [r1, #6]
      __a = _GLIBCXX_MOVE(__b);
 8085e48:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8085e4a:	608b      	str	r3, [r1, #8]
 8085e4c:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
 8085e4e:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
 8085e50:	60cb      	str	r3, [r1, #12]
 8085e52:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
 8085e54:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
 8085e56:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 8085e58:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
 8085e5a:	686b      	ldr	r3, [r5, #4]
 8085e5c:	3301      	adds	r3, #1
 8085e5e:	606b      	str	r3, [r5, #4]
 8085e60:	a813      	add	r0, sp, #76	; 0x4c
 8085e62:	f7ff fc95 	bl	8085790 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 8085e66:	f1b8 0f00 	cmp.w	r8, #0
 8085e6a:	d008      	beq.n	8085e7e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
 8085e6c:	a80d      	add	r0, sp, #52	; 0x34
 8085e6e:	f7ff fc8f 	bl	8085790 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 8085e72:	e756      	b.n	8085d22 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 8085e74:	4643      	mov	r3, r8
 8085e76:	e7c0      	b.n	8085dfa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 8085e78:	f04f 0801 	mov.w	r8, #1
 8085e7c:	e7f0      	b.n	8085e60 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
 8085e7e:	9b01      	ldr	r3, [sp, #4]
 8085e80:	682d      	ldr	r5, [r5, #0]
 8085e82:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
 8085e86:	9b08      	ldr	r3, [sp, #32]
 8085e88:	781b      	ldrb	r3, [r3, #0]
 8085e8a:	b92b      	cbnz	r3, 8085e98 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
 8085e8c:	f8d9 3000 	ldr.w	r3, [r9]
 8085e90:	9a02      	ldr	r2, [sp, #8]
 8085e92:	4413      	add	r3, r2
 8085e94:	7c1b      	ldrb	r3, [r3, #16]
 8085e96:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 8085e98:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 8085e9a:	e773      	b.n	8085d84 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8085e9c:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 8085e9e:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8085ea0:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 8085ea2:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8085ea4:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8085ea6:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
 8085ea8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 8085eaa:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8085eac:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 8085eae:	60a2      	str	r2, [r4, #8]
 8085eb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 8085eb2:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8085eb4:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 8085eb6:	60e2      	str	r2, [r4, #12]
 8085eb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
 8085eba:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8085ebc:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 8085ebe:	6122      	str	r2, [r4, #16]
 8085ec0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
 8085ec2:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
 8085ec4:	9b03      	ldr	r3, [sp, #12]
 8085ec6:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
 8085ec8:	6162      	str	r2, [r4, #20]
 8085eca:	7623      	strb	r3, [r4, #24]
 8085ecc:	e7ce      	b.n	8085e6c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>
	...

08085ed0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
 8085ed0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
 8085ed2:	4605      	mov	r5, r0
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
 8085ed4:	460e      	mov	r6, r1
 8085ed6:	4604      	mov	r4, r0
        filter_(level, filters) {
 8085ed8:	4b08      	ldr	r3, [pc, #32]	; (8085efc <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
 8085eda:	4611      	mov	r1, r2
 8085edc:	f845 3b04 	str.w	r3, [r5], #4
 8085ee0:	a801      	add	r0, sp, #4
 8085ee2:	f7fb fbcd 	bl	8081680 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 8085ee6:	4631      	mov	r1, r6
 8085ee8:	aa01      	add	r2, sp, #4
 8085eea:	4628      	mov	r0, r5
 8085eec:	f7ff feda 	bl	8085ca4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 8085ef0:	a801      	add	r0, sp, #4
 8085ef2:	f7fb f81f 	bl	8080f34 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 8085ef6:	4620      	mov	r0, r4
 8085ef8:	b004      	add	sp, #16
 8085efa:	bd70      	pop	{r4, r5, r6, pc}
 8085efc:	080897c8 	.word	0x080897c8

08085f00 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 8085f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8085f02:	460f      	mov	r7, r1
 8085f04:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 8085f06:	4638      	mov	r0, r7
 8085f08:	4925      	ldr	r1, [pc, #148]	; (8085fa0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
 8085f0a:	4616      	mov	r6, r2
 8085f0c:	461d      	mov	r5, r3
 8085f0e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 8085f10:	f003 f8a9 	bl	8089066 <strcmp>
 8085f14:	bb00      	cbnz	r0, 8085f58 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
 8085f16:	b1e4      	cbz	r4, 8085f52 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 8085f18:	4629      	mov	r1, r5
 8085f1a:	4668      	mov	r0, sp
 8085f1c:	f7ff fc92 	bl	8085844 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 8085f20:	2024      	movs	r0, #36	; 0x24
 8085f22:	4920      	ldr	r1, [pc, #128]	; (8085fa4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
 8085f24:	f001 feb7 	bl	8087c96 <_ZnwjRKSt9nothrow_t>
 8085f28:	4605      	mov	r5, r0
 8085f2a:	b170      	cbz	r0, 8085f4a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
 8085f2c:	4669      	mov	r1, sp
 8085f2e:	a803      	add	r0, sp, #12
 8085f30:	f7fb fba6 	bl	8081680 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 8085f34:	4631      	mov	r1, r6
 8085f36:	aa03      	add	r2, sp, #12
 8085f38:	4628      	mov	r0, r5
 8085f3a:	f7ff ffc9 	bl	8085ed0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 8085f3e:	a803      	add	r0, sp, #12
 8085f40:	f7fa fff8 	bl	8080f34 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
 8085f44:	4b18      	ldr	r3, [pc, #96]	; (8085fa8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
 8085f46:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
 8085f48:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 8085f4a:	4668      	mov	r0, sp
 8085f4c:	f7fa fff2 	bl	8080f34 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 8085f50:	462c      	mov	r4, r5
}
 8085f52:	4620      	mov	r0, r4
 8085f54:	b007      	add	sp, #28
 8085f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 8085f58:	4638      	mov	r0, r7
 8085f5a:	4914      	ldr	r1, [pc, #80]	; (8085fac <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
 8085f5c:	f003 f883 	bl	8089066 <strcmp>
 8085f60:	b9e0      	cbnz	r0, 8085f9c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
 8085f62:	2c00      	cmp	r4, #0
 8085f64:	d0f5      	beq.n	8085f52 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 8085f66:	4629      	mov	r1, r5
 8085f68:	4668      	mov	r0, sp
 8085f6a:	f7ff fc6b 	bl	8085844 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 8085f6e:	2024      	movs	r0, #36	; 0x24
 8085f70:	490c      	ldr	r1, [pc, #48]	; (8085fa4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
 8085f72:	f001 fe90 	bl	8087c96 <_ZnwjRKSt9nothrow_t>
 8085f76:	4605      	mov	r5, r0
 8085f78:	2800      	cmp	r0, #0
 8085f7a:	d0e6      	beq.n	8085f4a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
 8085f7c:	4669      	mov	r1, sp
 8085f7e:	a803      	add	r0, sp, #12
 8085f80:	f7fb fb7e 	bl	8081680 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 8085f84:	4631      	mov	r1, r6
 8085f86:	aa03      	add	r2, sp, #12
 8085f88:	4628      	mov	r0, r5
 8085f8a:	f7ff ffa1 	bl	8085ed0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 8085f8e:	a803      	add	r0, sp, #12
 8085f90:	f7fa ffd0 	bl	8080f34 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 8085f94:	4b06      	ldr	r3, [pc, #24]	; (8085fb0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
 8085f96:	622c      	str	r4, [r5, #32]
 8085f98:	602b      	str	r3, [r5, #0]
}
 8085f9a:	e7d6      	b.n	8085f4a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
 8085f9c:	2400      	movs	r4, #0
 8085f9e:	e7d8      	b.n	8085f52 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
 8085fa0:	08089d72 	.word	0x08089d72
 8085fa4:	08089fa5 	.word	0x08089fa5
 8085fa8:	08089e00 	.word	0x08089e00
 8085fac:	08089d76 	.word	0x08089d76
 8085fb0:	08089de8 	.word	0x08089de8

08085fb4 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 8085fb4:	4b01      	ldr	r3, [pc, #4]	; (8085fbc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 8085fb6:	4a02      	ldr	r2, [pc, #8]	; (8085fc0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8085fb8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 8085fba:	4770      	bx	lr
 8085fbc:	200003b4 	.word	0x200003b4
 8085fc0:	08089d87 	.word	0x08089d87

08085fc4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 8085fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8085fc8:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 8085fca:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 8085fce:	4604      	mov	r4, r0
 8085fd0:	460e      	mov	r6, r1
 8085fd2:	4617      	mov	r7, r2
 8085fd4:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 8085fd6:	f000 ffef 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8085fda:	4581      	cmp	r9, r0
 8085fdc:	d04d      	beq.n	808607a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 8085fde:	792b      	ldrb	r3, [r5, #4]
 8085fe0:	0719      	lsls	r1, r3, #28
 8085fe2:	d504      	bpl.n	8085fee <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 8085fe4:	4620      	mov	r0, r4
 8085fe6:	696a      	ldr	r2, [r5, #20]
 8085fe8:	4954      	ldr	r1, [pc, #336]	; (808613c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 8085fea:	f7ff fa24 	bl	8085436 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 8085fee:	f1b8 0f00 	cmp.w	r8, #0
 8085ff2:	d00d      	beq.n	8086010 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 8085ff4:	215b      	movs	r1, #91	; 0x5b
 8085ff6:	4620      	mov	r0, r4
 8085ff8:	f7ff fa11 	bl	808541e <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 8085ffc:	4641      	mov	r1, r8
 8085ffe:	4620      	mov	r0, r4
 8086000:	f7ff f9ff 	bl	8085402 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 8086004:	6823      	ldr	r3, [r4, #0]
 8086006:	2202      	movs	r2, #2
 8086008:	4620      	mov	r0, r4
 808600a:	68db      	ldr	r3, [r3, #12]
 808600c:	494c      	ldr	r1, [pc, #304]	; (8086140 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 808600e:	4798      	blx	r3
    if (attr.has_file) {
 8086010:	792b      	ldrb	r3, [r5, #4]
 8086012:	07da      	lsls	r2, r3, #31
 8086014:	d524      	bpl.n	8086060 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 8086016:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 808601a:	212f      	movs	r1, #47	; 0x2f
 808601c:	4640      	mov	r0, r8
 808601e:	f003 f87d 	bl	808911c <strrchr>
    if (s1) {
 8086022:	b108      	cbz	r0, 8086028 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 8086024:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 8086028:	4641      	mov	r1, r8
 808602a:	4620      	mov	r0, r4
 808602c:	f7ff f9e9 	bl	8085402 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 8086030:	792b      	ldrb	r3, [r5, #4]
 8086032:	079b      	lsls	r3, r3, #30
 8086034:	d508      	bpl.n	8086048 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 8086036:	213a      	movs	r1, #58	; 0x3a
 8086038:	4620      	mov	r0, r4
 808603a:	f7ff f9f0 	bl	808541e <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 808603e:	4620      	mov	r0, r4
 8086040:	68ea      	ldr	r2, [r5, #12]
 8086042:	4940      	ldr	r1, [pc, #256]	; (8086144 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 8086044:	f7ff f9f7 	bl	8085436 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 8086048:	792a      	ldrb	r2, [r5, #4]
 808604a:	6823      	ldr	r3, [r4, #0]
 808604c:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 8086050:	4620      	mov	r0, r4
            write(", ", 2);
 8086052:	f04f 0202 	mov.w	r2, #2
 8086056:	68db      	ldr	r3, [r3, #12]
 8086058:	bf14      	ite	ne
 808605a:	493b      	ldrne	r1, [pc, #236]	; (8086148 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 808605c:	493b      	ldreq	r1, [pc, #236]	; (808614c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 808605e:	4798      	blx	r3
    if (attr.has_function) {
 8086060:	792b      	ldrb	r3, [r5, #4]
 8086062:	0758      	lsls	r0, r3, #29
 8086064:	d51d      	bpl.n	80860a2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 8086066:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 8086068:	460b      	mov	r3, r1
 808606a:	461a      	mov	r2, r3
    for (; *s; ++s) {
 808606c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8086070:	b160      	cbz	r0, 808608c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 8086072:	2820      	cmp	r0, #32
 8086074:	d108      	bne.n	8086088 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 8086076:	4619      	mov	r1, r3
 8086078:	e7f7      	b.n	808606a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 808607a:	4835      	ldr	r0, [pc, #212]	; (8086150 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 808607c:	f001 fa59 	bl	8087532 <_ZN5spark12NetworkClass9listeningEv>
 8086080:	2800      	cmp	r0, #0
 8086082:	d0ac      	beq.n	8085fde <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 8086084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 8086088:	2828      	cmp	r0, #40	; 0x28
 808608a:	d1ee      	bne.n	808606a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 808608c:	6823      	ldr	r3, [r4, #0]
 808608e:	1a52      	subs	r2, r2, r1
 8086090:	4620      	mov	r0, r4
 8086092:	68db      	ldr	r3, [r3, #12]
 8086094:	4798      	blx	r3
        write("(): ", 4);
 8086096:	6823      	ldr	r3, [r4, #0]
 8086098:	2204      	movs	r2, #4
 808609a:	4620      	mov	r0, r4
 808609c:	68db      	ldr	r3, [r3, #12]
 808609e:	492d      	ldr	r1, [pc, #180]	; (8086154 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 80860a0:	4798      	blx	r3
    return log_level_name(level, nullptr);
 80860a2:	2100      	movs	r1, #0
 80860a4:	4638      	mov	r0, r7
 80860a6:	f7fe fadf 	bl	8084668 <log_level_name>
 80860aa:	4601      	mov	r1, r0
    write(s);
 80860ac:	4620      	mov	r0, r4
 80860ae:	f7ff f9a8 	bl	8085402 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 80860b2:	6823      	ldr	r3, [r4, #0]
 80860b4:	2202      	movs	r2, #2
 80860b6:	4620      	mov	r0, r4
 80860b8:	68db      	ldr	r3, [r3, #12]
 80860ba:	4924      	ldr	r1, [pc, #144]	; (808614c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 80860bc:	4798      	blx	r3
    if (msg) {
 80860be:	b11e      	cbz	r6, 80860c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 80860c0:	4631      	mov	r1, r6
 80860c2:	4620      	mov	r0, r4
 80860c4:	f7ff f99d 	bl	8085402 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 80860c8:	792b      	ldrb	r3, [r5, #4]
 80860ca:	f013 0f30 	tst.w	r3, #48	; 0x30
 80860ce:	d02c      	beq.n	808612a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 80860d0:	6823      	ldr	r3, [r4, #0]
 80860d2:	4921      	ldr	r1, [pc, #132]	; (8086158 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 80860d4:	68db      	ldr	r3, [r3, #12]
 80860d6:	2202      	movs	r2, #2
 80860d8:	4620      	mov	r0, r4
 80860da:	4798      	blx	r3
        if (attr.has_code) {
 80860dc:	792b      	ldrb	r3, [r5, #4]
 80860de:	06d9      	lsls	r1, r3, #27
 80860e0:	d50a      	bpl.n	80860f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 80860e2:	6823      	ldr	r3, [r4, #0]
 80860e4:	2207      	movs	r2, #7
 80860e6:	4620      	mov	r0, r4
 80860e8:	491c      	ldr	r1, [pc, #112]	; (808615c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 80860ea:	68db      	ldr	r3, [r3, #12]
 80860ec:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 80860ee:	4620      	mov	r0, r4
 80860f0:	69aa      	ldr	r2, [r5, #24]
 80860f2:	491b      	ldr	r1, [pc, #108]	; (8086160 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 80860f4:	f7ff f99f 	bl	8085436 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 80860f8:	792b      	ldrb	r3, [r5, #4]
 80860fa:	069a      	lsls	r2, r3, #26
 80860fc:	d511      	bpl.n	8086122 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 80860fe:	06db      	lsls	r3, r3, #27
 8086100:	d505      	bpl.n	808610e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 8086102:	6823      	ldr	r3, [r4, #0]
 8086104:	2202      	movs	r2, #2
 8086106:	4620      	mov	r0, r4
 8086108:	68db      	ldr	r3, [r3, #12]
 808610a:	490f      	ldr	r1, [pc, #60]	; (8086148 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 808610c:	4798      	blx	r3
            write("details = ", 10);
 808610e:	6823      	ldr	r3, [r4, #0]
 8086110:	4620      	mov	r0, r4
 8086112:	4914      	ldr	r1, [pc, #80]	; (8086164 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 8086114:	220a      	movs	r2, #10
 8086116:	68db      	ldr	r3, [r3, #12]
 8086118:	4798      	blx	r3
            write(attr.details);
 808611a:	4620      	mov	r0, r4
 808611c:	69e9      	ldr	r1, [r5, #28]
 808611e:	f7ff f970 	bl	8085402 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 8086122:	215d      	movs	r1, #93	; 0x5d
 8086124:	4620      	mov	r0, r4
 8086126:	f7ff f97a 	bl	808541e <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 808612a:	6823      	ldr	r3, [r4, #0]
 808612c:	4620      	mov	r0, r4
}
 808612e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 8086132:	2202      	movs	r2, #2
 8086134:	68db      	ldr	r3, [r3, #12]
 8086136:	490c      	ldr	r1, [pc, #48]	; (8086168 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 8086138:	4718      	bx	r3
 808613a:	bf00      	nop
 808613c:	08089d8b 	.word	0x08089d8b
 8086140:	08089d92 	.word	0x08089d92
 8086144:	080899fb 	.word	0x080899fb
 8086148:	08089a88 	.word	0x08089a88
 808614c:	08089d97 	.word	0x08089d97
 8086150:	2000054c 	.word	0x2000054c
 8086154:	08089d95 	.word	0x08089d95
 8086158:	08089d9a 	.word	0x08089d9a
 808615c:	08089d9d 	.word	0x08089d9d
 8086160:	08089da5 	.word	0x08089da5
 8086164:	08089da8 	.word	0x08089da8
 8086168:	080898a2 	.word	0x080898a2

0808616c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 808616c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8086170:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
 8086172:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 8086176:	4605      	mov	r5, r0
 8086178:	460f      	mov	r7, r1
 808617a:	4690      	mov	r8, r2
 808617c:	461e      	mov	r6, r3
 808617e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 8086180:	f000 ff1a 	bl	8086fb8 <_Z16_fetch_usbserialv>
 8086184:	4581      	cmp	r9, r0
 8086186:	d105      	bne.n	8086194 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 8086188:	4849      	ldr	r0, [pc, #292]	; (80862b0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 808618a:	f001 f9d2 	bl	8087532 <_ZN5spark12NetworkClass9listeningEv>
 808618e:	2800      	cmp	r0, #0
 8086190:	f040 808a 	bne.w	80862a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 8086194:	f04f 0900 	mov.w	r9, #0
    JSONStreamWriter json(*this->stream());
 8086198:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 808619a:	4a46      	ldr	r2, [pc, #280]	; (80862b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 808619c:	a801      	add	r0, sp, #4
 808619e:	9201      	str	r2, [sp, #4]
 80861a0:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 80861a2:	f88d 9008 	strb.w	r9, [sp, #8]
 80861a6:	f001 fb38 	bl	808781a <_ZN5spark10JSONWriter11beginObjectEv>
 80861aa:	4649      	mov	r1, r9
 80861ac:	4640      	mov	r0, r8
 80861ae:	f7fe fa5b 	bl	8084668 <log_level_name>
 80861b2:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 80861b4:	4940      	ldr	r1, [pc, #256]	; (80862b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 80861b6:	2201      	movs	r2, #1
 80861b8:	a801      	add	r0, sp, #4
 80861ba:	f001 fbb7 	bl	808792c <_ZN5spark10JSONWriter4nameEPKcj>
 80861be:	4641      	mov	r1, r8
 80861c0:	f7ff f912 	bl	80853e8 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 80861c4:	b13f      	cbz	r7, 80861d6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 80861c6:	493d      	ldr	r1, [pc, #244]	; (80862bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 80861c8:	2201      	movs	r2, #1
 80861ca:	a801      	add	r0, sp, #4
 80861cc:	f001 fbae 	bl	808792c <_ZN5spark10JSONWriter4nameEPKcj>
 80861d0:	4639      	mov	r1, r7
 80861d2:	f7ff f909 	bl	80853e8 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 80861d6:	b13e      	cbz	r6, 80861e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 80861d8:	4939      	ldr	r1, [pc, #228]	; (80862c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 80861da:	2201      	movs	r2, #1
 80861dc:	a801      	add	r0, sp, #4
 80861de:	f001 fba5 	bl	808792c <_ZN5spark10JSONWriter4nameEPKcj>
 80861e2:	4631      	mov	r1, r6
 80861e4:	f7ff f900 	bl	80853e8 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 80861e8:	7923      	ldrb	r3, [r4, #4]
 80861ea:	07df      	lsls	r7, r3, #31
 80861ec:	d50e      	bpl.n	808620c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 80861ee:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 80861f0:	212f      	movs	r1, #47	; 0x2f
 80861f2:	4630      	mov	r0, r6
 80861f4:	f002 ff92 	bl	808911c <strrchr>
    if (s1) {
 80861f8:	b100      	cbz	r0, 80861fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 80861fa:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 80861fc:	4931      	ldr	r1, [pc, #196]	; (80862c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 80861fe:	2201      	movs	r2, #1
 8086200:	a801      	add	r0, sp, #4
 8086202:	f001 fb93 	bl	808792c <_ZN5spark10JSONWriter4nameEPKcj>
 8086206:	4631      	mov	r1, r6
 8086208:	f7ff f8ee 	bl	80853e8 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 808620c:	7923      	ldrb	r3, [r4, #4]
 808620e:	079e      	lsls	r6, r3, #30
 8086210:	d507      	bpl.n	8086222 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 8086212:	492d      	ldr	r1, [pc, #180]	; (80862c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 8086214:	2202      	movs	r2, #2
 8086216:	a801      	add	r0, sp, #4
 8086218:	f001 fb88 	bl	808792c <_ZN5spark10JSONWriter4nameEPKcj>
 808621c:	68e1      	ldr	r1, [r4, #12]
 808621e:	f001 fb09 	bl	8087834 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 8086222:	7923      	ldrb	r3, [r4, #4]
 8086224:	0758      	lsls	r0, r3, #29
 8086226:	d514      	bpl.n	8086252 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 8086228:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 808622a:	4633      	mov	r3, r6
 808622c:	461f      	mov	r7, r3
    for (; *s; ++s) {
 808622e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8086232:	b12a      	cbz	r2, 8086240 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 8086234:	2a20      	cmp	r2, #32
 8086236:	d101      	bne.n	808623c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 8086238:	461e      	mov	r6, r3
 808623a:	e7f7      	b.n	808622c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 808623c:	2a28      	cmp	r2, #40	; 0x28
 808623e:	d1f5      	bne.n	808622c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 8086240:	2202      	movs	r2, #2
 8086242:	4922      	ldr	r1, [pc, #136]	; (80862cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 8086244:	a801      	add	r0, sp, #4
 8086246:	f001 fb71 	bl	808792c <_ZN5spark10JSONWriter4nameEPKcj>
 808624a:	4631      	mov	r1, r6
 808624c:	1bba      	subs	r2, r7, r6
 808624e:	f001 fb7c 	bl	808794a <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 8086252:	7923      	ldrb	r3, [r4, #4]
 8086254:	0719      	lsls	r1, r3, #28
 8086256:	d507      	bpl.n	8086268 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 8086258:	491d      	ldr	r1, [pc, #116]	; (80862d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 808625a:	2201      	movs	r2, #1
 808625c:	a801      	add	r0, sp, #4
 808625e:	f001 fb65 	bl	808792c <_ZN5spark10JSONWriter4nameEPKcj>
 8086262:	6961      	ldr	r1, [r4, #20]
 8086264:	f001 faf8 	bl	8087858 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 8086268:	7923      	ldrb	r3, [r4, #4]
 808626a:	06da      	lsls	r2, r3, #27
 808626c:	d508      	bpl.n	8086280 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 808626e:	2204      	movs	r2, #4
 8086270:	4918      	ldr	r1, [pc, #96]	; (80862d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 8086272:	eb0d 0002 	add.w	r0, sp, r2
 8086276:	f001 fb59 	bl	808792c <_ZN5spark10JSONWriter4nameEPKcj>
 808627a:	69a1      	ldr	r1, [r4, #24]
 808627c:	f001 fada 	bl	8087834 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 8086280:	7923      	ldrb	r3, [r4, #4]
 8086282:	069b      	lsls	r3, r3, #26
 8086284:	d507      	bpl.n	8086296 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 8086286:	4914      	ldr	r1, [pc, #80]	; (80862d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 8086288:	2206      	movs	r2, #6
 808628a:	a801      	add	r0, sp, #4
 808628c:	f001 fb4e 	bl	808792c <_ZN5spark10JSONWriter4nameEPKcj>
 8086290:	69e1      	ldr	r1, [r4, #28]
 8086292:	f7ff f8a9 	bl	80853e8 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 8086296:	a801      	add	r0, sp, #4
 8086298:	f001 faa9 	bl	80877ee <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
 808629c:	6a28      	ldr	r0, [r5, #32]
 808629e:	2202      	movs	r2, #2
 80862a0:	6803      	ldr	r3, [r0, #0]
 80862a2:	490e      	ldr	r1, [pc, #56]	; (80862dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 80862a4:	68db      	ldr	r3, [r3, #12]
 80862a6:	4798      	blx	r3
}
 80862a8:	b005      	add	sp, #20
 80862aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80862ae:	bf00      	nop
 80862b0:	2000054c 	.word	0x2000054c
 80862b4:	08089dd0 	.word	0x08089dd0
 80862b8:	08089571 	.word	0x08089571
 80862bc:	080898d0 	.word	0x080898d0
 80862c0:	08089511 	.word	0x08089511
 80862c4:	08089a50 	.word	0x08089a50
 80862c8:	08089db3 	.word	0x08089db3
 80862cc:	08089db6 	.word	0x08089db6
 80862d0:	08089935 	.word	0x08089935
 80862d4:	08089db9 	.word	0x08089db9
 80862d8:	08089dbe 	.word	0x08089dbe
 80862dc:	080898a2 	.word	0x080898a2

080862e0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 80862e0:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80862e2:	2000      	movs	r0, #0
 80862e4:	f7fe fae0 	bl	80848a8 <spark_sync_time_pending>
 80862e8:	b128      	cbz	r0, 80862f6 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80862ea:	f7fe fabd 	bl	8084868 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 80862ee:	f080 0001 	eor.w	r0, r0, #1
 80862f2:	b2c0      	uxtb	r0, r0
    }
 80862f4:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80862f6:	2001      	movs	r0, #1
 80862f8:	e7fc      	b.n	80862f4 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

080862fc <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80862fc:	b530      	push	{r4, r5, lr}
 80862fe:	4604      	mov	r4, r0
    t += time_zone_cache;
 8086300:	4818      	ldr	r0, [pc, #96]	; (8086364 <_ZN9TimeClass7timeStrEx+0x68>)
{
 8086302:	b093      	sub	sp, #76	; 0x4c
    t += time_zone_cache;
 8086304:	e9d0 1000 	ldrd	r1, r0, [r0]
 8086308:	1852      	adds	r2, r2, r1
 808630a:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
 808630e:	4816      	ldr	r0, [pc, #88]	; (8086368 <_ZN9TimeClass7timeStrEx+0x6c>)
    struct tm calendar_time = {};
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
 8086310:	2500      	movs	r5, #0
    t += dst_current_cache;
 8086312:	e9d0 1000 	ldrd	r1, r0, [r0]
 8086316:	1852      	adds	r2, r2, r1
 8086318:	eb40 0303 	adc.w	r3, r0, r3
 808631c:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
 8086320:	2224      	movs	r2, #36	; 0x24
 8086322:	2100      	movs	r1, #0
 8086324:	eb0d 0002 	add.w	r0, sp, r2
 8086328:	f002 fe5a 	bl	8088fe0 <memset>
    localtime_r(&t, &calendar_time);
 808632c:	a909      	add	r1, sp, #36	; 0x24
 808632e:	4668      	mov	r0, sp
 8086330:	f7f9 fe76 	bl	8080020 <localtime_r>
    char ascstr[26] = {};
 8086334:	2216      	movs	r2, #22
 8086336:	4629      	mov	r1, r5
 8086338:	a803      	add	r0, sp, #12
 808633a:	9502      	str	r5, [sp, #8]
 808633c:	f002 fe50 	bl	8088fe0 <memset>
    asctime_r(&calendar_time, ascstr);
 8086340:	a902      	add	r1, sp, #8
 8086342:	a809      	add	r0, sp, #36	; 0x24
 8086344:	f002 fde8 	bl	8088f18 <asctime_r>
    int len = strlen(ascstr);
 8086348:	a802      	add	r0, sp, #8
 808634a:	f002 feba 	bl	80890c2 <strlen>
    ascstr[len-1] = 0; // remove final newline
 808634e:	ab12      	add	r3, sp, #72	; 0x48
 8086350:	4418      	add	r0, r3
 8086352:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
 8086356:	a902      	add	r1, sp, #8
 8086358:	4620      	mov	r0, r4
 808635a:	f7fe fd2f 	bl	8084dbc <_ZN6StringC1EPKc>
}
 808635e:	4620      	mov	r0, r4
 8086360:	b013      	add	sp, #76	; 0x4c
 8086362:	bd30      	pop	{r4, r5, pc}
 8086364:	200003f0 	.word	0x200003f0
 8086368:	200003e8 	.word	0x200003e8

0808636c <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 808636c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8086370:	b0a5      	sub	sp, #148	; 0x94
 8086372:	4607      	mov	r7, r0
 8086374:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 8086376:	a814      	add	r0, sp, #80	; 0x50
{
 8086378:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 808637a:	223f      	movs	r2, #63	; 0x3f
{
 808637c:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 808637e:	f002 feba 	bl	80890f6 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 8086382:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 8086384:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 8086386:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 808638a:	f002 fe9a 	bl	80890c2 <strlen>
 808638e:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 8086390:	bb5d      	cbnz	r5, 80863ea <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
 8086392:	492a      	ldr	r1, [pc, #168]	; (808643c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
 8086394:	a803      	add	r0, sp, #12
 8086396:	f002 fe70 	bl	808907a <strcpy>
{
 808639a:	2500      	movs	r5, #0
 808639c:	ae14      	add	r6, sp, #80	; 0x50
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 808639e:	f104 3bff 	add.w	fp, r4, #4294967295
 80863a2:	45ab      	cmp	fp, r5
 80863a4:	d936      	bls.n	8086414 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 80863a6:	46b1      	mov	r9, r6
 80863a8:	f819 3b01 	ldrb.w	r3, [r9], #1
 80863ac:	f105 0a01 	add.w	sl, r5, #1
 80863b0:	2b25      	cmp	r3, #37	; 0x25
 80863b2:	d117      	bne.n	80863e4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
 80863b4:	7873      	ldrb	r3, [r6, #1]
 80863b6:	2b7a      	cmp	r3, #122	; 0x7a
 80863b8:	d114      	bne.n	80863e4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
 80863ba:	a803      	add	r0, sp, #12
 80863bc:	f002 fe81 	bl	80890c2 <strlen>
 80863c0:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 80863c2:	ab14      	add	r3, sp, #80	; 0x50
 80863c4:	1828      	adds	r0, r5, r0
 80863c6:	4418      	add	r0, r3
 80863c8:	ebab 0205 	sub.w	r2, fp, r5
 80863cc:	1cb1      	adds	r1, r6, #2
 80863ce:	f002 fddf 	bl	8088f90 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 80863d2:	4622      	mov	r2, r4
 80863d4:	a903      	add	r1, sp, #12
 80863d6:	4630      	mov	r0, r6
 80863d8:	f002 fdda 	bl	8088f90 <memcpy>
            len = strlen(format_str);
 80863dc:	a814      	add	r0, sp, #80	; 0x50
 80863de:	f002 fe70 	bl	80890c2 <strlen>
 80863e2:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
 80863e4:	464e      	mov	r6, r9
 80863e6:	4655      	mov	r5, sl
 80863e8:	e7d9      	b.n	808639e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 80863ea:	213c      	movs	r1, #60	; 0x3c
 80863ec:	fb95 f3f1 	sdiv	r3, r5, r1
 80863f0:	2b00      	cmp	r3, #0
 80863f2:	bfb8      	it	lt
 80863f4:	425b      	neglt	r3, r3
 80863f6:	fbb3 f2f1 	udiv	r2, r3, r1
 80863fa:	fb01 3312 	mls	r3, r1, r2, r3
 80863fe:	9300      	str	r3, [sp, #0]
 8086400:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8086404:	2110      	movs	r1, #16
 8086406:	fb95 f3f3 	sdiv	r3, r5, r3
 808640a:	4a0d      	ldr	r2, [pc, #52]	; (8086440 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
 808640c:	a803      	add	r0, sp, #12
 808640e:	f7fe fa83 	bl	8084918 <snprintf>
 8086412:	e7c2      	b.n	808639a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
 8086414:	2100      	movs	r1, #0
 8086416:	222e      	movs	r2, #46	; 0x2e
 8086418:	a808      	add	r0, sp, #32
 808641a:	9107      	str	r1, [sp, #28]
 808641c:	f002 fde0 	bl	8088fe0 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
 8086420:	4643      	mov	r3, r8
 8086422:	aa14      	add	r2, sp, #80	; 0x50
 8086424:	2132      	movs	r1, #50	; 0x32
 8086426:	a807      	add	r0, sp, #28
 8086428:	f7f9 fe02 	bl	8080030 <strftime>
    return String(buf);
 808642c:	4638      	mov	r0, r7
 808642e:	a907      	add	r1, sp, #28
 8086430:	f7fe fcc4 	bl	8084dbc <_ZN6StringC1EPKc>
}
 8086434:	4638      	mov	r0, r7
 8086436:	b025      	add	sp, #148	; 0x94
 8086438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808643c:	08089e40 	.word	0x08089e40
 8086440:	08089e42 	.word	0x08089e42

08086444 <_ZN9TimeClass6formatExPKc>:
{
 8086444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8086446:	b08d      	sub	sp, #52	; 0x34
 8086448:	9d12      	ldr	r5, [sp, #72]	; 0x48
 808644a:	4604      	mov	r4, r0
 808644c:	e9cd 2300 	strd	r2, r3, [sp]
    if (format_spec == nullptr)
 8086450:	b915      	cbnz	r5, 8086458 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
 8086452:	4b19      	ldr	r3, [pc, #100]	; (80864b8 <_ZN9TimeClass6formatExPKc+0x74>)
 8086454:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
 8086456:	b12d      	cbz	r5, 8086464 <_ZN9TimeClass6formatExPKc+0x20>
 8086458:	4b18      	ldr	r3, [pc, #96]	; (80864bc <_ZN9TimeClass6formatExPKc+0x78>)
 808645a:	4628      	mov	r0, r5
 808645c:	6819      	ldr	r1, [r3, #0]
 808645e:	f002 fe02 	bl	8089066 <strcmp>
 8086462:	b938      	cbnz	r0, 8086474 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
 8086464:	e9dd 2300 	ldrd	r2, r3, [sp]
 8086468:	4620      	mov	r0, r4
 808646a:	f7ff ff47 	bl	80862fc <_ZN9TimeClass7timeStrEx>
}
 808646e:	4620      	mov	r0, r4
 8086470:	b00d      	add	sp, #52	; 0x34
 8086472:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
 8086474:	9900      	ldr	r1, [sp, #0]
 8086476:	4e12      	ldr	r6, [pc, #72]	; (80864c0 <_ZN9TimeClass6formatExPKc+0x7c>)
    t += dst_current_cache;
 8086478:	4f12      	ldr	r7, [pc, #72]	; (80864c4 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
 808647a:	e9d6 3200 	ldrd	r3, r2, [r6]
 808647e:	185b      	adds	r3, r3, r1
 8086480:	9901      	ldr	r1, [sp, #4]
 8086482:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
 8086486:	e9d7 0100 	ldrd	r0, r1, [r7]
 808648a:	181b      	adds	r3, r3, r0
 808648c:	eb41 0202 	adc.w	r2, r1, r2
 8086490:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
 8086494:	2100      	movs	r1, #0
 8086496:	2224      	movs	r2, #36	; 0x24
 8086498:	a803      	add	r0, sp, #12
 808649a:	f002 fda1 	bl	8088fe0 <memset>
    localtime_r(&t, &calendar_time);
 808649e:	a903      	add	r1, sp, #12
 80864a0:	4668      	mov	r0, sp
 80864a2:	f7f9 fdbd 	bl	8080020 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
 80864a6:	6832      	ldr	r2, [r6, #0]
 80864a8:	683b      	ldr	r3, [r7, #0]
 80864aa:	4620      	mov	r0, r4
 80864ac:	4413      	add	r3, r2
 80864ae:	a903      	add	r1, sp, #12
 80864b0:	462a      	mov	r2, r5
 80864b2:	f7ff ff5b 	bl	808636c <_ZN9TimeClass14timeFormatImplEP2tmPKci>
 80864b6:	e7da      	b.n	808646e <_ZN9TimeClass6formatExPKc+0x2a>
 80864b8:	200003e4 	.word	0x200003e4
 80864bc:	200000c0 	.word	0x200000c0
 80864c0:	200003f0 	.word	0x200003f0
 80864c4:	200003e8 	.word	0x200003e8

080864c8 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
 80864c8:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 80864ca:	2000      	movs	r0, #0
 80864cc:	f7fd fedc 	bl	8084288 <hal_rtc_time_is_valid>
    if (rtcstate)
 80864d0:	4604      	mov	r4, r0
 80864d2:	b9a0      	cbnz	r0, 80864fe <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80864d4:	f7fe f8d8 	bl	8084688 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80864d8:	2801      	cmp	r0, #1
 80864da:	d110      	bne.n	80864fe <_ZN9TimeClass7isValidEv+0x36>
 80864dc:	4620      	mov	r0, r4
 80864de:	f7fe f913 	bl	8084708 <system_thread_get_state>
 80864e2:	b960      	cbnz	r0, 80864fe <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 80864e4:	f7ff fefc 	bl	80862e0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80864e8:	b910      	cbnz	r0, 80864f0 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 80864ea:	f7fe f9ad 	bl	8084848 <spark_process>
        while (_while() && !_condition()) {
 80864ee:	e7f9      	b.n	80864e4 <_ZN9TimeClass7isValidEv+0x1c>
 80864f0:	f7ff fef6 	bl	80862e0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 80864f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 80864f8:	2000      	movs	r0, #0
 80864fa:	f7fd bec5 	b.w	8084288 <hal_rtc_time_is_valid>
}
 80864fe:	4620      	mov	r0, r4
 8086500:	bd10      	pop	{r4, pc}

08086502 <_ZN9TimeClass3nowEv>:
{
 8086502:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 8086504:	f7ff ffe0 	bl	80864c8 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 8086508:	2210      	movs	r2, #16
 808650a:	2100      	movs	r1, #0
 808650c:	4668      	mov	r0, sp
 808650e:	f002 fd67 	bl	8088fe0 <memset>
    hal_rtc_get_time(&tv, nullptr);
 8086512:	2100      	movs	r1, #0
 8086514:	4668      	mov	r0, sp
 8086516:	f7fd febf 	bl	8084298 <hal_rtc_get_time>
}
 808651a:	9800      	ldr	r0, [sp, #0]
 808651c:	b005      	add	sp, #20
 808651e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08086524 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8086524:	4b02      	ldr	r3, [pc, #8]	; (8086530 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8086526:	681a      	ldr	r2, [r3, #0]
 8086528:	4b02      	ldr	r3, [pc, #8]	; (8086534 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 808652a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 808652c:	4770      	bx	lr
 808652e:	bf00      	nop
 8086530:	200000c0 	.word	0x200000c0
 8086534:	200003e4 	.word	0x200003e4

08086538 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8086538:	2100      	movs	r1, #0
 808653a:	f7fe b8b5 	b.w	80846a8 <system_delay_ms>

0808653e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 808653e:	b510      	push	{r4, lr}
 8086540:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
 8086542:	f7f9 ff27 	bl	8080394 <_ZNSt14_Function_baseD1Ev>
 8086546:	4620      	mov	r0, r4
 8086548:	bd10      	pop	{r4, pc}

0808654a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 808654a:	b513      	push	{r0, r1, r4, lr}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808654c:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 808654e:	460b      	mov	r3, r1
 8086550:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8086552:	c803      	ldmia	r0, {r0, r1}
 8086554:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8086558:	e893 0003 	ldmia.w	r3, {r0, r1}
 808655c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8086560:	e894 0003 	ldmia.w	r4, {r0, r1}
 8086564:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8086568:	b002      	add	sp, #8
 808656a:	bd10      	pop	{r4, pc}

0808656c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 808656c:	2300      	movs	r3, #0
 808656e:	4803      	ldr	r0, [pc, #12]	; (808657c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8086570:	4a03      	ldr	r2, [pc, #12]	; (8086580 <_GLOBAL__sub_I_RGB+0x14>)
 8086572:	4904      	ldr	r1, [pc, #16]	; (8086584 <_GLOBAL__sub_I_RGB+0x18>)
 8086574:	6083      	str	r3, [r0, #8]
 8086576:	f001 bb87 	b.w	8087c88 <__aeabi_atexit>
 808657a:	bf00      	nop
 808657c:	200003f8 	.word	0x200003f8
 8086580:	20000130 	.word	0x20000130
 8086584:	0808653f 	.word	0x0808653f

08086588 <_ZN8particle6detail9_getVCellEhh>:
    return i2c_.isEnabled();
}

namespace particle { namespace detail {
    // Converts VCELL_REGISTER reading to Battery Voltage
    float _getVCell(byte MSB, byte LSB) {
 8086588:	b508      	push	{r3, lr}
        // VCELL = 12-bit value, 1.25mV (1V/800) per bit
        float value = (float)((MSB << 4) | (LSB >> 4));
 808658a:	0909      	lsrs	r1, r1, #4
 808658c:	ea41 1000 	orr.w	r0, r1, r0, lsl #4
 8086590:	f002 fa6c 	bl	8088a6c <__aeabi_i2f>
        return value / 800.0;
 8086594:	4901      	ldr	r1, [pc, #4]	; (808659c <_ZN8particle6detail9_getVCellEhh+0x14>)
 8086596:	f002 fb71 	bl	8088c7c <__aeabi_fdiv>
    }
 808659a:	bd08      	pop	{r3, pc}
 808659c:	44480000 	.word	0x44480000

080865a0 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
 80865a0:	6800      	ldr	r0, [r0, #0]
 80865a2:	f000 bf7d 	b.w	80874a0 <_ZN7TwoWire4lockEv>

080865a6 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 80865a6:	b510      	push	{r4, lr}
 80865a8:	4604      	mov	r4, r0
      lock_(_lock) {
 80865aa:	6001      	str	r1, [r0, #0]
 80865ac:	7102      	strb	r2, [r0, #4]
    if (lock_) {
 80865ae:	b10a      	cbz	r2, 80865b4 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 80865b0:	f7ff fff6 	bl	80865a0 <_ZN9FuelGauge4lockEv>
}
 80865b4:	4620      	mov	r0, r4
 80865b6:	bd10      	pop	{r4, pc}

080865b8 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
 80865b8:	b538      	push	{r3, r4, r5, lr}
 80865ba:	4604      	mov	r4, r0
 80865bc:	460d      	mov	r5, r1
            return &Wire3;
 80865be:	f001 fb3b 	bl	8087c38 <_Z20__fetch_global_Wire3v>
        : FuelGauge(*fuelWireInstance(), _lock)
 80865c2:	462a      	mov	r2, r5
            return &Wire3;
 80865c4:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
 80865c6:	4620      	mov	r0, r4
 80865c8:	f7ff ffed 	bl	80865a6 <_ZN9FuelGaugeC1ER7TwoWireb>
}
 80865cc:	4620      	mov	r0, r4
 80865ce:	bd38      	pop	{r3, r4, r5, pc}

080865d0 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
 80865d0:	6800      	ldr	r0, [r0, #0]
 80865d2:	f000 bf6e 	b.w	80874b2 <_ZN7TwoWire6unlockEv>

080865d6 <_ZN9FuelGaugeD1Ev>:
FuelGauge::~FuelGauge()
 80865d6:	b510      	push	{r4, lr}
    if (lock_) {
 80865d8:	7903      	ldrb	r3, [r0, #4]
FuelGauge::~FuelGauge()
 80865da:	4604      	mov	r4, r0
    if (lock_) {
 80865dc:	b10b      	cbz	r3, 80865e2 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
 80865de:	f7ff fff7 	bl	80865d0 <_ZN9FuelGauge6unlockEv>
}
 80865e2:	4620      	mov	r0, r4
 80865e4:	bd10      	pop	{r4, pc}

080865e6 <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
 80865e6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80865ea:	4604      	mov	r4, r0
 80865ec:	460d      	mov	r5, r1
 80865ee:	4617      	mov	r7, r2
 80865f0:	461e      	mov	r6, r3
      { _M_device.lock(); }
 80865f2:	f7ff ffd5 	bl	80865a0 <_ZN9FuelGauge4lockEv>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 80865f6:	2336      	movs	r3, #54	; 0x36
 80865f8:	f88d 3000 	strb.w	r3, [sp]
 80865fc:	2300      	movs	r3, #0
 80865fe:	f04f 0801 	mov.w	r8, #1
 8086602:	9301      	str	r3, [sp, #4]
    timeout_ = ms;
 8086604:	230a      	movs	r3, #10
    i2c_.beginTransmission(config);
 8086606:	4669      	mov	r1, sp
 8086608:	6820      	ldr	r0, [r4, #0]
 808660a:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 808660c:	f88d 8008 	strb.w	r8, [sp, #8]
 8086610:	f000 ff27 	bl	8087462 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
 8086614:	6820      	ldr	r0, [r4, #0]
 8086616:	4629      	mov	r1, r5
 8086618:	6803      	ldr	r3, [r0, #0]
 808661a:	689b      	ldr	r3, [r3, #8]
 808661c:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
 808661e:	4641      	mov	r1, r8
 8086620:	6820      	ldr	r0, [r4, #0]
 8086622:	f000 ff36 	bl	8087492 <_ZN7TwoWire15endTransmissionEh>
 8086626:	4605      	mov	r5, r0
 8086628:	b140      	cbz	r0, 808663c <_ZN9FuelGauge12readRegisterEhRhS0_+0x56>
 808662a:	f06f 059f 	mvn.w	r5, #159	; 0x9f
      { _M_device.unlock(); }
 808662e:	4620      	mov	r0, r4
 8086630:	f7ff ffce 	bl	80865d0 <_ZN9FuelGauge6unlockEv>
}
 8086634:	4628      	mov	r0, r5
 8086636:	b004      	add	sp, #16
 8086638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
 808663c:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
 808663e:	4669      	mov	r1, sp
 8086640:	6820      	ldr	r0, [r4, #0]
 8086642:	9301      	str	r3, [sp, #4]
 8086644:	f000 feda 	bl	80873fc <_ZN7TwoWire11requestFromERK16WireTransmission>
 8086648:	2802      	cmp	r0, #2
 808664a:	d1ee      	bne.n	808662a <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>
    MSB = i2c_.read();
 808664c:	6820      	ldr	r0, [r4, #0]
 808664e:	6803      	ldr	r3, [r0, #0]
 8086650:	695b      	ldr	r3, [r3, #20]
 8086652:	4798      	blx	r3
 8086654:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
 8086656:	6820      	ldr	r0, [r4, #0]
 8086658:	6803      	ldr	r3, [r0, #0]
 808665a:	695b      	ldr	r3, [r3, #20]
 808665c:	4798      	blx	r3
 808665e:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
 8086660:	e7e5      	b.n	808662e <_ZN9FuelGauge12readRegisterEhRhS0_+0x48>
	...

08086664 <_ZN9FuelGauge8getVCellEv>:
    byte MSB = 0;
 8086664:	2300      	movs	r3, #0
float FuelGauge::getVCell() {
 8086666:	b507      	push	{r0, r1, r2, lr}
    if (readRegister(VCELL_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
 8086668:	2102      	movs	r1, #2
    byte MSB = 0;
 808666a:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
 808666e:	f88d 3007 	strb.w	r3, [sp, #7]
    if (readRegister(VCELL_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
 8086672:	f10d 0206 	add.w	r2, sp, #6
 8086676:	f10d 0307 	add.w	r3, sp, #7
 808667a:	f7ff ffb4 	bl	80865e6 <_ZN9FuelGauge12readRegisterEhRhS0_>
 808667e:	b940      	cbnz	r0, 8086692 <_ZN9FuelGauge8getVCellEv+0x2e>
    return particle::detail::_getVCell(MSB, LSB);
 8086680:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8086684:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
 8086688:	b003      	add	sp, #12
 808668a:	f85d eb04 	ldr.w	lr, [sp], #4
    return particle::detail::_getVCell(MSB, LSB);
 808668e:	f7ff bf7b 	b.w	8086588 <_ZN8particle6detail9_getVCellEhh>
}
 8086692:	4802      	ldr	r0, [pc, #8]	; (808669c <_ZN9FuelGauge8getVCellEv+0x38>)
 8086694:	b003      	add	sp, #12
 8086696:	f85d fb04 	ldr.w	pc, [sp], #4
 808669a:	bf00      	nop
 808669c:	bf800000 	.word	0xbf800000

080866a0 <_ZN9FuelGauge6getSoCEv>:
    byte MSB = 0;
 80866a0:	2300      	movs	r3, #0
float FuelGauge::getSoC() {
 80866a2:	b513      	push	{r0, r1, r4, lr}
    if(readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
 80866a4:	2104      	movs	r1, #4
    byte MSB = 0;
 80866a6:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
 80866aa:	f88d 3007 	strb.w	r3, [sp, #7]
    if(readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
 80866ae:	f10d 0206 	add.w	r2, sp, #6
 80866b2:	f10d 0307 	add.w	r3, sp, #7
 80866b6:	f7ff ff96 	bl	80865e6 <_ZN9FuelGauge12readRegisterEhRhS0_>
 80866ba:	b9a0      	cbnz	r0, 80866e6 <_ZN9FuelGauge6getSoCEv+0x46>
        float decimal = LSB / 256.0;
 80866bc:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80866c0:	f001 fd68 	bl	8088194 <__aeabi_i2d>
 80866c4:	2200      	movs	r2, #0
 80866c6:	4b09      	ldr	r3, [pc, #36]	; (80866ec <_ZN9FuelGauge6getSoCEv+0x4c>)
 80866c8:	f001 fdce 	bl	8088268 <__aeabi_dmul>
 80866cc:	f002 f8c4 	bl	8088858 <__aeabi_d2f>
 80866d0:	4604      	mov	r4, r0
        return MSB + decimal;
 80866d2:	f89d 0006 	ldrb.w	r0, [sp, #6]
 80866d6:	f002 f9c9 	bl	8088a6c <__aeabi_i2f>
 80866da:	4601      	mov	r1, r0
 80866dc:	4620      	mov	r0, r4
 80866de:	f002 f911 	bl	8088904 <__addsf3>
}
 80866e2:	b002      	add	sp, #8
 80866e4:	bd10      	pop	{r4, pc}
        return -1.0f;
 80866e6:	4802      	ldr	r0, [pc, #8]	; (80866f0 <_ZN9FuelGauge6getSoCEv+0x50>)
 80866e8:	e7fb      	b.n	80866e2 <_ZN9FuelGauge6getSoCEv+0x42>
 80866ea:	bf00      	nop
 80866ec:	3f700000 	.word	0x3f700000
 80866f0:	bf800000 	.word	0xbf800000

080866f4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80866f4:	4b01      	ldr	r3, [pc, #4]	; (80866fc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80866f6:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80866f8:	4770      	bx	lr
 80866fa:	bf00      	nop
 80866fc:	200000cc 	.word	0x200000cc

08086700 <serialEventRun>:
{
 8086700:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8086702:	4b17      	ldr	r3, [pc, #92]	; (8086760 <serialEventRun+0x60>)
 8086704:	b143      	cbz	r3, 8086718 <serialEventRun+0x18>
 8086706:	f000 fc57 	bl	8086fb8 <_Z16_fetch_usbserialv>
 808670a:	6803      	ldr	r3, [r0, #0]
 808670c:	691b      	ldr	r3, [r3, #16]
 808670e:	4798      	blx	r3
 8086710:	2800      	cmp	r0, #0
 8086712:	dd01      	ble.n	8086718 <serialEventRun+0x18>
        serialEvent();
 8086714:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 8086718:	4b12      	ldr	r3, [pc, #72]	; (8086764 <serialEventRun+0x64>)
 808671a:	b143      	cbz	r3, 808672e <serialEventRun+0x2e>
 808671c:	f000 fdd4 	bl	80872c8 <_Z22__fetch_global_Serial1v>
 8086720:	6803      	ldr	r3, [r0, #0]
 8086722:	691b      	ldr	r3, [r3, #16]
 8086724:	4798      	blx	r3
 8086726:	2800      	cmp	r0, #0
 8086728:	dd01      	ble.n	808672e <serialEventRun+0x2e>
        serialEvent1();
 808672a:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 808672e:	4b0e      	ldr	r3, [pc, #56]	; (8086768 <serialEventRun+0x68>)
 8086730:	b10b      	cbz	r3, 8086736 <serialEventRun+0x36>
 8086732:	f3af 8000 	nop.w
    if (serialEventRun4) serialEventRun4();
 8086736:	4b0d      	ldr	r3, [pc, #52]	; (808676c <serialEventRun+0x6c>)
 8086738:	b10b      	cbz	r3, 808673e <serialEventRun+0x3e>
 808673a:	f3af 8000 	nop.w
    if (serialEventRun5) serialEventRun5();
 808673e:	4b0c      	ldr	r3, [pc, #48]	; (8086770 <serialEventRun+0x70>)
 8086740:	b10b      	cbz	r3, 8086746 <serialEventRun+0x46>
 8086742:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8086746:	4b0b      	ldr	r3, [pc, #44]	; (8086774 <serialEventRun+0x74>)
 8086748:	b143      	cbz	r3, 808675c <serialEventRun+0x5c>
 808674a:	f000 fc65 	bl	8087018 <_Z17_fetch_usbserial1v>
 808674e:	6803      	ldr	r3, [r0, #0]
 8086750:	691b      	ldr	r3, [r3, #16]
 8086752:	4798      	blx	r3
 8086754:	2800      	cmp	r0, #0
 8086756:	dd01      	ble.n	808675c <serialEventRun+0x5c>
        usbSerialEvent1();
 8086758:	f3af 8000 	nop.w
}
 808675c:	bd08      	pop	{r3, pc}
 808675e:	bf00      	nop
	...

08086778 <_post_loop>:
{
 8086778:	b508      	push	{r3, lr}
	serialEventRun();
 808677a:	f7ff ffc1 	bl	8086700 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 808677e:	f7fd fd7b 	bl	8084278 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8086782:	4b01      	ldr	r3, [pc, #4]	; (8086788 <_post_loop+0x10>)
 8086784:	6018      	str	r0, [r3, #0]
}
 8086786:	bd08      	pop	{r3, pc}
 8086788:	20000554 	.word	0x20000554

0808678c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 808678c:	4802      	ldr	r0, [pc, #8]	; (8086798 <_Z33system_initialize_user_backup_ramv+0xc>)
 808678e:	4a03      	ldr	r2, [pc, #12]	; (808679c <_Z33system_initialize_user_backup_ramv+0x10>)
 8086790:	4903      	ldr	r1, [pc, #12]	; (80867a0 <_Z33system_initialize_user_backup_ramv+0x14>)
 8086792:	1a12      	subs	r2, r2, r0
 8086794:	f002 bbfc 	b.w	8088f90 <memcpy>
 8086798:	40024000 	.word	0x40024000
 808679c:	40024224 	.word	0x40024224
 80867a0:	0808a150 	.word	0x0808a150

080867a4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80867a4:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80867a6:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80867a8:	461a      	mov	r2, r3
 80867aa:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80867ae:	9300      	str	r3, [sp, #0]
 80867b0:	f7fd ffbc 	bl	808472c <system_ctrl_set_result>
}
 80867b4:	b003      	add	sp, #12
 80867b6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080867bc <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80867bc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80867be:	8843      	ldrh	r3, [r0, #2]
 80867c0:	2b0a      	cmp	r3, #10
 80867c2:	d008      	beq.n	80867d6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80867c4:	2b50      	cmp	r3, #80	; 0x50
 80867c6:	d10b      	bne.n	80867e0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80867c8:	4b09      	ldr	r3, [pc, #36]	; (80867f0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80867ca:	681b      	ldr	r3, [r3, #0]
 80867cc:	b14b      	cbz	r3, 80867e2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80867ce:	b003      	add	sp, #12
 80867d0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80867d4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80867d6:	f7ff ffe5 	bl	80867a4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80867da:	b003      	add	sp, #12
 80867dc:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80867e0:	2300      	movs	r3, #0
 80867e2:	461a      	mov	r2, r3
 80867e4:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80867e8:	9300      	str	r3, [sp, #0]
 80867ea:	f7fd ff9f 	bl	808472c <system_ctrl_set_result>
}
 80867ee:	e7f4      	b.n	80867da <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80867f0:	2000040c 	.word	0x2000040c

080867f4 <module_user_init_hook>:
{
 80867f4:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80867f6:	4c12      	ldr	r4, [pc, #72]	; (8086840 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80867f8:	2100      	movs	r1, #0
 80867fa:	4812      	ldr	r0, [pc, #72]	; (8086844 <module_user_init_hook+0x50>)
 80867fc:	f7fe f8b4 	bl	8084968 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8086800:	4d11      	ldr	r5, [pc, #68]	; (8086848 <module_user_init_hook+0x54>)
 8086802:	6823      	ldr	r3, [r4, #0]
 8086804:	42ab      	cmp	r3, r5
 8086806:	bf0c      	ite	eq
 8086808:	2201      	moveq	r2, #1
 808680a:	2200      	movne	r2, #0
 808680c:	4b0f      	ldr	r3, [pc, #60]	; (808684c <module_user_init_hook+0x58>)
 808680e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8086810:	d002      	beq.n	8086818 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 8086812:	f7ff ffbb 	bl	808678c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8086816:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8086818:	f7fd fd16 	bl	8084248 <HAL_RNG_GetRandomNumber>
 808681c:	4604      	mov	r4, r0
    srand(seed);
 808681e:	f002 fbe7 	bl	8088ff0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 8086822:	4b0b      	ldr	r3, [pc, #44]	; (8086850 <module_user_init_hook+0x5c>)
 8086824:	b113      	cbz	r3, 808682c <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 8086826:	4620      	mov	r0, r4
 8086828:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 808682c:	2100      	movs	r1, #0
 808682e:	4808      	ldr	r0, [pc, #32]	; (8086850 <module_user_init_hook+0x5c>)
 8086830:	f7fe f842 	bl	80848b8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8086834:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8086838:	2100      	movs	r1, #0
 808683a:	4806      	ldr	r0, [pc, #24]	; (8086854 <module_user_init_hook+0x60>)
 808683c:	f7fd bf6c 	b.w	8084718 <system_ctrl_set_app_request_handler>
 8086840:	40024220 	.word	0x40024220
 8086844:	080866f5 	.word	0x080866f5
 8086848:	9a271c1e 	.word	0x9a271c1e
 808684c:	20000408 	.word	0x20000408
 8086850:	00000000 	.word	0x00000000
 8086854:	080867bd 	.word	0x080867bd

08086858 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8086858:	4770      	bx	lr

0808685a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 808685a:	2000      	movs	r0, #0
 808685c:	4770      	bx	lr

0808685e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 808685e:	b510      	push	{r4, lr}
 8086860:	4604      	mov	r4, r0
 8086862:	2110      	movs	r1, #16
 8086864:	f001 fa15 	bl	8087c92 <_ZdlPvj>
 8086868:	4620      	mov	r0, r4
 808686a:	bd10      	pop	{r4, pc}

0808686c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 808686c:	b508      	push	{r3, lr}
      { delete this; }
 808686e:	f7ff fff6 	bl	808685e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8086872:	bd08      	pop	{r3, pc}

08086874 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8086874:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 8086876:	b530      	push	{r4, r5, lr}
        type_(type) {
 8086878:	f64f 749c 	movw	r4, #65436	; 0xff9c
 808687c:	6002      	str	r2, [r0, #0]
 808687e:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 8086880:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8086882:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 8086884:	680c      	ldr	r4, [r1, #0]
 8086886:	8085      	strh	r5, [r0, #4]
 8086888:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 808688a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 808688c:	bd30      	pop	{r4, r5, pc}

0808688e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 808688e:	b510      	push	{r4, lr}
 8086890:	4604      	mov	r4, r0
    free((void*)msg_);
 8086892:	6800      	ldr	r0, [r0, #0]
 8086894:	f7fe f828 	bl	80848e8 <free>
}
 8086898:	4620      	mov	r0, r4
 808689a:	bd10      	pop	{r4, pc}

0808689c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 808689c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 808689e:	68c4      	ldr	r4, [r0, #12]
 80868a0:	b1f4      	cbz	r4, 80868e0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80868a2:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80868a4:	2b02      	cmp	r3, #2
 80868a6:	d103      	bne.n	80868b0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80868a8:	f104 000c 	add.w	r0, r4, #12
 80868ac:	f7ff ffef 	bl	808688e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80868b0:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80868b2:	b135      	cbz	r5, 80868c2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 80868b4:	4628      	mov	r0, r5
 80868b6:	f7f9 fd6d 	bl	8080394 <_ZNSt14_Function_baseD1Ev>
 80868ba:	2110      	movs	r1, #16
 80868bc:	4628      	mov	r0, r5
 80868be:	f001 f9e8 	bl	8087c92 <_ZdlPvj>
 80868c2:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80868c4:	b135      	cbz	r5, 80868d4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80868c6:	4628      	mov	r0, r5
 80868c8:	f7f9 fd64 	bl	8080394 <_ZNSt14_Function_baseD1Ev>
 80868cc:	2110      	movs	r1, #16
 80868ce:	4628      	mov	r0, r5
 80868d0:	f001 f9df 	bl	8087c92 <_ZdlPvj>
 80868d4:	4620      	mov	r0, r4
 80868d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80868da:	2114      	movs	r1, #20
 80868dc:	f001 b9d9 	b.w	8087c92 <_ZdlPvj>
 80868e0:	bd38      	pop	{r3, r4, r5, pc}

080868e2 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80868e2:	b510      	push	{r4, lr}
 80868e4:	b088      	sub	sp, #32
 80868e6:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80868e8:	4668      	mov	r0, sp
 80868ea:	f7fe fa67 	bl	8084dbc <_ZN6StringC1EPKc>
    return (*fn)(p);
 80868ee:	4669      	mov	r1, sp
 80868f0:	a804      	add	r0, sp, #16
 80868f2:	f7fe faad 	bl	8084e50 <_ZN6StringC1ERKS_>
 80868f6:	a804      	add	r0, sp, #16
 80868f8:	47a0      	blx	r4
 80868fa:	4604      	mov	r4, r0
 80868fc:	a804      	add	r0, sp, #16
 80868fe:	f7fe fa13 	bl	8084d28 <_ZN6StringD1Ev>
    String p(param);
 8086902:	4668      	mov	r0, sp
 8086904:	f7fe fa10 	bl	8084d28 <_ZN6StringD1Ev>
}
 8086908:	4620      	mov	r0, r4
 808690a:	b008      	add	sp, #32
 808690c:	bd10      	pop	{r4, pc}

0808690e <_ZN10CloudClass22call_std_user_functionEPvPKcS0_>:

int CloudClass::call_std_user_function(void* data, const char* param, void* reserved)
{
 808690e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8086910:	4604      	mov	r4, r0
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
 8086912:	4668      	mov	r0, sp
 8086914:	f7fe fa52 	bl	8084dbc <_ZN6StringC1EPKc>
      if (_M_empty())
 8086918:	68a3      	ldr	r3, [r4, #8]
 808691a:	b90b      	cbnz	r3, 8086920 <_ZN10CloudClass22call_std_user_functionEPvPKcS0_+0x12>
	__throw_bad_function_call();
 808691c:	f001 f9bf 	bl	8087c9e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8086920:	68e3      	ldr	r3, [r4, #12]
 8086922:	4669      	mov	r1, sp
 8086924:	4620      	mov	r0, r4
 8086926:	4798      	blx	r3
 8086928:	4604      	mov	r4, r0
 808692a:	4668      	mov	r0, sp
 808692c:	f7fe f9fc 	bl	8084d28 <_ZN6StringD1Ev>
}
 8086930:	4620      	mov	r0, r4
 8086932:	b004      	add	sp, #16
 8086934:	bd10      	pop	{r4, pc}

08086936 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_>:

void CloudClass::call_wiring_event_handler(const void* handler_data, const char *event_name, const char *data)
{
 8086936:	b507      	push	{r0, r1, r2, lr}
 8086938:	e9cd 1200 	strd	r1, r2, [sp]
      if (_M_empty())
 808693c:	6882      	ldr	r2, [r0, #8]
 808693e:	b90a      	cbnz	r2, 8086944 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_+0xe>
	__throw_bad_function_call();
 8086940:	f001 f9ad 	bl	8087c9e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8086944:	4669      	mov	r1, sp
 8086946:	68c3      	ldr	r3, [r0, #12]
 8086948:	aa01      	add	r2, sp, #4
 808694a:	4798      	blx	r3
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}
 808694c:	b003      	add	sp, #12
 808694e:	f85d fb04 	ldr.w	pc, [sp], #4

08086952 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 8086952:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 8086954:	2300      	movs	r3, #0
         size = sizeof(*this);
 8086956:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 8086958:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 808695c:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 808695e:	4669      	mov	r1, sp
 8086960:	461a      	mov	r2, r3
 8086962:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 8086964:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 8086968:	f8ad 4000 	strh.w	r4, [sp]
 808696c:	f7fd ff64 	bl	8084838 <spark_function>
}
 8086970:	b004      	add	sp, #16
 8086972:	bd10      	pop	{r4, pc}

08086974 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
 8086974:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
 8086976:	230c      	movs	r3, #12
    spark_cloud_disconnect_options opts = {};
 8086978:	2100      	movs	r1, #0
    opts.size = sizeof(opts);
 808697a:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
 808697e:	6803      	ldr	r3, [r0, #0]
    spark_cloud_disconnect_options opts = {};
 8086980:	f8ad 100d 	strh.w	r1, [sp, #13]
    opts.flags = flags_;
 8086984:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
 8086988:	7a03      	ldrb	r3, [r0, #8]
    spark_cloud_disconnect_options opts = {};
 808698a:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.graceful = graceful_;
 808698e:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
 8086992:	6843      	ldr	r3, [r0, #4]
 8086994:	9302      	str	r3, [sp, #8]
    opts.clear_session = clearSession_;
 8086996:	7a43      	ldrb	r3, [r0, #9]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 8086998:	a801      	add	r0, sp, #4
    opts.clear_session = clearSession_;
 808699a:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 808699e:	f7fd ff93 	bl	80848c8 <spark_cloud_disconnect>
}
 80869a2:	b005      	add	sp, #20
 80869a4:	f85d fb04 	ldr.w	pc, [sp], #4

080869a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80869a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80869aa:	460e      	mov	r6, r1
 80869ac:	4604      	mov	r4, r0
 80869ae:	f856 3b04 	ldr.w	r3, [r6], #4
 80869b2:	460d      	mov	r5, r1
 80869b4:	a801      	add	r0, sp, #4
 80869b6:	4631      	mov	r1, r6
 80869b8:	9300      	str	r3, [sp, #0]
 80869ba:	f7fe fe37 	bl	808562c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80869be:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80869c0:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80869c2:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 80869c4:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80869c6:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 80869c8:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 80869ca:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80869cc:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 80869ce:	f7f9 fd2f 	bl	8080430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80869d2:	4630      	mov	r0, r6
 80869d4:	f7f9 fd2c 	bl	8080430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80869d8:	4628      	mov	r0, r5
 80869da:	2108      	movs	r1, #8
 80869dc:	f001 f959 	bl	8087c92 <_ZdlPvj>
        return p;
    }
 80869e0:	4620      	mov	r0, r4
 80869e2:	b002      	add	sp, #8
 80869e4:	bd70      	pop	{r4, r5, r6, pc}

080869e6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 80869e6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80869e8:	b510      	push	{r4, lr}
      if (_M_empty())
 80869ea:	b90a      	cbnz	r2, 80869f0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80869ec:	f001 f957 	bl	8087c9e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80869f0:	68c3      	ldr	r3, [r0, #12]
    }
 80869f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80869f6:	4718      	bx	r3

080869f8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80869f8:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80869fa:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80869fc:	f100 0110 	add.w	r1, r0, #16
 8086a00:	f7ff fff1 	bl	80869e6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 8086a04:	bd08      	pop	{r3, pc}

08086a06 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 8086a06:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 8086a08:	b510      	push	{r4, lr}
      if (_M_empty())
 8086a0a:	b90a      	cbnz	r2, 8086a10 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 8086a0c:	f001 f947 	bl	8087c9e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8086a10:	68c3      	ldr	r3, [r0, #12]
    }
 8086a12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8086a16:	4718      	bx	r3

08086a18 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8086a18:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 8086a1a:	6800      	ldr	r0, [r0, #0]
 8086a1c:	f100 0110 	add.w	r1, r0, #16
 8086a20:	f7ff fff1 	bl	8086a06 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 8086a24:	bd08      	pop	{r3, pc}
	...

08086a28 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 8086a28:	b538      	push	{r3, r4, r5, lr}
 8086a2a:	2300      	movs	r3, #0
 8086a2c:	4604      	mov	r4, r0
 8086a2e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8086a30:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 8086a32:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8086a34:	f7f9 fb41 	bl	80800ba <_Znwj>
 8086a38:	b128      	cbz	r0, 8086a46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 8086a3a:	2301      	movs	r3, #1
 8086a3c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 8086a40:	4b02      	ldr	r3, [pc, #8]	; (8086a4c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 8086a42:	60c5      	str	r5, [r0, #12]
 8086a44:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8086a46:	6020      	str	r0, [r4, #0]
	}
 8086a48:	4620      	mov	r0, r4
 8086a4a:	bd38      	pop	{r3, r4, r5, pc}
 8086a4c:	08089e74 	.word	0x08089e74

08086a50 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 8086a50:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8086a52:	2300      	movs	r3, #0
 8086a54:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 8086a56:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 8086a58:	4604      	mov	r4, r0
 8086a5a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 8086a5c:	b12b      	cbz	r3, 8086a6a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8086a5e:	2202      	movs	r2, #2
 8086a60:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8086a62:	68eb      	ldr	r3, [r5, #12]
 8086a64:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8086a66:	68ab      	ldr	r3, [r5, #8]
 8086a68:	60a3      	str	r3, [r4, #8]
    }
 8086a6a:	4620      	mov	r0, r4
 8086a6c:	bd38      	pop	{r3, r4, r5, pc}
	...

08086a70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 8086a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8086a72:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8086a74:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 8086a76:	4668      	mov	r0, sp
 8086a78:	f7ff fefc 	bl	8086874 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 8086a7c:	f04f 0302 	mov.w	r3, #2
 8086a80:	e8d4 2f4f 	ldrexb	r2, [r4]
 8086a84:	2a00      	cmp	r2, #0
 8086a86:	d103      	bne.n	8086a90 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 8086a88:	e8c4 3f41 	strexb	r1, r3, [r4]
 8086a8c:	2900      	cmp	r1, #0
 8086a8e:	d1f7      	bne.n	8086a80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 8086a90:	d125      	bne.n	8086ade <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 8086a92:	f104 050c 	add.w	r5, r4, #12
 8086a96:	4669      	mov	r1, sp
 8086a98:	4628      	mov	r0, r5
 8086a9a:	f7ff feeb 	bl	8086874 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 8086a9e:	2301      	movs	r3, #1
 8086aa0:	f3bf 8f5b 	dmb	ish
 8086aa4:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 8086aa6:	2000      	movs	r0, #0
 8086aa8:	f3bf 8f5b 	dmb	ish
 8086aac:	f104 0308 	add.w	r3, r4, #8
 8086ab0:	e853 6f00 	ldrex	r6, [r3]
 8086ab4:	e843 0200 	strex	r2, r0, [r3]
 8086ab8:	2a00      	cmp	r2, #0
 8086aba:	d1f9      	bne.n	8086ab0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 8086abc:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 8086ac0:	b16e      	cbz	r6, 8086ade <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 8086ac2:	f7fd fe11 	bl	80846e8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 8086ac6:	b178      	cbz	r0, 8086ae8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8086ac8:	4629      	mov	r1, r5
 8086aca:	4630      	mov	r0, r6
 8086acc:	f7ff ff8b 	bl	80869e6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 8086ad0:	4630      	mov	r0, r6
 8086ad2:	f7f9 fc5f 	bl	8080394 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 8086ad6:	2110      	movs	r1, #16
 8086ad8:	4630      	mov	r0, r6
 8086ada:	f001 f8da 	bl	8087c92 <_ZdlPvj>
        p_->setError(std::move(error));
 8086ade:	4668      	mov	r0, sp
 8086ae0:	f7ff fed5 	bl	808688e <_ZN8particle5ErrorD1Ev>
    }
 8086ae4:	b009      	add	sp, #36	; 0x24
 8086ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8086ae8:	4631      	mov	r1, r6
 8086aea:	a802      	add	r0, sp, #8
 8086aec:	f7ff ffb0 	bl	8086a50 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 8086af0:	68e0      	ldr	r0, [r4, #12]
 8086af2:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 8086af6:	b108      	cbz	r0, 8086afc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 8086af8:	f002 fac8 	bl	808908c <strdup>
        type_(type) {
 8086afc:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8086afe:	2010      	movs	r0, #16
 8086b00:	f8ad 501c 	strh.w	r5, [sp, #28]
 8086b04:	f7f9 fad9 	bl	80800ba <_Znwj>
 8086b08:	4605      	mov	r5, r0
 8086b0a:	b1e8      	cbz	r0, 8086b48 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 8086b0c:	2700      	movs	r7, #0
 8086b0e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8086b10:	2018      	movs	r0, #24
 8086b12:	f7f9 fad2 	bl	80800ba <_Znwj>
 8086b16:	4604      	mov	r4, r0
 8086b18:	b188      	cbz	r0, 8086b3e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 8086b1a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 8086b1c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 8086b1e:	a802      	add	r0, sp, #8
 8086b20:	f7ff fd13 	bl	808654a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8086b24:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8086b26:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8086b28:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8086b2a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8086b2c:	9204      	str	r2, [sp, #16]
 8086b2e:	68e2      	ldr	r2, [r4, #12]
 8086b30:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 8086b32:	60e3      	str	r3, [r4, #12]
 8086b34:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 8086b38:	9205      	str	r2, [sp, #20]
 8086b3a:	f7ff fe9b 	bl	8086874 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 8086b3e:	4b08      	ldr	r3, [pc, #32]	; (8086b60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8086b40:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 8086b42:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8086b44:	4b07      	ldr	r3, [pc, #28]	; (8086b64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 8086b46:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 8086b48:	a806      	add	r0, sp, #24
 8086b4a:	f7ff fea0 	bl	808688e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 8086b4e:	a802      	add	r0, sp, #8
 8086b50:	f7f9 fc20 	bl	8080394 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8086b54:	2200      	movs	r2, #0
 8086b56:	4629      	mov	r1, r5
 8086b58:	4803      	ldr	r0, [pc, #12]	; (8086b68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 8086b5a:	f7fd fdcd 	bl	80846f8 <application_thread_invoke>
 8086b5e:	e7b7      	b.n	8086ad0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 8086b60:	080869f9 	.word	0x080869f9
 8086b64:	08086c91 	.word	0x08086c91
 8086b68:	0808734d 	.word	0x0808734d

08086b6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8086b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8086b70:	b08a      	sub	sp, #40	; 0x28
 8086b72:	4605      	mov	r5, r0
 8086b74:	460c      	mov	r4, r1
 8086b76:	4617      	mov	r7, r2
 8086b78:	4698      	mov	r8, r3
 8086b7a:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8086b7e:	f7fd fe73 	bl	8084868 <spark_cloud_flag_connected>
 8086b82:	ae07      	add	r6, sp, #28
    if (!connected()) {
 8086b84:	4682      	mov	sl, r0
 8086b86:	bb38      	cbnz	r0, 8086bd8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 8086b88:	f64f 732e 	movw	r3, #65326	; 0xff2e
 8086b8c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8086b8e:	a905      	add	r1, sp, #20
 8086b90:	4630      	mov	r0, r6
 8086b92:	f8ad 3018 	strh.w	r3, [sp, #24]
 8086b96:	f7ff fe6d 	bl	8086874 <_ZN8particle5ErrorC1EOS0_>
 8086b9a:	2014      	movs	r0, #20
 8086b9c:	f7f9 fa8d 	bl	80800ba <_Znwj>
 8086ba0:	4604      	mov	r4, r0
 8086ba2:	b148      	cbz	r0, 8086bb8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 8086ba4:	2302      	movs	r3, #2
 8086ba6:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8086ba8:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8086baa:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8086bae:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 8086bb0:	4631      	mov	r1, r6
 8086bb2:	300c      	adds	r0, #12
 8086bb4:	f7ff fe5e 	bl	8086874 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8086bb8:	4628      	mov	r0, r5
	: __shared_count(__p)
 8086bba:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8086bbc:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 8086bc0:	f7ff ff32 	bl	8086a28 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8086bc4:	4630      	mov	r0, r6
 8086bc6:	f7ff fe62 	bl	808688e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 8086bca:	a805      	add	r0, sp, #20
 8086bcc:	f7ff fe5f 	bl	808688e <_ZN8particle5ErrorD1Ev>
}
 8086bd0:	4628      	mov	r0, r5
 8086bd2:	b00a      	add	sp, #40	; 0x28
 8086bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8086bd8:	230c      	movs	r3, #12
 8086bda:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 8086bde:	2014      	movs	r0, #20
 8086be0:	e9cd aa08 	strd	sl, sl, [sp, #32]
 8086be4:	9307      	str	r3, [sp, #28]
 8086be6:	f7f9 fa68 	bl	80800ba <_Znwj>
 8086bea:	4601      	mov	r1, r0
 8086bec:	b128      	cbz	r0, 8086bfa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8086bee:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 8086bf2:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8086bf6:	f880 a001 	strb.w	sl, [r0, #1]
 8086bfa:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8086bfc:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 8086bfe:	f7ff ff13 	bl	8086a28 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 8086c02:	4b22      	ldr	r3, [pc, #136]	; (8086c8c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 8086c04:	2008      	movs	r0, #8
 8086c06:	9308      	str	r3, [sp, #32]
 8086c08:	f7f9 fa57 	bl	80800ba <_Znwj>
 8086c0c:	4682      	mov	sl, r0
 8086c0e:	b128      	cbz	r0, 8086c1c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8086c10:	9b03      	ldr	r3, [sp, #12]
 8086c12:	a904      	add	r1, sp, #16
 8086c14:	f840 3b04 	str.w	r3, [r0], #4
 8086c18:	f7fe fd08 	bl	808562c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8086c1c:	4642      	mov	r2, r8
 8086c1e:	4639      	mov	r1, r7
 8086c20:	4620      	mov	r0, r4
 8086c22:	9600      	str	r6, [sp, #0]
 8086c24:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 8086c28:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8086c2c:	f7fd fe2c 	bl	8084888 <spark_send_event>
 8086c30:	b9b8      	cbnz	r0, 8086c62 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 8086c32:	9b03      	ldr	r3, [sp, #12]
 8086c34:	785b      	ldrb	r3, [r3, #1]
 8086c36:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8086c3a:	b993      	cbnz	r3, 8086c62 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 8086c3c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 8086c40:	a905      	add	r1, sp, #20
 8086c42:	a803      	add	r0, sp, #12
 8086c44:	9205      	str	r2, [sp, #20]
 8086c46:	f8ad 3018 	strh.w	r3, [sp, #24]
 8086c4a:	f7ff ff11 	bl	8086a70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8086c4e:	a805      	add	r0, sp, #20
 8086c50:	f7ff fe1d 	bl	808688e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 8086c54:	a805      	add	r0, sp, #20
 8086c56:	9909      	ldr	r1, [sp, #36]	; 0x24
 8086c58:	f7ff fea6 	bl	80869a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 8086c5c:	a806      	add	r0, sp, #24
 8086c5e:	f7f9 fbe7 	bl	8080430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8086c62:	9b03      	ldr	r3, [sp, #12]
 8086c64:	a904      	add	r1, sp, #16
 8086c66:	a806      	add	r0, sp, #24
 8086c68:	9305      	str	r3, [sp, #20]
 8086c6a:	f7fe fcdf 	bl	808562c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 8086c6e:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8086c70:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8086c72:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 8086c74:	2300      	movs	r3, #0
	_M_pi = __tmp;
 8086c76:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 8086c78:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 8086c7a:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 8086c7c:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 8086c7e:	f7f9 fbd7 	bl	8080430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8086c82:	a804      	add	r0, sp, #16
 8086c84:	f7f9 fbd4 	bl	8080430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 8086c88:	e7a2      	b.n	8086bd0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 8086c8a:	bf00      	nop
 8086c8c:	08086d55 	.word	0x08086d55

08086c90 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 8086c90:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8086c92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8086c94:	4605      	mov	r5, r0
	  switch (__op)
 8086c96:	d007      	beq.n	8086ca8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 8086c98:	2a03      	cmp	r2, #3
 8086c9a:	d018      	beq.n	8086cce <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 8086c9c:	2a01      	cmp	r2, #1
 8086c9e:	d101      	bne.n	8086ca4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 8086ca0:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8086ca2:	6003      	str	r3, [r0, #0]
	}
 8086ca4:	2000      	movs	r0, #0
 8086ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 8086ca8:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 8086caa:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 8086cac:	f7f9 fa05 	bl	80800ba <_Znwj>
 8086cb0:	4604      	mov	r4, r0
 8086cb2:	b150      	cbz	r0, 8086cca <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      _Bind(const _Bind&) = default;
 8086cb4:	4631      	mov	r1, r6
 8086cb6:	f7ff fecb 	bl	8086a50 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 8086cba:	6930      	ldr	r0, [r6, #16]
 8086cbc:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 8086cc0:	b108      	cbz	r0, 8086cc6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 8086cc2:	f002 f9e3 	bl	808908c <strdup>
        type_(type) {
 8086cc6:	6120      	str	r0, [r4, #16]
 8086cc8:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 8086cca:	602c      	str	r4, [r5, #0]
	}
 8086ccc:	e7ea      	b.n	8086ca4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 8086cce:	6804      	ldr	r4, [r0, #0]
 8086cd0:	2c00      	cmp	r4, #0
 8086cd2:	d0e7      	beq.n	8086ca4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 8086cd4:	f104 0010 	add.w	r0, r4, #16
 8086cd8:	f7ff fdd9 	bl	808688e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 8086cdc:	4620      	mov	r0, r4
 8086cde:	f7f9 fb59 	bl	8080394 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 8086ce2:	2118      	movs	r1, #24
 8086ce4:	4620      	mov	r0, r4
 8086ce6:	f000 ffd4 	bl	8087c92 <_ZdlPvj>
 8086cea:	e7db      	b.n	8086ca4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

08086cec <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 8086cec:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8086cee:	2300      	movs	r3, #0
 8086cf0:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 8086cf2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 8086cf4:	4604      	mov	r4, r0
 8086cf6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 8086cf8:	b12b      	cbz	r3, 8086d06 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8086cfa:	2202      	movs	r2, #2
 8086cfc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8086cfe:	68eb      	ldr	r3, [r5, #12]
 8086d00:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8086d02:	68ab      	ldr	r3, [r5, #8]
 8086d04:	60a3      	str	r3, [r4, #8]
    }
 8086d06:	4620      	mov	r0, r4
 8086d08:	bd38      	pop	{r3, r4, r5, pc}

08086d0a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 8086d0a:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8086d0c:	b570      	push	{r4, r5, r6, lr}
 8086d0e:	4604      	mov	r4, r0
	  switch (__op)
 8086d10:	d007      	beq.n	8086d22 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 8086d12:	2a03      	cmp	r2, #3
 8086d14:	d012      	beq.n	8086d3c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 8086d16:	2a01      	cmp	r2, #1
 8086d18:	d101      	bne.n	8086d1e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 8086d1a:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8086d1c:	6003      	str	r3, [r0, #0]
	}
 8086d1e:	2000      	movs	r0, #0
 8086d20:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 8086d22:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 8086d24:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 8086d26:	f7f9 f9c8 	bl	80800ba <_Znwj>
 8086d2a:	4605      	mov	r5, r0
 8086d2c:	b120      	cbz	r0, 8086d38 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 8086d2e:	4631      	mov	r1, r6
 8086d30:	f7ff ffdc 	bl	8086cec <_ZNSt8functionIFvRKbEEC1ERKS3_>
 8086d34:	7c33      	ldrb	r3, [r6, #16]
 8086d36:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 8086d38:	6025      	str	r5, [r4, #0]
	}
 8086d3a:	e7f0      	b.n	8086d1e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 8086d3c:	6804      	ldr	r4, [r0, #0]
 8086d3e:	2c00      	cmp	r4, #0
 8086d40:	d0ed      	beq.n	8086d1e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 8086d42:	4620      	mov	r0, r4
 8086d44:	f7f9 fb26 	bl	8080394 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 8086d48:	2114      	movs	r1, #20
 8086d4a:	4620      	mov	r0, r4
 8086d4c:	f000 ffa1 	bl	8087c92 <_ZdlPvj>
 8086d50:	e7e5      	b.n	8086d1e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

08086d54 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 8086d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8086d56:	4604      	mov	r4, r0
 8086d58:	b089      	sub	sp, #36	; 0x24
 8086d5a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 8086d5c:	a801      	add	r0, sp, #4
 8086d5e:	4611      	mov	r1, r2
 8086d60:	f7ff fe22 	bl	80869a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 8086d64:	b1a4      	cbz	r4, 8086d90 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 8086d66:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 8086d68:	b11d      	cbz	r5, 8086d72 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 8086d6a:	4628      	mov	r0, r5
 8086d6c:	f002 f98e 	bl	808908c <strdup>
 8086d70:	4605      	mov	r5, r0
 8086d72:	a801      	add	r0, sp, #4
 8086d74:	a903      	add	r1, sp, #12
        type_(type) {
 8086d76:	9503      	str	r5, [sp, #12]
 8086d78:	f8ad 4010 	strh.w	r4, [sp, #16]
 8086d7c:	f7ff fe78 	bl	8086a70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8086d80:	a803      	add	r0, sp, #12
 8086d82:	f7ff fd84 	bl	808688e <_ZN8particle5ErrorD1Ev>
 8086d86:	a802      	add	r0, sp, #8
 8086d88:	f7f9 fb52 	bl	8080430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 8086d8c:	b009      	add	sp, #36	; 0x24
 8086d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 8086d90:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8086d92:	9d01      	ldr	r5, [sp, #4]
 8086d94:	e8d5 2f4f 	ldrexb	r2, [r5]
 8086d98:	2a00      	cmp	r2, #0
 8086d9a:	d103      	bne.n	8086da4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 8086d9c:	e8c5 3f41 	strexb	r1, r3, [r5]
 8086da0:	2900      	cmp	r1, #0
 8086da2:	d1f7      	bne.n	8086d94 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 8086da4:	d1ef      	bne.n	8086d86 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 8086da6:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 8086da8:	f3bf 8f5b 	dmb	ish
 8086dac:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 8086dae:	f3bf 8f5b 	dmb	ish
 8086db2:	1d2b      	adds	r3, r5, #4
 8086db4:	e853 6f00 	ldrex	r6, [r3]
 8086db8:	e843 4200 	strex	r2, r4, [r3]
 8086dbc:	2a00      	cmp	r2, #0
 8086dbe:	d1f9      	bne.n	8086db4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 8086dc0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 8086dc4:	2e00      	cmp	r6, #0
 8086dc6:	d0de      	beq.n	8086d86 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 8086dc8:	4620      	mov	r0, r4
 8086dca:	f7fd fc8d 	bl	80846e8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 8086dce:	4607      	mov	r7, r0
 8086dd0:	b160      	cbz	r0, 8086dec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8086dd2:	4630      	mov	r0, r6
 8086dd4:	f105 010c 	add.w	r1, r5, #12
 8086dd8:	f7ff fe15 	bl	8086a06 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 8086ddc:	4630      	mov	r0, r6
 8086dde:	f7f9 fad9 	bl	8080394 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 8086de2:	2110      	movs	r1, #16
 8086de4:	4630      	mov	r0, r6
 8086de6:	f000 ff54 	bl	8087c92 <_ZdlPvj>
 8086dea:	e7cc      	b.n	8086d86 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8086dec:	4631      	mov	r1, r6
 8086dee:	a803      	add	r0, sp, #12
 8086df0:	f7ff ff7c 	bl	8086cec <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8086df4:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8086df6:	2010      	movs	r0, #16
 8086df8:	f88d 301c 	strb.w	r3, [sp, #28]
 8086dfc:	f7f9 f95d 	bl	80800ba <_Znwj>
 8086e00:	4605      	mov	r5, r0
 8086e02:	b1d0      	cbz	r0, 8086e3a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 8086e04:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8086e06:	2014      	movs	r0, #20
 8086e08:	f7f9 f957 	bl	80800ba <_Znwj>
 8086e0c:	4604      	mov	r4, r0
 8086e0e:	b178      	cbz	r0, 8086e30 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 8086e10:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 8086e12:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 8086e14:	a803      	add	r0, sp, #12
 8086e16:	f7ff fb98 	bl	808654a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8086e1a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8086e1c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8086e1e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8086e20:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 8086e22:	9205      	str	r2, [sp, #20]
 8086e24:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8086e26:	60e3      	str	r3, [r4, #12]
 8086e28:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 8086e2c:	9206      	str	r2, [sp, #24]
 8086e2e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 8086e30:	4b06      	ldr	r3, [pc, #24]	; (8086e4c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8086e32:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 8086e34:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8086e36:	4b06      	ldr	r3, [pc, #24]	; (8086e50 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 8086e38:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 8086e3a:	a803      	add	r0, sp, #12
 8086e3c:	f7f9 faaa 	bl	8080394 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8086e40:	2200      	movs	r2, #0
 8086e42:	4629      	mov	r1, r5
 8086e44:	4803      	ldr	r0, [pc, #12]	; (8086e54 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 8086e46:	f7fd fc57 	bl	80846f8 <application_thread_invoke>
 8086e4a:	e7c7      	b.n	8086ddc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 8086e4c:	08086a19 	.word	0x08086a19
 8086e50:	08086d0b 	.word	0x08086d0b
 8086e54:	0808734d 	.word	0x0808734d

08086e58 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8086e58:	4770      	bx	lr

08086e5a <_ZN9IPAddressD0Ev>:
 8086e5a:	b510      	push	{r4, lr}
 8086e5c:	4604      	mov	r4, r0
 8086e5e:	2108      	movs	r1, #8
 8086e60:	f000 ff17 	bl	8087c92 <_ZdlPvj>
 8086e64:	4620      	mov	r0, r4
 8086e66:	bd10      	pop	{r4, pc}

08086e68 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8086e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8086e6a:	460e      	mov	r6, r1
 8086e6c:	2400      	movs	r4, #0
 8086e6e:	f100 0708 	add.w	r7, r0, #8
 8086e72:	1d05      	adds	r5, r0, #4
        return printNumber(val, base) + t;
 8086e74:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 8086e78:	220a      	movs	r2, #10
 8086e7a:	4630      	mov	r0, r6
 8086e7c:	f7fe f929 	bl	80850d2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8086e80:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8086e82:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 8086e84:	d101      	bne.n	8086e8a <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 8086e86:	4620      	mov	r0, r4
 8086e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 8086e8a:	2c00      	cmp	r4, #0
 8086e8c:	d0f2      	beq.n	8086e74 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8086e8e:	212e      	movs	r1, #46	; 0x2e
 8086e90:	4630      	mov	r0, r6
 8086e92:	f7fe f905 	bl	80850a0 <_ZN5Print5printEc>
 8086e96:	4404      	add	r4, r0
 8086e98:	e7ec      	b.n	8086e74 <_ZNK9IPAddress7printToER5Print+0xc>
	...

08086e9c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 8086e9c:	4a02      	ldr	r2, [pc, #8]	; (8086ea8 <_ZN9IPAddressC1Ev+0xc>)
 8086e9e:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8086ea0:	2200      	movs	r2, #0
 8086ea2:	6042      	str	r2, [r0, #4]
}
 8086ea4:	4770      	bx	lr
 8086ea6:	bf00      	nop
 8086ea8:	08089e90 	.word	0x08089e90

08086eac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 8086eac:	4a02      	ldr	r2, [pc, #8]	; (8086eb8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 8086eae:	6002      	str	r2, [r0, #0]
    memcpy(&this->address, &address, sizeof(address));
 8086eb0:	680a      	ldr	r2, [r1, #0]
 8086eb2:	6042      	str	r2, [r0, #4]
}
 8086eb4:	4770      	bx	lr
 8086eb6:	bf00      	nop
 8086eb8:	08089e90 	.word	0x08089e90

08086ebc <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 8086ebc:	4a01      	ldr	r2, [pc, #4]	; (8086ec4 <_ZN9IPAddressC1Em+0x8>)
    address.ipv4 = ipv4;
 8086ebe:	e9c0 2100 	strd	r2, r1, [r0]
}
 8086ec2:	4770      	bx	lr
 8086ec4:	08089e90 	.word	0x08089e90

08086ec8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 8086ec8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8086eca:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8086ece:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8086ed2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8086ed6:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 8086eda:	6044      	str	r4, [r0, #4]
}
 8086edc:	bd10      	pop	{r4, pc}
	...

08086ee0 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8086ee0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8086ee2:	4d04      	ldr	r5, [pc, #16]	; (8086ef4 <_ZN9IPAddressC1Ehhhh+0x14>)
 8086ee4:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 8086ee6:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8086eea:	9500      	str	r5, [sp, #0]
 8086eec:	f7ff ffec 	bl	8086ec8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8086ef0:	b003      	add	sp, #12
 8086ef2:	bd30      	pop	{r4, r5, pc}
 8086ef4:	08089e90 	.word	0x08089e90

08086ef8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8086ef8:	7441      	strb	r1, [r0, #17]
}
 8086efa:	4770      	bx	lr

08086efc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 8086efc:	4770      	bx	lr

08086efe <_ZN9USBSerial4readEv>:
{
 8086efe:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 8086f00:	2100      	movs	r1, #0
 8086f02:	7c00      	ldrb	r0, [r0, #16]
 8086f04:	f7fd fb88 	bl	8084618 <HAL_USB_USART_Receive_Data>
}
 8086f08:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8086f0c:	bd08      	pop	{r3, pc}

08086f0e <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 8086f0e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 8086f10:	2101      	movs	r1, #1
 8086f12:	7c00      	ldrb	r0, [r0, #16]
 8086f14:	f7fd fb80 	bl	8084618 <HAL_USB_USART_Receive_Data>
}
 8086f18:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8086f1c:	bd08      	pop	{r3, pc}

08086f1e <_ZN9USBSerial17availableForWriteEv>:
{
 8086f1e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 8086f20:	7c00      	ldrb	r0, [r0, #16]
 8086f22:	f7fd fb71 	bl	8084608 <HAL_USB_USART_Available_Data_For_Write>
}
 8086f26:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8086f2a:	bd08      	pop	{r3, pc}

08086f2c <_ZN9USBSerial9availableEv>:
{
 8086f2c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 8086f2e:	7c00      	ldrb	r0, [r0, #16]
 8086f30:	f7fd fb62 	bl	80845f8 <HAL_USB_USART_Available_Data>
}
 8086f34:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8086f38:	bd08      	pop	{r3, pc}

08086f3a <_ZN9USBSerial5writeEh>:
{
 8086f3a:	b538      	push	{r3, r4, r5, lr}
 8086f3c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8086f3e:	7c00      	ldrb	r0, [r0, #16]
{
 8086f40:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8086f42:	f7fd fb61 	bl	8084608 <HAL_USB_USART_Available_Data_For_Write>
 8086f46:	2800      	cmp	r0, #0
 8086f48:	dc01      	bgt.n	8086f4e <_ZN9USBSerial5writeEh+0x14>
 8086f4a:	7c60      	ldrb	r0, [r4, #17]
 8086f4c:	b128      	cbz	r0, 8086f5a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 8086f4e:	4629      	mov	r1, r5
 8086f50:	7c20      	ldrb	r0, [r4, #16]
 8086f52:	f7fd fb69 	bl	8084628 <HAL_USB_USART_Send_Data>
 8086f56:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 8086f5a:	bd38      	pop	{r3, r4, r5, pc}

08086f5c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 8086f5c:	7c00      	ldrb	r0, [r0, #16]
 8086f5e:	f7fd bb6b 	b.w	8084638 <HAL_USB_USART_Flush_Data>

08086f62 <_ZN9USBSerialD0Ev>:
 8086f62:	b510      	push	{r4, lr}
 8086f64:	4604      	mov	r4, r0
 8086f66:	2114      	movs	r1, #20
 8086f68:	f000 fe93 	bl	8087c92 <_ZdlPvj>
 8086f6c:	4620      	mov	r0, r4
 8086f6e:	bd10      	pop	{r4, pc}

08086f70 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8086f70:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8086f72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8086f76:	4604      	mov	r4, r0
 8086f78:	4608      	mov	r0, r1
 8086f7a:	2100      	movs	r1, #0
 8086f7c:	e9c4 1301 	strd	r1, r3, [r4, #4]
 8086f80:	4b04      	ldr	r3, [pc, #16]	; (8086f94 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 8086f82:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8086f84:	6023      	str	r3, [r4, #0]
  _blocking = true;
 8086f86:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 8086f88:	4611      	mov	r1, r2
  _blocking = true;
 8086f8a:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 8086f8c:	f7fd fb1c 	bl	80845c8 <HAL_USB_USART_Init>
}
 8086f90:	4620      	mov	r0, r4
 8086f92:	bd10      	pop	{r4, pc}
 8086f94:	08089ea4 	.word	0x08089ea4

08086f98 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 8086f98:	2200      	movs	r2, #0
 8086f9a:	7c00      	ldrb	r0, [r0, #16]
 8086f9c:	f7fd bb1c 	b.w	80845d8 <HAL_USB_USART_Begin>

08086fa0 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 8086fa0:	7c00      	ldrb	r0, [r0, #16]
 8086fa2:	f7fd bb21 	b.w	80845e8 <HAL_USB_USART_End>

08086fa6 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 8086fa6:	b510      	push	{r4, lr}
 8086fa8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8086faa:	2214      	movs	r2, #20
 8086fac:	2100      	movs	r1, #0
 8086fae:	f002 f817 	bl	8088fe0 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8086fb2:	4620      	mov	r0, r4
 8086fb4:	bd10      	pop	{r4, pc}
	...

08086fb8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 8086fb8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8086fba:	4d0f      	ldr	r5, [pc, #60]	; (8086ff8 <_Z16_fetch_usbserialv+0x40>)
{
 8086fbc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 8086fbe:	a801      	add	r0, sp, #4
 8086fc0:	f7ff fff1 	bl	8086fa6 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8086fc4:	7829      	ldrb	r1, [r5, #0]
 8086fc6:	f3bf 8f5b 	dmb	ish
 8086fca:	f011 0401 	ands.w	r4, r1, #1
 8086fce:	d110      	bne.n	8086ff2 <_Z16_fetch_usbserialv+0x3a>
 8086fd0:	4628      	mov	r0, r5
 8086fd2:	f7f9 f883 	bl	80800dc <__cxa_guard_acquire>
 8086fd6:	b160      	cbz	r0, 8086ff2 <_Z16_fetch_usbserialv+0x3a>
 8086fd8:	4621      	mov	r1, r4
 8086fda:	aa01      	add	r2, sp, #4
 8086fdc:	4807      	ldr	r0, [pc, #28]	; (8086ffc <_Z16_fetch_usbserialv+0x44>)
 8086fde:	f7ff ffc7 	bl	8086f70 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8086fe2:	4628      	mov	r0, r5
 8086fe4:	f7f9 f87f 	bl	80800e6 <__cxa_guard_release>
 8086fe8:	4a05      	ldr	r2, [pc, #20]	; (8087000 <_Z16_fetch_usbserialv+0x48>)
 8086fea:	4906      	ldr	r1, [pc, #24]	; (8087004 <_Z16_fetch_usbserialv+0x4c>)
 8086fec:	4803      	ldr	r0, [pc, #12]	; (8086ffc <_Z16_fetch_usbserialv+0x44>)
 8086fee:	f000 fe4b 	bl	8087c88 <__aeabi_atexit>
	return _usbserial;
}
 8086ff2:	4802      	ldr	r0, [pc, #8]	; (8086ffc <_Z16_fetch_usbserialv+0x44>)
 8086ff4:	b007      	add	sp, #28
 8086ff6:	bd30      	pop	{r4, r5, pc}
 8086ff8:	20000410 	.word	0x20000410
 8086ffc:	20000418 	.word	0x20000418
 8087000:	20000130 	.word	0x20000130
 8087004:	08086efd 	.word	0x08086efd

08087008 <_Z23acquireUSBSerial1Bufferv>:
 8087008:	b510      	push	{r4, lr}
 808700a:	4604      	mov	r4, r0
 808700c:	2214      	movs	r2, #20
 808700e:	2100      	movs	r1, #0
 8087010:	f001 ffe6 	bl	8088fe0 <memset>
 8087014:	4620      	mov	r0, r4
 8087016:	bd10      	pop	{r4, pc}

08087018 <_Z17_fetch_usbserial1v>:

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 8087018:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 808701a:	4c0f      	ldr	r4, [pc, #60]	; (8087058 <_Z17_fetch_usbserial1v+0x40>)
{
 808701c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 808701e:	a801      	add	r0, sp, #4
 8087020:	f7ff fff2 	bl	8087008 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8087024:	7823      	ldrb	r3, [r4, #0]
 8087026:	f3bf 8f5b 	dmb	ish
 808702a:	07db      	lsls	r3, r3, #31
 808702c:	d410      	bmi.n	8087050 <_Z17_fetch_usbserial1v+0x38>
 808702e:	4620      	mov	r0, r4
 8087030:	f7f9 f854 	bl	80800dc <__cxa_guard_acquire>
 8087034:	b160      	cbz	r0, 8087050 <_Z17_fetch_usbserial1v+0x38>
 8087036:	2101      	movs	r1, #1
 8087038:	aa01      	add	r2, sp, #4
 808703a:	4808      	ldr	r0, [pc, #32]	; (808705c <_Z17_fetch_usbserial1v+0x44>)
 808703c:	f7ff ff98 	bl	8086f70 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8087040:	4620      	mov	r0, r4
 8087042:	f7f9 f850 	bl	80800e6 <__cxa_guard_release>
 8087046:	4a06      	ldr	r2, [pc, #24]	; (8087060 <_Z17_fetch_usbserial1v+0x48>)
 8087048:	4906      	ldr	r1, [pc, #24]	; (8087064 <_Z17_fetch_usbserial1v+0x4c>)
 808704a:	4804      	ldr	r0, [pc, #16]	; (808705c <_Z17_fetch_usbserial1v+0x44>)
 808704c:	f000 fe1c 	bl	8087c88 <__aeabi_atexit>
  return _usbserial1;
}
 8087050:	4802      	ldr	r0, [pc, #8]	; (808705c <_Z17_fetch_usbserial1v+0x44>)
 8087052:	b006      	add	sp, #24
 8087054:	bd10      	pop	{r4, pc}
 8087056:	bf00      	nop
 8087058:	20000414 	.word	0x20000414
 808705c:	2000042c 	.word	0x2000042c
 8087060:	20000130 	.word	0x20000130
 8087064:	08086efd 	.word	0x08086efd

08087068 <_Z29call_wiring_interrupt_handlerPv>:
      if (_M_empty())
 8087068:	6882      	ldr	r2, [r0, #8]
    delete handlers[pin];
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
}

void call_wiring_interrupt_handler(void* data)
{
 808706a:	b510      	push	{r4, lr}
 808706c:	b90a      	cbnz	r2, 8087072 <_Z29call_wiring_interrupt_handlerPv+0xa>
	__throw_bad_function_call();
 808706e:	f000 fe16 	bl	8087c9e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8087072:	68c3      	ldr	r3, [r0, #12]
    wiring_interrupt_handler_t* handler = (wiring_interrupt_handler_t*)data;
    (*handler)();
}
 8087074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8087078:	4718      	bx	r3

0808707a <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
 808707a:	f7fd b8c5 	b.w	8084208 <HAL_Interrupts_Disable_All>

0808707e <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
 808707e:	f7fd b8bb 	b.w	80841f8 <HAL_Interrupts_Enable_All>

08087082 <_ZNSt8functionIFvvEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 8087082:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8087084:	2300      	movs	r3, #0
 8087086:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 8087088:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 808708a:	4604      	mov	r4, r0
 808708c:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 808708e:	b12b      	cbz	r3, 808709c <_ZNSt8functionIFvvEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8087090:	2202      	movs	r2, #2
 8087092:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8087094:	68eb      	ldr	r3, [r5, #12]
 8087096:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8087098:	68ab      	ldr	r3, [r5, #8]
 808709a:	60a3      	str	r3, [r4, #8]
    }
 808709c:	4620      	mov	r0, r4
 808709e:	bd38      	pop	{r3, r4, r5, pc}

080870a0 <_Z16allocate_handlertRSt8functionIFvvEE>:
{
 80870a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    delete handlers[pin];
 80870a2:	4d0c      	ldr	r5, [pc, #48]	; (80870d4 <_Z16allocate_handlertRSt8functionIFvvEE+0x34>)
{
 80870a4:	4606      	mov	r6, r0
    delete handlers[pin];
 80870a6:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
{
 80870aa:	460f      	mov	r7, r1
    delete handlers[pin];
 80870ac:	b134      	cbz	r4, 80870bc <_Z16allocate_handlertRSt8functionIFvvEE+0x1c>
    class function<_Res(_ArgTypes...)>
 80870ae:	4620      	mov	r0, r4
 80870b0:	f7f9 f970 	bl	8080394 <_ZNSt14_Function_baseD1Ev>
 80870b4:	2110      	movs	r1, #16
 80870b6:	4620      	mov	r0, r4
 80870b8:	f000 fdeb 	bl	8087c92 <_ZdlPvj>
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
 80870bc:	2010      	movs	r0, #16
 80870be:	f7f8 fffc 	bl	80800ba <_Znwj>
 80870c2:	4604      	mov	r4, r0
 80870c4:	b110      	cbz	r0, 80870cc <_Z16allocate_handlertRSt8functionIFvvEE+0x2c>
 80870c6:	4639      	mov	r1, r7
 80870c8:	f7ff ffdb 	bl	8087082 <_ZNSt8functionIFvvEEC1ERKS1_>
}
 80870cc:	4620      	mov	r0, r4
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
 80870ce:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
}
 80870d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80870d4:	20000440 	.word	0x20000440

080870d8 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>:
{
 80870d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80870da:	460c      	mov	r4, r1
 80870dc:	4605      	mov	r5, r0
 80870de:	b085      	sub	sp, #20
 80870e0:	4617      	mov	r7, r2
 80870e2:	461e      	mov	r6, r3
    HAL_Interrupts_Detach(pin);
 80870e4:	f7fd f880 	bl	80841e8 <HAL_Interrupts_Detach>
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
 80870e8:	4621      	mov	r1, r4
 80870ea:	4628      	mov	r0, r5
 80870ec:	f7ff ffd8 	bl	80870a0 <_Z16allocate_handlertRSt8functionIFvvEE>
    if (handler) {
 80870f0:	4604      	mov	r4, r0
 80870f2:	b1e8      	cbz	r0, 8087130 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x58>
        HAL_InterruptExtraConfiguration extra = {0};
 80870f4:	2100      	movs	r1, #0
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80870f6:	2304      	movs	r3, #4
  if (priority >= 0) {
 80870f8:	428e      	cmp	r6, r1
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80870fa:	f88d 300c 	strb.w	r3, [sp, #12]
    extra.IRQChannelSubPriority = subpriority;
 80870fe:	bfa8      	it	ge
 8087100:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
        HAL_InterruptExtraConfiguration extra = {0};
 8087104:	f8ad 100d 	strh.w	r1, [sp, #13]
 8087108:	f88d 100f 	strb.w	r1, [sp, #15]
    return &extra;
 808710c:	bfa4      	itt	ge
 808710e:	a903      	addge	r1, sp, #12
    extra.IRQChannelSubPriority = subpriority;
 8087110:	f88d 300e 	strbge.w	r3, [sp, #14]
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
 8087114:	4602      	mov	r2, r0
 8087116:	9100      	str	r1, [sp, #0]
 8087118:	463b      	mov	r3, r7
 808711a:	4628      	mov	r0, r5
 808711c:	4906      	ldr	r1, [pc, #24]	; (8087138 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x60>)
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 808711e:	bfa8      	it	ge
 8087120:	f88d 600d 	strbge.w	r6, [sp, #13]
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
 8087124:	f7fd f858 	bl	80841d8 <HAL_Interrupts_Attach>
 8087128:	b110      	cbz	r0, 8087130 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x58>
            return false;
 808712a:	2000      	movs	r0, #0
}
 808712c:	b005      	add	sp, #20
 808712e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return handler!=NULL;
 8087130:	1e20      	subs	r0, r4, #0
 8087132:	bf18      	it	ne
 8087134:	2001      	movne	r0, #1
 8087136:	e7f9      	b.n	808712c <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x54>
 8087138:	08087069 	.word	0x08087069

0808713c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 808713c:	2200      	movs	r2, #0
 808713e:	6840      	ldr	r0, [r0, #4]
 8087140:	4611      	mov	r1, r2
 8087142:	f7fd bb29 	b.w	8084798 <network_ready>

08087146 <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8087146:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        HAL_IPAddress ip = {0};
 8087148:	2600      	movs	r6, #0
    IPAddress resolve(const char* name)
 808714a:	b085      	sub	sp, #20
 808714c:	4604      	mov	r4, r0
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808714e:	4610      	mov	r0, r2
    IPAddress resolve(const char* name)
 8087150:	460f      	mov	r7, r1
 8087152:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 8087154:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8087156:	f001 ffb4 	bl	80890c2 <strlen>
 808715a:	687b      	ldr	r3, [r7, #4]
 808715c:	b281      	uxth	r1, r0
 808715e:	9600      	str	r6, [sp, #0]
 8087160:	4628      	mov	r0, r5
 8087162:	aa03      	add	r2, sp, #12
 8087164:	f7fd fa20 	bl	80845a8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8087168:	b130      	cbz	r0, 8087178 <_ZN5spark13CellularClass7resolveEPKc+0x32>
 808716a:	4631      	mov	r1, r6
 808716c:	4620      	mov	r0, r4
 808716e:	f7ff fea5 	bl	8086ebc <_ZN9IPAddressC1Em>
    }
 8087172:	4620      	mov	r0, r4
 8087174:	b005      	add	sp, #20
 8087176:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8087178:	4620      	mov	r0, r4
 808717a:	a903      	add	r1, sp, #12
 808717c:	f7ff fe96 	bl	8086eac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 8087180:	e7f7      	b.n	8087172 <_ZN5spark13CellularClass7resolveEPKc+0x2c>

08087182 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 8087182:	2200      	movs	r2, #0
 8087184:	6840      	ldr	r0, [r0, #4]
 8087186:	4611      	mov	r1, r2
 8087188:	f7fd bb26 	b.w	80847d8 <network_listening>

0808718c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 808718c:	2200      	movs	r2, #0
 808718e:	6840      	ldr	r0, [r0, #4]
 8087190:	4611      	mov	r1, r2
 8087192:	f7fd bb31 	b.w	80847f8 <network_get_listen_timeout>

08087196 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 8087196:	2200      	movs	r2, #0
 8087198:	6840      	ldr	r0, [r0, #4]
 808719a:	f7fd bb25 	b.w	80847e8 <network_set_listen_timeout>

0808719e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 808719e:	2200      	movs	r2, #0
 80871a0:	6840      	ldr	r0, [r0, #4]
 80871a2:	f081 0101 	eor.w	r1, r1, #1
 80871a6:	f7fd bb0f 	b.w	80847c8 <network_listen>

080871aa <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80871aa:	2300      	movs	r3, #0
 80871ac:	6840      	ldr	r0, [r0, #4]
 80871ae:	461a      	mov	r2, r3
 80871b0:	4619      	mov	r1, r3
 80871b2:	f7fd bb01 	b.w	80847b8 <network_off>

080871b6 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80871b6:	2300      	movs	r3, #0
 80871b8:	6840      	ldr	r0, [r0, #4]
 80871ba:	461a      	mov	r2, r3
 80871bc:	4619      	mov	r1, r3
 80871be:	f7fd baf3 	b.w	80847a8 <network_on>

080871c2 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80871c2:	2200      	movs	r2, #0
 80871c4:	6840      	ldr	r0, [r0, #4]
 80871c6:	4611      	mov	r1, r2
 80871c8:	f7fd bad6 	b.w	8084778 <network_connecting>

080871cc <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80871cc:	2200      	movs	r2, #0
 80871ce:	2102      	movs	r1, #2
 80871d0:	6840      	ldr	r0, [r0, #4]
 80871d2:	f7fd bad9 	b.w	8084788 <network_disconnect>

080871d6 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80871d6:	2300      	movs	r3, #0
 80871d8:	6840      	ldr	r0, [r0, #4]
 80871da:	461a      	mov	r2, r3
 80871dc:	f7fd bac4 	b.w	8084768 <network_connect>

080871e0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 80871e0:	b510      	push	{r4, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 80871e2:	2428      	movs	r4, #40	; 0x28
 80871e4:	4b07      	ldr	r3, [pc, #28]	; (8087204 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 80871e6:	4622      	mov	r2, r4
 80871e8:	4618      	mov	r0, r3
 80871ea:	2100      	movs	r1, #0
 80871ec:	f001 fef8 	bl	8088fe0 <memset>
        cid = -1;
 80871f0:	f04f 32ff 	mov.w	r2, #4294967295
 80871f4:	6042      	str	r2, [r0, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80871f6:	2204      	movs	r2, #4
 80871f8:	4b03      	ldr	r3, [pc, #12]	; (8087208 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
 80871fa:	8004      	strh	r4, [r0, #0]
 80871fc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 80871fe:	4a03      	ldr	r2, [pc, #12]	; (808720c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
 8087200:	601a      	str	r2, [r3, #0]
 8087202:	bd10      	pop	{r4, pc}
 8087204:	20000504 	.word	0x20000504
 8087208:	200004fc 	.word	0x200004fc
 808720c:	08089ed4 	.word	0x08089ed4

08087210 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 8087210:	4770      	bx	lr

08087212 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8087212:	7441      	strb	r1, [r0, #17]
}
 8087214:	4770      	bx	lr

08087216 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 8087216:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 8087218:	7c00      	ldrb	r0, [r0, #16]
 808721a:	f7fd f90d 	bl	8084438 <hal_usart_available_data_for_write>
}
 808721e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8087222:	bd08      	pop	{r3, pc}

08087224 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 8087224:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 8087226:	7c00      	ldrb	r0, [r0, #16]
 8087228:	f7fd f8de 	bl	80843e8 <hal_usart_available>
}
 808722c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8087230:	bd08      	pop	{r3, pc}

08087232 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 8087232:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 8087234:	7c00      	ldrb	r0, [r0, #16]
 8087236:	f7fd f8e7 	bl	8084408 <hal_usart_peek>
}
 808723a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 808723e:	bd08      	pop	{r3, pc}

08087240 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 8087240:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 8087242:	7c00      	ldrb	r0, [r0, #16]
 8087244:	f7fd f8d8 	bl	80843f8 <hal_usart_read>
}
 8087248:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 808724c:	bd08      	pop	{r3, pc}

0808724e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 808724e:	7c00      	ldrb	r0, [r0, #16]
 8087250:	f7fd b8e2 	b.w	8084418 <hal_usart_flush>

08087254 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 8087254:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8087256:	7c46      	ldrb	r6, [r0, #17]
{
 8087258:	4604      	mov	r4, r0
 808725a:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 808725c:	b12e      	cbz	r6, 808726a <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 808725e:	4629      	mov	r1, r5
 8087260:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 8087262:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 8087266:	f7fd b8b7 	b.w	80843d8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 808726a:	7c00      	ldrb	r0, [r0, #16]
 808726c:	f7fd f8e4 	bl	8084438 <hal_usart_available_data_for_write>
 8087270:	2800      	cmp	r0, #0
 8087272:	dcf4      	bgt.n	808725e <_ZN11USARTSerial5writeEh+0xa>
}
 8087274:	4630      	mov	r0, r6
 8087276:	bd70      	pop	{r4, r5, r6, pc}

08087278 <_ZN11USARTSerialD0Ev>:
 8087278:	b510      	push	{r4, lr}
 808727a:	4604      	mov	r4, r0
 808727c:	2114      	movs	r1, #20
 808727e:	f000 fd08 	bl	8087c92 <_ZdlPvj>
 8087282:	4620      	mov	r0, r4
 8087284:	bd10      	pop	{r4, pc}
	...

08087288 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 8087288:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 808728c:	b510      	push	{r4, lr}
 808728e:	4604      	mov	r4, r0
 8087290:	4608      	mov	r0, r1
 8087292:	4611      	mov	r1, r2
 8087294:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8087298:	e9c4 c201 	strd	ip, r2, [r4, #4]
 808729c:	4a04      	ldr	r2, [pc, #16]	; (80872b0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 808729e:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80872a0:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80872a2:	2201      	movs	r2, #1
 80872a4:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80872a6:	461a      	mov	r2, r3
 80872a8:	f7fd f886 	bl	80843b8 <hal_usart_init>
}
 80872ac:	4620      	mov	r0, r4
 80872ae:	bd10      	pop	{r4, pc}
 80872b0:	08089f10 	.word	0x08089f10

080872b4 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 80872b4:	2300      	movs	r3, #0
 80872b6:	7c00      	ldrb	r0, [r0, #16]
 80872b8:	f7fd b8c6 	b.w	8084448 <hal_usart_begin_config>

080872bc <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 80872bc:	2200      	movs	r2, #0
 80872be:	f7ff bff9 	b.w	80872b4 <_ZN11USARTSerial5beginEmm>

080872c2 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 80872c2:	7c00      	ldrb	r0, [r0, #16]
 80872c4:	f7fd b880 	b.w	80843c8 <hal_usart_end>

080872c8 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80872c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80872ca:	4c1a      	ldr	r4, [pc, #104]	; (8087334 <_Z22__fetch_global_Serial1v+0x6c>)
 80872cc:	6826      	ldr	r6, [r4, #0]
 80872ce:	b94e      	cbnz	r6, 80872e4 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
 80872d0:	2084      	movs	r0, #132	; 0x84
 80872d2:	f7f8 fef2 	bl	80800ba <_Znwj>
 80872d6:	4605      	mov	r5, r0
 80872d8:	b118      	cbz	r0, 80872e2 <_Z22__fetch_global_Serial1v+0x1a>
 80872da:	2284      	movs	r2, #132	; 0x84
 80872dc:	4631      	mov	r1, r6
 80872de:	f001 fe7f 	bl	8088fe0 <memset>
 80872e2:	6025      	str	r5, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80872e4:	4d14      	ldr	r5, [pc, #80]	; (8087338 <_Z22__fetch_global_Serial1v+0x70>)
 80872e6:	682f      	ldr	r7, [r5, #0]
 80872e8:	b94f      	cbnz	r7, 80872fe <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
 80872ea:	2084      	movs	r0, #132	; 0x84
 80872ec:	f7f8 fee5 	bl	80800ba <_Znwj>
 80872f0:	4606      	mov	r6, r0
 80872f2:	b118      	cbz	r0, 80872fc <_Z22__fetch_global_Serial1v+0x34>
 80872f4:	2284      	movs	r2, #132	; 0x84
 80872f6:	4639      	mov	r1, r7
 80872f8:	f001 fe72 	bl	8088fe0 <memset>
 80872fc:	602e      	str	r6, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80872fe:	4f0f      	ldr	r7, [pc, #60]	; (808733c <_Z22__fetch_global_Serial1v+0x74>)
 8087300:	7839      	ldrb	r1, [r7, #0]
 8087302:	f3bf 8f5b 	dmb	ish
 8087306:	f011 0601 	ands.w	r6, r1, #1
 808730a:	d111      	bne.n	8087330 <_Z22__fetch_global_Serial1v+0x68>
 808730c:	4638      	mov	r0, r7
 808730e:	f7f8 fee5 	bl	80800dc <__cxa_guard_acquire>
 8087312:	b168      	cbz	r0, 8087330 <_Z22__fetch_global_Serial1v+0x68>
 8087314:	4631      	mov	r1, r6
 8087316:	6822      	ldr	r2, [r4, #0]
 8087318:	682b      	ldr	r3, [r5, #0]
 808731a:	4809      	ldr	r0, [pc, #36]	; (8087340 <_Z22__fetch_global_Serial1v+0x78>)
 808731c:	f7ff ffb4 	bl	8087288 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 8087320:	4638      	mov	r0, r7
 8087322:	f7f8 fee0 	bl	80800e6 <__cxa_guard_release>
 8087326:	4a07      	ldr	r2, [pc, #28]	; (8087344 <_Z22__fetch_global_Serial1v+0x7c>)
 8087328:	4907      	ldr	r1, [pc, #28]	; (8087348 <_Z22__fetch_global_Serial1v+0x80>)
 808732a:	4805      	ldr	r0, [pc, #20]	; (8087340 <_Z22__fetch_global_Serial1v+0x78>)
 808732c:	f000 fcac 	bl	8087c88 <__aeabi_atexit>
#endif
	return serial1;
}
 8087330:	4803      	ldr	r0, [pc, #12]	; (8087340 <_Z22__fetch_global_Serial1v+0x78>)
 8087332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8087334:	20000530 	.word	0x20000530
 8087338:	20000534 	.word	0x20000534
 808733c:	2000052c 	.word	0x2000052c
 8087340:	20000538 	.word	0x20000538
 8087344:	20000130 	.word	0x20000130
 8087348:	08087211 	.word	0x08087211

0808734c <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 808734c:	b510      	push	{r4, lr}
      if (_M_empty())
 808734e:	6883      	ldr	r3, [r0, #8]
 8087350:	4604      	mov	r4, r0
 8087352:	b90b      	cbnz	r3, 8087358 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 8087354:	f000 fca3 	bl	8087c9e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8087358:	68c3      	ldr	r3, [r0, #12]
 808735a:	4798      	blx	r3
      if (_M_manager)
 808735c:	68a3      	ldr	r3, [r4, #8]
 808735e:	b11b      	cbz	r3, 8087368 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8087360:	2203      	movs	r2, #3
 8087362:	4621      	mov	r1, r4
 8087364:	4620      	mov	r0, r4
 8087366:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8087368:	4620      	mov	r0, r4
}
 808736a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 808736e:	2110      	movs	r1, #16
 8087370:	f000 bc8f 	b.w	8087c92 <_ZdlPvj>

08087374 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 8087374:	4770      	bx	lr

08087376 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8087376:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8087378:	4606      	mov	r6, r0
 808737a:	4615      	mov	r5, r2
 808737c:	460c      	mov	r4, r1
 808737e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8087380:	42bc      	cmp	r4, r7
 8087382:	d006      	beq.n	8087392 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 8087384:	6833      	ldr	r3, [r6, #0]
 8087386:	4630      	mov	r0, r6
 8087388:	689b      	ldr	r3, [r3, #8]
 808738a:	f814 1b01 	ldrb.w	r1, [r4], #1
 808738e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 8087390:	e7f6      	b.n	8087380 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 8087392:	4628      	mov	r0, r5
 8087394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08087396 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 8087396:	2200      	movs	r2, #0
 8087398:	7c00      	ldrb	r0, [r0, #16]
 808739a:	f7fd b875 	b.w	8084488 <hal_i2c_write>

0808739e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 808739e:	2100      	movs	r1, #0
 80873a0:	7c00      	ldrb	r0, [r0, #16]
 80873a2:	f7fd b879 	b.w	8084498 <hal_i2c_available>

080873a6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80873a6:	2100      	movs	r1, #0
 80873a8:	7c00      	ldrb	r0, [r0, #16]
 80873aa:	f7fd b87d 	b.w	80844a8 <hal_i2c_read>

080873ae <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80873ae:	2100      	movs	r1, #0
 80873b0:	7c00      	ldrb	r0, [r0, #16]
 80873b2:	f7fd b881 	b.w	80844b8 <hal_i2c_peek>

080873b6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80873b6:	2100      	movs	r1, #0
 80873b8:	7c00      	ldrb	r0, [r0, #16]
 80873ba:	f7fd b885 	b.w	80844c8 <hal_i2c_flush>

080873be <_ZN7TwoWireD0Ev>:
 80873be:	b510      	push	{r4, lr}
 80873c0:	4604      	mov	r4, r0
 80873c2:	2114      	movs	r1, #20
 80873c4:	f000 fc65 	bl	8087c92 <_ZdlPvj>
 80873c8:	4620      	mov	r0, r4
 80873ca:	bd10      	pop	{r4, pc}

080873cc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80873cc:	b510      	push	{r4, lr}
 80873ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80873d2:	4604      	mov	r4, r0
 80873d4:	4608      	mov	r0, r1
 80873d6:	2100      	movs	r1, #0
 80873d8:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80873dc:	4b03      	ldr	r3, [pc, #12]	; (80873ec <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80873de:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80873e0:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80873e2:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80873e4:	f7fd f880 	bl	80844e8 <hal_i2c_init>
}
 80873e8:	4620      	mov	r0, r4
 80873ea:	bd10      	pop	{r4, pc}
 80873ec:	08089f40 	.word	0x08089f40

080873f0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80873f0:	2300      	movs	r3, #0
 80873f2:	7c00      	ldrb	r0, [r0, #16]
 80873f4:	461a      	mov	r2, r3
 80873f6:	4619      	mov	r1, r3
 80873f8:	f7fd b82e 	b.w	8084458 <hal_i2c_begin>

080873fc <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 80873fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 80873fe:	2200      	movs	r2, #0
 8087400:	2314      	movs	r3, #20
 8087402:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8087406:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 808740a:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 808740c:	7c00      	ldrb	r0, [r0, #16]
 808740e:	f88d 3008 	strb.w	r3, [sp, #8]
 8087412:	684b      	ldr	r3, [r1, #4]
 8087414:	9303      	str	r3, [sp, #12]
 8087416:	68cb      	ldr	r3, [r1, #12]
 8087418:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 808741a:	7a0b      	ldrb	r3, [r1, #8]
 808741c:	a901      	add	r1, sp, #4
 808741e:	9305      	str	r3, [sp, #20]
 8087420:	f7fd f87a 	bl	8084518 <hal_i2c_request_ex>
}
 8087424:	b007      	add	sp, #28
 8087426:	f85d fb04 	ldr.w	pc, [sp], #4

0808742a <_ZN7TwoWire11requestFromEhjh>:
{
 808742a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 808742c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 808742e:	f88d 1000 	strb.w	r1, [sp]
 8087432:	f04f 0164 	mov.w	r1, #100	; 0x64
 8087436:	bf18      	it	ne
 8087438:	2301      	movne	r3, #1
 808743a:	9103      	str	r1, [sp, #12]
 808743c:	4669      	mov	r1, sp
    size_ = size;
 808743e:	9201      	str	r2, [sp, #4]
 8087440:	f88d 3008 	strb.w	r3, [sp, #8]
 8087444:	f7ff ffda 	bl	80873fc <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 8087448:	b005      	add	sp, #20
 808744a:	f85d fb04 	ldr.w	pc, [sp], #4

0808744e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 808744e:	2301      	movs	r3, #1
 8087450:	f7ff bfeb 	b.w	808742a <_ZN7TwoWire11requestFromEhjh>

08087454 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 8087454:	2200      	movs	r2, #0
 8087456:	7c00      	ldrb	r0, [r0, #16]
 8087458:	f7fd b806 	b.w	8084468 <hal_i2c_begin_transmission>

0808745c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 808745c:	b2c9      	uxtb	r1, r1
 808745e:	f7ff bff9 	b.w	8087454 <_ZN7TwoWire17beginTransmissionEh>

08087462 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
 8087462:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 8087464:	2200      	movs	r2, #0
 8087466:	460b      	mov	r3, r1
 8087468:	e9cd 2201 	strd	r2, r2, [sp, #4]
 808746c:	2214      	movs	r2, #20
 808746e:	f8ad 2004 	strh.w	r2, [sp, #4]
    };
 8087472:	685a      	ldr	r2, [r3, #4]
      .address = address_,
 8087474:	7809      	ldrb	r1, [r1, #0]
    };
 8087476:	9203      	str	r2, [sp, #12]
 8087478:	68da      	ldr	r2, [r3, #12]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 808747a:	7a1b      	ldrb	r3, [r3, #8]
    };
 808747c:	9204      	str	r2, [sp, #16]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
 808747e:	7c00      	ldrb	r0, [r0, #16]
 8087480:	aa01      	add	r2, sp, #4
 8087482:	f88d 1008 	strb.w	r1, [sp, #8]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 8087486:	9305      	str	r3, [sp, #20]
 8087488:	f7fc ffee 	bl	8084468 <hal_i2c_begin_transmission>
}
 808748c:	b007      	add	sp, #28
 808748e:	f85d fb04 	ldr.w	pc, [sp], #4

08087492 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 8087492:	2200      	movs	r2, #0
 8087494:	7c00      	ldrb	r0, [r0, #16]
 8087496:	f7fc bfef 	b.w	8084478 <hal_i2c_end_transmission>

0808749a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 808749a:	2101      	movs	r1, #1
 808749c:	f7ff bff9 	b.w	8087492 <_ZN7TwoWire15endTransmissionEh>

080874a0 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 80874a0:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
 80874a2:	2100      	movs	r1, #0
 80874a4:	7c00      	ldrb	r0, [r0, #16]
 80874a6:	f7fd f827 	bl	80844f8 <hal_i2c_lock>
}
 80874aa:	fab0 f080 	clz	r0, r0
 80874ae:	0940      	lsrs	r0, r0, #5
 80874b0:	bd08      	pop	{r3, pc}

080874b2 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 80874b2:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
 80874b4:	2100      	movs	r1, #0
 80874b6:	7c00      	ldrb	r0, [r0, #16]
 80874b8:	f7fd f826 	bl	8084508 <hal_i2c_unlock>
}
 80874bc:	fab0 f080 	clz	r0, r0
 80874c0:	0940      	lsrs	r0, r0, #5
 80874c2:	bd08      	pop	{r3, pc}

080874c4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80874c4:	2300      	movs	r3, #0
 80874c6:	6840      	ldr	r0, [r0, #4]
 80874c8:	461a      	mov	r2, r3
 80874ca:	f7fd b94d 	b.w	8084768 <network_connect>

080874ce <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80874ce:	2200      	movs	r2, #0
 80874d0:	2102      	movs	r1, #2
 80874d2:	6840      	ldr	r0, [r0, #4]
 80874d4:	f7fd b958 	b.w	8084788 <network_disconnect>

080874d8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80874d8:	2200      	movs	r2, #0
 80874da:	6840      	ldr	r0, [r0, #4]
 80874dc:	4611      	mov	r1, r2
 80874de:	f7fd b94b 	b.w	8084778 <network_connecting>

080874e2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80874e2:	2200      	movs	r2, #0
 80874e4:	6840      	ldr	r0, [r0, #4]
 80874e6:	4611      	mov	r1, r2
 80874e8:	f7fd b956 	b.w	8084798 <network_ready>

080874ec <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80874ec:	2300      	movs	r3, #0
 80874ee:	6840      	ldr	r0, [r0, #4]
 80874f0:	461a      	mov	r2, r3
 80874f2:	4619      	mov	r1, r3
 80874f4:	f7fd b958 	b.w	80847a8 <network_on>

080874f8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80874f8:	2300      	movs	r3, #0
 80874fa:	6840      	ldr	r0, [r0, #4]
 80874fc:	461a      	mov	r2, r3
 80874fe:	4619      	mov	r1, r3
 8087500:	f7fd b95a 	b.w	80847b8 <network_off>

08087504 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 8087504:	2100      	movs	r1, #0
 8087506:	6840      	ldr	r0, [r0, #4]
 8087508:	f7fd b97e 	b.w	8084808 <network_is_on>

0808750c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 808750c:	2100      	movs	r1, #0
 808750e:	6840      	ldr	r0, [r0, #4]
 8087510:	f7fd b982 	b.w	8084818 <network_is_off>

08087514 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 8087514:	2200      	movs	r2, #0
 8087516:	6840      	ldr	r0, [r0, #4]
 8087518:	f081 0101 	eor.w	r1, r1, #1
 808751c:	f7fd b954 	b.w	80847c8 <network_listen>

08087520 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 8087520:	2200      	movs	r2, #0
 8087522:	6840      	ldr	r0, [r0, #4]
 8087524:	f7fd b960 	b.w	80847e8 <network_set_listen_timeout>

08087528 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 8087528:	2200      	movs	r2, #0
 808752a:	6840      	ldr	r0, [r0, #4]
 808752c:	4611      	mov	r1, r2
 808752e:	f7fd b963 	b.w	80847f8 <network_get_listen_timeout>

08087532 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 8087532:	2200      	movs	r2, #0
 8087534:	6840      	ldr	r0, [r0, #4]
 8087536:	4611      	mov	r1, r2
 8087538:	f7fd b94e 	b.w	80847d8 <network_listening>

0808753c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 808753c:	b570      	push	{r4, r5, r6, lr}
 808753e:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 8087540:	2600      	movs	r6, #0
 8087542:	b086      	sub	sp, #24
 8087544:	4604      	mov	r4, r0
    IPAddress addr;
 8087546:	a804      	add	r0, sp, #16
 8087548:	f7ff fca8 	bl	8086e9c <_ZN9IPAddressC1Ev>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808754c:	4628      	mov	r0, r5
        HAL_IPAddress ip = {0};
 808754e:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8087550:	f001 fdb7 	bl	80890c2 <strlen>
 8087554:	4b0a      	ldr	r3, [pc, #40]	; (8087580 <_ZN5spark12NetworkClass7resolveEPKc+0x44>)
 8087556:	9600      	str	r6, [sp, #0]
 8087558:	b281      	uxth	r1, r0
 808755a:	685b      	ldr	r3, [r3, #4]
 808755c:	4628      	mov	r0, r5
 808755e:	aa03      	add	r2, sp, #12
 8087560:	f7fd f822 	bl	80845a8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8087564:	b130      	cbz	r0, 8087574 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 8087566:	4631      	mov	r1, r6
 8087568:	4620      	mov	r0, r4
 808756a:	f7ff fca7 	bl	8086ebc <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 808756e:	4620      	mov	r0, r4
 8087570:	b006      	add	sp, #24
 8087572:	bd70      	pop	{r4, r5, r6, pc}
 8087574:	4620      	mov	r0, r4
 8087576:	a903      	add	r1, sp, #12
 8087578:	f7ff fc98 	bl	8086eac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 808757c:	e7f7      	b.n	808756e <_ZN5spark12NetworkClass7resolveEPKc+0x32>
 808757e:	bf00      	nop
 8087580:	200004fc 	.word	0x200004fc

08087584 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 8087584:	4b02      	ldr	r3, [pc, #8]	; (8087590 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 8087586:	4a03      	ldr	r2, [pc, #12]	; (8087594 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 8087588:	601a      	str	r2, [r3, #0]
 808758a:	2200      	movs	r2, #0
 808758c:	605a      	str	r2, [r3, #4]

} // spark
 808758e:	4770      	bx	lr
 8087590:	2000054c 	.word	0x2000054c
 8087594:	08089f68 	.word	0x08089f68

08087598 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 8087598:	2201      	movs	r2, #1
 808759a:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 808759e:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 80875a2:	4618      	mov	r0, r3
 80875a4:	2901      	cmp	r1, #1
 80875a6:	d108      	bne.n	80875ba <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 80875a8:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80875ac:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 80875b0:	3a01      	subs	r2, #1
 80875b2:	f103 0310 	add.w	r3, r3, #16
 80875b6:	d1f2      	bne.n	808759e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 80875b8:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 80875ba:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 80875bc:	bf04      	itt	eq
 80875be:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 80875c2:	1852      	addeq	r2, r2, r1
 80875c4:	e7f4      	b.n	80875b0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

080875c6 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 80875c6:	b40e      	push	{r1, r2, r3}
 80875c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80875cc:	b087      	sub	sp, #28
 80875ce:	af00      	add	r7, sp, #0
 80875d0:	f107 0534 	add.w	r5, r7, #52	; 0x34
 80875d4:	f855 8b04 	ldr.w	r8, [r5], #4
 80875d8:	4604      	mov	r4, r0
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 80875da:	462b      	mov	r3, r5
 80875dc:	4642      	mov	r2, r8
 80875de:	2110      	movs	r1, #16
 80875e0:	f107 0008 	add.w	r0, r7, #8
    va_start(args, fmt);
 80875e4:	607d      	str	r5, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 80875e6:	f7fd f99f 	bl	8084928 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 80875ea:	280f      	cmp	r0, #15
 80875ec:	d91b      	bls.n	8087626 <_ZN5spark10JSONWriter6printfEPKcz+0x60>
        char buf[n + 1]; // Use larger buffer
 80875ee:	f100 0308 	add.w	r3, r0, #8
 80875f2:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 80875f6:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 80875f8:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 80875fc:	4642      	mov	r2, r8
 80875fe:	1c41      	adds	r1, r0, #1
 8087600:	462b      	mov	r3, r5
 8087602:	4668      	mov	r0, sp
        va_start(args, fmt);
 8087604:	607d      	str	r5, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 8087606:	f7fd f98f 	bl	8084928 <vsnprintf>
        if (n > 0) {
 808760a:	1e02      	subs	r2, r0, #0
 808760c:	dd04      	ble.n	8087618 <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
 808760e:	6823      	ldr	r3, [r4, #0]
 8087610:	4669      	mov	r1, sp
 8087612:	4620      	mov	r0, r4
 8087614:	689b      	ldr	r3, [r3, #8]
 8087616:	4798      	blx	r3
 8087618:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 808761a:	371c      	adds	r7, #28
 808761c:	46bd      	mov	sp, r7
 808761e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8087622:	b003      	add	sp, #12
 8087624:	4770      	bx	lr
    } else if (n > 0) {
 8087626:	2800      	cmp	r0, #0
 8087628:	d0f7      	beq.n	808761a <_ZN5spark10JSONWriter6printfEPKcz+0x54>
        write(buf, n);
 808762a:	6823      	ldr	r3, [r4, #0]
 808762c:	4602      	mov	r2, r0
 808762e:	689b      	ldr	r3, [r3, #8]
 8087630:	4620      	mov	r0, r4
 8087632:	f107 0108 	add.w	r1, r7, #8
 8087636:	4798      	blx	r3
}
 8087638:	e7ef      	b.n	808761a <_ZN5spark10JSONWriter6printfEPKcz+0x54>

0808763a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
 808763a:	b510      	push	{r4, lr}
 808763c:	4604      	mov	r4, r0
          _M_dispose();
 808763e:	6803      	ldr	r3, [r0, #0]
 8087640:	689b      	ldr	r3, [r3, #8]
 8087642:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8087644:	68a3      	ldr	r3, [r4, #8]
 8087646:	3b01      	subs	r3, #1
 8087648:	60a3      	str	r3, [r4, #8]
 808764a:	b92b      	cbnz	r3, 8087658 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
 808764c:	6823      	ldr	r3, [r4, #0]
 808764e:	4620      	mov	r0, r4
    }
 8087650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 8087654:	68db      	ldr	r3, [r3, #12]
 8087656:	4718      	bx	r3
    }
 8087658:	bd10      	pop	{r4, pc}

0808765a <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
 808765a:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 808765c:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 808765e:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 8087662:	2201      	movs	r2, #1
 8087664:	689b      	ldr	r3, [r3, #8]
 8087666:	f10d 0107 	add.w	r1, sp, #7
 808766a:	4798      	blx	r3
}
 808766c:	b003      	add	sp, #12
 808766e:	f85d fb04 	ldr.w	pc, [sp], #4

08087672 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
 8087672:	b538      	push	{r3, r4, r5, lr}
 8087674:	680b      	ldr	r3, [r1, #0]
 8087676:	4604      	mov	r4, r0
 8087678:	6003      	str	r3, [r0, #0]
 808767a:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 808767c:	6843      	ldr	r3, [r0, #4]
 808767e:	429d      	cmp	r5, r3
 8087680:	d00c      	beq.n	808769c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
 8087682:	b115      	cbz	r5, 808768a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
 8087684:	686b      	ldr	r3, [r5, #4]
 8087686:	3301      	adds	r3, #1
 8087688:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 808768a:	6860      	ldr	r0, [r4, #4]
 808768c:	b128      	cbz	r0, 808769a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
 808768e:	6843      	ldr	r3, [r0, #4]
 8087690:	3b01      	subs	r3, #1
 8087692:	6043      	str	r3, [r0, #4]
 8087694:	b90b      	cbnz	r3, 808769a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
 8087696:	f7ff ffd0 	bl	808763a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
 808769a:	6065      	str	r5, [r4, #4]
    class __shared_ptr
 808769c:	4620      	mov	r0, r4
 808769e:	bd38      	pop	{r3, r4, r5, pc}

080876a0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 80876a0:	460b      	mov	r3, r1
 80876a2:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 80876a4:	2200      	movs	r2, #0
 80876a6:	b510      	push	{r4, lr}
 80876a8:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 80876aa:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 80876ae:	6083      	str	r3, [r0, #8]
    if (t) {
 80876b0:	b90b      	cbnz	r3, 80876b6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 80876b2:	4620      	mov	r0, r4
 80876b4:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
 80876b6:	f7ff ffdc 	bl	8087672 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
 80876ba:	e7fa      	b.n	80876b2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

080876bc <_ZNK5spark9JSONValue4typeEv>:
spark::JSONType spark::JSONValue::type() const {
 80876bc:	4603      	mov	r3, r0
    if (!t_) {
 80876be:	6880      	ldr	r0, [r0, #8]
 80876c0:	b320      	cbz	r0, 808770c <_ZNK5spark9JSONValue4typeEv+0x50>
    switch (t_->type) {
 80876c2:	7802      	ldrb	r2, [r0, #0]
 80876c4:	2a03      	cmp	r2, #3
 80876c6:	d81a      	bhi.n	80876fe <_ZNK5spark9JSONValue4typeEv+0x42>
 80876c8:	e8df f002 	tbb	[pc, r2]
 80876cc:	1b021704 	.word	0x1b021704
 80876d0:	2005      	movs	r0, #5
 80876d2:	4770      	bx	lr
        const char c = d_->json[t_->start];
 80876d4:	681b      	ldr	r3, [r3, #0]
 80876d6:	685a      	ldr	r2, [r3, #4]
 80876d8:	6843      	ldr	r3, [r0, #4]
 80876da:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 80876dc:	282d      	cmp	r0, #45	; 0x2d
 80876de:	d012      	beq.n	8087706 <_ZNK5spark9JSONValue4typeEv+0x4a>
 80876e0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80876e4:	2b09      	cmp	r3, #9
 80876e6:	d90e      	bls.n	8087706 <_ZNK5spark9JSONValue4typeEv+0x4a>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 80876e8:	2874      	cmp	r0, #116	; 0x74
 80876ea:	d00e      	beq.n	808770a <_ZNK5spark9JSONValue4typeEv+0x4e>
 80876ec:	2866      	cmp	r0, #102	; 0x66
 80876ee:	d00c      	beq.n	808770a <_ZNK5spark9JSONValue4typeEv+0x4e>
        return JSON_TYPE_INVALID;
 80876f0:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 80876f4:	4258      	negs	r0, r3
 80876f6:	4158      	adcs	r0, r3
 80876f8:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 80876fa:	2006      	movs	r0, #6
 80876fc:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 80876fe:	2000      	movs	r0, #0
 8087700:	4770      	bx	lr
        return JSON_TYPE_STRING;
 8087702:	2004      	movs	r0, #4
 8087704:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 8087706:	2003      	movs	r0, #3
 8087708:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 808770a:	2002      	movs	r0, #2
}
 808770c:	4770      	bx	lr

0808770e <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 808770e:	b510      	push	{r4, lr}
 8087710:	4604      	mov	r4, r0
    switch (type()) {
 8087712:	f7ff ffd3 	bl	80876bc <_ZNK5spark9JSONValue4typeEv>
 8087716:	2802      	cmp	r0, #2
 8087718:	d00e      	beq.n	8087738 <_ZNK5spark9JSONValue5toIntEv+0x2a>
 808771a:	1ec3      	subs	r3, r0, #3
 808771c:	b2db      	uxtb	r3, r3
 808771e:	2b01      	cmp	r3, #1
 8087720:	d814      	bhi.n	808774c <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 8087722:	6822      	ldr	r2, [r4, #0]
 8087724:	68a3      	ldr	r3, [r4, #8]
 8087726:	6850      	ldr	r0, [r2, #4]
 8087728:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 808772a:	220a      	movs	r2, #10
}
 808772c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 8087730:	2100      	movs	r1, #0
 8087732:	4418      	add	r0, r3
 8087734:	f001 bdd2 	b.w	80892dc <strtol>
        const char* const s = d_->json + t_->start;
 8087738:	6822      	ldr	r2, [r4, #0]
 808773a:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 808773c:	6852      	ldr	r2, [r2, #4]
 808773e:	685b      	ldr	r3, [r3, #4]
 8087740:	5cd0      	ldrb	r0, [r2, r3]
 8087742:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 8087746:	4258      	negs	r0, r3
 8087748:	4158      	adcs	r0, r3
}
 808774a:	bd10      	pop	{r4, pc}
    switch (type()) {
 808774c:	2000      	movs	r0, #0
 808774e:	e7fc      	b.n	808774a <_ZNK5spark9JSONValue5toIntEv+0x3c>

08087750 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 8087750:	460b      	mov	r3, r1
 8087752:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 8087754:	2200      	movs	r2, #0
 8087756:	b510      	push	{r4, lr}
 8087758:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 808775a:	e9c0 2200 	strd	r2, r2, [r0]
        n_(0) {
 808775e:	480d      	ldr	r0, [pc, #52]	; (8087794 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 8087760:	e9c4 0202 	strd	r0, r2, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 8087764:	b1a3      	cbz	r3, 8087790 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x40>
 8087766:	781a      	ldrb	r2, [r3, #0]
 8087768:	2a03      	cmp	r2, #3
 808776a:	d006      	beq.n	808777a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2a>
 808776c:	b982      	cbnz	r2, 8087790 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x40>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 808776e:	680a      	ldr	r2, [r1, #0]
 8087770:	6850      	ldr	r0, [r2, #4]
 8087772:	685a      	ldr	r2, [r3, #4]
 8087774:	5c82      	ldrb	r2, [r0, r2]
 8087776:	2a6e      	cmp	r2, #110	; 0x6e
 8087778:	d007      	beq.n	808778a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3a>
            s_ = d->json + t->start;
 808777a:	680a      	ldr	r2, [r1, #0]
 808777c:	6858      	ldr	r0, [r3, #4]
 808777e:	6852      	ldr	r2, [r2, #4]
            n_ = t->end - t->start;
 8087780:	689b      	ldr	r3, [r3, #8]
            s_ = d->json + t->start;
 8087782:	4402      	add	r2, r0
            n_ = t->end - t->start;
 8087784:	1a1b      	subs	r3, r3, r0
            s_ = d->json + t->start;
 8087786:	60a2      	str	r2, [r4, #8]
            n_ = t->end - t->start;
 8087788:	60e3      	str	r3, [r4, #12]
 808778a:	4620      	mov	r0, r4
 808778c:	f7ff ff71 	bl	8087672 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
 8087790:	4620      	mov	r0, r4
 8087792:	bd10      	pop	{r4, pc}
 8087794:	080898a4 	.word	0x080898a4

08087798 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 8087798:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 808779a:	2500      	movs	r5, #0
 808779c:	460b      	mov	r3, r1
 808779e:	4604      	mov	r4, r0
 80877a0:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 80877a2:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 80877a6:	e9c0 5502 	strd	r5, r5, [r0, #8]
 80877aa:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 80877ae:	b14b      	cbz	r3, 80877c4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 80877b0:	781a      	ldrb	r2, [r3, #0]
 80877b2:	2a01      	cmp	r2, #1
 80877b4:	d106      	bne.n	80877c4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 80877b6:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 80877ba:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 80877bc:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 80877be:	6143      	str	r3, [r0, #20]
 80877c0:	f7ff ff57 	bl	8087672 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
 80877c4:	4620      	mov	r0, r4
 80877c6:	bd38      	pop	{r3, r4, r5, pc}

080877c8 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 80877c8:	b510      	push	{r4, lr}
    if (!n_) {
 80877ca:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 80877cc:	4604      	mov	r4, r0
    if (!n_) {
 80877ce:	b163      	cbz	r3, 80877ea <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 80877d0:	6880      	ldr	r0, [r0, #8]
    --n_;
 80877d2:	3b01      	subs	r3, #1
    k_ = t_; // Name
 80877d4:	60e0      	str	r0, [r4, #12]
    ++t_;
 80877d6:	3010      	adds	r0, #16
 80877d8:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 80877da:	6120      	str	r0, [r4, #16]
    --n_;
 80877dc:	6163      	str	r3, [r4, #20]
    if (n_) {
 80877de:	b113      	cbz	r3, 80877e6 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 80877e0:	f7ff feda 	bl	8087598 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 80877e4:	60a0      	str	r0, [r4, #8]
    return true;
 80877e6:	2001      	movs	r0, #1
 80877e8:	e000      	b.n	80877ec <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 80877ea:	4618      	mov	r0, r3
}
 80877ec:	bd10      	pop	{r4, pc}

080877ee <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 80877ee:	b510      	push	{r4, lr}
    write('}');
 80877f0:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 80877f2:	4604      	mov	r4, r0
    write('}');
 80877f4:	f7ff ff31 	bl	808765a <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 80877f8:	2301      	movs	r3, #1
}
 80877fa:	4620      	mov	r0, r4
    state_ = NEXT;
 80877fc:	7123      	strb	r3, [r4, #4]
}
 80877fe:	bd10      	pop	{r4, pc}

08087800 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 8087800:	b508      	push	{r3, lr}
    switch (state_) {
 8087802:	7903      	ldrb	r3, [r0, #4]
 8087804:	2b01      	cmp	r3, #1
 8087806:	d002      	beq.n	808780e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 8087808:	2b02      	cmp	r3, #2
 808780a:	d004      	beq.n	8087816 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 808780c:	bd08      	pop	{r3, pc}
        write(',');
 808780e:	212c      	movs	r1, #44	; 0x2c
        write(':');
 8087810:	f7ff ff23 	bl	808765a <_ZN5spark10JSONWriter5writeEc>
}
 8087814:	e7fa      	b.n	808780c <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 8087816:	213a      	movs	r1, #58	; 0x3a
 8087818:	e7fa      	b.n	8087810 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

0808781a <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 808781a:	b510      	push	{r4, lr}
 808781c:	4604      	mov	r4, r0
    writeSeparator();
 808781e:	f7ff ffef 	bl	8087800 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 8087822:	4620      	mov	r0, r4
 8087824:	217b      	movs	r1, #123	; 0x7b
 8087826:	f7ff ff18 	bl	808765a <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 808782a:	2300      	movs	r3, #0
}
 808782c:	4620      	mov	r0, r4
    state_ = BEGIN;
 808782e:	7123      	strb	r3, [r4, #4]
}
 8087830:	bd10      	pop	{r4, pc}
	...

08087834 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 8087834:	b538      	push	{r3, r4, r5, lr}
 8087836:	4604      	mov	r4, r0
 8087838:	460d      	mov	r5, r1
    writeSeparator();
 808783a:	f7ff ffe1 	bl	8087800 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 808783e:	6823      	ldr	r3, [r4, #0]
 8087840:	4620      	mov	r0, r4
 8087842:	462a      	mov	r2, r5
 8087844:	68db      	ldr	r3, [r3, #12]
 8087846:	4903      	ldr	r1, [pc, #12]	; (8087854 <_ZN5spark10JSONWriter5valueEi+0x20>)
 8087848:	4798      	blx	r3
    state_ = NEXT;
 808784a:	2301      	movs	r3, #1
}
 808784c:	4620      	mov	r0, r4
    state_ = NEXT;
 808784e:	7123      	strb	r3, [r4, #4]
}
 8087850:	bd38      	pop	{r3, r4, r5, pc}
 8087852:	bf00      	nop
 8087854:	080899fb 	.word	0x080899fb

08087858 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 8087858:	b538      	push	{r3, r4, r5, lr}
 808785a:	4604      	mov	r4, r0
 808785c:	460d      	mov	r5, r1
    writeSeparator();
 808785e:	f7ff ffcf 	bl	8087800 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 8087862:	6823      	ldr	r3, [r4, #0]
 8087864:	4620      	mov	r0, r4
 8087866:	462a      	mov	r2, r5
 8087868:	68db      	ldr	r3, [r3, #12]
 808786a:	4903      	ldr	r1, [pc, #12]	; (8087878 <_ZN5spark10JSONWriter5valueEj+0x20>)
 808786c:	4798      	blx	r3
    state_ = NEXT;
 808786e:	2301      	movs	r3, #1
}
 8087870:	4620      	mov	r0, r4
    state_ = NEXT;
 8087872:	7123      	strb	r3, [r4, #4]
}
 8087874:	bd38      	pop	{r3, r4, r5, pc}
 8087876:	bf00      	nop
 8087878:	08089f9c 	.word	0x08089f9c

0808787c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 808787c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8087880:	460d      	mov	r5, r1
 8087882:	4617      	mov	r7, r2
    write('"');
 8087884:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 8087886:	4604      	mov	r4, r0
    write('"');
 8087888:	f7ff fee7 	bl	808765a <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
 808788c:	4629      	mov	r1, r5
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 808788e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8087928 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
    const char* const end = str + size;
 8087892:	442f      	add	r7, r5
    while (s != end) {
 8087894:	42bd      	cmp	r5, r7
 8087896:	462a      	mov	r2, r5
 8087898:	d038      	beq.n	808790c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
 808789a:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
 808789e:	2e22      	cmp	r6, #34	; 0x22
 80878a0:	d003      	beq.n	80878aa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
 80878a2:	2e5c      	cmp	r6, #92	; 0x5c
 80878a4:	d001      	beq.n	80878aa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
 80878a6:	2e1f      	cmp	r6, #31
 80878a8:	d8f4      	bhi.n	8087894 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 80878aa:	6823      	ldr	r3, [r4, #0]
 80878ac:	1a52      	subs	r2, r2, r1
 80878ae:	4620      	mov	r0, r4
 80878b0:	689b      	ldr	r3, [r3, #8]
 80878b2:	4798      	blx	r3
            write('\\');
 80878b4:	215c      	movs	r1, #92	; 0x5c
 80878b6:	4620      	mov	r0, r4
 80878b8:	f7ff fecf 	bl	808765a <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 80878bc:	2e0d      	cmp	r6, #13
 80878be:	d80a      	bhi.n	80878d6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
 80878c0:	2e07      	cmp	r6, #7
 80878c2:	d91c      	bls.n	80878fe <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
 80878c4:	f1a6 0308 	sub.w	r3, r6, #8
 80878c8:	2b05      	cmp	r3, #5
 80878ca:	d818      	bhi.n	80878fe <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
 80878cc:	e8df f003 	tbb	[pc, r3]
 80878d0:	17110f0d 	.word	0x17110f0d
 80878d4:	1513      	.short	0x1513
 80878d6:	2e22      	cmp	r6, #34	; 0x22
 80878d8:	d001      	beq.n	80878de <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
 80878da:	2e5c      	cmp	r6, #92	; 0x5c
 80878dc:	d10f      	bne.n	80878fe <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
 80878de:	4631      	mov	r1, r6
                write('b');
 80878e0:	4620      	mov	r0, r4
 80878e2:	f7ff feba 	bl	808765a <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 80878e6:	4629      	mov	r1, r5
    while (s != end) {
 80878e8:	e7d4      	b.n	8087894 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 80878ea:	2162      	movs	r1, #98	; 0x62
 80878ec:	e7f8      	b.n	80878e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
 80878ee:	2174      	movs	r1, #116	; 0x74
 80878f0:	e7f6      	b.n	80878e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
 80878f2:	216e      	movs	r1, #110	; 0x6e
 80878f4:	e7f4      	b.n	80878e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
 80878f6:	2166      	movs	r1, #102	; 0x66
 80878f8:	e7f2      	b.n	80878e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
 80878fa:	2172      	movs	r1, #114	; 0x72
 80878fc:	e7f0      	b.n	80878e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
 80878fe:	6823      	ldr	r3, [r4, #0]
 8087900:	4632      	mov	r2, r6
 8087902:	4641      	mov	r1, r8
 8087904:	4620      	mov	r0, r4
 8087906:	68db      	ldr	r3, [r3, #12]
 8087908:	4798      	blx	r3
                break;
 808790a:	e7ec      	b.n	80878e6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
 808790c:	428d      	cmp	r5, r1
 808790e:	d004      	beq.n	808791a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
 8087910:	6823      	ldr	r3, [r4, #0]
 8087912:	4620      	mov	r0, r4
 8087914:	689b      	ldr	r3, [r3, #8]
 8087916:	1a6a      	subs	r2, r5, r1
 8087918:	4798      	blx	r3
    }
    write('"');
 808791a:	2122      	movs	r1, #34	; 0x22
 808791c:	4620      	mov	r0, r4
 808791e:	f7ff fe9c 	bl	808765a <_ZN5spark10JSONWriter5writeEc>
}
 8087922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8087926:	bf00      	nop
 8087928:	08089f9f 	.word	0x08089f9f

0808792c <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 808792c:	b570      	push	{r4, r5, r6, lr}
 808792e:	4604      	mov	r4, r0
 8087930:	460d      	mov	r5, r1
 8087932:	4616      	mov	r6, r2
    writeSeparator();
 8087934:	f7ff ff64 	bl	8087800 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 8087938:	4620      	mov	r0, r4
 808793a:	4632      	mov	r2, r6
 808793c:	4629      	mov	r1, r5
 808793e:	f7ff ff9d 	bl	808787c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 8087942:	2302      	movs	r3, #2
}
 8087944:	4620      	mov	r0, r4
    state_ = VALUE;
 8087946:	7123      	strb	r3, [r4, #4]
}
 8087948:	bd70      	pop	{r4, r5, r6, pc}

0808794a <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 808794a:	b570      	push	{r4, r5, r6, lr}
 808794c:	4604      	mov	r4, r0
 808794e:	460d      	mov	r5, r1
 8087950:	4616      	mov	r6, r2
    writeSeparator();
 8087952:	f7ff ff55 	bl	8087800 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 8087956:	4620      	mov	r0, r4
 8087958:	4632      	mov	r2, r6
 808795a:	4629      	mov	r1, r5
 808795c:	f7ff ff8e 	bl	808787c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 8087960:	2301      	movs	r3, #1
}
 8087962:	4620      	mov	r0, r4
    state_ = NEXT;
 8087964:	7123      	strb	r3, [r4, #4]
}
 8087966:	bd70      	pop	{r4, r5, r6, pc}

08087968 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 8087968:	282e      	cmp	r0, #46	; 0x2e
bool pinAvailable(uint16_t pin) {
 808796a:	b570      	push	{r4, r5, r6, lr}
 808796c:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 808796e:	d901      	bls.n	8087974 <pinAvailable+0xc>
    return false;
 8087970:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 8087972:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 8087974:	f1a0 030d 	sub.w	r3, r0, #13
 8087978:	2b02      	cmp	r3, #2
 808797a:	d90b      	bls.n	8087994 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 808797c:	2801      	cmp	r0, #1
 808797e:	d826      	bhi.n	80879ce <pinAvailable+0x66>
 8087980:	f000 f932 	bl	8087be8 <_Z19__fetch_global_Wirev>
 8087984:	2100      	movs	r1, #0
 8087986:	7c00      	ldrb	r0, [r0, #16]
 8087988:	f7fc fda6 	bl	80844d8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 808798c:	f080 0001 	eor.w	r0, r0, #1
 8087990:	b2c0      	uxtb	r0, r0
 8087992:	e7ee      	b.n	8087972 <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 8087994:	4e13      	ldr	r6, [pc, #76]	; (80879e4 <pinAvailable+0x7c>)
 8087996:	7831      	ldrb	r1, [r6, #0]
 8087998:	f3bf 8f5b 	dmb	ish
 808799c:	f011 0501 	ands.w	r5, r1, #1
 80879a0:	d10f      	bne.n	80879c2 <pinAvailable+0x5a>
 80879a2:	4630      	mov	r0, r6
 80879a4:	f7f8 fb9a 	bl	80800dc <__cxa_guard_acquire>
 80879a8:	b158      	cbz	r0, 80879c2 <pinAvailable+0x5a>
 80879aa:	4629      	mov	r1, r5
 80879ac:	480e      	ldr	r0, [pc, #56]	; (80879e8 <pinAvailable+0x80>)
 80879ae:	f7fd f847 	bl	8084a40 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80879b2:	4630      	mov	r0, r6
 80879b4:	f7f8 fb97 	bl	80800e6 <__cxa_guard_release>
 80879b8:	4a0c      	ldr	r2, [pc, #48]	; (80879ec <pinAvailable+0x84>)
 80879ba:	490d      	ldr	r1, [pc, #52]	; (80879f0 <pinAvailable+0x88>)
 80879bc:	480a      	ldr	r0, [pc, #40]	; (80879e8 <pinAvailable+0x80>)
 80879be:	f000 f963 	bl	8087c88 <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80879c2:	4b09      	ldr	r3, [pc, #36]	; (80879e8 <pinAvailable+0x80>)
 80879c4:	7818      	ldrb	r0, [r3, #0]
 80879c6:	f7fc fddf 	bl	8084588 <hal_spi_is_enabled>
 80879ca:	2800      	cmp	r0, #0
 80879cc:	d1d0      	bne.n	8087970 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80879ce:	3c12      	subs	r4, #18
 80879d0:	2c01      	cmp	r4, #1
 80879d2:	d805      	bhi.n	80879e0 <pinAvailable+0x78>
 80879d4:	f7ff fc78 	bl	80872c8 <_Z22__fetch_global_Serial1v>
 80879d8:	7c00      	ldrb	r0, [r0, #16]
 80879da:	f7fc fd25 	bl	8084428 <hal_usart_is_enabled>
 80879de:	e7d5      	b.n	808798c <pinAvailable+0x24>
  return true; // 'pin' is available
 80879e0:	2001      	movs	r0, #1
 80879e2:	e7c6      	b.n	8087972 <pinAvailable+0xa>
 80879e4:	2000033c 	.word	0x2000033c
 80879e8:	20000340 	.word	0x20000340
 80879ec:	20000130 	.word	0x20000130
 80879f0:	08083021 	.word	0x08083021

080879f4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80879f4:	282e      	cmp	r0, #46	; 0x2e
{
 80879f6:	b538      	push	{r3, r4, r5, lr}
 80879f8:	4604      	mov	r4, r0
 80879fa:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80879fc:	d80a      	bhi.n	8087a14 <pinMode+0x20>
 80879fe:	29ff      	cmp	r1, #255	; 0xff
 8087a00:	d008      	beq.n	8087a14 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 8087a02:	f7ff ffb1 	bl	8087968 <pinAvailable>
 8087a06:	b128      	cbz	r0, 8087a14 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 8087a08:	4629      	mov	r1, r5
 8087a0a:	4620      	mov	r0, r4
}
 8087a0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 8087a10:	f7fc bbc2 	b.w	8084198 <HAL_Pin_Mode>
}
 8087a14:	bd38      	pop	{r3, r4, r5, pc}

08087a16 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 8087a16:	b538      	push	{r3, r4, r5, lr}
 8087a18:	4604      	mov	r4, r0
 8087a1a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8087a1c:	f7fc fbc4 	bl	80841a8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 8087a20:	28ff      	cmp	r0, #255	; 0xff
 8087a22:	d010      	beq.n	8087a46 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 8087a24:	2806      	cmp	r0, #6
 8087a26:	d804      	bhi.n	8087a32 <digitalWrite+0x1c>
 8087a28:	234d      	movs	r3, #77	; 0x4d
 8087a2a:	fa23 f000 	lsr.w	r0, r3, r0
 8087a2e:	07c3      	lsls	r3, r0, #31
 8087a30:	d409      	bmi.n	8087a46 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 8087a32:	4620      	mov	r0, r4
 8087a34:	f7ff ff98 	bl	8087968 <pinAvailable>
 8087a38:	b128      	cbz	r0, 8087a46 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 8087a3a:	4629      	mov	r1, r5
 8087a3c:	4620      	mov	r0, r4
}
 8087a3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 8087a42:	f7fc bbb9 	b.w	80841b8 <HAL_GPIO_Write>
}
 8087a46:	bd38      	pop	{r3, r4, r5, pc}

08087a48 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 8087a48:	b510      	push	{r4, lr}
 8087a4a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8087a4c:	f7fc fbac 	bl	80841a8 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 8087a50:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 8087a52:	b2db      	uxtb	r3, r3
 8087a54:	2b01      	cmp	r3, #1
 8087a56:	d908      	bls.n	8087a6a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 8087a58:	4620      	mov	r0, r4
 8087a5a:	f7ff ff85 	bl	8087968 <pinAvailable>
 8087a5e:	b120      	cbz	r0, 8087a6a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 8087a60:	4620      	mov	r0, r4
}
 8087a62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
 8087a66:	f7fc bbaf 	b.w	80841c8 <HAL_GPIO_Read>
}
 8087a6a:	2000      	movs	r0, #0
 8087a6c:	bd10      	pop	{r4, pc}

08087a6e <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 8087a6e:	b510      	push	{r4, lr}
 8087a70:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 8087a72:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 8087a74:	bf9c      	itt	ls
 8087a76:	340a      	addls	r4, #10
 8087a78:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 8087a7a:	4620      	mov	r0, r4
 8087a7c:	f7ff ff74 	bl	8087968 <pinAvailable>
 8087a80:	b150      	cbz	r0, 8087a98 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 8087a82:	2103      	movs	r1, #3
 8087a84:	4620      	mov	r0, r4
 8087a86:	f7fc fb7f 	bl	8084188 <HAL_Validate_Pin_Function>
 8087a8a:	2803      	cmp	r0, #3
 8087a8c:	d104      	bne.n	8087a98 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 8087a8e:	4620      	mov	r0, r4
}
 8087a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 8087a94:	f7fc bbc8 	b.w	8084228 <hal_adc_read>
}
 8087a98:	2000      	movs	r0, #0
 8087a9a:	bd10      	pop	{r4, pc}

08087a9c <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
 8087a9c:	b538      	push	{r3, r4, r5, lr}
 8087a9e:	4604      	mov	r4, r0
 8087aa0:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
 8087aa2:	f7ff ff61 	bl	8087968 <pinAvailable>
 8087aa6:	b1f0      	cbz	r0, 8087ae6 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
 8087aa8:	2104      	movs	r1, #4
 8087aaa:	4620      	mov	r0, r4
 8087aac:	f7fc fb6c 	bl	8084188 <HAL_Validate_Pin_Function>
 8087ab0:	2804      	cmp	r0, #4
 8087ab2:	d105      	bne.n	8087ac0 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
 8087ab4:	4620      	mov	r0, r4
 8087ab6:	b2a9      	uxth	r1, r5
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
 8087ab8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
 8087abc:	f7fc bbac 	b.w	8084218 <HAL_DAC_Write>
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
 8087ac0:	2102      	movs	r1, #2
 8087ac2:	4620      	mov	r0, r4
 8087ac4:	f7fc fb60 	bl	8084188 <HAL_Validate_Pin_Function>
 8087ac8:	2802      	cmp	r0, #2
 8087aca:	d10c      	bne.n	8087ae6 <_Z11analogWritetm+0x4a>
        PinMode mode = HAL_Get_Pin_Mode(pin);
 8087acc:	4620      	mov	r0, r4
 8087ace:	f7fc fb6b 	bl	80841a8 <HAL_Get_Pin_Mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
 8087ad2:	2801      	cmp	r0, #1
 8087ad4:	d001      	beq.n	8087ada <_Z11analogWritetm+0x3e>
 8087ad6:	2804      	cmp	r0, #4
 8087ad8:	d105      	bne.n	8087ae6 <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
 8087ada:	4629      	mov	r1, r5
 8087adc:	4620      	mov	r0, r4
}
 8087ade:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
 8087ae2:	f7fc bba9 	b.w	8084238 <hal_pwm_write_ext>
}
 8087ae6:	bd38      	pop	{r3, r4, r5, pc}

08087ae8 <_ZN19ApplicationWatchdog4loopEv>:
	wd.loop();
	os_thread_cleanup(nullptr);
}

void ApplicationWatchdog::loop()
{
 8087ae8:	b530      	push	{r4, r5, lr}
 8087aea:	4604      	mov	r4, r0
	bool done = false;
	system_tick_t now;
	while (!done) {
		HAL_Delay_Milliseconds(timeout);
		now = current_time();
		done = (now-last_checkin)>=timeout;
 8087aec:	4d1b      	ldr	r5, [pc, #108]	; (8087b5c <_ZN19ApplicationWatchdog4loopEv+0x74>)
{
 8087aee:	b089      	sub	sp, #36	; 0x24
		HAL_Delay_Milliseconds(timeout);
 8087af0:	6820      	ldr	r0, [r4, #0]
 8087af2:	f7fc fbb1 	bl	8084258 <HAL_Delay_Milliseconds>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8087af6:	f7fc fbbf 	bl	8084278 <HAL_Timer_Get_Milli_Seconds>
		done = (now-last_checkin)>=timeout;
 8087afa:	682a      	ldr	r2, [r5, #0]
 8087afc:	6823      	ldr	r3, [r4, #0]
 8087afe:	1a80      	subs	r0, r0, r2
	while (!done) {
 8087b00:	4298      	cmp	r0, r3
 8087b02:	d3f5      	bcc.n	8087af0 <_ZN19ApplicationWatchdog4loopEv+0x8>
	}

	if (timeout>0 && timeout_fn) {
 8087b04:	6823      	ldr	r3, [r4, #0]
 8087b06:	b333      	cbz	r3, 8087b56 <_ZN19ApplicationWatchdog4loopEv+0x6e>
 8087b08:	68e3      	ldr	r3, [r4, #12]
 8087b0a:	b323      	cbz	r3, 8087b56 <_ZN19ApplicationWatchdog4loopEv+0x6e>
		timeout_fn();
 8087b0c:	1d25      	adds	r5, r4, #4
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8087b0e:	4628      	mov	r0, r5
 8087b10:	6923      	ldr	r3, [r4, #16]
 8087b12:	4798      	blx	r3
    _Function_base() : _M_manager(nullptr) { }
 8087b14:	2300      	movs	r3, #0
	std::swap(_M_functor, __x._M_functor);
 8087b16:	4668      	mov	r0, sp
 8087b18:	a904      	add	r1, sp, #16
    _Function_base() : _M_manager(nullptr) { }
 8087b1a:	9302      	str	r3, [sp, #8]
 8087b1c:	9306      	str	r3, [sp, #24]
	std::swap(_M_functor, __x._M_functor);
 8087b1e:	f7fe fd14 	bl	808654a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8087b22:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 8087b24:	9a06      	ldr	r2, [sp, #24]
      __b = _GLIBCXX_MOVE(__tmp);
 8087b26:	9306      	str	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 8087b28:	9202      	str	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8087b2a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8087b2c:	9a07      	ldr	r2, [sp, #28]
 8087b2e:	4629      	mov	r1, r5
 8087b30:	a804      	add	r0, sp, #16
 8087b32:	9203      	str	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8087b34:	9307      	str	r3, [sp, #28]
 8087b36:	f7fe fd08 	bl	808654a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8087b3a:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 8087b3c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8087b3e:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8087b40:	9b07      	ldr	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 8087b42:	9206      	str	r2, [sp, #24]
 8087b44:	6922      	ldr	r2, [r4, #16]
    class function<_Res(_ArgTypes...)>
 8087b46:	a804      	add	r0, sp, #16
      __b = _GLIBCXX_MOVE(__tmp);
 8087b48:	6123      	str	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 8087b4a:	9207      	str	r2, [sp, #28]
 8087b4c:	f7f8 fc22 	bl	8080394 <_ZNSt14_Function_baseD1Ev>
 8087b50:	4668      	mov	r0, sp
 8087b52:	f7f8 fc1f 	bl	8080394 <_ZNSt14_Function_baseD1Ev>
		timeout_fn = std::function<void(void)>();
	}
}
 8087b56:	b009      	add	sp, #36	; 0x24
 8087b58:	bd30      	pop	{r4, r5, pc}
 8087b5a:	bf00      	nop
 8087b5c:	20000554 	.word	0x20000554

08087b60 <_ZN19ApplicationWatchdog5startEPv>:
{
 8087b60:	b508      	push	{r3, lr}
	wd.loop();
 8087b62:	f7ff ffc1 	bl	8087ae8 <_ZN19ApplicationWatchdog4loopEv>
}
 8087b66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	os_thread_cleanup(nullptr);
 8087b6a:	2000      	movs	r0, #0
 8087b6c:	f7fc bbc4 	b.w	80842f8 <os_thread_cleanup>

08087b70 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 8087b70:	2300      	movs	r3, #0
 8087b72:	b513      	push	{r0, r1, r4, lr}
 8087b74:	4c07      	ldr	r4, [pc, #28]	; (8087b94 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 8087b76:	461a      	mov	r2, r3
 8087b78:	4619      	mov	r1, r3
 8087b7a:	4620      	mov	r0, r4
 8087b7c:	9300      	str	r3, [sp, #0]
 8087b7e:	f7ff f9af 	bl	8086ee0 <_ZN9IPAddressC1Ehhhh>
 8087b82:	4620      	mov	r0, r4
 8087b84:	4a04      	ldr	r2, [pc, #16]	; (8087b98 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 8087b86:	4905      	ldr	r1, [pc, #20]	; (8087b9c <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 8087b88:	b002      	add	sp, #8
 8087b8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8087b8e:	f000 b87b 	b.w	8087c88 <__aeabi_atexit>
 8087b92:	bf00      	nop
 8087b94:	20000558 	.word	0x20000558
 8087b98:	20000130 	.word	0x20000130
 8087b9c:	08086e59 	.word	0x08086e59

08087ba0 <_ZN12_GLOBAL__N_117defaultWireConfigEv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 8087ba0:	2300      	movs	r3, #0
hal_i2c_config_t defaultWireConfig() {
 8087ba2:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 8087ba4:	2520      	movs	r5, #32
 8087ba6:	8043      	strh	r3, [r0, #2]
 8087ba8:	2314      	movs	r3, #20
		.size = sizeof(hal_i2c_config_t),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8087baa:	4e08      	ldr	r6, [pc, #32]	; (8087bcc <_ZN12_GLOBAL__N_117defaultWireConfigEv+0x2c>)
hal_i2c_config_t defaultWireConfig() {
 8087bac:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 8087bae:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8087bb0:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 8087bb2:	6085      	str	r5, [r0, #8]
 8087bb4:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8087bb6:	4628      	mov	r0, r5
 8087bb8:	f000 f86f 	bl	8087c9a <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8087bbc:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 8087bbe:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8087bc0:	4628      	mov	r0, r5
 8087bc2:	f000 f86a 	bl	8087c9a <_ZnajRKSt9nothrow_t>
	};
 8087bc6:	60e0      	str	r0, [r4, #12]

	return config;
}
 8087bc8:	4620      	mov	r0, r4
 8087bca:	bd70      	pop	{r4, r5, r6, pc}
 8087bcc:	08089fa5 	.word	0x08089fa5

08087bd0 <_Z17acquireWireBufferv>:

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 8087bd0:	b510      	push	{r4, lr}
 8087bd2:	4604      	mov	r4, r0
	return defaultWireConfig();
 8087bd4:	f7ff ffe4 	bl	8087ba0 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
}
 8087bd8:	4620      	mov	r0, r4
 8087bda:	bd10      	pop	{r4, pc}

08087bdc <_Z18acquireWire3Bufferv>:
 8087bdc:	b510      	push	{r4, lr}
 8087bde:	4604      	mov	r4, r0
 8087be0:	f7ff ffde 	bl	8087ba0 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
 8087be4:	4620      	mov	r0, r4
 8087be6:	bd10      	pop	{r4, pc}

08087be8 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 8087be8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 8087bea:	4d0f      	ldr	r5, [pc, #60]	; (8087c28 <_Z19__fetch_global_Wirev+0x40>)
{
 8087bec:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 8087bee:	7829      	ldrb	r1, [r5, #0]
 8087bf0:	f3bf 8f5b 	dmb	ish
 8087bf4:	f011 0401 	ands.w	r4, r1, #1
 8087bf8:	d113      	bne.n	8087c22 <_Z19__fetch_global_Wirev+0x3a>
 8087bfa:	4628      	mov	r0, r5
 8087bfc:	f7f8 fa6e 	bl	80800dc <__cxa_guard_acquire>
 8087c00:	b178      	cbz	r0, 8087c22 <_Z19__fetch_global_Wirev+0x3a>
 8087c02:	a801      	add	r0, sp, #4
 8087c04:	f7ff ffe4 	bl	8087bd0 <_Z17acquireWireBufferv>
 8087c08:	4621      	mov	r1, r4
 8087c0a:	aa01      	add	r2, sp, #4
 8087c0c:	4807      	ldr	r0, [pc, #28]	; (8087c2c <_Z19__fetch_global_Wirev+0x44>)
 8087c0e:	f7ff fbdd 	bl	80873cc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 8087c12:	4628      	mov	r0, r5
 8087c14:	f7f8 fa67 	bl	80800e6 <__cxa_guard_release>
 8087c18:	4a05      	ldr	r2, [pc, #20]	; (8087c30 <_Z19__fetch_global_Wirev+0x48>)
 8087c1a:	4906      	ldr	r1, [pc, #24]	; (8087c34 <_Z19__fetch_global_Wirev+0x4c>)
 8087c1c:	4803      	ldr	r0, [pc, #12]	; (8087c2c <_Z19__fetch_global_Wirev+0x44>)
 8087c1e:	f000 f833 	bl	8087c88 <__aeabi_atexit>
	return wire;
}
 8087c22:	4802      	ldr	r0, [pc, #8]	; (8087c2c <_Z19__fetch_global_Wirev+0x44>)
 8087c24:	b007      	add	sp, #28
 8087c26:	bd30      	pop	{r4, r5, pc}
 8087c28:	20000560 	.word	0x20000560
 8087c2c:	20000568 	.word	0x20000568
 8087c30:	20000130 	.word	0x20000130
 8087c34:	08087375 	.word	0x08087375

08087c38 <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 8087c38:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 8087c3a:	4c0f      	ldr	r4, [pc, #60]	; (8087c78 <_Z20__fetch_global_Wire3v+0x40>)
{
 8087c3c:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 8087c3e:	7823      	ldrb	r3, [r4, #0]
 8087c40:	f3bf 8f5b 	dmb	ish
 8087c44:	07db      	lsls	r3, r3, #31
 8087c46:	d413      	bmi.n	8087c70 <_Z20__fetch_global_Wire3v+0x38>
 8087c48:	4620      	mov	r0, r4
 8087c4a:	f7f8 fa47 	bl	80800dc <__cxa_guard_acquire>
 8087c4e:	b178      	cbz	r0, 8087c70 <_Z20__fetch_global_Wire3v+0x38>
 8087c50:	a801      	add	r0, sp, #4
 8087c52:	f7ff ffc3 	bl	8087bdc <_Z18acquireWire3Bufferv>
 8087c56:	2102      	movs	r1, #2
 8087c58:	aa01      	add	r2, sp, #4
 8087c5a:	4808      	ldr	r0, [pc, #32]	; (8087c7c <_Z20__fetch_global_Wire3v+0x44>)
 8087c5c:	f7ff fbb6 	bl	80873cc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 8087c60:	4620      	mov	r0, r4
 8087c62:	f7f8 fa40 	bl	80800e6 <__cxa_guard_release>
 8087c66:	4a06      	ldr	r2, [pc, #24]	; (8087c80 <_Z20__fetch_global_Wire3v+0x48>)
 8087c68:	4906      	ldr	r1, [pc, #24]	; (8087c84 <_Z20__fetch_global_Wire3v+0x4c>)
 8087c6a:	4804      	ldr	r0, [pc, #16]	; (8087c7c <_Z20__fetch_global_Wire3v+0x44>)
 8087c6c:	f000 f80c 	bl	8087c88 <__aeabi_atexit>
	return wire;
}
 8087c70:	4802      	ldr	r0, [pc, #8]	; (8087c7c <_Z20__fetch_global_Wire3v+0x44>)
 8087c72:	b006      	add	sp, #24
 8087c74:	bd10      	pop	{r4, pc}
 8087c76:	bf00      	nop
 8087c78:	20000564 	.word	0x20000564
 8087c7c:	2000057c 	.word	0x2000057c
 8087c80:	20000130 	.word	0x20000130
 8087c84:	08087375 	.word	0x08087375

08087c88 <__aeabi_atexit>:
 8087c88:	460b      	mov	r3, r1
 8087c8a:	4601      	mov	r1, r0
 8087c8c:	4618      	mov	r0, r3
 8087c8e:	f001 b971 	b.w	8088f74 <__cxa_atexit>

08087c92 <_ZdlPvj>:
 8087c92:	f7f8 ba16 	b.w	80800c2 <_ZdlPv>

08087c96 <_ZnwjRKSt9nothrow_t>:
 8087c96:	f7f8 ba10 	b.w	80800ba <_Znwj>

08087c9a <_ZnajRKSt9nothrow_t>:
 8087c9a:	f7f8 ba10 	b.w	80800be <_Znaj>

08087c9e <_ZSt25__throw_bad_function_callv>:
 8087c9e:	b508      	push	{r3, lr}
 8087ca0:	f7fc fe4a 	bl	8084938 <abort>

08087ca4 <sqrt>:
 8087ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8087ca8:	b08b      	sub	sp, #44	; 0x2c
 8087caa:	4604      	mov	r4, r0
 8087cac:	460d      	mov	r5, r1
 8087cae:	f000 f859 	bl	8087d64 <__ieee754_sqrt>
 8087cb2:	4b2a      	ldr	r3, [pc, #168]	; (8087d5c <sqrt+0xb8>)
 8087cb4:	4606      	mov	r6, r0
 8087cb6:	f993 b000 	ldrsb.w	fp, [r3]
 8087cba:	460f      	mov	r7, r1
 8087cbc:	f1bb 3fff 	cmp.w	fp, #4294967295
 8087cc0:	d012      	beq.n	8087ce8 <sqrt+0x44>
 8087cc2:	4622      	mov	r2, r4
 8087cc4:	462b      	mov	r3, r5
 8087cc6:	4620      	mov	r0, r4
 8087cc8:	4629      	mov	r1, r5
 8087cca:	f000 fd67 	bl	808879c <__aeabi_dcmpun>
 8087cce:	4682      	mov	sl, r0
 8087cd0:	b950      	cbnz	r0, 8087ce8 <sqrt+0x44>
 8087cd2:	f04f 0800 	mov.w	r8, #0
 8087cd6:	f04f 0900 	mov.w	r9, #0
 8087cda:	4620      	mov	r0, r4
 8087cdc:	4629      	mov	r1, r5
 8087cde:	4642      	mov	r2, r8
 8087ce0:	464b      	mov	r3, r9
 8087ce2:	f000 fd33 	bl	808874c <__aeabi_dcmplt>
 8087ce6:	b920      	cbnz	r0, 8087cf2 <sqrt+0x4e>
 8087ce8:	4630      	mov	r0, r6
 8087cea:	4639      	mov	r1, r7
 8087cec:	b00b      	add	sp, #44	; 0x2c
 8087cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8087cf2:	2201      	movs	r2, #1
 8087cf4:	4b1a      	ldr	r3, [pc, #104]	; (8087d60 <sqrt+0xbc>)
 8087cf6:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8087cfa:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8087cfe:	e9cd 2300 	strd	r2, r3, [sp]
 8087d02:	f8cd a020 	str.w	sl, [sp, #32]
 8087d06:	f1bb 0f00 	cmp.w	fp, #0
 8087d0a:	d017      	beq.n	8087d3c <sqrt+0x98>
 8087d0c:	4642      	mov	r2, r8
 8087d0e:	464b      	mov	r3, r9
 8087d10:	4640      	mov	r0, r8
 8087d12:	4649      	mov	r1, r9
 8087d14:	f000 fbd2 	bl	80884bc <__aeabi_ddiv>
 8087d18:	f1bb 0f02 	cmp.w	fp, #2
 8087d1c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8087d20:	d10e      	bne.n	8087d40 <sqrt+0x9c>
 8087d22:	f7fc fe19 	bl	8084958 <__errno>
 8087d26:	2321      	movs	r3, #33	; 0x21
 8087d28:	6003      	str	r3, [r0, #0]
 8087d2a:	9b08      	ldr	r3, [sp, #32]
 8087d2c:	b983      	cbnz	r3, 8087d50 <sqrt+0xac>
 8087d2e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8087d32:	4630      	mov	r0, r6
 8087d34:	4639      	mov	r1, r7
 8087d36:	b00b      	add	sp, #44	; 0x2c
 8087d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8087d3c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8087d40:	4668      	mov	r0, sp
 8087d42:	f000 f8d3 	bl	8087eec <matherr>
 8087d46:	2800      	cmp	r0, #0
 8087d48:	d0eb      	beq.n	8087d22 <sqrt+0x7e>
 8087d4a:	9b08      	ldr	r3, [sp, #32]
 8087d4c:	2b00      	cmp	r3, #0
 8087d4e:	d0ee      	beq.n	8087d2e <sqrt+0x8a>
 8087d50:	f7fc fe02 	bl	8084958 <__errno>
 8087d54:	9b08      	ldr	r3, [sp, #32]
 8087d56:	6003      	str	r3, [r0, #0]
 8087d58:	e7e9      	b.n	8087d2e <sqrt+0x8a>
 8087d5a:	bf00      	nop
 8087d5c:	200000c8 	.word	0x200000c8
 8087d60:	08089fa8 	.word	0x08089fa8

08087d64 <__ieee754_sqrt>:
 8087d64:	4a60      	ldr	r2, [pc, #384]	; (8087ee8 <__ieee754_sqrt+0x184>)
 8087d66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8087d6a:	438a      	bics	r2, r1
 8087d6c:	460e      	mov	r6, r1
 8087d6e:	4605      	mov	r5, r0
 8087d70:	f000 8097 	beq.w	8087ea2 <__ieee754_sqrt+0x13e>
 8087d74:	2900      	cmp	r1, #0
 8087d76:	460b      	mov	r3, r1
 8087d78:	4604      	mov	r4, r0
 8087d7a:	dd4e      	ble.n	8087e1a <__ieee754_sqrt+0xb6>
 8087d7c:	1509      	asrs	r1, r1, #20
 8087d7e:	d05a      	beq.n	8087e36 <__ieee754_sqrt+0xd2>
 8087d80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8087d84:	07ca      	lsls	r2, r1, #31
 8087d86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8087d8a:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
 8087d8e:	d403      	bmi.n	8087d98 <__ieee754_sqrt+0x34>
 8087d90:	005b      	lsls	r3, r3, #1
 8087d92:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8087d96:	0064      	lsls	r4, r4, #1
 8087d98:	f04f 0c00 	mov.w	ip, #0
 8087d9c:	2516      	movs	r5, #22
 8087d9e:	4666      	mov	r6, ip
 8087da0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8087da4:	0fe1      	lsrs	r1, r4, #31
 8087da6:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 8087daa:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8087dae:	0064      	lsls	r4, r4, #1
 8087db0:	18b1      	adds	r1, r6, r2
 8087db2:	4299      	cmp	r1, r3
 8087db4:	dc02      	bgt.n	8087dbc <__ieee754_sqrt+0x58>
 8087db6:	1a5b      	subs	r3, r3, r1
 8087db8:	188e      	adds	r6, r1, r2
 8087dba:	4494      	add	ip, r2
 8087dbc:	005b      	lsls	r3, r3, #1
 8087dbe:	3d01      	subs	r5, #1
 8087dc0:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8087dc4:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8087dc8:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8087dcc:	d1f0      	bne.n	8087db0 <__ieee754_sqrt+0x4c>
 8087dce:	462f      	mov	r7, r5
 8087dd0:	2020      	movs	r0, #32
 8087dd2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8087dd6:	e009      	b.n	8087dec <__ieee754_sqrt+0x88>
 8087dd8:	d03d      	beq.n	8087e56 <__ieee754_sqrt+0xf2>
 8087dda:	0fe1      	lsrs	r1, r4, #31
 8087ddc:	3801      	subs	r0, #1
 8087dde:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8087de2:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8087de6:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8087dea:	d03d      	beq.n	8087e68 <__ieee754_sqrt+0x104>
 8087dec:	42b3      	cmp	r3, r6
 8087dee:	eb02 0105 	add.w	r1, r2, r5
 8087df2:	ddf1      	ble.n	8087dd8 <__ieee754_sqrt+0x74>
 8087df4:	2900      	cmp	r1, #0
 8087df6:	eb01 0502 	add.w	r5, r1, r2
 8087dfa:	db09      	blt.n	8087e10 <__ieee754_sqrt+0xac>
 8087dfc:	46b0      	mov	r8, r6
 8087dfe:	1b9b      	subs	r3, r3, r6
 8087e00:	42a1      	cmp	r1, r4
 8087e02:	bf88      	it	hi
 8087e04:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8087e08:	4646      	mov	r6, r8
 8087e0a:	1a64      	subs	r4, r4, r1
 8087e0c:	4417      	add	r7, r2
 8087e0e:	e7e4      	b.n	8087dda <__ieee754_sqrt+0x76>
 8087e10:	2d00      	cmp	r5, #0
 8087e12:	dbf3      	blt.n	8087dfc <__ieee754_sqrt+0x98>
 8087e14:	f106 0801 	add.w	r8, r6, #1
 8087e18:	e7f1      	b.n	8087dfe <__ieee754_sqrt+0x9a>
 8087e1a:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8087e1e:	4302      	orrs	r2, r0
 8087e20:	d057      	beq.n	8087ed2 <__ieee754_sqrt+0x16e>
 8087e22:	2900      	cmp	r1, #0
 8087e24:	d14b      	bne.n	8087ebe <__ieee754_sqrt+0x15a>
 8087e26:	0ae2      	lsrs	r2, r4, #11
 8087e28:	4613      	mov	r3, r2
 8087e2a:	3915      	subs	r1, #21
 8087e2c:	0564      	lsls	r4, r4, #21
 8087e2e:	2a00      	cmp	r2, #0
 8087e30:	d0f9      	beq.n	8087e26 <__ieee754_sqrt+0xc2>
 8087e32:	02d7      	lsls	r7, r2, #11
 8087e34:	d452      	bmi.n	8087edc <__ieee754_sqrt+0x178>
 8087e36:	2000      	movs	r0, #0
 8087e38:	005b      	lsls	r3, r3, #1
 8087e3a:	02de      	lsls	r6, r3, #11
 8087e3c:	4605      	mov	r5, r0
 8087e3e:	f100 0001 	add.w	r0, r0, #1
 8087e42:	d5f9      	bpl.n	8087e38 <__ieee754_sqrt+0xd4>
 8087e44:	461a      	mov	r2, r3
 8087e46:	4623      	mov	r3, r4
 8087e48:	4084      	lsls	r4, r0
 8087e4a:	f1c0 0020 	rsb	r0, r0, #32
 8087e4e:	40c3      	lsrs	r3, r0
 8087e50:	4313      	orrs	r3, r2
 8087e52:	1b49      	subs	r1, r1, r5
 8087e54:	e794      	b.n	8087d80 <__ieee754_sqrt+0x1c>
 8087e56:	42a1      	cmp	r1, r4
 8087e58:	d8bf      	bhi.n	8087dda <__ieee754_sqrt+0x76>
 8087e5a:	2900      	cmp	r1, #0
 8087e5c:	eb01 0502 	add.w	r5, r1, r2
 8087e60:	dbd6      	blt.n	8087e10 <__ieee754_sqrt+0xac>
 8087e62:	4698      	mov	r8, r3
 8087e64:	2300      	movs	r3, #0
 8087e66:	e7cf      	b.n	8087e08 <__ieee754_sqrt+0xa4>
 8087e68:	4323      	orrs	r3, r4
 8087e6a:	d113      	bne.n	8087e94 <__ieee754_sqrt+0x130>
 8087e6c:	0878      	lsrs	r0, r7, #1
 8087e6e:	ea4f 036c 	mov.w	r3, ip, asr #1
 8087e72:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8087e76:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8087e7a:	f01c 0f01 	tst.w	ip, #1
 8087e7e:	bf18      	it	ne
 8087e80:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
 8087e84:	eb03 550e 	add.w	r5, r3, lr, lsl #20
 8087e88:	4602      	mov	r2, r0
 8087e8a:	462b      	mov	r3, r5
 8087e8c:	4610      	mov	r0, r2
 8087e8e:	4619      	mov	r1, r3
 8087e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8087e94:	1c7b      	adds	r3, r7, #1
 8087e96:	bf16      	itet	ne
 8087e98:	1c78      	addne	r0, r7, #1
 8087e9a:	f10c 0c01 	addeq.w	ip, ip, #1
 8087e9e:	0840      	lsrne	r0, r0, #1
 8087ea0:	e7e5      	b.n	8087e6e <__ieee754_sqrt+0x10a>
 8087ea2:	4602      	mov	r2, r0
 8087ea4:	460b      	mov	r3, r1
 8087ea6:	f000 f9df 	bl	8088268 <__aeabi_dmul>
 8087eaa:	462a      	mov	r2, r5
 8087eac:	4633      	mov	r3, r6
 8087eae:	f000 f825 	bl	8087efc <__adddf3>
 8087eb2:	4602      	mov	r2, r0
 8087eb4:	460b      	mov	r3, r1
 8087eb6:	4610      	mov	r0, r2
 8087eb8:	4619      	mov	r1, r3
 8087eba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8087ebe:	4602      	mov	r2, r0
 8087ec0:	f000 f81a 	bl	8087ef8 <__aeabi_dsub>
 8087ec4:	4602      	mov	r2, r0
 8087ec6:	460b      	mov	r3, r1
 8087ec8:	f000 faf8 	bl	80884bc <__aeabi_ddiv>
 8087ecc:	4602      	mov	r2, r0
 8087ece:	460b      	mov	r3, r1
 8087ed0:	e7dc      	b.n	8087e8c <__ieee754_sqrt+0x128>
 8087ed2:	4602      	mov	r2, r0
 8087ed4:	4619      	mov	r1, r3
 8087ed6:	4610      	mov	r0, r2
 8087ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8087edc:	4623      	mov	r3, r4
 8087ede:	2020      	movs	r0, #32
 8087ee0:	f04f 35ff 	mov.w	r5, #4294967295
 8087ee4:	e7b3      	b.n	8087e4e <__ieee754_sqrt+0xea>
 8087ee6:	bf00      	nop
 8087ee8:	7ff00000 	.word	0x7ff00000

08087eec <matherr>:
 8087eec:	2000      	movs	r0, #0
 8087eee:	4770      	bx	lr

08087ef0 <__aeabi_drsub>:
 8087ef0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8087ef4:	e002      	b.n	8087efc <__adddf3>
 8087ef6:	bf00      	nop

08087ef8 <__aeabi_dsub>:
 8087ef8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08087efc <__adddf3>:
 8087efc:	b530      	push	{r4, r5, lr}
 8087efe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8087f02:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8087f06:	ea94 0f05 	teq	r4, r5
 8087f0a:	bf08      	it	eq
 8087f0c:	ea90 0f02 	teqeq	r0, r2
 8087f10:	bf1f      	itttt	ne
 8087f12:	ea54 0c00 	orrsne.w	ip, r4, r0
 8087f16:	ea55 0c02 	orrsne.w	ip, r5, r2
 8087f1a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8087f1e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8087f22:	f000 80e2 	beq.w	80880ea <__adddf3+0x1ee>
 8087f26:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8087f2a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8087f2e:	bfb8      	it	lt
 8087f30:	426d      	neglt	r5, r5
 8087f32:	dd0c      	ble.n	8087f4e <__adddf3+0x52>
 8087f34:	442c      	add	r4, r5
 8087f36:	ea80 0202 	eor.w	r2, r0, r2
 8087f3a:	ea81 0303 	eor.w	r3, r1, r3
 8087f3e:	ea82 0000 	eor.w	r0, r2, r0
 8087f42:	ea83 0101 	eor.w	r1, r3, r1
 8087f46:	ea80 0202 	eor.w	r2, r0, r2
 8087f4a:	ea81 0303 	eor.w	r3, r1, r3
 8087f4e:	2d36      	cmp	r5, #54	; 0x36
 8087f50:	bf88      	it	hi
 8087f52:	bd30      	pophi	{r4, r5, pc}
 8087f54:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8087f58:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8087f5c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8087f60:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8087f64:	d002      	beq.n	8087f6c <__adddf3+0x70>
 8087f66:	4240      	negs	r0, r0
 8087f68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8087f6c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8087f70:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8087f74:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8087f78:	d002      	beq.n	8087f80 <__adddf3+0x84>
 8087f7a:	4252      	negs	r2, r2
 8087f7c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8087f80:	ea94 0f05 	teq	r4, r5
 8087f84:	f000 80a7 	beq.w	80880d6 <__adddf3+0x1da>
 8087f88:	f1a4 0401 	sub.w	r4, r4, #1
 8087f8c:	f1d5 0e20 	rsbs	lr, r5, #32
 8087f90:	db0d      	blt.n	8087fae <__adddf3+0xb2>
 8087f92:	fa02 fc0e 	lsl.w	ip, r2, lr
 8087f96:	fa22 f205 	lsr.w	r2, r2, r5
 8087f9a:	1880      	adds	r0, r0, r2
 8087f9c:	f141 0100 	adc.w	r1, r1, #0
 8087fa0:	fa03 f20e 	lsl.w	r2, r3, lr
 8087fa4:	1880      	adds	r0, r0, r2
 8087fa6:	fa43 f305 	asr.w	r3, r3, r5
 8087faa:	4159      	adcs	r1, r3
 8087fac:	e00e      	b.n	8087fcc <__adddf3+0xd0>
 8087fae:	f1a5 0520 	sub.w	r5, r5, #32
 8087fb2:	f10e 0e20 	add.w	lr, lr, #32
 8087fb6:	2a01      	cmp	r2, #1
 8087fb8:	fa03 fc0e 	lsl.w	ip, r3, lr
 8087fbc:	bf28      	it	cs
 8087fbe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8087fc2:	fa43 f305 	asr.w	r3, r3, r5
 8087fc6:	18c0      	adds	r0, r0, r3
 8087fc8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8087fcc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8087fd0:	d507      	bpl.n	8087fe2 <__adddf3+0xe6>
 8087fd2:	f04f 0e00 	mov.w	lr, #0
 8087fd6:	f1dc 0c00 	rsbs	ip, ip, #0
 8087fda:	eb7e 0000 	sbcs.w	r0, lr, r0
 8087fde:	eb6e 0101 	sbc.w	r1, lr, r1
 8087fe2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8087fe6:	d31b      	bcc.n	8088020 <__adddf3+0x124>
 8087fe8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8087fec:	d30c      	bcc.n	8088008 <__adddf3+0x10c>
 8087fee:	0849      	lsrs	r1, r1, #1
 8087ff0:	ea5f 0030 	movs.w	r0, r0, rrx
 8087ff4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8087ff8:	f104 0401 	add.w	r4, r4, #1
 8087ffc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8088000:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8088004:	f080 809a 	bcs.w	808813c <__adddf3+0x240>
 8088008:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 808800c:	bf08      	it	eq
 808800e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8088012:	f150 0000 	adcs.w	r0, r0, #0
 8088016:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808801a:	ea41 0105 	orr.w	r1, r1, r5
 808801e:	bd30      	pop	{r4, r5, pc}
 8088020:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8088024:	4140      	adcs	r0, r0
 8088026:	eb41 0101 	adc.w	r1, r1, r1
 808802a:	3c01      	subs	r4, #1
 808802c:	bf28      	it	cs
 808802e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8088032:	d2e9      	bcs.n	8088008 <__adddf3+0x10c>
 8088034:	f091 0f00 	teq	r1, #0
 8088038:	bf04      	itt	eq
 808803a:	4601      	moveq	r1, r0
 808803c:	2000      	moveq	r0, #0
 808803e:	fab1 f381 	clz	r3, r1
 8088042:	bf08      	it	eq
 8088044:	3320      	addeq	r3, #32
 8088046:	f1a3 030b 	sub.w	r3, r3, #11
 808804a:	f1b3 0220 	subs.w	r2, r3, #32
 808804e:	da0c      	bge.n	808806a <__adddf3+0x16e>
 8088050:	320c      	adds	r2, #12
 8088052:	dd08      	ble.n	8088066 <__adddf3+0x16a>
 8088054:	f102 0c14 	add.w	ip, r2, #20
 8088058:	f1c2 020c 	rsb	r2, r2, #12
 808805c:	fa01 f00c 	lsl.w	r0, r1, ip
 8088060:	fa21 f102 	lsr.w	r1, r1, r2
 8088064:	e00c      	b.n	8088080 <__adddf3+0x184>
 8088066:	f102 0214 	add.w	r2, r2, #20
 808806a:	bfd8      	it	le
 808806c:	f1c2 0c20 	rsble	ip, r2, #32
 8088070:	fa01 f102 	lsl.w	r1, r1, r2
 8088074:	fa20 fc0c 	lsr.w	ip, r0, ip
 8088078:	bfdc      	itt	le
 808807a:	ea41 010c 	orrle.w	r1, r1, ip
 808807e:	4090      	lslle	r0, r2
 8088080:	1ae4      	subs	r4, r4, r3
 8088082:	bfa2      	ittt	ge
 8088084:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8088088:	4329      	orrge	r1, r5
 808808a:	bd30      	popge	{r4, r5, pc}
 808808c:	ea6f 0404 	mvn.w	r4, r4
 8088090:	3c1f      	subs	r4, #31
 8088092:	da1c      	bge.n	80880ce <__adddf3+0x1d2>
 8088094:	340c      	adds	r4, #12
 8088096:	dc0e      	bgt.n	80880b6 <__adddf3+0x1ba>
 8088098:	f104 0414 	add.w	r4, r4, #20
 808809c:	f1c4 0220 	rsb	r2, r4, #32
 80880a0:	fa20 f004 	lsr.w	r0, r0, r4
 80880a4:	fa01 f302 	lsl.w	r3, r1, r2
 80880a8:	ea40 0003 	orr.w	r0, r0, r3
 80880ac:	fa21 f304 	lsr.w	r3, r1, r4
 80880b0:	ea45 0103 	orr.w	r1, r5, r3
 80880b4:	bd30      	pop	{r4, r5, pc}
 80880b6:	f1c4 040c 	rsb	r4, r4, #12
 80880ba:	f1c4 0220 	rsb	r2, r4, #32
 80880be:	fa20 f002 	lsr.w	r0, r0, r2
 80880c2:	fa01 f304 	lsl.w	r3, r1, r4
 80880c6:	ea40 0003 	orr.w	r0, r0, r3
 80880ca:	4629      	mov	r1, r5
 80880cc:	bd30      	pop	{r4, r5, pc}
 80880ce:	fa21 f004 	lsr.w	r0, r1, r4
 80880d2:	4629      	mov	r1, r5
 80880d4:	bd30      	pop	{r4, r5, pc}
 80880d6:	f094 0f00 	teq	r4, #0
 80880da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80880de:	bf06      	itte	eq
 80880e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80880e4:	3401      	addeq	r4, #1
 80880e6:	3d01      	subne	r5, #1
 80880e8:	e74e      	b.n	8087f88 <__adddf3+0x8c>
 80880ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80880ee:	bf18      	it	ne
 80880f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80880f4:	d029      	beq.n	808814a <__adddf3+0x24e>
 80880f6:	ea94 0f05 	teq	r4, r5
 80880fa:	bf08      	it	eq
 80880fc:	ea90 0f02 	teqeq	r0, r2
 8088100:	d005      	beq.n	808810e <__adddf3+0x212>
 8088102:	ea54 0c00 	orrs.w	ip, r4, r0
 8088106:	bf04      	itt	eq
 8088108:	4619      	moveq	r1, r3
 808810a:	4610      	moveq	r0, r2
 808810c:	bd30      	pop	{r4, r5, pc}
 808810e:	ea91 0f03 	teq	r1, r3
 8088112:	bf1e      	ittt	ne
 8088114:	2100      	movne	r1, #0
 8088116:	2000      	movne	r0, #0
 8088118:	bd30      	popne	{r4, r5, pc}
 808811a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 808811e:	d105      	bne.n	808812c <__adddf3+0x230>
 8088120:	0040      	lsls	r0, r0, #1
 8088122:	4149      	adcs	r1, r1
 8088124:	bf28      	it	cs
 8088126:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 808812a:	bd30      	pop	{r4, r5, pc}
 808812c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8088130:	bf3c      	itt	cc
 8088132:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8088136:	bd30      	popcc	{r4, r5, pc}
 8088138:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 808813c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8088140:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8088144:	f04f 0000 	mov.w	r0, #0
 8088148:	bd30      	pop	{r4, r5, pc}
 808814a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 808814e:	bf1a      	itte	ne
 8088150:	4619      	movne	r1, r3
 8088152:	4610      	movne	r0, r2
 8088154:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8088158:	bf1c      	itt	ne
 808815a:	460b      	movne	r3, r1
 808815c:	4602      	movne	r2, r0
 808815e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8088162:	bf06      	itte	eq
 8088164:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8088168:	ea91 0f03 	teqeq	r1, r3
 808816c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8088170:	bd30      	pop	{r4, r5, pc}
 8088172:	bf00      	nop

08088174 <__aeabi_ui2d>:
 8088174:	f090 0f00 	teq	r0, #0
 8088178:	bf04      	itt	eq
 808817a:	2100      	moveq	r1, #0
 808817c:	4770      	bxeq	lr
 808817e:	b530      	push	{r4, r5, lr}
 8088180:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8088184:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8088188:	f04f 0500 	mov.w	r5, #0
 808818c:	f04f 0100 	mov.w	r1, #0
 8088190:	e750      	b.n	8088034 <__adddf3+0x138>
 8088192:	bf00      	nop

08088194 <__aeabi_i2d>:
 8088194:	f090 0f00 	teq	r0, #0
 8088198:	bf04      	itt	eq
 808819a:	2100      	moveq	r1, #0
 808819c:	4770      	bxeq	lr
 808819e:	b530      	push	{r4, r5, lr}
 80881a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80881a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80881a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80881ac:	bf48      	it	mi
 80881ae:	4240      	negmi	r0, r0
 80881b0:	f04f 0100 	mov.w	r1, #0
 80881b4:	e73e      	b.n	8088034 <__adddf3+0x138>
 80881b6:	bf00      	nop

080881b8 <__aeabi_f2d>:
 80881b8:	0042      	lsls	r2, r0, #1
 80881ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80881be:	ea4f 0131 	mov.w	r1, r1, rrx
 80881c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80881c6:	bf1f      	itttt	ne
 80881c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80881cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80881d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80881d4:	4770      	bxne	lr
 80881d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80881da:	bf08      	it	eq
 80881dc:	4770      	bxeq	lr
 80881de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80881e2:	bf04      	itt	eq
 80881e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80881e8:	4770      	bxeq	lr
 80881ea:	b530      	push	{r4, r5, lr}
 80881ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80881f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80881f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80881f8:	e71c      	b.n	8088034 <__adddf3+0x138>
 80881fa:	bf00      	nop

080881fc <__aeabi_ul2d>:
 80881fc:	ea50 0201 	orrs.w	r2, r0, r1
 8088200:	bf08      	it	eq
 8088202:	4770      	bxeq	lr
 8088204:	b530      	push	{r4, r5, lr}
 8088206:	f04f 0500 	mov.w	r5, #0
 808820a:	e00a      	b.n	8088222 <__aeabi_l2d+0x16>

0808820c <__aeabi_l2d>:
 808820c:	ea50 0201 	orrs.w	r2, r0, r1
 8088210:	bf08      	it	eq
 8088212:	4770      	bxeq	lr
 8088214:	b530      	push	{r4, r5, lr}
 8088216:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 808821a:	d502      	bpl.n	8088222 <__aeabi_l2d+0x16>
 808821c:	4240      	negs	r0, r0
 808821e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8088222:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8088226:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808822a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 808822e:	f43f aed8 	beq.w	8087fe2 <__adddf3+0xe6>
 8088232:	f04f 0203 	mov.w	r2, #3
 8088236:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 808823a:	bf18      	it	ne
 808823c:	3203      	addne	r2, #3
 808823e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8088242:	bf18      	it	ne
 8088244:	3203      	addne	r2, #3
 8088246:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 808824a:	f1c2 0320 	rsb	r3, r2, #32
 808824e:	fa00 fc03 	lsl.w	ip, r0, r3
 8088252:	fa20 f002 	lsr.w	r0, r0, r2
 8088256:	fa01 fe03 	lsl.w	lr, r1, r3
 808825a:	ea40 000e 	orr.w	r0, r0, lr
 808825e:	fa21 f102 	lsr.w	r1, r1, r2
 8088262:	4414      	add	r4, r2
 8088264:	e6bd      	b.n	8087fe2 <__adddf3+0xe6>
 8088266:	bf00      	nop

08088268 <__aeabi_dmul>:
 8088268:	b570      	push	{r4, r5, r6, lr}
 808826a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808826e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8088272:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8088276:	bf1d      	ittte	ne
 8088278:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 808827c:	ea94 0f0c 	teqne	r4, ip
 8088280:	ea95 0f0c 	teqne	r5, ip
 8088284:	f000 f8de 	bleq	8088444 <__aeabi_dmul+0x1dc>
 8088288:	442c      	add	r4, r5
 808828a:	ea81 0603 	eor.w	r6, r1, r3
 808828e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8088292:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8088296:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 808829a:	bf18      	it	ne
 808829c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80882a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80882a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80882a8:	d038      	beq.n	808831c <__aeabi_dmul+0xb4>
 80882aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80882ae:	f04f 0500 	mov.w	r5, #0
 80882b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80882b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80882ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80882be:	f04f 0600 	mov.w	r6, #0
 80882c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80882c6:	f09c 0f00 	teq	ip, #0
 80882ca:	bf18      	it	ne
 80882cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80882d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80882d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80882d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80882dc:	d204      	bcs.n	80882e8 <__aeabi_dmul+0x80>
 80882de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80882e2:	416d      	adcs	r5, r5
 80882e4:	eb46 0606 	adc.w	r6, r6, r6
 80882e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80882ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80882f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80882f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80882f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80882fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8088300:	bf88      	it	hi
 8088302:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8088306:	d81e      	bhi.n	8088346 <__aeabi_dmul+0xde>
 8088308:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 808830c:	bf08      	it	eq
 808830e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8088312:	f150 0000 	adcs.w	r0, r0, #0
 8088316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808831a:	bd70      	pop	{r4, r5, r6, pc}
 808831c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8088320:	ea46 0101 	orr.w	r1, r6, r1
 8088324:	ea40 0002 	orr.w	r0, r0, r2
 8088328:	ea81 0103 	eor.w	r1, r1, r3
 808832c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8088330:	bfc2      	ittt	gt
 8088332:	ebd4 050c 	rsbsgt	r5, r4, ip
 8088336:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 808833a:	bd70      	popgt	{r4, r5, r6, pc}
 808833c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8088340:	f04f 0e00 	mov.w	lr, #0
 8088344:	3c01      	subs	r4, #1
 8088346:	f300 80ab 	bgt.w	80884a0 <__aeabi_dmul+0x238>
 808834a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 808834e:	bfde      	ittt	le
 8088350:	2000      	movle	r0, #0
 8088352:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8088356:	bd70      	pople	{r4, r5, r6, pc}
 8088358:	f1c4 0400 	rsb	r4, r4, #0
 808835c:	3c20      	subs	r4, #32
 808835e:	da35      	bge.n	80883cc <__aeabi_dmul+0x164>
 8088360:	340c      	adds	r4, #12
 8088362:	dc1b      	bgt.n	808839c <__aeabi_dmul+0x134>
 8088364:	f104 0414 	add.w	r4, r4, #20
 8088368:	f1c4 0520 	rsb	r5, r4, #32
 808836c:	fa00 f305 	lsl.w	r3, r0, r5
 8088370:	fa20 f004 	lsr.w	r0, r0, r4
 8088374:	fa01 f205 	lsl.w	r2, r1, r5
 8088378:	ea40 0002 	orr.w	r0, r0, r2
 808837c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8088380:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8088384:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8088388:	fa21 f604 	lsr.w	r6, r1, r4
 808838c:	eb42 0106 	adc.w	r1, r2, r6
 8088390:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8088394:	bf08      	it	eq
 8088396:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808839a:	bd70      	pop	{r4, r5, r6, pc}
 808839c:	f1c4 040c 	rsb	r4, r4, #12
 80883a0:	f1c4 0520 	rsb	r5, r4, #32
 80883a4:	fa00 f304 	lsl.w	r3, r0, r4
 80883a8:	fa20 f005 	lsr.w	r0, r0, r5
 80883ac:	fa01 f204 	lsl.w	r2, r1, r4
 80883b0:	ea40 0002 	orr.w	r0, r0, r2
 80883b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80883b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80883bc:	f141 0100 	adc.w	r1, r1, #0
 80883c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80883c4:	bf08      	it	eq
 80883c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80883ca:	bd70      	pop	{r4, r5, r6, pc}
 80883cc:	f1c4 0520 	rsb	r5, r4, #32
 80883d0:	fa00 f205 	lsl.w	r2, r0, r5
 80883d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80883d8:	fa20 f304 	lsr.w	r3, r0, r4
 80883dc:	fa01 f205 	lsl.w	r2, r1, r5
 80883e0:	ea43 0302 	orr.w	r3, r3, r2
 80883e4:	fa21 f004 	lsr.w	r0, r1, r4
 80883e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80883ec:	fa21 f204 	lsr.w	r2, r1, r4
 80883f0:	ea20 0002 	bic.w	r0, r0, r2
 80883f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80883f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80883fc:	bf08      	it	eq
 80883fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8088402:	bd70      	pop	{r4, r5, r6, pc}
 8088404:	f094 0f00 	teq	r4, #0
 8088408:	d10f      	bne.n	808842a <__aeabi_dmul+0x1c2>
 808840a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 808840e:	0040      	lsls	r0, r0, #1
 8088410:	eb41 0101 	adc.w	r1, r1, r1
 8088414:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8088418:	bf08      	it	eq
 808841a:	3c01      	subeq	r4, #1
 808841c:	d0f7      	beq.n	808840e <__aeabi_dmul+0x1a6>
 808841e:	ea41 0106 	orr.w	r1, r1, r6
 8088422:	f095 0f00 	teq	r5, #0
 8088426:	bf18      	it	ne
 8088428:	4770      	bxne	lr
 808842a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 808842e:	0052      	lsls	r2, r2, #1
 8088430:	eb43 0303 	adc.w	r3, r3, r3
 8088434:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8088438:	bf08      	it	eq
 808843a:	3d01      	subeq	r5, #1
 808843c:	d0f7      	beq.n	808842e <__aeabi_dmul+0x1c6>
 808843e:	ea43 0306 	orr.w	r3, r3, r6
 8088442:	4770      	bx	lr
 8088444:	ea94 0f0c 	teq	r4, ip
 8088448:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808844c:	bf18      	it	ne
 808844e:	ea95 0f0c 	teqne	r5, ip
 8088452:	d00c      	beq.n	808846e <__aeabi_dmul+0x206>
 8088454:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8088458:	bf18      	it	ne
 808845a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808845e:	d1d1      	bne.n	8088404 <__aeabi_dmul+0x19c>
 8088460:	ea81 0103 	eor.w	r1, r1, r3
 8088464:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8088468:	f04f 0000 	mov.w	r0, #0
 808846c:	bd70      	pop	{r4, r5, r6, pc}
 808846e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8088472:	bf06      	itte	eq
 8088474:	4610      	moveq	r0, r2
 8088476:	4619      	moveq	r1, r3
 8088478:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808847c:	d019      	beq.n	80884b2 <__aeabi_dmul+0x24a>
 808847e:	ea94 0f0c 	teq	r4, ip
 8088482:	d102      	bne.n	808848a <__aeabi_dmul+0x222>
 8088484:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8088488:	d113      	bne.n	80884b2 <__aeabi_dmul+0x24a>
 808848a:	ea95 0f0c 	teq	r5, ip
 808848e:	d105      	bne.n	808849c <__aeabi_dmul+0x234>
 8088490:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8088494:	bf1c      	itt	ne
 8088496:	4610      	movne	r0, r2
 8088498:	4619      	movne	r1, r3
 808849a:	d10a      	bne.n	80884b2 <__aeabi_dmul+0x24a>
 808849c:	ea81 0103 	eor.w	r1, r1, r3
 80884a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80884a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80884a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80884ac:	f04f 0000 	mov.w	r0, #0
 80884b0:	bd70      	pop	{r4, r5, r6, pc}
 80884b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80884b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80884ba:	bd70      	pop	{r4, r5, r6, pc}

080884bc <__aeabi_ddiv>:
 80884bc:	b570      	push	{r4, r5, r6, lr}
 80884be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80884c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80884c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80884ca:	bf1d      	ittte	ne
 80884cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80884d0:	ea94 0f0c 	teqne	r4, ip
 80884d4:	ea95 0f0c 	teqne	r5, ip
 80884d8:	f000 f8a7 	bleq	808862a <__aeabi_ddiv+0x16e>
 80884dc:	eba4 0405 	sub.w	r4, r4, r5
 80884e0:	ea81 0e03 	eor.w	lr, r1, r3
 80884e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80884e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80884ec:	f000 8088 	beq.w	8088600 <__aeabi_ddiv+0x144>
 80884f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80884f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80884f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80884fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8088500:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8088504:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8088508:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 808850c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8088510:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8088514:	429d      	cmp	r5, r3
 8088516:	bf08      	it	eq
 8088518:	4296      	cmpeq	r6, r2
 808851a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 808851e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8088522:	d202      	bcs.n	808852a <__aeabi_ddiv+0x6e>
 8088524:	085b      	lsrs	r3, r3, #1
 8088526:	ea4f 0232 	mov.w	r2, r2, rrx
 808852a:	1ab6      	subs	r6, r6, r2
 808852c:	eb65 0503 	sbc.w	r5, r5, r3
 8088530:	085b      	lsrs	r3, r3, #1
 8088532:	ea4f 0232 	mov.w	r2, r2, rrx
 8088536:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 808853a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 808853e:	ebb6 0e02 	subs.w	lr, r6, r2
 8088542:	eb75 0e03 	sbcs.w	lr, r5, r3
 8088546:	bf22      	ittt	cs
 8088548:	1ab6      	subcs	r6, r6, r2
 808854a:	4675      	movcs	r5, lr
 808854c:	ea40 000c 	orrcs.w	r0, r0, ip
 8088550:	085b      	lsrs	r3, r3, #1
 8088552:	ea4f 0232 	mov.w	r2, r2, rrx
 8088556:	ebb6 0e02 	subs.w	lr, r6, r2
 808855a:	eb75 0e03 	sbcs.w	lr, r5, r3
 808855e:	bf22      	ittt	cs
 8088560:	1ab6      	subcs	r6, r6, r2
 8088562:	4675      	movcs	r5, lr
 8088564:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8088568:	085b      	lsrs	r3, r3, #1
 808856a:	ea4f 0232 	mov.w	r2, r2, rrx
 808856e:	ebb6 0e02 	subs.w	lr, r6, r2
 8088572:	eb75 0e03 	sbcs.w	lr, r5, r3
 8088576:	bf22      	ittt	cs
 8088578:	1ab6      	subcs	r6, r6, r2
 808857a:	4675      	movcs	r5, lr
 808857c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8088580:	085b      	lsrs	r3, r3, #1
 8088582:	ea4f 0232 	mov.w	r2, r2, rrx
 8088586:	ebb6 0e02 	subs.w	lr, r6, r2
 808858a:	eb75 0e03 	sbcs.w	lr, r5, r3
 808858e:	bf22      	ittt	cs
 8088590:	1ab6      	subcs	r6, r6, r2
 8088592:	4675      	movcs	r5, lr
 8088594:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8088598:	ea55 0e06 	orrs.w	lr, r5, r6
 808859c:	d018      	beq.n	80885d0 <__aeabi_ddiv+0x114>
 808859e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80885a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80885a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80885aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80885ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80885b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80885b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80885ba:	d1c0      	bne.n	808853e <__aeabi_ddiv+0x82>
 80885bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80885c0:	d10b      	bne.n	80885da <__aeabi_ddiv+0x11e>
 80885c2:	ea41 0100 	orr.w	r1, r1, r0
 80885c6:	f04f 0000 	mov.w	r0, #0
 80885ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80885ce:	e7b6      	b.n	808853e <__aeabi_ddiv+0x82>
 80885d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80885d4:	bf04      	itt	eq
 80885d6:	4301      	orreq	r1, r0
 80885d8:	2000      	moveq	r0, #0
 80885da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80885de:	bf88      	it	hi
 80885e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80885e4:	f63f aeaf 	bhi.w	8088346 <__aeabi_dmul+0xde>
 80885e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80885ec:	bf04      	itt	eq
 80885ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80885f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80885f6:	f150 0000 	adcs.w	r0, r0, #0
 80885fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80885fe:	bd70      	pop	{r4, r5, r6, pc}
 8088600:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8088604:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8088608:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 808860c:	bfc2      	ittt	gt
 808860e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8088612:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8088616:	bd70      	popgt	{r4, r5, r6, pc}
 8088618:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808861c:	f04f 0e00 	mov.w	lr, #0
 8088620:	3c01      	subs	r4, #1
 8088622:	e690      	b.n	8088346 <__aeabi_dmul+0xde>
 8088624:	ea45 0e06 	orr.w	lr, r5, r6
 8088628:	e68d      	b.n	8088346 <__aeabi_dmul+0xde>
 808862a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808862e:	ea94 0f0c 	teq	r4, ip
 8088632:	bf08      	it	eq
 8088634:	ea95 0f0c 	teqeq	r5, ip
 8088638:	f43f af3b 	beq.w	80884b2 <__aeabi_dmul+0x24a>
 808863c:	ea94 0f0c 	teq	r4, ip
 8088640:	d10a      	bne.n	8088658 <__aeabi_ddiv+0x19c>
 8088642:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8088646:	f47f af34 	bne.w	80884b2 <__aeabi_dmul+0x24a>
 808864a:	ea95 0f0c 	teq	r5, ip
 808864e:	f47f af25 	bne.w	808849c <__aeabi_dmul+0x234>
 8088652:	4610      	mov	r0, r2
 8088654:	4619      	mov	r1, r3
 8088656:	e72c      	b.n	80884b2 <__aeabi_dmul+0x24a>
 8088658:	ea95 0f0c 	teq	r5, ip
 808865c:	d106      	bne.n	808866c <__aeabi_ddiv+0x1b0>
 808865e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8088662:	f43f aefd 	beq.w	8088460 <__aeabi_dmul+0x1f8>
 8088666:	4610      	mov	r0, r2
 8088668:	4619      	mov	r1, r3
 808866a:	e722      	b.n	80884b2 <__aeabi_dmul+0x24a>
 808866c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8088670:	bf18      	it	ne
 8088672:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8088676:	f47f aec5 	bne.w	8088404 <__aeabi_dmul+0x19c>
 808867a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 808867e:	f47f af0d 	bne.w	808849c <__aeabi_dmul+0x234>
 8088682:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8088686:	f47f aeeb 	bne.w	8088460 <__aeabi_dmul+0x1f8>
 808868a:	e712      	b.n	80884b2 <__aeabi_dmul+0x24a>

0808868c <__gedf2>:
 808868c:	f04f 3cff 	mov.w	ip, #4294967295
 8088690:	e006      	b.n	80886a0 <__cmpdf2+0x4>
 8088692:	bf00      	nop

08088694 <__ledf2>:
 8088694:	f04f 0c01 	mov.w	ip, #1
 8088698:	e002      	b.n	80886a0 <__cmpdf2+0x4>
 808869a:	bf00      	nop

0808869c <__cmpdf2>:
 808869c:	f04f 0c01 	mov.w	ip, #1
 80886a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80886a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80886a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80886ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80886b0:	bf18      	it	ne
 80886b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80886b6:	d01b      	beq.n	80886f0 <__cmpdf2+0x54>
 80886b8:	b001      	add	sp, #4
 80886ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80886be:	bf0c      	ite	eq
 80886c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80886c4:	ea91 0f03 	teqne	r1, r3
 80886c8:	bf02      	ittt	eq
 80886ca:	ea90 0f02 	teqeq	r0, r2
 80886ce:	2000      	moveq	r0, #0
 80886d0:	4770      	bxeq	lr
 80886d2:	f110 0f00 	cmn.w	r0, #0
 80886d6:	ea91 0f03 	teq	r1, r3
 80886da:	bf58      	it	pl
 80886dc:	4299      	cmppl	r1, r3
 80886de:	bf08      	it	eq
 80886e0:	4290      	cmpeq	r0, r2
 80886e2:	bf2c      	ite	cs
 80886e4:	17d8      	asrcs	r0, r3, #31
 80886e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80886ea:	f040 0001 	orr.w	r0, r0, #1
 80886ee:	4770      	bx	lr
 80886f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80886f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80886f8:	d102      	bne.n	8088700 <__cmpdf2+0x64>
 80886fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80886fe:	d107      	bne.n	8088710 <__cmpdf2+0x74>
 8088700:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8088704:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8088708:	d1d6      	bne.n	80886b8 <__cmpdf2+0x1c>
 808870a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 808870e:	d0d3      	beq.n	80886b8 <__cmpdf2+0x1c>
 8088710:	f85d 0b04 	ldr.w	r0, [sp], #4
 8088714:	4770      	bx	lr
 8088716:	bf00      	nop

08088718 <__aeabi_cdrcmple>:
 8088718:	4684      	mov	ip, r0
 808871a:	4610      	mov	r0, r2
 808871c:	4662      	mov	r2, ip
 808871e:	468c      	mov	ip, r1
 8088720:	4619      	mov	r1, r3
 8088722:	4663      	mov	r3, ip
 8088724:	e000      	b.n	8088728 <__aeabi_cdcmpeq>
 8088726:	bf00      	nop

08088728 <__aeabi_cdcmpeq>:
 8088728:	b501      	push	{r0, lr}
 808872a:	f7ff ffb7 	bl	808869c <__cmpdf2>
 808872e:	2800      	cmp	r0, #0
 8088730:	bf48      	it	mi
 8088732:	f110 0f00 	cmnmi.w	r0, #0
 8088736:	bd01      	pop	{r0, pc}

08088738 <__aeabi_dcmpeq>:
 8088738:	f84d ed08 	str.w	lr, [sp, #-8]!
 808873c:	f7ff fff4 	bl	8088728 <__aeabi_cdcmpeq>
 8088740:	bf0c      	ite	eq
 8088742:	2001      	moveq	r0, #1
 8088744:	2000      	movne	r0, #0
 8088746:	f85d fb08 	ldr.w	pc, [sp], #8
 808874a:	bf00      	nop

0808874c <__aeabi_dcmplt>:
 808874c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8088750:	f7ff ffea 	bl	8088728 <__aeabi_cdcmpeq>
 8088754:	bf34      	ite	cc
 8088756:	2001      	movcc	r0, #1
 8088758:	2000      	movcs	r0, #0
 808875a:	f85d fb08 	ldr.w	pc, [sp], #8
 808875e:	bf00      	nop

08088760 <__aeabi_dcmple>:
 8088760:	f84d ed08 	str.w	lr, [sp, #-8]!
 8088764:	f7ff ffe0 	bl	8088728 <__aeabi_cdcmpeq>
 8088768:	bf94      	ite	ls
 808876a:	2001      	movls	r0, #1
 808876c:	2000      	movhi	r0, #0
 808876e:	f85d fb08 	ldr.w	pc, [sp], #8
 8088772:	bf00      	nop

08088774 <__aeabi_dcmpge>:
 8088774:	f84d ed08 	str.w	lr, [sp, #-8]!
 8088778:	f7ff ffce 	bl	8088718 <__aeabi_cdrcmple>
 808877c:	bf94      	ite	ls
 808877e:	2001      	movls	r0, #1
 8088780:	2000      	movhi	r0, #0
 8088782:	f85d fb08 	ldr.w	pc, [sp], #8
 8088786:	bf00      	nop

08088788 <__aeabi_dcmpgt>:
 8088788:	f84d ed08 	str.w	lr, [sp, #-8]!
 808878c:	f7ff ffc4 	bl	8088718 <__aeabi_cdrcmple>
 8088790:	bf34      	ite	cc
 8088792:	2001      	movcc	r0, #1
 8088794:	2000      	movcs	r0, #0
 8088796:	f85d fb08 	ldr.w	pc, [sp], #8
 808879a:	bf00      	nop

0808879c <__aeabi_dcmpun>:
 808879c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80887a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80887a4:	d102      	bne.n	80887ac <__aeabi_dcmpun+0x10>
 80887a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80887aa:	d10a      	bne.n	80887c2 <__aeabi_dcmpun+0x26>
 80887ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80887b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80887b4:	d102      	bne.n	80887bc <__aeabi_dcmpun+0x20>
 80887b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80887ba:	d102      	bne.n	80887c2 <__aeabi_dcmpun+0x26>
 80887bc:	f04f 0000 	mov.w	r0, #0
 80887c0:	4770      	bx	lr
 80887c2:	f04f 0001 	mov.w	r0, #1
 80887c6:	4770      	bx	lr

080887c8 <__aeabi_d2iz>:
 80887c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80887cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80887d0:	d215      	bcs.n	80887fe <__aeabi_d2iz+0x36>
 80887d2:	d511      	bpl.n	80887f8 <__aeabi_d2iz+0x30>
 80887d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80887d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80887dc:	d912      	bls.n	8088804 <__aeabi_d2iz+0x3c>
 80887de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80887e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80887e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80887ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80887ee:	fa23 f002 	lsr.w	r0, r3, r2
 80887f2:	bf18      	it	ne
 80887f4:	4240      	negne	r0, r0
 80887f6:	4770      	bx	lr
 80887f8:	f04f 0000 	mov.w	r0, #0
 80887fc:	4770      	bx	lr
 80887fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8088802:	d105      	bne.n	8088810 <__aeabi_d2iz+0x48>
 8088804:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8088808:	bf08      	it	eq
 808880a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808880e:	4770      	bx	lr
 8088810:	f04f 0000 	mov.w	r0, #0
 8088814:	4770      	bx	lr
 8088816:	bf00      	nop

08088818 <__aeabi_d2uiz>:
 8088818:	004a      	lsls	r2, r1, #1
 808881a:	d211      	bcs.n	8088840 <__aeabi_d2uiz+0x28>
 808881c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8088820:	d211      	bcs.n	8088846 <__aeabi_d2uiz+0x2e>
 8088822:	d50d      	bpl.n	8088840 <__aeabi_d2uiz+0x28>
 8088824:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8088828:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 808882c:	d40e      	bmi.n	808884c <__aeabi_d2uiz+0x34>
 808882e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8088832:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8088836:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808883a:	fa23 f002 	lsr.w	r0, r3, r2
 808883e:	4770      	bx	lr
 8088840:	f04f 0000 	mov.w	r0, #0
 8088844:	4770      	bx	lr
 8088846:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808884a:	d102      	bne.n	8088852 <__aeabi_d2uiz+0x3a>
 808884c:	f04f 30ff 	mov.w	r0, #4294967295
 8088850:	4770      	bx	lr
 8088852:	f04f 0000 	mov.w	r0, #0
 8088856:	4770      	bx	lr

08088858 <__aeabi_d2f>:
 8088858:	ea4f 0241 	mov.w	r2, r1, lsl #1
 808885c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8088860:	bf24      	itt	cs
 8088862:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8088866:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 808886a:	d90d      	bls.n	8088888 <__aeabi_d2f+0x30>
 808886c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8088870:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8088874:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8088878:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 808887c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8088880:	bf08      	it	eq
 8088882:	f020 0001 	biceq.w	r0, r0, #1
 8088886:	4770      	bx	lr
 8088888:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 808888c:	d121      	bne.n	80888d2 <__aeabi_d2f+0x7a>
 808888e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8088892:	bfbc      	itt	lt
 8088894:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8088898:	4770      	bxlt	lr
 808889a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808889e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80888a2:	f1c2 0218 	rsb	r2, r2, #24
 80888a6:	f1c2 0c20 	rsb	ip, r2, #32
 80888aa:	fa10 f30c 	lsls.w	r3, r0, ip
 80888ae:	fa20 f002 	lsr.w	r0, r0, r2
 80888b2:	bf18      	it	ne
 80888b4:	f040 0001 	orrne.w	r0, r0, #1
 80888b8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80888bc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80888c0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80888c4:	ea40 000c 	orr.w	r0, r0, ip
 80888c8:	fa23 f302 	lsr.w	r3, r3, r2
 80888cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80888d0:	e7cc      	b.n	808886c <__aeabi_d2f+0x14>
 80888d2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80888d6:	d107      	bne.n	80888e8 <__aeabi_d2f+0x90>
 80888d8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80888dc:	bf1e      	ittt	ne
 80888de:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80888e2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80888e6:	4770      	bxne	lr
 80888e8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80888ec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80888f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80888f4:	4770      	bx	lr
 80888f6:	bf00      	nop

080888f8 <__aeabi_frsub>:
 80888f8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80888fc:	e002      	b.n	8088904 <__addsf3>
 80888fe:	bf00      	nop

08088900 <__aeabi_fsub>:
 8088900:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08088904 <__addsf3>:
 8088904:	0042      	lsls	r2, r0, #1
 8088906:	bf1f      	itttt	ne
 8088908:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 808890c:	ea92 0f03 	teqne	r2, r3
 8088910:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8088914:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8088918:	d06a      	beq.n	80889f0 <__addsf3+0xec>
 808891a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 808891e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8088922:	bfc1      	itttt	gt
 8088924:	18d2      	addgt	r2, r2, r3
 8088926:	4041      	eorgt	r1, r0
 8088928:	4048      	eorgt	r0, r1
 808892a:	4041      	eorgt	r1, r0
 808892c:	bfb8      	it	lt
 808892e:	425b      	neglt	r3, r3
 8088930:	2b19      	cmp	r3, #25
 8088932:	bf88      	it	hi
 8088934:	4770      	bxhi	lr
 8088936:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 808893a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808893e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8088942:	bf18      	it	ne
 8088944:	4240      	negne	r0, r0
 8088946:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808894a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 808894e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8088952:	bf18      	it	ne
 8088954:	4249      	negne	r1, r1
 8088956:	ea92 0f03 	teq	r2, r3
 808895a:	d03f      	beq.n	80889dc <__addsf3+0xd8>
 808895c:	f1a2 0201 	sub.w	r2, r2, #1
 8088960:	fa41 fc03 	asr.w	ip, r1, r3
 8088964:	eb10 000c 	adds.w	r0, r0, ip
 8088968:	f1c3 0320 	rsb	r3, r3, #32
 808896c:	fa01 f103 	lsl.w	r1, r1, r3
 8088970:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8088974:	d502      	bpl.n	808897c <__addsf3+0x78>
 8088976:	4249      	negs	r1, r1
 8088978:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 808897c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8088980:	d313      	bcc.n	80889aa <__addsf3+0xa6>
 8088982:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8088986:	d306      	bcc.n	8088996 <__addsf3+0x92>
 8088988:	0840      	lsrs	r0, r0, #1
 808898a:	ea4f 0131 	mov.w	r1, r1, rrx
 808898e:	f102 0201 	add.w	r2, r2, #1
 8088992:	2afe      	cmp	r2, #254	; 0xfe
 8088994:	d251      	bcs.n	8088a3a <__addsf3+0x136>
 8088996:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 808899a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808899e:	bf08      	it	eq
 80889a0:	f020 0001 	biceq.w	r0, r0, #1
 80889a4:	ea40 0003 	orr.w	r0, r0, r3
 80889a8:	4770      	bx	lr
 80889aa:	0049      	lsls	r1, r1, #1
 80889ac:	eb40 0000 	adc.w	r0, r0, r0
 80889b0:	3a01      	subs	r2, #1
 80889b2:	bf28      	it	cs
 80889b4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80889b8:	d2ed      	bcs.n	8088996 <__addsf3+0x92>
 80889ba:	fab0 fc80 	clz	ip, r0
 80889be:	f1ac 0c08 	sub.w	ip, ip, #8
 80889c2:	ebb2 020c 	subs.w	r2, r2, ip
 80889c6:	fa00 f00c 	lsl.w	r0, r0, ip
 80889ca:	bfaa      	itet	ge
 80889cc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80889d0:	4252      	neglt	r2, r2
 80889d2:	4318      	orrge	r0, r3
 80889d4:	bfbc      	itt	lt
 80889d6:	40d0      	lsrlt	r0, r2
 80889d8:	4318      	orrlt	r0, r3
 80889da:	4770      	bx	lr
 80889dc:	f092 0f00 	teq	r2, #0
 80889e0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80889e4:	bf06      	itte	eq
 80889e6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80889ea:	3201      	addeq	r2, #1
 80889ec:	3b01      	subne	r3, #1
 80889ee:	e7b5      	b.n	808895c <__addsf3+0x58>
 80889f0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80889f4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80889f8:	bf18      	it	ne
 80889fa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80889fe:	d021      	beq.n	8088a44 <__addsf3+0x140>
 8088a00:	ea92 0f03 	teq	r2, r3
 8088a04:	d004      	beq.n	8088a10 <__addsf3+0x10c>
 8088a06:	f092 0f00 	teq	r2, #0
 8088a0a:	bf08      	it	eq
 8088a0c:	4608      	moveq	r0, r1
 8088a0e:	4770      	bx	lr
 8088a10:	ea90 0f01 	teq	r0, r1
 8088a14:	bf1c      	itt	ne
 8088a16:	2000      	movne	r0, #0
 8088a18:	4770      	bxne	lr
 8088a1a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8088a1e:	d104      	bne.n	8088a2a <__addsf3+0x126>
 8088a20:	0040      	lsls	r0, r0, #1
 8088a22:	bf28      	it	cs
 8088a24:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8088a28:	4770      	bx	lr
 8088a2a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8088a2e:	bf3c      	itt	cc
 8088a30:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8088a34:	4770      	bxcc	lr
 8088a36:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8088a3a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8088a3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8088a42:	4770      	bx	lr
 8088a44:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8088a48:	bf16      	itet	ne
 8088a4a:	4608      	movne	r0, r1
 8088a4c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8088a50:	4601      	movne	r1, r0
 8088a52:	0242      	lsls	r2, r0, #9
 8088a54:	bf06      	itte	eq
 8088a56:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8088a5a:	ea90 0f01 	teqeq	r0, r1
 8088a5e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8088a62:	4770      	bx	lr

08088a64 <__aeabi_ui2f>:
 8088a64:	f04f 0300 	mov.w	r3, #0
 8088a68:	e004      	b.n	8088a74 <__aeabi_i2f+0x8>
 8088a6a:	bf00      	nop

08088a6c <__aeabi_i2f>:
 8088a6c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8088a70:	bf48      	it	mi
 8088a72:	4240      	negmi	r0, r0
 8088a74:	ea5f 0c00 	movs.w	ip, r0
 8088a78:	bf08      	it	eq
 8088a7a:	4770      	bxeq	lr
 8088a7c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8088a80:	4601      	mov	r1, r0
 8088a82:	f04f 0000 	mov.w	r0, #0
 8088a86:	e01c      	b.n	8088ac2 <__aeabi_l2f+0x2a>

08088a88 <__aeabi_ul2f>:
 8088a88:	ea50 0201 	orrs.w	r2, r0, r1
 8088a8c:	bf08      	it	eq
 8088a8e:	4770      	bxeq	lr
 8088a90:	f04f 0300 	mov.w	r3, #0
 8088a94:	e00a      	b.n	8088aac <__aeabi_l2f+0x14>
 8088a96:	bf00      	nop

08088a98 <__aeabi_l2f>:
 8088a98:	ea50 0201 	orrs.w	r2, r0, r1
 8088a9c:	bf08      	it	eq
 8088a9e:	4770      	bxeq	lr
 8088aa0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8088aa4:	d502      	bpl.n	8088aac <__aeabi_l2f+0x14>
 8088aa6:	4240      	negs	r0, r0
 8088aa8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8088aac:	ea5f 0c01 	movs.w	ip, r1
 8088ab0:	bf02      	ittt	eq
 8088ab2:	4684      	moveq	ip, r0
 8088ab4:	4601      	moveq	r1, r0
 8088ab6:	2000      	moveq	r0, #0
 8088ab8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8088abc:	bf08      	it	eq
 8088abe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8088ac2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8088ac6:	fabc f28c 	clz	r2, ip
 8088aca:	3a08      	subs	r2, #8
 8088acc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8088ad0:	db10      	blt.n	8088af4 <__aeabi_l2f+0x5c>
 8088ad2:	fa01 fc02 	lsl.w	ip, r1, r2
 8088ad6:	4463      	add	r3, ip
 8088ad8:	fa00 fc02 	lsl.w	ip, r0, r2
 8088adc:	f1c2 0220 	rsb	r2, r2, #32
 8088ae0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8088ae4:	fa20 f202 	lsr.w	r2, r0, r2
 8088ae8:	eb43 0002 	adc.w	r0, r3, r2
 8088aec:	bf08      	it	eq
 8088aee:	f020 0001 	biceq.w	r0, r0, #1
 8088af2:	4770      	bx	lr
 8088af4:	f102 0220 	add.w	r2, r2, #32
 8088af8:	fa01 fc02 	lsl.w	ip, r1, r2
 8088afc:	f1c2 0220 	rsb	r2, r2, #32
 8088b00:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8088b04:	fa21 f202 	lsr.w	r2, r1, r2
 8088b08:	eb43 0002 	adc.w	r0, r3, r2
 8088b0c:	bf08      	it	eq
 8088b0e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8088b12:	4770      	bx	lr

08088b14 <__aeabi_fmul>:
 8088b14:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8088b18:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8088b1c:	bf1e      	ittt	ne
 8088b1e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8088b22:	ea92 0f0c 	teqne	r2, ip
 8088b26:	ea93 0f0c 	teqne	r3, ip
 8088b2a:	d06f      	beq.n	8088c0c <__aeabi_fmul+0xf8>
 8088b2c:	441a      	add	r2, r3
 8088b2e:	ea80 0c01 	eor.w	ip, r0, r1
 8088b32:	0240      	lsls	r0, r0, #9
 8088b34:	bf18      	it	ne
 8088b36:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8088b3a:	d01e      	beq.n	8088b7a <__aeabi_fmul+0x66>
 8088b3c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8088b40:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8088b44:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8088b48:	fba0 3101 	umull	r3, r1, r0, r1
 8088b4c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8088b50:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8088b54:	bf3e      	ittt	cc
 8088b56:	0049      	lslcc	r1, r1, #1
 8088b58:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8088b5c:	005b      	lslcc	r3, r3, #1
 8088b5e:	ea40 0001 	orr.w	r0, r0, r1
 8088b62:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8088b66:	2afd      	cmp	r2, #253	; 0xfd
 8088b68:	d81d      	bhi.n	8088ba6 <__aeabi_fmul+0x92>
 8088b6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8088b6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8088b72:	bf08      	it	eq
 8088b74:	f020 0001 	biceq.w	r0, r0, #1
 8088b78:	4770      	bx	lr
 8088b7a:	f090 0f00 	teq	r0, #0
 8088b7e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8088b82:	bf08      	it	eq
 8088b84:	0249      	lsleq	r1, r1, #9
 8088b86:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8088b8a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8088b8e:	3a7f      	subs	r2, #127	; 0x7f
 8088b90:	bfc2      	ittt	gt
 8088b92:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8088b96:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8088b9a:	4770      	bxgt	lr
 8088b9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8088ba0:	f04f 0300 	mov.w	r3, #0
 8088ba4:	3a01      	subs	r2, #1
 8088ba6:	dc5d      	bgt.n	8088c64 <__aeabi_fmul+0x150>
 8088ba8:	f112 0f19 	cmn.w	r2, #25
 8088bac:	bfdc      	itt	le
 8088bae:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8088bb2:	4770      	bxle	lr
 8088bb4:	f1c2 0200 	rsb	r2, r2, #0
 8088bb8:	0041      	lsls	r1, r0, #1
 8088bba:	fa21 f102 	lsr.w	r1, r1, r2
 8088bbe:	f1c2 0220 	rsb	r2, r2, #32
 8088bc2:	fa00 fc02 	lsl.w	ip, r0, r2
 8088bc6:	ea5f 0031 	movs.w	r0, r1, rrx
 8088bca:	f140 0000 	adc.w	r0, r0, #0
 8088bce:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8088bd2:	bf08      	it	eq
 8088bd4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8088bd8:	4770      	bx	lr
 8088bda:	f092 0f00 	teq	r2, #0
 8088bde:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8088be2:	bf02      	ittt	eq
 8088be4:	0040      	lsleq	r0, r0, #1
 8088be6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8088bea:	3a01      	subeq	r2, #1
 8088bec:	d0f9      	beq.n	8088be2 <__aeabi_fmul+0xce>
 8088bee:	ea40 000c 	orr.w	r0, r0, ip
 8088bf2:	f093 0f00 	teq	r3, #0
 8088bf6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8088bfa:	bf02      	ittt	eq
 8088bfc:	0049      	lsleq	r1, r1, #1
 8088bfe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8088c02:	3b01      	subeq	r3, #1
 8088c04:	d0f9      	beq.n	8088bfa <__aeabi_fmul+0xe6>
 8088c06:	ea41 010c 	orr.w	r1, r1, ip
 8088c0a:	e78f      	b.n	8088b2c <__aeabi_fmul+0x18>
 8088c0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8088c10:	ea92 0f0c 	teq	r2, ip
 8088c14:	bf18      	it	ne
 8088c16:	ea93 0f0c 	teqne	r3, ip
 8088c1a:	d00a      	beq.n	8088c32 <__aeabi_fmul+0x11e>
 8088c1c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8088c20:	bf18      	it	ne
 8088c22:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8088c26:	d1d8      	bne.n	8088bda <__aeabi_fmul+0xc6>
 8088c28:	ea80 0001 	eor.w	r0, r0, r1
 8088c2c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8088c30:	4770      	bx	lr
 8088c32:	f090 0f00 	teq	r0, #0
 8088c36:	bf17      	itett	ne
 8088c38:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8088c3c:	4608      	moveq	r0, r1
 8088c3e:	f091 0f00 	teqne	r1, #0
 8088c42:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8088c46:	d014      	beq.n	8088c72 <__aeabi_fmul+0x15e>
 8088c48:	ea92 0f0c 	teq	r2, ip
 8088c4c:	d101      	bne.n	8088c52 <__aeabi_fmul+0x13e>
 8088c4e:	0242      	lsls	r2, r0, #9
 8088c50:	d10f      	bne.n	8088c72 <__aeabi_fmul+0x15e>
 8088c52:	ea93 0f0c 	teq	r3, ip
 8088c56:	d103      	bne.n	8088c60 <__aeabi_fmul+0x14c>
 8088c58:	024b      	lsls	r3, r1, #9
 8088c5a:	bf18      	it	ne
 8088c5c:	4608      	movne	r0, r1
 8088c5e:	d108      	bne.n	8088c72 <__aeabi_fmul+0x15e>
 8088c60:	ea80 0001 	eor.w	r0, r0, r1
 8088c64:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8088c68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8088c6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8088c70:	4770      	bx	lr
 8088c72:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8088c76:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8088c7a:	4770      	bx	lr

08088c7c <__aeabi_fdiv>:
 8088c7c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8088c80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8088c84:	bf1e      	ittt	ne
 8088c86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8088c8a:	ea92 0f0c 	teqne	r2, ip
 8088c8e:	ea93 0f0c 	teqne	r3, ip
 8088c92:	d069      	beq.n	8088d68 <__aeabi_fdiv+0xec>
 8088c94:	eba2 0203 	sub.w	r2, r2, r3
 8088c98:	ea80 0c01 	eor.w	ip, r0, r1
 8088c9c:	0249      	lsls	r1, r1, #9
 8088c9e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8088ca2:	d037      	beq.n	8088d14 <__aeabi_fdiv+0x98>
 8088ca4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8088ca8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8088cac:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8088cb0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8088cb4:	428b      	cmp	r3, r1
 8088cb6:	bf38      	it	cc
 8088cb8:	005b      	lslcc	r3, r3, #1
 8088cba:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8088cbe:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8088cc2:	428b      	cmp	r3, r1
 8088cc4:	bf24      	itt	cs
 8088cc6:	1a5b      	subcs	r3, r3, r1
 8088cc8:	ea40 000c 	orrcs.w	r0, r0, ip
 8088ccc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8088cd0:	bf24      	itt	cs
 8088cd2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8088cd6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8088cda:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8088cde:	bf24      	itt	cs
 8088ce0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8088ce4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8088ce8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8088cec:	bf24      	itt	cs
 8088cee:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8088cf2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8088cf6:	011b      	lsls	r3, r3, #4
 8088cf8:	bf18      	it	ne
 8088cfa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8088cfe:	d1e0      	bne.n	8088cc2 <__aeabi_fdiv+0x46>
 8088d00:	2afd      	cmp	r2, #253	; 0xfd
 8088d02:	f63f af50 	bhi.w	8088ba6 <__aeabi_fmul+0x92>
 8088d06:	428b      	cmp	r3, r1
 8088d08:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8088d0c:	bf08      	it	eq
 8088d0e:	f020 0001 	biceq.w	r0, r0, #1
 8088d12:	4770      	bx	lr
 8088d14:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8088d18:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8088d1c:	327f      	adds	r2, #127	; 0x7f
 8088d1e:	bfc2      	ittt	gt
 8088d20:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8088d24:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8088d28:	4770      	bxgt	lr
 8088d2a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8088d2e:	f04f 0300 	mov.w	r3, #0
 8088d32:	3a01      	subs	r2, #1
 8088d34:	e737      	b.n	8088ba6 <__aeabi_fmul+0x92>
 8088d36:	f092 0f00 	teq	r2, #0
 8088d3a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8088d3e:	bf02      	ittt	eq
 8088d40:	0040      	lsleq	r0, r0, #1
 8088d42:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8088d46:	3a01      	subeq	r2, #1
 8088d48:	d0f9      	beq.n	8088d3e <__aeabi_fdiv+0xc2>
 8088d4a:	ea40 000c 	orr.w	r0, r0, ip
 8088d4e:	f093 0f00 	teq	r3, #0
 8088d52:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8088d56:	bf02      	ittt	eq
 8088d58:	0049      	lsleq	r1, r1, #1
 8088d5a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8088d5e:	3b01      	subeq	r3, #1
 8088d60:	d0f9      	beq.n	8088d56 <__aeabi_fdiv+0xda>
 8088d62:	ea41 010c 	orr.w	r1, r1, ip
 8088d66:	e795      	b.n	8088c94 <__aeabi_fdiv+0x18>
 8088d68:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8088d6c:	ea92 0f0c 	teq	r2, ip
 8088d70:	d108      	bne.n	8088d84 <__aeabi_fdiv+0x108>
 8088d72:	0242      	lsls	r2, r0, #9
 8088d74:	f47f af7d 	bne.w	8088c72 <__aeabi_fmul+0x15e>
 8088d78:	ea93 0f0c 	teq	r3, ip
 8088d7c:	f47f af70 	bne.w	8088c60 <__aeabi_fmul+0x14c>
 8088d80:	4608      	mov	r0, r1
 8088d82:	e776      	b.n	8088c72 <__aeabi_fmul+0x15e>
 8088d84:	ea93 0f0c 	teq	r3, ip
 8088d88:	d104      	bne.n	8088d94 <__aeabi_fdiv+0x118>
 8088d8a:	024b      	lsls	r3, r1, #9
 8088d8c:	f43f af4c 	beq.w	8088c28 <__aeabi_fmul+0x114>
 8088d90:	4608      	mov	r0, r1
 8088d92:	e76e      	b.n	8088c72 <__aeabi_fmul+0x15e>
 8088d94:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8088d98:	bf18      	it	ne
 8088d9a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8088d9e:	d1ca      	bne.n	8088d36 <__aeabi_fdiv+0xba>
 8088da0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8088da4:	f47f af5c 	bne.w	8088c60 <__aeabi_fmul+0x14c>
 8088da8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8088dac:	f47f af3c 	bne.w	8088c28 <__aeabi_fmul+0x114>
 8088db0:	e75f      	b.n	8088c72 <__aeabi_fmul+0x15e>
 8088db2:	bf00      	nop

08088db4 <__gesf2>:
 8088db4:	f04f 3cff 	mov.w	ip, #4294967295
 8088db8:	e006      	b.n	8088dc8 <__cmpsf2+0x4>
 8088dba:	bf00      	nop

08088dbc <__lesf2>:
 8088dbc:	f04f 0c01 	mov.w	ip, #1
 8088dc0:	e002      	b.n	8088dc8 <__cmpsf2+0x4>
 8088dc2:	bf00      	nop

08088dc4 <__cmpsf2>:
 8088dc4:	f04f 0c01 	mov.w	ip, #1
 8088dc8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8088dcc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8088dd0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8088dd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8088dd8:	bf18      	it	ne
 8088dda:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8088dde:	d011      	beq.n	8088e04 <__cmpsf2+0x40>
 8088de0:	b001      	add	sp, #4
 8088de2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8088de6:	bf18      	it	ne
 8088de8:	ea90 0f01 	teqne	r0, r1
 8088dec:	bf58      	it	pl
 8088dee:	ebb2 0003 	subspl.w	r0, r2, r3
 8088df2:	bf88      	it	hi
 8088df4:	17c8      	asrhi	r0, r1, #31
 8088df6:	bf38      	it	cc
 8088df8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8088dfc:	bf18      	it	ne
 8088dfe:	f040 0001 	orrne.w	r0, r0, #1
 8088e02:	4770      	bx	lr
 8088e04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8088e08:	d102      	bne.n	8088e10 <__cmpsf2+0x4c>
 8088e0a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8088e0e:	d105      	bne.n	8088e1c <__cmpsf2+0x58>
 8088e10:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8088e14:	d1e4      	bne.n	8088de0 <__cmpsf2+0x1c>
 8088e16:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8088e1a:	d0e1      	beq.n	8088de0 <__cmpsf2+0x1c>
 8088e1c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8088e20:	4770      	bx	lr
 8088e22:	bf00      	nop

08088e24 <__aeabi_cfrcmple>:
 8088e24:	4684      	mov	ip, r0
 8088e26:	4608      	mov	r0, r1
 8088e28:	4661      	mov	r1, ip
 8088e2a:	e7ff      	b.n	8088e2c <__aeabi_cfcmpeq>

08088e2c <__aeabi_cfcmpeq>:
 8088e2c:	b50f      	push	{r0, r1, r2, r3, lr}
 8088e2e:	f7ff ffc9 	bl	8088dc4 <__cmpsf2>
 8088e32:	2800      	cmp	r0, #0
 8088e34:	bf48      	it	mi
 8088e36:	f110 0f00 	cmnmi.w	r0, #0
 8088e3a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08088e3c <__aeabi_fcmpeq>:
 8088e3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8088e40:	f7ff fff4 	bl	8088e2c <__aeabi_cfcmpeq>
 8088e44:	bf0c      	ite	eq
 8088e46:	2001      	moveq	r0, #1
 8088e48:	2000      	movne	r0, #0
 8088e4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8088e4e:	bf00      	nop

08088e50 <__aeabi_fcmplt>:
 8088e50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8088e54:	f7ff ffea 	bl	8088e2c <__aeabi_cfcmpeq>
 8088e58:	bf34      	ite	cc
 8088e5a:	2001      	movcc	r0, #1
 8088e5c:	2000      	movcs	r0, #0
 8088e5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8088e62:	bf00      	nop

08088e64 <__aeabi_fcmple>:
 8088e64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8088e68:	f7ff ffe0 	bl	8088e2c <__aeabi_cfcmpeq>
 8088e6c:	bf94      	ite	ls
 8088e6e:	2001      	movls	r0, #1
 8088e70:	2000      	movhi	r0, #0
 8088e72:	f85d fb08 	ldr.w	pc, [sp], #8
 8088e76:	bf00      	nop

08088e78 <__aeabi_fcmpge>:
 8088e78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8088e7c:	f7ff ffd2 	bl	8088e24 <__aeabi_cfrcmple>
 8088e80:	bf94      	ite	ls
 8088e82:	2001      	movls	r0, #1
 8088e84:	2000      	movhi	r0, #0
 8088e86:	f85d fb08 	ldr.w	pc, [sp], #8
 8088e8a:	bf00      	nop

08088e8c <__aeabi_fcmpgt>:
 8088e8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8088e90:	f7ff ffc8 	bl	8088e24 <__aeabi_cfrcmple>
 8088e94:	bf34      	ite	cc
 8088e96:	2001      	movcc	r0, #1
 8088e98:	2000      	movcs	r0, #0
 8088e9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8088e9e:	bf00      	nop

08088ea0 <__aeabi_fcmpun>:
 8088ea0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8088ea4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8088ea8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8088eac:	d102      	bne.n	8088eb4 <__aeabi_fcmpun+0x14>
 8088eae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8088eb2:	d108      	bne.n	8088ec6 <__aeabi_fcmpun+0x26>
 8088eb4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8088eb8:	d102      	bne.n	8088ec0 <__aeabi_fcmpun+0x20>
 8088eba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8088ebe:	d102      	bne.n	8088ec6 <__aeabi_fcmpun+0x26>
 8088ec0:	f04f 0000 	mov.w	r0, #0
 8088ec4:	4770      	bx	lr
 8088ec6:	f04f 0001 	mov.w	r0, #1
 8088eca:	4770      	bx	lr

08088ecc <__aeabi_f2iz>:
 8088ecc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8088ed0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8088ed4:	d30f      	bcc.n	8088ef6 <__aeabi_f2iz+0x2a>
 8088ed6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8088eda:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8088ede:	d90d      	bls.n	8088efc <__aeabi_f2iz+0x30>
 8088ee0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8088ee4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8088ee8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8088eec:	fa23 f002 	lsr.w	r0, r3, r2
 8088ef0:	bf18      	it	ne
 8088ef2:	4240      	negne	r0, r0
 8088ef4:	4770      	bx	lr
 8088ef6:	f04f 0000 	mov.w	r0, #0
 8088efa:	4770      	bx	lr
 8088efc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8088f00:	d101      	bne.n	8088f06 <__aeabi_f2iz+0x3a>
 8088f02:	0242      	lsls	r2, r0, #9
 8088f04:	d105      	bne.n	8088f12 <__aeabi_f2iz+0x46>
 8088f06:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8088f0a:	bf08      	it	eq
 8088f0c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8088f10:	4770      	bx	lr
 8088f12:	f04f 0000 	mov.w	r0, #0
 8088f16:	4770      	bx	lr

08088f18 <asctime_r>:
 8088f18:	b510      	push	{r4, lr}
 8088f1a:	460c      	mov	r4, r1
 8088f1c:	6941      	ldr	r1, [r0, #20]
 8088f1e:	b086      	sub	sp, #24
 8088f20:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 8088f24:	6903      	ldr	r3, [r0, #16]
 8088f26:	6982      	ldr	r2, [r0, #24]
 8088f28:	9104      	str	r1, [sp, #16]
 8088f2a:	6801      	ldr	r1, [r0, #0]
 8088f2c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8088f30:	9103      	str	r1, [sp, #12]
 8088f32:	6841      	ldr	r1, [r0, #4]
 8088f34:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8088f38:	9102      	str	r1, [sp, #8]
 8088f3a:	6881      	ldr	r1, [r0, #8]
 8088f3c:	9101      	str	r1, [sp, #4]
 8088f3e:	68c1      	ldr	r1, [r0, #12]
 8088f40:	4620      	mov	r0, r4
 8088f42:	9100      	str	r1, [sp, #0]
 8088f44:	4904      	ldr	r1, [pc, #16]	; (8088f58 <asctime_r+0x40>)
 8088f46:	440b      	add	r3, r1
 8088f48:	4904      	ldr	r1, [pc, #16]	; (8088f5c <asctime_r+0x44>)
 8088f4a:	440a      	add	r2, r1
 8088f4c:	4904      	ldr	r1, [pc, #16]	; (8088f60 <asctime_r+0x48>)
 8088f4e:	f7fb fcdb 	bl	8084908 <siprintf>
 8088f52:	4620      	mov	r0, r4
 8088f54:	b006      	add	sp, #24
 8088f56:	bd10      	pop	{r4, pc}
 8088f58:	08089fe2 	.word	0x08089fe2
 8088f5c:	08089fcd 	.word	0x08089fcd
 8088f60:	08089fad 	.word	0x08089fad

08088f64 <atoi>:
 8088f64:	220a      	movs	r2, #10
 8088f66:	2100      	movs	r1, #0
 8088f68:	f000 b9b8 	b.w	80892dc <strtol>

08088f6c <atol>:
 8088f6c:	220a      	movs	r2, #10
 8088f6e:	2100      	movs	r1, #0
 8088f70:	f000 b9b4 	b.w	80892dc <strtol>

08088f74 <__cxa_atexit>:
 8088f74:	b510      	push	{r4, lr}
 8088f76:	4604      	mov	r4, r0
 8088f78:	4804      	ldr	r0, [pc, #16]	; (8088f8c <__cxa_atexit+0x18>)
 8088f7a:	4613      	mov	r3, r2
 8088f7c:	b120      	cbz	r0, 8088f88 <__cxa_atexit+0x14>
 8088f7e:	460a      	mov	r2, r1
 8088f80:	2002      	movs	r0, #2
 8088f82:	4621      	mov	r1, r4
 8088f84:	f3af 8000 	nop.w
 8088f88:	bd10      	pop	{r4, pc}
 8088f8a:	bf00      	nop
 8088f8c:	00000000 	.word	0x00000000

08088f90 <memcpy>:
 8088f90:	440a      	add	r2, r1
 8088f92:	4291      	cmp	r1, r2
 8088f94:	f100 33ff 	add.w	r3, r0, #4294967295
 8088f98:	d100      	bne.n	8088f9c <memcpy+0xc>
 8088f9a:	4770      	bx	lr
 8088f9c:	b510      	push	{r4, lr}
 8088f9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8088fa2:	4291      	cmp	r1, r2
 8088fa4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8088fa8:	d1f9      	bne.n	8088f9e <memcpy+0xe>
 8088faa:	bd10      	pop	{r4, pc}

08088fac <memmove>:
 8088fac:	4288      	cmp	r0, r1
 8088fae:	b510      	push	{r4, lr}
 8088fb0:	eb01 0402 	add.w	r4, r1, r2
 8088fb4:	d902      	bls.n	8088fbc <memmove+0x10>
 8088fb6:	4284      	cmp	r4, r0
 8088fb8:	4623      	mov	r3, r4
 8088fba:	d807      	bhi.n	8088fcc <memmove+0x20>
 8088fbc:	1e43      	subs	r3, r0, #1
 8088fbe:	42a1      	cmp	r1, r4
 8088fc0:	d008      	beq.n	8088fd4 <memmove+0x28>
 8088fc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8088fc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8088fca:	e7f8      	b.n	8088fbe <memmove+0x12>
 8088fcc:	4601      	mov	r1, r0
 8088fce:	4402      	add	r2, r0
 8088fd0:	428a      	cmp	r2, r1
 8088fd2:	d100      	bne.n	8088fd6 <memmove+0x2a>
 8088fd4:	bd10      	pop	{r4, pc}
 8088fd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8088fda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8088fde:	e7f7      	b.n	8088fd0 <memmove+0x24>

08088fe0 <memset>:
 8088fe0:	4603      	mov	r3, r0
 8088fe2:	4402      	add	r2, r0
 8088fe4:	4293      	cmp	r3, r2
 8088fe6:	d100      	bne.n	8088fea <memset+0xa>
 8088fe8:	4770      	bx	lr
 8088fea:	f803 1b01 	strb.w	r1, [r3], #1
 8088fee:	e7f9      	b.n	8088fe4 <memset+0x4>

08088ff0 <srand>:
 8088ff0:	b538      	push	{r3, r4, r5, lr}
 8088ff2:	4b0d      	ldr	r3, [pc, #52]	; (8089028 <srand+0x38>)
 8088ff4:	4604      	mov	r4, r0
 8088ff6:	681d      	ldr	r5, [r3, #0]
 8088ff8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8088ffa:	b97b      	cbnz	r3, 808901c <srand+0x2c>
 8088ffc:	2018      	movs	r0, #24
 8088ffe:	f7fb fc6b 	bl	80848d8 <malloc>
 8089002:	4a0a      	ldr	r2, [pc, #40]	; (808902c <srand+0x3c>)
 8089004:	4b0a      	ldr	r3, [pc, #40]	; (8089030 <srand+0x40>)
 8089006:	63a8      	str	r0, [r5, #56]	; 0x38
 8089008:	e9c0 2300 	strd	r2, r3, [r0]
 808900c:	4b09      	ldr	r3, [pc, #36]	; (8089034 <srand+0x44>)
 808900e:	2201      	movs	r2, #1
 8089010:	6083      	str	r3, [r0, #8]
 8089012:	230b      	movs	r3, #11
 8089014:	8183      	strh	r3, [r0, #12]
 8089016:	2300      	movs	r3, #0
 8089018:	e9c0 2304 	strd	r2, r3, [r0, #16]
 808901c:	2200      	movs	r2, #0
 808901e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8089020:	611c      	str	r4, [r3, #16]
 8089022:	615a      	str	r2, [r3, #20]
 8089024:	bd38      	pop	{r3, r4, r5, pc}
 8089026:	bf00      	nop
 8089028:	200000cc 	.word	0x200000cc
 808902c:	abcd330e 	.word	0xabcd330e
 8089030:	e66d1234 	.word	0xe66d1234
 8089034:	0005deec 	.word	0x0005deec

08089038 <strchr>:
 8089038:	4603      	mov	r3, r0
 808903a:	b2c9      	uxtb	r1, r1
 808903c:	4618      	mov	r0, r3
 808903e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8089042:	b112      	cbz	r2, 808904a <strchr+0x12>
 8089044:	428a      	cmp	r2, r1
 8089046:	d1f9      	bne.n	808903c <strchr+0x4>
 8089048:	4770      	bx	lr
 808904a:	2900      	cmp	r1, #0
 808904c:	bf18      	it	ne
 808904e:	2000      	movne	r0, #0
 8089050:	4770      	bx	lr

08089052 <strchrnul>:
 8089052:	b510      	push	{r4, lr}
 8089054:	4604      	mov	r4, r0
 8089056:	f7ff ffef 	bl	8089038 <strchr>
 808905a:	b918      	cbnz	r0, 8089064 <strchrnul+0x12>
 808905c:	4620      	mov	r0, r4
 808905e:	f000 f830 	bl	80890c2 <strlen>
 8089062:	4420      	add	r0, r4
 8089064:	bd10      	pop	{r4, pc}

08089066 <strcmp>:
 8089066:	f810 2b01 	ldrb.w	r2, [r0], #1
 808906a:	f811 3b01 	ldrb.w	r3, [r1], #1
 808906e:	2a01      	cmp	r2, #1
 8089070:	bf28      	it	cs
 8089072:	429a      	cmpcs	r2, r3
 8089074:	d0f7      	beq.n	8089066 <strcmp>
 8089076:	1ad0      	subs	r0, r2, r3
 8089078:	4770      	bx	lr

0808907a <strcpy>:
 808907a:	4603      	mov	r3, r0
 808907c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8089080:	f803 2b01 	strb.w	r2, [r3], #1
 8089084:	2a00      	cmp	r2, #0
 8089086:	d1f9      	bne.n	808907c <strcpy+0x2>
 8089088:	4770      	bx	lr
	...

0808908c <strdup>:
 808908c:	4b02      	ldr	r3, [pc, #8]	; (8089098 <strdup+0xc>)
 808908e:	4601      	mov	r1, r0
 8089090:	6818      	ldr	r0, [r3, #0]
 8089092:	f000 b803 	b.w	808909c <_strdup_r>
 8089096:	bf00      	nop
 8089098:	200000cc 	.word	0x200000cc

0808909c <_strdup_r>:
 808909c:	b570      	push	{r4, r5, r6, lr}
 808909e:	4604      	mov	r4, r0
 80890a0:	4608      	mov	r0, r1
 80890a2:	460d      	mov	r5, r1
 80890a4:	f000 f80d 	bl	80890c2 <strlen>
 80890a8:	1c46      	adds	r6, r0, #1
 80890aa:	4631      	mov	r1, r6
 80890ac:	4620      	mov	r0, r4
 80890ae:	f7fb fc4b 	bl	8084948 <_malloc_r>
 80890b2:	4604      	mov	r4, r0
 80890b4:	b118      	cbz	r0, 80890be <_strdup_r+0x22>
 80890b6:	4632      	mov	r2, r6
 80890b8:	4629      	mov	r1, r5
 80890ba:	f7ff ff69 	bl	8088f90 <memcpy>
 80890be:	4620      	mov	r0, r4
 80890c0:	bd70      	pop	{r4, r5, r6, pc}

080890c2 <strlen>:
 80890c2:	4603      	mov	r3, r0
 80890c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80890c8:	2a00      	cmp	r2, #0
 80890ca:	d1fb      	bne.n	80890c4 <strlen+0x2>
 80890cc:	1a18      	subs	r0, r3, r0
 80890ce:	3801      	subs	r0, #1
 80890d0:	4770      	bx	lr

080890d2 <strncmp>:
 80890d2:	b510      	push	{r4, lr}
 80890d4:	b16a      	cbz	r2, 80890f2 <strncmp+0x20>
 80890d6:	3901      	subs	r1, #1
 80890d8:	1884      	adds	r4, r0, r2
 80890da:	f810 3b01 	ldrb.w	r3, [r0], #1
 80890de:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80890e2:	4293      	cmp	r3, r2
 80890e4:	d103      	bne.n	80890ee <strncmp+0x1c>
 80890e6:	42a0      	cmp	r0, r4
 80890e8:	d001      	beq.n	80890ee <strncmp+0x1c>
 80890ea:	2b00      	cmp	r3, #0
 80890ec:	d1f5      	bne.n	80890da <strncmp+0x8>
 80890ee:	1a98      	subs	r0, r3, r2
 80890f0:	bd10      	pop	{r4, pc}
 80890f2:	4610      	mov	r0, r2
 80890f4:	e7fc      	b.n	80890f0 <strncmp+0x1e>

080890f6 <strncpy>:
 80890f6:	4603      	mov	r3, r0
 80890f8:	b510      	push	{r4, lr}
 80890fa:	3901      	subs	r1, #1
 80890fc:	b132      	cbz	r2, 808910c <strncpy+0x16>
 80890fe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8089102:	3a01      	subs	r2, #1
 8089104:	f803 4b01 	strb.w	r4, [r3], #1
 8089108:	2c00      	cmp	r4, #0
 808910a:	d1f7      	bne.n	80890fc <strncpy+0x6>
 808910c:	2100      	movs	r1, #0
 808910e:	441a      	add	r2, r3
 8089110:	4293      	cmp	r3, r2
 8089112:	d100      	bne.n	8089116 <strncpy+0x20>
 8089114:	bd10      	pop	{r4, pc}
 8089116:	f803 1b01 	strb.w	r1, [r3], #1
 808911a:	e7f9      	b.n	8089110 <strncpy+0x1a>

0808911c <strrchr>:
 808911c:	b538      	push	{r3, r4, r5, lr}
 808911e:	4603      	mov	r3, r0
 8089120:	460c      	mov	r4, r1
 8089122:	b969      	cbnz	r1, 8089140 <strrchr+0x24>
 8089124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8089128:	f7ff bf86 	b.w	8089038 <strchr>
 808912c:	4605      	mov	r5, r0
 808912e:	1c43      	adds	r3, r0, #1
 8089130:	4621      	mov	r1, r4
 8089132:	4618      	mov	r0, r3
 8089134:	f7ff ff80 	bl	8089038 <strchr>
 8089138:	2800      	cmp	r0, #0
 808913a:	d1f7      	bne.n	808912c <strrchr+0x10>
 808913c:	4628      	mov	r0, r5
 808913e:	bd38      	pop	{r3, r4, r5, pc}
 8089140:	2500      	movs	r5, #0
 8089142:	e7f5      	b.n	8089130 <strrchr+0x14>

08089144 <strtok>:
 8089144:	4b13      	ldr	r3, [pc, #76]	; (8089194 <strtok+0x50>)
 8089146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808914a:	681f      	ldr	r7, [r3, #0]
 808914c:	4605      	mov	r5, r0
 808914e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8089150:	460e      	mov	r6, r1
 8089152:	b9b4      	cbnz	r4, 8089182 <strtok+0x3e>
 8089154:	2050      	movs	r0, #80	; 0x50
 8089156:	f7fb fbbf 	bl	80848d8 <malloc>
 808915a:	65b8      	str	r0, [r7, #88]	; 0x58
 808915c:	e9c0 4400 	strd	r4, r4, [r0]
 8089160:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8089164:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8089168:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 808916c:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8089170:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8089174:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8089178:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 808917c:	6184      	str	r4, [r0, #24]
 808917e:	7704      	strb	r4, [r0, #28]
 8089180:	6244      	str	r4, [r0, #36]	; 0x24
 8089182:	4631      	mov	r1, r6
 8089184:	4628      	mov	r0, r5
 8089186:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8089188:	2301      	movs	r3, #1
 808918a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 808918e:	f000 b803 	b.w	8089198 <__strtok_r>
 8089192:	bf00      	nop
 8089194:	200000cc 	.word	0x200000cc

08089198 <__strtok_r>:
 8089198:	b5f0      	push	{r4, r5, r6, r7, lr}
 808919a:	b908      	cbnz	r0, 80891a0 <__strtok_r+0x8>
 808919c:	6810      	ldr	r0, [r2, #0]
 808919e:	b188      	cbz	r0, 80891c4 <__strtok_r+0x2c>
 80891a0:	4604      	mov	r4, r0
 80891a2:	460f      	mov	r7, r1
 80891a4:	4620      	mov	r0, r4
 80891a6:	f814 5b01 	ldrb.w	r5, [r4], #1
 80891aa:	f817 6b01 	ldrb.w	r6, [r7], #1
 80891ae:	b91e      	cbnz	r6, 80891b8 <__strtok_r+0x20>
 80891b0:	b965      	cbnz	r5, 80891cc <__strtok_r+0x34>
 80891b2:	4628      	mov	r0, r5
 80891b4:	6015      	str	r5, [r2, #0]
 80891b6:	e005      	b.n	80891c4 <__strtok_r+0x2c>
 80891b8:	42b5      	cmp	r5, r6
 80891ba:	d1f6      	bne.n	80891aa <__strtok_r+0x12>
 80891bc:	2b00      	cmp	r3, #0
 80891be:	d1f0      	bne.n	80891a2 <__strtok_r+0xa>
 80891c0:	6014      	str	r4, [r2, #0]
 80891c2:	7003      	strb	r3, [r0, #0]
 80891c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80891c6:	461c      	mov	r4, r3
 80891c8:	e00c      	b.n	80891e4 <__strtok_r+0x4c>
 80891ca:	b915      	cbnz	r5, 80891d2 <__strtok_r+0x3a>
 80891cc:	460e      	mov	r6, r1
 80891ce:	f814 3b01 	ldrb.w	r3, [r4], #1
 80891d2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80891d6:	42ab      	cmp	r3, r5
 80891d8:	d1f7      	bne.n	80891ca <__strtok_r+0x32>
 80891da:	2b00      	cmp	r3, #0
 80891dc:	d0f3      	beq.n	80891c6 <__strtok_r+0x2e>
 80891de:	2300      	movs	r3, #0
 80891e0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80891e4:	6014      	str	r4, [r2, #0]
 80891e6:	e7ed      	b.n	80891c4 <__strtok_r+0x2c>

080891e8 <_strtol_l.isra.0>:
 80891e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80891ec:	468c      	mov	ip, r1
 80891ee:	4686      	mov	lr, r0
 80891f0:	4e39      	ldr	r6, [pc, #228]	; (80892d8 <_strtol_l.isra.0+0xf0>)
 80891f2:	4660      	mov	r0, ip
 80891f4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80891f8:	5da5      	ldrb	r5, [r4, r6]
 80891fa:	f015 0508 	ands.w	r5, r5, #8
 80891fe:	d1f8      	bne.n	80891f2 <_strtol_l.isra.0+0xa>
 8089200:	2c2d      	cmp	r4, #45	; 0x2d
 8089202:	d133      	bne.n	808926c <_strtol_l.isra.0+0x84>
 8089204:	f04f 0801 	mov.w	r8, #1
 8089208:	f89c 4000 	ldrb.w	r4, [ip]
 808920c:	f100 0c02 	add.w	ip, r0, #2
 8089210:	2b00      	cmp	r3, #0
 8089212:	d05c      	beq.n	80892ce <_strtol_l.isra.0+0xe6>
 8089214:	2b10      	cmp	r3, #16
 8089216:	d10c      	bne.n	8089232 <_strtol_l.isra.0+0x4a>
 8089218:	2c30      	cmp	r4, #48	; 0x30
 808921a:	d10a      	bne.n	8089232 <_strtol_l.isra.0+0x4a>
 808921c:	f89c 0000 	ldrb.w	r0, [ip]
 8089220:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8089224:	2858      	cmp	r0, #88	; 0x58
 8089226:	d14d      	bne.n	80892c4 <_strtol_l.isra.0+0xdc>
 8089228:	2310      	movs	r3, #16
 808922a:	f89c 4001 	ldrb.w	r4, [ip, #1]
 808922e:	f10c 0c02 	add.w	ip, ip, #2
 8089232:	2600      	movs	r6, #0
 8089234:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8089238:	3f01      	subs	r7, #1
 808923a:	fbb7 f9f3 	udiv	r9, r7, r3
 808923e:	4630      	mov	r0, r6
 8089240:	fb03 7a19 	mls	sl, r3, r9, r7
 8089244:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 8089248:	2d09      	cmp	r5, #9
 808924a:	d818      	bhi.n	808927e <_strtol_l.isra.0+0x96>
 808924c:	462c      	mov	r4, r5
 808924e:	42a3      	cmp	r3, r4
 8089250:	dd24      	ble.n	808929c <_strtol_l.isra.0+0xb4>
 8089252:	1c75      	adds	r5, r6, #1
 8089254:	d007      	beq.n	8089266 <_strtol_l.isra.0+0x7e>
 8089256:	4581      	cmp	r9, r0
 8089258:	d31d      	bcc.n	8089296 <_strtol_l.isra.0+0xae>
 808925a:	d101      	bne.n	8089260 <_strtol_l.isra.0+0x78>
 808925c:	45a2      	cmp	sl, r4
 808925e:	db1a      	blt.n	8089296 <_strtol_l.isra.0+0xae>
 8089260:	2601      	movs	r6, #1
 8089262:	fb00 4003 	mla	r0, r0, r3, r4
 8089266:	f81c 4b01 	ldrb.w	r4, [ip], #1
 808926a:	e7eb      	b.n	8089244 <_strtol_l.isra.0+0x5c>
 808926c:	2c2b      	cmp	r4, #43	; 0x2b
 808926e:	bf08      	it	eq
 8089270:	f89c 4000 	ldrbeq.w	r4, [ip]
 8089274:	46a8      	mov	r8, r5
 8089276:	bf08      	it	eq
 8089278:	f100 0c02 	addeq.w	ip, r0, #2
 808927c:	e7c8      	b.n	8089210 <_strtol_l.isra.0+0x28>
 808927e:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 8089282:	2d19      	cmp	r5, #25
 8089284:	d801      	bhi.n	808928a <_strtol_l.isra.0+0xa2>
 8089286:	3c37      	subs	r4, #55	; 0x37
 8089288:	e7e1      	b.n	808924e <_strtol_l.isra.0+0x66>
 808928a:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 808928e:	2d19      	cmp	r5, #25
 8089290:	d804      	bhi.n	808929c <_strtol_l.isra.0+0xb4>
 8089292:	3c57      	subs	r4, #87	; 0x57
 8089294:	e7db      	b.n	808924e <_strtol_l.isra.0+0x66>
 8089296:	f04f 36ff 	mov.w	r6, #4294967295
 808929a:	e7e4      	b.n	8089266 <_strtol_l.isra.0+0x7e>
 808929c:	1c73      	adds	r3, r6, #1
 808929e:	d106      	bne.n	80892ae <_strtol_l.isra.0+0xc6>
 80892a0:	2322      	movs	r3, #34	; 0x22
 80892a2:	4638      	mov	r0, r7
 80892a4:	f8ce 3000 	str.w	r3, [lr]
 80892a8:	b942      	cbnz	r2, 80892bc <_strtol_l.isra.0+0xd4>
 80892aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80892ae:	f1b8 0f00 	cmp.w	r8, #0
 80892b2:	d000      	beq.n	80892b6 <_strtol_l.isra.0+0xce>
 80892b4:	4240      	negs	r0, r0
 80892b6:	2a00      	cmp	r2, #0
 80892b8:	d0f7      	beq.n	80892aa <_strtol_l.isra.0+0xc2>
 80892ba:	b10e      	cbz	r6, 80892c0 <_strtol_l.isra.0+0xd8>
 80892bc:	f10c 31ff 	add.w	r1, ip, #4294967295
 80892c0:	6011      	str	r1, [r2, #0]
 80892c2:	e7f2      	b.n	80892aa <_strtol_l.isra.0+0xc2>
 80892c4:	2430      	movs	r4, #48	; 0x30
 80892c6:	2b00      	cmp	r3, #0
 80892c8:	d1b3      	bne.n	8089232 <_strtol_l.isra.0+0x4a>
 80892ca:	2308      	movs	r3, #8
 80892cc:	e7b1      	b.n	8089232 <_strtol_l.isra.0+0x4a>
 80892ce:	2c30      	cmp	r4, #48	; 0x30
 80892d0:	d0a4      	beq.n	808921c <_strtol_l.isra.0+0x34>
 80892d2:	230a      	movs	r3, #10
 80892d4:	e7ad      	b.n	8089232 <_strtol_l.isra.0+0x4a>
 80892d6:	bf00      	nop
 80892d8:	0808a007 	.word	0x0808a007

080892dc <strtol>:
 80892dc:	4613      	mov	r3, r2
 80892de:	460a      	mov	r2, r1
 80892e0:	4601      	mov	r1, r0
 80892e2:	4802      	ldr	r0, [pc, #8]	; (80892ec <strtol+0x10>)
 80892e4:	6800      	ldr	r0, [r0, #0]
 80892e6:	f7ff bf7f 	b.w	80891e8 <_strtol_l.isra.0>
 80892ea:	bf00      	nop
 80892ec:	200000cc 	.word	0x200000cc

080892f0 <dynalib_user>:
 80892f0:	08080041 08080081 080800a9 080800ad     A...............
 8089300:	00000000 65746e69 6c616e72 74786500     ....internal.ext
 8089310:	616e7265 6172006c 203a6574 616e2000     ernal.rate: . na
 8089320:	00203a76 74747562 77206e6f 63207361     v: .button was c
 8089330:	6b63696c 25206465 69742064 0073656d     licked %d times.
 8089340:	616c227b 66253a22 6f6c222c 66253a22     {"la":%f,"lo":%f
 8089350:	7468222c 66253a22 6361222c 66253a22     ,"ht":%f,"ac":%f
 8089360:	6d74222c 25223a22 007d2273 50474a4c     ,"tm":"%s"}.LJGP
 8089370:	58494653 73227b00 25203a22 6e222c64     SFIX.{"s": %d,"n
 8089380:	30203a22 2276222c 322e253a 63222c66     ": 0,"v":%.2f,"c
 8089390:	2e253a22 007d6632 57504a4c 41545352     ":%.2f}.LJPWRSTA
 80893a0:	227b0054 253a2278 79222c64 64253a22     T.{"x":%d,"y":%d
 80893b0:	227a222c 2c64253a 3a226d22 007d6425     ,"z":%d,"m":%d}.
 80893c0:	43414a4c 54524c45 74227b00 2e253a22     LJACELRT.{"t":%.
 80893d0:	222c6632 253a2268 7d66322e 454a4c00     2f,"h":%.2f}.LJE
 80893e0:	544d564e 69614600 2064656c 72206f74     NVMT.Failed to r
 80893f0:	20646165 6d6f7266 54484420 6e657320     ead from DHT sen
 8089400:	21726f73 72777000 73706700 63636100     sor!.pwr.gps.acc
 8089410:	766e6500 63227b00 3a22646d 22732522     .env.{"cmd":"%s"
 8089420:	4a4c007d 45444d43 7b005252 3a227322     }.LJCMDERR.{"s":
 8089430:	2c642520 3a226e22 222c3120 253a2276      %d,"n": 1,"v":%
 8089440:	2c66322e 3a226322 66322e25 6e45007d     .2f,"c":%.2f}.En
 8089450:	664f2064 6f6f6c20 20292870 636e7566     d Of loop() func
 8089460:	6e6f6974 696e6900 6d6f4374 74656c70     tion.initComplet
 8089470:	6f680065 6d007275 74756e69 6f6d0065     e.hour.minute.mo
 8089480:	0068746e 00796164 72616579 6c696d00     nth.day.year.mil
 8089490:	6573696c 646e6f63 616c0073 75746974     liseconds.latitu
 80894a0:	6c006564 69676e6f 65647574 74616c00     de.longitude.lat
 80894b0:	64757469 67654465 73656572 6e6f6c00     itudeDegrees.lon
 80894c0:	75746967 65446564 65657267 65670073     gitudeDegrees.ge
 80894d0:	6864696f 68676965 6c610074 75746974     oidheight.altitu
 80894e0:	73006564 64656570 78696600 6c617571     de.speed.fixqual
 80894f0:	00797469 65746173 74696c6c 68007365     ity.satellites.h
 8089500:	417a726f 25006363 7600756c 41747265     orzAcc.%lu.vertA
 8089510:	76006363 004e6c65 00646c25 456c6576     cc.velN.%ld.velE
 8089520:	6c657600 53670044 64656570 6f646f00     .velD.gSpeed.odo
 8089530:	70697254 6f646f00 61746f54 6f44006c     Trip.odoTotal.Do
 8089540:	2074276e 776f6e6b 61687420 6e6f2074     n't know that on
 8089550:	43202e65 6b636568 65707320 6e696c6c     e. Check spellin
 8089560:	4c002e67 444d434a 004c4156 56627570     g..LJCMDVAL.pubV
 8089570:	73006c61 43417465 72685443 74657300     al.setACCThr.set
 8089580:	44535047 7300796c 43417465 796c4443     GPSDly.setACCDly
 8089590:	74657300 44544844 6700796c 61527370     .setDHTDly.gpsRa
 80895a0:	72006574 74657365 004f444f 776f6873     te.resetODO.show
 80895b0:	006c6c41 74736f70 756c6156 69640065     All.postValue.di
 80895c0:	61746967 6165726c 69640064 61746967     gitalread.digita
 80895d0:	6972776c 61006574 6f6c616e 61657267     lwrite.analogrea
 80895e0:	6e610064 676f6c61 74697277 616c0065     d.analogwrite.la
 80895f0:	6f507473 00726577 65636361 7268546c     stPower.accelThr
 8089600:	00687365 6e617274 74696d73 6b73614d     esh.transmitMask
 8089610:	73616c00 53504774 00627550 7473616c     .lastGPSPub.last
 8089620:	50434341 6c006275 44747361 75505448     ACCPub.lastDHTPu
 8089630:	65640062 4779616c 694d5350 6564006e     b.delayGPSMin.de
 8089640:	4179616c 694d4343 6564006e 4479616c     layACCMin.delayD
 8089650:	694d5448 7067006e 74784573 616e7265     HTMin.gpsExterna
 8089660:	6e45006c 666f2064 74657320 29287075     l.End of setup()
 8089670:	6e756620 6f697463 6573006e 73706774      function.setgps
 8089680:	00746e61 74696e69 706d6f43 6574656c     ant.initComplete
 8089690:	6800203a 3a72756f 696d0020 6574756e     : .hour: .minute
 80896a0:	6d00203a 68746e6f 6400203a 203a7961     : .month: .day: 
 80896b0:	61657900 00203a72 6c6c696d 63657369     .year: .millisec
 80896c0:	73646e6f 6c00203a 74697461 3a656475     onds: .latitude:
 80896d0:	6f6c0020 7469676e 3a656475 616c0020      .longitude: .la
 80896e0:	75746974 65446564 65657267 00203a73     titudeDegrees: .
 80896f0:	676e6f6c 64757469 67654465 73656572     longitudeDegrees
 8089700:	6700203a 64696f65 67696568 203a7468     : .geoidheight: 
 8089710:	746c6100 64757469 00203a65 65657073     .altitude: .spee
 8089720:	00203a64 71786966 696c6175 203a7974     d: .fixquality: 
 8089730:	74617300 696c6c65 3a736574 6f680020     .satellites: .ho
 8089740:	63417a72 00203a63 74726576 3a636341     rzAcc: .vertAcc:
 8089750:	65760020 203a4e6c 6c657600 00203a45      .velN: .velE: .
 8089760:	446c6576 6700203a 65657053 00203a64     velD: .gSpeed: .
 8089770:	546f646f 3a706972 646f0020 746f546f     odoTrip: .odoTot
 8089780:	203a6c61 6e6f6300 6576456e 7453746e     al: .connEventSt
 8089790:	00737461 73736573 436e6f69 6b636568     ats.sessionCheck
 80897a0:	73657400 46726574 0000006e              .testerFn...

080897ac <_ZTV5Timer>:
	...
 80897b4:	080803d5 0808041d 080801c5              ............

080897c0 <_ZTVN5spark10LogHandlerE>:
	...
 80897d0:	080800c9 080800ed                       ........

080897d8 <_ZTVN5spark16SerialLogHandlerE>:
	...
 80897e0:	08080265 08080299 08085fc5 080800ef     e........_......

080897f0 <_ZTV12BatteryCheck>:
	...
 80897f8:	0808197d 0808197f 65736572 6f6d0074     }.......reset.mo
 8089808:	526d6564 74657365 73657200 65537465     demReset.resetSe
 8089818:	6f697373 7073006e 2f6b7261 69766564     ssion.spark/devi
 8089828:	732f6563 69737365 652f6e6f 7300646e     ce/session/end.s
 8089838:	4d656661 0065646f 57707061 68637461     afeMode.appWatch
 8089848:	00676f64 65656c73 65640070 64007065     dog.sleep.deep.d
 8089858:	53706565 646e6174 73007962 00706f74     eepStandby.stop.
 8089868:	706f7473 6e617453 00796264 676e6970     stopStandby.ping
 8089878:	61747300 00007472                       .start..

08089880 <_ZTV6Tester>:
	...
 8089888:	08081a71 08081a73 552b5441 474e4950     q...s...AT+UPING
 8089898:	2e38223d 2e382e38 0a0d2238 2b544100     ="8.8.8.8"...AT+
 80898a8:	4e495055 61223d47 702e6970 69747261     UPING="api.parti
 80898b8:	2e656c63 0d226f69 6572000a 74746573     cle.io"...resett
 80898c8:	20676e69 65646f6d 5441006d 5546432b     ing modem.AT+CFU
 80898d8:	36313d4e 75000a0d 6f640070 63006e77     N=16...up.down.c
 80898e8:	756c6c65 2072616c 63007325 64756f6c     ellular %s.cloud
 80898f8:	6e6f6320 7463656e 206e6f69 65007325      connection %s.e
 8089908:	7265746e 6c206465 65747369 676e696e     ntered listening
 8089918:	646f6d20 00000065                        mode...

08089920 <_ZTV15ConnectionCheck>:
	...
 8089928:	08081e61 08081e63 77707061 00007464     a...c...appwdt..

08089938 <_ZTV18AppWatchdogWrapper>:
	...
 8089940:	0808215d 080821a9 7570002f 73696c62     ]!...!../.publis
 8089950:	676e6968 73657320 6e6f6973 65686320     hing session che
 8089960:	65206b63 746e6576 00732520              ck event %s.

0808996c <_ZTV12SessionCheck>:
	...
 8089974:	08082339 08082359 2c756c25 2c756c25     9#..Y#..%lu,%lu,
 8089984:	252c6425 63003b64 646c756f 2074276e     %d,%d;.couldn't 
 8089994:	646e6573 6c6c6120 65766520 2c73746e     send all events,
 80899a4:	76617320 20676e69 66206425 6c20726f      saving %d for l
 80899b4:	72657461 6e657300 64252074 65766520     ater.sent %d eve
 80899c4:	0073746e 63736964 69647261 6f20676e     nts.discarding o
 80899d4:	6520646c 746e6576 6e6f6300 7463656e     ld event.connect
 80899e4:	456e6f69 746e6576 65766520 253d746e     ionEvent event=%
 80899f4:	61642064 253d6174 6e690064 61697469     d data=%d.initia
 8089a04:	697a696c 6320676e 656e6e6f 6f697463     lizing connectio
 8089a14:	7665206e 20746e65 61746572 64656e69     n event retained
 8089a24:	6d656d20 0079726f                        memory.

08089a2c <_ZTV16ConnectionEvents>:
	...
 8089a34:	08082685 08082687                       .&...&..

08089a3c <_ZTV10PowerCheck>:
	...
 8089a44:	080828b1 080828c9 252c6625 70670066     .(...(..%f,%f.gp
 8089a54:	65622e73 206e6967 6c696166 203a6465     s.begin failed: 
 8089a64:	53504700 61747320 64657472 72754300     .GPS started.Cur
 8089a74:	6d697472 00203a65 73614c20 6d697474     rtime: . Lasttim
 8089a84:	00203a65 2000202c 00203f3d 3353494c     e: ., . =? .LIS3
 8089a94:	00004844                                DH..

08089a98 <_ZTV15Adafruit_LIS3DH>:
	...
 8089aa0:	080829db 08082ccd 08082fe5 080834a5     .)...,.../...4..
 8089ab0:	08082fe9 5024002c 2c584255 312c3134     ./..,.$PUBX,41,1
 8089ac0:	312c332c 3036392c 2a302c30 0a0d3631     ,3,1,9600,0*16..
 8089ad0:	67656200 66206e69 656c6961 73202c64     .begin failed, s
 8089ae0:	65746174 2000203a 6f727265 00203a72     tate: . error: .
 8089af0:	73726170 41203a65 545f4b43 3a455059     parse: ACK_TYPE:
 8089b00:	656d0020 67617373 63612065 3a64656b      .message acked:
 8089b10:	61700020 3a657372 4b414e20 5059545f      .parse: NAK_TYP
 8089b20:	00203a45 7373656d 20656761 654b414e     E: .message NAKe
 8089b30:	00203a64 73726170 55203a65 6f6e6b6e     d: .parse: Unkno
 8089b40:	74206e77 3a657079 003e0020 65726954     wn type: .>.Tire
 8089b50:	666f2064 69617720 676e6974 726f6620     d of waiting for
 8089b60:	65687420 53504720 2749202e 6f67206d      the GPS. I'm go
 8089b70:	20676e69 74756873 20746920 2066666f     ing shut it off 
 8089b80:	20646e61 6f626572 002e746f 64616572     and reboot..read
 8089b90:	6d584255 62206773 6c206461 74676e65     UBXmsg bad lengt
 8089ba0:	00203a68 64616572 6d584255 62206773     h: .readUBXmsg b
 8089bb0:	63206461 6b636568 6d757320 70670020     ad check sum .gp
 8089bc0:	65722e73 67206461 7520746f 41427862     s.read got ubxBA
 8089bd0:	454c5f44 4854474e 73706700 6165722e     D_LENGTH.gps.rea
 8089be0:	6f672064 62752074 44414278 4548435f     d got ubxBAD_CHE
 8089bf0:	535f4b43 77004d55 65746972 3a584255     CK_SUM.writeUBX:
 8089c00:	70797420 00203a65 2e737067 646e6573      type: .gps.send
 8089c10:	6d6d6f43 20646e61 20746f67 42786275     Command got ubxB
 8089c20:	4c5f4441 54474e45 70670048 65732e73     AD_LENGTH.gps.se
 8089c30:	6f43646e 6e616d6d 6f672064 62752074     ndCommand got ub
 8089c40:	44414278 4548435f 535f4b43 67004d55     xBAD_CHECK_SUM.g
 8089c50:	732e7370 43646e65 616d6d6f 6720646e     ps.sendCommand g
 8089c60:	7520746f 4f4e7862 4b43415f 74657300     ot ubxNO_ACK.set
 8089c70:	65746152 6863203a 65676e61 656d2064     Rate: changed me
 8089c80:	72757361 6e656d65 6f742074 6e696d20     asurement to min
 8089c90:	6d756d69 20303120 7300736d 61527465     imum 10 ms.setRa
 8089ca0:	203a6574 6e616863 20646567 6976616e     te: changed navi
 8089cb0:	69746167 6f536e6f 6f74206c 6e696d20     gationSol to min
 8089cc0:	6d756d69 73003120 61527465 203a6574     imum 1.setRate: 
 8089cd0:	6e616863 20646567 6976616e 69746167     changed navigati
 8089ce0:	6f536e6f 6f74206c 78616d20 6d756d69     onSol to maximum
 8089cf0:	37323120 74657300 65746152 656d203a      127.setRate: me
 8089d00:	72757361 6e656d65 00203a74 52746573     asurement: .setR
 8089d10:	3a657461 76616e20 74616769 536e6f69     ate: navigationS
 8089d20:	203a6c6f 74657300 65746152 6275203a     ol: .setRate: ub
 8089d30:	74615778 6f646863 00203a67 49480041     xWatchdog: .A.HI
 8089d40:	4c004847                                 GH.LOW.

08089d47 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 8089d47:	18100800 38302820 006e616e 00666e69     .... (08nan.inf.
 8089d57:	0066766f 64756162 72655300 006c6169     ovf.baud.Serial.
 8089d67:	53425355 61697265 4a00316c 534e4f53     USBSerial1.JSONS
 8089d77:	61657274 676f4c6d 646e6148 0072656c     treamLogHandler.
 8089d87:	00707061 30313025 5d002075 29280020     app.%010u .] .()
 8089d97:	2000203a 6f63005b 3d206564 69250020     : . [.code = .%i
 8089da7:	74656400 736c6961 00203d20 66006e6c     .details = .ln.f
 8089db7:	6f63006e 64006564 69617465 0000006c     n.code.detail...
	...

08089dc8 <_ZTVN5spark16JSONStreamWriterE>:
	...
 8089dd0:	08085341 08085367 08085327 080875c7     AS..gS..'S...u..

08089de0 <_ZTVN5spark16StreamLogHandlerE>:
	...
 8089de8:	080857f1 08085809 08085fc5 080800ef     .W...X..._......

08089df8 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 8089e00:	0808581d 08085831 0808616d 0808532f     .X..1X..ma../S..

08089e10 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 8089e18:	0808533f 08085375 08085f01 08085331     ?S..uS..._..1S..

08089e28 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 8089e30:	0808533d 08085383 08085719 0808539f     =S...S...W...S..
 8089e40:	2b25005a 3a643330 75323025 2d592500     Z.%+03d:%02u.%Y-
 8089e50:	252d6d25 48255464 3a4d253a 7a255325     %m-%dT%H:%M:%S%z
 8089e60:	63736100 656d6974 00000000              .asctime....

08089e6c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 8089e74:	08086859 0808685f 0808689d 0808686d     Yh.._h...h..mh..
 8089e84:	0808685b                                [h..

08089e88 <_ZTV9IPAddress>:
	...
 8089e90:	08086e69 08086e59 08086e5b              in..Yn..[n..

08089e9c <_ZTV9USBSerial>:
	...
 8089ea4:	08086efd 08086f63 08086f3b 0808504d     .n..co..;o..MP..
 8089eb4:	08086f2d 08086eff 08086f0f 08086f5d     -o...n...o..]o..
 8089ec4:	08086f1f 08086ef9                       .o...n..

08089ecc <_ZTVN5spark13CellularClassE>:
	...
 8089ed4:	080871d7 080871cd 080871c3 0808713d     .q...q...q..=q..
 8089ee4:	080871b7 080871ab 08087505 0808750d     .q...q...u...u..
 8089ef4:	0808719f 08087197 0808718d 08087183     .q...q...q...q..
 8089f04:	08087147                                Gq..

08089f08 <_ZTV11USARTSerial>:
	...
 8089f10:	08087211 08087279 08087255 0808504d     .r..yr..Ur..MP..
 8089f20:	08087225 08087241 08087233 0808724f     %r..Ar..3r..Or..
 8089f30:	08087213 08087217                       .r...r..

08089f38 <_ZTV7TwoWire>:
	...
 8089f40:	08087375 080873bf 08087397 08087377     us...s...s..ws..
 8089f50:	0808739f 080873a7 080873af 080873b7     .s...s...s...s..

08089f60 <_ZTVN5spark12NetworkClassE>:
	...
 8089f68:	080874c5 080874cf 080874d9 080874e3     .t...t...t...t..
 8089f78:	080874ed 080874f9 08087505 0808750d     .t...t...u...u..
 8089f88:	08087515 08087521 08087529 08087533     .u..!u..)u..3u..
 8089f98:	0808753d 75007525 78343025               =u..%u.u%04x.

08089fa5 <_ZSt7nothrow>:
 8089fa5:	73000000 00747271 73332e25 332e2520     ...sqrt.%.3s %.3
 8089fb5:	64332573 322e2520 2e253a64 253a6432     s%3d %.2d:%.2d:%
 8089fc5:	2064322e 000a6425                       .2d %d..

08089fcd <day_name.4782>:
 8089fcd:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
 8089fdd:	61536972                                 riSat

08089fe2 <mon_name.4783>:
 8089fe2:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
 8089ff2:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
 808a002:	63654476                                vDec

0808a006 <_ctype_>:
 808a006:	20202000 20202020 28282020 20282828     .         ((((( 
 808a016:	20202020 20202020 20202020 20202020                     
 808a026:	10108820 10101010 10101010 10101010      ...............
 808a036:	04040410 04040404 10040404 10101010     ................
 808a046:	41411010 41414141 01010101 01010101     ..AAAAAA........
 808a056:	01010101 01010101 01010101 10101010     ................
 808a066:	42421010 42424242 02020202 02020202     ..BBBBBB........
 808a076:	02020202 02020202 02020202 10101010     ................
 808a086:	00000020 00000000 00000000 00000000      ...............
	...

0808a107 <link_const_variable_data_end>:
	...

0808a108 <link_constructors_location>:
 808a108:	080816e9 	.word	0x080816e9
 808a10c:	08081a21 	.word	0x08081a21
 808a110:	08081e41 	.word	0x08081e41
 808a114:	080820ed 	.word	0x080820ed
 808a118:	08082679 	.word	0x08082679
 808a11c:	080828a5 	.word	0x080828a5
 808a120:	08082cdd 	.word	0x08082cdd
 808a124:	08083f05 	.word	0x08083f05
 808a128:	08084ced 	.word	0x08084ced
 808a12c:	08085fb5 	.word	0x08085fb5
 808a130:	08086525 	.word	0x08086525
 808a134:	0808656d 	.word	0x0808656d
 808a138:	080871e1 	.word	0x080871e1
 808a13c:	08087585 	.word	0x08087585
 808a140:	08087b71 	.word	0x08087b71

0808a144 <link_constructors_end>:
	...
