
c:/Users/Mitch/Documents/Particle/projects/TrailerMonitor/target/2.0.0/electron/TrailerMonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000a0a0  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000224  40024000  0808a0c0  00024000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000130  20000000  0808a2e4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000468  20000130  20000130  00040130  2**3
                  ALLOC
  6 .module_info_suffix 00000028  0808a414  0808a414  0003a414  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  0808a43c  0808a43c  0003a43c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   002376f7  00000000  00000000  0003a440  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00024749  00000000  00000000  00271b37  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002fd0  00000000  00000000  00296280  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00007d20  00000000  00000000  00299250  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00038c97  00000000  00000000  002a0f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000520b7  00000000  00000000  002d9c07  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000c80b5  00000000  00000000  0032bcbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000849c  00000000  00000000  003f3d74  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0002d1f9  00000000  00000000  003fc210  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080020 <localtime_r>:
#endif // !(defined(DYNALIB_IMPORT) && defined(PARTICLE_COMPILE_LTO))
DYNALIB_FN(18, services2, mktime32, time32_t(struct tm*))
DYNALIB_FN(19, services2, __ssvfscanf_r, int(struct _reent*, FILE*, const char*, va_list))
DYNALIB_FN(20, services2, _printf_i, int(struct _reent*, struct _prt_data_t*, FILE*, int (*pfunc)(struct _reent *, FILE *, const char *, size_t), va_list*))
DYNALIB_FN(21, services2, localtime32_r, struct tm*(const time32_t*, struct tm*))
DYNALIB_FN(22, services2, localtime_r, struct tm*(const time_t*, struct tm*))
 8080020:	b508      	push	{r3, lr}
 8080022:	4b02      	ldr	r3, [pc, #8]	; (808002c <localtime_r+0xc>)
 8080024:	681b      	ldr	r3, [r3, #0]
 8080026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8080028:	9301      	str	r3, [sp, #4]
 808002a:	bd08      	pop	{r3, pc}
 808002c:	0806002c 	.word	0x0806002c

08080030 <strftime>:
DYNALIB_FN(23, services2, mktime, time_t(struct tm*))
DYNALIB_FN(24, services2, gmtime_r, struct tm*(const time_t*, struct tm*))
DYNALIB_FN(25, services2, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
 8080030:	b508      	push	{r3, lr}
 8080032:	4b02      	ldr	r3, [pc, #8]	; (808003c <strftime+0xc>)
 8080034:	681b      	ldr	r3, [r3, #0]
 8080036:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8080038:	9301      	str	r3, [sp, #4]
 808003a:	bd08      	pop	{r3, pc}
 808003c:	0806002c 	.word	0x0806002c

08080040 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080040:	4809      	ldr	r0, [pc, #36]	; (8080068 <module_user_pre_init+0x28>)
 8080042:	490a      	ldr	r1, [pc, #40]	; (808006c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 8080044:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080046:	4288      	cmp	r0, r1
 8080048:	d005      	beq.n	8080056 <module_user_pre_init+0x16>
 808004a:	4a09      	ldr	r2, [pc, #36]	; (8080070 <module_user_pre_init+0x30>)
 808004c:	4282      	cmp	r2, r0
 808004e:	d002      	beq.n	8080056 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 8080050:	1a12      	subs	r2, r2, r0
 8080052:	f008 ff6d 	bl	8088f30 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080056:	4807      	ldr	r0, [pc, #28]	; (8080074 <module_user_pre_init+0x34>)
 8080058:	4a07      	ldr	r2, [pc, #28]	; (8080078 <module_user_pre_init+0x38>)
 808005a:	2100      	movs	r1, #0
 808005c:	1a12      	subs	r2, r2, r0
 808005e:	f008 ff8f 	bl	8088f80 <memset>
    return &link_heap_start;
}
 8080062:	4806      	ldr	r0, [pc, #24]	; (808007c <module_user_pre_init+0x3c>)
 8080064:	bd08      	pop	{r3, pc}
 8080066:	bf00      	nop
 8080068:	20000000 	.word	0x20000000
 808006c:	0808a2e4 	.word	0x0808a2e4
 8080070:	20000130 	.word	0x20000130
 8080074:	20000130 	.word	0x20000130
 8080078:	20000598 	.word	0x20000598
 808007c:	20000598 	.word	0x20000598

08080080 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 8080080:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 8080082:	f006 fb97 	bl	80867b4 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080086:	2500      	movs	r5, #0
 8080088:	4e05      	ldr	r6, [pc, #20]	; (80800a0 <module_user_init+0x20>)
 808008a:	4c06      	ldr	r4, [pc, #24]	; (80800a4 <module_user_init+0x24>)
 808008c:	1ba4      	subs	r4, r4, r6
 808008e:	08a4      	lsrs	r4, r4, #2
 8080090:	42a5      	cmp	r5, r4
 8080092:	d100      	bne.n	8080096 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080094:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 8080096:	f856 3b04 	ldr.w	r3, [r6], #4
 808009a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808009c:	3501      	adds	r5, #1
 808009e:	e7f7      	b.n	8080090 <module_user_init+0x10>
 80800a0:	0808a078 	.word	0x0808a078
 80800a4:	0808a0b4 	.word	0x0808a0b4

080800a8 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80800a8:	f000 bf60 	b.w	8080f6c <setup>

080800ac <module_user_loop>:
}

void module_user_loop() {
 80800ac:	b508      	push	{r3, lr}
    loop();
 80800ae:	f000 fd4b 	bl	8080b48 <loop>
    _post_loop();
}
 80800b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80800b6:	f006 bb3f 	b.w	8086738 <_post_loop>

080800ba <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80800ba:	f004 bbed 	b.w	8084898 <malloc>

080800be <_Znaj>:
 80800be:	f004 bbeb 	b.w	8084898 <malloc>

080800c2 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80800c2:	f004 bbf1 	b.w	80848a8 <free>
	...

080800c8 <__cxa_pure_virtual>:
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 80800c8:	2100      	movs	r1, #0
 80800ca:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 80800cc:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80800ce:	4a02      	ldr	r2, [pc, #8]	; (80800d8 <__cxa_pure_virtual+0x10>)
 80800d0:	f004 faaa 	bl	8084628 <panic_>
  while (1);
 80800d4:	e7fe      	b.n	80800d4 <__cxa_pure_virtual+0xc>
 80800d6:	bf00      	nop
 80800d8:	08084249 	.word	0x08084249

080800dc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800dc:	7800      	ldrb	r0, [r0, #0]
 80800de:	fab0 f080 	clz	r0, r0
 80800e2:	0940      	lsrs	r0, r0, #5
 80800e4:	4770      	bx	lr

080800e6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800e6:	2301      	movs	r3, #1
 80800e8:	7003      	strb	r3, [r0, #0]
 80800ea:	4770      	bx	lr

080800ec <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 80800ec:	4770      	bx	lr

080800ee <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
 80800ee:	6a00      	ldr	r0, [r0, #32]
 80800f0:	6803      	ldr	r3, [r0, #0]
 80800f2:	68db      	ldr	r3, [r3, #12]
 80800f4:	4718      	bx	r3

080800f6 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
 80800f6:	6803      	ldr	r3, [r0, #0]
 80800f8:	4718      	bx	r3

080800fa <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
 80800fa:	2a01      	cmp	r2, #1
 80800fc:	d003      	beq.n	8080106 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
 80800fe:	2a02      	cmp	r2, #2
 8080100:	d003      	beq.n	808010a <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
 8080102:	2000      	movs	r0, #0
 8080104:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8080106:	6001      	str	r1, [r0, #0]
	      break;
 8080108:	e7fb      	b.n	8080102 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 808010a:	680b      	ldr	r3, [r1, #0]
 808010c:	6003      	str	r3, [r0, #0]
	}
 808010e:	e7f8      	b.n	8080102 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>

08080110 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	  switch (__op)
 8080110:	2a01      	cmp	r2, #1
 8080112:	d003      	beq.n	808011c <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xc>
 8080114:	2a02      	cmp	r2, #2
 8080116:	d003      	beq.n	8080120 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x10>
	}
 8080118:	2000      	movs	r0, #0
 808011a:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 808011c:	6001      	str	r1, [r0, #0]
	      break;
 808011e:	e7fb      	b.n	8080118 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8080120:	680b      	ldr	r3, [r1, #0]
 8080122:	6003      	str	r3, [r0, #0]
	}
 8080124:	e7f8      	b.n	8080118 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x8>
	...

08080128 <_Z7callGPSv>:
//int transmittingData = ( TRANSMITTINGGPSDATA | TRANSMITTINGACCDATA | TRANSMITTINGPWRDATA | TRANSMITTINGDHTDATA );
// Run the GPS off a timer interrupt.
// read all bytes available, if an entire message was received,
// parse it store the data for access by the get routines.
void callGPS() {
     t.updateGPS();
 8080128:	4801      	ldr	r0, [pc, #4]	; (8080130 <_Z7callGPSv+0x8>)
 808012a:	f002 bd7d 	b.w	8082c28 <_ZN13AssetTracker29updateGPSEv>
 808012e:	bf00      	nop
 8080130:	20000228 	.word	0x20000228

08080134 <_ZNSt17_Function_handlerIFi6StringEPFbS0_EE9_M_invokeERKSt9_Any_dataOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8080134:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return (*_Base::_M_get_pointer(__functor))(
 8080136:	6804      	ldr	r4, [r0, #0]
 8080138:	4668      	mov	r0, sp
 808013a:	f004 fe4f 	bl	8084ddc <_ZN6StringC1EOS_>
 808013e:	4668      	mov	r0, sp
 8080140:	47a0      	blx	r4
 8080142:	4604      	mov	r4, r0
 8080144:	4668      	mov	r0, sp
 8080146:	f004 fdcf 	bl	8084ce8 <_ZN6StringD1Ev>
      }
 808014a:	4620      	mov	r0, r4
 808014c:	b004      	add	sp, #16
 808014e:	bd10      	pop	{r4, pc}

08080150 <_Z16accelThresholder6String>:
		else
		  transmittingData &= ~( SERIALBTNDATA | SERIALCONNDATA | SERIALLOOPDATA | SERIALSETUPDATA | SERIALGPSDATA | SERIALACCDATA | SERIALPWRDATA | SERIALDHTDATA );
}

// Remotely change the trigger threshold!
int accelThresholder(String command) {
 8080150:	b508      	push	{r3, lr}
    accelThreshold = atoi(command);
 8080152:	6800      	ldr	r0, [r0, #0]
 8080154:	f008 fed6 	bl	8088f04 <atoi>
 8080158:	4b01      	ldr	r3, [pc, #4]	; (8080160 <_Z16accelThresholder6String+0x10>)
 808015a:	6018      	str	r0, [r3, #0]
    return accelThreshold;
}
 808015c:	bd08      	pop	{r3, pc}
 808015e:	bf00      	nop
 8080160:	20000000 	.word	0x20000000

08080164 <_Z18setDelayGPSMinutes6String>:
// Remotely change the publishing delay for GPS!
int setDelayGPSMinutes(String command) {
 8080164:	b508      	push	{r3, lr}
    delayGPSMinutes = atoi(command);
 8080166:	6800      	ldr	r0, [r0, #0]
 8080168:	f008 fecc 	bl	8088f04 <atoi>
 808016c:	4b01      	ldr	r3, [pc, #4]	; (8080174 <_Z18setDelayGPSMinutes6String+0x10>)
 808016e:	6018      	str	r0, [r3, #0]
    return delayGPSMinutes;
}
 8080170:	bd08      	pop	{r3, pc}
 8080172:	bf00      	nop
 8080174:	2000000c 	.word	0x2000000c

08080178 <_Z18setDelayACCMinutes6String>:

// Remotely change the publishing delay for ACC!
int setDelayACCMinutes(String command) {
 8080178:	b508      	push	{r3, lr}
    delayACCMinutes = atoi(command);
 808017a:	6800      	ldr	r0, [r0, #0]
 808017c:	f008 fec2 	bl	8088f04 <atoi>
 8080180:	4b01      	ldr	r3, [pc, #4]	; (8080188 <_Z18setDelayACCMinutes6String+0x10>)
 8080182:	6018      	str	r0, [r3, #0]
    return delayACCMinutes;
}
 8080184:	bd08      	pop	{r3, pc}
 8080186:	bf00      	nop
 8080188:	20000004 	.word	0x20000004

0808018c <_Z18setDelayDHTMinutes6String>:

// Remotely change the publishing delay for DHT!
int setDelayDHTMinutes(String command) {
 808018c:	b508      	push	{r3, lr}
    delayDHTMinutes = atoi(command);
 808018e:	6800      	ldr	r0, [r0, #0]
 8080190:	f008 feb8 	bl	8088f04 <atoi>
 8080194:	4b01      	ldr	r3, [pc, #4]	; (808019c <_Z18setDelayDHTMinutes6String+0x10>)
 8080196:	6018      	str	r0, [r3, #0]
    return delayDHTMinutes;
}
 8080198:	bd08      	pop	{r3, pc}
 808019a:	bf00      	nop
 808019c:	20000008 	.word	0x20000008

080801a0 <_Z12transmitMode6String>:

// Allows you to remotely change whether a device is publishing to the cloud
// or is only reporting data over Serial. Saves data when using only Serial!
// Change the default at the top of the code.
int transmitMode(String command) {
 80801a0:	b508      	push	{r3, lr}
    transmittingData = atoi(command);
 80801a2:	6800      	ldr	r0, [r0, #0]
 80801a4:	f008 feae 	bl	8088f04 <atoi>
 80801a8:	4b01      	ldr	r3, [pc, #4]	; (80801b0 <_Z12transmitMode6String+0x10>)
 80801aa:	6018      	str	r0, [r3, #0]
    return transmittingData;
}
 80801ac:	bd08      	pop	{r3, pc}
 80801ae:	bf00      	nop
 80801b0:	20000014 	.word	0x20000014

080801b4 <_Z8resetODO6String>:
      }
}


// Reset the trip odometer
int resetODO(String command) {
 80801b4:	b508      	push	{r3, lr}
    t.gpsResetODO();
 80801b6:	4802      	ldr	r0, [pc, #8]	; (80801c0 <_Z8resetODO6String+0xc>)
 80801b8:	f002 fd42 	bl	8082c40 <_ZN13AssetTracker211gpsResetODOEv>
    return 1;
}
 80801bc:	2001      	movs	r0, #1
 80801be:	bd08      	pop	{r3, pc}
 80801c0:	20000228 	.word	0x20000228

080801c4 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
 80801c4:	6943      	ldr	r3, [r0, #20]
 80801c6:	b113      	cbz	r3, 80801ce <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80801c8:	6983      	ldr	r3, [r0, #24]
 80801ca:	300c      	adds	r0, #12
 80801cc:	4718      	bx	r3
            callback();
        }
    }
 80801ce:	4770      	bx	lr

080801d0 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
 80801d0:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
 80801d2:	2100      	movs	r1, #0
 80801d4:	4604      	mov	r4, r0
 80801d6:	4608      	mov	r0, r1
 80801d8:	f004 f886 	bl	80842e8 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
 80801dc:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
 80801de:	4620      	mov	r0, r4
 80801e0:	a901      	add	r1, sp, #4
            void* id = nullptr;
 80801e2:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
 80801e4:	f004 f898 	bl	8084318 <os_timer_get_id>
            t = static_cast<Timer*>(id);
 80801e8:	9c01      	ldr	r4, [sp, #4]
            if (t) {
 80801ea:	b10c      	cbz	r4, 80801f0 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
 80801ec:	2301      	movs	r3, #1
 80801ee:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
 80801f0:	2100      	movs	r1, #0
 80801f2:	2001      	movs	r0, #1
 80801f4:	f004 f878 	bl	80842e8 <os_thread_scheduling>
            }
        }
        if (t) {
 80801f8:	b12c      	cbz	r4, 8080206 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
 80801fa:	6823      	ldr	r3, [r4, #0]
 80801fc:	4620      	mov	r0, r4
 80801fe:	689b      	ldr	r3, [r3, #8]
 8080200:	4798      	blx	r3
            t->running = false;
 8080202:	2300      	movs	r3, #0
 8080204:	7123      	strb	r3, [r4, #4]
        }
    }
 8080206:	b002      	add	sp, #8
 8080208:	bd10      	pop	{r4, pc}
	...

0808020c <_Z13SetGPSAntenna6String>:
bool SetGPSAntenna(String command) {
 808020c:	b510      	push	{r4, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 808020e:	490d      	ldr	r1, [pc, #52]	; (8080244 <_Z13SetGPSAntenna6String+0x38>)
 8080210:	4604      	mov	r4, r0
 8080212:	f004 fe58 	bl	8084ec6 <_ZNK6String6equalsEPKc>
  if (command == "internal") {
 8080216:	b138      	cbz	r0, 8080228 <_Z13SetGPSAntenna6String+0x1c>
    gpsAntennaExternal = false;
 8080218:	2200      	movs	r2, #0
 808021a:	4b0b      	ldr	r3, [pc, #44]	; (8080248 <_Z13SetGPSAntenna6String+0x3c>)
    return t.antennaInternal();
 808021c:	480b      	ldr	r0, [pc, #44]	; (808024c <_Z13SetGPSAntenna6String+0x40>)
    gpsAntennaExternal = false;
 808021e:	701a      	strb	r2, [r3, #0]
}
 8080220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return t.antennaInternal();
 8080224:	f002 bcdc 	b.w	8082be0 <_ZN13AssetTracker215antennaInternalEv>
 8080228:	4620      	mov	r0, r4
 808022a:	4909      	ldr	r1, [pc, #36]	; (8080250 <_Z13SetGPSAntenna6String+0x44>)
 808022c:	f004 fe4b 	bl	8084ec6 <_ZNK6String6equalsEPKc>
  } else if (command == "external") {
 8080230:	b138      	cbz	r0, 8080242 <_Z13SetGPSAntenna6String+0x36>
    gpsAntennaExternal = true;
 8080232:	2201      	movs	r2, #1
 8080234:	4b04      	ldr	r3, [pc, #16]	; (8080248 <_Z13SetGPSAntenna6String+0x3c>)
    return t.antennaExternal();
 8080236:	4805      	ldr	r0, [pc, #20]	; (808024c <_Z13SetGPSAntenna6String+0x40>)
    gpsAntennaExternal = true;
 8080238:	701a      	strb	r2, [r3, #0]
}
 808023a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return t.antennaExternal();
 808023e:	f002 bce1 	b.w	8082c04 <_ZN13AssetTracker215antennaExternalEv>
}
 8080242:	bd10      	pop	{r4, pc}
 8080244:	080892a4 	.word	0x080892a4
 8080248:	20000010 	.word	0x20000010
 808024c:	20000228 	.word	0x20000228
 8080250:	080892ad 	.word	0x080892ad

08080254 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 8080254:	b510      	push	{r4, lr}
 8080256:	4604      	mov	r4, r0
        if (wakeupSource_) {
 8080258:	6800      	ldr	r0, [r0, #0]
 808025a:	b108      	cbz	r0, 8080260 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 808025c:	f004 fb24 	bl	80848a8 <free>
class SystemClass {
 8080260:	4620      	mov	r0, r4
 8080262:	bd10      	pop	{r4, pc}

08080264 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 8080264:	b510      	push	{r4, lr}
 8080266:	4604      	mov	r4, r0
 8080268:	4b09      	ldr	r3, [pc, #36]	; (8080290 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 808026a:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 808026c:	f005 f98c 	bl	8085588 <_ZN5spark10LogManager8instanceEv>
 8080270:	4621      	mov	r1, r4
 8080272:	f005 fba5 	bl	80859c0 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 8080276:	f006 fe77 	bl	8086f68 <_Z16_fetch_usbserialv>
 808027a:	f006 fe69 	bl	8086f50 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 808027e:	4620      	mov	r0, r4
 8080280:	4b04      	ldr	r3, [pc, #16]	; (8080294 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 8080282:	f840 3b04 	str.w	r3, [r0], #4
 8080286:	f005 fa89 	bl	808579c <_ZN5spark6detail9LogFilterD1Ev>
    }
 808028a:	4620      	mov	r0, r4
 808028c:	bd10      	pop	{r4, pc}
 808028e:	bf00      	nop
 8080290:	08089780 	.word	0x08089780
 8080294:	08089768 	.word	0x08089768

08080298 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 8080298:	b510      	push	{r4, lr}
 808029a:	4604      	mov	r4, r0
    }
 808029c:	f7ff ffe2 	bl	8080264 <_ZN5spark16SerialLogHandlerD1Ev>
 80802a0:	4620      	mov	r0, r4
 80802a2:	2124      	movs	r1, #36	; 0x24
 80802a4:	f007 fcc5 	bl	8087c32 <_ZdlPvj>
 80802a8:	4620      	mov	r0, r4
 80802aa:	bd10      	pop	{r4, pc}

080802ac <_Z7gpsRate6String>:
// Allows changing the measurement rate
int gpsRate(String command) {
 80802ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80802ae:	4604      	mov	r4, r0
    uint16_t rate = atoi(command);
 80802b0:	6800      	ldr	r0, [r0, #0]
 80802b2:	f008 fe27 	bl	8088f04 <atoi>
    int nav = atoi(command.substring(command.indexOf(' ')));
 80802b6:	2120      	movs	r1, #32
    uint16_t rate = atoi(command);
 80802b8:	b286      	uxth	r6, r0
    int nav = atoi(command.substring(command.indexOf(' ')));
 80802ba:	4620      	mov	r0, r4
 80802bc:	f004 fe4d 	bl	8084f5a <_ZNK6String7indexOfEc>
 80802c0:	4621      	mov	r1, r4
 80802c2:	4602      	mov	r2, r0
 80802c4:	4668      	mov	r0, sp
 80802c6:	f004 fe6d 	bl	8084fa4 <_ZNK6String9substringEj>
 80802ca:	9800      	ldr	r0, [sp, #0]
 80802cc:	f008 fe1a 	bl	8088f04 <atoi>
 80802d0:	4604      	mov	r4, r0
 80802d2:	4668      	mov	r0, sp
 80802d4:	f004 fd08 	bl	8084ce8 <_ZN6StringD1Ev>
		if ((transmittingData & SERIALGPSDATA) == SERIALGPSDATA) {
 80802d8:	4b16      	ldr	r3, [pc, #88]	; (8080334 <_Z7gpsRate6String+0x88>)
 80802da:	681b      	ldr	r3, [r3, #0]
 80802dc:	00db      	lsls	r3, r3, #3
 80802de:	d51f      	bpl.n	8080320 <_Z7gpsRate6String+0x74>
			Serial.print("rate: ");
 80802e0:	f006 fe42 	bl	8086f68 <_Z16_fetch_usbserialv>
 80802e4:	4914      	ldr	r1, [pc, #80]	; (8080338 <_Z7gpsRate6String+0x8c>)
 80802e6:	f004 feb7 	bl	8085058 <_ZN5Print5printEPKc>
	    Serial.print(rate);
 80802ea:	f006 fe3d 	bl	8086f68 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80802ee:	220a      	movs	r2, #10
 80802f0:	4631      	mov	r1, r6
 80802f2:	f004 fece 	bl	8085092 <_ZN5Print11printNumberEmh>
	    Serial.print(" nav: ");
 80802f6:	f006 fe37 	bl	8086f68 <_Z16_fetch_usbserialv>
 80802fa:	4910      	ldr	r1, [pc, #64]	; (808033c <_Z7gpsRate6String+0x90>)
 80802fc:	f004 feac 	bl	8085058 <_ZN5Print5printEPKc>
	    Serial.println(nav);
 8080300:	f006 fe32 	bl	8086f68 <_Z16_fetch_usbserialv>
        if (n < 0 && base == 10) {
 8080304:	2c00      	cmp	r4, #0
 8080306:	4605      	mov	r5, r0
 8080308:	da12      	bge.n	8080330 <_Z7gpsRate6String+0x84>
            t = print('-');
 808030a:	212d      	movs	r1, #45	; 0x2d
 808030c:	f004 fea8 	bl	8085060 <_ZN5Print5printEc>
            val = -n;
 8080310:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
 8080312:	220a      	movs	r2, #10
 8080314:	4628      	mov	r0, r5
 8080316:	f004 febc 	bl	8085092 <_ZN5Print11printNumberEmh>
        n += println();
 808031a:	4628      	mov	r0, r5
 808031c:	f004 fea3 	bl	8085066 <_ZN5Print7printlnEv>
		}
    t.gpsRate(rate, nav);
 8080320:	4622      	mov	r2, r4
 8080322:	4631      	mov	r1, r6
 8080324:	4806      	ldr	r0, [pc, #24]	; (8080340 <_Z7gpsRate6String+0x94>)
 8080326:	f002 fc85 	bl	8082c34 <_ZN13AssetTracker27gpsRateEti>
    return 1;
}
 808032a:	2001      	movs	r0, #1
 808032c:	b004      	add	sp, #16
 808032e:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
 8080330:	4621      	mov	r1, r4
 8080332:	e7ee      	b.n	8080312 <_Z7gpsRate6String+0x66>
 8080334:	20000014 	.word	0x20000014
 8080338:	080892b6 	.word	0x080892b6
 808033c:	080892bd 	.word	0x080892bd
 8080340:	20000228 	.word	0x20000228

08080344 <_ZN5Print8printlnfEPKcz>:
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 8080344:	b40e      	push	{r1, r2, r3}
 8080346:	b503      	push	{r0, r1, lr}
 8080348:	ab03      	add	r3, sp, #12
 808034a:	f853 2b04 	ldr.w	r2, [r3], #4
        auto r = this->vprintf(true, format, args);
 808034e:	2101      	movs	r1, #1
        va_start(args, format);
 8080350:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
 8080352:	f004 ff97 	bl	8085284 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
 8080356:	b002      	add	sp, #8
 8080358:	f85d eb04 	ldr.w	lr, [sp], #4
 808035c:	b003      	add	sp, #12
 808035e:	4770      	bx	lr

08080360 <_Z14button_clickedyi>:
{
 8080360:	b538      	push	{r3, r4, r5, lr}
		if ((transmittingData & SERIALBTNDATA) == SERIALBTNDATA)
 8080362:	4c0a      	ldr	r4, [pc, #40]	; (808038c <_Z14button_clickedyi+0x2c>)
{
 8080364:	4615      	mov	r5, r2
		if ((transmittingData & SERIALBTNDATA) == SERIALBTNDATA)
 8080366:	6823      	ldr	r3, [r4, #0]
 8080368:	01d9      	lsls	r1, r3, #7
 808036a:	d506      	bpl.n	808037a <_Z14button_clickedyi+0x1a>
    	Serial.printlnf("button was clicked %d times", times);
 808036c:	f006 fdfc 	bl	8086f68 <_Z16_fetch_usbserialv>
 8080370:	4907      	ldr	r1, [pc, #28]	; (8080390 <_Z14button_clickedyi+0x30>)
 8080372:	f005 020f 	and.w	r2, r5, #15
 8080376:	f7ff ffe5 	bl	8080344 <_ZN5Print8printlnfEPKcz>
		if ((transmittingData & SERIALLOOPDATA) == 0)
 808037a:	6823      	ldr	r3, [r4, #0]
 808037c:	011a      	lsls	r2, r3, #4
		 	transmittingData |= ( SERIALBTNDATA | SERIALCONNDATA | SERIALLOOPDATA | SERIALSETUPDATA | SERIALGPSDATA | SERIALACCDATA | SERIALPWRDATA | SERIALDHTDATA );
 808037e:	bf54      	ite	pl
 8080380:	f043 437f 	orrpl.w	r3, r3, #4278190080	; 0xff000000
		  transmittingData &= ~( SERIALBTNDATA | SERIALCONNDATA | SERIALLOOPDATA | SERIALSETUPDATA | SERIALGPSDATA | SERIALACCDATA | SERIALPWRDATA | SERIALDHTDATA );
 8080384:	f023 437f 	bicmi.w	r3, r3, #4278190080	; 0xff000000
 8080388:	6023      	str	r3, [r4, #0]
}
 808038a:	bd38      	pop	{r3, r4, r5, pc}
 808038c:	20000014 	.word	0x20000014
 8080390:	080892c4 	.word	0x080892c4

08080394 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 8080394:	b510      	push	{r4, lr}
      if (_M_manager)
 8080396:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 8080398:	4604      	mov	r4, r0
      if (_M_manager)
 808039a:	b113      	cbz	r3, 80803a2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 808039c:	2203      	movs	r2, #3
 808039e:	4601      	mov	r1, r0
 80803a0:	4798      	blx	r3
    }
 80803a2:	4620      	mov	r0, r4
 80803a4:	bd10      	pop	{r4, pc}
	...

080803a8 <_ZN10CloudClass9_functionEPKcPFi6StringE>:
            "\n\nIn Particle.function, name must be " __XSTRING(USER_FUNC_KEY_LENGTH) " characters or less\n\n");

        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
 80803a8:	4602      	mov	r2, r0
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
 80803aa:	4801      	ldr	r0, [pc, #4]	; (80803b0 <_ZN10CloudClass9_functionEPKcPFi6StringE+0x8>)
 80803ac:	f006 bab1 	b.w	8086912 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80803b0:	080868a3 	.word	0x080868a3

080803b4 <_ZN5Timer5_stopEjb>:
    bool _stop(unsigned block, bool fromISR=false)
 80803b4:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
 80803b6:	6880      	ldr	r0, [r0, #8]
 80803b8:	2300      	movs	r3, #0
 80803ba:	b138      	cbz	r0, 80803cc <_ZN5Timer5_stopEjb+0x18>
 80803bc:	e9cd 1300 	strd	r1, r3, [sp]
 80803c0:	2102      	movs	r1, #2
 80803c2:	f003 ffb1 	bl	8084328 <os_timer_change>
 80803c6:	fab0 f080 	clz	r0, r0
 80803ca:	0940      	lsrs	r0, r0, #5
    }
 80803cc:	b003      	add	sp, #12
 80803ce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080803d4 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
 80803d4:	b538      	push	{r3, r4, r5, lr}
 80803d6:	4b10      	ldr	r3, [pc, #64]	; (8080418 <_ZN5TimerD1Ev+0x44>)
 80803d8:	4604      	mov	r4, r0
 80803da:	6003      	str	r3, [r0, #0]
        if (handle) {
 80803dc:	6883      	ldr	r3, [r0, #8]
 80803de:	b1a3      	cbz	r3, 808040a <_ZN5TimerD1Ev+0x36>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
 80803e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80803e4:	2200      	movs	r2, #0
 80803e6:	f7ff ffe5 	bl	80803b4 <_ZN5Timer5_stopEjb>
            os_timer_set_id(handle, nullptr);
 80803ea:	2100      	movs	r1, #0
 80803ec:	68a0      	ldr	r0, [r4, #8]
 80803ee:	f003 ffcb 	bl	8084388 <os_timer_set_id>
            while (running) {
 80803f2:	7923      	ldrb	r3, [r4, #4]
 80803f4:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80803f8:	b113      	cbz	r3, 8080400 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
 80803fa:	f003 ff5d 	bl	80842b8 <os_thread_yield>
            while (running) {
 80803fe:	e7f8      	b.n	80803f2 <_ZN5TimerD1Ev+0x1e>
            os_timer_destroy(handle, nullptr);
 8080400:	4629      	mov	r1, r5
 8080402:	68a0      	ldr	r0, [r4, #8]
 8080404:	f003 ff80 	bl	8084308 <os_timer_destroy>
            handle = nullptr;
 8080408:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
 808040a:	f104 000c 	add.w	r0, r4, #12
 808040e:	f7ff ffc1 	bl	8080394 <_ZNSt14_Function_baseD1Ev>
    }
 8080412:	4620      	mov	r0, r4
 8080414:	bd38      	pop	{r3, r4, r5, pc}
 8080416:	bf00      	nop
 8080418:	08089754 	.word	0x08089754

0808041c <_ZN5TimerD0Ev>:
    virtual ~Timer() {
 808041c:	b510      	push	{r4, lr}
 808041e:	4604      	mov	r4, r0
    }
 8080420:	f7ff ffd8 	bl	80803d4 <_ZN5TimerD1Ev>
 8080424:	4620      	mov	r0, r4
 8080426:	211c      	movs	r1, #28
 8080428:	f007 fc03 	bl	8087c32 <_ZdlPvj>
 808042c:	4620      	mov	r0, r4
 808042e:	bd10      	pop	{r4, pc}

08080430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8080430:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 8080432:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 8080434:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 8080436:	b17c      	cbz	r4, 8080458 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 8080438:	6863      	ldr	r3, [r4, #4]
 808043a:	3b01      	subs	r3, #1
 808043c:	6063      	str	r3, [r4, #4]
 808043e:	b95b      	cbnz	r3, 8080458 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 8080440:	6823      	ldr	r3, [r4, #0]
 8080442:	4620      	mov	r0, r4
 8080444:	689b      	ldr	r3, [r3, #8]
 8080446:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8080448:	68a3      	ldr	r3, [r4, #8]
 808044a:	3b01      	subs	r3, #1
 808044c:	60a3      	str	r3, [r4, #8]
 808044e:	b91b      	cbnz	r3, 8080458 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 8080450:	6823      	ldr	r3, [r4, #0]
 8080452:	4620      	mov	r0, r4
 8080454:	68db      	ldr	r3, [r3, #12]
 8080456:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 8080458:	4628      	mov	r0, r5
 808045a:	bd38      	pop	{r3, r4, r5, pc}

0808045c <_Z10gpsPublish6String>:
int gpsPublish(String command) {
 808045c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (t.gpsFix()) {
 8080460:	482e      	ldr	r0, [pc, #184]	; (808051c <_Z10gpsPublish6String+0xc0>)
int gpsPublish(String command) {
 8080462:	b092      	sub	sp, #72	; 0x48
    if (t.gpsFix()) {
 8080464:	f002 fbb6 	bl	8082bd4 <_ZN13AssetTracker26gpsFixEv>
 8080468:	2800      	cmp	r0, #0
 808046a:	d054      	beq.n	8080516 <_Z10gpsPublish6String+0xba>
			  time_t time = Time.now();
 808046c:	f006 f829 	bl	80864c2 <_ZN9TimeClass3nowEv>
 8080470:	4605      	mov	r5, r0
			  Particle.publish("LJGPSFIX", String::format("{\"la\":%f,\"lo\":%f,\"ht\":%f,\"ac\":%f,\"tm\":\"%s\"}",t.readLatDeg(),t.readLonDeg(),(t.getAltitude() / 1000),(t.getGpsAccuracy() / 1000),Time.format(time, TIME_FORMAT_ISO8601_FULL).c_str()), 60, PRIVATE);
 8080472:	482a      	ldr	r0, [pc, #168]	; (808051c <_Z10gpsPublish6String+0xc0>)
 8080474:	f002 faca 	bl	8082a0c <_ZN13AssetTracker210readLatDegEv>
 8080478:	4604      	mov	r4, r0
 808047a:	4828      	ldr	r0, [pc, #160]	; (808051c <_Z10gpsPublish6String+0xc0>)
 808047c:	f002 facc 	bl	8082a18 <_ZN13AssetTracker210readLonDegEv>
 8080480:	4606      	mov	r6, r0
 8080482:	4826      	ldr	r0, [pc, #152]	; (808051c <_Z10gpsPublish6String+0xc0>)
 8080484:	f002 fb48 	bl	8082b18 <_ZN13AssetTracker211getAltitudeEv>
 8080488:	4607      	mov	r7, r0
 808048a:	4824      	ldr	r0, [pc, #144]	; (808051c <_Z10gpsPublish6String+0xc0>)
 808048c:	f002 faca 	bl	8082a24 <_ZN13AssetTracker214getGpsAccuracyEv>
 8080490:	4b23      	ldr	r3, [pc, #140]	; (8080520 <_Z10gpsPublish6String+0xc4>)
 8080492:	462a      	mov	r2, r5
 8080494:	681b      	ldr	r3, [r3, #0]
 8080496:	4680      	mov	r8, r0
 8080498:	4922      	ldr	r1, [pc, #136]	; (8080524 <_Z10gpsPublish6String+0xc8>)
 808049a:	9300      	str	r3, [sp, #0]
 808049c:	a80e      	add	r0, sp, #56	; 0x38
 808049e:	17eb      	asrs	r3, r5, #31
 80804a0:	f005 ffb0 	bl	8086404 <_ZN9TimeClass6formatExPKc>
 80804a4:	4620      	mov	r0, r4
 80804a6:	f007 fe57 	bl	8088158 <__aeabi_f2d>
 80804aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80804ac:	4604      	mov	r4, r0
 80804ae:	460d      	mov	r5, r1
 80804b0:	4640      	mov	r0, r8
 80804b2:	491d      	ldr	r1, [pc, #116]	; (8080528 <_Z10gpsPublish6String+0xcc>)
 80804b4:	9306      	str	r3, [sp, #24]
 80804b6:	f008 fbb1 	bl	8088c1c <__aeabi_fdiv>
 80804ba:	f007 fe4d 	bl	8088158 <__aeabi_f2d>
 80804be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80804c2:	4919      	ldr	r1, [pc, #100]	; (8080528 <_Z10gpsPublish6String+0xcc>)
 80804c4:	4638      	mov	r0, r7
 80804c6:	f008 fba9 	bl	8088c1c <__aeabi_fdiv>
 80804ca:	f007 fe45 	bl	8088158 <__aeabi_f2d>
 80804ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80804d2:	4630      	mov	r0, r6
 80804d4:	f007 fe40 	bl	8088158 <__aeabi_f2d>
 80804d8:	4622      	mov	r2, r4
 80804da:	e9cd 0100 	strd	r0, r1, [sp]
 80804de:	462b      	mov	r3, r5
 80804e0:	4912      	ldr	r1, [pc, #72]	; (808052c <_Z10gpsPublish6String+0xd0>)
 80804e2:	a80a      	add	r0, sp, #40	; 0x28
 80804e4:	f004 fd6a 	bl	8084fbc <_ZN6String6formatEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80804e8:	4b11      	ldr	r3, [pc, #68]	; (8080530 <_Z10gpsPublish6String+0xd4>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80804ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80804ec:	781b      	ldrb	r3, [r3, #0]
 80804ee:	4911      	ldr	r1, [pc, #68]	; (8080534 <_Z10gpsPublish6String+0xd8>)
 80804f0:	f88d 3000 	strb.w	r3, [sp]
 80804f4:	a808      	add	r0, sp, #32
 80804f6:	233c      	movs	r3, #60	; 0x3c
 80804f8:	f006 fb10 	bl	8086b1c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80804fc:	a809      	add	r0, sp, #36	; 0x24
 80804fe:	f7ff ff97 	bl	8080430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080502:	a80a      	add	r0, sp, #40	; 0x28
 8080504:	f004 fbf0 	bl	8084ce8 <_ZN6StringD1Ev>
 8080508:	a80e      	add	r0, sp, #56	; 0x38
 808050a:	f004 fbed 	bl	8084ce8 <_ZN6StringD1Ev>
 808050e:	2001      	movs	r0, #1
}
 8080510:	b012      	add	sp, #72	; 0x48
 8080512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return 2;
 8080516:	2002      	movs	r0, #2
 8080518:	e7fa      	b.n	8080510 <_Z10gpsPublish6String+0xb4>
 808051a:	bf00      	nop
 808051c:	20000228 	.word	0x20000228
 8080520:	200000c4 	.word	0x200000c4
 8080524:	200003e8 	.word	0x200003e8
 8080528:	447a0000 	.word	0x447a0000
 808052c:	080892e0 	.word	0x080892e0
 8080530:	20000140 	.word	0x20000140
 8080534:	0808930c 	.word	0x0808930c

08080538 <_Z10pwrPublish6String>:
int pwrPublish(String command){
 8080538:	b530      	push	{r4, r5, lr}
    Particle.publish("LJPWRSTAT", String::format("{\"s\": %d,\"n\": 0,\"v\":%.2f,\"c\":%.2f}",pc.getHasPower(),fuel.getVCell(),fuel.getSoC()), 60, PRIVATE );
 808053a:	481b      	ldr	r0, [pc, #108]	; (80805a8 <_Z10pwrPublish6String+0x70>)
int pwrPublish(String command){
 808053c:	b08b      	sub	sp, #44	; 0x2c
    Particle.publish("LJPWRSTAT", String::format("{\"s\": %d,\"n\": 0,\"v\":%.2f,\"c\":%.2f}",pc.getHasPower(),fuel.getVCell(),fuel.getSoC()), 60, PRIVATE );
 808053e:	f002 fa3d 	bl	80829bc <_ZN10PowerCheck11getHasPowerEv>
 8080542:	4604      	mov	r4, r0
 8080544:	4819      	ldr	r0, [pc, #100]	; (80805ac <_Z10pwrPublish6String+0x74>)
 8080546:	f006 f86d 	bl	8086624 <_ZN9FuelGauge8getVCellEv>
 808054a:	4605      	mov	r5, r0
 808054c:	4817      	ldr	r0, [pc, #92]	; (80805ac <_Z10pwrPublish6String+0x74>)
 808054e:	f006 f887 	bl	8086660 <_ZN9FuelGauge6getSoCEv>
 8080552:	f007 fe01 	bl	8088158 <__aeabi_f2d>
 8080556:	e9cd 0102 	strd	r0, r1, [sp, #8]
 808055a:	4628      	mov	r0, r5
 808055c:	f007 fdfc 	bl	8088158 <__aeabi_f2d>
 8080560:	4622      	mov	r2, r4
 8080562:	e9cd 0100 	strd	r0, r1, [sp]
 8080566:	a806      	add	r0, sp, #24
 8080568:	4911      	ldr	r1, [pc, #68]	; (80805b0 <_Z10pwrPublish6String+0x78>)
 808056a:	f004 fd27 	bl	8084fbc <_ZN6String6formatEPKcz>
 808056e:	4b11      	ldr	r3, [pc, #68]	; (80805b4 <_Z10pwrPublish6String+0x7c>)
 8080570:	9a06      	ldr	r2, [sp, #24]
 8080572:	781b      	ldrb	r3, [r3, #0]
 8080574:	4910      	ldr	r1, [pc, #64]	; (80805b8 <_Z10pwrPublish6String+0x80>)
 8080576:	f88d 3000 	strb.w	r3, [sp]
 808057a:	a804      	add	r0, sp, #16
 808057c:	233c      	movs	r3, #60	; 0x3c
 808057e:	f006 facd 	bl	8086b1c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8080582:	a805      	add	r0, sp, #20
 8080584:	f7ff ff54 	bl	8080430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080588:	a806      	add	r0, sp, #24
 808058a:	f004 fbad 	bl	8084ce8 <_ZN6StringD1Ev>
    if (fuel.getSoC()>10){ return 1;}
 808058e:	4807      	ldr	r0, [pc, #28]	; (80805ac <_Z10pwrPublish6String+0x74>)
 8080590:	f006 f866 	bl	8086660 <_ZN9FuelGauge6getSoCEv>
 8080594:	4909      	ldr	r1, [pc, #36]	; (80805bc <_Z10pwrPublish6String+0x84>)
 8080596:	f008 fc49 	bl	8088e2c <__aeabi_fcmpgt>
 808059a:	2800      	cmp	r0, #0
}
 808059c:	bf14      	ite	ne
 808059e:	2001      	movne	r0, #1
 80805a0:	2002      	moveq	r0, #2
 80805a2:	b00b      	add	sp, #44	; 0x2c
 80805a4:	bd30      	pop	{r4, r5, pc}
 80805a6:	bf00      	nop
 80805a8:	200001cc 	.word	0x200001cc
 80805ac:	20000194 	.word	0x20000194
 80805b0:	08089315 	.word	0x08089315
 80805b4:	20000140 	.word	0x20000140
 80805b8:	08089338 	.word	0x08089338
 80805bc:	41200000 	.word	0x41200000

080805c0 <_Z10accPublish6String>:
int accPublish(String command){
 80805c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  Particle.publish("LJACELRT", String::format("{\"x\":%d,\"y\":%d,\"z\":%d,\"m\":%d}", t.readX(), t.readY(), t.readZ(), t.readXYZmagnitude()), 60, PRIVATE);
 80805c2:	4c16      	ldr	r4, [pc, #88]	; (808061c <_Z10accPublish6String+0x5c>)
int accPublish(String command){
 80805c4:	b089      	sub	sp, #36	; 0x24
  Particle.publish("LJACELRT", String::format("{\"x\":%d,\"y\":%d,\"z\":%d,\"m\":%d}", t.readX(), t.readY(), t.readZ(), t.readXYZmagnitude()), 60, PRIVATE);
 80805c6:	4620      	mov	r0, r4
 80805c8:	f002 fb40 	bl	8082c4c <_ZN13AssetTracker25readXEv>
 80805cc:	4605      	mov	r5, r0
 80805ce:	4620      	mov	r0, r4
 80805d0:	f002 fb46 	bl	8082c60 <_ZN13AssetTracker25readYEv>
 80805d4:	4606      	mov	r6, r0
 80805d6:	4620      	mov	r0, r4
 80805d8:	f002 fb4c 	bl	8082c74 <_ZN13AssetTracker25readZEv>
 80805dc:	4607      	mov	r7, r0
 80805de:	4620      	mov	r0, r4
 80805e0:	f002 fb52 	bl	8082c88 <_ZN13AssetTracker216readXYZmagnitudeEv>
 80805e4:	4633      	mov	r3, r6
 80805e6:	462a      	mov	r2, r5
 80805e8:	e9cd 7000 	strd	r7, r0, [sp]
 80805ec:	490c      	ldr	r1, [pc, #48]	; (8080620 <_Z10accPublish6String+0x60>)
 80805ee:	a804      	add	r0, sp, #16
 80805f0:	f004 fce4 	bl	8084fbc <_ZN6String6formatEPKcz>
 80805f4:	4b0b      	ldr	r3, [pc, #44]	; (8080624 <_Z10accPublish6String+0x64>)
 80805f6:	9a04      	ldr	r2, [sp, #16]
 80805f8:	781b      	ldrb	r3, [r3, #0]
 80805fa:	490b      	ldr	r1, [pc, #44]	; (8080628 <_Z10accPublish6String+0x68>)
 80805fc:	f88d 3000 	strb.w	r3, [sp]
 8080600:	a802      	add	r0, sp, #8
 8080602:	233c      	movs	r3, #60	; 0x3c
 8080604:	f006 fa8a 	bl	8086b1c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8080608:	a803      	add	r0, sp, #12
 808060a:	f7ff ff11 	bl	8080430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808060e:	a804      	add	r0, sp, #16
 8080610:	f004 fb6a 	bl	8084ce8 <_ZN6StringD1Ev>
}
 8080614:	2001      	movs	r0, #1
 8080616:	b009      	add	sp, #36	; 0x24
 8080618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808061a:	bf00      	nop
 808061c:	20000228 	.word	0x20000228
 8080620:	08089342 	.word	0x08089342
 8080624:	20000140 	.word	0x20000140
 8080628:	08089360 	.word	0x08089360

0808062c <_Z10envPublish6String>:
int envPublish(String command){
 808062c:	b5f0      	push	{r4, r5, r6, r7, lr}
		delay(2000); // DHT 22 minumum sampling period
 808062e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
int envPublish(String command){
 8080632:	b089      	sub	sp, #36	; 0x24
		delay(2000); // DHT 22 minumum sampling period
 8080634:	f005 ff60 	bl	80864f8 <delay>
  	float h = dht.getHumidity();
 8080638:	4820      	ldr	r0, [pc, #128]	; (80806bc <_Z10envPublish6String+0x90>)
 808063a:	f002 fcb9 	bl	8082fb0 <_ZN3DHT11getHumidityEv>
 808063e:	4604      	mov	r4, r0
  	float f = dht.getTempFarenheit();
 8080640:	481e      	ldr	r0, [pc, #120]	; (80806bc <_Z10envPublish6String+0x90>)
 8080642:	f002 fc7b 	bl	8082f3c <_ZN3DHT16getTempFarenheitEv>
  	if (isnan(h) || isnan(f)) {
 8080646:	4621      	mov	r1, r4
  	float f = dht.getTempFarenheit();
 8080648:	4605      	mov	r5, r0
  	if (isnan(h) || isnan(f)) {
 808064a:	4620      	mov	r0, r4
 808064c:	f008 fbf8 	bl	8088e40 <__aeabi_fcmpun>
 8080650:	b920      	cbnz	r0, 808065c <_Z10envPublish6String+0x30>
 8080652:	4629      	mov	r1, r5
 8080654:	4628      	mov	r0, r5
 8080656:	f008 fbf3 	bl	8088e40 <__aeabi_fcmpun>
 808065a:	b128      	cbz	r0, 8080668 <_Z10envPublish6String+0x3c>
			if ((transmittingData & SERIALDHTDATA) == SERIALDHTDATA)
 808065c:	4b18      	ldr	r3, [pc, #96]	; (80806c0 <_Z10envPublish6String+0x94>)
 808065e:	681b      	ldr	r3, [r3, #0]
 8080660:	2b00      	cmp	r3, #0
 8080662:	db24      	blt.n	80806ae <_Z10envPublish6String+0x82>
  		return 2;
 8080664:	2002      	movs	r0, #2
 8080666:	e020      	b.n	80806aa <_Z10envPublish6String+0x7e>
    Particle.publish("LJENVMT", String::format("{\"t\":%.2f,\"h\":%.2f}",f,h), 60, PRIVATE);
 8080668:	4628      	mov	r0, r5
 808066a:	f007 fd75 	bl	8088158 <__aeabi_f2d>
 808066e:	4606      	mov	r6, r0
 8080670:	4620      	mov	r0, r4
 8080672:	460f      	mov	r7, r1
 8080674:	f007 fd70 	bl	8088158 <__aeabi_f2d>
 8080678:	4632      	mov	r2, r6
 808067a:	e9cd 0100 	strd	r0, r1, [sp]
 808067e:	463b      	mov	r3, r7
 8080680:	4910      	ldr	r1, [pc, #64]	; (80806c4 <_Z10envPublish6String+0x98>)
 8080682:	a804      	add	r0, sp, #16
 8080684:	f004 fc9a 	bl	8084fbc <_ZN6String6formatEPKcz>
 8080688:	4b0f      	ldr	r3, [pc, #60]	; (80806c8 <_Z10envPublish6String+0x9c>)
 808068a:	9a04      	ldr	r2, [sp, #16]
 808068c:	781b      	ldrb	r3, [r3, #0]
 808068e:	490f      	ldr	r1, [pc, #60]	; (80806cc <_Z10envPublish6String+0xa0>)
 8080690:	f88d 3000 	strb.w	r3, [sp]
 8080694:	a802      	add	r0, sp, #8
 8080696:	233c      	movs	r3, #60	; 0x3c
 8080698:	f006 fa40 	bl	8086b1c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 808069c:	a803      	add	r0, sp, #12
 808069e:	f7ff fec7 	bl	8080430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80806a2:	a804      	add	r0, sp, #16
 80806a4:	f004 fb20 	bl	8084ce8 <_ZN6StringD1Ev>
    return 1;
 80806a8:	2001      	movs	r0, #1
}
 80806aa:	b009      	add	sp, #36	; 0x24
 80806ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
      	Serial.println("Failed to read from DHT sensor!");
 80806ae:	f006 fc5b 	bl	8086f68 <_Z16_fetch_usbserialv>
 80806b2:	4907      	ldr	r1, [pc, #28]	; (80806d0 <_Z10envPublish6String+0xa4>)
 80806b4:	f004 fce3 	bl	808507e <_ZN5Print7printlnEPKc>
 80806b8:	e7d4      	b.n	8080664 <_Z10envPublish6String+0x38>
 80806ba:	bf00      	nop
 80806bc:	20000180 	.word	0x20000180
 80806c0:	20000014 	.word	0x20000014
 80806c4:	08089369 	.word	0x08089369
 80806c8:	20000140 	.word	0x20000140
 80806cc:	0808937d 	.word	0x0808937d
 80806d0:	08089385 	.word	0x08089385

080806d4 <_Z8pubValue6String>:
int pubValue(String command) {
 80806d4:	b530      	push	{r4, r5, lr}
 80806d6:	492a      	ldr	r1, [pc, #168]	; (8080780 <_Z8pubValue6String+0xac>)
 80806d8:	b08d      	sub	sp, #52	; 0x34
 80806da:	4605      	mov	r5, r0
 80806dc:	f004 fbf3 	bl	8084ec6 <_ZNK6String6equalsEPKc>
  if (command == "pwr") {
 80806e0:	b168      	cbz	r0, 80806fe <_Z8pubValue6String+0x2a>
    return pwrPublish(command);
 80806e2:	4629      	mov	r1, r5
 80806e4:	a808      	add	r0, sp, #32
 80806e6:	f004 fb93 	bl	8084e10 <_ZN6StringC1ERKS_>
 80806ea:	a808      	add	r0, sp, #32
 80806ec:	f7ff ff24 	bl	8080538 <_Z10pwrPublish6String>
    return envPublish(command);
 80806f0:	4604      	mov	r4, r0
	  Particle.publish("LJCMDERR", String::format("{\"cmd\":\"%s\"}", command), 60, PRIVATE);
 80806f2:	a808      	add	r0, sp, #32
 80806f4:	f004 faf8 	bl	8084ce8 <_ZN6StringD1Ev>
}
 80806f8:	4620      	mov	r0, r4
 80806fa:	b00d      	add	sp, #52	; 0x34
 80806fc:	bd30      	pop	{r4, r5, pc}
 80806fe:	4628      	mov	r0, r5
 8080700:	4920      	ldr	r1, [pc, #128]	; (8080784 <_Z8pubValue6String+0xb0>)
 8080702:	f004 fbe0 	bl	8084ec6 <_ZNK6String6equalsEPKc>
  } else if (command == "gps") {
 8080706:	b138      	cbz	r0, 8080718 <_Z8pubValue6String+0x44>
    return gpsPublish(command);
 8080708:	4629      	mov	r1, r5
 808070a:	a808      	add	r0, sp, #32
 808070c:	f004 fb80 	bl	8084e10 <_ZN6StringC1ERKS_>
 8080710:	a808      	add	r0, sp, #32
 8080712:	f7ff fea3 	bl	808045c <_Z10gpsPublish6String>
 8080716:	e7eb      	b.n	80806f0 <_Z8pubValue6String+0x1c>
 8080718:	4628      	mov	r0, r5
 808071a:	491b      	ldr	r1, [pc, #108]	; (8080788 <_Z8pubValue6String+0xb4>)
 808071c:	f004 fbd3 	bl	8084ec6 <_ZNK6String6equalsEPKc>
  } else if (command == "acc") {
 8080720:	b138      	cbz	r0, 8080732 <_Z8pubValue6String+0x5e>
    return accPublish(command);
 8080722:	4629      	mov	r1, r5
 8080724:	a808      	add	r0, sp, #32
 8080726:	f004 fb73 	bl	8084e10 <_ZN6StringC1ERKS_>
 808072a:	a808      	add	r0, sp, #32
 808072c:	f7ff ff48 	bl	80805c0 <_Z10accPublish6String>
 8080730:	e7de      	b.n	80806f0 <_Z8pubValue6String+0x1c>
 8080732:	4916      	ldr	r1, [pc, #88]	; (808078c <_Z8pubValue6String+0xb8>)
 8080734:	4628      	mov	r0, r5
 8080736:	f004 fbc6 	bl	8084ec6 <_ZNK6String6equalsEPKc>
  } else if (command == "env") {
 808073a:	4604      	mov	r4, r0
    return envPublish(command);
 808073c:	4629      	mov	r1, r5
 808073e:	a808      	add	r0, sp, #32
  } else if (command == "env") {
 8080740:	b12c      	cbz	r4, 808074e <_Z8pubValue6String+0x7a>
    return envPublish(command);
 8080742:	f004 fb65 	bl	8084e10 <_ZN6StringC1ERKS_>
 8080746:	a808      	add	r0, sp, #32
 8080748:	f7ff ff70 	bl	808062c <_Z10envPublish6String>
 808074c:	e7d0      	b.n	80806f0 <_Z8pubValue6String+0x1c>
	  Particle.publish("LJCMDERR", String::format("{\"cmd\":\"%s\"}", command), 60, PRIVATE);
 808074e:	f004 fb5f 	bl	8084e10 <_ZN6StringC1ERKS_>
 8080752:	aa08      	add	r2, sp, #32
 8080754:	a804      	add	r0, sp, #16
 8080756:	490e      	ldr	r1, [pc, #56]	; (8080790 <_Z8pubValue6String+0xbc>)
 8080758:	f004 fc30 	bl	8084fbc <_ZN6String6formatEPKcz>
 808075c:	4b0d      	ldr	r3, [pc, #52]	; (8080794 <_Z8pubValue6String+0xc0>)
 808075e:	9a04      	ldr	r2, [sp, #16]
 8080760:	781b      	ldrb	r3, [r3, #0]
 8080762:	490d      	ldr	r1, [pc, #52]	; (8080798 <_Z8pubValue6String+0xc4>)
 8080764:	f88d 3000 	strb.w	r3, [sp]
 8080768:	a802      	add	r0, sp, #8
 808076a:	233c      	movs	r3, #60	; 0x3c
 808076c:	f006 f9d6 	bl	8086b1c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8080770:	a803      	add	r0, sp, #12
 8080772:	f7ff fe5d 	bl	8080430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080776:	a804      	add	r0, sp, #16
 8080778:	f004 fab6 	bl	8084ce8 <_ZN6StringD1Ev>
 808077c:	e7b9      	b.n	80806f2 <_Z8pubValue6String+0x1e>
 808077e:	bf00      	nop
 8080780:	080893a5 	.word	0x080893a5
 8080784:	080893a9 	.word	0x080893a9
 8080788:	080893ad 	.word	0x080893ad
 808078c:	080893b1 	.word	0x080893b1
 8080790:	080893b5 	.word	0x080893b5
 8080794:	20000140 	.word	0x20000140
 8080798:	080893c2 	.word	0x080893c2

0808079c <_Z16checkPowerStatusv>:
int checkPowerStatus() {
 808079c:	b570      	push	{r4, r5, r6, lr}
    bool currentPower = pc.getHasPower();
 808079e:	481b      	ldr	r0, [pc, #108]	; (808080c <_Z16checkPowerStatusv+0x70>)
int checkPowerStatus() {
 80807a0:	b08a      	sub	sp, #40	; 0x28
    bool currentPower = pc.getHasPower();
 80807a2:	f002 f90b 	bl	80829bc <_ZN10PowerCheck11getHasPowerEv>
    if (lastPower != currentPower) {
 80807a6:	4e1a      	ldr	r6, [pc, #104]	; (8080810 <_Z16checkPowerStatusv+0x74>)
    bool currentPower = pc.getHasPower();
 80807a8:	4604      	mov	r4, r0
    if (lastPower != currentPower) {
 80807aa:	7833      	ldrb	r3, [r6, #0]
 80807ac:	4283      	cmp	r3, r0
 80807ae:	d029      	beq.n	8080804 <_Z16checkPowerStatusv+0x68>
      if ((transmittingData & TRANSMITTINGPWRDATA) == TRANSMITTINGPWRDATA) {
 80807b0:	4b18      	ldr	r3, [pc, #96]	; (8080814 <_Z16checkPowerStatusv+0x78>)
 80807b2:	681b      	ldr	r3, [r3, #0]
 80807b4:	075b      	lsls	r3, r3, #29
 80807b6:	d525      	bpl.n	8080804 <_Z16checkPowerStatusv+0x68>
        Particle.publish("LJPWRSTAT", String::format("{\"s\": %d,\"n\": 1,\"v\":%.2f,\"c\":%.2f}",currentPower,fuel.getVCell(),fuel.getSoC()), 60, PRIVATE );
 80807b8:	4817      	ldr	r0, [pc, #92]	; (8080818 <_Z16checkPowerStatusv+0x7c>)
 80807ba:	f005 ff33 	bl	8086624 <_ZN9FuelGauge8getVCellEv>
 80807be:	4605      	mov	r5, r0
 80807c0:	4815      	ldr	r0, [pc, #84]	; (8080818 <_Z16checkPowerStatusv+0x7c>)
 80807c2:	f005 ff4d 	bl	8086660 <_ZN9FuelGauge6getSoCEv>
 80807c6:	f007 fcc7 	bl	8088158 <__aeabi_f2d>
 80807ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80807ce:	4628      	mov	r0, r5
 80807d0:	f007 fcc2 	bl	8088158 <__aeabi_f2d>
 80807d4:	4622      	mov	r2, r4
 80807d6:	e9cd 0100 	strd	r0, r1, [sp]
 80807da:	4910      	ldr	r1, [pc, #64]	; (808081c <_Z16checkPowerStatusv+0x80>)
 80807dc:	a806      	add	r0, sp, #24
 80807de:	f004 fbed 	bl	8084fbc <_ZN6String6formatEPKcz>
 80807e2:	4b0f      	ldr	r3, [pc, #60]	; (8080820 <_Z16checkPowerStatusv+0x84>)
 80807e4:	9a06      	ldr	r2, [sp, #24]
 80807e6:	781b      	ldrb	r3, [r3, #0]
 80807e8:	490e      	ldr	r1, [pc, #56]	; (8080824 <_Z16checkPowerStatusv+0x88>)
 80807ea:	f88d 3000 	strb.w	r3, [sp]
 80807ee:	a804      	add	r0, sp, #16
 80807f0:	233c      	movs	r3, #60	; 0x3c
 80807f2:	f006 f993 	bl	8086b1c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80807f6:	a805      	add	r0, sp, #20
 80807f8:	f7ff fe1a 	bl	8080430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80807fc:	a806      	add	r0, sp, #24
 80807fe:	f004 fa73 	bl	8084ce8 <_ZN6StringD1Ev>
        lastPower = currentPower; // note that we only update power status if we actually transmitted data so that when data is turned back on we will report
 8080802:	7034      	strb	r4, [r6, #0]
}
 8080804:	2001      	movs	r0, #1
 8080806:	b00a      	add	sp, #40	; 0x28
 8080808:	bd70      	pop	{r4, r5, r6, pc}
 808080a:	bf00      	nop
 808080c:	200001cc 	.word	0x200001cc
 8080810:	20000011 	.word	0x20000011
 8080814:	20000014 	.word	0x20000014
 8080818:	20000194 	.word	0x20000194
 808081c:	080893cb 	.word	0x080893cb
 8080820:	20000140 	.word	0x20000140
 8080824:	08089338 	.word	0x08089338

08080828 <_Z14checkGPSStatusv>:
void checkGPSStatus() {
 8080828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808082c:	b095      	sub	sp, #84	; 0x54

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 808082e:	f003 fd13 	bl	8084258 <HAL_Timer_Get_Milli_Seconds>
    if (millis()-lastGPSPublish > ((unsigned long) delayGPSMinutes*60*1000)) {
 8080832:	f8df a140 	ldr.w	sl, [pc, #320]	; 8080974 <_Z14checkGPSStatusv+0x14c>
 8080836:	f8da 3000 	ldr.w	r3, [sl]
 808083a:	1ac0      	subs	r0, r0, r3
 808083c:	4b45      	ldr	r3, [pc, #276]	; (8080954 <_Z14checkGPSStatusv+0x12c>)
 808083e:	681a      	ldr	r2, [r3, #0]
 8080840:	f64e 2360 	movw	r3, #60000	; 0xea60
 8080844:	4353      	muls	r3, r2
 8080846:	4298      	cmp	r0, r3
 8080848:	f240 8081 	bls.w	808094e <_Z14checkGPSStatusv+0x126>
        if (t.gpsFix()) {
 808084c:	4842      	ldr	r0, [pc, #264]	; (8080958 <_Z14checkGPSStatusv+0x130>)
 808084e:	f002 f9c1 	bl	8082bd4 <_ZN13AssetTracker26gpsFixEv>
 8080852:	2800      	cmp	r0, #0
 8080854:	d07b      	beq.n	808094e <_Z14checkGPSStatusv+0x126>
            if ((transmittingData & TRANSMITTINGGPSDATA) == TRANSMITTINGGPSDATA) {
 8080856:	4b41      	ldr	r3, [pc, #260]	; (808095c <_Z14checkGPSStatusv+0x134>)
 8080858:	681a      	ldr	r2, [r3, #0]
 808085a:	9309      	str	r3, [sp, #36]	; 0x24
 808085c:	f012 0f01 	tst.w	r2, #1
 8080860:	d063      	beq.n	808092a <_Z14checkGPSStatusv+0x102>
							time_t time = Time.now();
 8080862:	f005 fe2e 	bl	80864c2 <_ZN9TimeClass3nowEv>
							Time.format(time, TIME_FORMAT_ISO8601_FULL); // 2004-01-10T08:22:04-05:15
 8080866:	f8df b110 	ldr.w	fp, [pc, #272]	; 8080978 <_Z14checkGPSStatusv+0x150>
							time_t time = Time.now();
 808086a:	17c5      	asrs	r5, r0, #31
							Time.format(time, TIME_FORMAT_ISO8601_FULL); // 2004-01-10T08:22:04-05:15
 808086c:	f8db 3000 	ldr.w	r3, [fp]
 8080870:	4602      	mov	r2, r0
 8080872:	493b      	ldr	r1, [pc, #236]	; (8080960 <_Z14checkGPSStatusv+0x138>)
							time_t time = Time.now();
 8080874:	4604      	mov	r4, r0
							Time.format(time, TIME_FORMAT_ISO8601_FULL); // 2004-01-10T08:22:04-05:15
 8080876:	9300      	str	r3, [sp, #0]
 8080878:	a810      	add	r0, sp, #64	; 0x40
 808087a:	462b      	mov	r3, r5
 808087c:	f005 fdc2 	bl	8086404 <_ZN9TimeClass6formatExPKc>
 8080880:	a810      	add	r0, sp, #64	; 0x40
 8080882:	f004 fa31 	bl	8084ce8 <_ZN6StringD1Ev>
              Particle.publish("LJGPSFIX", String::format("{\"la\":%f,\"lo\":%f,\"ht\":%f,\"ac\":%f,\"tm\":\"%s\"}",t.readLatDeg(),t.readLonDeg(),(t.getAltitude() / 1000),(t.getGpsAccuracy() / 1000),Time.format(time, TIME_FORMAT_ISO8601_FULL).c_str()), 60, PRIVATE);
 8080886:	4834      	ldr	r0, [pc, #208]	; (8080958 <_Z14checkGPSStatusv+0x130>)
 8080888:	f002 f8c0 	bl	8082a0c <_ZN13AssetTracker210readLatDegEv>
 808088c:	4681      	mov	r9, r0
 808088e:	4832      	ldr	r0, [pc, #200]	; (8080958 <_Z14checkGPSStatusv+0x130>)
 8080890:	f002 f8c2 	bl	8082a18 <_ZN13AssetTracker210readLonDegEv>
 8080894:	4606      	mov	r6, r0
 8080896:	4830      	ldr	r0, [pc, #192]	; (8080958 <_Z14checkGPSStatusv+0x130>)
 8080898:	f002 f93e 	bl	8082b18 <_ZN13AssetTracker211getAltitudeEv>
 808089c:	4607      	mov	r7, r0
 808089e:	482e      	ldr	r0, [pc, #184]	; (8080958 <_Z14checkGPSStatusv+0x130>)
 80808a0:	f002 f8c0 	bl	8082a24 <_ZN13AssetTracker214getGpsAccuracyEv>
 80808a4:	f8db 3000 	ldr.w	r3, [fp]
 80808a8:	4622      	mov	r2, r4
 80808aa:	4680      	mov	r8, r0
 80808ac:	492c      	ldr	r1, [pc, #176]	; (8080960 <_Z14checkGPSStatusv+0x138>)
 80808ae:	9300      	str	r3, [sp, #0]
 80808b0:	a810      	add	r0, sp, #64	; 0x40
 80808b2:	462b      	mov	r3, r5
 80808b4:	f005 fda6 	bl	8086404 <_ZN9TimeClass6formatExPKc>
 80808b8:	4648      	mov	r0, r9
 80808ba:	f007 fc4d 	bl	8088158 <__aeabi_f2d>
 80808be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80808c0:	4604      	mov	r4, r0
 80808c2:	460d      	mov	r5, r1
 80808c4:	4640      	mov	r0, r8
 80808c6:	4927      	ldr	r1, [pc, #156]	; (8080964 <_Z14checkGPSStatusv+0x13c>)
 80808c8:	9306      	str	r3, [sp, #24]
 80808ca:	f008 f9a7 	bl	8088c1c <__aeabi_fdiv>
 80808ce:	f007 fc43 	bl	8088158 <__aeabi_f2d>
 80808d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80808d6:	4923      	ldr	r1, [pc, #140]	; (8080964 <_Z14checkGPSStatusv+0x13c>)
 80808d8:	4638      	mov	r0, r7
 80808da:	f008 f99f 	bl	8088c1c <__aeabi_fdiv>
 80808de:	f007 fc3b 	bl	8088158 <__aeabi_f2d>
 80808e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80808e6:	4630      	mov	r0, r6
 80808e8:	f007 fc36 	bl	8088158 <__aeabi_f2d>
 80808ec:	4622      	mov	r2, r4
 80808ee:	e9cd 0100 	strd	r0, r1, [sp]
 80808f2:	462b      	mov	r3, r5
 80808f4:	491c      	ldr	r1, [pc, #112]	; (8080968 <_Z14checkGPSStatusv+0x140>)
 80808f6:	a80c      	add	r0, sp, #48	; 0x30
 80808f8:	f004 fb60 	bl	8084fbc <_ZN6String6formatEPKcz>
 80808fc:	4b1b      	ldr	r3, [pc, #108]	; (808096c <_Z14checkGPSStatusv+0x144>)
 80808fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8080900:	781b      	ldrb	r3, [r3, #0]
 8080902:	491b      	ldr	r1, [pc, #108]	; (8080970 <_Z14checkGPSStatusv+0x148>)
 8080904:	f88d 3000 	strb.w	r3, [sp]
 8080908:	a80a      	add	r0, sp, #40	; 0x28
 808090a:	233c      	movs	r3, #60	; 0x3c
 808090c:	f006 f906 	bl	8086b1c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8080910:	a80b      	add	r0, sp, #44	; 0x2c
 8080912:	f7ff fd8d 	bl	8080430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080916:	a80c      	add	r0, sp, #48	; 0x30
 8080918:	f004 f9e6 	bl	8084ce8 <_ZN6StringD1Ev>
 808091c:	a810      	add	r0, sp, #64	; 0x40
 808091e:	f004 f9e3 	bl	8084ce8 <_ZN6StringD1Ev>
 8080922:	f003 fc99 	bl	8084258 <HAL_Timer_Get_Milli_Seconds>
              lastGPSPublish = millis();
 8080926:	f8ca 0000 	str.w	r0, [sl]
						if ((transmittingData & SERIALGPSDATA) == SERIALGPSDATA)
 808092a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808092c:	681b      	ldr	r3, [r3, #0]
 808092e:	00db      	lsls	r3, r3, #3
 8080930:	d50d      	bpl.n	808094e <_Z14checkGPSStatusv+0x126>
            	Serial.println(t.readLatLon());
 8080932:	f006 fb19 	bl	8086f68 <_Z16_fetch_usbserialv>
 8080936:	4604      	mov	r4, r0
 8080938:	4907      	ldr	r1, [pc, #28]	; (8080958 <_Z14checkGPSStatusv+0x130>)
 808093a:	a810      	add	r0, sp, #64	; 0x40
 808093c:	f002 f8f2 	bl	8082b24 <_ZN13AssetTracker210readLatLonEv>
 8080940:	4620      	mov	r0, r4
 8080942:	9910      	ldr	r1, [sp, #64]	; 0x40
 8080944:	f004 fb9b 	bl	808507e <_ZN5Print7printlnEPKc>
 8080948:	a810      	add	r0, sp, #64	; 0x40
 808094a:	f004 f9cd 	bl	8084ce8 <_ZN6StringD1Ev>
}
 808094e:	b015      	add	sp, #84	; 0x54
 8080950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8080954:	2000000c 	.word	0x2000000c
 8080958:	20000228 	.word	0x20000228
 808095c:	20000014 	.word	0x20000014
 8080960:	200003e8 	.word	0x200003e8
 8080964:	447a0000 	.word	0x447a0000
 8080968:	080892e0 	.word	0x080892e0
 808096c:	20000140 	.word	0x20000140
 8080970:	0808930c 	.word	0x0808930c
 8080974:	200001a4 	.word	0x200001a4
 8080978:	200000c4 	.word	0x200000c4

0808097c <_Z16checkAccelStatusv>:
void checkAccelStatus() {
 808097c:	b570      	push	{r4, r5, r6, lr}
      int readMagnitude = t.readXYZmagnitude();
 808097e:	4831      	ldr	r0, [pc, #196]	; (8080a44 <_Z16checkAccelStatusv+0xc8>)
void checkAccelStatus() {
 8080980:	b086      	sub	sp, #24
      int readMagnitude = t.readXYZmagnitude();
 8080982:	f002 f981 	bl	8082c88 <_ZN13AssetTracker216readXYZmagnitudeEv>
      if (readMagnitude > accelThreshold) {
 8080986:	4b30      	ldr	r3, [pc, #192]	; (8080a48 <_Z16checkAccelStatusv+0xcc>)
      int readMagnitude = t.readXYZmagnitude();
 8080988:	4604      	mov	r4, r0
      if (readMagnitude > accelThreshold) {
 808098a:	681b      	ldr	r3, [r3, #0]
 808098c:	4283      	cmp	r3, r0
 808098e:	da23      	bge.n	80809d8 <_Z16checkAccelStatusv+0x5c>
          pubAccel = String::format("{\"x\":%d,\"y\":%d,\"z\":%d,\"m\":%d}", t.readX(), t.readY(), t.readZ(), readMagnitude);
 8080990:	482c      	ldr	r0, [pc, #176]	; (8080a44 <_Z16checkAccelStatusv+0xc8>)
 8080992:	f002 f95b 	bl	8082c4c <_ZN13AssetTracker25readXEv>
 8080996:	4605      	mov	r5, r0
 8080998:	482a      	ldr	r0, [pc, #168]	; (8080a44 <_Z16checkAccelStatusv+0xc8>)
 808099a:	f002 f961 	bl	8082c60 <_ZN13AssetTracker25readYEv>
 808099e:	4606      	mov	r6, r0
 80809a0:	4828      	ldr	r0, [pc, #160]	; (8080a44 <_Z16checkAccelStatusv+0xc8>)
 80809a2:	f002 f967 	bl	8082c74 <_ZN13AssetTracker25readZEv>
 80809a6:	e9cd 0400 	strd	r0, r4, [sp]
 80809aa:	4c28      	ldr	r4, [pc, #160]	; (8080a4c <_Z16checkAccelStatusv+0xd0>)
 80809ac:	4633      	mov	r3, r6
 80809ae:	462a      	mov	r2, r5
 80809b0:	4927      	ldr	r1, [pc, #156]	; (8080a50 <_Z16checkAccelStatusv+0xd4>)
 80809b2:	a802      	add	r0, sp, #8
 80809b4:	f004 fb02 	bl	8084fbc <_ZN6String6formatEPKcz>
 80809b8:	a902      	add	r1, sp, #8
 80809ba:	4620      	mov	r0, r4
 80809bc:	f004 fa33 	bl	8084e26 <_ZN6StringaSEOS_>
 80809c0:	a802      	add	r0, sp, #8
 80809c2:	f004 f991 	bl	8084ce8 <_ZN6StringD1Ev>
					if ((transmittingData & SERIALACCDATA) == SERIALACCDATA)
 80809c6:	4b23      	ldr	r3, [pc, #140]	; (8080a54 <_Z16checkAccelStatusv+0xd8>)
 80809c8:	681b      	ldr	r3, [r3, #0]
 80809ca:	009a      	lsls	r2, r3, #2
 80809cc:	d504      	bpl.n	80809d8 <_Z16checkAccelStatusv+0x5c>
          	Serial.println(pubAccel);
 80809ce:	f006 facb 	bl	8086f68 <_Z16_fetch_usbserialv>
 80809d2:	6821      	ldr	r1, [r4, #0]
 80809d4:	f004 fb53 	bl	808507e <_ZN5Print7printlnEPKc>
 80809d8:	f003 fc3e 	bl	8084258 <HAL_Timer_Get_Milli_Seconds>
      if (millis()-lastACCPublish > ((unsigned long) delayACCMinutes*60*1000)) {
 80809dc:	4d1e      	ldr	r5, [pc, #120]	; (8080a58 <_Z16checkAccelStatusv+0xdc>)
 80809de:	682b      	ldr	r3, [r5, #0]
 80809e0:	1ac0      	subs	r0, r0, r3
 80809e2:	4b1e      	ldr	r3, [pc, #120]	; (8080a5c <_Z16checkAccelStatusv+0xe0>)
 80809e4:	681a      	ldr	r2, [r3, #0]
 80809e6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80809ea:	4353      	muls	r3, r2
 80809ec:	4298      	cmp	r0, r3
 80809ee:	d927      	bls.n	8080a40 <_Z16checkAccelStatusv+0xc4>
          if ((transmittingData & TRANSMITTINGACCDATA) == TRANSMITTINGACCDATA) {
 80809f0:	4b18      	ldr	r3, [pc, #96]	; (8080a54 <_Z16checkAccelStatusv+0xd8>)
 80809f2:	681b      	ldr	r3, [r3, #0]
 80809f4:	079b      	lsls	r3, r3, #30
 80809f6:	d523      	bpl.n	8080a40 <_Z16checkAccelStatusv+0xc4>
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 80809f8:	4c14      	ldr	r4, [pc, #80]	; (8080a4c <_Z16checkAccelStatusv+0xd0>)
 80809fa:	4919      	ldr	r1, [pc, #100]	; (8080a60 <_Z16checkAccelStatusv+0xe4>)
 80809fc:	4620      	mov	r0, r4
 80809fe:	f004 fa62 	bl	8084ec6 <_ZNK6String6equalsEPKc>
            if (pubAccel != "") {
 8080a02:	b9e8      	cbnz	r0, 8080a40 <_Z16checkAccelStatusv+0xc4>
 8080a04:	4b17      	ldr	r3, [pc, #92]	; (8080a64 <_Z16checkAccelStatusv+0xe8>)
 8080a06:	4918      	ldr	r1, [pc, #96]	; (8080a68 <_Z16checkAccelStatusv+0xec>)
 8080a08:	781b      	ldrb	r3, [r3, #0]
 8080a0a:	a802      	add	r0, sp, #8
 8080a0c:	f88d 3000 	strb.w	r3, [sp]
 8080a10:	6822      	ldr	r2, [r4, #0]
 8080a12:	233c      	movs	r3, #60	; 0x3c
 8080a14:	f006 f882 	bl	8086b1c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8080a18:	a803      	add	r0, sp, #12
 8080a1a:	f7ff fd09 	bl	8080430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
							gpsPublish(""); // publish position if we get an accelleration alert
 8080a1e:	4910      	ldr	r1, [pc, #64]	; (8080a60 <_Z16checkAccelStatusv+0xe4>)
 8080a20:	a802      	add	r0, sp, #8
 8080a22:	f004 f9ab 	bl	8084d7c <_ZN6StringC1EPKc>
 8080a26:	a802      	add	r0, sp, #8
 8080a28:	f7ff fd18 	bl	808045c <_Z10gpsPublish6String>
 8080a2c:	a802      	add	r0, sp, #8
 8080a2e:	f004 f95b 	bl	8084ce8 <_ZN6StringD1Ev>
 8080a32:	f003 fc11 	bl	8084258 <HAL_Timer_Get_Milli_Seconds>
              pubAccel = "";
 8080a36:	490a      	ldr	r1, [pc, #40]	; (8080a60 <_Z16checkAccelStatusv+0xe4>)
              lastACCPublish = millis();
 8080a38:	6028      	str	r0, [r5, #0]
              pubAccel = "";
 8080a3a:	4620      	mov	r0, r4
 8080a3c:	f004 f9fb 	bl	8084e36 <_ZN6StringaSEPKc>
}
 8080a40:	b006      	add	sp, #24
 8080a42:	bd70      	pop	{r4, r5, r6, pc}
 8080a44:	20000228 	.word	0x20000228
 8080a48:	20000000 	.word	0x20000000
 8080a4c:	200001d8 	.word	0x200001d8
 8080a50:	08089342 	.word	0x08089342
 8080a54:	20000014 	.word	0x20000014
 8080a58:	2000019c 	.word	0x2000019c
 8080a5c:	20000004 	.word	0x20000004
 8080a60:	08089844 	.word	0x08089844
 8080a64:	20000140 	.word	0x20000140
 8080a68:	08089360 	.word	0x08089360

08080a6c <_Z14checkDHTStatusv>:
void checkDHTStatus() {
 8080a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	delay(2000); // DHT 22 minumum sampling period
 8080a70:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
void checkDHTStatus() {
 8080a74:	b088      	sub	sp, #32
	delay(2000); // DHT 22 minumum sampling period
 8080a76:	f005 fd3f 	bl	80864f8 <delay>
	float h = dht.getHumidity();
 8080a7a:	482b      	ldr	r0, [pc, #172]	; (8080b28 <_Z14checkDHTStatusv+0xbc>)
 8080a7c:	f002 fa98 	bl	8082fb0 <_ZN3DHT11getHumidityEv>
 8080a80:	4604      	mov	r4, r0
	float f = dht.getTempFarenheit();
 8080a82:	4829      	ldr	r0, [pc, #164]	; (8080b28 <_Z14checkDHTStatusv+0xbc>)
 8080a84:	f002 fa5a 	bl	8082f3c <_ZN3DHT16getTempFarenheitEv>
	if (isnan(h) || isnan(f)) {
 8080a88:	4621      	mov	r1, r4
	float f = dht.getTempFarenheit();
 8080a8a:	4605      	mov	r5, r0
	if (isnan(h) || isnan(f)) {
 8080a8c:	4620      	mov	r0, r4
 8080a8e:	f008 f9d7 	bl	8088e40 <__aeabi_fcmpun>
 8080a92:	b920      	cbnz	r0, 8080a9e <_Z14checkDHTStatusv+0x32>
 8080a94:	4629      	mov	r1, r5
 8080a96:	4628      	mov	r0, r5
 8080a98:	f008 f9d2 	bl	8088e40 <__aeabi_fcmpun>
 8080a9c:	b148      	cbz	r0, 8080ab2 <_Z14checkDHTStatusv+0x46>
		if ((transmittingData & SERIALDHTDATA) == SERIALDHTDATA)
 8080a9e:	4b23      	ldr	r3, [pc, #140]	; (8080b2c <_Z14checkDHTStatusv+0xc0>)
 8080aa0:	681b      	ldr	r3, [r3, #0]
 8080aa2:	2b00      	cmp	r3, #0
 8080aa4:	da13      	bge.n	8080ace <_Z14checkDHTStatusv+0x62>
			Serial.println("Failed to read from DHT sensor!");
 8080aa6:	f006 fa5f 	bl	8086f68 <_Z16_fetch_usbserialv>
 8080aaa:	4921      	ldr	r1, [pc, #132]	; (8080b30 <_Z14checkDHTStatusv+0xc4>)
 8080aac:	f004 fae7 	bl	808507e <_ZN5Print7printlnEPKc>
 8080ab0:	e00d      	b.n	8080ace <_Z14checkDHTStatusv+0x62>
 8080ab2:	f003 fbd1 	bl	8084258 <HAL_Timer_Get_Milli_Seconds>
  if (millis()-lastDHTPublish > ((unsigned long) delayDHTMinutes*60*1000)) {
 8080ab6:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8080b44 <_Z14checkDHTStatusv+0xd8>
 8080aba:	f8d8 3000 	ldr.w	r3, [r8]
 8080abe:	1ac0      	subs	r0, r0, r3
 8080ac0:	4b1c      	ldr	r3, [pc, #112]	; (8080b34 <_Z14checkDHTStatusv+0xc8>)
 8080ac2:	681a      	ldr	r2, [r3, #0]
 8080ac4:	f64e 2360 	movw	r3, #60000	; 0xea60
 8080ac8:	4353      	muls	r3, r2
 8080aca:	4298      	cmp	r0, r3
 8080acc:	d802      	bhi.n	8080ad4 <_Z14checkDHTStatusv+0x68>
}
 8080ace:	b008      	add	sp, #32
 8080ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((transmittingData & TRANSMITTINGDHTDATA) == TRANSMITTINGDHTDATA) {
 8080ad4:	4b15      	ldr	r3, [pc, #84]	; (8080b2c <_Z14checkDHTStatusv+0xc0>)
 8080ad6:	681b      	ldr	r3, [r3, #0]
 8080ad8:	071b      	lsls	r3, r3, #28
 8080ada:	d5f8      	bpl.n	8080ace <_Z14checkDHTStatusv+0x62>
          Particle.publish("LJENVMT", String::format("{\"t\":%.2f,\"h\":%.2f}",f,h), 60, PRIVATE);
 8080adc:	4628      	mov	r0, r5
 8080ade:	f007 fb3b 	bl	8088158 <__aeabi_f2d>
 8080ae2:	4606      	mov	r6, r0
 8080ae4:	4620      	mov	r0, r4
 8080ae6:	460f      	mov	r7, r1
 8080ae8:	f007 fb36 	bl	8088158 <__aeabi_f2d>
 8080aec:	4632      	mov	r2, r6
 8080aee:	e9cd 0100 	strd	r0, r1, [sp]
 8080af2:	463b      	mov	r3, r7
 8080af4:	4910      	ldr	r1, [pc, #64]	; (8080b38 <_Z14checkDHTStatusv+0xcc>)
 8080af6:	a804      	add	r0, sp, #16
 8080af8:	f004 fa60 	bl	8084fbc <_ZN6String6formatEPKcz>
 8080afc:	4b0f      	ldr	r3, [pc, #60]	; (8080b3c <_Z14checkDHTStatusv+0xd0>)
 8080afe:	9a04      	ldr	r2, [sp, #16]
 8080b00:	781b      	ldrb	r3, [r3, #0]
 8080b02:	490f      	ldr	r1, [pc, #60]	; (8080b40 <_Z14checkDHTStatusv+0xd4>)
 8080b04:	f88d 3000 	strb.w	r3, [sp]
 8080b08:	a802      	add	r0, sp, #8
 8080b0a:	233c      	movs	r3, #60	; 0x3c
 8080b0c:	f006 f806 	bl	8086b1c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8080b10:	a803      	add	r0, sp, #12
 8080b12:	f7ff fc8d 	bl	8080430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080b16:	a804      	add	r0, sp, #16
 8080b18:	f004 f8e6 	bl	8084ce8 <_ZN6StringD1Ev>
 8080b1c:	f003 fb9c 	bl	8084258 <HAL_Timer_Get_Milli_Seconds>
          lastDHTPublish = millis();
 8080b20:	f8c8 0000 	str.w	r0, [r8]
 8080b24:	e7d3      	b.n	8080ace <_Z14checkDHTStatusv+0x62>
 8080b26:	bf00      	nop
 8080b28:	20000180 	.word	0x20000180
 8080b2c:	20000014 	.word	0x20000014
 8080b30:	08089385 	.word	0x08089385
 8080b34:	20000008 	.word	0x20000008
 8080b38:	08089369 	.word	0x08089369
 8080b3c:	20000140 	.word	0x20000140
 8080b40:	0808937d 	.word	0x0808937d
 8080b44:	200001a0 	.word	0x200001a0

08080b48 <loop>:
void loop() {
 8080b48:	b508      	push	{r3, lr}
	batteryCheck.loop();
 8080b4a:	4811      	ldr	r0, [pc, #68]	; (8080b90 <loop+0x48>)
 8080b4c:	f000 ff56 	bl	80819fc <_ZN12BatteryCheck4loopEv>
	sessionCheck.loop();
 8080b50:	4810      	ldr	r0, [pc, #64]	; (8080b94 <loop+0x4c>)
 8080b52:	f001 fc4d 	bl	80823f0 <_ZN12SessionCheck4loopEv>
	connectionCheck.loop();
 8080b56:	4810      	ldr	r0, [pc, #64]	; (8080b98 <loop+0x50>)
 8080b58:	f001 fa2a 	bl	8081fb0 <_ZN15ConnectionCheck4loopEv>
	connectionEvents.loop();
 8080b5c:	480f      	ldr	r0, [pc, #60]	; (8080b9c <loop+0x54>)
 8080b5e:	f001 fda7 	bl	80826b0 <_ZN16ConnectionEvents4loopEv>
	tester.loop();
 8080b62:	480f      	ldr	r0, [pc, #60]	; (8080ba0 <loop+0x58>)
 8080b64:	f001 f94a 	bl	8081dfc <_ZN6Tester4loopEv>
  checkAccelStatus();
 8080b68:	f7ff ff08 	bl	808097c <_Z16checkAccelStatusv>
  checkGPSStatus();
 8080b6c:	f7ff fe5c 	bl	8080828 <_Z14checkGPSStatusv>
  checkPowerStatus();
 8080b70:	f7ff fe14 	bl	808079c <_Z16checkPowerStatusv>
  checkDHTStatus();
 8080b74:	f7ff ff7a 	bl	8080a6c <_Z14checkDHTStatusv>
  if ((transmittingData & SERIALLOOPDATA) == SERIALLOOPDATA)
 8080b78:	4b0a      	ldr	r3, [pc, #40]	; (8080ba4 <loop+0x5c>)
 8080b7a:	681b      	ldr	r3, [r3, #0]
 8080b7c:	011b      	lsls	r3, r3, #4
 8080b7e:	d506      	bpl.n	8080b8e <loop+0x46>
    Serial.println("End Of loop() function");
 8080b80:	f006 f9f2 	bl	8086f68 <_Z16_fetch_usbserialv>
}
 8080b84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.println("End Of loop() function");
 8080b88:	4907      	ldr	r1, [pc, #28]	; (8080ba8 <loop+0x60>)
 8080b8a:	f004 ba78 	b.w	808507e <_ZN5Print7printlnEPKc>
}
 8080b8e:	bd08      	pop	{r3, pc}
 8080b90:	20000144 	.word	0x20000144
 8080b94:	200001e8 	.word	0x200001e8
 8080b98:	20000154 	.word	0x20000154
 8080b9c:	20000174 	.word	0x20000174
 8080ba0:	2000022c 	.word	0x2000022c
 8080ba4:	20000014 	.word	0x20000014
 8080ba8:	080893ee 	.word	0x080893ee

08080bac <_Z9postValue6String>:

// Type the name of the value you want to see into the console function
// argument and it will be published.
// See showAll() above for names of values and units.
int postValue(String cmd)
{
 8080bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080bb0:	b0a1      	sub	sp, #132	; 0x84
    String buf; // for publishing values
 8080bb2:	ae18      	add	r6, sp, #96	; 0x60
 8080bb4:	49a6      	ldr	r1, [pc, #664]	; (8080e50 <_Z9postValue6String+0x2a4>)
{
 8080bb6:	4605      	mov	r5, r0
    String buf; // for publishing values
 8080bb8:	4630      	mov	r0, r6
 8080bba:	f004 f8df 	bl	8084d7c <_ZN6StringC1EPKc>

    bool initComplete = t.gpsInitComplete();
 8080bbe:	48a5      	ldr	r0, [pc, #660]	; (8080e54 <_Z9postValue6String+0x2a8>)
 8080bc0:	f002 f802 	bl	8082bc8 <_ZN13AssetTracker215gpsInitCompleteEv>
 8080bc4:	9015      	str	r0, [sp, #84]	; 0x54
    uint8_t hour = t.getHour();
 8080bc6:	48a3      	ldr	r0, [pc, #652]	; (8080e54 <_Z9postValue6String+0x2a8>)
 8080bc8:	f001 ff64 	bl	8082a94 <_ZN13AssetTracker27getHourEv>
 8080bcc:	4683      	mov	fp, r0
    uint8_t minute = t.getMinute();
 8080bce:	48a1      	ldr	r0, [pc, #644]	; (8080e54 <_Z9postValue6String+0x2a8>)
 8080bd0:	f001 ff66 	bl	8082aa0 <_ZN13AssetTracker29getMinuteEv>
 8080bd4:	4682      	mov	sl, r0
    uint8_t seconds = t.getSeconds();
 8080bd6:	489f      	ldr	r0, [pc, #636]	; (8080e54 <_Z9postValue6String+0x2a8>)
 8080bd8:	f001 ff68 	bl	8082aac <_ZN13AssetTracker210getSecondsEv>
 8080bdc:	4681      	mov	r9, r0
    uint8_t month = t.getMonth();
 8080bde:	489d      	ldr	r0, [pc, #628]	; (8080e54 <_Z9postValue6String+0x2a8>)
 8080be0:	f001 ff76 	bl	8082ad0 <_ZN13AssetTracker28getMonthEv>
 8080be4:	4680      	mov	r8, r0
    uint8_t day = t.getDay();
 8080be6:	489b      	ldr	r0, [pc, #620]	; (8080e54 <_Z9postValue6String+0x2a8>)
 8080be8:	f001 ff78 	bl	8082adc <_ZN13AssetTracker26getDayEv>
 8080bec:	4607      	mov	r7, r0
    uint16_t year = t.getYear();
 8080bee:	4899      	ldr	r0, [pc, #612]	; (8080e54 <_Z9postValue6String+0x2a8>)
 8080bf0:	f001 ff68 	bl	8082ac4 <_ZN13AssetTracker27getYearEv>
 8080bf4:	9014      	str	r0, [sp, #80]	; 0x50
    uint16_t milliseconds = t.getMilliseconds();
 8080bf6:	4897      	ldr	r0, [pc, #604]	; (8080e54 <_Z9postValue6String+0x2a8>)
 8080bf8:	f001 ff5e 	bl	8082ab8 <_ZN13AssetTracker215getMillisecondsEv>
 8080bfc:	9002      	str	r0, [sp, #8]
    float latitude = t.readLat();
 8080bfe:	4895      	ldr	r0, [pc, #596]	; (8080e54 <_Z9postValue6String+0x2a8>)
 8080c00:	f001 fef8 	bl	80829f4 <_ZN13AssetTracker27readLatEv>
 8080c04:	9005      	str	r0, [sp, #20]
    float longitude = t.readLon();
 8080c06:	4893      	ldr	r0, [pc, #588]	; (8080e54 <_Z9postValue6String+0x2a8>)
 8080c08:	f001 fefa 	bl	8082a00 <_ZN13AssetTracker27readLonEv>
 8080c0c:	9006      	str	r0, [sp, #24]
    float latitudeDegrees = t.readLatDeg();
 8080c0e:	4891      	ldr	r0, [pc, #580]	; (8080e54 <_Z9postValue6String+0x2a8>)
 8080c10:	f001 fefc 	bl	8082a0c <_ZN13AssetTracker210readLatDegEv>
 8080c14:	9007      	str	r0, [sp, #28]
    float longitudeDegrees = t.readLonDeg();
 8080c16:	488f      	ldr	r0, [pc, #572]	; (8080e54 <_Z9postValue6String+0x2a8>)
 8080c18:	f001 fefe 	bl	8082a18 <_ZN13AssetTracker210readLonDegEv>
 8080c1c:	9008      	str	r0, [sp, #32]
    float geoidheight = t.getGeoIdHeight();
 8080c1e:	488d      	ldr	r0, [pc, #564]	; (8080e54 <_Z9postValue6String+0x2a8>)
 8080c20:	f001 ff74 	bl	8082b0c <_ZN13AssetTracker214getGeoIdHeightEv>
 8080c24:	9009      	str	r0, [sp, #36]	; 0x24
    float altitude = t.getAltitude();
 8080c26:	488b      	ldr	r0, [pc, #556]	; (8080e54 <_Z9postValue6String+0x2a8>)
 8080c28:	f001 ff76 	bl	8082b18 <_ZN13AssetTracker211getAltitudeEv>
 8080c2c:	900a      	str	r0, [sp, #40]	; 0x28
    float speed = t.getSpeed();
 8080c2e:	4889      	ldr	r0, [pc, #548]	; (8080e54 <_Z9postValue6String+0x2a8>)
 8080c30:	f001 ff66 	bl	8082b00 <_ZN13AssetTracker28getSpeedEv>
 8080c34:	900b      	str	r0, [sp, #44]	; 0x2c
    uint8_t fixquality = t.getFixQuality();
 8080c36:	4887      	ldr	r0, [pc, #540]	; (8080e54 <_Z9postValue6String+0x2a8>)
 8080c38:	f001 ff5c 	bl	8082af4 <_ZN13AssetTracker213getFixQualityEv>
 8080c3c:	900c      	str	r0, [sp, #48]	; 0x30
    uint8_t satellites = t.getSatellites();
 8080c3e:	4885      	ldr	r0, [pc, #532]	; (8080e54 <_Z9postValue6String+0x2a8>)
 8080c40:	f001 ff52 	bl	8082ae8 <_ZN13AssetTracker213getSatellitesEv>
 8080c44:	900d      	str	r0, [sp, #52]	; 0x34
    uint32_t horzAcc = t.getHaccuracy();
 8080c46:	4883      	ldr	r0, [pc, #524]	; (8080e54 <_Z9postValue6String+0x2a8>)
 8080c48:	f001 fef4 	bl	8082a34 <_ZN13AssetTracker212getHaccuracyEv>
 8080c4c:	900e      	str	r0, [sp, #56]	; 0x38
    uint32_t vertAcc = t.getVaccuracy();
 8080c4e:	4881      	ldr	r0, [pc, #516]	; (8080e54 <_Z9postValue6String+0x2a8>)
 8080c50:	f001 fef6 	bl	8082a40 <_ZN13AssetTracker212getVaccuracyEv>
 8080c54:	900f      	str	r0, [sp, #60]	; 0x3c
    int32_t velN = t.getVelN();
 8080c56:	487f      	ldr	r0, [pc, #508]	; (8080e54 <_Z9postValue6String+0x2a8>)
 8080c58:	f001 fef8 	bl	8082a4c <_ZN13AssetTracker27getVelNEv>
 8080c5c:	9010      	str	r0, [sp, #64]	; 0x40
    uint32_t velE = t.getVelE();
 8080c5e:	487d      	ldr	r0, [pc, #500]	; (8080e54 <_Z9postValue6String+0x2a8>)
 8080c60:	f001 fefa 	bl	8082a58 <_ZN13AssetTracker27getVelEEv>
 8080c64:	9003      	str	r0, [sp, #12]
    uint32_t velD = t.getVelD();
 8080c66:	487b      	ldr	r0, [pc, #492]	; (8080e54 <_Z9postValue6String+0x2a8>)
 8080c68:	f001 fefc 	bl	8082a64 <_ZN13AssetTracker27getVelDEv>
 8080c6c:	9004      	str	r0, [sp, #16]
    int32_t gSpeed = t.getGspeed();
 8080c6e:	4879      	ldr	r0, [pc, #484]	; (8080e54 <_Z9postValue6String+0x2a8>)
 8080c70:	f001 ff0a 	bl	8082a88 <_ZN13AssetTracker29getGspeedEv>
 8080c74:	9011      	str	r0, [sp, #68]	; 0x44
    int32_t odoTrip = t.getOdoTrip();
 8080c76:	4877      	ldr	r0, [pc, #476]	; (8080e54 <_Z9postValue6String+0x2a8>)
 8080c78:	f001 fefa 	bl	8082a70 <_ZN13AssetTracker210getOdoTripEv>
 8080c7c:	9012      	str	r0, [sp, #72]	; 0x48
    int32_t odoTotal = t.getOdoTotal();
 8080c7e:	4875      	ldr	r0, [pc, #468]	; (8080e54 <_Z9postValue6String+0x2a8>)
 8080c80:	f001 fefc 	bl	8082a7c <_ZN13AssetTracker211getOdoTotalEv>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8080c84:	4974      	ldr	r1, [pc, #464]	; (8080e58 <_Z9postValue6String+0x2ac>)
 8080c86:	9013      	str	r0, [sp, #76]	; 0x4c
 8080c88:	4628      	mov	r0, r5
 8080c8a:	f004 f91c 	bl	8084ec6 <_ZNK6String6equalsEPKc>
 8080c8e:	ac1c      	add	r4, sp, #112	; 0x70



    // This implementation is a bit crude but it was easy to implement
    // and simple to read.
    if (cmd == "initComplete"){
 8080c90:	b368      	cbz	r0, 8080cee <_Z9postValue6String+0x142>
        buf = String::format("%d", initComplete);
 8080c92:	9a15      	ldr	r2, [sp, #84]	; 0x54
    } else if (cmd == "hour"){
        buf = String::format("%d", hour);
 8080c94:	4620      	mov	r0, r4
 8080c96:	4971      	ldr	r1, [pc, #452]	; (8080e5c <_Z9postValue6String+0x2b0>)
 8080c98:	f004 f990 	bl	8084fbc <_ZN6String6formatEPKcz>
 8080c9c:	4621      	mov	r1, r4
 8080c9e:	4630      	mov	r0, r6
 8080ca0:	f004 f8c1 	bl	8084e26 <_ZN6StringaSEOS_>
 8080ca4:	4620      	mov	r0, r4
 8080ca6:	f004 f81f 	bl	8084ce8 <_ZN6StringD1Ev>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8080caa:	4629      	mov	r1, r5
 8080cac:	4620      	mov	r0, r4
 8080cae:	f004 f8af 	bl	8084e10 <_ZN6StringC1ERKS_>
    } else if (cmd == "odoTotal"){
        buf = String::format("%lu", odoTotal);
    } else {
        buf = "Don't know that one. Check spelling.";
    }
    Particle.publish("LJCMDVAL", cmd + ": " + buf, 60, PRIVATE);
 8080cb2:	4620      	mov	r0, r4
 8080cb4:	496a      	ldr	r1, [pc, #424]	; (8080e60 <_Z9postValue6String+0x2b4>)
 8080cb6:	f004 f8f2 	bl	8084e9e <_ZplRK15StringSumHelperPKc>
 8080cba:	4631      	mov	r1, r6
 8080cbc:	f004 f8e3 	bl	8084e86 <_ZplRK15StringSumHelperRK6String>
        operator const char*() const { return c_str(); }
 8080cc0:	4b68      	ldr	r3, [pc, #416]	; (8080e64 <_Z9postValue6String+0x2b8>)
 8080cc2:	6802      	ldr	r2, [r0, #0]
 8080cc4:	781b      	ldrb	r3, [r3, #0]
 8080cc6:	4968      	ldr	r1, [pc, #416]	; (8080e68 <_Z9postValue6String+0x2bc>)
 8080cc8:	f88d 3000 	strb.w	r3, [sp]
 8080ccc:	a816      	add	r0, sp, #88	; 0x58
 8080cce:	233c      	movs	r3, #60	; 0x3c
 8080cd0:	f005 ff24 	bl	8086b1c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8080cd4:	a817      	add	r0, sp, #92	; 0x5c
 8080cd6:	f7ff fbab 	bl	8080430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class StringSumHelper : public String
 8080cda:	4620      	mov	r0, r4
 8080cdc:	f004 f804 	bl	8084ce8 <_ZN6StringD1Ev>
    String buf; // for publishing values
 8080ce0:	4630      	mov	r0, r6
 8080ce2:	f004 f801 	bl	8084ce8 <_ZN6StringD1Ev>


    return 1;
}
 8080ce6:	2001      	movs	r0, #1
 8080ce8:	b021      	add	sp, #132	; 0x84
 8080cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8080cee:	4628      	mov	r0, r5
 8080cf0:	495e      	ldr	r1, [pc, #376]	; (8080e6c <_Z9postValue6String+0x2c0>)
 8080cf2:	f004 f8e8 	bl	8084ec6 <_ZNK6String6equalsEPKc>
    } else if (cmd == "hour"){
 8080cf6:	b108      	cbz	r0, 8080cfc <_Z9postValue6String+0x150>
        buf = String::format("%d", hour);
 8080cf8:	465a      	mov	r2, fp
 8080cfa:	e7cb      	b.n	8080c94 <_Z9postValue6String+0xe8>
 8080cfc:	4628      	mov	r0, r5
 8080cfe:	495c      	ldr	r1, [pc, #368]	; (8080e70 <_Z9postValue6String+0x2c4>)
 8080d00:	f004 f8e1 	bl	8084ec6 <_ZNK6String6equalsEPKc>
    } else if (cmd == "minute"){
 8080d04:	b108      	cbz	r0, 8080d0a <_Z9postValue6String+0x15e>
        buf = String::format("%d", minute);
 8080d06:	4652      	mov	r2, sl
 8080d08:	e7c4      	b.n	8080c94 <_Z9postValue6String+0xe8>
 8080d0a:	4628      	mov	r0, r5
 8080d0c:	4959      	ldr	r1, [pc, #356]	; (8080e74 <_Z9postValue6String+0x2c8>)
 8080d0e:	f004 f8da 	bl	8084ec6 <_ZNK6String6equalsEPKc>
    } else if (cmd == "seconds"){
 8080d12:	b108      	cbz	r0, 8080d18 <_Z9postValue6String+0x16c>
        buf = String::format("%d", seconds);
 8080d14:	464a      	mov	r2, r9
 8080d16:	e7bd      	b.n	8080c94 <_Z9postValue6String+0xe8>
 8080d18:	4628      	mov	r0, r5
 8080d1a:	4957      	ldr	r1, [pc, #348]	; (8080e78 <_Z9postValue6String+0x2cc>)
 8080d1c:	f004 f8d3 	bl	8084ec6 <_ZNK6String6equalsEPKc>
    } else if (cmd == "month"){
 8080d20:	b108      	cbz	r0, 8080d26 <_Z9postValue6String+0x17a>
        buf = String::format("%d", month);
 8080d22:	4642      	mov	r2, r8
 8080d24:	e7b6      	b.n	8080c94 <_Z9postValue6String+0xe8>
 8080d26:	4628      	mov	r0, r5
 8080d28:	4954      	ldr	r1, [pc, #336]	; (8080e7c <_Z9postValue6String+0x2d0>)
 8080d2a:	f004 f8cc 	bl	8084ec6 <_ZNK6String6equalsEPKc>
    } else if (cmd == "day"){
 8080d2e:	b108      	cbz	r0, 8080d34 <_Z9postValue6String+0x188>
        buf = String::format("%d", day);
 8080d30:	463a      	mov	r2, r7
 8080d32:	e7af      	b.n	8080c94 <_Z9postValue6String+0xe8>
 8080d34:	4628      	mov	r0, r5
 8080d36:	4952      	ldr	r1, [pc, #328]	; (8080e80 <_Z9postValue6String+0x2d4>)
 8080d38:	f004 f8c5 	bl	8084ec6 <_ZNK6String6equalsEPKc>
    } else if (cmd == "year"){
 8080d3c:	b108      	cbz	r0, 8080d42 <_Z9postValue6String+0x196>
        buf = String::format("%d", year);
 8080d3e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8080d40:	e7a8      	b.n	8080c94 <_Z9postValue6String+0xe8>
 8080d42:	4628      	mov	r0, r5
 8080d44:	494f      	ldr	r1, [pc, #316]	; (8080e84 <_Z9postValue6String+0x2d8>)
 8080d46:	f004 f8be 	bl	8084ec6 <_ZNK6String6equalsEPKc>
    } else if (cmd == "milliseconds"){
 8080d4a:	b110      	cbz	r0, 8080d52 <_Z9postValue6String+0x1a6>
        buf = String::format("%d", milliseconds);
 8080d4c:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8080d50:	e7a0      	b.n	8080c94 <_Z9postValue6String+0xe8>
 8080d52:	4628      	mov	r0, r5
 8080d54:	494c      	ldr	r1, [pc, #304]	; (8080e88 <_Z9postValue6String+0x2dc>)
 8080d56:	f004 f8b6 	bl	8084ec6 <_ZNK6String6equalsEPKc>
    } else if (cmd == "latitude"){
 8080d5a:	b148      	cbz	r0, 8080d70 <_Z9postValue6String+0x1c4>
        buf = String::format("%f", latitude);
 8080d5c:	9805      	ldr	r0, [sp, #20]
 8080d5e:	f007 f9fb 	bl	8088158 <__aeabi_f2d>
 8080d62:	4602      	mov	r2, r0
 8080d64:	460b      	mov	r3, r1
 8080d66:	4620      	mov	r0, r4
 8080d68:	4948      	ldr	r1, [pc, #288]	; (8080e8c <_Z9postValue6String+0x2e0>)
 8080d6a:	f004 f927 	bl	8084fbc <_ZN6String6formatEPKcz>
 8080d6e:	e795      	b.n	8080c9c <_Z9postValue6String+0xf0>
 8080d70:	4628      	mov	r0, r5
 8080d72:	4947      	ldr	r1, [pc, #284]	; (8080e90 <_Z9postValue6String+0x2e4>)
 8080d74:	f004 f8a7 	bl	8084ec6 <_ZNK6String6equalsEPKc>
 8080d78:	46b0      	mov	r8, r6
 8080d7a:	4627      	mov	r7, r4
    } else if (cmd == "longitude"){
 8080d7c:	b170      	cbz	r0, 8080d9c <_Z9postValue6String+0x1f0>
        buf = String::format("%f", longitude);
 8080d7e:	9806      	ldr	r0, [sp, #24]
        buf = String::format("%f", latitudeDegrees);
 8080d80:	f007 f9ea 	bl	8088158 <__aeabi_f2d>
 8080d84:	4602      	mov	r2, r0
 8080d86:	460b      	mov	r3, r1
 8080d88:	4638      	mov	r0, r7
 8080d8a:	4940      	ldr	r1, [pc, #256]	; (8080e8c <_Z9postValue6String+0x2e0>)
 8080d8c:	f004 f916 	bl	8084fbc <_ZN6String6formatEPKcz>
        buf = String::format("%lu", vertAcc);
 8080d90:	4639      	mov	r1, r7
 8080d92:	4640      	mov	r0, r8
 8080d94:	f004 f847 	bl	8084e26 <_ZN6StringaSEOS_>
 8080d98:	4638      	mov	r0, r7
 8080d9a:	e784      	b.n	8080ca6 <_Z9postValue6String+0xfa>
 8080d9c:	4628      	mov	r0, r5
 8080d9e:	493d      	ldr	r1, [pc, #244]	; (8080e94 <_Z9postValue6String+0x2e8>)
 8080da0:	f004 f891 	bl	8084ec6 <_ZNK6String6equalsEPKc>
    } else if (cmd == "latitudeDegrees"){
 8080da4:	b108      	cbz	r0, 8080daa <_Z9postValue6String+0x1fe>
        buf = String::format("%f", latitudeDegrees);
 8080da6:	9807      	ldr	r0, [sp, #28]
 8080da8:	e7ea      	b.n	8080d80 <_Z9postValue6String+0x1d4>
 8080daa:	4628      	mov	r0, r5
 8080dac:	493a      	ldr	r1, [pc, #232]	; (8080e98 <_Z9postValue6String+0x2ec>)
 8080dae:	f004 f88a 	bl	8084ec6 <_ZNK6String6equalsEPKc>
 8080db2:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    } else if (cmd == "longitudeDegrees"){
 8080db6:	b108      	cbz	r0, 8080dbc <_Z9postValue6String+0x210>
        buf = String::format("%f", longitudeDegrees);
 8080db8:	9808      	ldr	r0, [sp, #32]
 8080dba:	e7e1      	b.n	8080d80 <_Z9postValue6String+0x1d4>
 8080dbc:	4628      	mov	r0, r5
 8080dbe:	4937      	ldr	r1, [pc, #220]	; (8080e9c <_Z9postValue6String+0x2f0>)
 8080dc0:	f004 f881 	bl	8084ec6 <_ZNK6String6equalsEPKc>
 8080dc4:	af1c      	add	r7, sp, #112	; 0x70
    } else if (cmd == "geoidheight"){
 8080dc6:	b108      	cbz	r0, 8080dcc <_Z9postValue6String+0x220>
        buf = String::format("%f", geoidheight);
 8080dc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8080dca:	e7d9      	b.n	8080d80 <_Z9postValue6String+0x1d4>
 8080dcc:	4628      	mov	r0, r5
 8080dce:	4934      	ldr	r1, [pc, #208]	; (8080ea0 <_Z9postValue6String+0x2f4>)
 8080dd0:	f004 f879 	bl	8084ec6 <_ZNK6String6equalsEPKc>
    } else if (cmd == "altitude"){
 8080dd4:	b108      	cbz	r0, 8080dda <_Z9postValue6String+0x22e>
        buf = String::format("%f", altitude);
 8080dd6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8080dd8:	e7d2      	b.n	8080d80 <_Z9postValue6String+0x1d4>
 8080dda:	4628      	mov	r0, r5
 8080ddc:	4931      	ldr	r1, [pc, #196]	; (8080ea4 <_Z9postValue6String+0x2f8>)
 8080dde:	f004 f872 	bl	8084ec6 <_ZNK6String6equalsEPKc>
    } else if (cmd == "speed"){
 8080de2:	b108      	cbz	r0, 8080de8 <_Z9postValue6String+0x23c>
        buf = String::format("%f", speed);
 8080de4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8080de6:	e7cb      	b.n	8080d80 <_Z9postValue6String+0x1d4>
 8080de8:	4628      	mov	r0, r5
 8080dea:	492f      	ldr	r1, [pc, #188]	; (8080ea8 <_Z9postValue6String+0x2fc>)
 8080dec:	f004 f86b 	bl	8084ec6 <_ZNK6String6equalsEPKc>
 8080df0:	46c2      	mov	sl, r8
 8080df2:	46b9      	mov	r9, r7
    } else if (cmd == "fixquality"){
 8080df4:	b128      	cbz	r0, 8080e02 <_Z9postValue6String+0x256>
        buf = String::format("%d", fixquality);
 8080df6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        buf = String::format("%d", satellites);
 8080df8:	4918      	ldr	r1, [pc, #96]	; (8080e5c <_Z9postValue6String+0x2b0>)
        buf = String::format("%lu", vertAcc);
 8080dfa:	4638      	mov	r0, r7
 8080dfc:	f004 f8de 	bl	8084fbc <_ZN6String6formatEPKcz>
 8080e00:	e7c6      	b.n	8080d90 <_Z9postValue6String+0x1e4>
 8080e02:	4628      	mov	r0, r5
 8080e04:	4929      	ldr	r1, [pc, #164]	; (8080eac <_Z9postValue6String+0x300>)
 8080e06:	f004 f85e 	bl	8084ec6 <_ZNK6String6equalsEPKc>
    } else if (cmd == "satellites"){
 8080e0a:	b108      	cbz	r0, 8080e10 <_Z9postValue6String+0x264>
        buf = String::format("%d", satellites);
 8080e0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8080e0e:	e7f3      	b.n	8080df8 <_Z9postValue6String+0x24c>
 8080e10:	4628      	mov	r0, r5
 8080e12:	4927      	ldr	r1, [pc, #156]	; (8080eb0 <_Z9postValue6String+0x304>)
 8080e14:	f004 f857 	bl	8084ec6 <_ZNK6String6equalsEPKc>
    } else if (cmd == "horzAcc"){
 8080e18:	b110      	cbz	r0, 8080e20 <_Z9postValue6String+0x274>
        buf = String::format("%lu", horzAcc);
 8080e1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
        buf = String::format("%lu", vertAcc);
 8080e1c:	4925      	ldr	r1, [pc, #148]	; (8080eb4 <_Z9postValue6String+0x308>)
 8080e1e:	e7ec      	b.n	8080dfa <_Z9postValue6String+0x24e>
 8080e20:	4628      	mov	r0, r5
 8080e22:	4925      	ldr	r1, [pc, #148]	; (8080eb8 <_Z9postValue6String+0x30c>)
 8080e24:	f004 f84f 	bl	8084ec6 <_ZNK6String6equalsEPKc>
    } else if (cmd == "vertAcc"){
 8080e28:	b108      	cbz	r0, 8080e2e <_Z9postValue6String+0x282>
        buf = String::format("%lu", vertAcc);
 8080e2a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8080e2c:	e7f6      	b.n	8080e1c <_Z9postValue6String+0x270>
 8080e2e:	4628      	mov	r0, r5
 8080e30:	4922      	ldr	r1, [pc, #136]	; (8080ebc <_Z9postValue6String+0x310>)
 8080e32:	f004 f848 	bl	8084ec6 <_ZNK6String6equalsEPKc>
    } else if (cmd == "velN"){
 8080e36:	2800      	cmp	r0, #0
 8080e38:	d044      	beq.n	8080ec4 <_Z9postValue6String+0x318>
        buf = String::format("%ld", velN);
 8080e3a:	9a10      	ldr	r2, [sp, #64]	; 0x40
        buf = String::format("%ld", velE);
 8080e3c:	4920      	ldr	r1, [pc, #128]	; (8080ec0 <_Z9postValue6String+0x314>)
        buf = String::format("%lu", odoTotal);
 8080e3e:	4648      	mov	r0, r9
 8080e40:	f004 f8bc 	bl	8084fbc <_ZN6String6formatEPKcz>
 8080e44:	4649      	mov	r1, r9
 8080e46:	4650      	mov	r0, sl
 8080e48:	f003 ffed 	bl	8084e26 <_ZN6StringaSEOS_>
 8080e4c:	4648      	mov	r0, r9
 8080e4e:	e72a      	b.n	8080ca6 <_Z9postValue6String+0xfa>
 8080e50:	08089844 	.word	0x08089844
 8080e54:	20000228 	.word	0x20000228
 8080e58:	08089405 	.word	0x08089405
 8080e5c:	0808999b 	.word	0x0808999b
 8080e60:	08089d1a 	.word	0x08089d1a
 8080e64:	20000140 	.word	0x20000140
 8080e68:	08089503 	.word	0x08089503
 8080e6c:	08089412 	.word	0x08089412
 8080e70:	08089417 	.word	0x08089417
 8080e74:	08089432 	.word	0x08089432
 8080e78:	0808941e 	.word	0x0808941e
 8080e7c:	08089424 	.word	0x08089424
 8080e80:	08089428 	.word	0x08089428
 8080e84:	0808942d 	.word	0x0808942d
 8080e88:	0808943a 	.word	0x0808943a
 8080e8c:	080899ef 	.word	0x080899ef
 8080e90:	08089443 	.word	0x08089443
 8080e94:	0808944d 	.word	0x0808944d
 8080e98:	0808945d 	.word	0x0808945d
 8080e9c:	0808946e 	.word	0x0808946e
 8080ea0:	0808947a 	.word	0x0808947a
 8080ea4:	08089483 	.word	0x08089483
 8080ea8:	08089489 	.word	0x08089489
 8080eac:	08089494 	.word	0x08089494
 8080eb0:	0808949f 	.word	0x0808949f
 8080eb4:	080894a7 	.word	0x080894a7
 8080eb8:	080894ab 	.word	0x080894ab
 8080ebc:	080894b3 	.word	0x080894b3
 8080ec0:	080894b8 	.word	0x080894b8
 8080ec4:	4628      	mov	r0, r5
 8080ec6:	4914      	ldr	r1, [pc, #80]	; (8080f18 <_Z9postValue6String+0x36c>)
 8080ec8:	f003 fffd 	bl	8084ec6 <_ZNK6String6equalsEPKc>
    } else if (cmd == "velE"){
 8080ecc:	b108      	cbz	r0, 8080ed2 <_Z9postValue6String+0x326>
        buf = String::format("%ld", velE);
 8080ece:	9a03      	ldr	r2, [sp, #12]
 8080ed0:	e7b4      	b.n	8080e3c <_Z9postValue6String+0x290>
 8080ed2:	4628      	mov	r0, r5
 8080ed4:	4911      	ldr	r1, [pc, #68]	; (8080f1c <_Z9postValue6String+0x370>)
 8080ed6:	f003 fff6 	bl	8084ec6 <_ZNK6String6equalsEPKc>
    } else if (cmd == "velD"){
 8080eda:	b108      	cbz	r0, 8080ee0 <_Z9postValue6String+0x334>
        buf = String::format("%ld", velD);
 8080edc:	9a04      	ldr	r2, [sp, #16]
 8080ede:	e7ad      	b.n	8080e3c <_Z9postValue6String+0x290>
 8080ee0:	4628      	mov	r0, r5
 8080ee2:	490f      	ldr	r1, [pc, #60]	; (8080f20 <_Z9postValue6String+0x374>)
 8080ee4:	f003 ffef 	bl	8084ec6 <_ZNK6String6equalsEPKc>
    } else if (cmd == "gSpeed"){
 8080ee8:	b110      	cbz	r0, 8080ef0 <_Z9postValue6String+0x344>
        buf = String::format("%lu", gSpeed);
 8080eea:	9a11      	ldr	r2, [sp, #68]	; 0x44
        buf = String::format("%lu", odoTotal);
 8080eec:	490d      	ldr	r1, [pc, #52]	; (8080f24 <_Z9postValue6String+0x378>)
 8080eee:	e7a6      	b.n	8080e3e <_Z9postValue6String+0x292>
 8080ef0:	4628      	mov	r0, r5
 8080ef2:	490d      	ldr	r1, [pc, #52]	; (8080f28 <_Z9postValue6String+0x37c>)
 8080ef4:	f003 ffe7 	bl	8084ec6 <_ZNK6String6equalsEPKc>
    } else if (cmd == "odoTrip"){
 8080ef8:	b108      	cbz	r0, 8080efe <_Z9postValue6String+0x352>
        buf = String::format("%lu", odoTrip);
 8080efa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8080efc:	e7f6      	b.n	8080eec <_Z9postValue6String+0x340>
 8080efe:	4628      	mov	r0, r5
 8080f00:	490a      	ldr	r1, [pc, #40]	; (8080f2c <_Z9postValue6String+0x380>)
 8080f02:	f003 ffe0 	bl	8084ec6 <_ZNK6String6equalsEPKc>
    } else if (cmd == "odoTotal"){
 8080f06:	b108      	cbz	r0, 8080f0c <_Z9postValue6String+0x360>
        buf = String::format("%lu", odoTotal);
 8080f08:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8080f0a:	e7ef      	b.n	8080eec <_Z9postValue6String+0x340>
        buf = "Don't know that one. Check spelling.";
 8080f0c:	4640      	mov	r0, r8
 8080f0e:	4908      	ldr	r1, [pc, #32]	; (8080f30 <_Z9postValue6String+0x384>)
 8080f10:	f003 ff91 	bl	8084e36 <_ZN6StringaSEPKc>
 8080f14:	e6c9      	b.n	8080caa <_Z9postValue6String+0xfe>
 8080f16:	bf00      	nop
 8080f18:	080894bc 	.word	0x080894bc
 8080f1c:	080894c1 	.word	0x080894c1
 8080f20:	080894c6 	.word	0x080894c6
 8080f24:	080894a7 	.word	0x080894a7
 8080f28:	080894cd 	.word	0x080894cd
 8080f2c:	080894d5 	.word	0x080894d5
 8080f30:	080894de 	.word	0x080894de

08080f34 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 8080f34:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 8080f36:	2614      	movs	r6, #20
 8080f38:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 8080f3c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 8080f3e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 8080f42:	42ae      	cmp	r6, r5
 8080f44:	d004      	beq.n	8080f50 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 8080f46:	4628      	mov	r0, r5
 8080f48:	f003 fece 	bl	8084ce8 <_ZN6StringD1Ev>
 8080f4c:	3514      	adds	r5, #20
 8080f4e:	e7f8      	b.n	8080f42 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 8080f50:	6820      	ldr	r0, [r4, #0]
 8080f52:	f003 fca9 	bl	80848a8 <free>
    AllocatorT::free(data_);
}
 8080f56:	4620      	mov	r0, r4
 8080f58:	bd70      	pop	{r4, r5, r6, pc}

08080f5a <_ZN10CloudClass8variableIA12_cJRiEEEbRKT_DpOT0_>:
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 8080f5a:	2300      	movs	r3, #0
 8080f5c:	2202      	movs	r2, #2
 8080f5e:	f003 bc43 	b.w	80847e8 <spark_variable>

08080f62 <_ZN10CloudClass8variableIA11_cJRlEEEbRKT_DpOT0_>:
        return spark_variable(varKey, (const void*)userVar, CloudVariableTypeInt::TYPE_ID, NULL);
 8080f62:	2300      	movs	r3, #0
 8080f64:	2202      	movs	r2, #2
 8080f66:	f003 bc3f 	b.w	80847e8 <spark_variable>
	...

08080f6c <setup>:
void setup() {
 8080f6c:	b510      	push	{r4, lr}
 8080f6e:	b086      	sub	sp, #24
	Serial.begin(9600);
 8080f70:	f005 fffa 	bl	8086f68 <_Z16_fetch_usbserialv>
 8080f74:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8080f78:	f005 ffe6 	bl	8086f48 <_ZN9USBSerial5beginEl>
  interrupts(); // attempt to get DHT22 working on versions 2.00 and greater
 8080f7c:	f006 f857 	bl	808702e <_Z10interruptsv>
  delay(10000);
 8080f80:	f242 7010 	movw	r0, #10000	; 0x2710
 8080f84:	f005 fab8 	bl	80864f8 <delay>
  pc.setup();
 8080f88:	4868      	ldr	r0, [pc, #416]	; (808112c <setup+0x1c0>)
 8080f8a:	f001 fced 	bl	8082968 <_ZN10PowerCheck5setupEv>
  dht.begin();
 8080f8e:	4868      	ldr	r0, [pc, #416]	; (8081130 <setup+0x1c4>)
 8080f90:	f001 fed5 	bl	8082d3e <_ZN3DHT5beginEv>
  t.begin();
 8080f94:	4867      	ldr	r0, [pc, #412]	; (8081134 <setup+0x1c8>)
 8080f96:	f001 fd1b 	bl	80829d0 <_ZN13AssetTracker25beginEv>
  t.gpsOn();
 8080f9a:	4866      	ldr	r0, [pc, #408]	; (8081134 <setup+0x1c8>)
 8080f9c:	f001 fddc 	bl	8082b58 <_ZN13AssetTracker25gpsOnEv>
  SetGPSAntenna("external"); // set up for external antenna
 8080fa0:	4965      	ldr	r1, [pc, #404]	; (8081138 <setup+0x1cc>)
 8080fa2:	a802      	add	r0, sp, #8
 8080fa4:	f003 feea 	bl	8084d7c <_ZN6StringC1EPKc>
 8080fa8:	a802      	add	r0, sp, #8
 8080faa:	f7ff f92f 	bl	808020c <_Z13SetGPSAntenna6String>
 8080fae:	a802      	add	r0, sp, #8
 8080fb0:	f003 fe9a 	bl	8084ce8 <_ZN6StringD1Ev>
	connectionEvents.setup();
 8080fb4:	4861      	ldr	r0, [pc, #388]	; (808113c <setup+0x1d0>)
 8080fb6:	f001 fc37 	bl	8082828 <_ZN16ConnectionEvents5setupEv>
	batteryCheck.setup();
 8080fba:	4861      	ldr	r0, [pc, #388]	; (8081140 <setup+0x1d4>)
 8080fbc:	f000 fd1c 	bl	80819f8 <_ZN12BatteryCheck5setupEv>
	sessionCheck.setup();
 8080fc0:	4860      	ldr	r0, [pc, #384]	; (8081144 <setup+0x1d8>)
 8080fc2:	f001 fa2f 	bl	8082424 <_ZN12SessionCheck5setupEv>
	connectionCheck.setup();
 8080fc6:	4860      	ldr	r0, [pc, #384]	; (8081148 <setup+0x1dc>)
 8080fc8:	f000 ff90 	bl	8081eec <_ZN15ConnectionCheck5setupEv>
	tester.setup();
 8080fcc:	485f      	ldr	r0, [pc, #380]	; (808114c <setup+0x1e0>)
 8080fce:	f000 fda9 	bl	8081b24 <_ZN6Tester5setupEv>
        return _function(name, args...);
 8080fd2:	495f      	ldr	r1, [pc, #380]	; (8081150 <setup+0x1e4>)
 8080fd4:	485f      	ldr	r0, [pc, #380]	; (8081154 <setup+0x1e8>)
 8080fd6:	f7ff f9e7 	bl	80803a8 <_ZN10CloudClass9_functionEPKcPFi6StringE>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8080fda:	4b5f      	ldr	r3, [pc, #380]	; (8081158 <setup+0x1ec>)
            auto wrapper = new user_std_function_int_str_t(func);
 8080fdc:	2010      	movs	r0, #16
 8080fde:	9302      	str	r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
 8080fe0:	4b5e      	ldr	r3, [pc, #376]	; (808115c <setup+0x1f0>)
 8080fe2:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 8080fe4:	4b5e      	ldr	r3, [pc, #376]	; (8081160 <setup+0x1f4>)
 8080fe6:	9304      	str	r3, [sp, #16]
 8080fe8:	f7ff f867 	bl	80800ba <_Znwj>
 8080fec:	4604      	mov	r4, r0
 8080fee:	b178      	cbz	r0, 8081010 <setup+0xa4>
    _Function_base() : _M_manager(nullptr) { }
 8080ff0:	2300      	movs	r3, #0
 8080ff2:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 8080ff4:	9b04      	ldr	r3, [sp, #16]
      if (static_cast<bool>(__x))
 8080ff6:	b133      	cbz	r3, 8081006 <setup+0x9a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8080ff8:	2202      	movs	r2, #2
 8080ffa:	a902      	add	r1, sp, #8
 8080ffc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8080ffe:	9b05      	ldr	r3, [sp, #20]
 8081000:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8081002:	9b04      	ldr	r3, [sp, #16]
 8081004:	60a3      	str	r3, [r4, #8]
                success = register_function(call_std_user_function, wrapper, funcKey);
 8081006:	4621      	mov	r1, r4
 8081008:	4a56      	ldr	r2, [pc, #344]	; (8081164 <setup+0x1f8>)
 808100a:	4857      	ldr	r0, [pc, #348]	; (8081168 <setup+0x1fc>)
 808100c:	f005 fc81 	bl	8086912 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
    class function<_Res(_ArgTypes...)>
 8081010:	a802      	add	r0, sp, #8
 8081012:	f7ff f9bf 	bl	8080394 <_ZNSt14_Function_baseD1Ev>
        return _function(name, args...);
 8081016:	4955      	ldr	r1, [pc, #340]	; (808116c <setup+0x200>)
 8081018:	4855      	ldr	r0, [pc, #340]	; (8081170 <setup+0x204>)
 808101a:	f7ff f9c5 	bl	80803a8 <_ZN10CloudClass9_functionEPKcPFi6StringE>
 808101e:	4955      	ldr	r1, [pc, #340]	; (8081174 <setup+0x208>)
 8081020:	4855      	ldr	r0, [pc, #340]	; (8081178 <setup+0x20c>)
 8081022:	f7ff f9c1 	bl	80803a8 <_ZN10CloudClass9_functionEPKcPFi6StringE>
 8081026:	4955      	ldr	r1, [pc, #340]	; (808117c <setup+0x210>)
 8081028:	4855      	ldr	r0, [pc, #340]	; (8081180 <setup+0x214>)
 808102a:	f7ff f9bd 	bl	80803a8 <_ZN10CloudClass9_functionEPKcPFi6StringE>
 808102e:	4955      	ldr	r1, [pc, #340]	; (8081184 <setup+0x218>)
 8081030:	4855      	ldr	r0, [pc, #340]	; (8081188 <setup+0x21c>)
 8081032:	f7ff f9b9 	bl	80803a8 <_ZN10CloudClass9_functionEPKcPFi6StringE>
 8081036:	4955      	ldr	r1, [pc, #340]	; (808118c <setup+0x220>)
 8081038:	4855      	ldr	r0, [pc, #340]	; (8081190 <setup+0x224>)
 808103a:	f7ff f9b5 	bl	80803a8 <_ZN10CloudClass9_functionEPKcPFi6StringE>
 808103e:	4955      	ldr	r1, [pc, #340]	; (8081194 <setup+0x228>)
 8081040:	4855      	ldr	r0, [pc, #340]	; (8081198 <setup+0x22c>)
 8081042:	f7ff f9b1 	bl	80803a8 <_ZN10CloudClass9_functionEPKcPFi6StringE>
 8081046:	4955      	ldr	r1, [pc, #340]	; (808119c <setup+0x230>)
 8081048:	4855      	ldr	r0, [pc, #340]	; (80811a0 <setup+0x234>)
 808104a:	f7ff f9ad 	bl	80803a8 <_ZN10CloudClass9_functionEPKcPFi6StringE>
 808104e:	4955      	ldr	r1, [pc, #340]	; (80811a4 <setup+0x238>)
 8081050:	4855      	ldr	r0, [pc, #340]	; (80811a8 <setup+0x23c>)
 8081052:	f7ff f9a9 	bl	80803a8 <_ZN10CloudClass9_functionEPKcPFi6StringE>
 8081056:	4955      	ldr	r1, [pc, #340]	; (80811ac <setup+0x240>)
 8081058:	4855      	ldr	r0, [pc, #340]	; (80811b0 <setup+0x244>)
 808105a:	f7ff f9a5 	bl	80803a8 <_ZN10CloudClass9_functionEPKcPFi6StringE>
 808105e:	4955      	ldr	r1, [pc, #340]	; (80811b4 <setup+0x248>)
 8081060:	4855      	ldr	r0, [pc, #340]	; (80811b8 <setup+0x24c>)
 8081062:	f7ff f9a1 	bl	80803a8 <_ZN10CloudClass9_functionEPKcPFi6StringE>
 8081066:	4955      	ldr	r1, [pc, #340]	; (80811bc <setup+0x250>)
 8081068:	4855      	ldr	r0, [pc, #340]	; (80811c0 <setup+0x254>)
 808106a:	f7ff f99d 	bl	80803a8 <_ZN10CloudClass9_functionEPKcPFi6StringE>
 808106e:	4955      	ldr	r1, [pc, #340]	; (80811c4 <setup+0x258>)
 8081070:	4855      	ldr	r0, [pc, #340]	; (80811c8 <setup+0x25c>)
 8081072:	f7ff f999 	bl	80803a8 <_ZN10CloudClass9_functionEPKcPFi6StringE>
 8081076:	4955      	ldr	r1, [pc, #340]	; (80811cc <setup+0x260>)
 8081078:	4855      	ldr	r0, [pc, #340]	; (80811d0 <setup+0x264>)
 808107a:	f7ff f995 	bl	80803a8 <_ZN10CloudClass9_functionEPKcPFi6StringE>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 808107e:	2300      	movs	r3, #0
 8081080:	2201      	movs	r2, #1
 8081082:	4954      	ldr	r1, [pc, #336]	; (80811d4 <setup+0x268>)
 8081084:	4854      	ldr	r0, [pc, #336]	; (80811d8 <setup+0x26c>)
 8081086:	f003 fbaf 	bl	80847e8 <spark_variable>
  Particle.variable("accelThresh", accelThreshold);
 808108a:	4954      	ldr	r1, [pc, #336]	; (80811dc <setup+0x270>)
 808108c:	4854      	ldr	r0, [pc, #336]	; (80811e0 <setup+0x274>)
 808108e:	f7ff ff64 	bl	8080f5a <_ZN10CloudClass8variableIA12_cJRiEEEbRKT_DpOT0_>
 8081092:	2300      	movs	r3, #0
 8081094:	2202      	movs	r2, #2
 8081096:	4953      	ldr	r1, [pc, #332]	; (80811e4 <setup+0x278>)
 8081098:	4853      	ldr	r0, [pc, #332]	; (80811e8 <setup+0x27c>)
 808109a:	f003 fba5 	bl	80847e8 <spark_variable>
  Particle.variable("lastGPSPub", lastGPSPublish);
 808109e:	4953      	ldr	r1, [pc, #332]	; (80811ec <setup+0x280>)
 80810a0:	4853      	ldr	r0, [pc, #332]	; (80811f0 <setup+0x284>)
 80810a2:	f7ff ff5e 	bl	8080f62 <_ZN10CloudClass8variableIA11_cJRlEEEbRKT_DpOT0_>
  Particle.variable("lastACCPub", lastACCPublish);
 80810a6:	4953      	ldr	r1, [pc, #332]	; (80811f4 <setup+0x288>)
 80810a8:	4853      	ldr	r0, [pc, #332]	; (80811f8 <setup+0x28c>)
 80810aa:	f7ff ff5a 	bl	8080f62 <_ZN10CloudClass8variableIA11_cJRlEEEbRKT_DpOT0_>
  Particle.variable("lastDHTPub", lastDHTPublish);
 80810ae:	4953      	ldr	r1, [pc, #332]	; (80811fc <setup+0x290>)
 80810b0:	4853      	ldr	r0, [pc, #332]	; (8081200 <setup+0x294>)
 80810b2:	f7ff ff56 	bl	8080f62 <_ZN10CloudClass8variableIA11_cJRlEEEbRKT_DpOT0_>
  Particle.variable("delayGPSMin", delayGPSMinutes);
 80810b6:	4953      	ldr	r1, [pc, #332]	; (8081204 <setup+0x298>)
 80810b8:	4853      	ldr	r0, [pc, #332]	; (8081208 <setup+0x29c>)
 80810ba:	f7ff ff4e 	bl	8080f5a <_ZN10CloudClass8variableIA12_cJRiEEEbRKT_DpOT0_>
  Particle.variable("delayACCMin", delayACCMinutes);
 80810be:	4953      	ldr	r1, [pc, #332]	; (808120c <setup+0x2a0>)
 80810c0:	4853      	ldr	r0, [pc, #332]	; (8081210 <setup+0x2a4>)
 80810c2:	f7ff ff4a 	bl	8080f5a <_ZN10CloudClass8variableIA12_cJRiEEEbRKT_DpOT0_>
  Particle.variable("delayDHTMin", delayDHTMinutes);
 80810c6:	4953      	ldr	r1, [pc, #332]	; (8081214 <setup+0x2a8>)
 80810c8:	4853      	ldr	r0, [pc, #332]	; (8081218 <setup+0x2ac>)
 80810ca:	f7ff ff46 	bl	8080f5a <_ZN10CloudClass8variableIA12_cJRiEEEbRKT_DpOT0_>
 80810ce:	2300      	movs	r3, #0
 80810d0:	2201      	movs	r2, #1
 80810d2:	4952      	ldr	r1, [pc, #328]	; (808121c <setup+0x2b0>)
 80810d4:	4852      	ldr	r0, [pc, #328]	; (8081220 <setup+0x2b4>)
 80810d6:	f003 fb87 	bl	80847e8 <spark_variable>
    static bool on(system_event_t events, void(*handler)(system_event_t, int,void*)) {
        return !system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), nullptr);
    }

    static bool on(system_event_t events, void(*handler)(system_event_t, int)) {
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
 80810da:	2300      	movs	r3, #0
 80810dc:	2100      	movs	r1, #0
 80810de:	4a51      	ldr	r2, [pc, #324]	; (8081224 <setup+0x2b8>)
 80810e0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80810e4:	f003 fae0 	bl	80846a8 <system_subscribe_event>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 80810e8:	f003 fb96 	bl	8084818 <spark_cloud_flag_connect>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
 80810ec:	2200      	movs	r2, #0
 80810ee:	4c4e      	ldr	r4, [pc, #312]	; (8081228 <setup+0x2bc>)
 80810f0:	4611      	mov	r1, r2
 80810f2:	4620      	mov	r0, r4
 80810f4:	f7ff f95e 	bl	80803b4 <_ZN5Timer5_stopEjb>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
 80810f8:	68a0      	ldr	r0, [r4, #8]
 80810fa:	b140      	cbz	r0, 808110e <setup+0x1a2>
 80810fc:	2300      	movs	r3, #0
 80810fe:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8081102:	4619      	mov	r1, r3
 8081104:	e9cd 2300 	strd	r2, r3, [sp]
 8081108:	461a      	mov	r2, r3
 808110a:	f003 f90d 	bl	8084328 <os_timer_change>
	delay(2000); // DHT 22 minumum sampling period
 808110e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8081112:	f005 f9f1 	bl	80864f8 <delay>
	if ((transmittingData & SERIALSETUPDATA) == SERIALSETUPDATA)
 8081116:	4b33      	ldr	r3, [pc, #204]	; (80811e4 <setup+0x278>)
 8081118:	681b      	ldr	r3, [r3, #0]
 808111a:	015b      	lsls	r3, r3, #5
 808111c:	d504      	bpl.n	8081128 <setup+0x1bc>
		Serial.println("End of setup() function");
 808111e:	f005 ff23 	bl	8086f68 <_Z16_fetch_usbserialv>
 8081122:	4942      	ldr	r1, [pc, #264]	; (808122c <setup+0x2c0>)
 8081124:	f003 ffab 	bl	808507e <_ZN5Print7printlnEPKc>
}
 8081128:	b006      	add	sp, #24
 808112a:	bd10      	pop	{r4, pc}
 808112c:	200001cc 	.word	0x200001cc
 8081130:	20000180 	.word	0x20000180
 8081134:	20000228 	.word	0x20000228
 8081138:	080892ad 	.word	0x080892ad
 808113c:	20000174 	.word	0x20000174
 8081140:	20000144 	.word	0x20000144
 8081144:	200001e8 	.word	0x200001e8
 8081148:	20000154 	.word	0x20000154
 808114c:	2000022c 	.word	0x2000022c
 8081150:	080801a1 	.word	0x080801a1
 8081154:	080895ab 	.word	0x080895ab
 8081158:	0808020d 	.word	0x0808020d
 808115c:	08080135 	.word	0x08080135
 8081160:	08080111 	.word	0x08080111
 8081164:	0808961a 	.word	0x0808961a
 8081168:	080868cf 	.word	0x080868cf
 808116c:	080806d5 	.word	0x080806d5
 8081170:	0808950c 	.word	0x0808950c
 8081174:	08080151 	.word	0x08080151
 8081178:	08089513 	.word	0x08089513
 808117c:	08080165 	.word	0x08080165
 8081180:	0808951d 	.word	0x0808951d
 8081184:	08080179 	.word	0x08080179
 8081188:	08089527 	.word	0x08089527
 808118c:	0808018d 	.word	0x0808018d
 8081190:	08089531 	.word	0x08089531
 8081194:	080802ad 	.word	0x080802ad
 8081198:	0808953b 	.word	0x0808953b
 808119c:	080801b5 	.word	0x080801b5
 80811a0:	08089543 	.word	0x08089543
 80811a4:	08081295 	.word	0x08081295
 80811a8:	0808954c 	.word	0x0808954c
 80811ac:	08080bad 	.word	0x08080bad
 80811b0:	08089554 	.word	0x08089554
 80811b4:	08083ee1 	.word	0x08083ee1
 80811b8:	0808955e 	.word	0x0808955e
 80811bc:	08083f65 	.word	0x08083f65
 80811c0:	0808956a 	.word	0x0808956a
 80811c4:	0808402d 	.word	0x0808402d
 80811c8:	08089577 	.word	0x08089577
 80811cc:	080840b1 	.word	0x080840b1
 80811d0:	08089582 	.word	0x08089582
 80811d4:	20000011 	.word	0x20000011
 80811d8:	0808958e 	.word	0x0808958e
 80811dc:	20000000 	.word	0x20000000
 80811e0:	08089598 	.word	0x08089598
 80811e4:	20000014 	.word	0x20000014
 80811e8:	080895a4 	.word	0x080895a4
 80811ec:	200001a4 	.word	0x200001a4
 80811f0:	080895b1 	.word	0x080895b1
 80811f4:	2000019c 	.word	0x2000019c
 80811f8:	080895bc 	.word	0x080895bc
 80811fc:	200001a0 	.word	0x200001a0
 8081200:	080895c7 	.word	0x080895c7
 8081204:	2000000c 	.word	0x2000000c
 8081208:	080895d2 	.word	0x080895d2
 808120c:	20000004 	.word	0x20000004
 8081210:	080895de 	.word	0x080895de
 8081214:	20000008 	.word	0x20000008
 8081218:	080895ea 	.word	0x080895ea
 808121c:	20000010 	.word	0x20000010
 8081220:	080895f6 	.word	0x080895f6
 8081224:	08080361 	.word	0x08080361
 8081228:	20000248 	.word	0x20000248
 808122c:	08089602 	.word	0x08089602

08081230 <_ZN5Print7printlnIhLi0EEEjT_i>:
    size_t println(T b, int base = DEC) {
 8081230:	b538      	push	{r3, r4, r5, lr}
 8081232:	4605      	mov	r5, r0
    if (base == 0) {
 8081234:	b942      	cbnz	r2, 8081248 <_ZN5Print7printlnIhLi0EEEjT_i+0x18>
        return write(n);
 8081236:	6803      	ldr	r3, [r0, #0]
 8081238:	689b      	ldr	r3, [r3, #8]
 808123a:	4798      	blx	r3
        return printNumber(val, base) + t;
 808123c:	4604      	mov	r4, r0
        n += println();
 808123e:	4628      	mov	r0, r5
 8081240:	f003 ff11 	bl	8085066 <_ZN5Print7printlnEv>
    }
 8081244:	4420      	add	r0, r4
 8081246:	bd38      	pop	{r3, r4, r5, pc}
        return printNumber(val, base) + t;
 8081248:	b2d2      	uxtb	r2, r2
 808124a:	f003 ff22 	bl	8085092 <_ZN5Print11printNumberEmh>
 808124e:	e7f5      	b.n	808123c <_ZN5Print7printlnIhLi0EEEjT_i+0xc>

08081250 <_ZN5Print7printlnIlLi0EEEjT_i>:
    size_t println(T b, int base = DEC) {
 8081250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081252:	4605      	mov	r5, r0
 8081254:	460c      	mov	r4, r1
    if (base == 0) {
 8081256:	4616      	mov	r6, r2
 8081258:	b94a      	cbnz	r2, 808126e <_ZN5Print7printlnIlLi0EEEjT_i+0x1e>
        return write(n);
 808125a:	6803      	ldr	r3, [r0, #0]
 808125c:	b2c9      	uxtb	r1, r1
 808125e:	689b      	ldr	r3, [r3, #8]
 8081260:	4798      	blx	r3
 8081262:	4607      	mov	r7, r0
        n += println();
 8081264:	4628      	mov	r0, r5
 8081266:	f003 fefe 	bl	8085066 <_ZN5Print7printlnEv>
    }
 808126a:	4438      	add	r0, r7
 808126c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n < 0 && base == 10) {
 808126e:	2900      	cmp	r1, #0
 8081270:	da0c      	bge.n	808128c <_ZN5Print7printlnIlLi0EEEjT_i+0x3c>
 8081272:	2a0a      	cmp	r2, #10
 8081274:	d10a      	bne.n	808128c <_ZN5Print7printlnIlLi0EEEjT_i+0x3c>
            t = print('-');
 8081276:	212d      	movs	r1, #45	; 0x2d
 8081278:	f003 fef2 	bl	8085060 <_ZN5Print5printEc>
 808127c:	4607      	mov	r7, r0
            val = -n;
 808127e:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
 8081280:	4628      	mov	r0, r5
 8081282:	b2f2      	uxtb	r2, r6
 8081284:	f003 ff05 	bl	8085092 <_ZN5Print11printNumberEmh>
 8081288:	4407      	add	r7, r0
 808128a:	e7eb      	b.n	8081264 <_ZN5Print7printlnIlLi0EEEjT_i+0x14>
            val = n;
 808128c:	4621      	mov	r1, r4
        size_t t = 0;
 808128e:	2700      	movs	r7, #0
 8081290:	e7f6      	b.n	8081280 <_ZN5Print7printlnIlLi0EEEjT_i+0x30>
	...

08081294 <_Z7showAll6String>:
{
 8081294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bool initComplete = t.gpsInitComplete();
 8081298:	4cc9      	ldr	r4, [pc, #804]	; (80815c0 <_Z7showAll6String+0x32c>)
{
 808129a:	b093      	sub	sp, #76	; 0x4c
    bool initComplete = t.gpsInitComplete();
 808129c:	4620      	mov	r0, r4
 808129e:	f001 fc93 	bl	8082bc8 <_ZN13AssetTracker215gpsInitCompleteEv>
 80812a2:	4683      	mov	fp, r0
    uint8_t hour = t.getHour(); // Time is UTC
 80812a4:	4620      	mov	r0, r4
 80812a6:	f001 fbf5 	bl	8082a94 <_ZN13AssetTracker27getHourEv>
 80812aa:	4682      	mov	sl, r0
    uint8_t minute = t.getMinute();
 80812ac:	4620      	mov	r0, r4
 80812ae:	f001 fbf7 	bl	8082aa0 <_ZN13AssetTracker29getMinuteEv>
 80812b2:	4681      	mov	r9, r0
    uint8_t seconds = t.getSeconds();
 80812b4:	4620      	mov	r0, r4
 80812b6:	f001 fbf9 	bl	8082aac <_ZN13AssetTracker210getSecondsEv>
 80812ba:	4680      	mov	r8, r0
    uint8_t month = t.getMonth();
 80812bc:	4620      	mov	r0, r4
 80812be:	f001 fc07 	bl	8082ad0 <_ZN13AssetTracker28getMonthEv>
 80812c2:	4607      	mov	r7, r0
    uint8_t day = t.getDay();
 80812c4:	4620      	mov	r0, r4
 80812c6:	f001 fc09 	bl	8082adc <_ZN13AssetTracker26getDayEv>
 80812ca:	4606      	mov	r6, r0
    uint16_t year = t.getYear();
 80812cc:	4620      	mov	r0, r4
 80812ce:	f001 fbf9 	bl	8082ac4 <_ZN13AssetTracker27getYearEv>
 80812d2:	4605      	mov	r5, r0
    uint16_t milliseconds = t.getMilliseconds(); // Since last measurement
 80812d4:	4620      	mov	r0, r4
 80812d6:	f001 fbef 	bl	8082ab8 <_ZN13AssetTracker215getMillisecondsEv>
 80812da:	9000      	str	r0, [sp, #0]
    float latitude = t.readLat(); // degrees
 80812dc:	4620      	mov	r0, r4
 80812de:	f001 fb89 	bl	80829f4 <_ZN13AssetTracker27readLatEv>
 80812e2:	9001      	str	r0, [sp, #4]
    float longitude = t.readLon(); // degrees
 80812e4:	4620      	mov	r0, r4
 80812e6:	f001 fb8b 	bl	8082a00 <_ZN13AssetTracker27readLonEv>
 80812ea:	9002      	str	r0, [sp, #8]
    float latitudeDegrees = t.readLatDeg(); // degrees
 80812ec:	4620      	mov	r0, r4
 80812ee:	f001 fb8d 	bl	8082a0c <_ZN13AssetTracker210readLatDegEv>
 80812f2:	9003      	str	r0, [sp, #12]
    float longitudeDegrees = t.readLonDeg(); // degrees
 80812f4:	4620      	mov	r0, r4
 80812f6:	f001 fb8f 	bl	8082a18 <_ZN13AssetTracker210readLonDegEv>
 80812fa:	9004      	str	r0, [sp, #16]
    float geoidheight = t.getGeoIdHeight(); // Height above ellipsoid, mm
 80812fc:	4620      	mov	r0, r4
 80812fe:	f001 fc05 	bl	8082b0c <_ZN13AssetTracker214getGeoIdHeightEv>
 8081302:	9005      	str	r0, [sp, #20]
    float altitude = t.getAltitude(); // Height above mean sea level, mm
 8081304:	4620      	mov	r0, r4
 8081306:	f001 fc07 	bl	8082b18 <_ZN13AssetTracker211getAltitudeEv>
 808130a:	9006      	str	r0, [sp, #24]
    float speed = t.getSpeed();  // m/s
 808130c:	4620      	mov	r0, r4
 808130e:	f001 fbf7 	bl	8082b00 <_ZN13AssetTracker28getSpeedEv>
 8081312:	9007      	str	r0, [sp, #28]
    uint8_t fixquality = t.getFixQuality(); // 0:no fix,1:dead rec,2:2d,3:3d,4:gnss+dead rec,5:time only
 8081314:	4620      	mov	r0, r4
 8081316:	f001 fbed 	bl	8082af4 <_ZN13AssetTracker213getFixQualityEv>
 808131a:	900f      	str	r0, [sp, #60]	; 0x3c
    uint8_t satellites = t.getSatellites(); // how many
 808131c:	4620      	mov	r0, r4
 808131e:	f001 fbe3 	bl	8082ae8 <_ZN13AssetTracker213getSatellitesEv>
 8081322:	9010      	str	r0, [sp, #64]	; 0x40
    uint32_t horzAcc = t.getHaccuracy(); // estimate, mm
 8081324:	4620      	mov	r0, r4
 8081326:	f001 fb85 	bl	8082a34 <_ZN13AssetTracker212getHaccuracyEv>
 808132a:	9008      	str	r0, [sp, #32]
    uint32_t vertAcc = t.getVaccuracy(); // estimate, mm
 808132c:	4620      	mov	r0, r4
 808132e:	f001 fb87 	bl	8082a40 <_ZN13AssetTracker212getVaccuracyEv>
 8081332:	9009      	str	r0, [sp, #36]	; 0x24
    int32_t velN = t.getVelN(); // North velocity, mm/s
 8081334:	4620      	mov	r0, r4
 8081336:	f001 fb89 	bl	8082a4c <_ZN13AssetTracker27getVelNEv>
 808133a:	900a      	str	r0, [sp, #40]	; 0x28
    int32_t velE = t.getVelE(); // East velocity, mm/s
 808133c:	4620      	mov	r0, r4
 808133e:	f001 fb8b 	bl	8082a58 <_ZN13AssetTracker27getVelEEv>
 8081342:	900b      	str	r0, [sp, #44]	; 0x2c
    int32_t velD = t.getVelD(); // Down velocity, mm/s
 8081344:	4620      	mov	r0, r4
 8081346:	f001 fb8d 	bl	8082a64 <_ZN13AssetTracker27getVelDEv>
 808134a:	900c      	str	r0, [sp, #48]	; 0x30
    int32_t gSpeed = t.getGspeed(); // Ground speed, mm/s
 808134c:	4620      	mov	r0, r4
 808134e:	f001 fb9b 	bl	8082a88 <_ZN13AssetTracker29getGspeedEv>
 8081352:	900d      	str	r0, [sp, #52]	; 0x34
    int32_t odoTrip = t.getOdoTrip(); // m
 8081354:	4620      	mov	r0, r4
 8081356:	f001 fb8b 	bl	8082a70 <_ZN13AssetTracker210getOdoTripEv>
 808135a:	900e      	str	r0, [sp, #56]	; 0x38
    int32_t odoTotal = t.getOdoTotal(); // m
 808135c:	4620      	mov	r0, r4
 808135e:	f001 fb8d 	bl	8082a7c <_ZN13AssetTracker211getOdoTotalEv>
 8081362:	4604      	mov	r4, r0
    Serial.print("initComplete: ");
 8081364:	f005 fe00 	bl	8086f68 <_Z16_fetch_usbserialv>
 8081368:	4996      	ldr	r1, [pc, #600]	; (80815c4 <_Z7showAll6String+0x330>)
 808136a:	f003 fe75 	bl	8085058 <_ZN5Print5printEPKc>
    Serial.println(initComplete);
 808136e:	f005 fdfb 	bl	8086f68 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
 8081372:	220a      	movs	r2, #10
 8081374:	4659      	mov	r1, fp
 8081376:	9011      	str	r0, [sp, #68]	; 0x44
 8081378:	f003 fe8b 	bl	8085092 <_ZN5Print11printNumberEmh>
        n += println();
 808137c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 808137e:	4618      	mov	r0, r3
 8081380:	f003 fe71 	bl	8085066 <_ZN5Print7printlnEv>
    Serial.print("hour: ");
 8081384:	f005 fdf0 	bl	8086f68 <_Z16_fetch_usbserialv>
 8081388:	498f      	ldr	r1, [pc, #572]	; (80815c8 <_Z7showAll6String+0x334>)
 808138a:	f003 fe65 	bl	8085058 <_ZN5Print5printEPKc>
    Serial.println(hour);
 808138e:	f005 fdeb 	bl	8086f68 <_Z16_fetch_usbserialv>
 8081392:	220a      	movs	r2, #10
 8081394:	4651      	mov	r1, sl
 8081396:	f7ff ff4b 	bl	8081230 <_ZN5Print7printlnIhLi0EEEjT_i>
    Serial.print("minute: ");
 808139a:	f005 fde5 	bl	8086f68 <_Z16_fetch_usbserialv>
 808139e:	498b      	ldr	r1, [pc, #556]	; (80815cc <_Z7showAll6String+0x338>)
 80813a0:	f003 fe5a 	bl	8085058 <_ZN5Print5printEPKc>
    Serial.println(minute);
 80813a4:	f005 fde0 	bl	8086f68 <_Z16_fetch_usbserialv>
 80813a8:	220a      	movs	r2, #10
 80813aa:	4649      	mov	r1, r9
 80813ac:	f7ff ff40 	bl	8081230 <_ZN5Print7printlnIhLi0EEEjT_i>
    Serial.print("seconds: ");
 80813b0:	f005 fdda 	bl	8086f68 <_Z16_fetch_usbserialv>
 80813b4:	4986      	ldr	r1, [pc, #536]	; (80815d0 <_Z7showAll6String+0x33c>)
 80813b6:	f003 fe4f 	bl	8085058 <_ZN5Print5printEPKc>
    Serial.println(seconds);
 80813ba:	f005 fdd5 	bl	8086f68 <_Z16_fetch_usbserialv>
 80813be:	220a      	movs	r2, #10
 80813c0:	4641      	mov	r1, r8
 80813c2:	f7ff ff35 	bl	8081230 <_ZN5Print7printlnIhLi0EEEjT_i>
    Serial.print("month: ");
 80813c6:	f005 fdcf 	bl	8086f68 <_Z16_fetch_usbserialv>
 80813ca:	4982      	ldr	r1, [pc, #520]	; (80815d4 <_Z7showAll6String+0x340>)
 80813cc:	f003 fe44 	bl	8085058 <_ZN5Print5printEPKc>
    Serial.println(month);
 80813d0:	f005 fdca 	bl	8086f68 <_Z16_fetch_usbserialv>
 80813d4:	220a      	movs	r2, #10
 80813d6:	4639      	mov	r1, r7
 80813d8:	f7ff ff2a 	bl	8081230 <_ZN5Print7printlnIhLi0EEEjT_i>
    Serial.print("day: ");
 80813dc:	f005 fdc4 	bl	8086f68 <_Z16_fetch_usbserialv>
 80813e0:	497d      	ldr	r1, [pc, #500]	; (80815d8 <_Z7showAll6String+0x344>)
 80813e2:	f003 fe39 	bl	8085058 <_ZN5Print5printEPKc>
    Serial.println(day);
 80813e6:	f005 fdbf 	bl	8086f68 <_Z16_fetch_usbserialv>
 80813ea:	220a      	movs	r2, #10
 80813ec:	4631      	mov	r1, r6
 80813ee:	f7ff ff1f 	bl	8081230 <_ZN5Print7printlnIhLi0EEEjT_i>
    Serial.print("year: ");
 80813f2:	f005 fdb9 	bl	8086f68 <_Z16_fetch_usbserialv>
 80813f6:	4979      	ldr	r1, [pc, #484]	; (80815dc <_Z7showAll6String+0x348>)
 80813f8:	f003 fe2e 	bl	8085058 <_ZN5Print5printEPKc>
    Serial.println(year);
 80813fc:	f005 fdb4 	bl	8086f68 <_Z16_fetch_usbserialv>
 8081400:	4606      	mov	r6, r0
        return printNumber(val, base) + t;
 8081402:	220a      	movs	r2, #10
 8081404:	4629      	mov	r1, r5
 8081406:	f003 fe44 	bl	8085092 <_ZN5Print11printNumberEmh>
        n += println();
 808140a:	4630      	mov	r0, r6
 808140c:	f003 fe2b 	bl	8085066 <_ZN5Print7printlnEv>
    Serial.print("milliseconds: ");
 8081410:	f005 fdaa 	bl	8086f68 <_Z16_fetch_usbserialv>
 8081414:	4972      	ldr	r1, [pc, #456]	; (80815e0 <_Z7showAll6String+0x34c>)
 8081416:	f003 fe1f 	bl	8085058 <_ZN5Print5printEPKc>
    Serial.println(milliseconds);
 808141a:	f005 fda5 	bl	8086f68 <_Z16_fetch_usbserialv>
 808141e:	4605      	mov	r5, r0
        return printNumber(val, base) + t;
 8081420:	220a      	movs	r2, #10
 8081422:	f8bd 1000 	ldrh.w	r1, [sp]
 8081426:	f003 fe34 	bl	8085092 <_ZN5Print11printNumberEmh>
        n += println();
 808142a:	4628      	mov	r0, r5
 808142c:	f003 fe1b 	bl	8085066 <_ZN5Print7printlnEv>
    Serial.print("latitude: ");
 8081430:	f005 fd9a 	bl	8086f68 <_Z16_fetch_usbserialv>
 8081434:	496b      	ldr	r1, [pc, #428]	; (80815e4 <_Z7showAll6String+0x350>)
 8081436:	f003 fe0f 	bl	8085058 <_ZN5Print5printEPKc>
    Serial.println(latitude);
 808143a:	f005 fd95 	bl	8086f68 <_Z16_fetch_usbserialv>
 808143e:	2202      	movs	r2, #2
 8081440:	9901      	ldr	r1, [sp, #4]
 8081442:	f003 ff11 	bl	8085268 <_ZN5Print7printlnEfi>
    Serial.print("longitude: ");
 8081446:	f005 fd8f 	bl	8086f68 <_Z16_fetch_usbserialv>
 808144a:	4967      	ldr	r1, [pc, #412]	; (80815e8 <_Z7showAll6String+0x354>)
 808144c:	f003 fe04 	bl	8085058 <_ZN5Print5printEPKc>
    Serial.println(longitude);
 8081450:	f005 fd8a 	bl	8086f68 <_Z16_fetch_usbserialv>
 8081454:	2202      	movs	r2, #2
 8081456:	9902      	ldr	r1, [sp, #8]
 8081458:	f003 ff06 	bl	8085268 <_ZN5Print7printlnEfi>
    Serial.print("latitudeDegrees: ");
 808145c:	f005 fd84 	bl	8086f68 <_Z16_fetch_usbserialv>
 8081460:	4962      	ldr	r1, [pc, #392]	; (80815ec <_Z7showAll6String+0x358>)
 8081462:	f003 fdf9 	bl	8085058 <_ZN5Print5printEPKc>
    Serial.println(latitudeDegrees);
 8081466:	f005 fd7f 	bl	8086f68 <_Z16_fetch_usbserialv>
 808146a:	2202      	movs	r2, #2
 808146c:	9903      	ldr	r1, [sp, #12]
 808146e:	f003 fefb 	bl	8085268 <_ZN5Print7printlnEfi>
    Serial.print("longitudeDegrees: ");
 8081472:	f005 fd79 	bl	8086f68 <_Z16_fetch_usbserialv>
 8081476:	495e      	ldr	r1, [pc, #376]	; (80815f0 <_Z7showAll6String+0x35c>)
 8081478:	f003 fdee 	bl	8085058 <_ZN5Print5printEPKc>
    Serial.println(longitudeDegrees);
 808147c:	f005 fd74 	bl	8086f68 <_Z16_fetch_usbserialv>
 8081480:	2202      	movs	r2, #2
 8081482:	9904      	ldr	r1, [sp, #16]
 8081484:	f003 fef0 	bl	8085268 <_ZN5Print7printlnEfi>
    Serial.print("geoidheight: ");
 8081488:	f005 fd6e 	bl	8086f68 <_Z16_fetch_usbserialv>
 808148c:	4959      	ldr	r1, [pc, #356]	; (80815f4 <_Z7showAll6String+0x360>)
 808148e:	f003 fde3 	bl	8085058 <_ZN5Print5printEPKc>
    Serial.println(geoidheight);
 8081492:	f005 fd69 	bl	8086f68 <_Z16_fetch_usbserialv>
 8081496:	2202      	movs	r2, #2
 8081498:	9905      	ldr	r1, [sp, #20]
 808149a:	f003 fee5 	bl	8085268 <_ZN5Print7printlnEfi>
    Serial.print("altitude: ");
 808149e:	f005 fd63 	bl	8086f68 <_Z16_fetch_usbserialv>
 80814a2:	4955      	ldr	r1, [pc, #340]	; (80815f8 <_Z7showAll6String+0x364>)
 80814a4:	f003 fdd8 	bl	8085058 <_ZN5Print5printEPKc>
    Serial.println(altitude);
 80814a8:	f005 fd5e 	bl	8086f68 <_Z16_fetch_usbserialv>
 80814ac:	2202      	movs	r2, #2
 80814ae:	9906      	ldr	r1, [sp, #24]
 80814b0:	f003 feda 	bl	8085268 <_ZN5Print7printlnEfi>
    Serial.print("speed: ");
 80814b4:	f005 fd58 	bl	8086f68 <_Z16_fetch_usbserialv>
 80814b8:	4950      	ldr	r1, [pc, #320]	; (80815fc <_Z7showAll6String+0x368>)
 80814ba:	f003 fdcd 	bl	8085058 <_ZN5Print5printEPKc>
    Serial.println(speed);
 80814be:	f005 fd53 	bl	8086f68 <_Z16_fetch_usbserialv>
 80814c2:	2202      	movs	r2, #2
 80814c4:	9907      	ldr	r1, [sp, #28]
 80814c6:	f003 fecf 	bl	8085268 <_ZN5Print7printlnEfi>
    Serial.print("fixquality: ");
 80814ca:	f005 fd4d 	bl	8086f68 <_Z16_fetch_usbserialv>
 80814ce:	494c      	ldr	r1, [pc, #304]	; (8081600 <_Z7showAll6String+0x36c>)
 80814d0:	f003 fdc2 	bl	8085058 <_ZN5Print5printEPKc>
    Serial.println(fixquality);
 80814d4:	f005 fd48 	bl	8086f68 <_Z16_fetch_usbserialv>
 80814d8:	220a      	movs	r2, #10
 80814da:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80814dc:	f7ff fea8 	bl	8081230 <_ZN5Print7printlnIhLi0EEEjT_i>
    Serial.print("satellites: ");
 80814e0:	f005 fd42 	bl	8086f68 <_Z16_fetch_usbserialv>
 80814e4:	4947      	ldr	r1, [pc, #284]	; (8081604 <_Z7showAll6String+0x370>)
 80814e6:	f003 fdb7 	bl	8085058 <_ZN5Print5printEPKc>
    Serial.println(satellites);
 80814ea:	f005 fd3d 	bl	8086f68 <_Z16_fetch_usbserialv>
 80814ee:	220a      	movs	r2, #10
 80814f0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80814f2:	f7ff fe9d 	bl	8081230 <_ZN5Print7printlnIhLi0EEEjT_i>
    Serial.print("horzAcc: ");
 80814f6:	f005 fd37 	bl	8086f68 <_Z16_fetch_usbserialv>
 80814fa:	4943      	ldr	r1, [pc, #268]	; (8081608 <_Z7showAll6String+0x374>)
 80814fc:	f003 fdac 	bl	8085058 <_ZN5Print5printEPKc>
    Serial.println(horzAcc);
 8081500:	f005 fd32 	bl	8086f68 <_Z16_fetch_usbserialv>
 8081504:	4605      	mov	r5, r0
        return printNumber(val, base) + t;
 8081506:	220a      	movs	r2, #10
 8081508:	9908      	ldr	r1, [sp, #32]
 808150a:	f003 fdc2 	bl	8085092 <_ZN5Print11printNumberEmh>
        n += println();
 808150e:	4628      	mov	r0, r5
 8081510:	f003 fda9 	bl	8085066 <_ZN5Print7printlnEv>
    Serial.print("vertAcc: ");
 8081514:	f005 fd28 	bl	8086f68 <_Z16_fetch_usbserialv>
 8081518:	493c      	ldr	r1, [pc, #240]	; (808160c <_Z7showAll6String+0x378>)
 808151a:	f003 fd9d 	bl	8085058 <_ZN5Print5printEPKc>
    Serial.println(vertAcc);
 808151e:	f005 fd23 	bl	8086f68 <_Z16_fetch_usbserialv>
 8081522:	4605      	mov	r5, r0
        return printNumber(val, base) + t;
 8081524:	220a      	movs	r2, #10
 8081526:	9909      	ldr	r1, [sp, #36]	; 0x24
 8081528:	f003 fdb3 	bl	8085092 <_ZN5Print11printNumberEmh>
        n += println();
 808152c:	4628      	mov	r0, r5
 808152e:	f003 fd9a 	bl	8085066 <_ZN5Print7printlnEv>
    Serial.print("velN: ");
 8081532:	f005 fd19 	bl	8086f68 <_Z16_fetch_usbserialv>
 8081536:	4936      	ldr	r1, [pc, #216]	; (8081610 <_Z7showAll6String+0x37c>)
 8081538:	f003 fd8e 	bl	8085058 <_ZN5Print5printEPKc>
    Serial.println(velN);
 808153c:	f005 fd14 	bl	8086f68 <_Z16_fetch_usbserialv>
 8081540:	220a      	movs	r2, #10
 8081542:	990a      	ldr	r1, [sp, #40]	; 0x28
 8081544:	f7ff fe84 	bl	8081250 <_ZN5Print7printlnIlLi0EEEjT_i>
    Serial.print("velE: ");
 8081548:	f005 fd0e 	bl	8086f68 <_Z16_fetch_usbserialv>
 808154c:	4931      	ldr	r1, [pc, #196]	; (8081614 <_Z7showAll6String+0x380>)
 808154e:	f003 fd83 	bl	8085058 <_ZN5Print5printEPKc>
    Serial.println(velE);
 8081552:	f005 fd09 	bl	8086f68 <_Z16_fetch_usbserialv>
 8081556:	220a      	movs	r2, #10
 8081558:	990b      	ldr	r1, [sp, #44]	; 0x2c
 808155a:	f7ff fe79 	bl	8081250 <_ZN5Print7printlnIlLi0EEEjT_i>
    Serial.print("velD: ");
 808155e:	f005 fd03 	bl	8086f68 <_Z16_fetch_usbserialv>
 8081562:	492d      	ldr	r1, [pc, #180]	; (8081618 <_Z7showAll6String+0x384>)
 8081564:	f003 fd78 	bl	8085058 <_ZN5Print5printEPKc>
    Serial.println(velD);
 8081568:	f005 fcfe 	bl	8086f68 <_Z16_fetch_usbserialv>
 808156c:	220a      	movs	r2, #10
 808156e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8081570:	f7ff fe6e 	bl	8081250 <_ZN5Print7printlnIlLi0EEEjT_i>
    Serial.print("gSpeed: ");
 8081574:	f005 fcf8 	bl	8086f68 <_Z16_fetch_usbserialv>
 8081578:	4928      	ldr	r1, [pc, #160]	; (808161c <_Z7showAll6String+0x388>)
 808157a:	f003 fd6d 	bl	8085058 <_ZN5Print5printEPKc>
    Serial.println(gSpeed);
 808157e:	f005 fcf3 	bl	8086f68 <_Z16_fetch_usbserialv>
 8081582:	220a      	movs	r2, #10
 8081584:	990d      	ldr	r1, [sp, #52]	; 0x34
 8081586:	f7ff fe63 	bl	8081250 <_ZN5Print7printlnIlLi0EEEjT_i>
    Serial.print("odoTrip: ");
 808158a:	f005 fced 	bl	8086f68 <_Z16_fetch_usbserialv>
 808158e:	4924      	ldr	r1, [pc, #144]	; (8081620 <_Z7showAll6String+0x38c>)
 8081590:	f003 fd62 	bl	8085058 <_ZN5Print5printEPKc>
    Serial.println(odoTrip);
 8081594:	f005 fce8 	bl	8086f68 <_Z16_fetch_usbserialv>
 8081598:	220a      	movs	r2, #10
 808159a:	990e      	ldr	r1, [sp, #56]	; 0x38
 808159c:	f7ff fe58 	bl	8081250 <_ZN5Print7printlnIlLi0EEEjT_i>
    Serial.print("odoTotal: ");
 80815a0:	f005 fce2 	bl	8086f68 <_Z16_fetch_usbserialv>
 80815a4:	491f      	ldr	r1, [pc, #124]	; (8081624 <_Z7showAll6String+0x390>)
 80815a6:	f003 fd57 	bl	8085058 <_ZN5Print5printEPKc>
    Serial.println(odoTotal);
 80815aa:	f005 fcdd 	bl	8086f68 <_Z16_fetch_usbserialv>
 80815ae:	220a      	movs	r2, #10
 80815b0:	4621      	mov	r1, r4
 80815b2:	f7ff fe4d 	bl	8081250 <_ZN5Print7printlnIlLi0EEEjT_i>
}
 80815b6:	2001      	movs	r0, #1
 80815b8:	b013      	add	sp, #76	; 0x4c
 80815ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80815be:	bf00      	nop
 80815c0:	20000228 	.word	0x20000228
 80815c4:	08089624 	.word	0x08089624
 80815c8:	08089633 	.word	0x08089633
 80815cc:	0808963a 	.word	0x0808963a
 80815d0:	0808965d 	.word	0x0808965d
 80815d4:	08089643 	.word	0x08089643
 80815d8:	0808964b 	.word	0x0808964b
 80815dc:	08089651 	.word	0x08089651
 80815e0:	08089658 	.word	0x08089658
 80815e4:	08089667 	.word	0x08089667
 80815e8:	08089672 	.word	0x08089672
 80815ec:	0808967e 	.word	0x0808967e
 80815f0:	08089690 	.word	0x08089690
 80815f4:	080896a3 	.word	0x080896a3
 80815f8:	080896b1 	.word	0x080896b1
 80815fc:	080896bc 	.word	0x080896bc
 8081600:	080896c4 	.word	0x080896c4
 8081604:	080896d1 	.word	0x080896d1
 8081608:	080896de 	.word	0x080896de
 808160c:	080896e8 	.word	0x080896e8
 8081610:	080896f2 	.word	0x080896f2
 8081614:	080896f9 	.word	0x080896f9
 8081618:	08089700 	.word	0x08089700
 808161c:	08089707 	.word	0x08089707
 8081620:	08089710 	.word	0x08089710
 8081624:	0808971a 	.word	0x0808971a

08081628 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 8081628:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 808162a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808162c:	4604      	mov	r4, r0
 808162e:	460d      	mov	r5, r1
 8081630:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 8081632:	d916      	bls.n	8081662 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 8081634:	4290      	cmp	r0, r2
 8081636:	d215      	bcs.n	8081664 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 8081638:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 808163c:	1a75      	subs	r5, r6, r1
 808163e:	f1a1 0714 	sub.w	r7, r1, #20
 8081642:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 8081644:	42b7      	cmp	r7, r6
 8081646:	d01c      	beq.n	8081682 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 8081648:	b12c      	cbz	r4, 8081656 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 808164a:	4631      	mov	r1, r6
 808164c:	4620      	mov	r0, r4
 808164e:	f003 fbc5 	bl	8084ddc <_ZN6StringC1EOS_>
 8081652:	7c33      	ldrb	r3, [r6, #16]
 8081654:	7423      	strb	r3, [r4, #16]
 8081656:	4630      	mov	r0, r6
 8081658:	f003 fb46 	bl	8084ce8 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 808165c:	3e14      	subs	r6, #20
 808165e:	3c14      	subs	r4, #20
 8081660:	e7f0      	b.n	8081644 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 8081662:	d00e      	beq.n	8081682 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 8081664:	42b5      	cmp	r5, r6
 8081666:	d00c      	beq.n	8081682 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 8081668:	b12c      	cbz	r4, 8081676 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 808166a:	4629      	mov	r1, r5
 808166c:	4620      	mov	r0, r4
 808166e:	f003 fbb5 	bl	8084ddc <_ZN6StringC1EOS_>
 8081672:	7c2b      	ldrb	r3, [r5, #16]
 8081674:	7423      	strb	r3, [r4, #16]
 8081676:	4628      	mov	r0, r5
 8081678:	f003 fb36 	bl	8084ce8 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 808167c:	3514      	adds	r5, #20
 808167e:	3414      	adds	r4, #20
 8081680:	e7f0      	b.n	8081664 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 8081682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081684 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 8081684:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 8081686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 808168a:	e9c0 3300 	strd	r3, r3, [r0]
 808168e:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 8081690:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 8081692:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 8081694:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 8081696:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 8081698:	dd24      	ble.n	80816e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 808169a:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 808169e:	fb08 f007 	mul.w	r0, r8, r7
 80816a2:	f003 f8f9 	bl	8084898 <malloc>
            if (!d) {
 80816a6:	4605      	mov	r5, r0
 80816a8:	b1e0      	cbz	r0, 80816e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 80816aa:	e9d4 1200 	ldrd	r1, r2, [r4]
 80816ae:	fb08 1202 	mla	r2, r8, r2, r1
 80816b2:	f7ff ffb9 	bl	8081628 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 80816b6:	6820      	ldr	r0, [r4, #0]
 80816b8:	f003 f8f6 	bl	80848a8 <free>
        data_ = d;
 80816bc:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 80816be:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 80816c0:	e9d6 7300 	ldrd	r7, r3, [r6]
 80816c4:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 80816c8:	45b8      	cmp	r8, r7
 80816ca:	d009      	beq.n	80816e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 80816cc:	4639      	mov	r1, r7
 80816ce:	4628      	mov	r0, r5
 80816d0:	f003 fb9e 	bl	8084e10 <_ZN6StringC1ERKS_>
 80816d4:	7c3b      	ldrb	r3, [r7, #16]
 80816d6:	3514      	adds	r5, #20
 80816d8:	f805 3c04 	strb.w	r3, [r5, #-4]
 80816dc:	3714      	adds	r7, #20
 80816de:	e7f3      	b.n	80816c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 80816e0:	6873      	ldr	r3, [r6, #4]
 80816e2:	6063      	str	r3, [r4, #4]
}
 80816e4:	4620      	mov	r0, r4
 80816e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080816ec <_GLOBAL__sub_I_logHandler>:
}
 80816ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        val_(val) {
 80816f0:	f04f 0a01 	mov.w	sl, #1
        capacity_(0) {
 80816f4:	2400      	movs	r4, #0
 80816f6:	4b78      	ldr	r3, [pc, #480]	; (80818d8 <_GLOBAL__sub_I_logHandler+0x1ec>)
 80816f8:	b090      	sub	sp, #64	; 0x40
 80816fa:	f883 a000 	strb.w	sl, [r3]
 80816fe:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8081702:	9405      	str	r4, [sp, #20]
            StreamLogHandler(Serial, level, filters) {
 8081704:	f005 fc30 	bl	8086f68 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
 8081708:	4e74      	ldr	r6, [pc, #464]	; (80818dc <_GLOBAL__sub_I_logHandler+0x1f0>)
 808170a:	4605      	mov	r5, r0
 808170c:	46b1      	mov	r9, r6
        stream_(&stream) {
 808170e:	f10d 0824 	add.w	r8, sp, #36	; 0x24
 8081712:	a903      	add	r1, sp, #12
 8081714:	a806      	add	r0, sp, #24
 8081716:	f7ff ffb5 	bl	8081684 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 808171a:	a906      	add	r1, sp, #24
 808171c:	4640      	mov	r0, r8
 808171e:	f7ff ffb1 	bl	8081684 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 8081722:	4b6f      	ldr	r3, [pc, #444]	; (80818e0 <_GLOBAL__sub_I_logHandler+0x1f4>)
 8081724:	af0c      	add	r7, sp, #48	; 0x30
 8081726:	f849 3b04 	str.w	r3, [r9], #4
 808172a:	4641      	mov	r1, r8
 808172c:	4638      	mov	r0, r7
 808172e:	f7ff ffa9 	bl	8081684 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 8081732:	463a      	mov	r2, r7
 8081734:	211e      	movs	r1, #30
 8081736:	4648      	mov	r0, r9
 8081738:	f004 fa94 	bl	8085c64 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 808173c:	4638      	mov	r0, r7
 808173e:	f7ff fbf9 	bl	8080f34 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 8081742:	4640      	mov	r0, r8
 8081744:	f7ff fbf6 	bl	8080f34 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 8081748:	4b66      	ldr	r3, [pc, #408]	; (80818e4 <_GLOBAL__sub_I_logHandler+0x1f8>)
 808174a:	6235      	str	r5, [r6, #32]
 808174c:	6033      	str	r3, [r6, #0]
 808174e:	a806      	add	r0, sp, #24
 8081750:	f7ff fbf0 	bl	8080f34 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 8081754:	4b64      	ldr	r3, [pc, #400]	; (80818e8 <_GLOBAL__sub_I_logHandler+0x1fc>)
SerialLogHandler logHandler;
 8081756:	4d65      	ldr	r5, [pc, #404]	; (80818ec <_GLOBAL__sub_I_logHandler+0x200>)
 8081758:	6033      	str	r3, [r6, #0]
        Serial.begin();
 808175a:	f005 fc05 	bl	8086f68 <_Z16_fetch_usbserialv>
 808175e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8081762:	f005 fbf1 	bl	8086f48 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 8081766:	f003 ff0f 	bl	8085588 <_ZN5spark10LogManager8instanceEv>
 808176a:	4631      	mov	r1, r6
 808176c:	f004 fa0d 	bl	8085b8a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
 8081770:	a803      	add	r0, sp, #12
 8081772:	f7ff fbdf 	bl	8080f34 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 8081776:	462a      	mov	r2, r5
 8081778:	4630      	mov	r0, r6
 808177a:	495d      	ldr	r1, [pc, #372]	; (80818f0 <_GLOBAL__sub_I_logHandler+0x204>)
 808177c:	f006 fa54 	bl	8087c28 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);
 8081780:	4621      	mov	r1, r4
 8081782:	4650      	mov	r0, sl
 8081784:	f002 ff98 	bl	80846b8 <system_thread_set_state>
              error_(SYSTEM_ERROR_NONE) {
 8081788:	4e5a      	ldr	r6, [pc, #360]	; (80818f4 <_GLOBAL__sub_I_logHandler+0x208>)
    SleepResult() {}
 808178a:	4b5b      	ldr	r3, [pc, #364]	; (80818f8 <_GLOBAL__sub_I_logHandler+0x20c>)
              error_(SYSTEM_ERROR_NONE) {
 808178c:	6034      	str	r4, [r6, #0]
    SleepResult() {}
 808178e:	60b3      	str	r3, [r6, #8]
              error_(SYSTEM_ERROR_NONE) {
 8081790:	80b4      	strh	r4, [r6, #4]
    SleepResult() {}
 8081792:	71b4      	strb	r4, [r6, #6]
        set_system_mode(mode);
 8081794:	2002      	movs	r0, #2
 8081796:	f002 ff6f 	bl	8084678 <set_system_mode>
SYSTEM_MODE(SEMI_AUTOMATIC);
 808179a:	4630      	mov	r0, r6
ConnectionEvents connectionEvents("connEventStats");
 808179c:	4e57      	ldr	r6, [pc, #348]	; (80818fc <_GLOBAL__sub_I_logHandler+0x210>)
SYSTEM_MODE(SEMI_AUTOMATIC);
 808179e:	462a      	mov	r2, r5
 80817a0:	4957      	ldr	r1, [pc, #348]	; (8081900 <_GLOBAL__sub_I_logHandler+0x214>)
 80817a2:	f006 fa41 	bl	8087c28 <__aeabi_atexit>
ConnectionEvents connectionEvents("connEventStats");
 80817a6:	4630      	mov	r0, r6
 80817a8:	4956      	ldr	r1, [pc, #344]	; (8081904 <_GLOBAL__sub_I_logHandler+0x218>)
 80817aa:	f000 ff75 	bl	8082698 <_ZN16ConnectionEventsC1EPKc>
 80817ae:	462a      	mov	r2, r5
 80817b0:	4955      	ldr	r1, [pc, #340]	; (8081908 <_GLOBAL__sub_I_logHandler+0x21c>)
 80817b2:	4630      	mov	r0, r6
 80817b4:	f006 fa38 	bl	8087c28 <__aeabi_atexit>
SessionCheck sessionCheck(3600);
 80817b8:	4e54      	ldr	r6, [pc, #336]	; (808190c <_GLOBAL__sub_I_logHandler+0x220>)
 80817ba:	4b55      	ldr	r3, [pc, #340]	; (8081910 <_GLOBAL__sub_I_logHandler+0x224>)
 80817bc:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80817c0:	9300      	str	r3, [sp, #0]
 80817c2:	4630      	mov	r0, r6
 80817c4:	2300      	movs	r3, #0
 80817c6:	f000 fdd3 	bl	8082370 <_ZN12SessionCheckC1ExPKc>
 80817ca:	4630      	mov	r0, r6
ConnectionCheck connectionCheck;
 80817cc:	4e51      	ldr	r6, [pc, #324]	; (8081914 <_GLOBAL__sub_I_logHandler+0x228>)
SessionCheck sessionCheck(3600);
 80817ce:	462a      	mov	r2, r5
 80817d0:	4951      	ldr	r1, [pc, #324]	; (8081918 <_GLOBAL__sub_I_logHandler+0x22c>)
 80817d2:	f006 fa29 	bl	8087c28 <__aeabi_atexit>
ConnectionCheck connectionCheck;
 80817d6:	4630      	mov	r0, r6
 80817d8:	f000 fb64 	bl	8081ea4 <_ZN15ConnectionCheckC1Ev>
 80817dc:	4630      	mov	r0, r6
Tester tester("testerFn", D2);
 80817de:	4e4f      	ldr	r6, [pc, #316]	; (808191c <_GLOBAL__sub_I_logHandler+0x230>)
ConnectionCheck connectionCheck;
 80817e0:	462a      	mov	r2, r5
 80817e2:	494f      	ldr	r1, [pc, #316]	; (8081920 <_GLOBAL__sub_I_logHandler+0x234>)
 80817e4:	f006 fa20 	bl	8087c28 <__aeabi_atexit>
Tester tester("testerFn", D2);
 80817e8:	2202      	movs	r2, #2
 80817ea:	4630      	mov	r0, r6
 80817ec:	494d      	ldr	r1, [pc, #308]	; (8081924 <_GLOBAL__sub_I_logHandler+0x238>)
 80817ee:	f000 f98b 	bl	8081b08 <_ZN6TesterC1EPKci>
 80817f2:	4630      	mov	r0, r6
BatteryCheck batteryCheck(15.0, 3600);
 80817f4:	4e4c      	ldr	r6, [pc, #304]	; (8081928 <_GLOBAL__sub_I_logHandler+0x23c>)
Tester tester("testerFn", D2);
 80817f6:	462a      	mov	r2, r5
 80817f8:	494c      	ldr	r1, [pc, #304]	; (808192c <_GLOBAL__sub_I_logHandler+0x240>)
 80817fa:	f006 fa15 	bl	8087c28 <__aeabi_atexit>
BatteryCheck batteryCheck(15.0, 3600);
 80817fe:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8081802:	4630      	mov	r0, r6
 8081804:	494a      	ldr	r1, [pc, #296]	; (8081930 <_GLOBAL__sub_I_logHandler+0x244>)
 8081806:	f000 f8c3 	bl	8081990 <_ZN12BatteryCheckC1Efl>
 808180a:	4630      	mov	r0, r6
AppWatchdogWrapper watchdog(APP_WATCHDOG_TIMEOUT);
 808180c:	4e49      	ldr	r6, [pc, #292]	; (8081934 <_GLOBAL__sub_I_logHandler+0x248>)
BatteryCheck batteryCheck(15.0, 3600);
 808180e:	462a      	mov	r2, r5
 8081810:	4949      	ldr	r1, [pc, #292]	; (8081938 <_GLOBAL__sub_I_logHandler+0x24c>)
 8081812:	f006 fa09 	bl	8087c28 <__aeabi_atexit>
AppWatchdogWrapper watchdog(APP_WATCHDOG_TIMEOUT);
 8081816:	f64e 2160 	movw	r1, #60000	; 0xea60
 808181a:	4630      	mov	r0, r6
 808181c:	f000 fcd0 	bl	80821c0 <_ZN18AppWatchdogWrapperC1Em>
 8081820:	462a      	mov	r2, r5
 8081822:	4946      	ldr	r1, [pc, #280]	; (808193c <_GLOBAL__sub_I_logHandler+0x250>)
 8081824:	4630      	mov	r0, r6
FuelGauge fuel = FuelGauge();
 8081826:	4e46      	ldr	r6, [pc, #280]	; (8081940 <_GLOBAL__sub_I_logHandler+0x254>)
AppWatchdogWrapper watchdog(APP_WATCHDOG_TIMEOUT);
 8081828:	f006 f9fe 	bl	8087c28 <__aeabi_atexit>
AssetTracker2 t = AssetTracker2();
 808182c:	4845      	ldr	r0, [pc, #276]	; (8081944 <_GLOBAL__sub_I_logHandler+0x258>)
 808182e:	f001 f8cd 	bl	80829cc <_ZN13AssetTracker2C1Ev>
FuelGauge fuel = FuelGauge();
 8081832:	4621      	mov	r1, r4
 8081834:	4630      	mov	r0, r6
 8081836:	f004 fe9f 	bl	8086578 <_ZN9FuelGaugeC1Eb>
 808183a:	4630      	mov	r0, r6
PowerCheck pc = PowerCheck();
 808183c:	4e42      	ldr	r6, [pc, #264]	; (8081948 <_GLOBAL__sub_I_logHandler+0x25c>)
FuelGauge fuel = FuelGauge();
 808183e:	462a      	mov	r2, r5
 8081840:	4942      	ldr	r1, [pc, #264]	; (808194c <_GLOBAL__sub_I_logHandler+0x260>)
 8081842:	f006 f9f1 	bl	8087c28 <__aeabi_atexit>
PowerCheck pc = PowerCheck();
 8081846:	4630      	mov	r0, r6
 8081848:	f001 f87e 	bl	8082948 <_ZN10PowerCheckC1Ev>
 808184c:	462a      	mov	r2, r5
 808184e:	4630      	mov	r0, r6
 8081850:	493f      	ldr	r1, [pc, #252]	; (8081950 <_GLOBAL__sub_I_logHandler+0x264>)
String pubAccel = "";
 8081852:	4e40      	ldr	r6, [pc, #256]	; (8081954 <_GLOBAL__sub_I_logHandler+0x268>)
PowerCheck pc = PowerCheck();
 8081854:	f006 f9e8 	bl	8087c28 <__aeabi_atexit>
DHT dht(DHTPIN, DHTTYPE);
 8081858:	2306      	movs	r3, #6
 808185a:	2216      	movs	r2, #22
 808185c:	2103      	movs	r1, #3
 808185e:	483e      	ldr	r0, [pc, #248]	; (8081958 <_GLOBAL__sub_I_logHandler+0x26c>)
 8081860:	f001 fa66 	bl	8082d30 <_ZN3DHTC1Ehhh>
String pubAccel = "";
 8081864:	4630      	mov	r0, r6
 8081866:	493d      	ldr	r1, [pc, #244]	; (808195c <_GLOBAL__sub_I_logHandler+0x270>)
 8081868:	f003 fa88 	bl	8084d7c <_ZN6StringC1EPKc>
 808186c:	462a      	mov	r2, r5
 808186e:	4630      	mov	r0, r6
 8081870:	493b      	ldr	r1, [pc, #236]	; (8081960 <_GLOBAL__sub_I_logHandler+0x274>)
 8081872:	f006 f9d9 	bl	8087c28 <__aeabi_atexit>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8081876:	4b3b      	ldr	r3, [pc, #236]	; (8081964 <_GLOBAL__sub_I_logHandler+0x278>)
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
 8081878:	4e3b      	ldr	r6, [pc, #236]	; (8081968 <_GLOBAL__sub_I_logHandler+0x27c>)
 808187a:	930c      	str	r3, [sp, #48]	; 0x30
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808187c:	e897 0003 	ldmia.w	r7, {r0, r1}
 8081880:	4b3a      	ldr	r3, [pc, #232]	; (808196c <_GLOBAL__sub_I_logHandler+0x280>)
 8081882:	e888 0003 	stmia.w	r8, {r0, r1}
 8081886:	6033      	str	r3, [r6, #0]
      __a = _GLIBCXX_MOVE(__b);
 8081888:	f106 030c 	add.w	r3, r6, #12
 808188c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8081890:	e887 0003 	stmia.w	r7, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8081894:	e898 0003 	ldmia.w	r8, {r0, r1}
 8081898:	e883 0003 	stmia.w	r3, {r0, r1}
 808189c:	4b34      	ldr	r3, [pc, #208]	; (8081970 <_GLOBAL__sub_I_logHandler+0x284>)
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
 808189e:	2132      	movs	r1, #50	; 0x32
 80818a0:	6173      	str	r3, [r6, #20]
      __a = _GLIBCXX_MOVE(__b);
 80818a2:	69b3      	ldr	r3, [r6, #24]
 80818a4:	4a33      	ldr	r2, [pc, #204]	; (8081974 <_GLOBAL__sub_I_logHandler+0x288>)
 80818a6:	930f      	str	r3, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
 80818a8:	4b33      	ldr	r3, [pc, #204]	; (8081978 <_GLOBAL__sub_I_logHandler+0x28c>)
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
 80818aa:	7134      	strb	r4, [r6, #4]
 80818ac:	61b3      	str	r3, [r6, #24]
 80818ae:	60b4      	str	r4, [r6, #8]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
 80818b0:	4633      	mov	r3, r6
 80818b2:	e9cd 4400 	strd	r4, r4, [sp]
 80818b6:	f106 0008 	add.w	r0, r6, #8
      __a = _GLIBCXX_MOVE(__b);
 80818ba:	940e      	str	r4, [sp, #56]	; 0x38
 80818bc:	f002 fd1c 	bl	80842f8 <os_timer_create>
    class function<_Res(_ArgTypes...)>
 80818c0:	4638      	mov	r0, r7
 80818c2:	f7fe fd67 	bl	8080394 <_ZNSt14_Function_baseD1Ev>
Timer timer(50, callGPS);
 80818c6:	462a      	mov	r2, r5
 80818c8:	4630      	mov	r0, r6
 80818ca:	492c      	ldr	r1, [pc, #176]	; (808197c <_GLOBAL__sub_I_logHandler+0x290>)
 80818cc:	f006 f9ac 	bl	8087c28 <__aeabi_atexit>
}
 80818d0:	b010      	add	sp, #64	; 0x40
 80818d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80818d6:	bf00      	nop
 80818d8:	20000140 	.word	0x20000140
 80818dc:	200001a8 	.word	0x200001a8
 80818e0:	08089768 	.word	0x08089768
 80818e4:	08089d68 	.word	0x08089d68
 80818e8:	08089780 	.word	0x08089780
 80818ec:	20000130 	.word	0x20000130
 80818f0:	08080265 	.word	0x08080265
 80818f4:	20000134 	.word	0x20000134
 80818f8:	ffff0000 	.word	0xffff0000
 80818fc:	20000174 	.word	0x20000174
 8081900:	08080255 	.word	0x08080255
 8081904:	08089725 	.word	0x08089725
 8081908:	08082689 	.word	0x08082689
 808190c:	200001e8 	.word	0x200001e8
 8081910:	08089734 	.word	0x08089734
 8081914:	20000154 	.word	0x20000154
 8081918:	0808233d 	.word	0x0808233d
 808191c:	2000022c 	.word	0x2000022c
 8081920:	08081e65 	.word	0x08081e65
 8081924:	08089741 	.word	0x08089741
 8081928:	20000144 	.word	0x20000144
 808192c:	08081a75 	.word	0x08081a75
 8081930:	41700000 	.word	0x41700000
 8081934:	20000264 	.word	0x20000264
 8081938:	08081981 	.word	0x08081981
 808193c:	08082161 	.word	0x08082161
 8081940:	20000194 	.word	0x20000194
 8081944:	20000228 	.word	0x20000228
 8081948:	200001cc 	.word	0x200001cc
 808194c:	08086597 	.word	0x08086597
 8081950:	080828a1 	.word	0x080828a1
 8081954:	200001d8 	.word	0x200001d8
 8081958:	20000180 	.word	0x20000180
 808195c:	08089844 	.word	0x08089844
 8081960:	08084ce9 	.word	0x08084ce9
 8081964:	08080129 	.word	0x08080129
 8081968:	20000248 	.word	0x20000248
 808196c:	08089754 	.word	0x08089754
 8081970:	080800fb 	.word	0x080800fb
 8081974:	080801d1 	.word	0x080801d1
 8081978:	080800f7 	.word	0x080800f7
 808197c:	080803d5 	.word	0x080803d5

08081980 <_ZN12BatteryCheckD1Ev>:


}
BatteryCheck::~BatteryCheck() {

}
 8081980:	4770      	bx	lr

08081982 <_ZN12BatteryCheckD0Ev>:
BatteryCheck::~BatteryCheck() {
 8081982:	b510      	push	{r4, lr}
 8081984:	4604      	mov	r4, r0
}
 8081986:	2110      	movs	r1, #16
 8081988:	f006 f953 	bl	8087c32 <_ZdlPvj>
 808198c:	4620      	mov	r0, r4
 808198e:	bd10      	pop	{r4, pc}

08081990 <_ZN12BatteryCheckC1Efl>:
BatteryCheck::BatteryCheck(float minimumSoC, long sleepTimeSecs) : minimumSoC(minimumSoC), sleepTimeSecs(sleepTimeSecs) {
 8081990:	6082      	str	r2, [r0, #8]
 8081992:	2200      	movs	r2, #0
 8081994:	b510      	push	{r4, lr}
 8081996:	4c02      	ldr	r4, [pc, #8]	; (80819a0 <_ZN12BatteryCheckC1Efl+0x10>)
 8081998:	6041      	str	r1, [r0, #4]
 808199a:	6004      	str	r4, [r0, #0]
 808199c:	60c2      	str	r2, [r0, #12]
}
 808199e:	bd10      	pop	{r4, pc}
 80819a0:	08089798 	.word	0x08089798

080819a4 <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv>:
		lastCheckMs = millis();
		checkAndSleepIfNecessary();
	}
}

void BatteryCheck::checkAndSleepIfNecessary() {
 80819a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80819a6:	4604      	mov	r4, r0
	float soc = fuel.getSoC();
 80819a8:	4810      	ldr	r0, [pc, #64]	; (80819ec <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv+0x48>)
 80819aa:	f004 fe59 	bl	8086660 <_ZN9FuelGauge6getSoCEv>

	// There is an SoC, it's less than the minimum, and there's no external power (USB or VIN)
	if (soc != 0.0 && soc < minimumSoC && !pmic.isPowerGood()) {
 80819ae:	2100      	movs	r1, #0
	float soc = fuel.getSoC();
 80819b0:	4605      	mov	r5, r0
	if (soc != 0.0 && soc < minimumSoC && !pmic.isPowerGood()) {
 80819b2:	f007 fa13 	bl	8088ddc <__aeabi_fcmpeq>
 80819b6:	b9b0      	cbnz	r0, 80819e6 <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv+0x42>
 80819b8:	4629      	mov	r1, r5
 80819ba:	6860      	ldr	r0, [r4, #4]
 80819bc:	f007 fa36 	bl	8088e2c <__aeabi_fcmpgt>
 80819c0:	b188      	cbz	r0, 80819e6 <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv+0x42>
 80819c2:	480b      	ldr	r0, [pc, #44]	; (80819f0 <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv+0x4c>)
 80819c4:	f003 f80f 	bl	80849e6 <_ZN4PMIC11isPowerGoodEv>
 80819c8:	b968      	cbnz	r0, 80819e6 <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv+0x42>
		ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_LOW_BATTERY_SLEEP, static_cast<int>(soc));
 80819ca:	4628      	mov	r0, r5
 80819cc:	f007 fa4e 	bl	8088e6c <__aeabi_f2iz>
 80819d0:	4601      	mov	r1, r0
 80819d2:	200d      	movs	r0, #13
 80819d4:	f000 ff52 	bl	808287c <_ZN16ConnectionEvents8addEventEii>

		System.sleep(SLEEP_MODE_DEEP, sleepTimeSecs);
 80819d8:	4b06      	ldr	r3, [pc, #24]	; (80819f4 <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv+0x50>)
 80819da:	2101      	movs	r1, #1
 80819dc:	4668      	mov	r0, sp
 80819de:	681b      	ldr	r3, [r3, #0]
 80819e0:	68a2      	ldr	r2, [r4, #8]
 80819e2:	f003 f8ed 	bl	8084bc0 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
	}

}
 80819e6:	b003      	add	sp, #12
 80819e8:	bd30      	pop	{r4, r5, pc}
 80819ea:	bf00      	nop
 80819ec:	20000284 	.word	0x20000284
 80819f0:	2000028c 	.word	0x2000028c
 80819f4:	20000280 	.word	0x20000280

080819f8 <_ZN12BatteryCheck5setupEv>:
	checkAndSleepIfNecessary();
 80819f8:	f7ff bfd4 	b.w	80819a4 <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv>

080819fc <_ZN12BatteryCheck4loopEv>:
void BatteryCheck::loop() {
 80819fc:	b510      	push	{r4, lr}
 80819fe:	4604      	mov	r4, r0
 8081a00:	f002 fc2a 	bl	8084258 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastCheckMs >= CHECK_PERIOD_MS) {
 8081a04:	68e3      	ldr	r3, [r4, #12]
 8081a06:	1ac0      	subs	r0, r0, r3
 8081a08:	f64e 235f 	movw	r3, #59999	; 0xea5f
 8081a0c:	4298      	cmp	r0, r3
 8081a0e:	d907      	bls.n	8081a20 <_ZN12BatteryCheck4loopEv+0x24>
 8081a10:	f002 fc22 	bl	8084258 <HAL_Timer_Get_Milli_Seconds>
		lastCheckMs = millis();
 8081a14:	60e0      	str	r0, [r4, #12]
		checkAndSleepIfNecessary();
 8081a16:	4620      	mov	r0, r4
}
 8081a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		checkAndSleepIfNecessary();
 8081a1c:	f7ff bfc2 	b.w	80819a4 <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv>
}
 8081a20:	bd10      	pop	{r4, pc}
	...

08081a24 <_GLOBAL__sub_I__ZN12BatteryCheckC2Efl>:
}
 8081a24:	b570      	push	{r4, r5, r6, lr}
 8081a26:	2400      	movs	r4, #0
 8081a28:	4b0c      	ldr	r3, [pc, #48]	; (8081a5c <_GLOBAL__sub_I__ZN12BatteryCheckC2Efl+0x38>)
static FuelGauge fuel;
 8081a2a:	4d0d      	ldr	r5, [pc, #52]	; (8081a60 <_GLOBAL__sub_I__ZN12BatteryCheckC2Efl+0x3c>)
 8081a2c:	601c      	str	r4, [r3, #0]
 8081a2e:	4621      	mov	r1, r4
 8081a30:	4e0c      	ldr	r6, [pc, #48]	; (8081a64 <_GLOBAL__sub_I__ZN12BatteryCheckC2Efl+0x40>)
 8081a32:	4628      	mov	r0, r5
 8081a34:	f004 fda0 	bl	8086578 <_ZN9FuelGaugeC1Eb>
 8081a38:	4628      	mov	r0, r5
static PMIC pmic;
 8081a3a:	4d0b      	ldr	r5, [pc, #44]	; (8081a68 <_GLOBAL__sub_I__ZN12BatteryCheckC2Efl+0x44>)
static FuelGauge fuel;
 8081a3c:	4632      	mov	r2, r6
 8081a3e:	490b      	ldr	r1, [pc, #44]	; (8081a6c <_GLOBAL__sub_I__ZN12BatteryCheckC2Efl+0x48>)
 8081a40:	f006 f8f2 	bl	8087c28 <__aeabi_atexit>
static PMIC pmic;
 8081a44:	4621      	mov	r1, r4
 8081a46:	4628      	mov	r0, r5
 8081a48:	f002 ff7d 	bl	8084946 <_ZN4PMICC1Eb>
 8081a4c:	4632      	mov	r2, r6
 8081a4e:	4628      	mov	r0, r5
}
 8081a50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
static PMIC pmic;
 8081a54:	4906      	ldr	r1, [pc, #24]	; (8081a70 <_GLOBAL__sub_I__ZN12BatteryCheckC2Efl+0x4c>)
 8081a56:	f006 b8e7 	b.w	8087c28 <__aeabi_atexit>
 8081a5a:	bf00      	nop
 8081a5c:	20000280 	.word	0x20000280
 8081a60:	20000284 	.word	0x20000284
 8081a64:	20000130 	.word	0x20000130
 8081a68:	2000028c 	.word	0x2000028c
 8081a6c:	08086597 	.word	0x08086597
 8081a70:	08084965 	.word	0x08084965

08081a74 <_ZN6TesterD1Ev>:
}


Tester::~Tester() {

}
 8081a74:	4770      	bx	lr

08081a76 <_ZN6TesterD0Ev>:
Tester::~Tester() {
 8081a76:	b510      	push	{r4, lr}
 8081a78:	4604      	mov	r4, r0
}
 8081a7a:	211c      	movs	r1, #28
 8081a7c:	f006 f8d9 	bl	8087c32 <_ZdlPvj>
 8081a80:	4620      	mov	r0, r4
 8081a82:	bd10      	pop	{r4, pc}

08081a84 <_ZN6Tester15functionHandlerE6String>:

// This is the function registered with Particle.function(). Just copy the data and return so
// the successful response can be returned to the caller. Since we do things like reset, or
// enter an infinite loop, or sleep, doing this right from the callback causes the caller to
// time out because the response will never be received.
int Tester::functionHandler(String argStr) {
 8081a84:	b510      	push	{r4, lr}
 8081a86:	4604      	mov	r4, r0
	// Process this in loop so the function won't time out
	functionData = strdup(argStr.c_str());
 8081a88:	6808      	ldr	r0, [r1, #0]
 8081a8a:	f007 facf 	bl	808902c <strdup>
 8081a8e:	60e0      	str	r0, [r4, #12]

	return 0;
}
 8081a90:	2000      	movs	r0, #0
 8081a92:	bd10      	pop	{r4, pc}

08081a94 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM6TesterFi6StringEPS2_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 8081a94:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8081a96:	b538      	push	{r3, r4, r5, lr}
 8081a98:	4604      	mov	r4, r0
	  switch (__op)
 8081a9a:	d007      	beq.n	8081aac <_ZNSt14_Function_base13_Base_managerISt5_BindIFM6TesterFi6StringEPS2_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 8081a9c:	2a03      	cmp	r2, #3
 8081a9e:	d011      	beq.n	8081ac4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM6TesterFi6StringEPS2_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x30>
 8081aa0:	2a01      	cmp	r2, #1
 8081aa2:	d101      	bne.n	8081aa8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM6TesterFi6StringEPS2_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 8081aa4:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
 8081aa6:	6023      	str	r3, [r4, #0]
	}
 8081aa8:	2000      	movs	r0, #0
 8081aaa:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 8081aac:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
 8081aae:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 8081ab0:	f7fe fb03 	bl	80800ba <_Znwj>
 8081ab4:	4603      	mov	r3, r0
 8081ab6:	2800      	cmp	r0, #0
 8081ab8:	d0f5      	beq.n	8081aa6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM6TesterFi6StringEPS2_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x12>
 8081aba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8081abe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8081ac2:	e7f0      	b.n	8081aa6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM6TesterFi6StringEPS2_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
 8081ac4:	6800      	ldr	r0, [r0, #0]
 8081ac6:	2800      	cmp	r0, #0
 8081ac8:	d0ee      	beq.n	8081aa8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM6TesterFi6StringEPS2_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 8081aca:	210c      	movs	r1, #12
 8081acc:	f006 f8b1 	bl	8087c32 <_ZdlPvj>
 8081ad0:	e7ea      	b.n	8081aa8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM6TesterFi6StringEPS2_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

08081ad2 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM6TesterFiS0_EPS3_St12_PlaceholderILi1EEEEE9_M_invokeERKSt9_Any_dataOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8081ad2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	    return __source._M_access<_Functor*>();
 8081ad4:	6802      	ldr	r2, [r0, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
 8081ad6:	6853      	ldr	r3, [r2, #4]
 8081ad8:	6890      	ldr	r0, [r2, #8]
 8081ada:	105e      	asrs	r6, r3, #1
 8081adc:	eb00 0563 	add.w	r5, r0, r3, asr #1
 8081ae0:	07db      	lsls	r3, r3, #31
 8081ae2:	6814      	ldr	r4, [r2, #0]
 8081ae4:	bf48      	it	mi
 8081ae6:	5983      	ldrmi	r3, [r0, r6]
 8081ae8:	4668      	mov	r0, sp
 8081aea:	bf48      	it	mi
 8081aec:	591c      	ldrmi	r4, [r3, r4]
 8081aee:	f003 f975 	bl	8084ddc <_ZN6StringC1EOS_>
 8081af2:	4669      	mov	r1, sp
 8081af4:	4628      	mov	r0, r5
 8081af6:	47a0      	blx	r4
 8081af8:	4604      	mov	r4, r0
 8081afa:	4668      	mov	r0, sp
 8081afc:	f003 f8f4 	bl	8084ce8 <_ZN6StringD1Ev>
      }
 8081b00:	4620      	mov	r0, r4
 8081b02:	b004      	add	sp, #16
 8081b04:	bd70      	pop	{r4, r5, r6, pc}
	...

08081b08 <_ZN6TesterC1EPKci>:
	functionName(functionName), sleepTestPin(sleepTestPin) {
 8081b08:	6082      	str	r2, [r0, #8]
 8081b0a:	2200      	movs	r2, #0
Tester::Tester(const char *functionName, int sleepTestPin) :
 8081b0c:	b510      	push	{r4, lr}
	functionName(functionName), sleepTestPin(sleepTestPin) {
 8081b0e:	4c04      	ldr	r4, [pc, #16]	; (8081b20 <_ZN6TesterC1EPKci+0x18>)
 8081b10:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8081b14:	e9c0 4100 	strd	r4, r1, [r0]
 8081b18:	e9c0 2205 	strd	r2, r2, [r0, #20]
}
 8081b1c:	bd10      	pop	{r4, pc}
 8081b1e:	bf00      	nop
 8081b20:	08089828 	.word	0x08089828

08081b24 <_ZN6Tester5setupEv>:
void Tester::setup() {
 8081b24:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    _Function_base() : _M_manager(nullptr) { }
 8081b26:	2400      	movs	r4, #0
 8081b28:	4605      	mov	r5, r0
	Particle.function(functionName, &Tester::functionHandler, this);
 8081b2a:	6846      	ldr	r6, [r0, #4]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081b2c:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
 8081b2e:	9402      	str	r4, [sp, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081b30:	f7fe fac3 	bl	80800ba <_Znwj>
 8081b34:	b118      	cbz	r0, 8081b3e <_ZN6Tester5setupEv+0x1a>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
 8081b36:	4b16      	ldr	r3, [pc, #88]	; (8081b90 <_ZN6Tester5setupEv+0x6c>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8081b38:	6085      	str	r5, [r0, #8]
 8081b3a:	e9c0 3400 	strd	r3, r4, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
 8081b3e:	4b15      	ldr	r3, [pc, #84]	; (8081b94 <_ZN6Tester5setupEv+0x70>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081b40:	9000      	str	r0, [sp, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 8081b42:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 8081b44:	4b14      	ldr	r3, [pc, #80]	; (8081b98 <_ZN6Tester5setupEv+0x74>)
            auto wrapper = new user_std_function_int_str_t(func);
 8081b46:	2010      	movs	r0, #16
 8081b48:	9302      	str	r3, [sp, #8]
 8081b4a:	f7fe fab6 	bl	80800ba <_Znwj>
 8081b4e:	4604      	mov	r4, r0
 8081b50:	b178      	cbz	r0, 8081b72 <_ZN6Tester5setupEv+0x4e>
    _Function_base() : _M_manager(nullptr) { }
 8081b52:	2300      	movs	r3, #0
 8081b54:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 8081b56:	9b02      	ldr	r3, [sp, #8]
      if (static_cast<bool>(__x))
 8081b58:	b133      	cbz	r3, 8081b68 <_ZN6Tester5setupEv+0x44>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8081b5a:	2202      	movs	r2, #2
 8081b5c:	4669      	mov	r1, sp
 8081b5e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8081b60:	9b03      	ldr	r3, [sp, #12]
 8081b62:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8081b64:	9b02      	ldr	r3, [sp, #8]
 8081b66:	60a3      	str	r3, [r4, #8]
                success = register_function(call_std_user_function, wrapper, funcKey);
 8081b68:	4632      	mov	r2, r6
 8081b6a:	4621      	mov	r1, r4
 8081b6c:	480b      	ldr	r0, [pc, #44]	; (8081b9c <_ZN6Tester5setupEv+0x78>)
 8081b6e:	f004 fed0 	bl	8086912 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
      if (_M_manager)
 8081b72:	9b02      	ldr	r3, [sp, #8]
 8081b74:	b11b      	cbz	r3, 8081b7e <_ZN6Tester5setupEv+0x5a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8081b76:	4669      	mov	r1, sp
 8081b78:	2203      	movs	r2, #3
 8081b7a:	4608      	mov	r0, r1
 8081b7c:	4798      	blx	r3
	if (sleepTestPin >= 0) {
 8081b7e:	68a8      	ldr	r0, [r5, #8]
 8081b80:	2800      	cmp	r0, #0
 8081b82:	db03      	blt.n	8081b8c <_ZN6Tester5setupEv+0x68>
		pinMode(sleepTestPin, INPUT_PULLUP);
 8081b84:	2102      	movs	r1, #2
 8081b86:	b280      	uxth	r0, r0
 8081b88:	f005 ff04 	bl	8087994 <pinMode>
}
 8081b8c:	b004      	add	sp, #16
 8081b8e:	bd70      	pop	{r4, r5, r6, pc}
 8081b90:	08081a85 	.word	0x08081a85
 8081b94:	08081ad3 	.word	0x08081ad3
 8081b98:	08081a95 	.word	0x08081a95
 8081b9c:	080868cf 	.word	0x080868cf

08081ba0 <_ZN6Tester14processOptionsEPc>:

// This does the actual work from the Particle.function(). It's called from looo().
void Tester::processOptions(char *mutableData) {
 8081ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081ba2:	4605      	mov	r5, r0
 8081ba4:	b08d      	sub	sp, #52	; 0x34
 8081ba6:	4608      	mov	r0, r1
	// Parse argument into space-separated fields
	const char *argv[MAX_ARGS];
	size_t argc = 0;

	char *cp = strtok(mutableData, " ");
 8081ba8:	4981      	ldr	r1, [pc, #516]	; (8081db0 <_ZN6Tester14processOptionsEPc+0x210>)
 8081baa:	f007 fa9b 	bl	80890e4 <strtok>
 8081bae:	2400      	movs	r4, #0
	while(cp && argc < MAX_ARGS) {
		argv[argc++] = cp;
		cp = strtok(NULL, " ");
 8081bb0:	4e7f      	ldr	r6, [pc, #508]	; (8081db0 <_ZN6Tester14processOptionsEPc+0x210>)
		argv[argc++] = cp;
 8081bb2:	af07      	add	r7, sp, #28
	while(cp && argc < MAX_ARGS) {
 8081bb4:	b148      	cbz	r0, 8081bca <_ZN6Tester14processOptionsEPc+0x2a>
 8081bb6:	2c05      	cmp	r4, #5
 8081bb8:	d008      	beq.n	8081bcc <_ZN6Tester14processOptionsEPc+0x2c>
		argv[argc++] = cp;
 8081bba:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
		cp = strtok(NULL, " ");
 8081bbe:	4631      	mov	r1, r6
 8081bc0:	2000      	movs	r0, #0
 8081bc2:	f007 fa8f 	bl	80890e4 <strtok>
 8081bc6:	3401      	adds	r4, #1
	while(cp && argc < MAX_ARGS) {
 8081bc8:	e7f4      	b.n	8081bb4 <_ZN6Tester14processOptionsEPc+0x14>
	}
	if (argc == 0) {
 8081bca:	b17c      	cbz	r4, 8081bec <_ZN6Tester14processOptionsEPc+0x4c>
		return;
	}

	// Delay a bit here to make sure the function result is returned, otherwise if we
	// immediately go to sleep the function may return a timeout error.
	delay(500);
 8081bcc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8081bd0:	f004 fc92 	bl	80864f8 <delay>

	// Process options here
	if (strcmp(argv[0], "reset") == 0) {
 8081bd4:	9e07      	ldr	r6, [sp, #28]
 8081bd6:	4977      	ldr	r1, [pc, #476]	; (8081db4 <_ZN6Tester14processOptionsEPc+0x214>)
 8081bd8:	4630      	mov	r0, r6
 8081bda:	f007 fa14 	bl	8089006 <strcmp>
 8081bde:	b938      	cbnz	r0, 8081bf0 <_ZN6Tester14processOptionsEPc+0x50>
		ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_TESTER_RESET);
 8081be0:	2100      	movs	r1, #0
 8081be2:	200a      	movs	r0, #10
 8081be4:	f000 fe4a 	bl	808287c <_ZN16ConnectionEvents8addEventEii>
		System.reset();
 8081be8:	f002 ffdb 	bl	8084ba2 <_ZN11SystemClass5resetEv>
			pingInterval = 0;
		}

	}

}
 8081bec:	b00d      	add	sp, #52	; 0x34
 8081bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (strcmp(argv[0], "modemReset") == 0) {
 8081bf0:	4971      	ldr	r1, [pc, #452]	; (8081db8 <_ZN6Tester14processOptionsEPc+0x218>)
 8081bf2:	4630      	mov	r0, r6
 8081bf4:	f007 fa07 	bl	8089006 <strcmp>
 8081bf8:	4601      	mov	r1, r0
 8081bfa:	b950      	cbnz	r0, 8081c12 <_ZN6Tester14processOptionsEPc+0x72>
	inline ConnectionCheck &withListenWaitForReboot(unsigned long value) { listenWaitForReboot = value; return *this; };
	inline ConnectionCheck &withCloudWaitForReboot(unsigned long value) { cloudWaitForReboot = value; return *this; };
	inline ConnectionCheck &withPingTimeout(unsigned long value) { pingTimeout = value; return *this; };
	inline ConnectionCheck &withFailureSleepSec(unsigned long value) { failureSleepSec = value; return *this; };

	static inline ConnectionCheck *getInstance() { return instance; };
 8081bfc:	4c6f      	ldr	r4, [pc, #444]	; (8081dbc <_ZN6Tester14processOptionsEPc+0x21c>)
		if (ConnectionCheck::getInstance()) {
 8081bfe:	6823      	ldr	r3, [r4, #0]
 8081c00:	2b00      	cmp	r3, #0
 8081c02:	d0ed      	beq.n	8081be0 <_ZN6Tester14processOptionsEPc+0x40>
			ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_TESTER_RESET_MODEM);
 8081c04:	2011      	movs	r0, #17
 8081c06:	f000 fe39 	bl	808287c <_ZN16ConnectionEvents8addEventEii>
			ConnectionCheck::getInstance()->fullModemReset();
 8081c0a:	6820      	ldr	r0, [r4, #0]
 8081c0c:	f000 f990 	bl	8081f30 <_ZN15ConnectionCheck14fullModemResetEv>
 8081c10:	e7ec      	b.n	8081bec <_ZN6Tester14processOptionsEPc+0x4c>
	if (strcmp(argv[0], "resetSession") == 0) {
 8081c12:	496b      	ldr	r1, [pc, #428]	; (8081dc0 <_ZN6Tester14processOptionsEPc+0x220>)
 8081c14:	4630      	mov	r0, r6
 8081c16:	f007 f9f6 	bl	8089006 <strcmp>
 8081c1a:	4601      	mov	r1, r0
 8081c1c:	bb10      	cbnz	r0, 8081c64 <_ZN6Tester14processOptionsEPc+0xc4>
		ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_TESTER_RESET_SESSION);
 8081c1e:	2010      	movs	r0, #16
 8081c20:	f000 fe2c 	bl	808287c <_ZN16ConnectionEvents8addEventEii>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 8081c24:	4b67      	ldr	r3, [pc, #412]	; (8081dc4 <_ZN6Tester14processOptionsEPc+0x224>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8081c26:	4a68      	ldr	r2, [pc, #416]	; (8081dc8 <_ZN6Tester14processOptionsEPc+0x228>)
 8081c28:	781b      	ldrb	r3, [r3, #0]
 8081c2a:	4968      	ldr	r1, [pc, #416]	; (8081dcc <_ZN6Tester14processOptionsEPc+0x22c>)
 8081c2c:	f88d 3000 	strb.w	r3, [sp]
 8081c30:	a805      	add	r0, sp, #20
 8081c32:	233c      	movs	r3, #60	; 0x3c
 8081c34:	f004 ff72 	bl	8086b1c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
 8081c38:	9c06      	ldr	r4, [sp, #24]
 8081c3a:	2c00      	cmp	r4, #0
 8081c3c:	d0d6      	beq.n	8081bec <_ZN6Tester14processOptionsEPc+0x4c>
      if (--_M_use_count == 0)
 8081c3e:	6863      	ldr	r3, [r4, #4]
 8081c40:	3b01      	subs	r3, #1
 8081c42:	6063      	str	r3, [r4, #4]
 8081c44:	2b00      	cmp	r3, #0
 8081c46:	d1d1      	bne.n	8081bec <_ZN6Tester14processOptionsEPc+0x4c>
          _M_dispose();
 8081c48:	6823      	ldr	r3, [r4, #0]
 8081c4a:	4620      	mov	r0, r4
 8081c4c:	689b      	ldr	r3, [r3, #8]
 8081c4e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8081c50:	68a3      	ldr	r3, [r4, #8]
 8081c52:	3b01      	subs	r3, #1
 8081c54:	60a3      	str	r3, [r4, #8]
 8081c56:	2b00      	cmp	r3, #0
 8081c58:	d1c8      	bne.n	8081bec <_ZN6Tester14processOptionsEPc+0x4c>
            _M_destroy();
 8081c5a:	6823      	ldr	r3, [r4, #0]
 8081c5c:	4620      	mov	r0, r4
 8081c5e:	68db      	ldr	r3, [r3, #12]
 8081c60:	4798      	blx	r3
 8081c62:	e7c3      	b.n	8081bec <_ZN6Tester14processOptionsEPc+0x4c>
	if (strcmp(argv[0], "safeMode") == 0) {
 8081c64:	4630      	mov	r0, r6
 8081c66:	495a      	ldr	r1, [pc, #360]	; (8081dd0 <_ZN6Tester14processOptionsEPc+0x230>)
 8081c68:	f007 f9cd 	bl	8089006 <strcmp>
 8081c6c:	4607      	mov	r7, r0
 8081c6e:	b938      	cbnz	r0, 8081c80 <_ZN6Tester14processOptionsEPc+0xe0>
		ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_TESTER_SAFE_MODE);
 8081c70:	4601      	mov	r1, r0
 8081c72:	2013      	movs	r0, #19
 8081c74:	f000 fe02 	bl	808287c <_ZN16ConnectionEvents8addEventEii>
		System.enterSafeMode();
 8081c78:	4638      	mov	r0, r7
 8081c7a:	f002 ff95 	bl	8084ba8 <_ZN11SystemClass13enterSafeModeEN8particle5FlagsI19SystemResetFlagTypemEE>
 8081c7e:	e7b5      	b.n	8081bec <_ZN6Tester14processOptionsEPc+0x4c>
	if (strcmp(argv[0], "appWatchdog") == 0) {
 8081c80:	4954      	ldr	r1, [pc, #336]	; (8081dd4 <_ZN6Tester14processOptionsEPc+0x234>)
 8081c82:	4630      	mov	r0, r6
 8081c84:	f007 f9bf 	bl	8089006 <strcmp>
 8081c88:	4601      	mov	r1, r0
 8081c8a:	b918      	cbnz	r0, 8081c94 <_ZN6Tester14processOptionsEPc+0xf4>
		ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_TESTER_APP_WATCHDOG, 0);
 8081c8c:	200b      	movs	r0, #11
 8081c8e:	f000 fdf5 	bl	808287c <_ZN16ConnectionEvents8addEventEii>
		while(true) {
 8081c92:	e7fe      	b.n	8081c92 <_ZN6Tester14processOptionsEPc+0xf2>
	if (strcmp(argv[0], "sleep") == 0 && argc >= 2) {
 8081c94:	4630      	mov	r0, r6
 8081c96:	4950      	ldr	r1, [pc, #320]	; (8081dd8 <_ZN6Tester14processOptionsEPc+0x238>)
 8081c98:	f007 f9b5 	bl	8089006 <strcmp>
 8081c9c:	2800      	cmp	r0, #0
 8081c9e:	d165      	bne.n	8081d6c <_ZN6Tester14processOptionsEPc+0x1cc>
 8081ca0:	2c01      	cmp	r4, #1
 8081ca2:	d063      	beq.n	8081d6c <_ZN6Tester14processOptionsEPc+0x1cc>
		if (argc >= 3) {
 8081ca4:	2c02      	cmp	r4, #2
 8081ca6:	d112      	bne.n	8081cce <_ZN6Tester14processOptionsEPc+0x12e>
		int duration = 30;
 8081ca8:	241e      	movs	r4, #30
		ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_TESTER_SLEEP, duration);
 8081caa:	4621      	mov	r1, r4
 8081cac:	200c      	movs	r0, #12
 8081cae:	f000 fde5 	bl	808287c <_ZN16ConnectionEvents8addEventEii>
		if (strcmp(argv[1], "deep") == 0) {
 8081cb2:	9e08      	ldr	r6, [sp, #32]
 8081cb4:	4949      	ldr	r1, [pc, #292]	; (8081ddc <_ZN6Tester14processOptionsEPc+0x23c>)
 8081cb6:	4630      	mov	r0, r6
 8081cb8:	f007 f9a5 	bl	8089006 <strcmp>
 8081cbc:	b970      	cbnz	r0, 8081cdc <_ZN6Tester14processOptionsEPc+0x13c>
			System.sleep(SLEEP_MODE_DEEP, duration);
 8081cbe:	4b48      	ldr	r3, [pc, #288]	; (8081de0 <_ZN6Tester14processOptionsEPc+0x240>)
			System.sleep(SLEEP_MODE_DEEP, duration, SLEEP_NETWORK_STANDBY);
 8081cc0:	4622      	mov	r2, r4
 8081cc2:	2101      	movs	r1, #1
 8081cc4:	681b      	ldr	r3, [r3, #0]
 8081cc6:	a805      	add	r0, sp, #20
 8081cc8:	f002 ff7a 	bl	8084bc0 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
 8081ccc:	e78e      	b.n	8081bec <_ZN6Tester14processOptionsEPc+0x4c>
			duration = atoi(argv[2]);
 8081cce:	9809      	ldr	r0, [sp, #36]	; 0x24
 8081cd0:	f007 f918 	bl	8088f04 <atoi>
			if (duration == 0) {
 8081cd4:	4604      	mov	r4, r0
 8081cd6:	2800      	cmp	r0, #0
 8081cd8:	d0e6      	beq.n	8081ca8 <_ZN6Tester14processOptionsEPc+0x108>
 8081cda:	e7e6      	b.n	8081caa <_ZN6Tester14processOptionsEPc+0x10a>
		if (strcmp(argv[1], "deepStandby") == 0) {
 8081cdc:	4630      	mov	r0, r6
 8081cde:	4941      	ldr	r1, [pc, #260]	; (8081de4 <_ZN6Tester14processOptionsEPc+0x244>)
 8081ce0:	f007 f991 	bl	8089006 <strcmp>
 8081ce4:	b908      	cbnz	r0, 8081cea <_ZN6Tester14processOptionsEPc+0x14a>
			System.sleep(SLEEP_MODE_DEEP, duration, SLEEP_NETWORK_STANDBY);
 8081ce6:	4b40      	ldr	r3, [pc, #256]	; (8081de8 <_ZN6Tester14processOptionsEPc+0x248>)
 8081ce8:	e7ea      	b.n	8081cc0 <_ZN6Tester14processOptionsEPc+0x120>
		if (strcmp(argv[1], "stop") == 0) {
 8081cea:	4630      	mov	r0, r6
 8081cec:	493f      	ldr	r1, [pc, #252]	; (8081dec <_ZN6Tester14processOptionsEPc+0x24c>)
 8081cee:	f007 f98a 	bl	8089006 <strcmp>
 8081cf2:	4607      	mov	r7, r0
 8081cf4:	b9d0      	cbnz	r0, 8081d2c <_ZN6Tester14processOptionsEPc+0x18c>
			if (sleepTestPin >= 0) {
 8081cf6:	68ab      	ldr	r3, [r5, #8]
 8081cf8:	2b00      	cmp	r3, #0
 8081cfa:	f6ff af77 	blt.w	8081bec <_ZN6Tester14processOptionsEPc+0x4c>
				System.sleep(sleepTestPin, FALLING, duration);
 8081cfe:	4a38      	ldr	r2, [pc, #224]	; (8081de0 <_ZN6Tester14processOptionsEPc+0x240>)
 8081d00:	f8ad 3012 	strh.w	r3, [sp, #18]
 8081d04:	6812      	ldr	r2, [r2, #0]
inline ValueT particle::Flag<TagT, ValueT>::value() const {
 8081d06:	2302      	movs	r3, #2
    inline static SleepResult sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF) { return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag); }
 8081d08:	e9cd 4201 	strd	r4, r2, [sp, #4]
 8081d0c:	2201      	movs	r2, #1
 8081d0e:	f88d 3011 	strb.w	r3, [sp, #17]
 8081d12:	f10d 0112 	add.w	r1, sp, #18
 8081d16:	9200      	str	r2, [sp, #0]
 8081d18:	f10d 0311 	add.w	r3, sp, #17
 8081d1c:	a805      	add	r0, sp, #20
 8081d1e:	f002 ff8d 	bl	8084c3c <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
				ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_STOP_SLEEP_WAKE, 0);
 8081d22:	4639      	mov	r1, r7
				ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_STOP_SLEEP_WAKE, 0);
 8081d24:	2015      	movs	r0, #21
 8081d26:	f000 fda9 	bl	808287c <_ZN16ConnectionEvents8addEventEii>
 8081d2a:	e75f      	b.n	8081bec <_ZN6Tester14processOptionsEPc+0x4c>
		if (strcmp(argv[1], "stopStandby") == 0) {
 8081d2c:	4630      	mov	r0, r6
 8081d2e:	4930      	ldr	r1, [pc, #192]	; (8081df0 <_ZN6Tester14processOptionsEPc+0x250>)
 8081d30:	f007 f969 	bl	8089006 <strcmp>
 8081d34:	4606      	mov	r6, r0
 8081d36:	2800      	cmp	r0, #0
 8081d38:	f47f af58 	bne.w	8081bec <_ZN6Tester14processOptionsEPc+0x4c>
			if (sleepTestPin >= 0) {
 8081d3c:	68ab      	ldr	r3, [r5, #8]
 8081d3e:	2b00      	cmp	r3, #0
 8081d40:	f6ff af54 	blt.w	8081bec <_ZN6Tester14processOptionsEPc+0x4c>
				System.sleep(sleepTestPin, FALLING, duration, SLEEP_NETWORK_STANDBY);
 8081d44:	4a28      	ldr	r2, [pc, #160]	; (8081de8 <_ZN6Tester14processOptionsEPc+0x248>)
 8081d46:	f8ad 3012 	strh.w	r3, [sp, #18]
 8081d4a:	6812      	ldr	r2, [r2, #0]
 8081d4c:	2302      	movs	r3, #2
 8081d4e:	e9cd 4201 	strd	r4, r2, [sp, #4]
 8081d52:	2201      	movs	r2, #1
 8081d54:	f88d 3011 	strb.w	r3, [sp, #17]
 8081d58:	f10d 0112 	add.w	r1, sp, #18
 8081d5c:	9200      	str	r2, [sp, #0]
 8081d5e:	f10d 0311 	add.w	r3, sp, #17
 8081d62:	a805      	add	r0, sp, #20
 8081d64:	f002 ff6a 	bl	8084c3c <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
				ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_STOP_SLEEP_WAKE, 0);
 8081d68:	4631      	mov	r1, r6
 8081d6a:	e7db      	b.n	8081d24 <_ZN6Tester14processOptionsEPc+0x184>
	if (strcmp(argv[0], "ping") == 0 && argc >= 2) {
 8081d6c:	4630      	mov	r0, r6
 8081d6e:	4921      	ldr	r1, [pc, #132]	; (8081df4 <_ZN6Tester14processOptionsEPc+0x254>)
 8081d70:	f007 f949 	bl	8089006 <strcmp>
 8081d74:	2800      	cmp	r0, #0
 8081d76:	f47f af39 	bne.w	8081bec <_ZN6Tester14processOptionsEPc+0x4c>
 8081d7a:	2c01      	cmp	r4, #1
 8081d7c:	f43f af36 	beq.w	8081bec <_ZN6Tester14processOptionsEPc+0x4c>
		if (strcmp(argv[1], "start") == 0) {
 8081d80:	9e08      	ldr	r6, [sp, #32]
 8081d82:	491d      	ldr	r1, [pc, #116]	; (8081df8 <_ZN6Tester14processOptionsEPc+0x258>)
 8081d84:	4630      	mov	r0, r6
 8081d86:	f007 f93e 	bl	8089006 <strcmp>
 8081d8a:	b948      	cbnz	r0, 8081da0 <_ZN6Tester14processOptionsEPc+0x200>
			if (argc >= 3) {
 8081d8c:	2c02      	cmp	r4, #2
 8081d8e:	d004      	beq.n	8081d9a <_ZN6Tester14processOptionsEPc+0x1fa>
				pingInterval = (unsigned long) atoi(argv[2]);
 8081d90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8081d92:	f007 f8b7 	bl	8088f04 <atoi>
			pingInterval = 0;
 8081d96:	6168      	str	r0, [r5, #20]
 8081d98:	e728      	b.n	8081bec <_ZN6Tester14processOptionsEPc+0x4c>
				pingInterval = 30;
 8081d9a:	231e      	movs	r3, #30
 8081d9c:	616b      	str	r3, [r5, #20]
 8081d9e:	e725      	b.n	8081bec <_ZN6Tester14processOptionsEPc+0x4c>
		if (strcmp(argv[1], "stop") == 0) {
 8081da0:	4630      	mov	r0, r6
 8081da2:	4912      	ldr	r1, [pc, #72]	; (8081dec <_ZN6Tester14processOptionsEPc+0x24c>)
 8081da4:	f007 f92f 	bl	8089006 <strcmp>
 8081da8:	2800      	cmp	r0, #0
 8081daa:	f47f af1f 	bne.w	8081bec <_ZN6Tester14processOptionsEPc+0x4c>
 8081dae:	e7f2      	b.n	8081d96 <_ZN6Tester14processOptionsEPc+0x1f6>
 8081db0:	08089d16 	.word	0x08089d16
 8081db4:	080897a0 	.word	0x080897a0
 8081db8:	080897a6 	.word	0x080897a6
 8081dbc:	200002a0 	.word	0x200002a0
 8081dc0:	080897b1 	.word	0x080897b1
 8081dc4:	20000298 	.word	0x20000298
 8081dc8:	08089844 	.word	0x08089844
 8081dcc:	080897be 	.word	0x080897be
 8081dd0:	080897d7 	.word	0x080897d7
 8081dd4:	080897e0 	.word	0x080897e0
 8081dd8:	080897ec 	.word	0x080897ec
 8081ddc:	080897f2 	.word	0x080897f2
 8081de0:	20000290 	.word	0x20000290
 8081de4:	080897f7 	.word	0x080897f7
 8081de8:	20000294 	.word	0x20000294
 8081dec:	08089803 	.word	0x08089803
 8081df0:	08089808 	.word	0x08089808
 8081df4:	08089814 	.word	0x08089814
 8081df8:	08089819 	.word	0x08089819

08081dfc <_ZN6Tester4loopEv>:
void Tester::loop() {
 8081dfc:	b510      	push	{r4, lr}
	if (functionData) {
 8081dfe:	68c1      	ldr	r1, [r0, #12]
void Tester::loop() {
 8081e00:	4604      	mov	r4, r0
	if (functionData) {
 8081e02:	b131      	cbz	r1, 8081e12 <_ZN6Tester4loopEv+0x16>
		processOptions(functionData);
 8081e04:	f7ff fecc 	bl	8081ba0 <_ZN6Tester14processOptionsEPc>
		free(functionData);
 8081e08:	68e0      	ldr	r0, [r4, #12]
 8081e0a:	f002 fd4d 	bl	80848a8 <free>
		functionData = NULL;
 8081e0e:	2300      	movs	r3, #0
 8081e10:	60e3      	str	r3, [r4, #12]
	if (pingInterval > 0) {
 8081e12:	6963      	ldr	r3, [r4, #20]
 8081e14:	2b00      	cmp	r3, #0
 8081e16:	dd14      	ble.n	8081e42 <_ZN6Tester4loopEv+0x46>
 8081e18:	f002 fa1e 	bl	8084258 <HAL_Timer_Get_Milli_Seconds>
		if (millis() - lastPing >= (unsigned long) (pingInterval * 1000)) {
 8081e1c:	6923      	ldr	r3, [r4, #16]
 8081e1e:	6962      	ldr	r2, [r4, #20]
 8081e20:	1ac0      	subs	r0, r0, r3
 8081e22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8081e26:	4353      	muls	r3, r2
 8081e28:	4298      	cmp	r0, r3
 8081e2a:	d30a      	bcc.n	8081e42 <_ZN6Tester4loopEv+0x46>
 8081e2c:	f002 fa14 	bl	8084258 <HAL_Timer_Get_Milli_Seconds>
			ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_TESTER_PING, ++pingCounter);
 8081e30:	69a1      	ldr	r1, [r4, #24]
			lastPing = millis();
 8081e32:	6120      	str	r0, [r4, #16]
			ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_TESTER_PING, ++pingCounter);
 8081e34:	3101      	adds	r1, #1
 8081e36:	61a1      	str	r1, [r4, #24]
 8081e38:	2014      	movs	r0, #20
}
 8081e3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_TESTER_PING, ++pingCounter);
 8081e3e:	f000 bd1d 	b.w	808287c <_ZN16ConnectionEvents8addEventEii>
}
 8081e42:	bd10      	pop	{r4, pc}

08081e44 <_GLOBAL__sub_I__ZN6TesterC2EPKci>:
        val_(val) {
 8081e44:	2200      	movs	r2, #0
 8081e46:	4b04      	ldr	r3, [pc, #16]	; (8081e58 <_GLOBAL__sub_I__ZN6TesterC2EPKci+0x14>)
 8081e48:	601a      	str	r2, [r3, #0]
 8081e4a:	2301      	movs	r3, #1
 8081e4c:	4a03      	ldr	r2, [pc, #12]	; (8081e5c <_GLOBAL__sub_I__ZN6TesterC2EPKci+0x18>)
 8081e4e:	6013      	str	r3, [r2, #0]
 8081e50:	4a03      	ldr	r2, [pc, #12]	; (8081e60 <_GLOBAL__sub_I__ZN6TesterC2EPKci+0x1c>)
 8081e52:	7013      	strb	r3, [r2, #0]
}
 8081e54:	4770      	bx	lr
 8081e56:	bf00      	nop
 8081e58:	20000290 	.word	0x20000290
 8081e5c:	20000294 	.word	0x20000294
 8081e60:	20000298 	.word	0x20000298

08081e64 <_ZN15ConnectionCheckD1Ev>:
		connectionCheckRetainedData.numFailures = 0;
	}
}
ConnectionCheck::~ConnectionCheck() {

}
 8081e64:	4770      	bx	lr

08081e66 <_ZN15ConnectionCheckD0Ev>:
ConnectionCheck::~ConnectionCheck() {
 8081e66:	b510      	push	{r4, lr}
 8081e68:	4604      	mov	r4, r0
}
 8081e6a:	2120      	movs	r1, #32
 8081e6c:	f005 fee1 	bl	8087c32 <_ZdlPvj>
 8081e70:	4620      	mov	r0, r4
 8081e72:	bd10      	pop	{r4, pc}

08081e74 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 8081e74:	b40e      	push	{r1, r2, r3}
 8081e76:	b510      	push	{r4, lr}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 8081e78:	2300      	movs	r3, #0
    log(LOG_LEVEL_INFO, fmt, args);
 8081e7a:	6801      	ldr	r1, [r0, #0]
    attr.flags = 0;
 8081e7c:	2020      	movs	r0, #32
inline void spark::Logger::info(const char *fmt, ...) const {
 8081e7e:	b08d      	sub	sp, #52	; 0x34
 8081e80:	aa0f      	add	r2, sp, #60	; 0x3c
 8081e82:	f852 4b04 	ldr.w	r4, [r2], #4
    attr.flags = 0;
 8081e86:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8081e8a:	e9cd 4200 	strd	r4, r2, [sp]
    va_start(args, fmt);
 8081e8e:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8081e90:	201e      	movs	r0, #30
 8081e92:	aa04      	add	r2, sp, #16
 8081e94:	f002 fbd0 	bl	8084638 <log_message_v>
}
 8081e98:	b00d      	add	sp, #52	; 0x34
 8081e9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8081e9e:	b003      	add	sp, #12
 8081ea0:	4770      	bx	lr
	...

08081ea4 <_ZN15ConnectionCheckC1Ev>:
ConnectionCheck::ConnectionCheck()  {
 8081ea4:	f247 5230 	movw	r2, #30000	; 0x7530
 8081ea8:	4b0b      	ldr	r3, [pc, #44]	; (8081ed8 <_ZN15ConnectionCheckC1Ev+0x34>)
 8081eaa:	f242 7110 	movw	r1, #10000	; 0x2710
 8081eae:	6003      	str	r3, [r0, #0]
 8081eb0:	4b0a      	ldr	r3, [pc, #40]	; (8081edc <_ZN15ConnectionCheckC1Ev+0x38>)
 8081eb2:	b510      	push	{r4, lr}
 8081eb4:	e9c0 2301 	strd	r2, r3, [r0, #4]
 8081eb8:	2300      	movs	r3, #0
	instance = this;
 8081eba:	4a09      	ldr	r2, [pc, #36]	; (8081ee0 <_ZN15ConnectionCheckC1Ev+0x3c>)
ConnectionCheck::ConnectionCheck()  {
 8081ebc:	e9c0 1303 	strd	r1, r3, [r0, #12]
	instance = this;
 8081ec0:	6010      	str	r0, [r2, #0]
	if (connectionCheckRetainedData.magic != CONNECTION_CHECK_MAGIC) {
 8081ec2:	4a08      	ldr	r2, [pc, #32]	; (8081ee4 <_ZN15ConnectionCheckC1Ev+0x40>)
 8081ec4:	4908      	ldr	r1, [pc, #32]	; (8081ee8 <_ZN15ConnectionCheckC1Ev+0x44>)
 8081ec6:	6814      	ldr	r4, [r2, #0]
ConnectionCheck::ConnectionCheck()  {
 8081ec8:	e9c0 3306 	strd	r3, r3, [r0, #24]
	if (connectionCheckRetainedData.magic != CONNECTION_CHECK_MAGIC) {
 8081ecc:	428c      	cmp	r4, r1
		connectionCheckRetainedData.numFailures = 0;
 8081ece:	bf18      	it	ne
 8081ed0:	e9c2 1300 	strdne	r1, r3, [r2]
ConnectionCheck::ConnectionCheck()  {
 8081ed4:	8283      	strh	r3, [r0, #20]
}
 8081ed6:	bd10      	pop	{r4, pc}
 8081ed8:	080898c8 	.word	0x080898c8
 8081edc:	0002bf20 	.word	0x0002bf20
 8081ee0:	200002a0 	.word	0x200002a0
 8081ee4:	40024000 	.word	0x40024000
 8081ee8:	2e4ec594 	.word	0x2e4ec594

08081eec <_ZN15ConnectionCheck5setupEv>:

void ConnectionCheck::setup() {

}
 8081eec:	4770      	bx	lr
	...

08081ef0 <_ZN15ConnectionCheck17cloudConnectDebugEv>:
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
 8081ef0:	2100      	movs	r1, #0


// This is called when timing out connecting to the cloud. It adds some debugging events to
// help log the current state for debugging purposes.
// It returns true to force a modem reset immediately, false to use the normal logic for whether to reset the modem.
bool ConnectionCheck::cloudConnectDebug() {
 8081ef2:	b510      	push	{r4, lr}
 8081ef4:	4b0c      	ldr	r3, [pc, #48]	; (8081f28 <_ZN15ConnectionCheck17cloudConnectDebugEv+0x38>)
 8081ef6:	68c2      	ldr	r2, [r0, #12]
 8081ef8:	4604      	mov	r4, r0
 8081efa:	4608      	mov	r0, r1
 8081efc:	f002 fb4c 	bl	8084598 <cellular_command>
 8081f00:	4601      	mov	r1, r0
	int res = Cellular.command(pingTimeout, "AT+UPING=\"8.8.8.8\"\r\n");
	ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_PING_DNS, res);
 8081f02:	2007      	movs	r0, #7
 8081f04:	f000 fcba 	bl	808287c <_ZN16ConnectionEvents8addEventEii>
 8081f08:	2100      	movs	r1, #0
 8081f0a:	68e2      	ldr	r2, [r4, #12]
 8081f0c:	4b07      	ldr	r3, [pc, #28]	; (8081f2c <_ZN15ConnectionCheck17cloudConnectDebugEv+0x3c>)
 8081f0e:	4608      	mov	r0, r1
 8081f10:	f002 fb42 	bl	8084598 <cellular_command>
 8081f14:	4604      	mov	r4, r0

	res = Cellular.command(pingTimeout, "AT+UPING=\"api.particle.io\"\r\n");
	ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_PING_API, res);
 8081f16:	4601      	mov	r1, r0
 8081f18:	2008      	movs	r0, #8
 8081f1a:	f000 fcaf 	bl	808287c <_ZN16ConnectionEvents8addEventEii>

	// If pinging api.particle.io does not succeed, then reboot the modem right away
	return (res != RESP_OK);
}
 8081f1e:	1ca0      	adds	r0, r4, #2
 8081f20:	bf18      	it	ne
 8081f22:	2001      	movne	r0, #1
 8081f24:	bd10      	pop	{r4, pc}
 8081f26:	bf00      	nop
 8081f28:	08089830 	.word	0x08089830
 8081f2c:	08089845 	.word	0x08089845

08081f30 <_ZN15ConnectionCheck14fullModemResetEv>:


// reason is the reason code, one of the ConnectionEvents::CONNECTION_EVENT_* constants
// forceResetMode will reset the modem even immediately instead of waiting for multiple failures
void ConnectionCheck::fullModemReset() {
 8081f30:	b530      	push	{r4, r5, lr}

	Log.info("resetting modem");
 8081f32:	491b      	ldr	r1, [pc, #108]	; (8081fa0 <_ZN15ConnectionCheck14fullModemResetEv+0x70>)
void ConnectionCheck::fullModemReset() {
 8081f34:	b085      	sub	sp, #20
	Log.info("resetting modem");
 8081f36:	481b      	ldr	r0, [pc, #108]	; (8081fa4 <_ZN15ConnectionCheck14fullModemResetEv+0x74>)
 8081f38:	f7ff ff9c 	bl	8081e74 <_ZNK5spark6Logger4infoEPKcz>

	ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_MODEM_RESET);
 8081f3c:	2100      	movs	r1, #0
 8081f3e:	2004      	movs	r0, #4
 8081f40:	f000 fc9c 	bl	808287c <_ZN16ConnectionEvents8addEventEii>
}

inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful) {
 8081f44:	2300      	movs	r3, #0

	// Disconnect from the cloud
	Particle.disconnect();
 8081f46:	a801      	add	r0, sp, #4
 8081f48:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8081f4c:	f88d 300c 	strb.w	r3, [sp, #12]
 8081f50:	f004 fcf0 	bl	8086934 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
 8081f54:	f002 f980 	bl	8084258 <HAL_Timer_Get_Milli_Seconds>

	// Wait up to 15 seconds to disconnect
	unsigned long startTime = millis();
	while(Particle.connected() && millis() - startTime < 15000) {
 8081f58:	f643 2597 	movw	r5, #14999	; 0x3a97
 8081f5c:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8081f5e:	f002 fc63 	bl	8084828 <spark_cloud_flag_connected>
 8081f62:	b140      	cbz	r0, 8081f76 <_ZN15ConnectionCheck14fullModemResetEv+0x46>
 8081f64:	f002 f978 	bl	8084258 <HAL_Timer_Get_Milli_Seconds>
 8081f68:	1b00      	subs	r0, r0, r4
 8081f6a:	42a8      	cmp	r0, r5
 8081f6c:	d803      	bhi.n	8081f76 <_ZN15ConnectionCheck14fullModemResetEv+0x46>
		delay(100);
 8081f6e:	2064      	movs	r0, #100	; 0x64
 8081f70:	f004 fac2 	bl	80864f8 <delay>
	while(Particle.connected() && millis() - startTime < 15000) {
 8081f74:	e7f3      	b.n	8081f5e <_ZN15ConnectionCheck14fullModemResetEv+0x2e>
 8081f76:	2100      	movs	r1, #0
 8081f78:	f247 5230 	movw	r2, #30000	; 0x7530
 8081f7c:	4608      	mov	r0, r1
 8081f7e:	4b0a      	ldr	r3, [pc, #40]	; (8081fa8 <_ZN15ConnectionCheck14fullModemResetEv+0x78>)
 8081f80:	f002 fb0a 	bl	8084598 <cellular_command>

	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");

	delay(1000);
 8081f84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8081f88:	f004 fab6 	bl	80864f8 <delay>

	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
 8081f8c:	4b07      	ldr	r3, [pc, #28]	; (8081fac <_ZN15ConnectionCheck14fullModemResetEv+0x7c>)
 8081f8e:	220a      	movs	r2, #10
 8081f90:	2101      	movs	r1, #1
 8081f92:	681b      	ldr	r3, [r3, #0]
 8081f94:	a801      	add	r0, sp, #4
 8081f96:	f002 fe13 	bl	8084bc0 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
 8081f9a:	b005      	add	sp, #20
 8081f9c:	bd30      	pop	{r4, r5, pc}
 8081f9e:	bf00      	nop
 8081fa0:	08089862 	.word	0x08089862
 8081fa4:	200003bc 	.word	0x200003bc
 8081fa8:	08089872 	.word	0x08089872
 8081fac:	2000029c 	.word	0x2000029c

08081fb0 <_ZN15ConnectionCheck4loopEv>:
void ConnectionCheck::loop() {
 8081fb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
        return network_ready(*this, 0,  NULL);
 8081fb2:	2200      	movs	r2, #0
 8081fb4:	4d45      	ldr	r5, [pc, #276]	; (80820cc <_ZN15ConnectionCheck4loopEv+0x11c>)
 8081fb6:	4604      	mov	r4, r0
 8081fb8:	4611      	mov	r1, r2
 8081fba:	6868      	ldr	r0, [r5, #4]
 8081fbc:	f002 fbdc 	bl	8084778 <network_ready>
	if (temp != isCellularReady) {
 8081fc0:	7d23      	ldrb	r3, [r4, #20]
 8081fc2:	4601      	mov	r1, r0
 8081fc4:	4283      	cmp	r3, r0
 8081fc6:	d00d      	beq.n	8081fe4 <_ZN15ConnectionCheck4loopEv+0x34>
		isCellularReady = temp;
 8081fc8:	7520      	strb	r0, [r4, #20]
		ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_CELLULAR_READY, isCellularReady);
 8081fca:	2001      	movs	r0, #1
 8081fcc:	f000 fc56 	bl	808287c <_ZN16ConnectionEvents8addEventEii>
		Log.info("cellular %s", isCellularReady ? "up" : "down");
 8081fd0:	7d21      	ldrb	r1, [r4, #20]
 8081fd2:	4a3f      	ldr	r2, [pc, #252]	; (80820d0 <_ZN15ConnectionCheck4loopEv+0x120>)
 8081fd4:	4b3f      	ldr	r3, [pc, #252]	; (80820d4 <_ZN15ConnectionCheck4loopEv+0x124>)
 8081fd6:	4840      	ldr	r0, [pc, #256]	; (80820d8 <_ZN15ConnectionCheck4loopEv+0x128>)
 8081fd8:	2900      	cmp	r1, #0
 8081fda:	bf08      	it	eq
 8081fdc:	461a      	moveq	r2, r3
 8081fde:	493f      	ldr	r1, [pc, #252]	; (80820dc <_ZN15ConnectionCheck4loopEv+0x12c>)
 8081fe0:	f7ff ff48 	bl	8081e74 <_ZNK5spark6Logger4infoEPKcz>
 8081fe4:	f002 fc20 	bl	8084828 <spark_cloud_flag_connected>
	if (temp != isCloudConnected) {
 8081fe8:	7d63      	ldrb	r3, [r4, #21]
 8081fea:	4601      	mov	r1, r0
 8081fec:	4283      	cmp	r3, r0
 8081fee:	d02b      	beq.n	8082048 <_ZN15ConnectionCheck4loopEv+0x98>
		isCloudConnected = temp;
 8081ff0:	7560      	strb	r0, [r4, #21]
		ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_CLOUD_CONNECTED, isCloudConnected);
 8081ff2:	2002      	movs	r0, #2
 8081ff4:	f000 fc42 	bl	808287c <_ZN16ConnectionEvents8addEventEii>
		Log.info("cloud connection %s", isCloudConnected ? "up" : "down");
 8081ff8:	7d61      	ldrb	r1, [r4, #21]
 8081ffa:	4b36      	ldr	r3, [pc, #216]	; (80820d4 <_ZN15ConnectionCheck4loopEv+0x124>)
 8081ffc:	4a34      	ldr	r2, [pc, #208]	; (80820d0 <_ZN15ConnectionCheck4loopEv+0x120>)
 8081ffe:	4836      	ldr	r0, [pc, #216]	; (80820d8 <_ZN15ConnectionCheck4loopEv+0x128>)
 8082000:	2900      	cmp	r1, #0
 8082002:	bf08      	it	eq
 8082004:	461a      	moveq	r2, r3
 8082006:	4936      	ldr	r1, [pc, #216]	; (80820e0 <_ZN15ConnectionCheck4loopEv+0x130>)
 8082008:	f7ff ff34 	bl	8081e74 <_ZNK5spark6Logger4infoEPKcz>
		if (isCloudConnected) {
 808200c:	7d63      	ldrb	r3, [r4, #21]
 808200e:	b1c3      	cbz	r3, 8082042 <_ZN15ConnectionCheck4loopEv+0x92>
			connectionCheckRetainedData.numFailures = 0;
 8082010:	2200      	movs	r2, #0
 8082012:	4b34      	ldr	r3, [pc, #208]	; (80820e4 <_ZN15ConnectionCheck4loopEv+0x134>)
 8082014:	605a      	str	r2, [r3, #4]
        return network_listening(*this, 0, NULL);
 8082016:	2200      	movs	r2, #0
 8082018:	6868      	ldr	r0, [r5, #4]
 808201a:	4611      	mov	r1, r2
 808201c:	f002 fbcc 	bl	80847b8 <network_listening>
	if (Cellular.listening()) {
 8082020:	b168      	cbz	r0, 808203e <_ZN15ConnectionCheck4loopEv+0x8e>
		if (listeningStart == 0) {
 8082022:	69a5      	ldr	r5, [r4, #24]
 8082024:	2d00      	cmp	r5, #0
 8082026:	d13c      	bne.n	80820a2 <_ZN15ConnectionCheck4loopEv+0xf2>
 8082028:	f002 f916 	bl	8084258 <HAL_Timer_Get_Milli_Seconds>
			ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_LISTENING_ENTERED);
 808202c:	4629      	mov	r1, r5
			listeningStart = millis();
 808202e:	61a0      	str	r0, [r4, #24]
			ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_LISTENING_ENTERED);
 8082030:	2003      	movs	r0, #3
 8082032:	f000 fc23 	bl	808287c <_ZN16ConnectionEvents8addEventEii>
			Log.info("entered listening mode");
 8082036:	492c      	ldr	r1, [pc, #176]	; (80820e8 <_ZN15ConnectionCheck4loopEv+0x138>)
 8082038:	4827      	ldr	r0, [pc, #156]	; (80820d8 <_ZN15ConnectionCheck4loopEv+0x128>)
 808203a:	f7ff ff1b 	bl	8081e74 <_ZNK5spark6Logger4infoEPKcz>
}
 808203e:	b003      	add	sp, #12
 8082040:	bd30      	pop	{r4, r5, pc}
 8082042:	f002 f909 	bl	8084258 <HAL_Timer_Get_Milli_Seconds>
			cloudCheckStart = millis();
 8082046:	61e0      	str	r0, [r4, #28]
	if (!isCloudConnected) {
 8082048:	7d63      	ldrb	r3, [r4, #21]
 808204a:	2b00      	cmp	r3, #0
 808204c:	d1e3      	bne.n	8082016 <_ZN15ConnectionCheck4loopEv+0x66>
		if (cloudWaitForReboot != 0 && millis() - cloudCheckStart >= cloudWaitForReboot) {
 808204e:	68a3      	ldr	r3, [r4, #8]
 8082050:	2b00      	cmp	r3, #0
 8082052:	d0e0      	beq.n	8082016 <_ZN15ConnectionCheck4loopEv+0x66>
 8082054:	f002 f900 	bl	8084258 <HAL_Timer_Get_Milli_Seconds>
 8082058:	69e3      	ldr	r3, [r4, #28]
 808205a:	1ac0      	subs	r0, r0, r3
 808205c:	68a3      	ldr	r3, [r4, #8]
 808205e:	4298      	cmp	r0, r3
 8082060:	d3d9      	bcc.n	8082016 <_ZN15ConnectionCheck4loopEv+0x66>
			if (isCellularReady) {
 8082062:	7d23      	ldrb	r3, [r4, #20]
 8082064:	b113      	cbz	r3, 808206c <_ZN15ConnectionCheck4loopEv+0xbc>
				cloudConnectDebug();
 8082066:	4620      	mov	r0, r4
 8082068:	f7ff ff42 	bl	8081ef0 <_ZN15ConnectionCheck17cloudConnectDebugEv>
			connectionCheckRetainedData.numFailures++;
 808206c:	4a1d      	ldr	r2, [pc, #116]	; (80820e4 <_ZN15ConnectionCheck4loopEv+0x134>)
 808206e:	6853      	ldr	r3, [r2, #4]
 8082070:	3301      	adds	r3, #1
 8082072:	6053      	str	r3, [r2, #4]
			if (failureSleepSec > 0 && connectionCheckRetainedData.numFailures > 1) {
 8082074:	6922      	ldr	r2, [r4, #16]
 8082076:	b162      	cbz	r2, 8082092 <_ZN15ConnectionCheck4loopEv+0xe2>
 8082078:	2b01      	cmp	r3, #1
 808207a:	d90a      	bls.n	8082092 <_ZN15ConnectionCheck4loopEv+0xe2>
				ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_FAILURE_SLEEP);
 808207c:	2100      	movs	r1, #0
 808207e:	2016      	movs	r0, #22
 8082080:	f000 fbfc 	bl	808287c <_ZN16ConnectionEvents8addEventEii>
				System.sleep(SLEEP_MODE_DEEP, failureSleepSec);
 8082084:	4b19      	ldr	r3, [pc, #100]	; (80820ec <_ZN15ConnectionCheck4loopEv+0x13c>)
 8082086:	2101      	movs	r1, #1
 8082088:	4668      	mov	r0, sp
 808208a:	681b      	ldr	r3, [r3, #0]
 808208c:	6922      	ldr	r2, [r4, #16]
 808208e:	f002 fd97 	bl	8084bc0 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
			ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_REBOOT_NO_CLOUD);
 8082092:	2100      	movs	r1, #0
 8082094:	2006      	movs	r0, #6
 8082096:	f000 fbf1 	bl	808287c <_ZN16ConnectionEvents8addEventEii>
			fullModemReset();
 808209a:	4620      	mov	r0, r4
 808209c:	f7ff ff48 	bl	8081f30 <_ZN15ConnectionCheck14fullModemResetEv>
 80820a0:	e7b9      	b.n	8082016 <_ZN15ConnectionCheck4loopEv+0x66>
			if (listenWaitForReboot != 0 && millis() - listeningStart >= listenWaitForReboot) {
 80820a2:	6863      	ldr	r3, [r4, #4]
 80820a4:	2b00      	cmp	r3, #0
 80820a6:	d0ca      	beq.n	808203e <_ZN15ConnectionCheck4loopEv+0x8e>
 80820a8:	f002 f8d6 	bl	8084258 <HAL_Timer_Get_Milli_Seconds>
 80820ac:	69a3      	ldr	r3, [r4, #24]
 80820ae:	1ac0      	subs	r0, r0, r3
 80820b0:	6863      	ldr	r3, [r4, #4]
 80820b2:	4298      	cmp	r0, r3
 80820b4:	d3c3      	bcc.n	808203e <_ZN15ConnectionCheck4loopEv+0x8e>
				ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_REBOOT_LISTENING);
 80820b6:	2100      	movs	r1, #0
 80820b8:	2005      	movs	r0, #5
 80820ba:	f000 fbdf 	bl	808287c <_ZN16ConnectionEvents8addEventEii>
				fullModemReset();
 80820be:	4620      	mov	r0, r4
}
 80820c0:	b003      	add	sp, #12
 80820c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				fullModemReset();
 80820c6:	f7ff bf33 	b.w	8081f30 <_ZN15ConnectionCheck14fullModemResetEv>
 80820ca:	bf00      	nop
 80820cc:	20000504 	.word	0x20000504
 80820d0:	0808987f 	.word	0x0808987f
 80820d4:	08089882 	.word	0x08089882
 80820d8:	200003bc 	.word	0x200003bc
 80820dc:	08089887 	.word	0x08089887
 80820e0:	08089893 	.word	0x08089893
 80820e4:	40024000 	.word	0x40024000
 80820e8:	080898a7 	.word	0x080898a7
 80820ec:	2000029c 	.word	0x2000029c

080820f0 <_GLOBAL__sub_I__ZN15ConnectionCheck8instanceE>:
 80820f0:	2200      	movs	r2, #0
 80820f2:	4b01      	ldr	r3, [pc, #4]	; (80820f8 <_GLOBAL__sub_I__ZN15ConnectionCheck8instanceE+0x8>)
 80820f4:	601a      	str	r2, [r3, #0]
}
 80820f6:	4770      	bx	lr
 80820f8:	2000029c 	.word	0x2000029c

080820fc <_ZN6Thread3runEPv>:

private:

    static os_thread_return_t run(void* param) {
        Data* th = (Data*)param;
        th->started = true;
 80820fc:	2301      	movs	r3, #1
    static os_thread_return_t run(void* param) {
 80820fe:	b510      	push	{r4, lr}
        th->started = true;
 8082100:	7403      	strb	r3, [r0, #16]
        if (th->func) {
 8082102:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
 8082104:	4604      	mov	r4, r0
        if (th->func) {
 8082106:	b143      	cbz	r3, 808211a <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
 8082108:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808210a:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
 808210c:	2301      	movs	r3, #1
        os_thread_exit(nullptr);
 808210e:	2000      	movs	r0, #0
        th->exited = true;
 8082110:	7463      	strb	r3, [r4, #17]
    }
 8082112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
 8082116:	f002 b92f 	b.w	8084378 <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 808211a:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
 808211c:	2800      	cmp	r0, #0
 808211e:	d0f5      	beq.n	808210c <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
 8082120:	6883      	ldr	r3, [r0, #8]
 8082122:	b90b      	cbnz	r3, 8082128 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
 8082124:	f005 fd8b 	bl	8087c3e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082128:	68c3      	ldr	r3, [r0, #12]
 808212a:	e7ee      	b.n	808210a <_ZN6Thread3runEPv+0xe>

0808212c <_ZN18AppWatchdogWrapper16watchdogCallbackEv>:

}


// static
void AppWatchdogWrapper::watchdogCallback() {
 808212c:	b508      	push	{r3, lr}
	// This isn't quite safe; connectionEvents.add should only be called from the main loop thread,
	// but since by definition the main loop thread is stuck when the app watchdog fires, this is
	// probably not that unsafe. (The application watchdog runs in a separate thread.)
	ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_APP_WATCHDOG);
 808212e:	2100      	movs	r1, #0
 8082130:	2009      	movs	r0, #9
 8082132:	f000 fba3 	bl	808287c <_ZN16ConnectionEvents8addEventEii>
	System.reset();
}
 8082136:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	System.reset();
 808213a:	f002 bd32 	b.w	8084ba2 <_ZN11SystemClass5resetEv>

0808213e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>:
      operator()(_Tp* __ptr) const
 808213e:	b538      	push	{r3, r4, r5, lr}
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
 8082140:	6805      	ldr	r5, [r0, #0]
      operator()(_Tp* __ptr) const
 8082142:	4604      	mov	r4, r0
	if (__ptr != nullptr)
 8082144:	b135      	cbz	r5, 8082154 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0+0x16>
    class function<_Res(_ArgTypes...)>
 8082146:	4628      	mov	r0, r5
 8082148:	f7fe f924 	bl	8080394 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
 808214c:	2110      	movs	r1, #16
 808214e:	4628      	mov	r0, r5
 8082150:	f005 fd6f 	bl	8087c32 <_ZdlPvj>
 8082154:	4620      	mov	r0, r4
      }
 8082156:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delete __ptr;
 808215a:	2114      	movs	r1, #20
 808215c:	f005 bd69 	b.w	8087c32 <_ZdlPvj>

08082160 <_ZN18AppWatchdogWrapperD1Ev>:
AppWatchdogWrapper::~AppWatchdogWrapper() {
 8082160:	b510      	push	{r4, lr}
 8082162:	4b11      	ldr	r3, [pc, #68]	; (80821a8 <_ZN18AppWatchdogWrapperD1Ev+0x48>)
 8082164:	4604      	mov	r4, r0
 8082166:	6003      	str	r3, [r0, #0]
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8082168:	6983      	ldr	r3, [r0, #24]
        if (!isValid())
 808216a:	b19b      	cbz	r3, 8082194 <_ZN18AppWatchdogWrapperD1Ev+0x34>
        return isValid() && os_thread_is_current(d_->handle);
 808216c:	6858      	ldr	r0, [r3, #4]
 808216e:	f002 f89b 	bl	80842a8 <os_thread_is_current>
 8082172:	b978      	cbnz	r0, 8082194 <_ZN18AppWatchdogWrapperD1Ev+0x34>
 8082174:	69a3      	ldr	r3, [r4, #24]
        if (!d_->exited) {
 8082176:	7c5a      	ldrb	r2, [r3, #17]
 8082178:	b912      	cbnz	r2, 8082180 <_ZN18AppWatchdogWrapperD1Ev+0x20>
        return isValid() && os_thread_join(d_->handle)==0;
 808217a:	6858      	ldr	r0, [r3, #4]
 808217c:	f002 f8a4 	bl	80842c8 <os_thread_join>
        os_thread_cleanup(d_->handle);
 8082180:	69a3      	ldr	r3, [r4, #24]
 8082182:	6858      	ldr	r0, [r3, #4]
 8082184:	f002 f8a8 	bl	80842d8 <os_thread_cleanup>
 8082188:	2300      	movs	r3, #0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808218a:	69a0      	ldr	r0, [r4, #24]
      __a = _GLIBCXX_MOVE(__b);
 808218c:	61a3      	str	r3, [r4, #24]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
 808218e:	b108      	cbz	r0, 8082194 <_ZN18AppWatchdogWrapperD1Ev+0x34>
      operator()(_Tp* __ptr) const
 8082190:	f7ff ffd5 	bl	808213e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
	if (__ptr != nullptr)
 8082194:	69a0      	ldr	r0, [r4, #24]
 8082196:	b108      	cbz	r0, 808219c <_ZN18AppWatchdogWrapperD1Ev+0x3c>
      operator()(_Tp* __ptr) const
 8082198:	f7ff ffd1 	bl	808213e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
 808219c:	f104 0008 	add.w	r0, r4, #8
 80821a0:	f7fe f8f8 	bl	8080394 <_ZNSt14_Function_baseD1Ev>
}
 80821a4:	4620      	mov	r0, r4
 80821a6:	bd10      	pop	{r4, pc}
 80821a8:	080898e0 	.word	0x080898e0

080821ac <_ZN18AppWatchdogWrapperD0Ev>:
AppWatchdogWrapper::~AppWatchdogWrapper() {
 80821ac:	b510      	push	{r4, lr}
 80821ae:	4604      	mov	r4, r0
}
 80821b0:	f7ff ffd6 	bl	8082160 <_ZN18AppWatchdogWrapperD1Ev>
 80821b4:	4620      	mov	r0, r4
 80821b6:	211c      	movs	r1, #28
 80821b8:	f005 fd3b 	bl	8087c32 <_ZdlPvj>
 80821bc:	4620      	mov	r0, r4
 80821be:	bd10      	pop	{r4, pc}

080821c0 <_ZN18AppWatchdogWrapperC1Em>:
AppWatchdogWrapper::AppWatchdogWrapper(unsigned long timeoutMs) : wd(timeoutMs, watchdogCallback, 1800) {
 80821c0:	b570      	push	{r4, r5, r6, lr}
 80821c2:	4606      	mov	r6, r0
    _Function_base() : _M_manager(nullptr) { }
 80821c4:	2500      	movs	r5, #0
 80821c6:	4604      	mov	r4, r0
 80821c8:	4b23      	ldr	r3, [pc, #140]	; (8082258 <_ZN18AppWatchdogWrapperC1Em+0x98>)
 80821ca:	b086      	sub	sp, #24
 80821cc:	f846 3b04 	str.w	r3, [r6], #4
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 80821d0:	4b22      	ldr	r3, [pc, #136]	; (808225c <_ZN18AppWatchdogWrapperC1Em+0x9c>)
    static const unsigned DEFAULT_STACK_SIZE = 512;

	ApplicationWatchdog(unsigned timeout_ms, std::function<void(void)> fn, unsigned stack_size=DEFAULT_STACK_SIZE) :
		timeout(timeout_ms),
		timeout_fn(fn),
		thread("appwdt", start, this, OS_THREAD_PRIORITY_CRITICAL, stack_size)
 80821d2:	6041      	str	r1, [r0, #4]
 80821d4:	9302      	str	r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
 80821d6:	4b22      	ldr	r3, [pc, #136]	; (8082260 <_ZN18AppWatchdogWrapperC1Em+0xa0>)
    _Function_base() : _M_manager(nullptr) { }
 80821d8:	6105      	str	r5, [r0, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 80821da:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 80821dc:	4b21      	ldr	r3, [pc, #132]	; (8082264 <_ZN18AppWatchdogWrapperC1Em+0xa4>)
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80821de:	a902      	add	r1, sp, #8
 80821e0:	2202      	movs	r2, #2
 80821e2:	1d30      	adds	r0, r6, #4
	    _M_manager = &_My_handler::_M_manager;
 80821e4:	9304      	str	r3, [sp, #16]
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80821e6:	f7fd ff88 	bl	80800fa <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	  _M_invoker = __x._M_invoker;
 80821ea:	9b05      	ldr	r3, [sp, #20]
        : d_(new(std::nothrow) Data)
 80821ec:	2014      	movs	r0, #20
 80821ee:	6163      	str	r3, [r4, #20]
	  _M_manager = __x._M_manager;
 80821f0:	9b04      	ldr	r3, [sp, #16]
 80821f2:	491d      	ldr	r1, [pc, #116]	; (8082268 <_ZN18AppWatchdogWrapperC1Em+0xa8>)
 80821f4:	6123      	str	r3, [r4, #16]
 80821f6:	f005 fd1e 	bl	8087c36 <_ZnwjRKSt9nothrow_t>
 80821fa:	b128      	cbz	r0, 8082208 <_ZN18AppWatchdogWrapperC1Em+0x48>
            exited(false) {
 80821fc:	e9c0 5500 	strd	r5, r5, [r0]
 8082200:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8082204:	7405      	strb	r5, [r0, #16]
 8082206:	7445      	strb	r5, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8082208:	61a0      	str	r0, [r4, #24]
        if (!d_) {
 808220a:	b1a0      	cbz	r0, 8082236 <_ZN18AppWatchdogWrapperC1Em+0x76>
        d_->func = function;
 808220c:	4b17      	ldr	r3, [pc, #92]	; (808226c <_ZN18AppWatchdogWrapperC1Em+0xac>)
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 808220e:	2209      	movs	r2, #9
        d_->func_param = function_param;
 8082210:	e9c0 3602 	strd	r3, r6, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 8082214:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8082218:	4915      	ldr	r1, [pc, #84]	; (8082270 <_ZN18AppWatchdogWrapperC1Em+0xb0>)
 808221a:	e9cd 0300 	strd	r0, r3, [sp]
 808221e:	4b15      	ldr	r3, [pc, #84]	; (8082274 <_ZN18AppWatchdogWrapperC1Em+0xb4>)
 8082220:	3004      	adds	r0, #4
 8082222:	f002 f839 	bl	8084298 <os_thread_create>
 8082226:	b930      	cbnz	r0, 8082236 <_ZN18AppWatchdogWrapperC1Em+0x76>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8082228:	69a3      	ldr	r3, [r4, #24]
        while (!d_->started) {
 808222a:	7c1b      	ldrb	r3, [r3, #16]
 808222c:	b94b      	cbnz	r3, 8082242 <_ZN18AppWatchdogWrapperC1Em+0x82>
            HAL_Delay_Milliseconds(1);
 808222e:	2001      	movs	r0, #1
 8082230:	f002 f802 	bl	8084238 <HAL_Delay_Milliseconds>
        while (!d_->started) {
 8082234:	e7f8      	b.n	8082228 <_ZN18AppWatchdogWrapperC1Em+0x68>
 8082236:	2300      	movs	r3, #0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082238:	69a0      	ldr	r0, [r4, #24]
      __a = _GLIBCXX_MOVE(__b);
 808223a:	61a3      	str	r3, [r4, #24]
	if (__p != pointer())
 808223c:	b108      	cbz	r0, 8082242 <_ZN18AppWatchdogWrapperC1Em+0x82>
      operator()(_Tp* __ptr) const
 808223e:	f7ff ff7e 	bl	808213e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8082242:	f002 f809 	bl	8084258 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8082246:	4b0c      	ldr	r3, [pc, #48]	; (8082278 <_ZN18AppWatchdogWrapperC1Em+0xb8>)
 8082248:	6018      	str	r0, [r3, #0]
    class function<_Res(_ArgTypes...)>
 808224a:	a802      	add	r0, sp, #8
 808224c:	f7fe f8a2 	bl	8080394 <_ZNSt14_Function_baseD1Ev>
}
 8082250:	4620      	mov	r0, r4
 8082252:	b006      	add	sp, #24
 8082254:	bd70      	pop	{r4, r5, r6, pc}
 8082256:	bf00      	nop
 8082258:	080898e0 	.word	0x080898e0
 808225c:	0808212d 	.word	0x0808212d
 8082260:	080800f7 	.word	0x080800f7
 8082264:	080800fb 	.word	0x080800fb
 8082268:	08089f15 	.word	0x08089f15
 808226c:	08087b01 	.word	0x08087b01
 8082270:	080898d0 	.word	0x080898d0
 8082274:	080820fd 	.word	0x080820fd
 8082278:	2000055c 	.word	0x2000055c

0808227c <_ZN12SessionCheck19subscriptionHandlerEPKcS1_>:
void SessionCheck::loop() {
	stateHandler(*this);
}

void SessionCheck::subscriptionHandler(const char *eventName, const char *data) {
	gotResponse = true;
 808227c:	2301      	movs	r3, #1
 808227e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 8082282:	4770      	bx	lr

08082284 <_ZNSt17_Function_handlerIFvR12SessionCheckEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
 8082284:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8082286:	4603      	mov	r3, r0
	switch (__op)
 8082288:	d102      	bne.n	8082290 <_ZNSt17_Function_handlerIFvR12SessionCheckEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
 808228a:	6001      	str	r1, [r0, #0]
      }
 808228c:	2000      	movs	r0, #0
 808228e:	4770      	bx	lr
	  switch (__op)
 8082290:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8082292:	bf04      	itt	eq
 8082294:	e9d1 0100 	ldrdeq	r0, r1, [r1]
 8082298:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
 808229c:	e7f6      	b.n	808228c <_ZNSt17_Function_handlerIFvR12SessionCheckEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

0808229e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
 808229e:	b510      	push	{r4, lr}
 80822a0:	4604      	mov	r4, r0
          _M_dispose();
 80822a2:	6803      	ldr	r3, [r0, #0]
 80822a4:	689b      	ldr	r3, [r3, #8]
 80822a6:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80822a8:	68a3      	ldr	r3, [r4, #8]
 80822aa:	3b01      	subs	r3, #1
 80822ac:	60a3      	str	r3, [r4, #8]
 80822ae:	b92b      	cbnz	r3, 80822bc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
 80822b0:	6823      	ldr	r3, [r4, #0]
 80822b2:	4620      	mov	r0, r4
    }
 80822b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 80822b8:	68db      	ldr	r3, [r3, #12]
 80822ba:	4718      	bx	r3
    }
 80822bc:	bd10      	pop	{r4, pc}

080822be <_ZNSt17_Function_handlerIFvR12SessionCheckEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80822be:	4603      	mov	r3, r0
 80822c0:	b410      	push	{r4}
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
 80822c2:	6842      	ldr	r2, [r0, #4]
 80822c4:	681b      	ldr	r3, [r3, #0]
 80822c6:	1054      	asrs	r4, r2, #1
 80822c8:	eb01 0062 	add.w	r0, r1, r2, asr #1
 80822cc:	07d2      	lsls	r2, r2, #31
 80822ce:	bf48      	it	mi
 80822d0:	590a      	ldrmi	r2, [r1, r4]
      }
 80822d2:	bc10      	pop	{r4}
 80822d4:	bf48      	it	mi
 80822d6:	58d3      	ldrmi	r3, [r2, r3]
 80822d8:	4718      	bx	r3

080822da <_ZNSt14_Function_base13_Base_managerISt5_BindIFM12SessionCheckFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	  switch (__op)
 80822da:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80822dc:	b538      	push	{r3, r4, r5, lr}
 80822de:	4604      	mov	r4, r0
	  switch (__op)
 80822e0:	d007      	beq.n	80822f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM12SessionCheckFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x18>
 80822e2:	2a03      	cmp	r2, #3
 80822e4:	d011      	beq.n	808230a <_ZNSt14_Function_base13_Base_managerISt5_BindIFM12SessionCheckFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x30>
 80822e6:	2a01      	cmp	r2, #1
 80822e8:	d101      	bne.n	80822ee <_ZNSt14_Function_base13_Base_managerISt5_BindIFM12SessionCheckFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80822ea:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
 80822ec:	6023      	str	r3, [r4, #0]
	}
 80822ee:	2000      	movs	r0, #0
 80822f0:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80822f2:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
 80822f4:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80822f6:	f7fd fee0 	bl	80800ba <_Znwj>
 80822fa:	4603      	mov	r3, r0
 80822fc:	2800      	cmp	r0, #0
 80822fe:	d0f5      	beq.n	80822ec <_ZNSt14_Function_base13_Base_managerISt5_BindIFM12SessionCheckFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
 8082300:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8082304:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8082308:	e7f0      	b.n	80822ec <_ZNSt14_Function_base13_Base_managerISt5_BindIFM12SessionCheckFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
 808230a:	6800      	ldr	r0, [r0, #0]
 808230c:	2800      	cmp	r0, #0
 808230e:	d0ee      	beq.n	80822ee <_ZNSt14_Function_base13_Base_managerISt5_BindIFM12SessionCheckFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
 8082310:	210c      	movs	r1, #12
 8082312:	f005 fc8e 	bl	8087c32 <_ZdlPvj>
 8082316:	e7ea      	b.n	80822ee <_ZNSt14_Function_base13_Base_managerISt5_BindIFM12SessionCheckFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>

08082318 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM12SessionCheckFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE9_M_invokeERKSt9_Any_dataOS1_SH_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8082318:	b470      	push	{r4, r5, r6}
	    return __source._M_access<_Functor*>();
 808231a:	6803      	ldr	r3, [r0, #0]
	  return std::__invoke(_M_f,
 808231c:	6809      	ldr	r1, [r1, #0]
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
 808231e:	685c      	ldr	r4, [r3, #4]
 8082320:	689d      	ldr	r5, [r3, #8]
 8082322:	1066      	asrs	r6, r4, #1
 8082324:	eb05 0064 	add.w	r0, r5, r4, asr #1
 8082328:	07e4      	lsls	r4, r4, #31
 808232a:	bf48      	it	mi
 808232c:	59ac      	ldrmi	r4, [r5, r6]
 808232e:	681b      	ldr	r3, [r3, #0]
 8082330:	6812      	ldr	r2, [r2, #0]
 8082332:	bf48      	it	mi
 8082334:	58e3      	ldrmi	r3, [r4, r3]
      }
 8082336:	bc70      	pop	{r4, r5, r6}
 8082338:	4718      	bx	r3
	...

0808233c <_ZN12SessionCheckD1Ev>:
SessionCheck::~SessionCheck() {
 808233c:	b510      	push	{r4, lr}
 808233e:	4604      	mov	r4, r0
 8082340:	4b05      	ldr	r3, [pc, #20]	; (8082358 <_ZN12SessionCheckD1Ev+0x1c>)
 8082342:	f840 3b2c 	str.w	r3, [r0], #44
    class function<_Res(_ArgTypes...)>
 8082346:	f7fe f825 	bl	8080394 <_ZNSt14_Function_baseD1Ev>
 808234a:	f104 0010 	add.w	r0, r4, #16
 808234e:	f002 fccb 	bl	8084ce8 <_ZN6StringD1Ev>
}
 8082352:	4620      	mov	r0, r4
 8082354:	bd10      	pop	{r4, pc}
 8082356:	bf00      	nop
 8082358:	08089914 	.word	0x08089914

0808235c <_ZN12SessionCheckD0Ev>:
SessionCheck::~SessionCheck() {
 808235c:	b510      	push	{r4, lr}
 808235e:	4604      	mov	r4, r0
}
 8082360:	f7ff ffec 	bl	808233c <_ZN12SessionCheckD1Ev>
 8082364:	4620      	mov	r0, r4
 8082366:	2140      	movs	r1, #64	; 0x40
 8082368:	f005 fc63 	bl	8087c32 <_ZdlPvj>
 808236c:	4620      	mov	r0, r4
 808236e:	bd10      	pop	{r4, pc}

08082370 <_ZN12SessionCheckC1ExPKc>:
SessionCheck::SessionCheck(time_t checkPeriodSecs, const char *eventSuffix) : checkPeriodSecs(checkPeriodSecs) {
 8082370:	b530      	push	{r4, r5, lr}
 8082372:	4919      	ldr	r1, [pc, #100]	; (80823d8 <_ZN12SessionCheckC1ExPKc+0x68>)
 8082374:	f100 0510 	add.w	r5, r0, #16
 8082378:	b089      	sub	sp, #36	; 0x24
 808237a:	4604      	mov	r4, r0
 808237c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8082380:	6001      	str	r1, [r0, #0]
 8082382:	4916      	ldr	r1, [pc, #88]	; (80823dc <_ZN12SessionCheckC1ExPKc+0x6c>)
 8082384:	4628      	mov	r0, r5
 8082386:	f002 fcf9 	bl	8084d7c <_ZN6StringC1EPKc>
 808238a:	2300      	movs	r3, #0
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 808238c:	4a14      	ldr	r2, [pc, #80]	; (80823e0 <_ZN12SessionCheckC1ExPKc+0x70>)
 808238e:	6223      	str	r3, [r4, #32]
 8082390:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
 8082394:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8082398:	62a3      	str	r3, [r4, #40]	; 0x28
	    _M_invoker = &_My_handler::_M_invoke;
 808239a:	4b12      	ldr	r3, [pc, #72]	; (80823e4 <_ZN12SessionCheckC1ExPKc+0x74>)
    static String deviceID(void) { return spark_deviceID(); }
 808239c:	a804      	add	r0, sp, #16
 808239e:	63a3      	str	r3, [r4, #56]	; 0x38
	    _M_manager = &_My_handler::_M_manager;
 80823a0:	4b11      	ldr	r3, [pc, #68]	; (80823e8 <_ZN12SessionCheckC1ExPKc+0x78>)
 80823a2:	6363      	str	r3, [r4, #52]	; 0x34
 80823a4:	f002 fa48 	bl	8084838 <spark_deviceID>
	StringSumHelper(const String &s) : String(s) {}
 80823a8:	a904      	add	r1, sp, #16
 80823aa:	4668      	mov	r0, sp
 80823ac:	f002 fd30 	bl	8084e10 <_ZN6StringC1ERKS_>
	eventName = System.deviceID() + "/" + eventSuffix;
 80823b0:	4668      	mov	r0, sp
 80823b2:	490e      	ldr	r1, [pc, #56]	; (80823ec <_ZN12SessionCheckC1ExPKc+0x7c>)
 80823b4:	f002 fd73 	bl	8084e9e <_ZplRK15StringSumHelperPKc>
 80823b8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80823ba:	f002 fd70 	bl	8084e9e <_ZplRK15StringSumHelperPKc>
 80823be:	4601      	mov	r1, r0
 80823c0:	4628      	mov	r0, r5
 80823c2:	f002 fd16 	bl	8084df2 <_ZN6StringaSERKS_>
class StringSumHelper : public String
 80823c6:	4668      	mov	r0, sp
 80823c8:	f002 fc8e 	bl	8084ce8 <_ZN6StringD1Ev>
 80823cc:	a804      	add	r0, sp, #16
 80823ce:	f002 fc8b 	bl	8084ce8 <_ZN6StringD1Ev>
}
 80823d2:	4620      	mov	r0, r4
 80823d4:	b009      	add	sp, #36	; 0x24
 80823d6:	bd30      	pop	{r4, r5, pc}
 80823d8:	08089914 	.word	0x08089914
 80823dc:	08089844 	.word	0x08089844
 80823e0:	08082579 	.word	0x08082579
 80823e4:	080822bf 	.word	0x080822bf
 80823e8:	08082285 	.word	0x08082285
 80823ec:	080898e8 	.word	0x080898e8

080823f0 <_ZN12SessionCheck4loopEv>:
void SessionCheck::loop() {
 80823f0:	b510      	push	{r4, lr}
      if (_M_empty())
 80823f2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80823f4:	4601      	mov	r1, r0
 80823f6:	b90b      	cbnz	r3, 80823fc <_ZN12SessionCheck4loopEv+0xc>
	__throw_bad_function_call();
 80823f8:	f005 fc21 	bl	8087c3e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80823fc:	6b83      	ldr	r3, [r0, #56]	; 0x38
}
 80823fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8082402:	302c      	adds	r0, #44	; 0x2c
 8082404:	4718      	bx	r3

08082406 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 8082406:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8082408:	2300      	movs	r3, #0
 808240a:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 808240c:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 808240e:	4604      	mov	r4, r0
 8082410:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 8082412:	b12b      	cbz	r3, 8082420 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8082414:	2202      	movs	r2, #2
 8082416:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8082418:	68eb      	ldr	r3, [r5, #12]
 808241a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 808241c:	68ab      	ldr	r3, [r5, #8]
 808241e:	60a3      	str	r3, [r4, #8]
    }
 8082420:	4620      	mov	r0, r4
 8082422:	bd38      	pop	{r3, r4, r5, pc}

08082424 <_ZN12SessionCheck5setupEv>:
void SessionCheck::setup() {
 8082424:	b570      	push	{r4, r5, r6, lr}
	if (sessionRetainedData.magic != SESSION_MAGIC) {
 8082426:	4b1d      	ldr	r3, [pc, #116]	; (808249c <_ZN12SessionCheck5setupEv+0x78>)
 8082428:	4a1d      	ldr	r2, [pc, #116]	; (80824a0 <_ZN12SessionCheck5setupEv+0x7c>)
 808242a:	6819      	ldr	r1, [r3, #0]
void SessionCheck::setup() {
 808242c:	4604      	mov	r4, r0
	if (sessionRetainedData.magic != SESSION_MAGIC) {
 808242e:	4291      	cmp	r1, r2
void SessionCheck::setup() {
 8082430:	b08a      	sub	sp, #40	; 0x28
	if (sessionRetainedData.magic != SESSION_MAGIC) {
 8082432:	d004      	beq.n	808243e <_ZN12SessionCheck5setupEv+0x1a>
		sessionRetainedData.lastCheckSecs = 0;
 8082434:	2000      	movs	r0, #0
 8082436:	2100      	movs	r1, #0
 8082438:	e9c3 0102 	strd	r0, r1, [r3, #8]
		sessionRetainedData.magic = SESSION_MAGIC;
 808243c:	601a      	str	r2, [r3, #0]
    _Function_base() : _M_manager(nullptr) { }
 808243e:	2500      	movs	r5, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082440:	200c      	movs	r0, #12
        operator const char*() const { return c_str(); }
 8082442:	6926      	ldr	r6, [r4, #16]
    _Function_base() : _M_manager(nullptr) { }
 8082444:	9504      	str	r5, [sp, #16]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082446:	f7fd fe38 	bl	80800ba <_Znwj>
 808244a:	b118      	cbz	r0, 8082454 <_ZN12SessionCheck5setupEv+0x30>
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
 808244c:	4b15      	ldr	r3, [pc, #84]	; (80824a4 <_ZN12SessionCheck5setupEv+0x80>)
 808244e:	6084      	str	r4, [r0, #8]
 8082450:	e9c0 3500 	strd	r3, r5, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
 8082454:	4b14      	ldr	r3, [pc, #80]	; (80824a8 <_ZN12SessionCheck5setupEv+0x84>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082456:	9002      	str	r0, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
 8082458:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 808245a:	4b14      	ldr	r3, [pc, #80]	; (80824ac <_ZN12SessionCheck5setupEv+0x88>)
        return subscribe_wiring(eventName, handler, scope);
 808245c:	a902      	add	r1, sp, #8
 808245e:	a806      	add	r0, sp, #24
 8082460:	9304      	str	r3, [sp, #16]
 8082462:	f7ff ffd0 	bl	8082406 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
        if (handler) // if the call-wrapper has wrapped a callable object
 8082466:	9b08      	ldr	r3, [sp, #32]
 8082468:	b17b      	cbz	r3, 808248a <_ZN12SessionCheck5setupEv+0x66>
            auto wrapper = new wiring_event_handler_t(handler);
 808246a:	2010      	movs	r0, #16
 808246c:	f7fd fe25 	bl	80800ba <_Znwj>
 8082470:	4604      	mov	r4, r0
 8082472:	b150      	cbz	r0, 808248a <_ZN12SessionCheck5setupEv+0x66>
 8082474:	a906      	add	r1, sp, #24
 8082476:	f7ff ffc6 	bl	8082406 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
                success = spark_subscribe(eventName, (EventHandler)call_wiring_event_handler, wrapper, scope, deviceID, NULL);
 808247a:	2300      	movs	r3, #0
 808247c:	4622      	mov	r2, r4
 808247e:	4630      	mov	r0, r6
 8082480:	e9cd 3300 	strd	r3, r3, [sp]
 8082484:	490a      	ldr	r1, [pc, #40]	; (80824b0 <_ZN12SessionCheck5setupEv+0x8c>)
 8082486:	f002 f9e7 	bl	8084858 <spark_subscribe>
    class function<_Res(_ArgTypes...)>
 808248a:	a806      	add	r0, sp, #24
 808248c:	f7fd ff82 	bl	8080394 <_ZNSt14_Function_baseD1Ev>
 8082490:	a802      	add	r0, sp, #8
 8082492:	f7fd ff7f 	bl	8080394 <_ZNSt14_Function_baseD1Ev>
}
 8082496:	b00a      	add	sp, #40	; 0x28
 8082498:	bd70      	pop	{r4, r5, r6, pc}
 808249a:	bf00      	nop
 808249c:	40024008 	.word	0x40024008
 80824a0:	4a6849fe 	.word	0x4a6849fe
 80824a4:	0808227d 	.word	0x0808227d
 80824a8:	08082319 	.word	0x08082319
 80824ac:	080822db 	.word	0x080822db
 80824b0:	080868f7 	.word	0x080868f7

080824b4 <_ZNSt8functionIFvR12SessionCheckEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
 80824b4:	b510      	push	{r4, lr}
 80824b6:	e9d1 2300 	ldrd	r2, r3, [r1]
    _Function_base() : _M_manager(nullptr) { }
 80824ba:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
 80824bc:	b086      	sub	sp, #24
 80824be:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
 80824c0:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
 80824c2:	b90a      	cbnz	r2, 80824c8 <_ZNSt8functionIFvR12SessionCheckEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
 80824c4:	07d9      	lsls	r1, r3, #31
 80824c6:	d505      	bpl.n	80824d4 <_ZNSt8functionIFvR12SessionCheckEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 80824c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
 80824cc:	4b0f      	ldr	r3, [pc, #60]	; (808250c <_ZNSt8functionIFvR12SessionCheckEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
 80824ce:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 80824d0:	4b0f      	ldr	r3, [pc, #60]	; (8082510 <_ZNSt8functionIFvR12SessionCheckEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
 80824d2:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80824d4:	466a      	mov	r2, sp
 80824d6:	ab02      	add	r3, sp, #8
 80824d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80824dc:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80824e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80824e4:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80824e8:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80824ec:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80824ee:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80824f2:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80824f4:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80824f6:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80824f8:	9104      	str	r1, [sp, #16]
 80824fa:	68e1      	ldr	r1, [r4, #12]
    class function<_Res(_ArgTypes...)>
 80824fc:	4618      	mov	r0, r3
      __b = _GLIBCXX_MOVE(__tmp);
 80824fe:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 8082500:	9105      	str	r1, [sp, #20]
 8082502:	f7fd ff47 	bl	8080394 <_ZNSt14_Function_baseD1Ev>
	}
 8082506:	4620      	mov	r0, r4
 8082508:	b006      	add	sp, #24
 808250a:	bd10      	pop	{r4, pc}
 808250c:	080822bf 	.word	0x080822bf
 8082510:	08082285 	.word	0x08082285

08082514 <_ZN12SessionCheck9sendEventEv>:
	numFailures = 0;

	sendEvent();
}

void SessionCheck::sendEvent() {
 8082514:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	gotResponse = false;
 8082516:	2300      	movs	r3, #0
	stateHandler = &SessionCheck::waitForResponseState;
 8082518:	4a12      	ldr	r2, [pc, #72]	; (8082564 <_ZN12SessionCheck9sendEventEv+0x50>)
	gotResponse = false;
 808251a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
void SessionCheck::sendEvent() {
 808251e:	4604      	mov	r4, r0
	stateHandler = &SessionCheck::waitForResponseState;
 8082520:	a902      	add	r1, sp, #8
 8082522:	302c      	adds	r0, #44	; 0x2c
 8082524:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8082528:	f7ff ffc4 	bl	80824b4 <_ZNSt8functionIFvR12SessionCheckEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
 808252c:	f001 fe94 	bl	8084258 <HAL_Timer_Get_Milli_Seconds>
	stateTime = millis();

	Log.info("publishing session check event %s", eventName.c_str());
 8082530:	6922      	ldr	r2, [r4, #16]
 8082532:	490d      	ldr	r1, [pc, #52]	; (8082568 <_ZN12SessionCheck9sendEventEv+0x54>)
	stateTime = millis();
 8082534:	6220      	str	r0, [r4, #32]
	Log.info("publishing session check event %s", eventName.c_str());
 8082536:	480d      	ldr	r0, [pc, #52]	; (808256c <_ZN12SessionCheck9sendEventEv+0x58>)
 8082538:	f7ff fc9c 	bl	8081e74 <_ZNK5spark6Logger4infoEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 808253c:	4b0c      	ldr	r3, [pc, #48]	; (8082570 <_ZN12SessionCheck9sendEventEv+0x5c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 808253e:	a802      	add	r0, sp, #8
 8082540:	781b      	ldrb	r3, [r3, #0]
 8082542:	4a0c      	ldr	r2, [pc, #48]	; (8082574 <_ZN12SessionCheck9sendEventEv+0x60>)
 8082544:	f88d 3000 	strb.w	r3, [sp]
 8082548:	6921      	ldr	r1, [r4, #16]
 808254a:	233c      	movs	r3, #60	; 0x3c
 808254c:	f004 fae6 	bl	8086b1c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
 8082550:	9803      	ldr	r0, [sp, #12]
 8082552:	b128      	cbz	r0, 8082560 <_ZN12SessionCheck9sendEventEv+0x4c>
      if (--_M_use_count == 0)
 8082554:	6843      	ldr	r3, [r0, #4]
 8082556:	3b01      	subs	r3, #1
 8082558:	6043      	str	r3, [r0, #4]
 808255a:	b90b      	cbnz	r3, 8082560 <_ZN12SessionCheck9sendEventEv+0x4c>
 808255c:	f7ff fe9f 	bl	808229e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>

	// Post our event
	Particle.publish(eventName, "", PRIVATE);
}
 8082560:	b004      	add	sp, #16
 8082562:	bd10      	pop	{r4, pc}
 8082564:	080825d5 	.word	0x080825d5
 8082568:	080898ea 	.word	0x080898ea
 808256c:	200003bc 	.word	0x200003bc
 8082570:	200002a4 	.word	0x200002a4
 8082574:	08089844 	.word	0x08089844

08082578 <_ZN12SessionCheck15waitToSendStateEv>:
void SessionCheck::waitToSendState() {
 8082578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808257a:	4604      	mov	r4, r0
 808257c:	f001 fe6c 	bl	8084258 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - stateTime < CHECK_PERIOD_MS) {
 8082580:	6a23      	ldr	r3, [r4, #32]
 8082582:	1ac0      	subs	r0, r0, r3
 8082584:	f247 532f 	movw	r3, #29999	; 0x752f
 8082588:	4298      	cmp	r0, r3
 808258a:	d920      	bls.n	80825ce <_ZN12SessionCheck15waitToSendStateEv+0x56>
 808258c:	f001 fe64 	bl	8084258 <HAL_Timer_Get_Milli_Seconds>
	stateTime = millis();
 8082590:	6220      	str	r0, [r4, #32]
	if (!Time.isValid()) {
 8082592:	f003 ff79 	bl	8086488 <_ZN9TimeClass7isValidEv>
 8082596:	b1d0      	cbz	r0, 80825ce <_ZN12SessionCheck15waitToSendStateEv+0x56>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8082598:	f002 f946 	bl	8084828 <spark_cloud_flag_connected>
	if (!Particle.connected()) {
 808259c:	b1b8      	cbz	r0, 80825ce <_ZN12SessionCheck15waitToSendStateEv+0x56>
	time_t now = Time.now();
 808259e:	f003 ff90 	bl	80864c2 <_ZN9TimeClass3nowEv>
	if (now - sessionRetainedData.lastCheckSecs < checkPeriodSecs) {
 80825a2:	4d0b      	ldr	r5, [pc, #44]	; (80825d0 <_ZN12SessionCheck15waitToSendStateEv+0x58>)
	time_t now = Time.now();
 80825a4:	17c1      	asrs	r1, r0, #31
	if (now - sessionRetainedData.lastCheckSecs < checkPeriodSecs) {
 80825a6:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 80825aa:	1ac6      	subs	r6, r0, r3
 80825ac:	eb61 0702 	sbc.w	r7, r1, r2
 80825b0:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80825b4:	4296      	cmp	r6, r2
 80825b6:	eb77 0303 	sbcs.w	r3, r7, r3
 80825ba:	db08      	blt.n	80825ce <_ZN12SessionCheck15waitToSendStateEv+0x56>
	numFailures = 0;
 80825bc:	2300      	movs	r3, #0
	sessionRetainedData.lastCheckSecs = now;
 80825be:	e9c5 0102 	strd	r0, r1, [r5, #8]
	numFailures = 0;
 80825c2:	62a3      	str	r3, [r4, #40]	; 0x28
	sendEvent();
 80825c4:	4620      	mov	r0, r4
}
 80825c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	sendEvent();
 80825ca:	f7ff bfa3 	b.w	8082514 <_ZN12SessionCheck9sendEventEv>
}
 80825ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80825d0:	40024008 	.word	0x40024008

080825d4 <_ZN12SessionCheck20waitForResponseStateEv>:

void SessionCheck::waitForResponseState() {
 80825d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (gotResponse) {
 80825d6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
void SessionCheck::waitForResponseState() {
 80825da:	4604      	mov	r4, r0
	if (gotResponse) {
 80825dc:	b153      	cbz	r3, 80825f4 <_ZN12SessionCheck20waitForResponseStateEv+0x20>
		// Success
		stateHandler = &SessionCheck::waitToSendState;
 80825de:	4b22      	ldr	r3, [pc, #136]	; (8082668 <_ZN12SessionCheck20waitForResponseStateEv+0x94>)
 80825e0:	a902      	add	r1, sp, #8
 80825e2:	9302      	str	r3, [sp, #8]
 80825e4:	2300      	movs	r3, #0
 80825e6:	302c      	adds	r0, #44	; 0x2c
 80825e8:	9303      	str	r3, [sp, #12]
 80825ea:	f7ff ff63 	bl	80824b4 <_ZNSt8functionIFvR12SessionCheckEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
 80825ee:	f001 fe33 	bl	8084258 <HAL_Timer_Get_Milli_Seconds>
		stateTime = millis();
 80825f2:	6220      	str	r0, [r4, #32]
 80825f4:	f001 fe30 	bl	8084258 <HAL_Timer_Get_Milli_Seconds>
	}

	if (millis() - stateTime < RECEIVE_TIMEOUT_MS) {
 80825f8:	6a23      	ldr	r3, [r4, #32]
 80825fa:	1ac0      	subs	r0, r0, r3
 80825fc:	f64a 73c7 	movw	r3, #44999	; 0xafc7
 8082600:	4298      	cmp	r0, r3
 8082602:	d90b      	bls.n	808261c <_ZN12SessionCheck20waitForResponseStateEv+0x48>
		// Waiting still
		return;
	}

	ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_SESSION_EVENT_LOST);
 8082604:	2100      	movs	r1, #0
 8082606:	200e      	movs	r0, #14
 8082608:	f000 f938 	bl	808287c <_ZN16ConnectionEvents8addEventEii>

	// Failed to receive event
	if (++numFailures < NUM_FAILURES_BEFORE_RESET_SESSION) {
 808260c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 808260e:	3301      	adds	r3, #1
 8082610:	2b01      	cmp	r3, #1
 8082612:	62a3      	str	r3, [r4, #40]	; 0x28
 8082614:	dc04      	bgt.n	8082620 <_ZN12SessionCheck20waitForResponseStateEv+0x4c>
		// Try sending again just in case
		sendEvent();
 8082616:	4620      	mov	r0, r4
 8082618:	f7ff ff7c 	bl	8082514 <_ZN12SessionCheck9sendEventEv>
		ConnectionCheck::getInstance()->fullModemReset();
	}
	else {
		System.reset();
	}
}
 808261c:	b004      	add	sp, #16
 808261e:	bd10      	pop	{r4, pc}
	ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_SESSION_RESET);
 8082620:	2100      	movs	r1, #0
 8082622:	200f      	movs	r0, #15
 8082624:	f000 f92a 	bl	808287c <_ZN16ConnectionEvents8addEventEii>
 8082628:	4b10      	ldr	r3, [pc, #64]	; (808266c <_ZN12SessionCheck20waitForResponseStateEv+0x98>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 808262a:	a802      	add	r0, sp, #8
 808262c:	781b      	ldrb	r3, [r3, #0]
 808262e:	4a10      	ldr	r2, [pc, #64]	; (8082670 <_ZN12SessionCheck20waitForResponseStateEv+0x9c>)
 8082630:	f88d 3000 	strb.w	r3, [sp]
 8082634:	490f      	ldr	r1, [pc, #60]	; (8082674 <_ZN12SessionCheck20waitForResponseStateEv+0xa0>)
 8082636:	233c      	movs	r3, #60	; 0x3c
 8082638:	f004 fa70 	bl	8086b1c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
 808263c:	9803      	ldr	r0, [sp, #12]
 808263e:	b128      	cbz	r0, 808264c <_ZN12SessionCheck20waitForResponseStateEv+0x78>
      if (--_M_use_count == 0)
 8082640:	6843      	ldr	r3, [r0, #4]
 8082642:	3b01      	subs	r3, #1
 8082644:	6043      	str	r3, [r0, #4]
 8082646:	b90b      	cbnz	r3, 808264c <_ZN12SessionCheck20waitForResponseStateEv+0x78>
 8082648:	f7ff fe29 	bl	808229e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	delay(2000);
 808264c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8082650:	f003 ff52 	bl	80864f8 <delay>
 8082654:	4b08      	ldr	r3, [pc, #32]	; (8082678 <_ZN12SessionCheck20waitForResponseStateEv+0xa4>)
 8082656:	6818      	ldr	r0, [r3, #0]
	if (ConnectionCheck::getInstance()) {
 8082658:	b110      	cbz	r0, 8082660 <_ZN12SessionCheck20waitForResponseStateEv+0x8c>
		ConnectionCheck::getInstance()->fullModemReset();
 808265a:	f7ff fc69 	bl	8081f30 <_ZN15ConnectionCheck14fullModemResetEv>
 808265e:	e7dd      	b.n	808261c <_ZN12SessionCheck20waitForResponseStateEv+0x48>
		System.reset();
 8082660:	f002 fa9f 	bl	8084ba2 <_ZN11SystemClass5resetEv>
 8082664:	e7da      	b.n	808261c <_ZN12SessionCheck20waitForResponseStateEv+0x48>
 8082666:	bf00      	nop
 8082668:	08082579 	.word	0x08082579
 808266c:	200002a4 	.word	0x200002a4
 8082670:	08089844 	.word	0x08089844
 8082674:	080897be 	.word	0x080897be
 8082678:	200002a0 	.word	0x200002a0

0808267c <_GLOBAL__sub_I__ZN12SessionCheck19sessionRetainedDataE>:
        val_(val) {
 808267c:	2201      	movs	r2, #1
 808267e:	4b01      	ldr	r3, [pc, #4]	; (8082684 <_GLOBAL__sub_I__ZN12SessionCheck19sessionRetainedDataE+0x8>)
 8082680:	701a      	strb	r2, [r3, #0]
}
 8082682:	4770      	bx	lr
 8082684:	200002a4 	.word	0x200002a4

08082688 <_ZN16ConnectionEventsD1Ev>:
	instance = this;
}

ConnectionEvents::~ConnectionEvents() {

}
 8082688:	4770      	bx	lr

0808268a <_ZN16ConnectionEventsD0Ev>:
ConnectionEvents::~ConnectionEvents() {
 808268a:	b510      	push	{r4, lr}
 808268c:	4604      	mov	r4, r0
}
 808268e:	210c      	movs	r1, #12
 8082690:	f005 facf 	bl	8087c32 <_ZdlPvj>
 8082694:	4620      	mov	r0, r4
 8082696:	bd10      	pop	{r4, pc}

08082698 <_ZN16ConnectionEventsC1EPKc>:
ConnectionEvents::ConnectionEvents(const char *connectionEventName) : connectionEventName(connectionEventName) {
 8082698:	4a03      	ldr	r2, [pc, #12]	; (80826a8 <_ZN16ConnectionEventsC1EPKc+0x10>)
 808269a:	e9c0 2100 	strd	r2, r1, [r0]
 808269e:	2200      	movs	r2, #0
 80826a0:	6082      	str	r2, [r0, #8]
	instance = this;
 80826a2:	4a02      	ldr	r2, [pc, #8]	; (80826ac <_ZN16ConnectionEventsC1EPKc+0x14>)
 80826a4:	6010      	str	r0, [r2, #0]
}
 80826a6:	4770      	bx	lr
 80826a8:	080899d4 	.word	0x080899d4
 80826ac:	200002a8 	.word	0x200002a8

080826b0 <_ZN16ConnectionEvents4loopEv>:
	}
}

// This should be called from loop()
// If there are queued events and there is a cloud connection they're published, oldest first.
void ConnectionEvents::loop() {
 80826b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	if (connectionEventData.eventCount == 0) {
 80826b4:	4c38      	ldr	r4, [pc, #224]	; (8082798 <_ZN16ConnectionEvents4loopEv+0xe8>)
void ConnectionEvents::loop() {
 80826b6:	4607      	mov	r7, r0
	if (connectionEventData.eventCount == 0) {
 80826b8:	6863      	ldr	r3, [r4, #4]
void ConnectionEvents::loop() {
 80826ba:	b0d4      	sub	sp, #336	; 0x150
	if (connectionEventData.eventCount == 0) {
 80826bc:	2b00      	cmp	r3, #0
 80826be:	d062      	beq.n	8082786 <_ZN16ConnectionEvents4loopEv+0xd6>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80826c0:	f002 f8b2 	bl	8084828 <spark_cloud_flag_connected>
		// No events to send
		return;
	}

	if (!Particle.connected()) {
 80826c4:	2800      	cmp	r0, #0
 80826c6:	d05e      	beq.n	8082786 <_ZN16ConnectionEvents4loopEv+0xd6>
 80826c8:	f001 fdc6 	bl	8084258 <HAL_Timer_Get_Milli_Seconds>
		// Not cloud connected, can't publish
		return;
	}

	if (millis() - connectionEventLastSent < PUBLISH_MIN_PERIOD_MS) {
 80826cc:	68bb      	ldr	r3, [r7, #8]
 80826ce:	1ac0      	subs	r0, r0, r3
 80826d0:	f240 33f1 	movw	r3, #1009	; 0x3f1
 80826d4:	4298      	cmp	r0, r3
 80826d6:	d956      	bls.n	8082786 <_ZN16ConnectionEvents4loopEv+0xd6>
	}

	// Send events
	char buf[256]; // 255 data bytes, plus null-terminator
	size_t numHandled;
	size_t offset = 0;
 80826d8:	f04f 0800 	mov.w	r8, #0
 80826dc:	4626      	mov	r6, r4

	// Pack as many events as we have, up to what will fit in a 255 byte publish
	for(numHandled = 0; numHandled < connectionEventData.eventCount; numHandled++) {
 80826de:	4645      	mov	r5, r8
		char entryBuf[64];

		ConnectionEventInfo *ev = &connectionEventData.events[numHandled];
		size_t len = snprintf(entryBuf, sizeof(entryBuf), "%lu,%lu,%d,%d;", ev->tsDate, ev->tsMillis, ev->eventCode, ev->data);
 80826e0:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 80827b0 <_ZN16ConnectionEvents4loopEv+0x100>
	for(numHandled = 0; numHandled < connectionEventData.eventCount; numHandled++) {
 80826e4:	6863      	ldr	r3, [r4, #4]
 80826e6:	42ab      	cmp	r3, r5
 80826e8:	d91b      	bls.n	8082722 <_ZN16ConnectionEvents4loopEv+0x72>
		size_t len = snprintf(entryBuf, sizeof(entryBuf), "%lu,%lu,%d,%d;", ev->tsDate, ev->tsMillis, ev->eventCode, ev->data);
 80826ea:	6973      	ldr	r3, [r6, #20]
 80826ec:	4652      	mov	r2, sl
 80826ee:	9302      	str	r3, [sp, #8]
 80826f0:	6933      	ldr	r3, [r6, #16]
 80826f2:	2140      	movs	r1, #64	; 0x40
 80826f4:	9301      	str	r3, [sp, #4]
 80826f6:	68f3      	ldr	r3, [r6, #12]
 80826f8:	a804      	add	r0, sp, #16
 80826fa:	9300      	str	r3, [sp, #0]
 80826fc:	68b3      	ldr	r3, [r6, #8]
 80826fe:	f002 f8eb 	bl	80848d8 <snprintf>
		if ((offset + len) >= sizeof(buf)) {
 8082702:	eb00 0908 	add.w	r9, r0, r8
 8082706:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 808270a:	f106 0610 	add.w	r6, r6, #16
 808270e:	d808      	bhi.n	8082722 <_ZN16ConnectionEvents4loopEv+0x72>
			// Not enough buffer space to send in this publish; try again later
			break;
		}
		strcpy(&buf[offset], entryBuf);
 8082710:	ab14      	add	r3, sp, #80	; 0x50
 8082712:	eb03 0008 	add.w	r0, r3, r8
 8082716:	a904      	add	r1, sp, #16
 8082718:	f006 fc7f 	bl	808901a <strcpy>
	for(numHandled = 0; numHandled < connectionEventData.eventCount; numHandled++) {
 808271c:	46c8      	mov	r8, r9
 808271e:	3501      	adds	r5, #1
 8082720:	e7e0      	b.n	80826e4 <_ZN16ConnectionEvents4loopEv+0x34>
		offset += len;
	}
	connectionEventData.eventCount -= numHandled;
 8082722:	6862      	ldr	r2, [r4, #4]
 8082724:	1b52      	subs	r2, r2, r5
 8082726:	6062      	str	r2, [r4, #4]
	if (connectionEventData.eventCount > 0) {
 8082728:	2a00      	cmp	r2, #0
 808272a:	d02f      	beq.n	808278c <_ZN16ConnectionEvents4loopEv+0xdc>
		Log.info("couldn't send all events, saving %d for later", connectionEventData.eventCount);
 808272c:	491b      	ldr	r1, [pc, #108]	; (808279c <_ZN16ConnectionEvents4loopEv+0xec>)
 808272e:	481c      	ldr	r0, [pc, #112]	; (80827a0 <_ZN16ConnectionEvents4loopEv+0xf0>)
 8082730:	f7ff fba0 	bl	8081e74 <_ZNK5spark6Logger4infoEPKcz>
		memmove(&connectionEventData.events[0], &connectionEventData.events[numHandled], connectionEventData.eventCount * sizeof(ConnectionEventData));
 8082734:	f44f 7202 	mov.w	r2, #520	; 0x208
 8082738:	6863      	ldr	r3, [r4, #4]
 808273a:	eb04 1105 	add.w	r1, r4, r5, lsl #4
 808273e:	435a      	muls	r2, r3
 8082740:	4818      	ldr	r0, [pc, #96]	; (80827a4 <_ZN16ConnectionEvents4loopEv+0xf4>)
 8082742:	3108      	adds	r1, #8
 8082744:	f006 fc02 	bl	8088f4c <memmove>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 8082748:	4b17      	ldr	r3, [pc, #92]	; (80827a8 <_ZN16ConnectionEvents4loopEv+0xf8>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 808274a:	6879      	ldr	r1, [r7, #4]
 808274c:	781b      	ldrb	r3, [r3, #0]
 808274e:	aa14      	add	r2, sp, #80	; 0x50
 8082750:	f88d 3000 	strb.w	r3, [sp]
 8082754:	a804      	add	r0, sp, #16
 8082756:	233c      	movs	r3, #60	; 0x3c
 8082758:	f004 f9e0 	bl	8086b1c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
 808275c:	9c05      	ldr	r4, [sp, #20]
 808275e:	b17c      	cbz	r4, 8082780 <_ZN16ConnectionEvents4loopEv+0xd0>
      if (--_M_use_count == 0)
 8082760:	6863      	ldr	r3, [r4, #4]
 8082762:	3b01      	subs	r3, #1
 8082764:	6063      	str	r3, [r4, #4]
 8082766:	b95b      	cbnz	r3, 8082780 <_ZN16ConnectionEvents4loopEv+0xd0>
          _M_dispose();
 8082768:	6823      	ldr	r3, [r4, #0]
 808276a:	4620      	mov	r0, r4
 808276c:	689b      	ldr	r3, [r3, #8]
 808276e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8082770:	68a3      	ldr	r3, [r4, #8]
 8082772:	3b01      	subs	r3, #1
 8082774:	60a3      	str	r3, [r4, #8]
 8082776:	b91b      	cbnz	r3, 8082780 <_ZN16ConnectionEvents4loopEv+0xd0>
            _M_destroy();
 8082778:	6823      	ldr	r3, [r4, #0]
 808277a:	4620      	mov	r0, r4
 808277c:	68db      	ldr	r3, [r3, #12]
 808277e:	4798      	blx	r3
 8082780:	f001 fd6a 	bl	8084258 <HAL_Timer_Get_Milli_Seconds>
	else {
		Log.info("sent %d events", numHandled);
	}

	Particle.publish(connectionEventName, buf, PRIVATE);
	connectionEventLastSent = millis();
 8082784:	60b8      	str	r0, [r7, #8]
}
 8082786:	b054      	add	sp, #336	; 0x150
 8082788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		Log.info("sent %d events", numHandled);
 808278c:	462a      	mov	r2, r5
 808278e:	4907      	ldr	r1, [pc, #28]	; (80827ac <_ZN16ConnectionEvents4loopEv+0xfc>)
 8082790:	4803      	ldr	r0, [pc, #12]	; (80827a0 <_ZN16ConnectionEvents4loopEv+0xf0>)
 8082792:	f7ff fb6f 	bl	8081e74 <_ZNK5spark6Logger4infoEPKcz>
 8082796:	e7d7      	b.n	8082748 <_ZN16ConnectionEvents4loopEv+0x98>
 8082798:	40024018 	.word	0x40024018
 808279c:	0808992b 	.word	0x0808992b
 80827a0:	200003bc 	.word	0x200003bc
 80827a4:	40024020 	.word	0x40024020
 80827a8:	200002a5 	.word	0x200002a5
 80827ac:	08089959 	.word	0x08089959
 80827b0:	0808991c 	.word	0x0808991c

080827b4 <_ZN16ConnectionEvents3addEii>:

// Add a new event. This should only be called from the main loop thread.
// Do not call from other threads like the system thread, software timer, or interrupt service routine.
void ConnectionEvents::add(int eventCode, int data /* = 0 */) {
 80827b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (connectionEventData.eventCount >= CONNECTION_EVENTS_MAX_EVENTS) {
 80827b8:	4c17      	ldr	r4, [pc, #92]	; (8082818 <_ZN16ConnectionEvents3addEii+0x64>)
void ConnectionEvents::add(int eventCode, int data /* = 0 */) {
 80827ba:	460f      	mov	r7, r1
	if (connectionEventData.eventCount >= CONNECTION_EVENTS_MAX_EVENTS) {
 80827bc:	6863      	ldr	r3, [r4, #4]
void ConnectionEvents::add(int eventCode, int data /* = 0 */) {
 80827be:	4690      	mov	r8, r2
	if (connectionEventData.eventCount >= CONNECTION_EVENTS_MAX_EVENTS) {
 80827c0:	2b1f      	cmp	r3, #31
 80827c2:	d90f      	bls.n	80827e4 <_ZN16ConnectionEvents3addEii+0x30>
		// Throw out oldest event
		Log.info("discarding old event");
 80827c4:	4915      	ldr	r1, [pc, #84]	; (808281c <_ZN16ConnectionEvents3addEii+0x68>)
 80827c6:	4816      	ldr	r0, [pc, #88]	; (8082820 <_ZN16ConnectionEvents3addEii+0x6c>)
 80827c8:	f7ff fb54 	bl	8081e74 <_ZNK5spark6Logger4infoEPKcz>
		connectionEventData.eventCount--;
		memmove(&connectionEventData.events[0], &connectionEventData.events[1], connectionEventData.eventCount * sizeof(ConnectionEventData));
 80827cc:	f44f 7202 	mov.w	r2, #520	; 0x208
		connectionEventData.eventCount--;
 80827d0:	6863      	ldr	r3, [r4, #4]
		memmove(&connectionEventData.events[0], &connectionEventData.events[1], connectionEventData.eventCount * sizeof(ConnectionEventData));
 80827d2:	f104 0118 	add.w	r1, r4, #24
		connectionEventData.eventCount--;
 80827d6:	3b01      	subs	r3, #1
		memmove(&connectionEventData.events[0], &connectionEventData.events[1], connectionEventData.eventCount * sizeof(ConnectionEventData));
 80827d8:	435a      	muls	r2, r3
 80827da:	f104 0008 	add.w	r0, r4, #8
		connectionEventData.eventCount--;
 80827de:	6063      	str	r3, [r4, #4]
		memmove(&connectionEventData.events[0], &connectionEventData.events[1], connectionEventData.eventCount * sizeof(ConnectionEventData));
 80827e0:	f006 fbb4 	bl	8088f4c <memmove>
	}

	// Add new event
	ConnectionEventInfo *ev = &connectionEventData.events[connectionEventData.eventCount++];
 80827e4:	6866      	ldr	r6, [r4, #4]
 80827e6:	1c75      	adds	r5, r6, #1
 80827e8:	6065      	str	r5, [r4, #4]
	ev->tsDate = Time.now();
 80827ea:	f003 fe6a 	bl	80864c2 <_ZN9TimeClass3nowEv>
 80827ee:	eb04 1606 	add.w	r6, r4, r6, lsl #4
 80827f2:	60b0      	str	r0, [r6, #8]
 80827f4:	f001 fd30 	bl	8084258 <HAL_Timer_Get_Milli_Seconds>
	ev->tsMillis = millis();
	ev->eventCode = eventCode;
 80827f8:	012b      	lsls	r3, r5, #4
 80827fa:	eb04 1505 	add.w	r5, r4, r5, lsl #4
	ev->tsMillis = millis();
 80827fe:	60f0      	str	r0, [r6, #12]
	ev->eventCode = eventCode;
 8082800:	50e7      	str	r7, [r4, r3]
	ev->data = data;

	Log.info("connectionEvent event=%d data=%d", eventCode, data);
 8082802:	463a      	mov	r2, r7
 8082804:	4643      	mov	r3, r8
 8082806:	4907      	ldr	r1, [pc, #28]	; (8082824 <_ZN16ConnectionEvents3addEii+0x70>)
 8082808:	4805      	ldr	r0, [pc, #20]	; (8082820 <_ZN16ConnectionEvents3addEii+0x6c>)
	ev->data = data;
 808280a:	f8c5 8004 	str.w	r8, [r5, #4]
	Log.info("connectionEvent event=%d data=%d", eventCode, data);
 808280e:	f7ff fb31 	bl	8081e74 <_ZNK5spark6Logger4infoEPKcz>
}
 8082812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8082816:	bf00      	nop
 8082818:	40024018 	.word	0x40024018
 808281c:	08089968 	.word	0x08089968
 8082820:	200003bc 	.word	0x200003bc
 8082824:	0808997d 	.word	0x0808997d

08082828 <_ZN16ConnectionEvents5setupEv>:
void ConnectionEvents::setup() {
 8082828:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (connectionEventData.eventMagic != CONNECTION_EVENT_MAGIC ||
 808282a:	4c10      	ldr	r4, [pc, #64]	; (808286c <_ZN16ConnectionEvents5setupEv+0x44>)
 808282c:	4e10      	ldr	r6, [pc, #64]	; (8082870 <_ZN16ConnectionEvents5setupEv+0x48>)
 808282e:	6822      	ldr	r2, [r4, #0]
void ConnectionEvents::setup() {
 8082830:	4605      	mov	r5, r0
	if (connectionEventData.eventMagic != CONNECTION_EVENT_MAGIC ||
 8082832:	42b2      	cmp	r2, r6
 8082834:	d102      	bne.n	808283c <_ZN16ConnectionEvents5setupEv+0x14>
 8082836:	6863      	ldr	r3, [r4, #4]
 8082838:	2b20      	cmp	r3, #32
 808283a:	d904      	bls.n	8082846 <_ZN16ConnectionEvents5setupEv+0x1e>
		Log.info("initializing connection event retained memory");
 808283c:	490d      	ldr	r1, [pc, #52]	; (8082874 <_ZN16ConnectionEvents5setupEv+0x4c>)
 808283e:	480e      	ldr	r0, [pc, #56]	; (8082878 <_ZN16ConnectionEvents5setupEv+0x50>)
 8082840:	f7ff fb18 	bl	8081e74 <_ZNK5spark6Logger4infoEPKcz>
		connectionEventData.eventMagic = CONNECTION_EVENT_MAGIC;
 8082844:	6026      	str	r6, [r4, #0]
	add(CONNECTION_EVENT_SETUP_STARTED);
 8082846:	2200      	movs	r2, #0
 8082848:	4628      	mov	r0, r5
 808284a:	4611      	mov	r1, r2
 808284c:	f7ff ffb2 	bl	80827b4 <_ZN16ConnectionEvents3addEii>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 8082850:	2200      	movs	r2, #0
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8082852:	a801      	add	r0, sp, #4
 8082854:	4611      	mov	r1, r2
        int reason = RESET_REASON_NONE;
 8082856:	9201      	str	r2, [sp, #4]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8082858:	f001 fd16 	bl	8084288 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 808285c:	9a01      	ldr	r2, [sp, #4]
	if (resetReason != RESET_REASON_NONE) {
 808285e:	b11a      	cbz	r2, 8082868 <_ZN16ConnectionEvents5setupEv+0x40>
		add(CONNECTION_EVENT_RESET_REASON, resetReason);
 8082860:	2112      	movs	r1, #18
 8082862:	4628      	mov	r0, r5
 8082864:	f7ff ffa6 	bl	80827b4 <_ZN16ConnectionEvents3addEii>
}
 8082868:	b002      	add	sp, #8
 808286a:	bd70      	pop	{r4, r5, r6, pc}
 808286c:	40024018 	.word	0x40024018
 8082870:	5c39d416 	.word	0x5c39d416
 8082874:	0808999e 	.word	0x0808999e
 8082878:	200003bc 	.word	0x200003bc

0808287c <_ZN16ConnectionEvents8addEventEii>:

// static
void ConnectionEvents::addEvent(int eventCode, int data) {
 808287c:	460a      	mov	r2, r1
	if (instance) {
 808287e:	4904      	ldr	r1, [pc, #16]	; (8082890 <_ZN16ConnectionEvents8addEventEii+0x14>)
void ConnectionEvents::addEvent(int eventCode, int data) {
 8082880:	4603      	mov	r3, r0
	if (instance) {
 8082882:	6808      	ldr	r0, [r1, #0]
 8082884:	b110      	cbz	r0, 808288c <_ZN16ConnectionEvents8addEventEii+0x10>
		instance->add(eventCode, data);
 8082886:	4619      	mov	r1, r3
 8082888:	f7ff bf94 	b.w	80827b4 <_ZN16ConnectionEvents3addEii>
	}
}
 808288c:	4770      	bx	lr
 808288e:	bf00      	nop
 8082890:	200002a8 	.word	0x200002a8

08082894 <_GLOBAL__sub_I__ZN16ConnectionEvents19connectionEventDataE>:
        val_(val) {
 8082894:	2201      	movs	r2, #1
 8082896:	4b01      	ldr	r3, [pc, #4]	; (808289c <_GLOBAL__sub_I__ZN16ConnectionEvents19connectionEventDataE+0x8>)
 8082898:	701a      	strb	r2, [r3, #0]
 808289a:	4770      	bx	lr
 808289c:	200002a5 	.word	0x200002a5

080828a0 <_ZN10PowerCheckD1Ev>:
#include "Particle.h"
#include "PowerCheck.h"
PowerCheck::PowerCheck() {
}

PowerCheck::~PowerCheck() {
 80828a0:	b510      	push	{r4, lr}
 80828a2:	4604      	mov	r4, r0
 80828a4:	4b03      	ldr	r3, [pc, #12]	; (80828b4 <_ZN10PowerCheckD1Ev+0x14>)
 80828a6:	f840 3b04 	str.w	r3, [r0], #4
 80828aa:	f002 f85b 	bl	8084964 <_ZN4PMICD1Ev>
}
 80828ae:	4620      	mov	r0, r4
 80828b0:	bd10      	pop	{r4, pc}
 80828b2:	bf00      	nop
 80828b4:	080899e4 	.word	0x080899e4

080828b8 <_ZN10PowerCheckD0Ev>:
PowerCheck::~PowerCheck() {
 80828b8:	b510      	push	{r4, lr}
 80828ba:	4604      	mov	r4, r0
}
 80828bc:	f7ff fff0 	bl	80828a0 <_ZN10PowerCheckD1Ev>
 80828c0:	4620      	mov	r0, r4
 80828c2:	210c      	movs	r1, #12
 80828c4:	f005 f9b5 	bl	8087c32 <_ZdlPvj>
 80828c8:	4620      	mov	r0, r4
 80828ca:	bd10      	pop	{r4, pc}

080828cc <_ZN10PowerCheck16interruptHandlerEv>:
		// between charging and done when there is no battery.
		return false;
	}
}

void PowerCheck::interruptHandler() {
 80828cc:	b510      	push	{r4, lr}
 80828ce:	4604      	mov	r4, r0
 80828d0:	f001 fcc2 	bl	8084258 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastChange < 100) {
 80828d4:	68a3      	ldr	r3, [r4, #8]
 80828d6:	1ac0      	subs	r0, r0, r3
 80828d8:	2863      	cmp	r0, #99	; 0x63
		// We very recently had a change; assume there is no battey and we're rapidly switching
		// between fast charge and charge done
		hasBattery = false;
 80828da:	bf94      	ite	ls
 80828dc:	2300      	movls	r3, #0
	}
	else {
		// Note: It's quite possible that hasBattery will be false when there is a battery; the logic
		// in getHasBattery() takes this into account by checking lastChange as well.
		hasBattery = true;
 80828de:	2301      	movhi	r3, #1
 80828e0:	7163      	strb	r3, [r4, #5]
 80828e2:	f001 fcb9 	bl	8084258 <HAL_Timer_Get_Milli_Seconds>
	}
	lastChange = millis();
 80828e6:	60a0      	str	r0, [r4, #8]
}
 80828e8:	bd10      	pop	{r4, pc}

080828ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFM10PowerCheckFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	  switch (__op)
 80828ea:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80828ec:	b538      	push	{r3, r4, r5, lr}
 80828ee:	4604      	mov	r4, r0
	  switch (__op)
 80828f0:	d007      	beq.n	8082902 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM10PowerCheckFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x18>
 80828f2:	2a03      	cmp	r2, #3
 80828f4:	d011      	beq.n	808291a <_ZNSt14_Function_base13_Base_managerISt5_BindIFM10PowerCheckFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x30>
 80828f6:	2a01      	cmp	r2, #1
 80828f8:	d101      	bne.n	80828fe <_ZNSt14_Function_base13_Base_managerISt5_BindIFM10PowerCheckFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80828fa:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
 80828fc:	6023      	str	r3, [r4, #0]
	}
 80828fe:	2000      	movs	r0, #0
 8082900:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 8082902:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
 8082904:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 8082906:	f7fd fbd8 	bl	80800ba <_Znwj>
 808290a:	4603      	mov	r3, r0
 808290c:	2800      	cmp	r0, #0
 808290e:	d0f5      	beq.n	80828fc <_ZNSt14_Function_base13_Base_managerISt5_BindIFM10PowerCheckFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x12>
 8082910:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8082914:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8082918:	e7f0      	b.n	80828fc <_ZNSt14_Function_base13_Base_managerISt5_BindIFM10PowerCheckFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
 808291a:	6800      	ldr	r0, [r0, #0]
 808291c:	2800      	cmp	r0, #0
 808291e:	d0ee      	beq.n	80828fe <_ZNSt14_Function_base13_Base_managerISt5_BindIFM10PowerCheckFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x14>
 8082920:	210c      	movs	r1, #12
 8082922:	f005 f986 	bl	8087c32 <_ZdlPvj>
 8082926:	e7ea      	b.n	80828fe <_ZNSt14_Function_base13_Base_managerISt5_BindIFM10PowerCheckFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x14>

08082928 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PowerCheckFvvEPS2_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8082928:	b410      	push	{r4}
	    return __source._M_access<_Functor*>();
 808292a:	6803      	ldr	r3, [r0, #0]
 808292c:	685a      	ldr	r2, [r3, #4]
 808292e:	6899      	ldr	r1, [r3, #8]
 8082930:	1054      	asrs	r4, r2, #1
 8082932:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8082936:	07d2      	lsls	r2, r2, #31
 8082938:	bf48      	it	mi
 808293a:	590a      	ldrmi	r2, [r1, r4]
 808293c:	681b      	ldr	r3, [r3, #0]
      }
 808293e:	bc10      	pop	{r4}
 8082940:	bf48      	it	mi
 8082942:	58d3      	ldrmi	r3, [r2, r3]
 8082944:	4718      	bx	r3
	...

08082948 <_ZN10PowerCheckC1Ev>:
PowerCheck::PowerCheck() {
 8082948:	4b06      	ldr	r3, [pc, #24]	; (8082964 <_ZN10PowerCheckC1Ev+0x1c>)
 808294a:	b510      	push	{r4, lr}
 808294c:	2100      	movs	r1, #0
 808294e:	4604      	mov	r4, r0
 8082950:	f840 3b04 	str.w	r3, [r0], #4
 8082954:	f001 fff7 	bl	8084946 <_ZN4PMICC1Eb>
 8082958:	2301      	movs	r3, #1
 808295a:	7163      	strb	r3, [r4, #5]
 808295c:	2300      	movs	r3, #0
}
 808295e:	4620      	mov	r0, r4
PowerCheck::PowerCheck() {
 8082960:	60a3      	str	r3, [r4, #8]
}
 8082962:	bd10      	pop	{r4, pc}
 8082964:	080899e4 	.word	0x080899e4

08082968 <_ZN10PowerCheck5setupEv>:
void PowerCheck::setup() {
 8082968:	b530      	push	{r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 808296a:	2500      	movs	r5, #0
 808296c:	b087      	sub	sp, #28
 808296e:	4604      	mov	r4, r0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082970:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
 8082972:	9504      	str	r5, [sp, #16]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082974:	f7fd fba1 	bl	80800ba <_Znwj>
 8082978:	b118      	cbz	r0, 8082982 <_ZN10PowerCheck5setupEv+0x1a>
 808297a:	4b0d      	ldr	r3, [pc, #52]	; (80829b0 <_ZN10PowerCheck5setupEv+0x48>)
 808297c:	6084      	str	r4, [r0, #8]
 808297e:	e9c0 3500 	strd	r3, r5, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
 8082982:	4b0c      	ldr	r3, [pc, #48]	; (80829b4 <_ZN10PowerCheck5setupEv+0x4c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082984:	9002      	str	r0, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
 8082986:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 8082988:	4b0b      	ldr	r3, [pc, #44]	; (80829b8 <_ZN10PowerCheck5setupEv+0x50>)
bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
template <typename T>
bool attachInterrupt(uint16_t pin, void (T::*handler)(), T *instance, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0) {
    using namespace std::placeholders;
    return attachInterrupt(pin, std::bind(handler, instance), mode, priority, subpriority);
 808298a:	2202      	movs	r2, #2
 808298c:	9304      	str	r3, [sp, #16]
 808298e:	2300      	movs	r3, #0
 8082990:	202e      	movs	r0, #46	; 0x2e
 8082992:	9300      	str	r3, [sp, #0]
 8082994:	a902      	add	r1, sp, #8
 8082996:	f04f 33ff 	mov.w	r3, #4294967295
 808299a:	f004 fb75 	bl	8087088 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>
      if (_M_manager)
 808299e:	9b04      	ldr	r3, [sp, #16]
 80829a0:	b11b      	cbz	r3, 80829aa <_ZN10PowerCheck5setupEv+0x42>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80829a2:	a902      	add	r1, sp, #8
 80829a4:	2203      	movs	r2, #3
 80829a6:	4608      	mov	r0, r1
 80829a8:	4798      	blx	r3
}
 80829aa:	b007      	add	sp, #28
 80829ac:	bd30      	pop	{r4, r5, pc}
 80829ae:	bf00      	nop
 80829b0:	080828cd 	.word	0x080828cd
 80829b4:	08082929 	.word	0x08082929
 80829b8:	080828eb 	.word	0x080828eb

080829bc <_ZN10PowerCheck11getHasPowerEv>:
bool PowerCheck::getHasPower() {
 80829bc:	b508      	push	{r3, lr}
	byte systemStatus = pmic.getSystemStatus();
 80829be:	3004      	adds	r0, #4
 80829c0:	f002 f818 	bl	80849f4 <_ZN4PMIC15getSystemStatusEv>
}
 80829c4:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80829c8:	bd08      	pop	{r3, pc}

080829ca <_ZN15Adafruit_LIS3DHD1Ev>:
  LIS3DH_INT1_SRC_YL = 0x04,
  LIS3DH_INT1_SRC_XH = 0x02,
  LIS3DH_INT1_SRC_XL = 0x01
} list3dh_ctrl_int2_src_t;

class Adafruit_LIS3DH : public Adafruit_Sensor {
 80829ca:	4770      	bx	lr

080829cc <_ZN13AssetTracker2C1Ev>:
uint8_t internalANT[]={0xB5,0x62,0x06,0x13,0x04,0x00,0x00,0x00,0xF0,0x7D,0x8A,0x2A};
uint8_t externalANT[]={0xB5,0x62,0x06,0x13,0x04,0x00,0x01,0x00,0xF0,0x7D,0x8B,0x2E};

AssetTracker2::AssetTracker2() {

}
 80829cc:	4770      	bx	lr
	...

080829d0 <_ZN13AssetTracker25beginEv>:

void AssetTracker2::begin() {
 80829d0:	b510      	push	{r4, lr}
    accel.begin(LIS3DH_DEFAULT_ADDRESS);
 80829d2:	4c07      	ldr	r4, [pc, #28]	; (80829f0 <_ZN13AssetTracker25beginEv+0x20>)
 80829d4:	2118      	movs	r1, #24
 80829d6:	4620      	mov	r0, r4
 80829d8:	f000 fc3b 	bl	8083252 <_ZN15Adafruit_LIS3DH5beginEh>

    // Default to 5kHz low-power sampling
    accel.setDataRate(LIS3DH_DATARATE_LOWPOWER_5KHZ);
 80829dc:	4620      	mov	r0, r4
 80829de:	2109      	movs	r1, #9
 80829e0:	f000 fc26 	bl	8083230 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>

    // Default to 4 gravities range
    accel.setRange(LIS3DH_RANGE_4_G);
 80829e4:	4620      	mov	r0, r4

}
 80829e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    accel.setRange(LIS3DH_RANGE_4_G);
 80829ea:	2101      	movs	r1, #1
 80829ec:	f000 bc08 	b.w	8083200 <_ZN15Adafruit_LIS3DH8setRangeE14lis3dh_range_t>
 80829f0:	200002ac 	.word	0x200002ac

080829f4 <_ZN13AssetTracker27readLatEv>:

float AssetTracker2::readLat() {
    return gps.latitude;
}
 80829f4:	4b01      	ldr	r3, [pc, #4]	; (80829fc <_ZN13AssetTracker27readLatEv+0x8>)
 80829f6:	6958      	ldr	r0, [r3, #20]
 80829f8:	4770      	bx	lr
 80829fa:	bf00      	nop
 80829fc:	200002d8 	.word	0x200002d8

08082a00 <_ZN13AssetTracker27readLonEv>:

float AssetTracker2::readLon() {
    return gps.longitude;
}
 8082a00:	4b01      	ldr	r3, [pc, #4]	; (8082a08 <_ZN13AssetTracker27readLonEv+0x8>)
 8082a02:	6998      	ldr	r0, [r3, #24]
 8082a04:	4770      	bx	lr
 8082a06:	bf00      	nop
 8082a08:	200002d8 	.word	0x200002d8

08082a0c <_ZN13AssetTracker210readLatDegEv>:

float AssetTracker2::readLatDeg() {
    return gps.latitudeDegrees;
}
 8082a0c:	4b01      	ldr	r3, [pc, #4]	; (8082a14 <_ZN13AssetTracker210readLatDegEv+0x8>)
 8082a0e:	69d8      	ldr	r0, [r3, #28]
 8082a10:	4770      	bx	lr
 8082a12:	bf00      	nop
 8082a14:	200002d8 	.word	0x200002d8

08082a18 <_ZN13AssetTracker210readLonDegEv>:

float AssetTracker2::readLonDeg() {
    return gps.longitudeDegrees;
}
 8082a18:	4b01      	ldr	r3, [pc, #4]	; (8082a20 <_ZN13AssetTracker210readLonDegEv+0x8>)
 8082a1a:	6a18      	ldr	r0, [r3, #32]
 8082a1c:	4770      	bx	lr
 8082a1e:	bf00      	nop
 8082a20:	200002d8 	.word	0x200002d8

08082a24 <_ZN13AssetTracker214getGpsAccuracyEv>:

float AssetTracker2::getGpsAccuracy() {
 8082a24:	b508      	push	{r3, lr}
  return (float)gps.horzAcc;
 8082a26:	4b02      	ldr	r3, [pc, #8]	; (8082a30 <_ZN13AssetTracker214getGpsAccuracyEv+0xc>)
 8082a28:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8082a2a:	f005 ffeb 	bl	8088a04 <__aeabi_ui2f>
}
 8082a2e:	bd08      	pop	{r3, pc}
 8082a30:	200002d8 	.word	0x200002d8

08082a34 <_ZN13AssetTracker212getHaccuracyEv>:
  return gps.headVehValid;
}

uint32_t AssetTracker2::getHaccuracy() {
  return gps.horzAcc;
}
 8082a34:	4b01      	ldr	r3, [pc, #4]	; (8082a3c <_ZN13AssetTracker212getHaccuracyEv+0x8>)
 8082a36:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8082a38:	4770      	bx	lr
 8082a3a:	bf00      	nop
 8082a3c:	200002d8 	.word	0x200002d8

08082a40 <_ZN13AssetTracker212getVaccuracyEv>:
uint32_t AssetTracker2::getVaccuracy() {
  return gps.vertAcc;
}
 8082a40:	4b01      	ldr	r3, [pc, #4]	; (8082a48 <_ZN13AssetTracker212getVaccuracyEv+0x8>)
 8082a42:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8082a44:	4770      	bx	lr
 8082a46:	bf00      	nop
 8082a48:	200002d8 	.word	0x200002d8

08082a4c <_ZN13AssetTracker27getVelNEv>:
int32_t AssetTracker2::getVelN() {
  return gps.velN;
}
 8082a4c:	4b01      	ldr	r3, [pc, #4]	; (8082a54 <_ZN13AssetTracker27getVelNEv+0x8>)
 8082a4e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8082a50:	4770      	bx	lr
 8082a52:	bf00      	nop
 8082a54:	200002d8 	.word	0x200002d8

08082a58 <_ZN13AssetTracker27getVelEEv>:
int32_t AssetTracker2::getVelE() {
  return gps.velE;
}
 8082a58:	4b01      	ldr	r3, [pc, #4]	; (8082a60 <_ZN13AssetTracker27getVelEEv+0x8>)
 8082a5a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8082a5c:	4770      	bx	lr
 8082a5e:	bf00      	nop
 8082a60:	200002d8 	.word	0x200002d8

08082a64 <_ZN13AssetTracker27getVelDEv>:
int32_t AssetTracker2::getVelD() {
  return gps.velD;
}
 8082a64:	4b01      	ldr	r3, [pc, #4]	; (8082a6c <_ZN13AssetTracker27getVelDEv+0x8>)
 8082a66:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8082a68:	4770      	bx	lr
 8082a6a:	bf00      	nop
 8082a6c:	200002d8 	.word	0x200002d8

08082a70 <_ZN13AssetTracker210getOdoTripEv>:
int32_t AssetTracker2::getOdoTrip() {
  return gps.odoTrip;
}
 8082a70:	4b01      	ldr	r3, [pc, #4]	; (8082a78 <_ZN13AssetTracker210getOdoTripEv+0x8>)
 8082a72:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8082a74:	4770      	bx	lr
 8082a76:	bf00      	nop
 8082a78:	200002d8 	.word	0x200002d8

08082a7c <_ZN13AssetTracker211getOdoTotalEv>:
int32_t AssetTracker2::getOdoTotal() {
  return gps.odoTotal;
}
 8082a7c:	4b01      	ldr	r3, [pc, #4]	; (8082a84 <_ZN13AssetTracker211getOdoTotalEv+0x8>)
 8082a7e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8082a80:	4770      	bx	lr
 8082a82:	bf00      	nop
 8082a84:	200002d8 	.word	0x200002d8

08082a88 <_ZN13AssetTracker29getGspeedEv>:
int32_t AssetTracker2::getGspeed() {
  return gps.gSpeed;
}
 8082a88:	4b01      	ldr	r3, [pc, #4]	; (8082a90 <_ZN13AssetTracker29getGspeedEv+0x8>)
 8082a8a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8082a8c:	4770      	bx	lr
 8082a8e:	bf00      	nop
 8082a90:	200002d8 	.word	0x200002d8

08082a94 <_ZN13AssetTracker27getHourEv>:

uint8_t AssetTracker2::getHour(){
  return gps.hour;
}
 8082a94:	4b01      	ldr	r3, [pc, #4]	; (8082a9c <_ZN13AssetTracker27getHourEv+0x8>)
 8082a96:	7858      	ldrb	r0, [r3, #1]
 8082a98:	4770      	bx	lr
 8082a9a:	bf00      	nop
 8082a9c:	200002d8 	.word	0x200002d8

08082aa0 <_ZN13AssetTracker29getMinuteEv>:

uint8_t AssetTracker2::getMinute(){
  return gps.minute;
}
 8082aa0:	4b01      	ldr	r3, [pc, #4]	; (8082aa8 <_ZN13AssetTracker29getMinuteEv+0x8>)
 8082aa2:	7898      	ldrb	r0, [r3, #2]
 8082aa4:	4770      	bx	lr
 8082aa6:	bf00      	nop
 8082aa8:	200002d8 	.word	0x200002d8

08082aac <_ZN13AssetTracker210getSecondsEv>:

uint8_t AssetTracker2::getSeconds(){
  return gps.seconds;
}
 8082aac:	4b01      	ldr	r3, [pc, #4]	; (8082ab4 <_ZN13AssetTracker210getSecondsEv+0x8>)
 8082aae:	78d8      	ldrb	r0, [r3, #3]
 8082ab0:	4770      	bx	lr
 8082ab2:	bf00      	nop
 8082ab4:	200002d8 	.word	0x200002d8

08082ab8 <_ZN13AssetTracker215getMillisecondsEv>:

int32_t AssetTracker2::getMilliseconds(){
  return gps.milliseconds;
}
 8082ab8:	4b01      	ldr	r3, [pc, #4]	; (8082ac0 <_ZN13AssetTracker215getMillisecondsEv+0x8>)
 8082aba:	6898      	ldr	r0, [r3, #8]
 8082abc:	4770      	bx	lr
 8082abe:	bf00      	nop
 8082ac0:	200002d8 	.word	0x200002d8

08082ac4 <_ZN13AssetTracker27getYearEv>:

uint16_t AssetTracker2::getYear(){
  return gps.year;
}
 8082ac4:	4b01      	ldr	r3, [pc, #4]	; (8082acc <_ZN13AssetTracker27getYearEv+0x8>)
 8082ac6:	88d8      	ldrh	r0, [r3, #6]
 8082ac8:	4770      	bx	lr
 8082aca:	bf00      	nop
 8082acc:	200002d8 	.word	0x200002d8

08082ad0 <_ZN13AssetTracker28getMonthEv>:

uint8_t AssetTracker2::getMonth(){
  return gps.month;
}
 8082ad0:	4b01      	ldr	r3, [pc, #4]	; (8082ad8 <_ZN13AssetTracker28getMonthEv+0x8>)
 8082ad2:	7918      	ldrb	r0, [r3, #4]
 8082ad4:	4770      	bx	lr
 8082ad6:	bf00      	nop
 8082ad8:	200002d8 	.word	0x200002d8

08082adc <_ZN13AssetTracker26getDayEv>:

uint8_t AssetTracker2::getDay(){
  return gps.day;
}
 8082adc:	4b01      	ldr	r3, [pc, #4]	; (8082ae4 <_ZN13AssetTracker26getDayEv+0x8>)
 8082ade:	7958      	ldrb	r0, [r3, #5]
 8082ae0:	4770      	bx	lr
 8082ae2:	bf00      	nop
 8082ae4:	200002d8 	.word	0x200002d8

08082ae8 <_ZN13AssetTracker213getSatellitesEv>:

uint8_t AssetTracker2::getSatellites(){
  return gps.satellites;
}
 8082ae8:	4b01      	ldr	r3, [pc, #4]	; (8082af0 <_ZN13AssetTracker213getSatellitesEv+0x8>)
 8082aea:	f893 003b 	ldrb.w	r0, [r3, #59]	; 0x3b
 8082aee:	4770      	bx	lr
 8082af0:	200002d8 	.word	0x200002d8

08082af4 <_ZN13AssetTracker213getFixQualityEv>:

uint8_t AssetTracker2::getFixQuality(){
  return gps.fixquality;
}
 8082af4:	4b01      	ldr	r3, [pc, #4]	; (8082afc <_ZN13AssetTracker213getFixQualityEv+0x8>)
 8082af6:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
 8082afa:	4770      	bx	lr
 8082afc:	200002d8 	.word	0x200002d8

08082b00 <_ZN13AssetTracker28getSpeedEv>:

float AssetTracker2::getSpeed(){
  return gps.speed;
}
 8082b00:	4b01      	ldr	r3, [pc, #4]	; (8082b08 <_ZN13AssetTracker28getSpeedEv+0x8>)
 8082b02:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8082b04:	4770      	bx	lr
 8082b06:	bf00      	nop
 8082b08:	200002d8 	.word	0x200002d8

08082b0c <_ZN13AssetTracker214getGeoIdHeightEv>:

float AssetTracker2::getGeoIdHeight(){
  return gps.geoidheight;
}
 8082b0c:	4b01      	ldr	r3, [pc, #4]	; (8082b14 <_ZN13AssetTracker214getGeoIdHeightEv+0x8>)
 8082b0e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8082b10:	4770      	bx	lr
 8082b12:	bf00      	nop
 8082b14:	200002d8 	.word	0x200002d8

08082b18 <_ZN13AssetTracker211getAltitudeEv>:

float AssetTracker2::getAltitude(){
  return gps.altitude;
}
 8082b18:	4b01      	ldr	r3, [pc, #4]	; (8082b20 <_ZN13AssetTracker211getAltitudeEv+0x8>)
 8082b1a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8082b1c:	4770      	bx	lr
 8082b1e:	bf00      	nop
 8082b20:	200002d8 	.word	0x200002d8

08082b24 <_ZN13AssetTracker210readLatLonEv>:

String AssetTracker2::readLatLon() {
 8082b24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    String latLon = String::format("%f,%f",gps.latitudeDegrees,gps.longitudeDegrees);
 8082b26:	4d0a      	ldr	r5, [pc, #40]	; (8082b50 <_ZN13AssetTracker210readLatLonEv+0x2c>)
String AssetTracker2::readLatLon() {
 8082b28:	4604      	mov	r4, r0
    String latLon = String::format("%f,%f",gps.latitudeDegrees,gps.longitudeDegrees);
 8082b2a:	69e8      	ldr	r0, [r5, #28]
 8082b2c:	f005 fb14 	bl	8088158 <__aeabi_f2d>
 8082b30:	4606      	mov	r6, r0
 8082b32:	6a28      	ldr	r0, [r5, #32]
 8082b34:	460f      	mov	r7, r1
 8082b36:	f005 fb0f 	bl	8088158 <__aeabi_f2d>
 8082b3a:	4632      	mov	r2, r6
 8082b3c:	e9cd 0100 	strd	r0, r1, [sp]
 8082b40:	463b      	mov	r3, r7
 8082b42:	4620      	mov	r0, r4
 8082b44:	4903      	ldr	r1, [pc, #12]	; (8082b54 <_ZN13AssetTracker210readLatLonEv+0x30>)
 8082b46:	f002 fa39 	bl	8084fbc <_ZN6String6formatEPKcz>
    return latLon;
}
 8082b4a:	4620      	mov	r0, r4
 8082b4c:	b003      	add	sp, #12
 8082b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8082b50:	200002d8 	.word	0x200002d8
 8082b54:	080899ec 	.word	0x080899ec

08082b58 <_ZN13AssetTracker25gpsOnEv>:

void AssetTracker2::gpsOn() {
 8082b58:	b538      	push	{r3, r4, r5, lr}
    enum ubxReturn err;
    // Power to the GPS is controlled by a FET connected to D6
    pinMode(D6,OUTPUT);
 8082b5a:	2101      	movs	r1, #1
 8082b5c:	2006      	movs	r0, #6
 8082b5e:	f004 ff19 	bl	8087994 <pinMode>
    digitalWrite(D6,LOW);
 8082b62:	2100      	movs	r1, #0
 8082b64:	2006      	movs	r0, #6
 8082b66:	f004 ff26 	bl	80879b6 <digitalWrite>
    Serial1.begin(9600);
 8082b6a:	f004 fb85 	bl	8087278 <_Z22__fetch_global_Serial1v>
 8082b6e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8082b72:	f004 fb7b 	bl	808726c <_ZN11USARTSerial5beginEm>
    delay(10);
 8082b76:	200a      	movs	r0, #10
 8082b78:	f003 fcbe 	bl	80864f8 <delay>
	if (err != ubxPENDING ){
	    Serial.print("gps.begin failed: ");
	    Serial.println(err);
	    return;
	}
	err=gps.begin();
 8082b7c:	4d0f      	ldr	r5, [pc, #60]	; (8082bbc <_ZN13AssetTracker25gpsOnEv+0x64>)
 8082b7e:	4628      	mov	r0, r5
 8082b80:	f001 f8fa 	bl	8083d78 <_ZN12UbloxM8Q_GPS5beginEv>
    while (err != ubxSUCCESS){
 8082b84:	4604      	mov	r4, r0
 8082b86:	b930      	cbnz	r0, 8082b96 <_ZN13AssetTracker25gpsOnEv+0x3e>
    }
    Serial.println("GPS started");
 8082b88:	f004 f9ee 	bl	8086f68 <_Z16_fetch_usbserialv>
}
 8082b8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Serial.println("GPS started");
 8082b90:	490b      	ldr	r1, [pc, #44]	; (8082bc0 <_ZN13AssetTracker25gpsOnEv+0x68>)
 8082b92:	f002 ba74 	b.w	808507e <_ZN5Print7printlnEPKc>
	if (err != ubxPENDING ){
 8082b96:	2c01      	cmp	r4, #1
 8082b98:	d0f1      	beq.n	8082b7e <_ZN13AssetTracker25gpsOnEv+0x26>
	    Serial.print("gps.begin failed: ");
 8082b9a:	f004 f9e5 	bl	8086f68 <_Z16_fetch_usbserialv>
 8082b9e:	4909      	ldr	r1, [pc, #36]	; (8082bc4 <_ZN13AssetTracker25gpsOnEv+0x6c>)
 8082ba0:	f002 fa5a 	bl	8085058 <_ZN5Print5printEPKc>
	    Serial.println(err);
 8082ba4:	f004 f9e0 	bl	8086f68 <_Z16_fetch_usbserialv>
 8082ba8:	4605      	mov	r5, r0
        return printNumber(val, base) + t;
 8082baa:	4621      	mov	r1, r4
 8082bac:	220a      	movs	r2, #10
 8082bae:	f002 fa70 	bl	8085092 <_ZN5Print11printNumberEmh>
        n += println();
 8082bb2:	4628      	mov	r0, r5
}
 8082bb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8082bb8:	f002 ba55 	b.w	8085066 <_ZN5Print7printlnEv>
 8082bbc:	200002d8 	.word	0x200002d8
 8082bc0:	08089a05 	.word	0x08089a05
 8082bc4:	080899f2 	.word	0x080899f2

08082bc8 <_ZN13AssetTracker215gpsInitCompleteEv>:
    digitalWrite(D6,HIGH);
}

bool AssetTracker2::gpsInitComplete() {
    return gps.initComplete;
}
 8082bc8:	4b01      	ldr	r3, [pc, #4]	; (8082bd0 <_ZN13AssetTracker215gpsInitCompleteEv+0x8>)
 8082bca:	7818      	ldrb	r0, [r3, #0]
 8082bcc:	4770      	bx	lr
 8082bce:	bf00      	nop
 8082bd0:	200002d8 	.word	0x200002d8

08082bd4 <_ZN13AssetTracker26gpsFixEv>:

bool AssetTracker2::gpsFix() {
    return gps.fix;
}
 8082bd4:	4b01      	ldr	r3, [pc, #4]	; (8082bdc <_ZN13AssetTracker26gpsFixEv+0x8>)
 8082bd6:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 8082bda:	4770      	bx	lr
 8082bdc:	200002d8 	.word	0x200002d8

08082be0 <_ZN13AssetTracker215antennaInternalEv>:

bool AssetTracker2::gpsTimeValid() {
    return gps.timeValid;
}

bool AssetTracker2::antennaInternal(){
 8082be0:	b538      	push	{r3, r4, r5, lr}
 8082be2:	240c      	movs	r4, #12
 8082be4:	4d06      	ldr	r5, [pc, #24]	; (8082c00 <_ZN13AssetTracker215antennaInternalEv+0x20>)

  for(uint8_t i=0;i<12;i++)
    {
        Serial1.write(internalANT[i]); //send the command to gps modul
 8082be6:	f004 fb47 	bl	8087278 <_Z22__fetch_global_Serial1v>
 8082bea:	6803      	ldr	r3, [r0, #0]
 8082bec:	f815 1b01 	ldrb.w	r1, [r5], #1
 8082bf0:	689b      	ldr	r3, [r3, #8]
 8082bf2:	3c01      	subs	r4, #1
 8082bf4:	4798      	blx	r3
  for(uint8_t i=0;i<12;i++)
 8082bf6:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8082bfa:	d1f4      	bne.n	8082be6 <_ZN13AssetTracker215antennaInternalEv+0x6>
    }
  return true;

}
 8082bfc:	2001      	movs	r0, #1
 8082bfe:	bd38      	pop	{r3, r4, r5, pc}
 8082c00:	20000024 	.word	0x20000024

08082c04 <_ZN13AssetTracker215antennaExternalEv>:

bool AssetTracker2::antennaExternal(){
 8082c04:	b538      	push	{r3, r4, r5, lr}
 8082c06:	240c      	movs	r4, #12
 8082c08:	4d06      	ldr	r5, [pc, #24]	; (8082c24 <_ZN13AssetTracker215antennaExternalEv+0x20>)

  for(uint8_t i=0;i<12;i++)
    {
        Serial1.write(externalANT[i]); //send the command to gps modul
 8082c0a:	f004 fb35 	bl	8087278 <_Z22__fetch_global_Serial1v>
 8082c0e:	6803      	ldr	r3, [r0, #0]
 8082c10:	f815 1b01 	ldrb.w	r1, [r5], #1
 8082c14:	689b      	ldr	r3, [r3, #8]
 8082c16:	3c01      	subs	r4, #1
 8082c18:	4798      	blx	r3
  for(uint8_t i=0;i<12;i++)
 8082c1a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8082c1e:	d1f4      	bne.n	8082c0a <_ZN13AssetTracker215antennaExternalEv+0x6>
    }
  return true;

}
 8082c20:	2001      	movs	r0, #1
 8082c22:	bd38      	pop	{r3, r4, r5, pc}
 8082c24:	20000018 	.word	0x20000018

08082c28 <_ZN13AssetTracker29updateGPSEv>:

void AssetTracker2::updateGPS() {
    gps.read();
 8082c28:	4801      	ldr	r0, [pc, #4]	; (8082c30 <_ZN13AssetTracker29updateGPSEv+0x8>)
 8082c2a:	f000 bfe3 	b.w	8083bf4 <_ZN12UbloxM8Q_GPS4readEv>
 8082c2e:	bf00      	nop
 8082c30:	200002d8 	.word	0x200002d8

08082c34 <_ZN13AssetTracker27gpsRateEti>:
}

void AssetTracker2::gpsRate(uint16_t measurement, int navigation) {
    gps.setRate(measurement, navigation);
 8082c34:	4801      	ldr	r0, [pc, #4]	; (8082c3c <_ZN13AssetTracker27gpsRateEti+0x8>)
 8082c36:	f001 b8e1 	b.w	8083dfc <_ZN12UbloxM8Q_GPS7setRateEti>
 8082c3a:	bf00      	nop
 8082c3c:	200002d8 	.word	0x200002d8

08082c40 <_ZN13AssetTracker211gpsResetODOEv>:
}

void AssetTracker2::gpsResetODO(void) {
    gps.resetODO();
 8082c40:	4801      	ldr	r0, [pc, #4]	; (8082c48 <_ZN13AssetTracker211gpsResetODOEv+0x8>)
 8082c42:	f001 b893 	b.w	8083d6c <_ZN12UbloxM8Q_GPS8resetODOEv>
 8082c46:	bf00      	nop
 8082c48:	200002d8 	.word	0x200002d8

08082c4c <_ZN13AssetTracker25readXEv>:

void AssetTracker2::gpsHoldThresh(int speed, uint16_t distance) {
    gps.setThresh(speed, distance);
}

int AssetTracker2::readX() {
 8082c4c:	b510      	push	{r4, lr}
    accel.read();
 8082c4e:	4c03      	ldr	r4, [pc, #12]	; (8082c5c <_ZN13AssetTracker25readXEv+0x10>)
 8082c50:	4620      	mov	r0, r4
 8082c52:	f000 fb4f 	bl	80832f4 <_ZN15Adafruit_LIS3DH4readEv>
    return accel.x;
}
 8082c56:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 8082c5a:	bd10      	pop	{r4, pc}
 8082c5c:	200002ac 	.word	0x200002ac

08082c60 <_ZN13AssetTracker25readYEv>:

int AssetTracker2::readY() {
 8082c60:	b510      	push	{r4, lr}
    accel.read();
 8082c62:	4c03      	ldr	r4, [pc, #12]	; (8082c70 <_ZN13AssetTracker25readYEv+0x10>)
 8082c64:	4620      	mov	r0, r4
 8082c66:	f000 fb45 	bl	80832f4 <_ZN15Adafruit_LIS3DH4readEv>
    return accel.y;
}
 8082c6a:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8082c6e:	bd10      	pop	{r4, pc}
 8082c70:	200002ac 	.word	0x200002ac

08082c74 <_ZN13AssetTracker25readZEv>:

int AssetTracker2::readZ() {
 8082c74:	b510      	push	{r4, lr}
    accel.read();
 8082c76:	4c03      	ldr	r4, [pc, #12]	; (8082c84 <_ZN13AssetTracker25readZEv+0x10>)
 8082c78:	4620      	mov	r0, r4
 8082c7a:	f000 fb3b 	bl	80832f4 <_ZN15Adafruit_LIS3DH4readEv>
    return accel.z;
}
 8082c7e:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
 8082c82:	bd10      	pop	{r4, pc}
 8082c84:	200002ac 	.word	0x200002ac

08082c88 <_ZN13AssetTracker216readXYZmagnitudeEv>:
    *y = accel.y;
    *z = accel.z;
}


int AssetTracker2::readXYZmagnitude() {
 8082c88:	b510      	push	{r4, lr}
    accel.read();
 8082c8a:	4c0b      	ldr	r4, [pc, #44]	; (8082cb8 <_ZN13AssetTracker216readXYZmagnitudeEv+0x30>)
 8082c8c:	4620      	mov	r0, r4
 8082c8e:	f000 fb31 	bl	80832f4 <_ZN15Adafruit_LIS3DH4readEv>
    int magnitude = sqrt((accel.x*accel.x)+(accel.y*accel.y)+(accel.z*accel.z));
 8082c92:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8082c96:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8082c9a:	4352      	muls	r2, r2
 8082c9c:	fb03 2303 	mla	r3, r3, r3, r2
 8082ca0:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    sqrt(_Tp __x)
    { return __builtin_sqrt(__x); }
 8082ca4:	fb00 3000 	mla	r0, r0, r0, r3
 8082ca8:	f005 fa44 	bl	8088134 <__aeabi_i2d>
 8082cac:	f004 ffca 	bl	8087c44 <sqrt>
 8082cb0:	f005 fd5a 	bl	8088768 <__aeabi_d2iz>
    return magnitude;
}
 8082cb4:	bd10      	pop	{r4, pc}
 8082cb6:	bf00      	nop
 8082cb8:	200002ac 	.word	0x200002ac

08082cbc <_ZN15Adafruit_LIS3DHD0Ev>:
 8082cbc:	b510      	push	{r4, lr}
 8082cbe:	4604      	mov	r4, r0
 8082cc0:	212c      	movs	r1, #44	; 0x2c
 8082cc2:	f004 ffb6 	bl	8087c32 <_ZdlPvj>
 8082cc6:	4620      	mov	r0, r4
 8082cc8:	bd10      	pop	{r4, pc}
	...

08082ccc <_GLOBAL__sub_I_gps>:
	return accel.setupLowPowerWakeMode(movementThreshold);
}

uint8_t AssetTracker2::clearAccelInterrupt() {
	return accel.clearInterrupt();
}
 8082ccc:	b510      	push	{r4, lr}
Adafruit_LIS3DH accel = Adafruit_LIS3DH(A2);
 8082cce:	4c07      	ldr	r4, [pc, #28]	; (8082cec <_GLOBAL__sub_I_gps+0x20>)
UbloxM8Q_GPS gps = UbloxM8Q_GPS();
 8082cd0:	4807      	ldr	r0, [pc, #28]	; (8082cf0 <_GLOBAL__sub_I_gps+0x24>)
 8082cd2:	f000 fc10 	bl	80834f6 <_ZN12UbloxM8Q_GPSC1Ev>
Adafruit_LIS3DH accel = Adafruit_LIS3DH(A2);
 8082cd6:	210c      	movs	r1, #12
 8082cd8:	4620      	mov	r0, r4
 8082cda:	f000 f995 	bl	8083008 <_ZN15Adafruit_LIS3DHC1Ea>
 8082cde:	4620      	mov	r0, r4
}
 8082ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
Adafruit_LIS3DH accel = Adafruit_LIS3DH(A2);
 8082ce4:	4a03      	ldr	r2, [pc, #12]	; (8082cf4 <_GLOBAL__sub_I_gps+0x28>)
 8082ce6:	4904      	ldr	r1, [pc, #16]	; (8082cf8 <_GLOBAL__sub_I_gps+0x2c>)
 8082ce8:	f004 bf9e 	b.w	8087c28 <__aeabi_atexit>
 8082cec:	200002ac 	.word	0x200002ac
 8082cf0:	200002d8 	.word	0x200002d8
 8082cf4:	20000130 	.word	0x20000130
 8082cf8:	080829cb 	.word	0x080829cb

08082cfc <fastPinGetPinmap>:

/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

inline const Hal_Pin_Info* fastPinGetPinmap() {
 8082cfc:	b538      	push	{r3, r4, r5, lr}
    static Hal_Pin_Info* pinMap = HAL_Pin_Map();
 8082cfe:	4c0a      	ldr	r4, [pc, #40]	; (8082d28 <fastPinGetPinmap+0x2c>)
 8082d00:	4d0a      	ldr	r5, [pc, #40]	; (8082d2c <fastPinGetPinmap+0x30>)
 8082d02:	7823      	ldrb	r3, [r4, #0]
 8082d04:	f3bf 8f5b 	dmb	ish
 8082d08:	f013 0f01 	tst.w	r3, #1
 8082d0c:	d109      	bne.n	8082d22 <fastPinGetPinmap+0x26>
 8082d0e:	4620      	mov	r0, r4
 8082d10:	f7fd f9e4 	bl	80800dc <__cxa_guard_acquire>
 8082d14:	b128      	cbz	r0, 8082d22 <fastPinGetPinmap+0x26>
 8082d16:	f001 fa1f 	bl	8084158 <HAL_Pin_Map>
 8082d1a:	6028      	str	r0, [r5, #0]
 8082d1c:	4620      	mov	r0, r4
 8082d1e:	f7fd f9e2 	bl	80800e6 <__cxa_guard_release>
    return pinMap;
}
 8082d22:	6828      	ldr	r0, [r5, #0]
 8082d24:	bd38      	pop	{r3, r4, r5, pc}
 8082d26:	bf00      	nop
 8082d28:	2000033c 	.word	0x2000033c
 8082d2c:	20000340 	.word	0x20000340

08082d30 <_ZN3DHTC1Ehhh>:
#include "Adafruit_DHT.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
	_pin = pin;
	_type = type;
	_count = count;
 8082d30:	7203      	strb	r3, [r0, #8]
	firstreading = true;
 8082d32:	2301      	movs	r3, #1
DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
 8082d34:	b510      	push	{r4, lr}
	_pin = pin;
 8082d36:	7181      	strb	r1, [r0, #6]
	_type = type;
 8082d38:	71c2      	strb	r2, [r0, #7]
	firstreading = true;
 8082d3a:	7403      	strb	r3, [r0, #16]
}
 8082d3c:	bd10      	pop	{r4, pc}

08082d3e <_ZN3DHT5beginEv>:

void DHT::begin(void) {
 8082d3e:	b570      	push	{r4, r5, r6, lr}
 8082d40:	4604      	mov	r4, r0
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRL = fastPinGetPinmap()[_pin].gpio_pin;
 8082d42:	251c      	movs	r5, #28
// set up the pins!
	pinMode(_pin, INPUT);
 8082d44:	2100      	movs	r1, #0
 8082d46:	7980      	ldrb	r0, [r0, #6]
 8082d48:	f004 fe24 	bl	8087994 <pinMode>
	pinSetFast(_pin);
 8082d4c:	79a6      	ldrb	r6, [r4, #6]
 8082d4e:	f7ff ffd5 	bl	8082cfc <fastPinGetPinmap>
 8082d52:	4375      	muls	r5, r6
 8082d54:	1946      	adds	r6, r0, r5
 8082d56:	f7ff ffd1 	bl	8082cfc <fastPinGetPinmap>
 8082d5a:	88b2      	ldrh	r2, [r6, #4]
 8082d5c:	5943      	ldr	r3, [r0, r5]
 8082d5e:	831a      	strh	r2, [r3, #24]
	_lastreadtime = 0;
 8082d60:	2300      	movs	r3, #0
 8082d62:	60e3      	str	r3, [r4, #12]
}
 8082d64:	bd70      	pop	{r4, r5, r6, pc}

08082d66 <_ZN3DHT4readEv>:
	double tC = (a * (float) tempCelcius) / (b + (float) tempCelcius) + log( (float) percentHumidity / 100);
	double Td = (b * tC) / (a - tC);
	return Td;
}

boolean DHT::read(void) {
 8082d66:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8082d6a:	4604      	mov	r4, r0
 8082d6c:	f001 fa74 	bl	8084258 <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime) {
 8082d70:	68e3      	ldr	r3, [r4, #12]
 8082d72:	4283      	cmp	r3, r0
// ie there was a rollover
		_lastreadtime = 0;
 8082d74:	bf84      	itt	hi
 8082d76:	2300      	movhi	r3, #0
 8082d78:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
 8082d7a:	7c23      	ldrb	r3, [r4, #16]
 8082d7c:	b92b      	cbnz	r3, 8082d8a <_ZN3DHT4readEv+0x24>
 8082d7e:	68e3      	ldr	r3, [r4, #12]
 8082d80:	1ac0      	subs	r0, r0, r3
 8082d82:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8082d86:	f0c0 80a6 	bcc.w	8082ed6 <_ZN3DHT4readEv+0x170>
		return true; // return last correct measurement
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
 8082d8a:	2500      	movs	r5, #0
 8082d8c:	7425      	strb	r5, [r4, #16]
 8082d8e:	f001 fa63 	bl	8084258 <HAL_Timer_Get_Milli_Seconds>
 8082d92:	261c      	movs	r6, #28
/*
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
*/
	_lastreadtime = millis();
 8082d94:	60e0      	str	r0, [r4, #12]

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
 8082d96:	6025      	str	r5, [r4, #0]
 8082d98:	7125      	strb	r5, [r4, #4]
  
// pull the pin high and wait 250 milliseconds
	pinSetFast(_pin);
 8082d9a:	79a7      	ldrb	r7, [r4, #6]
 8082d9c:	f7ff ffae 	bl	8082cfc <fastPinGetPinmap>
 8082da0:	4377      	muls	r7, r6
 8082da2:	eb00 0807 	add.w	r8, r0, r7
 8082da6:	f7ff ffa9 	bl	8082cfc <fastPinGetPinmap>
 8082daa:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8082dae:	59c3      	ldr	r3, [r0, r7]
	delay(250);
 8082db0:	20fa      	movs	r0, #250	; 0xfa
 8082db2:	831a      	strh	r2, [r3, #24]
 8082db4:	f003 fba0 	bl	80864f8 <delay>

// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
 8082db8:	2101      	movs	r1, #1
 8082dba:	79a0      	ldrb	r0, [r4, #6]
 8082dbc:	f004 fdea 	bl	8087994 <pinMode>
	pinResetFast(_pin);
 8082dc0:	79a7      	ldrb	r7, [r4, #6]
}

inline void pinResetFast(pin_t _pin)
{
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRH = fastPinGetPinmap()[_pin].gpio_pin;
 8082dc2:	f7ff ff9b 	bl	8082cfc <fastPinGetPinmap>
 8082dc6:	4377      	muls	r7, r6
 8082dc8:	eb00 0807 	add.w	r8, r0, r7
 8082dcc:	f7ff ff96 	bl	8082cfc <fastPinGetPinmap>
 8082dd0:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8082dd4:	59c3      	ldr	r3, [r0, r7]
	delay(20);
 8082dd6:	2014      	movs	r0, #20
 8082dd8:	835a      	strh	r2, [r3, #26]
 8082dda:	f003 fb8d 	bl	80864f8 <delay>
	noInterrupts();
 8082dde:	f004 f924 	bl	808702a <_Z12noInterruptsv>
	pinSetFast(_pin);
 8082de2:	79a7      	ldrb	r7, [r4, #6]
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRL = fastPinGetPinmap()[_pin].gpio_pin;
 8082de4:	f7ff ff8a 	bl	8082cfc <fastPinGetPinmap>
 8082de8:	4377      	muls	r7, r6
 8082dea:	eb00 0807 	add.w	r8, r0, r7
 8082dee:	f7ff ff85 	bl	8082cfc <fastPinGetPinmap>
 8082df2:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8082df6:	59c3      	ldr	r3, [r0, r7]
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 8082df8:	2028      	movs	r0, #40	; 0x28
 8082dfa:	831a      	strh	r2, [r3, #24]
 8082dfc:	f001 fa24 	bl	8084248 <HAL_Delay_Microseconds>
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
 8082e00:	4629      	mov	r1, r5
 8082e02:	79a0      	ldrb	r0, [r4, #6]
 8082e04:	f004 fdc6 	bl	8087994 <pinMode>
	uint8_t j = 0, i;
 8082e08:	462f      	mov	r7, r5
	uint8_t laststate = HIGH;
 8082e0a:	f04f 0801 	mov.w	r8, #1
 8082e0e:	f04f 0900 	mov.w	r9, #0

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
		counter = 0;
		while (pinReadFast(_pin) == laststate) {
 8082e12:	f894 b006 	ldrb.w	fp, [r4, #6]
}

inline int32_t pinReadFast(pin_t _pin)
{
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 8082e16:	f7ff ff71 	bl	8082cfc <fastPinGetPinmap>
 8082e1a:	fb06 fb0b 	mul.w	fp, r6, fp
 8082e1e:	f850 300b 	ldr.w	r3, [r0, fp]
 8082e22:	fa5f fa89 	uxtb.w	sl, r9
 8082e26:	691b      	ldr	r3, [r3, #16]
 8082e28:	9301      	str	r3, [sp, #4]
 8082e2a:	f7ff ff67 	bl	8082cfc <fastPinGetPinmap>
 8082e2e:	4483      	add	fp, r0
 8082e30:	9b01      	ldr	r3, [sp, #4]
 8082e32:	f8bb 2004 	ldrh.w	r2, [fp, #4]
 8082e36:	421a      	tst	r2, r3
 8082e38:	bf14      	ite	ne
 8082e3a:	2301      	movne	r3, #1
 8082e3c:	2300      	moveq	r3, #0
 8082e3e:	4543      	cmp	r3, r8
 8082e40:	d108      	bne.n	8082e54 <_ZN3DHT4readEv+0xee>
 8082e42:	2001      	movs	r0, #1
 8082e44:	f109 0901 	add.w	r9, r9, #1
 8082e48:	f001 f9fe 	bl	8084248 <HAL_Delay_Microseconds>
			counter++;
			delayMicroseconds(1);
			if (counter == 255) {
 8082e4c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8082e50:	d1df      	bne.n	8082e12 <_ZN3DHT4readEv+0xac>
 8082e52:	46ca      	mov	sl, r9
				break;
			}
		}
		laststate = pinReadFast(_pin);
 8082e54:	f894 8006 	ldrb.w	r8, [r4, #6]
 8082e58:	f7ff ff50 	bl	8082cfc <fastPinGetPinmap>
 8082e5c:	fb06 f808 	mul.w	r8, r6, r8
 8082e60:	f850 3008 	ldr.w	r3, [r0, r8]
 8082e64:	f8d3 9010 	ldr.w	r9, [r3, #16]
 8082e68:	f7ff ff48 	bl	8082cfc <fastPinGetPinmap>
 8082e6c:	4480      	add	r8, r0
 8082e6e:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8082e72:	ea13 0f09 	tst.w	r3, r9
 8082e76:	bf14      	ite	ne
 8082e78:	f04f 0801 	movne.w	r8, #1
 8082e7c:	f04f 0800 	moveq.w	r8, #0

		if (counter == 255) break;
 8082e80:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8082e84:	d014      	beq.n	8082eb0 <_ZN3DHT4readEv+0x14a>

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
 8082e86:	2d03      	cmp	r5, #3
 8082e88:	d90e      	bls.n	8082ea8 <_ZN3DHT4readEv+0x142>
 8082e8a:	07ea      	lsls	r2, r5, #31
 8082e8c:	d40c      	bmi.n	8082ea8 <_ZN3DHT4readEv+0x142>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
 8082e8e:	08fa      	lsrs	r2, r7, #3
 8082e90:	5ca3      	ldrb	r3, [r4, r2]
			if (counter > _count)
				data[j/8] |= 1;
			j++;
 8082e92:	3701      	adds	r7, #1
			data[j/8] <<= 1;
 8082e94:	005b      	lsls	r3, r3, #1
 8082e96:	b2db      	uxtb	r3, r3
 8082e98:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
 8082e9a:	7a21      	ldrb	r1, [r4, #8]
			j++;
 8082e9c:	b2ff      	uxtb	r7, r7
			if (counter > _count)
 8082e9e:	4551      	cmp	r1, sl
				data[j/8] |= 1;
 8082ea0:	bf3c      	itt	cc
 8082ea2:	f043 0301 	orrcc.w	r3, r3, #1
 8082ea6:	54a3      	strbcc	r3, [r4, r2]
	for ( i=0; i< MAXTIMINGS; i++) {
 8082ea8:	3501      	adds	r5, #1
 8082eaa:	b2ed      	uxtb	r5, r5
 8082eac:	2d55      	cmp	r5, #85	; 0x55
 8082eae:	d1ae      	bne.n	8082e0e <_ZN3DHT4readEv+0xa8>
		}
	}

	interrupts();
 8082eb0:	f004 f8bd 	bl	808702e <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// check we read 40 bits and that the checksum matches
	if ((j >= 40) && 
 8082eb4:	2f27      	cmp	r7, #39	; 0x27
 8082eb6:	d910      	bls.n	8082eda <_ZN3DHT4readEv+0x174>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
 8082eb8:	7863      	ldrb	r3, [r4, #1]
 8082eba:	7820      	ldrb	r0, [r4, #0]
 8082ebc:	4418      	add	r0, r3
 8082ebe:	78a3      	ldrb	r3, [r4, #2]
 8082ec0:	4418      	add	r0, r3
 8082ec2:	78e3      	ldrb	r3, [r4, #3]
 8082ec4:	4418      	add	r0, r3
 8082ec6:	7923      	ldrb	r3, [r4, #4]
 8082ec8:	b2c0      	uxtb	r0, r0
	if ((j >= 40) && 
 8082eca:	1ac3      	subs	r3, r0, r3
 8082ecc:	4258      	negs	r0, r3
 8082ece:	4158      	adcs	r0, r3
		return true;
	}
 
	return false;

}
 8082ed0:	b003      	add	sp, #12
 8082ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true; // return last correct measurement
 8082ed6:	2001      	movs	r0, #1
 8082ed8:	e7fa      	b.n	8082ed0 <_ZN3DHT4readEv+0x16a>
	return false;
 8082eda:	2000      	movs	r0, #0
 8082edc:	e7f8      	b.n	8082ed0 <_ZN3DHT4readEv+0x16a>
	...

08082ee0 <_ZN3DHT15readTemperatureEv>:
float DHT::readTemperature() {
 8082ee0:	b570      	push	{r4, r5, r6, lr}
 8082ee2:	4604      	mov	r4, r0
	if (read()) {
 8082ee4:	f7ff ff3f 	bl	8082d66 <_ZN3DHT4readEv>
 8082ee8:	b308      	cbz	r0, 8082f2e <_ZN3DHT15readTemperatureEv+0x4e>
		switch (_type) {
 8082eea:	79e3      	ldrb	r3, [r4, #7]
 8082eec:	2b0b      	cmp	r3, #11
 8082eee:	d01a      	beq.n	8082f26 <_ZN3DHT15readTemperatureEv+0x46>
 8082ef0:	3b15      	subs	r3, #21
 8082ef2:	2b01      	cmp	r3, #1
 8082ef4:	d81b      	bhi.n	8082f2e <_ZN3DHT15readTemperatureEv+0x4e>
				f = data[2] & 0x7F;
 8082ef6:	78a6      	ldrb	r6, [r4, #2]
 8082ef8:	f006 007f 	and.w	r0, r6, #127	; 0x7f
 8082efc:	f005 fd86 	bl	8088a0c <__aeabi_i2f>
				f *= 256;
 8082f00:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8082f04:	f005 fdd6 	bl	8088ab4 <__aeabi_fmul>
 8082f08:	4605      	mov	r5, r0
				f += data[3];
 8082f0a:	78e0      	ldrb	r0, [r4, #3]
 8082f0c:	f005 fd7e 	bl	8088a0c <__aeabi_i2f>
 8082f10:	4629      	mov	r1, r5
 8082f12:	f005 fcc7 	bl	80888a4 <__addsf3>
				f /= 10;
 8082f16:	4907      	ldr	r1, [pc, #28]	; (8082f34 <_ZN3DHT15readTemperatureEv+0x54>)
 8082f18:	f005 fe80 	bl	8088c1c <__aeabi_fdiv>
				if (data[2] & 0x80)
 8082f1c:	0633      	lsls	r3, r6, #24
 8082f1e:	d505      	bpl.n	8082f2c <_ZN3DHT15readTemperatureEv+0x4c>
					f *= -1;
 8082f20:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8082f24:	e002      	b.n	8082f2c <_ZN3DHT15readTemperatureEv+0x4c>
				f = data[2];
 8082f26:	78a0      	ldrb	r0, [r4, #2]
 8082f28:	f005 fd6c 	bl	8088a04 <__aeabi_ui2f>
}
 8082f2c:	bd70      	pop	{r4, r5, r6, pc}
		switch (_type) {
 8082f2e:	4802      	ldr	r0, [pc, #8]	; (8082f38 <_ZN3DHT15readTemperatureEv+0x58>)
 8082f30:	e7fc      	b.n	8082f2c <_ZN3DHT15readTemperatureEv+0x4c>
 8082f32:	bf00      	nop
 8082f34:	41200000 	.word	0x41200000
 8082f38:	7fc00000 	.word	0x7fc00000

08082f3c <_ZN3DHT16getTempFarenheitEv>:
float DHT::getTempFarenheit() {
 8082f3c:	b508      	push	{r3, lr}
	return convertCtoF(readTemperature());
 8082f3e:	f7ff ffcf 	bl	8082ee0 <_ZN3DHT15readTemperatureEv>
	return c * 9 / 5 + 32;
 8082f42:	4905      	ldr	r1, [pc, #20]	; (8082f58 <_ZN3DHT16getTempFarenheitEv+0x1c>)
 8082f44:	f005 fdb6 	bl	8088ab4 <__aeabi_fmul>
 8082f48:	4904      	ldr	r1, [pc, #16]	; (8082f5c <_ZN3DHT16getTempFarenheitEv+0x20>)
 8082f4a:	f005 fe67 	bl	8088c1c <__aeabi_fdiv>
 8082f4e:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 8082f52:	f005 fca7 	bl	80888a4 <__addsf3>
}
 8082f56:	bd08      	pop	{r3, pc}
 8082f58:	41100000 	.word	0x41100000
 8082f5c:	40a00000 	.word	0x40a00000

08082f60 <_ZN3DHT12readHumidityEv>:
float DHT::readHumidity(void) {
 8082f60:	b538      	push	{r3, r4, r5, lr}
 8082f62:	4604      	mov	r4, r0
	if (read()) {
 8082f64:	f7ff feff 	bl	8082d66 <_ZN3DHT4readEv>
 8082f68:	b1d8      	cbz	r0, 8082fa2 <_ZN3DHT12readHumidityEv+0x42>
		switch (_type) {
 8082f6a:	79e3      	ldrb	r3, [r4, #7]
 8082f6c:	2b0b      	cmp	r3, #11
 8082f6e:	d014      	beq.n	8082f9a <_ZN3DHT12readHumidityEv+0x3a>
 8082f70:	3b15      	subs	r3, #21
 8082f72:	2b01      	cmp	r3, #1
 8082f74:	d815      	bhi.n	8082fa2 <_ZN3DHT12readHumidityEv+0x42>
				f = data[0];
 8082f76:	7820      	ldrb	r0, [r4, #0]
 8082f78:	f005 fd44 	bl	8088a04 <__aeabi_ui2f>
				f *= 256;
 8082f7c:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8082f80:	f005 fd98 	bl	8088ab4 <__aeabi_fmul>
 8082f84:	4605      	mov	r5, r0
				f += data[1];
 8082f86:	7860      	ldrb	r0, [r4, #1]
 8082f88:	f005 fd40 	bl	8088a0c <__aeabi_i2f>
 8082f8c:	4629      	mov	r1, r5
 8082f8e:	f005 fc89 	bl	80888a4 <__addsf3>
				f /= 10;
 8082f92:	4905      	ldr	r1, [pc, #20]	; (8082fa8 <_ZN3DHT12readHumidityEv+0x48>)
 8082f94:	f005 fe42 	bl	8088c1c <__aeabi_fdiv>
}
 8082f98:	bd38      	pop	{r3, r4, r5, pc}
				f = data[0];
 8082f9a:	7820      	ldrb	r0, [r4, #0]
 8082f9c:	f005 fd32 	bl	8088a04 <__aeabi_ui2f>
				return f;
 8082fa0:	e7fa      	b.n	8082f98 <_ZN3DHT12readHumidityEv+0x38>
		switch (_type) {
 8082fa2:	4802      	ldr	r0, [pc, #8]	; (8082fac <_ZN3DHT12readHumidityEv+0x4c>)
 8082fa4:	e7f8      	b.n	8082f98 <_ZN3DHT12readHumidityEv+0x38>
 8082fa6:	bf00      	nop
 8082fa8:	41200000 	.word	0x41200000
 8082fac:	7fc00000 	.word	0x7fc00000

08082fb0 <_ZN3DHT11getHumidityEv>:
	return readHumidity();
 8082fb0:	f7ff bfd6 	b.w	8082f60 <_ZN3DHT12readHumidityEv>

08082fb4 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
 8082fb4:	4770      	bx	lr
	...

08082fb8 <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data
*/
/**************************************************************************/
void Adafruit_LIS3DH::getSensor(sensor_t *sensor) {
 8082fb8:	460b      	mov	r3, r1
 8082fba:	b510      	push	{r4, lr}
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
 8082fbc:	2228      	movs	r2, #40	; 0x28
void Adafruit_LIS3DH::getSensor(sensor_t *sensor) {
 8082fbe:	4604      	mov	r4, r0
  memset(sensor, 0, sizeof(sensor_t));
 8082fc0:	2100      	movs	r1, #0
 8082fc2:	4618      	mov	r0, r3
 8082fc4:	f005 ffdc 	bl	8088f80 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
 8082fc8:	220b      	movs	r2, #11
 8082fca:	4908      	ldr	r1, [pc, #32]	; (8082fec <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t+0x34>)
 8082fcc:	f006 f863 	bl	8089096 <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
 8082fd0:	2200      	movs	r2, #0
  sensor->version     = 1;
 8082fd2:	2101      	movs	r1, #1
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
 8082fd4:	4603      	mov	r3, r0
  sensor->name[sizeof(sensor->name)- 1] = 0;
 8082fd6:	72c2      	strb	r2, [r0, #11]
  sensor->version     = 1;
 8082fd8:	60c1      	str	r1, [r0, #12]
  sensor->sensor_id   = _sensorID;
 8082fda:	69a0      	ldr	r0, [r4, #24]
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
  sensor->min_delay   = 0;
 8082fdc:	625a      	str	r2, [r3, #36]	; 0x24
  sensor->max_value   = 0;
 8082fde:	2200      	movs	r2, #0
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
 8082fe0:	e9c3 0104 	strd	r0, r1, [r3, #16]
  sensor->max_value   = 0;
 8082fe4:	619a      	str	r2, [r3, #24]
  sensor->min_value   = 0;
 8082fe6:	61da      	str	r2, [r3, #28]
  sensor->resolution  = 0;
 8082fe8:	621a      	str	r2, [r3, #32]
}
 8082fea:	bd10      	pop	{r4, pc}
 8082fec:	08089a11 	.word	0x08089a11

08082ff0 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 8082ff0:	b510      	push	{r4, lr}
 8082ff2:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 8082ff4:	6880      	ldr	r0, [r0, #8]
 8082ff6:	b108      	cbz	r0, 8082ffc <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 8082ff8:	f001 f9a6 	bl	8084348 <os_mutex_recursive_destroy>
 8082ffc:	4620      	mov	r0, r4
 8082ffe:	bd10      	pop	{r4, pc}

08083000 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 8083000:	6803      	ldr	r3, [r0, #0]
 8083002:	b2c9      	uxtb	r1, r1
 8083004:	689b      	ldr	r3, [r3, #8]
 8083006:	4718      	bx	r3

08083008 <_ZN15Adafruit_LIS3DHC1Ea>:
  : _sensorID(-1), _cs(cspin), _mosi(-1), _miso(-1), _sck(-1)
 8083008:	4a06      	ldr	r2, [pc, #24]	; (8083024 <_ZN15Adafruit_LIS3DHC1Ea+0x1c>)
 808300a:	7741      	strb	r1, [r0, #29]
 808300c:	6002      	str	r2, [r0, #0]
 808300e:	f04f 32ff 	mov.w	r2, #4294967295
 8083012:	6182      	str	r2, [r0, #24]
 8083014:	83c2      	strh	r2, [r0, #30]
 8083016:	f64f 72ff 	movw	r2, #65535	; 0xffff
 808301a:	f880 2020 	strb.w	r2, [r0, #32]
 808301e:	2211      	movs	r2, #17
 8083020:	6242      	str	r2, [r0, #36]	; 0x24
{ }
 8083022:	4770      	bx	lr
 8083024:	08089a20 	.word	0x08089a20

08083028 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
 8083028:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
 808302a:	4d0c      	ldr	r5, [pc, #48]	; (808305c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
 808302c:	7829      	ldrb	r1, [r5, #0]
 808302e:	f3bf 8f5b 	dmb	ish
 8083032:	f011 0401 	ands.w	r4, r1, #1
 8083036:	d10f      	bne.n	8083058 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>
 8083038:	4628      	mov	r0, r5
 808303a:	f7fd f84f 	bl	80800dc <__cxa_guard_acquire>
 808303e:	b158      	cbz	r0, 8083058 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>
 8083040:	4621      	mov	r1, r4
 8083042:	4807      	ldr	r0, [pc, #28]	; (8083060 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x38>)
 8083044:	f001 fcdc 	bl	8084a00 <_ZN8SPIClassC1E19hal_spi_interface_t>
 8083048:	4628      	mov	r0, r5
 808304a:	f7fd f84c 	bl	80800e6 <__cxa_guard_release>
 808304e:	4a05      	ldr	r2, [pc, #20]	; (8083064 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x3c>)
 8083050:	4905      	ldr	r1, [pc, #20]	; (8083068 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x40>)
 8083052:	4803      	ldr	r0, [pc, #12]	; (8083060 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x38>)
 8083054:	f004 fde8 	bl	8087c28 <__aeabi_atexit>
        return instance;
    }
 8083058:	4801      	ldr	r0, [pc, #4]	; (8083060 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x38>)
 808305a:	bd38      	pop	{r3, r4, r5, pc}
 808305c:	20000344 	.word	0x20000344
 8083060:	20000348 	.word	0x20000348
 8083064:	20000130 	.word	0x20000130
 8083068:	08082ff1 	.word	0x08082ff1

0808306c <_ZN15Adafruit_LIS3DH7spixferEh>:
/*!
    @brief  Low level SPI
*/
/**************************************************************************/

uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
 808306c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  #ifndef __AVR_ATtiny85__
  if (_sck == -1)
 8083070:	f990 3020 	ldrsb.w	r3, [r0, #32]
uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
 8083074:	4605      	mov	r5, r0
  if (_sck == -1)
 8083076:	3301      	adds	r3, #1
uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
 8083078:	460f      	mov	r7, r1
  if (_sck == -1)
 808307a:	d106      	bne.n	808308a <_ZN15Adafruit_LIS3DH7spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
 808307c:	f7ff ffd4 	bl	8083028 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 8083080:	4639      	mov	r1, r7
    if (digitalRead(_miso))
      reply |= 1;
  }
  return reply;
  #endif
}
 8083082:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8083086:	f001 bd37 	b.w	8084af8 <_ZN8SPIClass8transferEh>
  uint8_t reply = 0;
 808308a:	2400      	movs	r4, #0
  for (int i=7; i>=0; i--) {
 808308c:	2607      	movs	r6, #7
    digitalWrite(_mosi, x & (1<<i));
 808308e:	f04f 0801 	mov.w	r8, #1
    digitalWrite(_sck, LOW);
 8083092:	f995 0020 	ldrsb.w	r0, [r5, #32]
 8083096:	2100      	movs	r1, #0
 8083098:	b280      	uxth	r0, r0
 808309a:	f004 fc8c 	bl	80879b6 <digitalWrite>
    digitalWrite(_mosi, x & (1<<i));
 808309e:	f995 001e 	ldrsb.w	r0, [r5, #30]
 80830a2:	fa08 f106 	lsl.w	r1, r8, r6
 80830a6:	4039      	ands	r1, r7
 80830a8:	b280      	uxth	r0, r0
 80830aa:	f004 fc84 	bl	80879b6 <digitalWrite>
    digitalWrite(_sck, HIGH);
 80830ae:	f995 0020 	ldrsb.w	r0, [r5, #32]
 80830b2:	2101      	movs	r1, #1
 80830b4:	b280      	uxth	r0, r0
 80830b6:	f004 fc7e 	bl	80879b6 <digitalWrite>
    if (digitalRead(_miso))
 80830ba:	f995 001f 	ldrsb.w	r0, [r5, #31]
    reply <<= 1;
 80830be:	0064      	lsls	r4, r4, #1
    if (digitalRead(_miso))
 80830c0:	b280      	uxth	r0, r0
    reply <<= 1;
 80830c2:	b2e4      	uxtb	r4, r4
    if (digitalRead(_miso))
 80830c4:	f004 fc90 	bl	80879e8 <digitalRead>
 80830c8:	b108      	cbz	r0, 80830ce <_ZN15Adafruit_LIS3DH7spixferEh+0x62>
      reply |= 1;
 80830ca:	f044 0401 	orr.w	r4, r4, #1
  for (int i=7; i>=0; i--) {
 80830ce:	3e01      	subs	r6, #1
 80830d0:	d2df      	bcs.n	8083092 <_ZN15Adafruit_LIS3DH7spixferEh+0x26>
}
 80830d2:	4620      	mov	r0, r4
 80830d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080830d8 <_ZN15Adafruit_LIS3DH16beginTransactionEv>:
  #endif
  return value;
}


void Adafruit_LIS3DH::beginTransaction() {
 80830d8:	b508      	push	{r3, lr}
        instance().setBitOrder(order);
 80830da:	f7ff ffa5 	bl	8083028 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 80830de:	2101      	movs	r1, #1
 80830e0:	f001 fcab 	bl	8084a3a <_ZN8SPIClass11setBitOrderEh>
        return instance().setClockSpeed(value, scale);
 80830e4:	f7ff ffa0 	bl	8083028 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 80830e8:	4905      	ldr	r1, [pc, #20]	; (8083100 <_ZN15Adafruit_LIS3DH16beginTransactionEv+0x28>)
 80830ea:	2201      	movs	r2, #1
 80830ec:	f001 fcd8 	bl	8084aa0 <_ZN8SPIClass13setClockSpeedEjj>
        instance().setDataMode(mode);
 80830f0:	f7ff ff9a 	bl	8083028 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    SPI.setClockSpeed(500000);
    SPI.setDataMode(SPI_MODE0);
#else
  SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
#endif
}
 80830f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80830f8:	2100      	movs	r1, #0
 80830fa:	f001 bcac 	b.w	8084a56 <_ZN8SPIClass11setDataModeEh>
 80830fe:	bf00      	nop
 8083100:	0007a120 	.word	0x0007a120

08083104 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>:
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
 8083104:	b570      	push	{r4, r5, r6, lr}
  if (_cs == -1) {
 8083106:	f990 301d 	ldrsb.w	r3, [r0, #29]
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
 808310a:	4604      	mov	r4, r0
  if (_cs == -1) {
 808310c:	3301      	adds	r3, #1
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
 808310e:	460e      	mov	r6, r1
 8083110:	4615      	mov	r5, r2
  if (_cs == -1) {
 8083112:	d116      	bne.n	8083142 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x3e>
    Wire.beginTransmission((uint8_t)_i2caddr);
 8083114:	f004 fd38 	bl	8087b88 <_Z19__fetch_global_Wirev>
 8083118:	7f21      	ldrb	r1, [r4, #28]
 808311a:	f004 f973 	bl	8087404 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
 808311e:	f004 fd33 	bl	8087b88 <_Z19__fetch_global_Wirev>
 8083122:	6803      	ldr	r3, [r0, #0]
 8083124:	4631      	mov	r1, r6
 8083126:	689b      	ldr	r3, [r3, #8]
 8083128:	4798      	blx	r3
    Wire.write((uint8_t)value);
 808312a:	f004 fd2d 	bl	8087b88 <_Z19__fetch_global_Wirev>
 808312e:	6803      	ldr	r3, [r0, #0]
 8083130:	4629      	mov	r1, r5
 8083132:	689b      	ldr	r3, [r3, #8]
 8083134:	4798      	blx	r3
    Wire.endTransmission();
 8083136:	f004 fd27 	bl	8087b88 <_Z19__fetch_global_Wirev>
}
 808313a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Wire.endTransmission();
 808313e:	f004 b984 	b.w	808744a <_ZN7TwoWire15endTransmissionEv>
	if (_sck == -1)
 8083142:	f990 3020 	ldrsb.w	r3, [r0, #32]
 8083146:	3301      	adds	r3, #1
 8083148:	d101      	bne.n	808314e <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x4a>
	  beginTransaction();
 808314a:	f7ff ffc5 	bl	80830d8 <_ZN15Adafruit_LIS3DH16beginTransactionEv>
    digitalWrite(_cs, LOW);
 808314e:	f994 001d 	ldrsb.w	r0, [r4, #29]
 8083152:	2100      	movs	r1, #0
 8083154:	b280      	uxth	r0, r0
 8083156:	f004 fc2e 	bl	80879b6 <digitalWrite>
    spixfer(reg & ~0x80); // write, bit 7 low
 808315a:	f006 017f 	and.w	r1, r6, #127	; 0x7f
 808315e:	4620      	mov	r0, r4
 8083160:	f7ff ff84 	bl	808306c <_ZN15Adafruit_LIS3DH7spixferEh>
    spixfer(value);
 8083164:	4629      	mov	r1, r5
 8083166:	4620      	mov	r0, r4
 8083168:	f7ff ff80 	bl	808306c <_ZN15Adafruit_LIS3DH7spixferEh>
    digitalWrite(_cs, HIGH);
 808316c:	f994 001d 	ldrsb.w	r0, [r4, #29]
 8083170:	2101      	movs	r1, #1
}
 8083172:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    digitalWrite(_cs, HIGH);
 8083176:	b280      	uxth	r0, r0
 8083178:	f004 bc1d 	b.w	80879b6 <digitalWrite>

0808317c <_ZN15Adafruit_LIS3DH13readRegister8Eh>:
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
 808317c:	b538      	push	{r3, r4, r5, lr}
  if (_cs == -1) {
 808317e:	f990 301d 	ldrsb.w	r3, [r0, #29]
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
 8083182:	4604      	mov	r4, r0
  if (_cs == -1) {
 8083184:	3301      	adds	r3, #1
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
 8083186:	460d      	mov	r5, r1
  if (_cs == -1) {
 8083188:	d11d      	bne.n	80831c6 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x4a>
    Wire.beginTransmission(_i2caddr);
 808318a:	f004 fcfd 	bl	8087b88 <_Z19__fetch_global_Wirev>
 808318e:	f994 101c 	ldrsb.w	r1, [r4, #28]
 8083192:	f004 f93b 	bl	808740c <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((uint8_t)reg);
 8083196:	f004 fcf7 	bl	8087b88 <_Z19__fetch_global_Wirev>
 808319a:	6803      	ldr	r3, [r0, #0]
 808319c:	4629      	mov	r1, r5
 808319e:	689b      	ldr	r3, [r3, #8]
 80831a0:	4798      	blx	r3
    Wire.endTransmission();
 80831a2:	f004 fcf1 	bl	8087b88 <_Z19__fetch_global_Wirev>
 80831a6:	f004 f950 	bl	808744a <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(_i2caddr, 1);
 80831aa:	f004 fced 	bl	8087b88 <_Z19__fetch_global_Wirev>
 80831ae:	2201      	movs	r2, #1
 80831b0:	7f21      	ldrb	r1, [r4, #28]
 80831b2:	f004 f924 	bl	80873fe <_ZN7TwoWire11requestFromEhj>
    value = Wire.read();
 80831b6:	f004 fce7 	bl	8087b88 <_Z19__fetch_global_Wirev>
 80831ba:	6803      	ldr	r3, [r0, #0]
 80831bc:	695b      	ldr	r3, [r3, #20]
 80831be:	4798      	blx	r3
 80831c0:	b2c5      	uxtb	r5, r0
}
 80831c2:	4628      	mov	r0, r5
 80831c4:	bd38      	pop	{r3, r4, r5, pc}
	if (_sck == -1)
 80831c6:	f990 3020 	ldrsb.w	r3, [r0, #32]
 80831ca:	3301      	adds	r3, #1
 80831cc:	d101      	bne.n	80831d2 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x56>
	  beginTransaction();
 80831ce:	f7ff ff83 	bl	80830d8 <_ZN15Adafruit_LIS3DH16beginTransactionEv>
	digitalWrite(_cs, LOW);
 80831d2:	f994 001d 	ldrsb.w	r0, [r4, #29]
 80831d6:	2100      	movs	r1, #0
 80831d8:	b280      	uxth	r0, r0
 80831da:	f004 fbec 	bl	80879b6 <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
 80831de:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 80831e2:	4620      	mov	r0, r4
 80831e4:	f7ff ff42 	bl	808306c <_ZN15Adafruit_LIS3DH7spixferEh>
    value = spixfer(0);
 80831e8:	2100      	movs	r1, #0
 80831ea:	4620      	mov	r0, r4
 80831ec:	f7ff ff3e 	bl	808306c <_ZN15Adafruit_LIS3DH7spixferEh>
 80831f0:	4605      	mov	r5, r0
    digitalWrite(_cs, HIGH);
 80831f2:	f994 001d 	ldrsb.w	r0, [r4, #29]
 80831f6:	2101      	movs	r1, #1
 80831f8:	b280      	uxth	r0, r0
 80831fa:	f004 fbdc 	bl	80879b6 <digitalWrite>
    if (_sck == -1)
 80831fe:	e7e0      	b.n	80831c2 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x46>

08083200 <_ZN15Adafruit_LIS3DH8setRangeE14lis3dh_range_t>:
{
 8083200:	b538      	push	{r3, r4, r5, lr}
 8083202:	460d      	mov	r5, r1
  uint8_t r = readRegister8(LIS3DH_REG_CTRL4);
 8083204:	2123      	movs	r1, #35	; 0x23
{
 8083206:	4604      	mov	r4, r0
  uint8_t r = readRegister8(LIS3DH_REG_CTRL4);
 8083208:	f7ff ffb8 	bl	808317c <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  r &= ~(0x30);
 808320c:	f020 0230 	bic.w	r2, r0, #48	; 0x30
  r |= range << 4;
 8083210:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL4, r);
 8083214:	4620      	mov	r0, r4
}
 8083216:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeRegister8(LIS3DH_REG_CTRL4, r);
 808321a:	2123      	movs	r1, #35	; 0x23
 808321c:	b2d2      	uxtb	r2, r2
 808321e:	f7ff bf71 	b.w	8083104 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

08083222 <_ZN15Adafruit_LIS3DH8getRangeEv>:
  return (lis3dh_range_t)((readRegister8(LIS3DH_REG_CTRL4) >> 4) & 0x03);
 8083222:	2123      	movs	r1, #35	; 0x23
{
 8083224:	b508      	push	{r3, lr}
  return (lis3dh_range_t)((readRegister8(LIS3DH_REG_CTRL4) >> 4) & 0x03);
 8083226:	f7ff ffa9 	bl	808317c <_ZN15Adafruit_LIS3DH13readRegister8Eh>
}
 808322a:	f3c0 1001 	ubfx	r0, r0, #4, #2
 808322e:	bd08      	pop	{r3, pc}

08083230 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>:
{
 8083230:	b538      	push	{r3, r4, r5, lr}
 8083232:	460d      	mov	r5, r1
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
 8083234:	2120      	movs	r1, #32
{
 8083236:	4604      	mov	r4, r0
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
 8083238:	f7ff ffa0 	bl	808317c <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  ctl1 &= ~(0xF0); // mask off bits
 808323c:	f000 020f 	and.w	r2, r0, #15
  ctl1 |= (dataRate << 4);
 8083240:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
 8083244:	4620      	mov	r0, r4
}
 8083246:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
 808324a:	2120      	movs	r1, #32
 808324c:	b2d2      	uxtb	r2, r2
 808324e:	f7ff bf59 	b.w	8083104 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

08083252 <_ZN15Adafruit_LIS3DH5beginEh>:
bool Adafruit_LIS3DH::begin(uint8_t i2caddr) {
 8083252:	b510      	push	{r4, lr}
 8083254:	4604      	mov	r4, r0
  _i2caddr = i2caddr;
 8083256:	7701      	strb	r1, [r0, #28]
  if (_cs == -1) {
 8083258:	f990 001d 	ldrsb.w	r0, [r0, #29]
 808325c:	1c42      	adds	r2, r0, #1
 808325e:	d123      	bne.n	80832a8 <_ZN15Adafruit_LIS3DH5beginEh+0x56>
    Wire.begin();
 8083260:	f004 fc92 	bl	8087b88 <_Z19__fetch_global_Wirev>
 8083264:	f004 f89c 	bl	80873a0 <_ZN7TwoWire5beginEv>
  uint8_t deviceid = readRegister8(LIS3DH_REG_WHOAMI);
 8083268:	210f      	movs	r1, #15
 808326a:	4620      	mov	r0, r4
 808326c:	f7ff ff86 	bl	808317c <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  if (deviceid != 0x33)
 8083270:	2833      	cmp	r0, #51	; 0x33
 8083272:	d13d      	bne.n	80832f0 <_ZN15Adafruit_LIS3DH5beginEh+0x9e>
  writeRegister8(LIS3DH_REG_CTRL1, 0x07);
 8083274:	2207      	movs	r2, #7
 8083276:	2120      	movs	r1, #32
 8083278:	4620      	mov	r0, r4
 808327a:	f7ff ff43 	bl	8083104 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  setDataRate(LIS3DH_DATARATE_400_HZ);
 808327e:	2107      	movs	r1, #7
 8083280:	4620      	mov	r0, r4
 8083282:	f7ff ffd5 	bl	8083230 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>
  writeRegister8(LIS3DH_REG_CTRL4, 0x88);
 8083286:	2288      	movs	r2, #136	; 0x88
 8083288:	2123      	movs	r1, #35	; 0x23
 808328a:	4620      	mov	r0, r4
 808328c:	f7ff ff3a 	bl	8083104 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_CTRL3, 0x10);
 8083290:	2210      	movs	r2, #16
 8083292:	2122      	movs	r1, #34	; 0x22
 8083294:	4620      	mov	r0, r4
 8083296:	f7ff ff35 	bl	8083104 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_TEMPCFG, 0x80);
 808329a:	4620      	mov	r0, r4
 808329c:	2280      	movs	r2, #128	; 0x80
 808329e:	211f      	movs	r1, #31
 80832a0:	f7ff ff30 	bl	8083104 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  return true;
 80832a4:	2001      	movs	r0, #1
}
 80832a6:	bd10      	pop	{r4, pc}
    digitalWrite(_cs, HIGH);
 80832a8:	2101      	movs	r1, #1
 80832aa:	b280      	uxth	r0, r0
 80832ac:	f004 fb83 	bl	80879b6 <digitalWrite>
    pinMode(_cs, OUTPUT);
 80832b0:	f994 001d 	ldrsb.w	r0, [r4, #29]
 80832b4:	2101      	movs	r1, #1
 80832b6:	b280      	uxth	r0, r0
 80832b8:	f004 fb6c 	bl	8087994 <pinMode>
    if (_sck == -1) {
 80832bc:	f994 0020 	ldrsb.w	r0, [r4, #32]
 80832c0:	1c43      	adds	r3, r0, #1
 80832c2:	d104      	bne.n	80832ce <_ZN15Adafruit_LIS3DH5beginEh+0x7c>
        instance().begin();
 80832c4:	f7ff feb0 	bl	8083028 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 80832c8:	f001 fba9 	bl	8084a1e <_ZN8SPIClass5beginEv>
    }
 80832cc:	e7cc      	b.n	8083268 <_ZN15Adafruit_LIS3DH5beginEh+0x16>
      pinMode(_sck, OUTPUT);
 80832ce:	2101      	movs	r1, #1
 80832d0:	b280      	uxth	r0, r0
 80832d2:	f004 fb5f 	bl	8087994 <pinMode>
      pinMode(_mosi, OUTPUT);
 80832d6:	f994 001e 	ldrsb.w	r0, [r4, #30]
 80832da:	2101      	movs	r1, #1
 80832dc:	b280      	uxth	r0, r0
 80832de:	f004 fb59 	bl	8087994 <pinMode>
      pinMode(_miso, INPUT);
 80832e2:	f994 001f 	ldrsb.w	r0, [r4, #31]
 80832e6:	2100      	movs	r1, #0
 80832e8:	b280      	uxth	r0, r0
 80832ea:	f004 fb53 	bl	8087994 <pinMode>
 80832ee:	e7bb      	b.n	8083268 <_ZN15Adafruit_LIS3DH5beginEh+0x16>
    return false;
 80832f0:	2000      	movs	r0, #0
 80832f2:	e7d8      	b.n	80832a6 <_ZN15Adafruit_LIS3DH5beginEh+0x54>

080832f4 <_ZN15Adafruit_LIS3DH4readEv>:
void Adafruit_LIS3DH::read(void) {
 80832f4:	b538      	push	{r3, r4, r5, lr}
  if (_cs == -1) {
 80832f6:	f990 301d 	ldrsb.w	r3, [r0, #29]
void Adafruit_LIS3DH::read(void) {
 80832fa:	4604      	mov	r4, r0
  if (_cs == -1) {
 80832fc:	3301      	adds	r3, #1
 80832fe:	d16f      	bne.n	80833e0 <_ZN15Adafruit_LIS3DH4readEv+0xec>
    Wire.beginTransmission(_i2caddr);
 8083300:	f004 fc42 	bl	8087b88 <_Z19__fetch_global_Wirev>
 8083304:	f994 101c 	ldrsb.w	r1, [r4, #28]
 8083308:	f004 f880 	bl	808740c <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(LIS3DH_REG_OUT_X_L | 0x80); // 0x80 for autoincrement
 808330c:	f004 fc3c 	bl	8087b88 <_Z19__fetch_global_Wirev>
 8083310:	21a8      	movs	r1, #168	; 0xa8
 8083312:	f7ff fe75 	bl	8083000 <_ZN7TwoWire5writeEi>
    Wire.endTransmission();
 8083316:	f004 fc37 	bl	8087b88 <_Z19__fetch_global_Wirev>
 808331a:	f004 f896 	bl	808744a <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(_i2caddr, 6);
 808331e:	f004 fc33 	bl	8087b88 <_Z19__fetch_global_Wirev>
 8083322:	2206      	movs	r2, #6
 8083324:	7f21      	ldrb	r1, [r4, #28]
 8083326:	f004 f86a 	bl	80873fe <_ZN7TwoWire11requestFromEhj>
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
 808332a:	f004 fc2d 	bl	8087b88 <_Z19__fetch_global_Wirev>
 808332e:	6803      	ldr	r3, [r0, #0]
 8083330:	4d4f      	ldr	r5, [pc, #316]	; (8083470 <_ZN15Adafruit_LIS3DH4readEv+0x17c>)
 8083332:	695b      	ldr	r3, [r3, #20]
 8083334:	4798      	blx	r3
 8083336:	80e0      	strh	r0, [r4, #6]
 8083338:	f004 fc26 	bl	8087b88 <_Z19__fetch_global_Wirev>
 808333c:	6803      	ldr	r3, [r0, #0]
 808333e:	695b      	ldr	r3, [r3, #20]
 8083340:	4798      	blx	r3
 8083342:	88e3      	ldrh	r3, [r4, #6]
 8083344:	ea05 2000 	and.w	r0, r5, r0, lsl #8
 8083348:	4318      	orrs	r0, r3
 808334a:	80e0      	strh	r0, [r4, #6]
    y = Wire.read(); y |= ((uint16_t)Wire.read()) << 8;
 808334c:	f004 fc1c 	bl	8087b88 <_Z19__fetch_global_Wirev>
 8083350:	6803      	ldr	r3, [r0, #0]
 8083352:	695b      	ldr	r3, [r3, #20]
 8083354:	4798      	blx	r3
 8083356:	8120      	strh	r0, [r4, #8]
 8083358:	f004 fc16 	bl	8087b88 <_Z19__fetch_global_Wirev>
 808335c:	6803      	ldr	r3, [r0, #0]
 808335e:	695b      	ldr	r3, [r3, #20]
 8083360:	4798      	blx	r3
 8083362:	8923      	ldrh	r3, [r4, #8]
 8083364:	ea05 2000 	and.w	r0, r5, r0, lsl #8
 8083368:	4318      	orrs	r0, r3
 808336a:	8120      	strh	r0, [r4, #8]
    z = Wire.read(); z |= ((uint16_t)Wire.read()) << 8;
 808336c:	f004 fc0c 	bl	8087b88 <_Z19__fetch_global_Wirev>
 8083370:	6803      	ldr	r3, [r0, #0]
 8083372:	695b      	ldr	r3, [r3, #20]
 8083374:	4798      	blx	r3
 8083376:	8160      	strh	r0, [r4, #10]
 8083378:	f004 fc06 	bl	8087b88 <_Z19__fetch_global_Wirev>
 808337c:	6803      	ldr	r3, [r0, #0]
 808337e:	695b      	ldr	r3, [r3, #20]
 8083380:	4798      	blx	r3
 8083382:	ea05 2500 	and.w	r5, r5, r0, lsl #8
 8083386:	8960      	ldrh	r0, [r4, #10]
 8083388:	4305      	orrs	r5, r0
 808338a:	8165      	strh	r5, [r4, #10]
  uint8_t range = getRange();
 808338c:	4620      	mov	r0, r4
 808338e:	f7ff ff48 	bl	8083222 <_ZN15Adafruit_LIS3DH8getRangeEv>
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
 8083392:	2803      	cmp	r0, #3
 8083394:	d062      	beq.n	808345c <_ZN15Adafruit_LIS3DH4readEv+0x168>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
 8083396:	2802      	cmp	r0, #2
 8083398:	d063      	beq.n	8083462 <_ZN15Adafruit_LIS3DH4readEv+0x16e>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
 808339a:	2801      	cmp	r0, #1
 808339c:	d064      	beq.n	8083468 <_ZN15Adafruit_LIS3DH4readEv+0x174>
  if (range == LIS3DH_RANGE_2_G) divider = 16380;
 808339e:	2800      	cmp	r0, #0
 80833a0:	f643 70fc 	movw	r0, #16380	; 0x3ffc
 80833a4:	bf18      	it	ne
 80833a6:	2001      	movne	r0, #1
  x_g = (float)x / divider;
 80833a8:	f005 fb30 	bl	8088a0c <__aeabi_i2f>
 80833ac:	4605      	mov	r5, r0
 80833ae:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 80833b2:	f005 fb2b 	bl	8088a0c <__aeabi_i2f>
 80833b6:	4629      	mov	r1, r5
 80833b8:	f005 fc30 	bl	8088c1c <__aeabi_fdiv>
 80833bc:	60e0      	str	r0, [r4, #12]
  y_g = (float)y / divider;
 80833be:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 80833c2:	f005 fb23 	bl	8088a0c <__aeabi_i2f>
 80833c6:	4629      	mov	r1, r5
 80833c8:	f005 fc28 	bl	8088c1c <__aeabi_fdiv>
 80833cc:	6120      	str	r0, [r4, #16]
  z_g = (float)z / divider;
 80833ce:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
 80833d2:	f005 fb1b 	bl	8088a0c <__aeabi_i2f>
 80833d6:	4629      	mov	r1, r5
 80833d8:	f005 fc20 	bl	8088c1c <__aeabi_fdiv>
 80833dc:	6160      	str	r0, [r4, #20]
}
 80833de:	bd38      	pop	{r3, r4, r5, pc}
    if (_sck == -1)
 80833e0:	f990 3020 	ldrsb.w	r3, [r0, #32]
 80833e4:	3301      	adds	r3, #1
 80833e6:	d101      	bne.n	80833ec <_ZN15Adafruit_LIS3DH4readEv+0xf8>
      beginTransaction();
 80833e8:	f7ff fe76 	bl	80830d8 <_ZN15Adafruit_LIS3DH16beginTransactionEv>
    digitalWrite(_cs, LOW);
 80833ec:	f994 001d 	ldrsb.w	r0, [r4, #29]
 80833f0:	2100      	movs	r1, #0
 80833f2:	b280      	uxth	r0, r0
 80833f4:	f004 fadf 	bl	80879b6 <digitalWrite>
    spixfer(LIS3DH_REG_OUT_X_L | 0x80 | 0x40); // read multiple, bit 7&6 high
 80833f8:	21e8      	movs	r1, #232	; 0xe8
 80833fa:	4620      	mov	r0, r4
 80833fc:	f7ff fe36 	bl	808306c <_ZN15Adafruit_LIS3DH7spixferEh>
    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
 8083400:	21ff      	movs	r1, #255	; 0xff
 8083402:	4620      	mov	r0, r4
 8083404:	f7ff fe32 	bl	808306c <_ZN15Adafruit_LIS3DH7spixferEh>
 8083408:	21ff      	movs	r1, #255	; 0xff
 808340a:	80e0      	strh	r0, [r4, #6]
 808340c:	4620      	mov	r0, r4
 808340e:	f7ff fe2d 	bl	808306c <_ZN15Adafruit_LIS3DH7spixferEh>
 8083412:	88e3      	ldrh	r3, [r4, #6]
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
 8083414:	21ff      	movs	r1, #255	; 0xff
    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
 8083416:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 808341a:	80e3      	strh	r3, [r4, #6]
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
 808341c:	4620      	mov	r0, r4
 808341e:	f7ff fe25 	bl	808306c <_ZN15Adafruit_LIS3DH7spixferEh>
 8083422:	21ff      	movs	r1, #255	; 0xff
 8083424:	8120      	strh	r0, [r4, #8]
 8083426:	4620      	mov	r0, r4
 8083428:	f7ff fe20 	bl	808306c <_ZN15Adafruit_LIS3DH7spixferEh>
 808342c:	8923      	ldrh	r3, [r4, #8]
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
 808342e:	21ff      	movs	r1, #255	; 0xff
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
 8083430:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8083434:	8123      	strh	r3, [r4, #8]
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
 8083436:	4620      	mov	r0, r4
 8083438:	f7ff fe18 	bl	808306c <_ZN15Adafruit_LIS3DH7spixferEh>
 808343c:	21ff      	movs	r1, #255	; 0xff
 808343e:	8160      	strh	r0, [r4, #10]
 8083440:	4620      	mov	r0, r4
 8083442:	f7ff fe13 	bl	808306c <_ZN15Adafruit_LIS3DH7spixferEh>
 8083446:	8963      	ldrh	r3, [r4, #10]
    digitalWrite(_cs, HIGH);
 8083448:	2101      	movs	r1, #1
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
 808344a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    digitalWrite(_cs, HIGH);
 808344e:	f994 001d 	ldrsb.w	r0, [r4, #29]
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
 8083452:	8163      	strh	r3, [r4, #10]
    digitalWrite(_cs, HIGH);
 8083454:	b280      	uxth	r0, r0
 8083456:	f004 faae 	bl	80879b6 <digitalWrite>
    if (_sck == -1)
 808345a:	e797      	b.n	808338c <_ZN15Adafruit_LIS3DH4readEv+0x98>
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
 808345c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8083460:	e7a2      	b.n	80833a8 <_ZN15Adafruit_LIS3DH4readEv+0xb4>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
 8083462:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8083466:	e79f      	b.n	80833a8 <_ZN15Adafruit_LIS3DH4readEv+0xb4>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
 8083468:	f641 70fe 	movw	r0, #8190	; 0x1ffe
 808346c:	e79c      	b.n	80833a8 <_ZN15Adafruit_LIS3DH4readEv+0xb4>
 808346e:	bf00      	nop
 8083470:	00ffff00 	.word	0x00ffff00

08083474 <_ZN15Adafruit_LIS3DH8getEventEP15sensors_event_t>:
bool Adafruit_LIS3DH::getEvent(sensors_event_t *event) {
 8083474:	b570      	push	{r4, r5, r6, lr}
 8083476:	460c      	mov	r4, r1
 8083478:	4605      	mov	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
 808347a:	2220      	movs	r2, #32
 808347c:	2100      	movs	r1, #0
 808347e:	1d20      	adds	r0, r4, #4
 8083480:	f005 fd7e 	bl	8088f80 <memset>
  event->version   = sizeof(sensors_event_t);
 8083484:	2324      	movs	r3, #36	; 0x24
 8083486:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
 8083488:	69ab      	ldr	r3, [r5, #24]
  event->type      = SENSOR_TYPE_ACCELEROMETER;
 808348a:	2601      	movs	r6, #1
  event->sensor_id = _sensorID;
 808348c:	6063      	str	r3, [r4, #4]
  event->timestamp = 0;
 808348e:	2300      	movs	r3, #0
  read();
 8083490:	4628      	mov	r0, r5
  event->timestamp = 0;
 8083492:	6123      	str	r3, [r4, #16]
  event->type      = SENSOR_TYPE_ACCELEROMETER;
 8083494:	60a6      	str	r6, [r4, #8]
  read();
 8083496:	f7ff ff2d 	bl	80832f4 <_ZN15Adafruit_LIS3DH4readEv>
  event->acceleration.x = x_g;
 808349a:	68eb      	ldr	r3, [r5, #12]
}
 808349c:	4630      	mov	r0, r6
  event->acceleration.x = x_g;
 808349e:	6163      	str	r3, [r4, #20]
  event->acceleration.y = y_g;
 80834a0:	692b      	ldr	r3, [r5, #16]
 80834a2:	61a3      	str	r3, [r4, #24]
  event->acceleration.z = z_g;
 80834a4:	696b      	ldr	r3, [r5, #20]
 80834a6:	61e3      	str	r3, [r4, #28]
}
 80834a8:	bd70      	pop	{r4, r5, r6, pc}

080834aa <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>:
    return((m[1]*256)+(m[0]));
}
int32_t
UbloxM8Q_GPS::getLong(uint8_t *m)
{
    return((m[3]*(0xFFFFFF+1))+(m[2]*(0xFFFF+1))+(m[1]*(0xFF+1))+(m[0]));
 80834aa:	7883      	ldrb	r3, [r0, #2]
 80834ac:	78c2      	ldrb	r2, [r0, #3]
 80834ae:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 80834b2:	7843      	ldrb	r3, [r0, #1]
 80834b4:	7800      	ldrb	r0, [r0, #0]
 80834b6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
}
 80834ba:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 80834be:	4770      	bx	lr

080834c0 <_ZN12UbloxM8Q_GPS11common_initEv>:
  latitude = longitude = 0.0;
 80834c0:	2200      	movs	r2, #0
  initComplete = false;
 80834c2:	2300      	movs	r3, #0
  latitude = longitude = 0.0;
 80834c4:	6142      	str	r2, [r0, #20]
  hour = minute = seconds = month = day = 0;
 80834c6:	e9c0 3300 	strd	r3, r3, [r0]
  milliseconds = tow = 0;
 80834ca:	e9c0 3302 	strd	r3, r3, [r0, #8]
  horzAcc = vertAcc = 0; // mm
 80834ce:	e9c0 330e 	strd	r3, r3, [r0, #56]	; 0x38
  velN = velE = velD = 0; // north, east, down velocity, mm/s
 80834d2:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
 80834d6:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
  odoTrip = 0; // odometer since last time commanded reset, m
 80834da:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
  odoAcc = 0; // odometer accuracy, m (1-sigma)
 80834de:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
  dateValid = false;
 80834e2:	8203      	strh	r3, [r0, #16]
  latitude = longitude = 0.0;
 80834e4:	6182      	str	r2, [r0, #24]
  latitudeDegrees = longitudeDegrees = 0.0;
 80834e6:	61c2      	str	r2, [r0, #28]
 80834e8:	6202      	str	r2, [r0, #32]
  geoidheight = altitude = 0.0;
 80834ea:	6242      	str	r2, [r0, #36]	; 0x24
 80834ec:	6282      	str	r2, [r0, #40]	; 0x28
  speed = 0.0; // m/s - its just gSpeed/1000.0
 80834ee:	62c2      	str	r2, [r0, #44]	; 0x2c
  headingMot = headingVeh = 0.0; // degrees
 80834f0:	6302      	str	r2, [r0, #48]	; 0x30
 80834f2:	6342      	str	r2, [r0, #52]	; 0x34
}
 80834f4:	4770      	bx	lr

080834f6 <_ZN12UbloxM8Q_GPSC1Ev>:
UbloxM8Q_GPS::UbloxM8Q_GPS()
 80834f6:	b508      	push	{r3, lr}
    common_init();
 80834f8:	f7ff ffe2 	bl	80834c0 <_ZN12UbloxM8Q_GPS11common_initEv>
}
 80834fc:	bd08      	pop	{r3, pc}

080834fe <_ZN12UbloxM8Q_GPS5ubxCSEPhS0_S0_>:
    *ck_a = 0, *ck_b = 0;
 80834fe:	2000      	movs	r0, #0
{
 8083500:	b530      	push	{r4, r5, lr}
    *ck_a = 0, *ck_b = 0;
 8083502:	7010      	strb	r0, [r2, #0]
 8083504:	7018      	strb	r0, [r3, #0]

  // set when receiver enabled
  bool gpsOn;
  // length is 2 bytes, little endian
  int ubx_length(uint8_t *m) {
        return( ((m[LENGTH_IDX])+(m[LENGTH_IDX+1]*256)));}
 8083506:	794d      	ldrb	r5, [r1, #5]
 8083508:	7908      	ldrb	r0, [r1, #4]
 808350a:	1c4c      	adds	r4, r1, #1
 808350c:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 8083510:	3105      	adds	r1, #5
 8083512:	4408      	add	r0, r1
	*ck_a = *ck_a + msg[i + 2]; // skip the 2 byte header
 8083514:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8083518:	7811      	ldrb	r1, [r2, #0]
    for(i=0;i < length + 4;i++)
 808351a:	42a0      	cmp	r0, r4
	*ck_a = *ck_a + msg[i + 2]; // skip the 2 byte header
 808351c:	4429      	add	r1, r5
 808351e:	b2c9      	uxtb	r1, r1
 8083520:	7011      	strb	r1, [r2, #0]
	*ck_b = *ck_b + *ck_a;
 8083522:	781d      	ldrb	r5, [r3, #0]
 8083524:	4429      	add	r1, r5
 8083526:	7019      	strb	r1, [r3, #0]
    for(i=0;i < length + 4;i++)
 8083528:	d1f4      	bne.n	8083514 <_ZN12UbloxM8Q_GPS5ubxCSEPhS0_S0_+0x16>
}
 808352a:	bd30      	pop	{r4, r5, pc}

0808352c <_ZN12UbloxM8Q_GPS8ubxAddCSEPh>:
{
 808352c:	460a      	mov	r2, r1
 808352e:	b410      	push	{r4}
 8083530:	794b      	ldrb	r3, [r1, #5]
 8083532:	790c      	ldrb	r4, [r1, #4]
 8083534:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    ubxCS(msg, &msg[length+6], &msg[length+7]);
 8083538:	1de3      	adds	r3, r4, #7
 808353a:	3406      	adds	r4, #6
 808353c:	4422      	add	r2, r4
 808353e:	440b      	add	r3, r1
}
 8083540:	bc10      	pop	{r4}
    ubxCS(msg, &msg[length+6], &msg[length+7]);
 8083542:	f7ff bfdc 	b.w	80834fe <_ZN12UbloxM8Q_GPS5ubxCSEPhS0_S0_>
	...

08083548 <_ZN12UbloxM8Q_GPS7showUbxEPh>:
{
 8083548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808354a:	460d      	mov	r5, r1
    for (i = 0; i < length + 8; i++){
 808354c:	2600      	movs	r6, #0
 808354e:	794b      	ldrb	r3, [r1, #5]
 8083550:	790c      	ldrb	r4, [r1, #4]
	Serial.print(msg[i], HEX); Serial.print(",");
 8083552:	4f0c      	ldr	r7, [pc, #48]	; (8083584 <_ZN12UbloxM8Q_GPS7showUbxEPh+0x3c>)
 8083554:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    for (i = 0; i < length + 8; i++){
 8083558:	3407      	adds	r4, #7
	Serial.print(msg[i], HEX); Serial.print(",");
 808355a:	f003 fd05 	bl	8086f68 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
 808355e:	5da9      	ldrb	r1, [r5, r6]
 8083560:	2210      	movs	r2, #16
 8083562:	f001 fd96 	bl	8085092 <_ZN5Print11printNumberEmh>
    for (i = 0; i < length + 8; i++){
 8083566:	3601      	adds	r6, #1
	Serial.print(msg[i], HEX); Serial.print(",");
 8083568:	f003 fcfe 	bl	8086f68 <_Z16_fetch_usbserialv>
 808356c:	4639      	mov	r1, r7
 808356e:	f001 fd73 	bl	8085058 <_ZN5Print5printEPKc>
    for (i = 0; i < length + 8; i++){
 8083572:	42b4      	cmp	r4, r6
 8083574:	daf1      	bge.n	808355a <_ZN12UbloxM8Q_GPS7showUbxEPh+0x12>
    Serial.println(" ");
 8083576:	f003 fcf7 	bl	8086f68 <_Z16_fetch_usbserialv>
}
 808357a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Serial.println(" ");
 808357e:	4902      	ldr	r1, [pc, #8]	; (8083588 <_ZN12UbloxM8Q_GPS7showUbxEPh+0x40>)
 8083580:	f001 bd7d 	b.w	808507e <_ZN5Print7printlnEPKc>
 8083584:	08089a34 	.word	0x08089a34
 8083588:	08089d16 	.word	0x08089d16

0808358c <_ZN12UbloxM8Q_GPS8getULongEPh>:
uint32_t 
UbloxM8Q_GPS::getULong(uint8_t *m)
{
    return((m[3]*(0xFFFFFF+1))+(m[2]*(0xFFFF+1))+(m[1]*(0xFF+1))+(m[0]));
 808358c:	78cb      	ldrb	r3, [r1, #3]
 808358e:	7888      	ldrb	r0, [r1, #2]
 8083590:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8083594:	784b      	ldrb	r3, [r1, #1]
 8083596:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 808359a:	7808      	ldrb	r0, [r1, #0]
}
 808359c:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 80835a0:	4770      	bx	lr
 80835a2:	0000      	movs	r0, r0
 80835a4:	0000      	movs	r0, r0
	...

080835a8 <_ZN12UbloxM8Q_GPS11parsePOSLLHEPh>:
{
 80835a8:	b538      	push	{r3, r4, r5, lr}
 80835aa:	4604      	mov	r4, r0
       ((float) getLong(&data[4])) * 0.0000001;
 80835ac:	f101 000a 	add.w	r0, r1, #10
{
 80835b0:	460d      	mov	r5, r1
       ((float) getLong(&data[4])) * 0.0000001;
 80835b2:	f7ff ff7a 	bl	80834aa <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
 80835b6:	f005 fa29 	bl	8088a0c <__aeabi_i2f>
 80835ba:	f004 fdcd 	bl	8088158 <__aeabi_f2d>
 80835be:	a31c      	add	r3, pc, #112	; (adr r3, 8083630 <_ZN12UbloxM8Q_GPS11parsePOSLLHEPh+0x88>)
 80835c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80835c4:	f004 fe20 	bl	8088208 <__aeabi_dmul>
 80835c8:	f005 f916 	bl	80887f8 <__aeabi_d2f>
    longitudeDegrees =
 80835cc:	6220      	str	r0, [r4, #32]
    longitude =              // Longitude, deg
 80835ce:	61a0      	str	r0, [r4, #24]
       ((float) getLong(&data[8])) * 0.0000001;
 80835d0:	f105 000e 	add.w	r0, r5, #14
 80835d4:	f7ff ff69 	bl	80834aa <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
 80835d8:	f005 fa18 	bl	8088a0c <__aeabi_i2f>
 80835dc:	f004 fdbc 	bl	8088158 <__aeabi_f2d>
 80835e0:	a313      	add	r3, pc, #76	; (adr r3, 8083630 <_ZN12UbloxM8Q_GPS11parsePOSLLHEPh+0x88>)
 80835e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80835e6:	f004 fe0f 	bl	8088208 <__aeabi_dmul>
 80835ea:	f005 f905 	bl	80887f8 <__aeabi_d2f>
    latitudeDegrees =
 80835ee:	61e0      	str	r0, [r4, #28]
    latitude =              // Latitude, deg
 80835f0:	6160      	str	r0, [r4, #20]
       (float)getLong(&data[12]);  // WGS84 unless user altered. See ublox spec.
 80835f2:	f105 0012 	add.w	r0, r5, #18
 80835f6:	f7ff ff58 	bl	80834aa <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
 80835fa:	f005 fa07 	bl	8088a0c <__aeabi_i2f>
       (float)getULong(&data[16]);
 80835fe:	f105 0116 	add.w	r1, r5, #22
       (float)getLong(&data[12]);  // WGS84 unless user altered. See ublox spec.
 8083602:	6260      	str	r0, [r4, #36]	; 0x24
       (float)getULong(&data[16]);
 8083604:	4620      	mov	r0, r4
 8083606:	f7ff ffc1 	bl	808358c <_ZN12UbloxM8Q_GPS8getULongEPh>
 808360a:	f005 f9fb 	bl	8088a04 <__aeabi_ui2f>
       getULong(&data[20]);
 808360e:	f105 011a 	add.w	r1, r5, #26
       (float)getULong(&data[16]);
 8083612:	62a0      	str	r0, [r4, #40]	; 0x28
       getULong(&data[20]);
 8083614:	4620      	mov	r0, r4
 8083616:	f7ff ffb9 	bl	808358c <_ZN12UbloxM8Q_GPS8getULongEPh>
       getULong(&data[24]);
 808361a:	f105 011e 	add.w	r1, r5, #30
    horzAcc =                // Horizontal Accuracy estimate, mm
 808361e:	63e0      	str	r0, [r4, #60]	; 0x3c
       getULong(&data[24]);
 8083620:	4620      	mov	r0, r4
 8083622:	f7ff ffb3 	bl	808358c <_ZN12UbloxM8Q_GPS8getULongEPh>
    vertAcc =                // Vertical Accuracy extimate, mm
 8083626:	6420      	str	r0, [r4, #64]	; 0x40
}
 8083628:	bd38      	pop	{r3, r4, r5, pc}
 808362a:	bf00      	nop
 808362c:	f3af 8000 	nop.w
 8083630:	9abcaf48 	.word	0x9abcaf48
 8083634:	3e7ad7f2 	.word	0x3e7ad7f2

08083638 <_ZN12UbloxM8Q_GPS8parsePVTEPh>:
{
 8083638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808363a:	460d      	mov	r5, r1
    tow = getULong(&data[0]);
 808363c:	3106      	adds	r1, #6
{
 808363e:	4604      	mov	r4, r0
    tow = getULong(&data[0]);
 8083640:	f7ff ffa4 	bl	808358c <_ZN12UbloxM8Q_GPS8getULongEPh>
 8083644:	60e0      	str	r0, [r4, #12]
    if ((data[21] & 0x01) == 0){
 8083646:	7eeb      	ldrb	r3, [r5, #27]
 8083648:	07db      	lsls	r3, r3, #31
 808364a:	f140 80af 	bpl.w	80837ac <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x174>
    uint8_t flags = data[11];
 808364e:	7c6b      	ldrb	r3, [r5, #17]
    if ( flags & 0x01){
 8083650:	f013 0201 	ands.w	r2, r3, #1
 8083654:	f000 80ab 	beq.w	80837ae <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x176>
	dateValid = true;
 8083658:	2201      	movs	r2, #1
 808365a:	7422      	strb	r2, [r4, #16]
    return((m[1]*256)+(m[0]));
 808365c:	7ae9      	ldrb	r1, [r5, #11]
 808365e:	7aaa      	ldrb	r2, [r5, #10]
 8083660:	eb02 2201 	add.w	r2, r2, r1, lsl #8
	year = getUInt(&data[4]);  // UTC
 8083664:	80e2      	strh	r2, [r4, #6]
	month = data[6];
 8083666:	7b2a      	ldrb	r2, [r5, #12]
 8083668:	7122      	strb	r2, [r4, #4]
	day = data[7];
 808366a:	7b6a      	ldrb	r2, [r5, #13]
 808366c:	7162      	strb	r2, [r4, #5]
    if ( flags & 0x02){
 808366e:	f013 0302 	ands.w	r3, r3, #2
 8083672:	f000 809e 	beq.w	80837b2 <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x17a>
	timeValid = true;
 8083676:	2301      	movs	r3, #1
 8083678:	7463      	strb	r3, [r4, #17]
	hour = data[8];
 808367a:	7bab      	ldrb	r3, [r5, #14]
 808367c:	7063      	strb	r3, [r4, #1]
	minute = data[9];
 808367e:	7beb      	ldrb	r3, [r5, #15]
 8083680:	70a3      	strb	r3, [r4, #2]
	seconds = data[10];
 8083682:	7c2b      	ldrb	r3, [r5, #16]
 8083684:	70e3      	strb	r3, [r4, #3]
    int32_t nanoseconds = getLong(&data[16]);
 8083686:	f105 0016 	add.w	r0, r5, #22
 808368a:	f7ff ff0e 	bl	80834aa <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
    if (nanoseconds > 0){
 808368e:	2800      	cmp	r0, #0
        milliseconds = nanoseconds/1000;
 8083690:	bfca      	itet	gt
 8083692:	f44f 737a 	movgt.w	r3, #1000	; 0x3e8
        milliseconds = 0;
 8083696:	2000      	movle	r0, #0
        milliseconds = nanoseconds/1000;
 8083698:	fb90 f0f3 	sdivgt	r0, r0, r3
 808369c:	60a0      	str	r0, [r4, #8]
    fixquality = data[20];
 808369e:	7eab      	ldrb	r3, [r5, #26]
          ((float) getLong(&data[24]))*0.0000001;
 80836a0:	f105 001e 	add.w	r0, r5, #30
    fixquality = data[20];
 80836a4:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    fix =  ((fixquality == 3) || (fixquality == 2));
 80836a8:	3b02      	subs	r3, #2
 80836aa:	2b01      	cmp	r3, #1
 80836ac:	bf8c      	ite	hi
 80836ae:	2300      	movhi	r3, #0
 80836b0:	2301      	movls	r3, #1
 80836b2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    satellites = data[23];
 80836b6:	7f6b      	ldrb	r3, [r5, #29]
        (float) (getLong(&data[64])/100000.0);
 80836b8:	f105 0746 	add.w	r7, r5, #70	; 0x46
    satellites = data[23];
 80836bc:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
          ((float) getLong(&data[24]))*0.0000001;
 80836c0:	f7ff fef3 	bl	80834aa <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
 80836c4:	f005 f9a2 	bl	8088a0c <__aeabi_i2f>
 80836c8:	f004 fd46 	bl	8088158 <__aeabi_f2d>
 80836cc:	a33a      	add	r3, pc, #232	; (adr r3, 80837b8 <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x180>)
 80836ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80836d2:	f004 fd99 	bl	8088208 <__aeabi_dmul>
 80836d6:	f005 f88f 	bl	80887f8 <__aeabi_d2f>
    longitudeDegrees =
 80836da:	6220      	str	r0, [r4, #32]
    longitude =              // Longitude, deg
 80836dc:	61a0      	str	r0, [r4, #24]
       ((float) getLong(&data[28]))*0.0000001;
 80836de:	f105 0022 	add.w	r0, r5, #34	; 0x22
 80836e2:	f7ff fee2 	bl	80834aa <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
 80836e6:	f005 f991 	bl	8088a0c <__aeabi_i2f>
 80836ea:	f004 fd35 	bl	8088158 <__aeabi_f2d>
 80836ee:	a332      	add	r3, pc, #200	; (adr r3, 80837b8 <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x180>)
 80836f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80836f4:	f004 fd88 	bl	8088208 <__aeabi_dmul>
 80836f8:	f005 f87e 	bl	80887f8 <__aeabi_d2f>
    latitudeDegrees =
 80836fc:	61e0      	str	r0, [r4, #28]
    latitude =              // Latitude, deg
 80836fe:	6160      	str	r0, [r4, #20]
       (float)getLong(&data[32]); // WGS84 unless user altered. See ublox spec.
 8083700:	f105 0026 	add.w	r0, r5, #38	; 0x26
 8083704:	f7ff fed1 	bl	80834aa <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
 8083708:	f005 f980 	bl	8088a0c <__aeabi_i2f>
       (float)getULong(&data[36]);
 808370c:	f105 012a 	add.w	r1, r5, #42	; 0x2a
       (float)getLong(&data[32]); // WGS84 unless user altered. See ublox spec.
 8083710:	6260      	str	r0, [r4, #36]	; 0x24
       (float)getULong(&data[36]);
 8083712:	4620      	mov	r0, r4
 8083714:	f7ff ff3a 	bl	808358c <_ZN12UbloxM8Q_GPS8getULongEPh>
 8083718:	f005 f974 	bl	8088a04 <__aeabi_ui2f>
       getULong(&data[40]);
 808371c:	f105 012e 	add.w	r1, r5, #46	; 0x2e
       (float)getULong(&data[36]);
 8083720:	62a0      	str	r0, [r4, #40]	; 0x28
       getULong(&data[40]);
 8083722:	4620      	mov	r0, r4
 8083724:	f7ff ff32 	bl	808358c <_ZN12UbloxM8Q_GPS8getULongEPh>
       getULong(&data[44]);
 8083728:	f105 0132 	add.w	r1, r5, #50	; 0x32
    horzAcc =                // Horizontal Accuracy estimate, mm
 808372c:	63e0      	str	r0, [r4, #60]	; 0x3c
       getULong(&data[44]);
 808372e:	4620      	mov	r0, r4
 8083730:	f7ff ff2c 	bl	808358c <_ZN12UbloxM8Q_GPS8getULongEPh>
    vertAcc =                // Vertical Accuracy extimate, mm
 8083734:	6420      	str	r0, [r4, #64]	; 0x40
        getLong(&data[48]);
 8083736:	f105 0036 	add.w	r0, r5, #54	; 0x36
 808373a:	f7ff feb6 	bl	80834aa <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
    velN =                   // North velocity, mm/s
 808373e:	6460      	str	r0, [r4, #68]	; 0x44
        getLong(&data[52]);
 8083740:	f105 003a 	add.w	r0, r5, #58	; 0x3a
 8083744:	f7ff feb1 	bl	80834aa <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
    velE =                   // East velocity, mm/s
 8083748:	64a0      	str	r0, [r4, #72]	; 0x48
        getLong(&data[56]);
 808374a:	f105 003e 	add.w	r0, r5, #62	; 0x3e
 808374e:	f7ff feac 	bl	80834aa <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
    velD =                   // Down velocity, mm/s
 8083752:	64e0      	str	r0, [r4, #76]	; 0x4c
        getLong(&data[60]);
 8083754:	f105 0042 	add.w	r0, r5, #66	; 0x42
 8083758:	f7ff fea7 	bl	80834aa <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
 808375c:	4606      	mov	r6, r0
    gSpeed =                   // Ground speed, mm/s
 808375e:	6520      	str	r0, [r4, #80]	; 0x50
        (float) (getLong(&data[64])/100000.0);
 8083760:	4638      	mov	r0, r7
 8083762:	f7ff fea2 	bl	80834aa <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
 8083766:	f004 fce5 	bl	8088134 <__aeabi_i2d>
 808376a:	a315      	add	r3, pc, #84	; (adr r3, 80837c0 <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x188>)
 808376c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8083770:	f004 fe74 	bl	808845c <__aeabi_ddiv>
 8083774:	f005 f840 	bl	80887f8 <__aeabi_d2f>
 8083778:	6320      	str	r0, [r4, #48]	; 0x30
        (float) (getLong(&data[64])/100000.0);
 808377a:	4638      	mov	r0, r7
 808377c:	f7ff fe95 	bl	80834aa <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
 8083780:	f004 fcd8 	bl	8088134 <__aeabi_i2d>
 8083784:	a30e      	add	r3, pc, #56	; (adr r3, 80837c0 <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x188>)
 8083786:	e9d3 2300 	ldrd	r2, r3, [r3]
 808378a:	f004 fe67 	bl	808845c <__aeabi_ddiv>
 808378e:	f005 f833 	bl	80887f8 <__aeabi_d2f>
 8083792:	6360      	str	r0, [r4, #52]	; 0x34
    if (data[21] & 0x20){
 8083794:	7eeb      	ldrb	r3, [r5, #27]
    speed = ((float)gSpeed/1000.0); // from integer mm/s to float m/s
 8083796:	4630      	mov	r0, r6
    if (data[21] & 0x20){
 8083798:	f3c3 1340 	ubfx	r3, r3, #5, #1
 808379c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    speed = ((float)gSpeed/1000.0); // from integer mm/s to float m/s
 80837a0:	f005 f934 	bl	8088a0c <__aeabi_i2f>
 80837a4:	4908      	ldr	r1, [pc, #32]	; (80837c8 <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x190>)
 80837a6:	f005 fa39 	bl	8088c1c <__aeabi_fdiv>
 80837aa:	62e0      	str	r0, [r4, #44]	; 0x2c
}
 80837ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	dateValid = false;
 80837ae:	7422      	strb	r2, [r4, #16]
 80837b0:	e75d      	b.n	808366e <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x36>
	timeValid = false;
 80837b2:	7463      	strb	r3, [r4, #17]
 80837b4:	e767      	b.n	8083686 <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x4e>
 80837b6:	bf00      	nop
 80837b8:	9abcaf48 	.word	0x9abcaf48
 80837bc:	3e7ad7f2 	.word	0x3e7ad7f2
 80837c0:	00000000 	.word	0x00000000
 80837c4:	40f86a00 	.word	0x40f86a00
 80837c8:	447a0000 	.word	0x447a0000

080837cc <_ZN12UbloxM8Q_GPS8parseODOEPh>:
{
 80837cc:	b510      	push	{r4, lr}
 80837ce:	460c      	mov	r4, r1
    odoTrip = getULong(&data[8]); // since reset, m
 80837d0:	310e      	adds	r1, #14
{
 80837d2:	4602      	mov	r2, r0
    odoTrip = getULong(&data[8]); // since reset, m
 80837d4:	f7ff feda 	bl	808358c <_ZN12UbloxM8Q_GPS8getULongEPh>
    odoTotal = getULong(&data[12]); // since power up, m
 80837d8:	f104 0112 	add.w	r1, r4, #18
    odoTrip = getULong(&data[8]); // since reset, m
 80837dc:	6550      	str	r0, [r2, #84]	; 0x54
    odoTotal = getULong(&data[12]); // since power up, m
 80837de:	4610      	mov	r0, r2
 80837e0:	f7ff fed4 	bl	808358c <_ZN12UbloxM8Q_GPS8getULongEPh>
    odoAcc = getULong(&data[16]); // m 1-sigma
 80837e4:	f104 0116 	add.w	r1, r4, #22
    odoTotal = getULong(&data[12]); // since power up, m
 80837e8:	6590      	str	r0, [r2, #88]	; 0x58
    odoAcc = getULong(&data[16]); // m 1-sigma
 80837ea:	4610      	mov	r0, r2
 80837ec:	f7ff fece 	bl	808358c <_ZN12UbloxM8Q_GPS8getULongEPh>
 80837f0:	65d0      	str	r0, [r2, #92]	; 0x5c
}
 80837f2:	bd10      	pop	{r4, pc}

080837f4 <_ZN12UbloxM8Q_GPS7readVerEv>:
// Used only by UbloxM8Q_GPS.begin() to read the initial report of version
// information from the receiver, write it to Serial, and then turn off
// the NMEA ascii messages.
void
UbloxM8Q_GPS::readVer()
{
 80837f4:	b538      	push	{r3, r4, r5, lr}
    int linecnt = 0;
 80837f6:	2500      	movs	r5, #0
    char c;
    while (linecnt < 10){
	while (Serial1.available()){
 80837f8:	f003 fd3e 	bl	8087278 <_Z22__fetch_global_Serial1v>
 80837fc:	6803      	ldr	r3, [r0, #0]
 80837fe:	691b      	ldr	r3, [r3, #16]
 8083800:	4798      	blx	r3
 8083802:	b960      	cbnz	r0, 808381e <_ZN12UbloxM8Q_GPS7readVerEv+0x2a>
    while (linecnt < 10){
 8083804:	2d09      	cmp	r5, #9
 8083806:	ddf7      	ble.n	80837f8 <_ZN12UbloxM8Q_GPS7readVerEv+0x4>
		linecnt++;
	    }
	    Serial.print(c);
	} 
    }
    Serial1.print("$PUBX,41,1,3,1,9600,0*16\r\n");  // Turn off nmea
 8083808:	f003 fd36 	bl	8087278 <_Z22__fetch_global_Serial1v>
 808380c:	490b      	ldr	r1, [pc, #44]	; (808383c <_ZN12UbloxM8Q_GPS7readVerEv+0x48>)
 808380e:	f001 fc23 	bl	8085058 <_ZN5Print5printEPKc>
    // Must wait for nmea data to rattle out or it gets confused
    // with ubx data.
    delay(2000);
}
 8083812:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    delay(2000);
 8083816:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 808381a:	f002 be6d 	b.w	80864f8 <delay>
	    c = Serial1.read();
 808381e:	f003 fd2b 	bl	8087278 <_Z22__fetch_global_Serial1v>
 8083822:	6803      	ldr	r3, [r0, #0]
 8083824:	695b      	ldr	r3, [r3, #20]
 8083826:	4798      	blx	r3
 8083828:	b2c4      	uxtb	r4, r0
	    if ( c == '\n'){
 808382a:	2c0a      	cmp	r4, #10
		linecnt++;
 808382c:	bf08      	it	eq
 808382e:	3501      	addeq	r5, #1
	    Serial.print(c);
 8083830:	f003 fb9a 	bl	8086f68 <_Z16_fetch_usbserialv>
 8083834:	4621      	mov	r1, r4
 8083836:	f001 fc13 	bl	8085060 <_ZN5Print5printEc>
	while (Serial1.available()){
 808383a:	e7dd      	b.n	80837f8 <_ZN12UbloxM8Q_GPS7readVerEv+0x4>
 808383c:	08089a36 	.word	0x08089a36

08083840 <_ZN12UbloxM8Q_GPS11reportErrorEi9ubxReturn>:

// report error from begin()
void
UbloxM8Q_GPS::reportError(int state, enum ubxReturn ret)
{
 8083840:	b570      	push	{r4, r5, r6, lr}
 8083842:	460c      	mov	r4, r1
 8083844:	4615      	mov	r5, r2
    Serial.print("begin failed, state: ");
 8083846:	f003 fb8f 	bl	8086f68 <_Z16_fetch_usbserialv>
 808384a:	4911      	ldr	r1, [pc, #68]	; (8083890 <_ZN12UbloxM8Q_GPS11reportErrorEi9ubxReturn+0x50>)
 808384c:	f001 fc04 	bl	8085058 <_ZN5Print5printEPKc>
    Serial.print(state);
 8083850:	f003 fb8a 	bl	8086f68 <_Z16_fetch_usbserialv>
        if (n < 0 && base == 10) {
 8083854:	2c00      	cmp	r4, #0
 8083856:	4606      	mov	r6, r0
 8083858:	da18      	bge.n	808388c <_ZN12UbloxM8Q_GPS11reportErrorEi9ubxReturn+0x4c>
            t = print('-');
 808385a:	212d      	movs	r1, #45	; 0x2d
 808385c:	f001 fc00 	bl	8085060 <_ZN5Print5printEc>
            val = -n;
 8083860:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
 8083862:	220a      	movs	r2, #10
 8083864:	4630      	mov	r0, r6
 8083866:	f001 fc14 	bl	8085092 <_ZN5Print11printNumberEmh>
    Serial.print(" error: ");
 808386a:	f003 fb7d 	bl	8086f68 <_Z16_fetch_usbserialv>
 808386e:	4909      	ldr	r1, [pc, #36]	; (8083894 <_ZN12UbloxM8Q_GPS11reportErrorEi9ubxReturn+0x54>)
 8083870:	f001 fbf2 	bl	8085058 <_ZN5Print5printEPKc>
    Serial.println(ret);
 8083874:	f003 fb78 	bl	8086f68 <_Z16_fetch_usbserialv>
 8083878:	4604      	mov	r4, r0
 808387a:	4629      	mov	r1, r5
 808387c:	220a      	movs	r2, #10
 808387e:	f001 fc08 	bl	8085092 <_ZN5Print11printNumberEmh>
        n += println();
 8083882:	4620      	mov	r0, r4
}
 8083884:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8083888:	f001 bbed 	b.w	8085066 <_ZN5Print7printlnEv>
            val = n;
 808388c:	4621      	mov	r1, r4
 808388e:	e7e8      	b.n	8083862 <_ZN12UbloxM8Q_GPS11reportErrorEi9ubxReturn+0x22>
 8083890:	08089a51 	.word	0x08089a51
 8083894:	08089a67 	.word	0x08089a67

08083898 <_ZN8AckedMsgC1Ev>:

// AckedMsg methods
AckedMsg::AckedMsg()
{
    for(uint16_t i=0;i<sizeof(ackList)/sizeof(int);i++) {
	ackList[i] = 0;
 8083898:	2100      	movs	r1, #0
 808389a:	1f03      	subs	r3, r0, #4
 808389c:	f100 0224 	add.w	r2, r0, #36	; 0x24
 80838a0:	f843 1f04 	str.w	r1, [r3, #4]!
    for(uint16_t i=0;i<sizeof(ackList)/sizeof(int);i++) {
 80838a4:	4293      	cmp	r3, r2
 80838a6:	d1fb      	bne.n	80838a0 <_ZN8AckedMsgC1Ev+0x8>
    }
}
 80838a8:	4770      	bx	lr

080838aa <_ZN8AckedMsg6setAckEi>:
int 
AckedMsg::setAck(int msgType)
{
 80838aa:	4602      	mov	r2, r0
 80838ac:	2300      	movs	r3, #0
    for(uint16_t i=0;i<sizeof(ackList)/sizeof(int);i++) {
	if (!ackList[i]){
 80838ae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80838b2:	b910      	cbnz	r0, 80838ba <_ZN8AckedMsg6setAckEi+0x10>
	    ackList[i] = msgType;
 80838b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    return 0;
 80838b8:	4770      	bx	lr
    for(uint16_t i=0;i<sizeof(ackList)/sizeof(int);i++) {
 80838ba:	3301      	adds	r3, #1
 80838bc:	2b0a      	cmp	r3, #10
 80838be:	d1f6      	bne.n	80838ae <_ZN8AckedMsg6setAckEi+0x4>
	}
    }
    return -1;
 80838c0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80838c4:	4770      	bx	lr

080838c6 <_ZN8AckedMsg8clearAckEi>:
void
AckedMsg::clearAck(int msgType)
{
    for(uint16_t i=0;i<sizeof(ackList)/sizeof(int);i++) {
	if (ackList[i] == msgType){
	    ackList[i] = 0;
 80838c6:	2200      	movs	r2, #0
{
 80838c8:	b510      	push	{r4, lr}
 80838ca:	1f03      	subs	r3, r0, #4
 80838cc:	3024      	adds	r0, #36	; 0x24
	if (ackList[i] == msgType){
 80838ce:	f853 4f04 	ldr.w	r4, [r3, #4]!
 80838d2:	428c      	cmp	r4, r1
	    ackList[i] = 0;
 80838d4:	bf08      	it	eq
 80838d6:	601a      	streq	r2, [r3, #0]
    for(uint16_t i=0;i<sizeof(ackList)/sizeof(int);i++) {
 80838d8:	4283      	cmp	r3, r0
 80838da:	d1f8      	bne.n	80838ce <_ZN8AckedMsg8clearAckEi+0x8>
	}
    }
}
 80838dc:	bd10      	pop	{r4, pc}

080838de <_ZN8AckedMsg7isAckedEi>:
bool
AckedMsg::isAcked(int msgType)
{
    for(uint16_t i=0;i<sizeof(ackList)/sizeof(int);i++) {
 80838de:	1f03      	subs	r3, r0, #4
 80838e0:	3024      	adds	r0, #36	; 0x24
	if (ackList[i] == msgType){
 80838e2:	f853 2f04 	ldr.w	r2, [r3, #4]!
 80838e6:	428a      	cmp	r2, r1
 80838e8:	d003      	beq.n	80838f2 <_ZN8AckedMsg7isAckedEi+0x14>
    for(uint16_t i=0;i<sizeof(ackList)/sizeof(int);i++) {
 80838ea:	4283      	cmp	r3, r0
 80838ec:	d1f9      	bne.n	80838e2 <_ZN8AckedMsg7isAckedEi+0x4>
	    return true;
	}
    }
    return false;
 80838ee:	2000      	movs	r0, #0
 80838f0:	4770      	bx	lr
	    return true;
 80838f2:	2001      	movs	r0, #1
}
 80838f4:	4770      	bx	lr

080838f6 <_ZN5Print7printlnIiLi0EEEjT_i>:
    size_t println(T b, int base = DEC) {
 80838f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80838f8:	4605      	mov	r5, r0
 80838fa:	460c      	mov	r4, r1
    if (base == 0) {
 80838fc:	4616      	mov	r6, r2
 80838fe:	b94a      	cbnz	r2, 8083914 <_ZN5Print7printlnIiLi0EEEjT_i+0x1e>
        return write(n);
 8083900:	6803      	ldr	r3, [r0, #0]
 8083902:	b2c9      	uxtb	r1, r1
 8083904:	689b      	ldr	r3, [r3, #8]
 8083906:	4798      	blx	r3
 8083908:	4607      	mov	r7, r0
        n += println();
 808390a:	4628      	mov	r0, r5
 808390c:	f001 fbab 	bl	8085066 <_ZN5Print7printlnEv>
    }
 8083910:	4438      	add	r0, r7
 8083912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n < 0 && base == 10) {
 8083914:	2900      	cmp	r1, #0
 8083916:	da0c      	bge.n	8083932 <_ZN5Print7printlnIiLi0EEEjT_i+0x3c>
 8083918:	2a0a      	cmp	r2, #10
 808391a:	d10a      	bne.n	8083932 <_ZN5Print7printlnIiLi0EEEjT_i+0x3c>
            t = print('-');
 808391c:	212d      	movs	r1, #45	; 0x2d
 808391e:	f001 fb9f 	bl	8085060 <_ZN5Print5printEc>
 8083922:	4607      	mov	r7, r0
            val = -n;
 8083924:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
 8083926:	4628      	mov	r0, r5
 8083928:	b2f2      	uxtb	r2, r6
 808392a:	f001 fbb2 	bl	8085092 <_ZN5Print11printNumberEmh>
 808392e:	4407      	add	r7, r0
 8083930:	e7eb      	b.n	808390a <_ZN5Print7printlnIiLi0EEEjT_i+0x14>
            val = n;
 8083932:	4621      	mov	r1, r4
        size_t t = 0;
 8083934:	2700      	movs	r7, #0
 8083936:	e7f6      	b.n	8083926 <_ZN5Print7printlnIiLi0EEEjT_i+0x30>

08083938 <_ZN12UbloxM8Q_GPS5parseEPhii>:
    switch(type) {
 8083938:	f240 1309 	movw	r3, #265	; 0x109
 808393c:	429a      	cmp	r2, r3
{
 808393e:	b570      	push	{r4, r5, r6, lr}
 8083940:	4606      	mov	r6, r0
 8083942:	460d      	mov	r5, r1
 8083944:	4614      	mov	r4, r2
    switch(type) {
 8083946:	d051      	beq.n	80839ec <_ZN12UbloxM8Q_GPS5parseEPhii+0xb4>
 8083948:	f5b2 7f85 	cmp.w	r2, #266	; 0x10a
 808394c:	da17      	bge.n	808397e <_ZN12UbloxM8Q_GPS5parseEPhii+0x46>
 808394e:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 8083952:	d043      	beq.n	80839dc <_ZN12UbloxM8Q_GPS5parseEPhii+0xa4>
 8083954:	f240 1307 	movw	r3, #263	; 0x107
 8083958:	429a      	cmp	r2, r3
 808395a:	d043      	beq.n	80839e4 <_ZN12UbloxM8Q_GPS5parseEPhii+0xac>
	Serial.print("parse: Unknown type: ");
 808395c:	f003 fb04 	bl	8086f68 <_Z16_fetch_usbserialv>
 8083960:	4924      	ldr	r1, [pc, #144]	; (80839f4 <_ZN12UbloxM8Q_GPS5parseEPhii+0xbc>)
 8083962:	f001 fb79 	bl	8085058 <_ZN5Print5printEPKc>
	Serial.println(type, HEX);
 8083966:	f003 faff 	bl	8086f68 <_Z16_fetch_usbserialv>
 808396a:	4621      	mov	r1, r4
 808396c:	2210      	movs	r2, #16
 808396e:	f7ff ffc2 	bl	80838f6 <_ZN5Print7printlnIiLi0EEEjT_i>
	showUbx(msg);
 8083972:	4629      	mov	r1, r5
 8083974:	4630      	mov	r0, r6
}
 8083976:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	showUbx(msg);
 808397a:	f7ff bde5 	b.w	8083548 <_ZN12UbloxM8Q_GPS7showUbxEPh>
    switch(type) {
 808397e:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8083982:	d01b      	beq.n	80839bc <_ZN12UbloxM8Q_GPS5parseEPhii+0x84>
 8083984:	f240 5301 	movw	r3, #1281	; 0x501
 8083988:	429a      	cmp	r2, r3
 808398a:	d1e7      	bne.n	808395c <_ZN12UbloxM8Q_GPS5parseEPhii+0x24>
  // type is the class and id combined
  int ubxMsgType(uint8_t *m) { return((m[CLASS_IDX]<<8)|(m[ID_IDX]));}
  // For extracting type from the payload of msg, parameter points into payload
  int ubxMsgParm(uint8_t *m) { return((m[0]<<8)|(m[1]));}
 808398c:	88cc      	ldrh	r4, [r1, #6]
	ackedMsg.setAck(typeAcked);
 808398e:	481a      	ldr	r0, [pc, #104]	; (80839f8 <_ZN12UbloxM8Q_GPS5parseEPhii+0xc0>)
 8083990:	ba64      	rev16	r4, r4
 8083992:	b2a4      	uxth	r4, r4
 8083994:	4621      	mov	r1, r4
 8083996:	f7ff ff88 	bl	80838aa <_ZN8AckedMsg6setAckEi>
	Serial.print("parse: ACK_TYPE: ");
 808399a:	f003 fae5 	bl	8086f68 <_Z16_fetch_usbserialv>
 808399e:	4917      	ldr	r1, [pc, #92]	; (80839fc <_ZN12UbloxM8Q_GPS5parseEPhii+0xc4>)
 80839a0:	f001 fb5a 	bl	8085058 <_ZN5Print5printEPKc>
	Serial.print("message acked: ");
 80839a4:	f003 fae0 	bl	8086f68 <_Z16_fetch_usbserialv>
 80839a8:	4915      	ldr	r1, [pc, #84]	; (8083a00 <_ZN12UbloxM8Q_GPS5parseEPhii+0xc8>)
	Serial.print("message NAKed: ");
 80839aa:	f001 fb55 	bl	8085058 <_ZN5Print5printEPKc>
	Serial.println(typeAcked, HEX);
 80839ae:	f003 fadb 	bl	8086f68 <_Z16_fetch_usbserialv>
 80839b2:	2210      	movs	r2, #16
 80839b4:	4621      	mov	r1, r4
 80839b6:	f7ff ff9e 	bl	80838f6 <_ZN5Print7printlnIiLi0EEEjT_i>
}
 80839ba:	bd70      	pop	{r4, r5, r6, pc}
 80839bc:	88cc      	ldrh	r4, [r1, #6]
	ackedMsg.clearAck(typeAcked);
 80839be:	480e      	ldr	r0, [pc, #56]	; (80839f8 <_ZN12UbloxM8Q_GPS5parseEPhii+0xc0>)
 80839c0:	ba64      	rev16	r4, r4
 80839c2:	b2a4      	uxth	r4, r4
 80839c4:	4621      	mov	r1, r4
 80839c6:	f7ff ff7e 	bl	80838c6 <_ZN8AckedMsg8clearAckEi>
	Serial.print("parse: NAK_TYPE: ");
 80839ca:	f003 facd 	bl	8086f68 <_Z16_fetch_usbserialv>
 80839ce:	490d      	ldr	r1, [pc, #52]	; (8083a04 <_ZN12UbloxM8Q_GPS5parseEPhii+0xcc>)
 80839d0:	f001 fb42 	bl	8085058 <_ZN5Print5printEPKc>
	Serial.print("message NAKed: ");
 80839d4:	f003 fac8 	bl	8086f68 <_Z16_fetch_usbserialv>
 80839d8:	490b      	ldr	r1, [pc, #44]	; (8083a08 <_ZN12UbloxM8Q_GPS5parseEPhii+0xd0>)
 80839da:	e7e6      	b.n	80839aa <_ZN12UbloxM8Q_GPS5parseEPhii+0x72>
}
 80839dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	parsePOSLLH(msg);
 80839e0:	f7ff bde2 	b.w	80835a8 <_ZN12UbloxM8Q_GPS11parsePOSLLHEPh>
}
 80839e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	parsePVT(msg);
 80839e8:	f7ff be26 	b.w	8083638 <_ZN12UbloxM8Q_GPS8parsePVTEPh>
}
 80839ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	parseODO(msg);
 80839f0:	f7ff beec 	b.w	80837cc <_ZN12UbloxM8Q_GPS8parseODOEPh>
 80839f4:	08089ab4 	.word	0x08089ab4
 80839f8:	20000378 	.word	0x20000378
 80839fc:	08089a70 	.word	0x08089a70
 8083a00:	08089a82 	.word	0x08089a82
 8083a04:	08089a92 	.word	0x08089a92
 8083a08:	08089aa4 	.word	0x08089aa4

08083a0c <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_>:
{
 8083a0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    switch (state){
 8083a10:	4e6f      	ldr	r6, [pc, #444]	; (8083bd0 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1c4>)
{
 8083a12:	4681      	mov	r9, r0
    switch (state){
 8083a14:	7835      	ldrb	r5, [r6, #0]
{
 8083a16:	460c      	mov	r4, r1
 8083a18:	4690      	mov	r8, r2
 8083a1a:	461f      	mov	r7, r3
 8083a1c:	2d03      	cmp	r5, #3
 8083a1e:	d824      	bhi.n	8083a6a <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x5e>
 8083a20:	e8df f005 	tbb	[pc, r5]
 8083a24:	9b834b02 	.word	0x9b834b02
	if (firstTime){
 8083a28:	4d6a      	ldr	r5, [pc, #424]	; (8083bd4 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1c8>)
 8083a2a:	782b      	ldrb	r3, [r5, #0]
 8083a2c:	b12b      	cbz	r3, 8083a3a <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x2e>
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8083a2e:	f000 fc13 	bl	8084258 <HAL_Timer_Get_Milli_Seconds>
	    startTime = millis();
 8083a32:	4b69      	ldr	r3, [pc, #420]	; (8083bd8 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1cc>)
 8083a34:	6018      	str	r0, [r3, #0]
	    firstTime = false;
 8083a36:	2300      	movs	r3, #0
 8083a38:	702b      	strb	r3, [r5, #0]
	if(Serial1.available()){
 8083a3a:	f003 fc1d 	bl	8087278 <_Z22__fetch_global_Serial1v>
 8083a3e:	6803      	ldr	r3, [r0, #0]
 8083a40:	691b      	ldr	r3, [r3, #16]
 8083a42:	4798      	blx	r3
 8083a44:	b168      	cbz	r0, 8083a62 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x56>
	    msg[0] = Serial1.read();
 8083a46:	f003 fc17 	bl	8087278 <_Z22__fetch_global_Serial1v>
 8083a4a:	6803      	ldr	r3, [r0, #0]
 8083a4c:	695b      	ldr	r3, [r3, #20]
 8083a4e:	4798      	blx	r3
 8083a50:	b2c0      	uxtb	r0, r0
	    if (msg[0] == 0xb5){
 8083a52:	28b5      	cmp	r0, #181	; 0xb5
	    msg[0] = Serial1.read();
 8083a54:	7020      	strb	r0, [r4, #0]
	    if (msg[0] == 0xb5){
 8083a56:	d10a      	bne.n	8083a6e <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x62>
		i = 1;
 8083a58:	2301      	movs	r3, #1
 8083a5a:	4a60      	ldr	r2, [pc, #384]	; (8083bdc <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1d0>)
		state = ubxLength;
 8083a5c:	7033      	strb	r3, [r6, #0]
		i = 1;
 8083a5e:	6013      	str	r3, [r2, #0]
		firstTime = true;
 8083a60:	702b      	strb	r3, [r5, #0]
 8083a62:	f000 fbf9 	bl	8084258 <HAL_Timer_Get_Milli_Seconds>
	if ((state == waitB5) && ((cur - startTime)> ubxWatchdog)){
 8083a66:	7834      	ldrb	r4, [r6, #0]
 8083a68:	b16c      	cbz	r4, 8083a86 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x7a>
    switch (state){
 8083a6a:	2501      	movs	r5, #1
 8083a6c:	e051      	b.n	8083b12 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x106>
		Serial.print(">");
 8083a6e:	f003 fa7b 	bl	8086f68 <_Z16_fetch_usbserialv>
 8083a72:	495b      	ldr	r1, [pc, #364]	; (8083be0 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1d4>)
 8083a74:	f001 faf0 	bl	8085058 <_ZN5Print5printEPKc>
		Serial.print(msg[0], HEX);
 8083a78:	f003 fa76 	bl	8086f68 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
 8083a7c:	2210      	movs	r2, #16
 8083a7e:	7821      	ldrb	r1, [r4, #0]
 8083a80:	f001 fb07 	bl	8085092 <_ZN5Print11printNumberEmh>
 8083a84:	e7ed      	b.n	8083a62 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x56>
	if ((state == waitB5) && ((cur - startTime)> ubxWatchdog)){
 8083a86:	4b54      	ldr	r3, [pc, #336]	; (8083bd8 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1cc>)
 8083a88:	681b      	ldr	r3, [r3, #0]
 8083a8a:	1ac0      	subs	r0, r0, r3
 8083a8c:	4b55      	ldr	r3, [pc, #340]	; (8083be4 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1d8>)
 8083a8e:	681b      	ldr	r3, [r3, #0]
 8083a90:	4298      	cmp	r0, r3
 8083a92:	d9ea      	bls.n	8083a6a <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x5e>
	    Serial.println("Tired of waiting for the GPS. I'm going shut it off and reboot.");
 8083a94:	f003 fa68 	bl	8086f68 <_Z16_fetch_usbserialv>
 8083a98:	4953      	ldr	r1, [pc, #332]	; (8083be8 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1dc>)
 8083a9a:	f001 faf0 	bl	808507e <_ZN5Print7printlnEPKc>
	    delay(2000);
 8083a9e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8083aa2:	f002 fd29 	bl	80864f8 <delay>
	    digitalWrite(D6,HIGH);
 8083aa6:	2101      	movs	r1, #1
 8083aa8:	2006      	movs	r0, #6
 8083aaa:	f003 ff84 	bl	80879b6 <digitalWrite>
	    delay(2000);
 8083aae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8083ab2:	f002 fd21 	bl	80864f8 <delay>
	    resetFunc();
 8083ab6:	47a0      	blx	r4
 8083ab8:	e7d7      	b.n	8083a6a <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x5e>
	if(Serial1.available()){
 8083aba:	f003 fbdd 	bl	8087278 <_Z22__fetch_global_Serial1v>
 8083abe:	6803      	ldr	r3, [r0, #0]
 8083ac0:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8083bdc <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1d0>
 8083ac4:	691b      	ldr	r3, [r3, #16]
 8083ac6:	4798      	blx	r3
 8083ac8:	b150      	cbz	r0, 8083ae0 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0xd4>
	    msg[i] = Serial1.read();
 8083aca:	f003 fbd5 	bl	8087278 <_Z22__fetch_global_Serial1v>
 8083ace:	6803      	ldr	r3, [r0, #0]
 8083ad0:	695b      	ldr	r3, [r3, #20]
 8083ad2:	4798      	blx	r3
 8083ad4:	f8d9 3000 	ldr.w	r3, [r9]
 8083ad8:	54e0      	strb	r0, [r4, r3]
	    i++;
 8083ada:	3301      	adds	r3, #1
 8083adc:	f8c9 3000 	str.w	r3, [r9]
	if (i == 6){ // read all the header
 8083ae0:	f8d9 3000 	ldr.w	r3, [r9]
 8083ae4:	2b06      	cmp	r3, #6
 8083ae6:	d1c0      	bne.n	8083a6a <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x5e>
        return( ((m[LENGTH_IDX])+(m[LENGTH_IDX+1]*256)));}
 8083ae8:	7962      	ldrb	r2, [r4, #5]
 8083aea:	7923      	ldrb	r3, [r4, #4]
 8083aec:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	    if ( *length > (256 - 8) ){
 8083af0:	2bf8      	cmp	r3, #248	; 0xf8
	    *length = ubx_length(msg);
 8083af2:	603b      	str	r3, [r7, #0]
	    if ( *length > (256 - 8) ){
 8083af4:	dd11      	ble.n	8083b1a <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x10e>
		Serial.print("readUBXmsg bad length: ");
 8083af6:	f003 fa37 	bl	8086f68 <_Z16_fetch_usbserialv>
 8083afa:	493c      	ldr	r1, [pc, #240]	; (8083bec <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1e0>)
 8083afc:	f001 faac 	bl	8085058 <_ZN5Print5printEPKc>
		Serial.println(*length);
 8083b00:	f003 fa32 	bl	8086f68 <_Z16_fetch_usbserialv>
 8083b04:	220a      	movs	r2, #10
 8083b06:	6839      	ldr	r1, [r7, #0]
 8083b08:	f7ff fef5 	bl	80838f6 <_ZN5Print7printlnIiLi0EEEjT_i>
		state = waitB5;
 8083b0c:	2300      	movs	r3, #0
		return ubxBAD_LENGTH;
 8083b0e:	2502      	movs	r5, #2
		state = waitB5;
 8083b10:	7033      	strb	r3, [r6, #0]
}
 8083b12:	4628      	mov	r0, r5
 8083b14:	b003      	add	sp, #12
 8083b16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*type = ubxMsgType(msg);
 8083b1a:	8863      	ldrh	r3, [r4, #2]
 8083b1c:	ba5b      	rev16	r3, r3
 8083b1e:	b29b      	uxth	r3, r3
 8083b20:	f8c8 3000 	str.w	r3, [r8]
		state = payload;
 8083b24:	2302      	movs	r3, #2
 8083b26:	7033      	strb	r3, [r6, #0]
 8083b28:	e7f3      	b.n	8083b12 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x106>
	if(Serial1.available()){
 8083b2a:	f003 fba5 	bl	8087278 <_Z22__fetch_global_Serial1v>
 8083b2e:	6803      	ldr	r3, [r0, #0]
 8083b30:	4d2a      	ldr	r5, [pc, #168]	; (8083bdc <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1d0>)
 8083b32:	691b      	ldr	r3, [r3, #16]
 8083b34:	4798      	blx	r3
 8083b36:	b140      	cbz	r0, 8083b4a <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x13e>
	    msg[i] = Serial1.read();
 8083b38:	f003 fb9e 	bl	8087278 <_Z22__fetch_global_Serial1v>
 8083b3c:	6803      	ldr	r3, [r0, #0]
 8083b3e:	695b      	ldr	r3, [r3, #20]
 8083b40:	4798      	blx	r3
 8083b42:	682b      	ldr	r3, [r5, #0]
 8083b44:	54e0      	strb	r0, [r4, r3]
	    i++;
 8083b46:	3301      	adds	r3, #1
 8083b48:	602b      	str	r3, [r5, #0]
	if ( i == (6 + *length)){
 8083b4a:	683b      	ldr	r3, [r7, #0]
 8083b4c:	682a      	ldr	r2, [r5, #0]
 8083b4e:	3306      	adds	r3, #6
 8083b50:	4293      	cmp	r3, r2
 8083b52:	d18a      	bne.n	8083a6a <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x5e>
	    state = checksum;
 8083b54:	2303      	movs	r3, #3
 8083b56:	7033      	strb	r3, [r6, #0]
 8083b58:	e787      	b.n	8083a6a <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x5e>
	if(Serial1.available()){
 8083b5a:	f003 fb8d 	bl	8087278 <_Z22__fetch_global_Serial1v>
 8083b5e:	6803      	ldr	r3, [r0, #0]
 8083b60:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8083bdc <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1d0>
 8083b64:	691b      	ldr	r3, [r3, #16]
 8083b66:	4798      	blx	r3
 8083b68:	b150      	cbz	r0, 8083b80 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x174>
	    msg[i] = Serial1.read();
 8083b6a:	f003 fb85 	bl	8087278 <_Z22__fetch_global_Serial1v>
 8083b6e:	6803      	ldr	r3, [r0, #0]
 8083b70:	695b      	ldr	r3, [r3, #20]
 8083b72:	4798      	blx	r3
 8083b74:	f8d8 3000 	ldr.w	r3, [r8]
 8083b78:	54e0      	strb	r0, [r4, r3]
	    i++;
 8083b7a:	3301      	adds	r3, #1
 8083b7c:	f8c8 3000 	str.w	r3, [r8]
	if ( i == (8 + *length)){
 8083b80:	683f      	ldr	r7, [r7, #0]
 8083b82:	f8d8 3000 	ldr.w	r3, [r8]
 8083b86:	3708      	adds	r7, #8
 8083b88:	429f      	cmp	r7, r3
 8083b8a:	f47f af6e 	bne.w	8083a6a <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x5e>
	    state = waitB5; // going to start over error or not
 8083b8e:	f04f 0800 	mov.w	r8, #0
	    ubxCS(msg, &ck_a, &ck_b);
 8083b92:	4621      	mov	r1, r4
 8083b94:	f10d 0307 	add.w	r3, sp, #7
 8083b98:	f10d 0206 	add.w	r2, sp, #6
 8083b9c:	4648      	mov	r0, r9
	    if ( (msg[i-2] != ck_a) || (msg[i-1] != ck_b)){
 8083b9e:	443c      	add	r4, r7
	    state = waitB5; // going to start over error or not
 8083ba0:	f886 8000 	strb.w	r8, [r6]
	    ubxCS(msg, &ck_a, &ck_b);
 8083ba4:	f7ff fcab 	bl	80834fe <_ZN12UbloxM8Q_GPS5ubxCSEPhS0_S0_>
	    if ( (msg[i-2] != ck_a) || (msg[i-1] != ck_b)){
 8083ba8:	f814 2c02 	ldrb.w	r2, [r4, #-2]
 8083bac:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8083bb0:	429a      	cmp	r2, r3
 8083bb2:	d105      	bne.n	8083bc0 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1b4>
 8083bb4:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8083bb8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8083bbc:	429a      	cmp	r2, r3
 8083bbe:	d005      	beq.n	8083bcc <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1c0>
		Serial.println("readUBXmsg bad check sum ");
 8083bc0:	f003 f9d2 	bl	8086f68 <_Z16_fetch_usbserialv>
 8083bc4:	490a      	ldr	r1, [pc, #40]	; (8083bf0 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1e4>)
 8083bc6:	f001 fa5a 	bl	808507e <_ZN5Print7printlnEPKc>
		return ubxBAD_CHECK_SUM;
 8083bca:	e7a2      	b.n	8083b12 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x106>
	    return ubxSUCCESS;
 8083bcc:	4645      	mov	r5, r8
 8083bce:	e7a0      	b.n	8083b12 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x106>
 8083bd0:	20000358 	.word	0x20000358
 8083bd4:	20000030 	.word	0x20000030
 8083bd8:	2000035c 	.word	0x2000035c
 8083bdc:	20000354 	.word	0x20000354
 8083be0:	08089aca 	.word	0x08089aca
 8083be4:	200000b4 	.word	0x200000b4
 8083be8:	08089acc 	.word	0x08089acc
 8083bec:	08089b0c 	.word	0x08089b0c
 8083bf0:	08089b24 	.word	0x08089b24

08083bf4 <_ZN12UbloxM8Q_GPS4readEv>:
{
 8083bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (gpsOn){
 8083bf6:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
{
 8083bfa:	4604      	mov	r4, r0
 8083bfc:	b0c1      	sub	sp, #260	; 0x104
    if (gpsOn){
 8083bfe:	b32b      	cbz	r3, 8083c4c <_ZN12UbloxM8Q_GPS4readEv+0x58>
	    r = readUBXmsg(msg, &type, &length);
 8083c00:	4d13      	ldr	r5, [pc, #76]	; (8083c50 <_ZN12UbloxM8Q_GPS4readEv+0x5c>)
 8083c02:	4e14      	ldr	r6, [pc, #80]	; (8083c54 <_ZN12UbloxM8Q_GPS4readEv+0x60>)
		Serial.println("gps.read got ubxBAD_CHECK_SUM");
 8083c04:	4f14      	ldr	r7, [pc, #80]	; (8083c58 <_ZN12UbloxM8Q_GPS4readEv+0x64>)
	while(Serial1.available()){
 8083c06:	f003 fb37 	bl	8087278 <_Z22__fetch_global_Serial1v>
 8083c0a:	6803      	ldr	r3, [r0, #0]
 8083c0c:	691b      	ldr	r3, [r3, #16]
 8083c0e:	4798      	blx	r3
 8083c10:	b1e0      	cbz	r0, 8083c4c <_ZN12UbloxM8Q_GPS4readEv+0x58>
	    r = readUBXmsg(msg, &type, &length);
 8083c12:	462b      	mov	r3, r5
 8083c14:	4669      	mov	r1, sp
 8083c16:	4620      	mov	r0, r4
 8083c18:	4a0e      	ldr	r2, [pc, #56]	; (8083c54 <_ZN12UbloxM8Q_GPS4readEv+0x60>)
 8083c1a:	f7ff fef7 	bl	8083a0c <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_>
	    if (r == ubxBAD_LENGTH){
 8083c1e:	2802      	cmp	r0, #2
 8083c20:	d105      	bne.n	8083c2e <_ZN12UbloxM8Q_GPS4readEv+0x3a>
		Serial.println("gps.read got ubxBAD_LENGTH");
 8083c22:	f003 f9a1 	bl	8086f68 <_Z16_fetch_usbserialv>
 8083c26:	490d      	ldr	r1, [pc, #52]	; (8083c5c <_ZN12UbloxM8Q_GPS4readEv+0x68>)
		Serial.println("gps.read got ubxBAD_CHECK_SUM");
 8083c28:	f001 fa29 	bl	808507e <_ZN5Print7printlnEPKc>
	    if (r == ubxSUCCESS){
 8083c2c:	e7eb      	b.n	8083c06 <_ZN12UbloxM8Q_GPS4readEv+0x12>
	    if (r == ubxBAD_CHECK_SUM){
 8083c2e:	2803      	cmp	r0, #3
 8083c30:	d008      	beq.n	8083c44 <_ZN12UbloxM8Q_GPS4readEv+0x50>
	    if (r == ubxSUCCESS){
 8083c32:	2800      	cmp	r0, #0
 8083c34:	d1e7      	bne.n	8083c06 <_ZN12UbloxM8Q_GPS4readEv+0x12>
		parse(msg, type, length);
 8083c36:	4669      	mov	r1, sp
 8083c38:	4620      	mov	r0, r4
 8083c3a:	682b      	ldr	r3, [r5, #0]
 8083c3c:	6832      	ldr	r2, [r6, #0]
 8083c3e:	f7ff fe7b 	bl	8083938 <_ZN12UbloxM8Q_GPS5parseEPhii>
 8083c42:	e7df      	b.n	8083c04 <_ZN12UbloxM8Q_GPS4readEv+0x10>
		Serial.println("gps.read got ubxBAD_CHECK_SUM");
 8083c44:	f003 f990 	bl	8086f68 <_Z16_fetch_usbserialv>
 8083c48:	4639      	mov	r1, r7
 8083c4a:	e7ed      	b.n	8083c28 <_ZN12UbloxM8Q_GPS4readEv+0x34>
}
 8083c4c:	b041      	add	sp, #260	; 0x104
 8083c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8083c50:	20000364 	.word	0x20000364
 8083c54:	20000360 	.word	0x20000360
 8083c58:	08089b59 	.word	0x08089b59
 8083c5c:	08089b3e 	.word	0x08089b3e

08083c60 <_ZN12UbloxM8Q_GPS8writeUBXEPh>:
{
 8083c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (!sent){
 8083c64:	4f29      	ldr	r7, [pc, #164]	; (8083d0c <_ZN12UbloxM8Q_GPS8writeUBXEPh+0xac>)
{
 8083c66:	4680      	mov	r8, r0
    if (!sent){
 8083c68:	783d      	ldrb	r5, [r7, #0]
{
 8083c6a:	460c      	mov	r4, r1
 8083c6c:	463e      	mov	r6, r7
 8083c6e:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8083d1c <_ZN12UbloxM8Q_GPS8writeUBXEPh+0xbc>
    if (!sent){
 8083c72:	bb8d      	cbnz	r5, 8083cd8 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0x78>
  int ubxMsgType(uint8_t *m) { return((m[CLASS_IDX]<<8)|(m[ID_IDX]));}
 8083c74:	8849      	ldrh	r1, [r1, #2]
	ackedMsg.clearAck(msgType);
 8083c76:	4826      	ldr	r0, [pc, #152]	; (8083d10 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0xb0>)
 8083c78:	ba49      	rev16	r1, r1
 8083c7a:	b289      	uxth	r1, r1
	msgType = ubxMsgType(msg);
 8083c7c:	f8c9 1000 	str.w	r1, [r9]
	ackedMsg.clearAck(msgType);
 8083c80:	f7ff fe21 	bl	80838c6 <_ZN8AckedMsg8clearAckEi>
	ubxAddCS(msg);
 8083c84:	4621      	mov	r1, r4
 8083c86:	4640      	mov	r0, r8
 8083c88:	f7ff fc50 	bl	808352c <_ZN12UbloxM8Q_GPS8ubxAddCSEPh>
	Serial.print("writeUBX: type: "); Serial.println(msgType,HEX);
 8083c8c:	f003 f96c 	bl	8086f68 <_Z16_fetch_usbserialv>
 8083c90:	4920      	ldr	r1, [pc, #128]	; (8083d14 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0xb4>)
 8083c92:	f001 f9e1 	bl	8085058 <_ZN5Print5printEPKc>
 8083c96:	f003 f967 	bl	8086f68 <_Z16_fetch_usbserialv>
 8083c9a:	2210      	movs	r2, #16
 8083c9c:	f8d9 1000 	ldr.w	r1, [r9]
 8083ca0:	f7ff fe29 	bl	80838f6 <_ZN5Print7printlnIiLi0EEEjT_i>
	showUbx(msg);
 8083ca4:	4621      	mov	r1, r4
 8083ca6:	4640      	mov	r0, r8
 8083ca8:	f7ff fc4e 	bl	8083548 <_ZN12UbloxM8Q_GPS7showUbxEPh>
        return( ((m[LENGTH_IDX])+(m[LENGTH_IDX+1]*256)));}
 8083cac:	7963      	ldrb	r3, [r4, #5]
 8083cae:	7927      	ldrb	r7, [r4, #4]
 8083cb0:	eb07 2703 	add.w	r7, r7, r3, lsl #8
	for (i = 0; i < length + 8; i++ ){
 8083cb4:	3707      	adds	r7, #7
	    Serial1.write(msg[i]);
 8083cb6:	f003 fadf 	bl	8087278 <_Z22__fetch_global_Serial1v>
 8083cba:	6803      	ldr	r3, [r0, #0]
 8083cbc:	5d61      	ldrb	r1, [r4, r5]
 8083cbe:	689b      	ldr	r3, [r3, #8]
	for (i = 0; i < length + 8; i++ ){
 8083cc0:	3501      	adds	r5, #1
	    Serial1.write(msg[i]);
 8083cc2:	4798      	blx	r3
	for (i = 0; i < length + 8; i++ ){
 8083cc4:	42af      	cmp	r7, r5
 8083cc6:	daf6      	bge.n	8083cb6 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0x56>
 8083cc8:	f000 fac6 	bl	8084258 <HAL_Timer_Get_Milli_Seconds>
	prev = millis();
 8083ccc:	4b12      	ldr	r3, [pc, #72]	; (8083d18 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0xb8>)
 8083cce:	6018      	str	r0, [r3, #0]
	sent = true;
 8083cd0:	2001      	movs	r0, #1
 8083cd2:	7030      	strb	r0, [r6, #0]
}
 8083cd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	read();
 8083cd8:	f7ff ff8c 	bl	8083bf4 <_ZN12UbloxM8Q_GPS4readEv>
	if (!ackedMsg.isAcked(msgType)){
 8083cdc:	f8d9 1000 	ldr.w	r1, [r9]
 8083ce0:	480b      	ldr	r0, [pc, #44]	; (8083d10 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0xb0>)
 8083ce2:	f7ff fdfc 	bl	80838de <_ZN8AckedMsg7isAckedEi>
 8083ce6:	4604      	mov	r4, r0
 8083ce8:	b950      	cbnz	r0, 8083d00 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0xa0>
 8083cea:	f000 fab5 	bl	8084258 <HAL_Timer_Get_Milli_Seconds>
	    if (cur - prev > 2000){
 8083cee:	4b0a      	ldr	r3, [pc, #40]	; (8083d18 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0xb8>)
 8083cf0:	681b      	ldr	r3, [r3, #0]
 8083cf2:	1ac0      	subs	r0, r0, r3
 8083cf4:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8083cf8:	d905      	bls.n	8083d06 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0xa6>
		return ubxNO_ACK;
 8083cfa:	2004      	movs	r0, #4
		sent = false;
 8083cfc:	703c      	strb	r4, [r7, #0]
		return ubxNO_ACK;
 8083cfe:	e7e9      	b.n	8083cd4 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0x74>
	    sent = false;
 8083d00:	2000      	movs	r0, #0
 8083d02:	7038      	strb	r0, [r7, #0]
	    return ubxSUCCESS;
 8083d04:	e7e6      	b.n	8083cd4 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0x74>
    return ubxPENDING;
 8083d06:	2001      	movs	r0, #1
 8083d08:	e7e4      	b.n	8083cd4 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0x74>
 8083d0a:	bf00      	nop
 8083d0c:	20000370 	.word	0x20000370
 8083d10:	20000378 	.word	0x20000378
 8083d14:	08089b77 	.word	0x08089b77
 8083d18:	2000036c 	.word	0x2000036c
 8083d1c:	20000374 	.word	0x20000374

08083d20 <_ZN12UbloxM8Q_GPS11sendCommandEPh>:
{
 8083d20:	b538      	push	{r3, r4, r5, lr}
 8083d22:	4604      	mov	r4, r0
 8083d24:	460d      	mov	r5, r1
	r = writeUBX(msg);
 8083d26:	4629      	mov	r1, r5
 8083d28:	4620      	mov	r0, r4
 8083d2a:	f7ff ff99 	bl	8083c60 <_ZN12UbloxM8Q_GPS8writeUBXEPh>
    while( r == ubxPENDING ){
 8083d2e:	2801      	cmp	r0, #1
 8083d30:	d0f9      	beq.n	8083d26 <_ZN12UbloxM8Q_GPS11sendCommandEPh+0x6>
    if (r == ubxBAD_LENGTH){
 8083d32:	2802      	cmp	r0, #2
 8083d34:	d106      	bne.n	8083d44 <_ZN12UbloxM8Q_GPS11sendCommandEPh+0x24>
	Serial.println("gps.sendCommand got ubxBAD_LENGTH");
 8083d36:	f003 f917 	bl	8086f68 <_Z16_fetch_usbserialv>
 8083d3a:	4909      	ldr	r1, [pc, #36]	; (8083d60 <_ZN12UbloxM8Q_GPS11sendCommandEPh+0x40>)
}
 8083d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Serial.println("gps.sendCommand got ubxNO_ACK");
 8083d40:	f001 b99d 	b.w	808507e <_ZN5Print7printlnEPKc>
    if (r == ubxBAD_CHECK_SUM){
 8083d44:	2803      	cmp	r0, #3
 8083d46:	d005      	beq.n	8083d54 <_ZN12UbloxM8Q_GPS11sendCommandEPh+0x34>
    if (r == ubxNO_ACK){
 8083d48:	2804      	cmp	r0, #4
 8083d4a:	d107      	bne.n	8083d5c <_ZN12UbloxM8Q_GPS11sendCommandEPh+0x3c>
	Serial.println("gps.sendCommand got ubxNO_ACK");
 8083d4c:	f003 f90c 	bl	8086f68 <_Z16_fetch_usbserialv>
 8083d50:	4904      	ldr	r1, [pc, #16]	; (8083d64 <_ZN12UbloxM8Q_GPS11sendCommandEPh+0x44>)
 8083d52:	e7f3      	b.n	8083d3c <_ZN12UbloxM8Q_GPS11sendCommandEPh+0x1c>
	Serial.println("gps.sendCommand got ubxBAD_CHECK_SUM");
 8083d54:	f003 f908 	bl	8086f68 <_Z16_fetch_usbserialv>
 8083d58:	4903      	ldr	r1, [pc, #12]	; (8083d68 <_ZN12UbloxM8Q_GPS11sendCommandEPh+0x48>)
 8083d5a:	e7ef      	b.n	8083d3c <_ZN12UbloxM8Q_GPS11sendCommandEPh+0x1c>
}
 8083d5c:	bd38      	pop	{r3, r4, r5, pc}
 8083d5e:	bf00      	nop
 8083d60:	08089b88 	.word	0x08089b88
 8083d64:	08089bcf 	.word	0x08089bcf
 8083d68:	08089baa 	.word	0x08089baa

08083d6c <_ZN12UbloxM8Q_GPS8resetODOEv>:
    sendCommand(resetODOmsg);
 8083d6c:	4901      	ldr	r1, [pc, #4]	; (8083d74 <_ZN12UbloxM8Q_GPS8resetODOEv+0x8>)
 8083d6e:	f7ff bfd7 	b.w	8083d20 <_ZN12UbloxM8Q_GPS11sendCommandEPh>
 8083d72:	bf00      	nop
 8083d74:	200000ab 	.word	0x200000ab

08083d78 <_ZN12UbloxM8Q_GPS5beginEv>:
{
 8083d78:	b570      	push	{r4, r5, r6, lr}
    switch (state){
 8083d7a:	4d1a      	ldr	r5, [pc, #104]	; (8083de4 <_ZN12UbloxM8Q_GPS5beginEv+0x6c>)
{
 8083d7c:	4606      	mov	r6, r0
 8083d7e:	682b      	ldr	r3, [r5, #0]
 8083d80:	2b05      	cmp	r3, #5
 8083d82:	d829      	bhi.n	8083dd8 <_ZN12UbloxM8Q_GPS5beginEv+0x60>
 8083d84:	e8df f003 	tbb	[pc, r3]
 8083d88:	1b190b03 	.word	0x1b190b03
 8083d8c:	1f1d      	.short	0x1f1d
	    readVer();
 8083d8e:	f7ff fd31 	bl	80837f4 <_ZN12UbloxM8Q_GPS7readVerEv>
	    gpsOn = true;
 8083d92:	2301      	movs	r3, #1
 8083d94:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60
	    state++;
 8083d98:	682b      	ldr	r3, [r5, #0]
 8083d9a:	3301      	adds	r3, #1
 8083d9c:	602b      	str	r3, [r5, #0]
	    ret = writeUBX(cfgRate) ;
 8083d9e:	4912      	ldr	r1, [pc, #72]	; (8083de8 <_ZN12UbloxM8Q_GPS5beginEv+0x70>)
	    ret = writeUBX(cfgNav5) ;
 8083da0:	4630      	mov	r0, r6
 8083da2:	f7ff ff5d 	bl	8083c60 <_ZN12UbloxM8Q_GPS8writeUBXEPh>
	    if ( ret == ubxPENDING){
 8083da6:	2801      	cmp	r0, #1
	    ret = writeUBX(cfgNav5) ;
 8083da8:	4604      	mov	r4, r0
	    if ( ret == ubxPENDING){
 8083daa:	d003      	beq.n	8083db4 <_ZN12UbloxM8Q_GPS5beginEv+0x3c>
	    if ( ret == ubxSUCCESS){
 8083dac:	6829      	ldr	r1, [r5, #0]
 8083dae:	b960      	cbnz	r0, 8083dca <_ZN12UbloxM8Q_GPS5beginEv+0x52>
		state++;
 8083db0:	3101      	adds	r1, #1
 8083db2:	6029      	str	r1, [r5, #0]
		return ubxPENDING;
 8083db4:	2401      	movs	r4, #1
}
 8083db6:	4620      	mov	r0, r4
 8083db8:	bd70      	pop	{r4, r5, r6, pc}
	    ret = writeUBX(enablePVT) ;
 8083dba:	490c      	ldr	r1, [pc, #48]	; (8083dec <_ZN12UbloxM8Q_GPS5beginEv+0x74>)
 8083dbc:	e7f0      	b.n	8083da0 <_ZN12UbloxM8Q_GPS5beginEv+0x28>
	    ret = writeUBX(cfgNav5) ;
 8083dbe:	490c      	ldr	r1, [pc, #48]	; (8083df0 <_ZN12UbloxM8Q_GPS5beginEv+0x78>)
 8083dc0:	e7ee      	b.n	8083da0 <_ZN12UbloxM8Q_GPS5beginEv+0x28>
	    ret = writeUBX(cfgODOmsg) ;
 8083dc2:	490c      	ldr	r1, [pc, #48]	; (8083df4 <_ZN12UbloxM8Q_GPS5beginEv+0x7c>)
 8083dc4:	e7ec      	b.n	8083da0 <_ZN12UbloxM8Q_GPS5beginEv+0x28>
	    ret = writeUBX(enableODO) ;
 8083dc6:	490c      	ldr	r1, [pc, #48]	; (8083df8 <_ZN12UbloxM8Q_GPS5beginEv+0x80>)
 8083dc8:	e7ea      	b.n	8083da0 <_ZN12UbloxM8Q_GPS5beginEv+0x28>
		reportError(state, ret);
 8083dca:	4602      	mov	r2, r0
 8083dcc:	4630      	mov	r0, r6
 8083dce:	f7ff fd37 	bl	8083840 <_ZN12UbloxM8Q_GPS11reportErrorEi9ubxReturn>
		state = 0;
 8083dd2:	2300      	movs	r3, #0
 8083dd4:	602b      	str	r3, [r5, #0]
		return ret;
 8083dd6:	e7ee      	b.n	8083db6 <_ZN12UbloxM8Q_GPS5beginEv+0x3e>
	    initComplete = true;
 8083dd8:	2301      	movs	r3, #1
	    state = 0;
 8083dda:	2400      	movs	r4, #0
	    initComplete = true;
 8083ddc:	7003      	strb	r3, [r0, #0]
	    state = 0;
 8083dde:	602c      	str	r4, [r5, #0]
	    return ubxSUCCESS;
 8083de0:	e7e9      	b.n	8083db6 <_ZN12UbloxM8Q_GPS5beginEv+0x3e>
 8083de2:	bf00      	nop
 8083de4:	20000368 	.word	0x20000368
 8083de8:	20000079 	.word	0x20000079
 8083dec:	20000092 	.word	0x20000092
 8083df0:	20000031 	.word	0x20000031
 8083df4:	2000005d 	.word	0x2000005d
 8083df8:	20000087 	.word	0x20000087

08083dfc <_ZN12UbloxM8Q_GPS7setRateEti>:
    if (measurement < 10){ // I don't know what the real minimum is
 8083dfc:	2909      	cmp	r1, #9
{
 8083dfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8083e02:	4606      	mov	r6, r0
 8083e04:	460c      	mov	r4, r1
 8083e06:	4615      	mov	r5, r2
    if (measurement < 10){ // I don't know what the real minimum is
 8083e08:	d805      	bhi.n	8083e16 <_ZN12UbloxM8Q_GPS7setRateEti+0x1a>
	Serial.println("setRate: changed measurement to minimum 10 ms");
 8083e0a:	f003 f8ad 	bl	8086f68 <_Z16_fetch_usbserialv>
 8083e0e:	4929      	ldr	r1, [pc, #164]	; (8083eb4 <_ZN12UbloxM8Q_GPS7setRateEti+0xb8>)
 8083e10:	f001 f935 	bl	808507e <_ZN5Print7printlnEPKc>
	measurement = 10;
 8083e14:	240a      	movs	r4, #10
    if ( navigationSol < 1 ){ 
 8083e16:	2d00      	cmp	r5, #0
 8083e18:	dc43      	bgt.n	8083ea2 <_ZN12UbloxM8Q_GPS7setRateEti+0xa6>
	Serial.println("setRate: changed navigationSol to minimum 1");
 8083e1a:	f003 f8a5 	bl	8086f68 <_Z16_fetch_usbserialv>
 8083e1e:	4926      	ldr	r1, [pc, #152]	; (8083eb8 <_ZN12UbloxM8Q_GPS7setRateEti+0xbc>)
 8083e20:	f001 f92d 	bl	808507e <_ZN5Print7printlnEPKc>
	navigationSol = 1;
 8083e24:	2501      	movs	r5, #1
    ubxWatchdog = measurement * navigationSol * 5;
 8083e26:	fb05 f304 	mul.w	r3, r5, r4
 8083e2a:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8083ed0 <_ZN12UbloxM8Q_GPS7setRateEti+0xd4>
 8083e2e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8083e32:	f8c8 3000 	str.w	r3, [r8]
    Serial.print("setRate: measurement: ");
 8083e36:	f003 f897 	bl	8086f68 <_Z16_fetch_usbserialv>
 8083e3a:	4920      	ldr	r1, [pc, #128]	; (8083ebc <_ZN12UbloxM8Q_GPS7setRateEti+0xc0>)
 8083e3c:	f001 f90c 	bl	8085058 <_ZN5Print5printEPKc>
    Serial.println(measurement);
 8083e40:	f003 f892 	bl	8086f68 <_Z16_fetch_usbserialv>
 8083e44:	4607      	mov	r7, r0
 8083e46:	220a      	movs	r2, #10
 8083e48:	4621      	mov	r1, r4
 8083e4a:	f001 f922 	bl	8085092 <_ZN5Print11printNumberEmh>
        n += println();
 8083e4e:	4638      	mov	r0, r7
 8083e50:	f001 f909 	bl	8085066 <_ZN5Print7printlnEv>
    Serial.print("setRate: navigationSol: ");
 8083e54:	f003 f888 	bl	8086f68 <_Z16_fetch_usbserialv>
 8083e58:	4919      	ldr	r1, [pc, #100]	; (8083ec0 <_ZN12UbloxM8Q_GPS7setRateEti+0xc4>)
 8083e5a:	f001 f8fd 	bl	8085058 <_ZN5Print5printEPKc>
    Serial.println(navigationSol);
 8083e5e:	f003 f883 	bl	8086f68 <_Z16_fetch_usbserialv>
 8083e62:	220a      	movs	r2, #10
 8083e64:	4629      	mov	r1, r5
 8083e66:	f7ff fd46 	bl	80838f6 <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.print("setRate: ubxWatchdog: ");
 8083e6a:	f003 f87d 	bl	8086f68 <_Z16_fetch_usbserialv>
 8083e6e:	4915      	ldr	r1, [pc, #84]	; (8083ec4 <_ZN12UbloxM8Q_GPS7setRateEti+0xc8>)
 8083e70:	f001 f8f2 	bl	8085058 <_ZN5Print5printEPKc>
    Serial.println(ubxWatchdog);
 8083e74:	f003 f878 	bl	8086f68 <_Z16_fetch_usbserialv>
 8083e78:	4607      	mov	r7, r0
        return printNumber(val, base) + t;
 8083e7a:	f8d8 1000 	ldr.w	r1, [r8]
 8083e7e:	220a      	movs	r2, #10
 8083e80:	f001 f907 	bl	8085092 <_ZN5Print11printNumberEmh>
        n += println();
 8083e84:	4638      	mov	r0, r7
 8083e86:	f001 f8ee 	bl	8085066 <_ZN5Print7printlnEv>
    rateMsg[PAYLOAD_IDX + 3] = 0;
 8083e8a:	2300      	movs	r3, #0
    rateMsg[PAYLOAD_IDX] = (measurement & 0xFF); // little endian
 8083e8c:	490e      	ldr	r1, [pc, #56]	; (8083ec8 <_ZN12UbloxM8Q_GPS7setRateEti+0xcc>)
    sendCommand(rateMsg);
 8083e8e:	4630      	mov	r0, r6
    rateMsg[PAYLOAD_IDX] = (measurement & 0xFF); // little endian
 8083e90:	718c      	strb	r4, [r1, #6]
    rateMsg[PAYLOAD_IDX + 1] = ((measurement/256) & 0xFF);
 8083e92:	0a24      	lsrs	r4, r4, #8
 8083e94:	71cc      	strb	r4, [r1, #7]
    rateMsg[PAYLOAD_IDX + 2] = (navigationSol & 0xFF);
 8083e96:	720d      	strb	r5, [r1, #8]
    rateMsg[PAYLOAD_IDX + 3] = 0;
 8083e98:	724b      	strb	r3, [r1, #9]
}
 8083e9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    sendCommand(rateMsg);
 8083e9e:	f7ff bf3f 	b.w	8083d20 <_ZN12UbloxM8Q_GPS11sendCommandEPh>
    if ( navigationSol > 127 ){ 
 8083ea2:	2d7f      	cmp	r5, #127	; 0x7f
 8083ea4:	ddbf      	ble.n	8083e26 <_ZN12UbloxM8Q_GPS7setRateEti+0x2a>
	Serial.println("setRate: changed navigationSol to maximum 127");
 8083ea6:	f003 f85f 	bl	8086f68 <_Z16_fetch_usbserialv>
 8083eaa:	4908      	ldr	r1, [pc, #32]	; (8083ecc <_ZN12UbloxM8Q_GPS7setRateEti+0xd0>)
 8083eac:	f001 f8e7 	bl	808507e <_ZN5Print7printlnEPKc>
	navigationSol = 127;
 8083eb0:	257f      	movs	r5, #127	; 0x7f
 8083eb2:	e7b8      	b.n	8083e26 <_ZN12UbloxM8Q_GPS7setRateEti+0x2a>
 8083eb4:	08089bed 	.word	0x08089bed
 8083eb8:	08089c1b 	.word	0x08089c1b
 8083ebc:	08089c75 	.word	0x08089c75
 8083ec0:	08089c8c 	.word	0x08089c8c
 8083ec4:	08089ca5 	.word	0x08089ca5
 8083ec8:	2000009d 	.word	0x2000009d
 8083ecc:	08089c47 	.word	0x08089c47
 8083ed0:	200000b4 	.word	0x200000b4

08083ed4 <_GLOBAL__sub_I_enablePOSLLH>:
AckedMsg ackedMsg = AckedMsg();
 8083ed4:	4801      	ldr	r0, [pc, #4]	; (8083edc <_GLOBAL__sub_I_enablePOSLLH+0x8>)
 8083ed6:	f7ff bcdf 	b.w	8083898 <_ZN8AckedMsgC1Ev>
 8083eda:	bf00      	nop
 8083edc:	20000378 	.word	0x20000378

08083ee0 <_Z17tinkerDigitalRead6String>:
 * Output         : None.
 * Return         : Value of the pin (0 or 1) in INT type
                    Returns a negative number on failure
 *******************************************************************************/
int tinkerDigitalRead(String pin)
{
 8083ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
	//convert ascii to integer
	int pinNumber = pin.charAt(1) - '0';
 8083ee2:	2101      	movs	r1, #1
{
 8083ee4:	b085      	sub	sp, #20
 8083ee6:	4606      	mov	r6, r0
	int pinNumber = pin.charAt(1) - '0';
 8083ee8:	f001 f827 	bl	8084f3a <_ZNK6String6charAtEj>
 8083eec:	f1a0 0530 	sub.w	r5, r0, #48	; 0x30
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 8083ef0:	2d07      	cmp	r5, #7
	int pinNumber = pin.charAt(1) - '0';
 8083ef2:	4604      	mov	r4, r0
	if (pinNumber< 0 || pinNumber >7) return -1;
 8083ef4:	d82b      	bhi.n	8083f4e <_Z17tinkerDigitalRead6String+0x6e>

	if(pin.startsWith("D"))
 8083ef6:	4919      	ldr	r1, [pc, #100]	; (8083f5c <_Z17tinkerDigitalRead6String+0x7c>)
 8083ef8:	4668      	mov	r0, sp
 8083efa:	f000 ff3f 	bl	8084d7c <_ZN6StringC1EPKc>
 8083efe:	4669      	mov	r1, sp
 8083f00:	4630      	mov	r0, r6
 8083f02:	f001 f808 	bl	8084f16 <_ZNK6String10startsWithERKS_>
 8083f06:	4607      	mov	r7, r0
 8083f08:	4668      	mov	r0, sp
 8083f0a:	f000 feed 	bl	8084ce8 <_ZN6StringD1Ev>
 8083f0e:	b14f      	cbz	r7, 8083f24 <_Z17tinkerDigitalRead6String+0x44>
	{
		pinMode(pinNumber, INPUT_PULLDOWN);
 8083f10:	b2ad      	uxth	r5, r5
 8083f12:	4628      	mov	r0, r5
 8083f14:	2103      	movs	r1, #3
 8083f16:	f003 fd3d 	bl	8087994 <pinMode>
		return digitalRead(pinNumber);
 8083f1a:	4628      	mov	r0, r5
	}
	else if (pin.startsWith("A"))
	{
		pinMode(pinNumber+10, INPUT_PULLDOWN);
		return digitalRead(pinNumber+10);
 8083f1c:	f003 fd64 	bl	80879e8 <digitalRead>
	}
	return -2;
}
 8083f20:	b005      	add	sp, #20
 8083f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if (pin.startsWith("A"))
 8083f24:	490e      	ldr	r1, [pc, #56]	; (8083f60 <_Z17tinkerDigitalRead6String+0x80>)
 8083f26:	4668      	mov	r0, sp
 8083f28:	f000 ff28 	bl	8084d7c <_ZN6StringC1EPKc>
 8083f2c:	4669      	mov	r1, sp
 8083f2e:	4630      	mov	r0, r6
 8083f30:	f000 fff1 	bl	8084f16 <_ZNK6String10startsWithERKS_>
 8083f34:	4605      	mov	r5, r0
 8083f36:	4668      	mov	r0, sp
 8083f38:	f000 fed6 	bl	8084ce8 <_ZN6StringD1Ev>
 8083f3c:	b155      	cbz	r5, 8083f54 <_Z17tinkerDigitalRead6String+0x74>
		pinMode(pinNumber+10, INPUT_PULLDOWN);
 8083f3e:	3c26      	subs	r4, #38	; 0x26
 8083f40:	b2a4      	uxth	r4, r4
 8083f42:	4620      	mov	r0, r4
 8083f44:	2103      	movs	r1, #3
 8083f46:	f003 fd25 	bl	8087994 <pinMode>
		return digitalRead(pinNumber+10);
 8083f4a:	4620      	mov	r0, r4
 8083f4c:	e7e6      	b.n	8083f1c <_Z17tinkerDigitalRead6String+0x3c>
	if (pinNumber< 0 || pinNumber >7) return -1;
 8083f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8083f52:	e7e5      	b.n	8083f20 <_Z17tinkerDigitalRead6String+0x40>
	return -2;
 8083f54:	f06f 0001 	mvn.w	r0, #1
 8083f58:	e7e2      	b.n	8083f20 <_Z17tinkerDigitalRead6String+0x40>
 8083f5a:	bf00      	nop
 8083f5c:	080894c4 	.word	0x080894c4
 8083f60:	08089cbc 	.word	0x08089cbc

08083f64 <_Z18tinkerDigitalWrite6String>:
 * Input          : Pin and value
 * Output         : None.
 * Return         : 1 on success and a negative number on failure
 *******************************************************************************/
int tinkerDigitalWrite(String command)
{
 8083f64:	b5f0      	push	{r4, r5, r6, r7, lr}
	bool value = 0;
	//convert ascii to integer
	int pinNumber = command.charAt(1) - '0';
 8083f66:	2101      	movs	r1, #1
{
 8083f68:	b085      	sub	sp, #20
 8083f6a:	4606      	mov	r6, r0
	int pinNumber = command.charAt(1) - '0';
 8083f6c:	f000 ffe5 	bl	8084f3a <_ZNK6String6charAtEj>
 8083f70:	f1a0 0430 	sub.w	r4, r0, #48	; 0x30
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 8083f74:	2c07      	cmp	r4, #7
 8083f76:	d847      	bhi.n	8084008 <_Z18tinkerDigitalWrite6String+0xa4>

	if(command.substring(3,7) == "HIGH") value = 1;
 8083f78:	2307      	movs	r3, #7
 8083f7a:	2203      	movs	r2, #3
 8083f7c:	4631      	mov	r1, r6
 8083f7e:	4668      	mov	r0, sp
 8083f80:	f000 ffee 	bl	8084f60 <_ZNK6String9substringEjj>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8083f84:	4668      	mov	r0, sp
 8083f86:	4925      	ldr	r1, [pc, #148]	; (808401c <_Z18tinkerDigitalWrite6String+0xb8>)
 8083f88:	f000 ff9d 	bl	8084ec6 <_ZNK6String6equalsEPKc>
 8083f8c:	4605      	mov	r5, r0
 8083f8e:	4668      	mov	r0, sp
 8083f90:	f000 feaa 	bl	8084ce8 <_ZN6StringD1Ev>
 8083f94:	bb3d      	cbnz	r5, 8083fe6 <_Z18tinkerDigitalWrite6String+0x82>
	else if(command.substring(3,6) == "LOW") value = 0;
 8083f96:	2306      	movs	r3, #6
 8083f98:	2203      	movs	r2, #3
 8083f9a:	4631      	mov	r1, r6
 8083f9c:	4668      	mov	r0, sp
 8083f9e:	f000 ffdf 	bl	8084f60 <_ZNK6String9substringEjj>
 8083fa2:	4668      	mov	r0, sp
 8083fa4:	491e      	ldr	r1, [pc, #120]	; (8084020 <_Z18tinkerDigitalWrite6String+0xbc>)
 8083fa6:	f000 ff8e 	bl	8084ec6 <_ZNK6String6equalsEPKc>
 8083faa:	4607      	mov	r7, r0
 8083fac:	4668      	mov	r0, sp
 8083fae:	f000 fe9b 	bl	8084ce8 <_ZN6StringD1Ev>
 8083fb2:	b367      	cbz	r7, 808400e <_Z18tinkerDigitalWrite6String+0xaa>
	else return -2;

	if(command.startsWith("D"))
 8083fb4:	491b      	ldr	r1, [pc, #108]	; (8084024 <_Z18tinkerDigitalWrite6String+0xc0>)
 8083fb6:	4668      	mov	r0, sp
 8083fb8:	f000 fee0 	bl	8084d7c <_ZN6StringC1EPKc>
 8083fbc:	4669      	mov	r1, sp
 8083fbe:	4630      	mov	r0, r6
 8083fc0:	f000 ffa9 	bl	8084f16 <_ZNK6String10startsWithERKS_>
 8083fc4:	4607      	mov	r7, r0
 8083fc6:	4668      	mov	r0, sp
 8083fc8:	f000 fe8e 	bl	8084ce8 <_ZN6StringD1Ev>
 8083fcc:	b16f      	cbz	r7, 8083fea <_Z18tinkerDigitalWrite6String+0x86>
		digitalWrite(pinNumber, value);
		return 1;
	}
	else if(command.startsWith("A"))
	{
		pinMode(pinNumber+10, OUTPUT);
 8083fce:	b2a4      	uxth	r4, r4
 8083fd0:	2101      	movs	r1, #1
 8083fd2:	4620      	mov	r0, r4
 8083fd4:	f003 fcde 	bl	8087994 <pinMode>
		digitalWrite(pinNumber+10, value);
 8083fd8:	4620      	mov	r0, r4
 8083fda:	4629      	mov	r1, r5
 8083fdc:	f003 fceb 	bl	80879b6 <digitalWrite>
		return 1;
 8083fe0:	2001      	movs	r0, #1
	}
	else return -3;
}
 8083fe2:	b005      	add	sp, #20
 8083fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(command.substring(3,7) == "HIGH") value = 1;
 8083fe6:	2501      	movs	r5, #1
 8083fe8:	e7e4      	b.n	8083fb4 <_Z18tinkerDigitalWrite6String+0x50>
	else if(command.startsWith("A"))
 8083fea:	490f      	ldr	r1, [pc, #60]	; (8084028 <_Z18tinkerDigitalWrite6String+0xc4>)
 8083fec:	4668      	mov	r0, sp
 8083fee:	f000 fec5 	bl	8084d7c <_ZN6StringC1EPKc>
 8083ff2:	4630      	mov	r0, r6
 8083ff4:	4669      	mov	r1, sp
 8083ff6:	f000 ff8e 	bl	8084f16 <_ZNK6String10startsWithERKS_>
 8083ffa:	4606      	mov	r6, r0
 8083ffc:	4668      	mov	r0, sp
 8083ffe:	f000 fe73 	bl	8084ce8 <_ZN6StringD1Ev>
 8084002:	b13e      	cbz	r6, 8084014 <_Z18tinkerDigitalWrite6String+0xb0>
		pinMode(pinNumber+10, OUTPUT);
 8084004:	340a      	adds	r4, #10
 8084006:	e7e2      	b.n	8083fce <_Z18tinkerDigitalWrite6String+0x6a>
	if (pinNumber< 0 || pinNumber >7) return -1;
 8084008:	f04f 30ff 	mov.w	r0, #4294967295
 808400c:	e7e9      	b.n	8083fe2 <_Z18tinkerDigitalWrite6String+0x7e>
	else return -2;
 808400e:	f06f 0001 	mvn.w	r0, #1
 8084012:	e7e6      	b.n	8083fe2 <_Z18tinkerDigitalWrite6String+0x7e>
	else return -3;
 8084014:	f06f 0002 	mvn.w	r0, #2
 8084018:	e7e3      	b.n	8083fe2 <_Z18tinkerDigitalWrite6String+0x7e>
 808401a:	bf00      	nop
 808401c:	08089cbe 	.word	0x08089cbe
 8084020:	08089cc3 	.word	0x08089cc3
 8084024:	080894c4 	.word	0x080894c4
 8084028:	08089cbc 	.word	0x08089cbc

0808402c <_Z16tinkerAnalogRead6String>:
 * Output         : None.
 * Return         : Returns the analog value in INT type (0 to 4095)
                    Returns a negative number on failure
 *******************************************************************************/
int tinkerAnalogRead(String pin)
{
 808402c:	b5f0      	push	{r4, r5, r6, r7, lr}
	//convert ascii to integer
	int pinNumber = pin.charAt(1) - '0';
 808402e:	2101      	movs	r1, #1
{
 8084030:	b085      	sub	sp, #20
 8084032:	4607      	mov	r7, r0
	int pinNumber = pin.charAt(1) - '0';
 8084034:	f000 ff81 	bl	8084f3a <_ZNK6String6charAtEj>
 8084038:	f1a0 0530 	sub.w	r5, r0, #48	; 0x30
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 808403c:	2d07      	cmp	r5, #7
	int pinNumber = pin.charAt(1) - '0';
 808403e:	4604      	mov	r4, r0
	if (pinNumber< 0 || pinNumber >7) return -1;
 8084040:	d82b      	bhi.n	808409a <_Z16tinkerAnalogRead6String+0x6e>

	if(pin.startsWith("D"))
 8084042:	4919      	ldr	r1, [pc, #100]	; (80840a8 <_Z16tinkerAnalogRead6String+0x7c>)
 8084044:	4668      	mov	r0, sp
 8084046:	f000 fe99 	bl	8084d7c <_ZN6StringC1EPKc>
 808404a:	4669      	mov	r1, sp
 808404c:	4638      	mov	r0, r7
 808404e:	f000 ff62 	bl	8084f16 <_ZNK6String10startsWithERKS_>
 8084052:	4606      	mov	r6, r0
 8084054:	4668      	mov	r0, sp
 8084056:	f000 fe47 	bl	8084ce8 <_ZN6StringD1Ev>
 808405a:	b14e      	cbz	r6, 8084070 <_Z16tinkerAnalogRead6String+0x44>
	{
		pinMode(pinNumber, INPUT);
 808405c:	b2ad      	uxth	r5, r5
 808405e:	4628      	mov	r0, r5
 8084060:	2100      	movs	r1, #0
 8084062:	f003 fc97 	bl	8087994 <pinMode>
		return analogRead(pinNumber);
 8084066:	4628      	mov	r0, r5
	}
	else if (pin.startsWith("A"))
	{
		pinMode(pinNumber+10, INPUT);
		return analogRead(pinNumber+10);
 8084068:	f003 fcd1 	bl	8087a0e <analogRead>
	}
	return -2;
}
 808406c:	b005      	add	sp, #20
 808406e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if (pin.startsWith("A"))
 8084070:	490e      	ldr	r1, [pc, #56]	; (80840ac <_Z16tinkerAnalogRead6String+0x80>)
 8084072:	4668      	mov	r0, sp
 8084074:	f000 fe82 	bl	8084d7c <_ZN6StringC1EPKc>
 8084078:	4669      	mov	r1, sp
 808407a:	4638      	mov	r0, r7
 808407c:	f000 ff4b 	bl	8084f16 <_ZNK6String10startsWithERKS_>
 8084080:	4605      	mov	r5, r0
 8084082:	4668      	mov	r0, sp
 8084084:	f000 fe30 	bl	8084ce8 <_ZN6StringD1Ev>
 8084088:	b155      	cbz	r5, 80840a0 <_Z16tinkerAnalogRead6String+0x74>
		pinMode(pinNumber+10, INPUT);
 808408a:	3c26      	subs	r4, #38	; 0x26
 808408c:	b2a4      	uxth	r4, r4
 808408e:	4620      	mov	r0, r4
 8084090:	4631      	mov	r1, r6
 8084092:	f003 fc7f 	bl	8087994 <pinMode>
		return analogRead(pinNumber+10);
 8084096:	4620      	mov	r0, r4
 8084098:	e7e6      	b.n	8084068 <_Z16tinkerAnalogRead6String+0x3c>
	if (pinNumber< 0 || pinNumber >7) return -1;
 808409a:	f04f 30ff 	mov.w	r0, #4294967295
 808409e:	e7e5      	b.n	808406c <_Z16tinkerAnalogRead6String+0x40>
	return -2;
 80840a0:	f06f 0001 	mvn.w	r0, #1
 80840a4:	e7e2      	b.n	808406c <_Z16tinkerAnalogRead6String+0x40>
 80840a6:	bf00      	nop
 80840a8:	080894c4 	.word	0x080894c4
 80840ac:	08089cbc 	.word	0x08089cbc

080840b0 <_Z17tinkerAnalogWrite6String>:
 * Input          : Pin and Value (0 to 255)
 * Output         : None.
 * Return         : 1 on success and a negative number on failure
 *******************************************************************************/
int tinkerAnalogWrite(String command)
{
 80840b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	//convert ascii to integer
	int pinNumber = command.charAt(1) - '0';
 80840b2:	2101      	movs	r1, #1
{
 80840b4:	b089      	sub	sp, #36	; 0x24
 80840b6:	4605      	mov	r5, r0
	int pinNumber = command.charAt(1) - '0';
 80840b8:	f000 ff3f 	bl	8084f3a <_ZNK6String6charAtEj>
 80840bc:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 80840c0:	2e07      	cmp	r6, #7
	int pinNumber = command.charAt(1) - '0';
 80840c2:	4604      	mov	r4, r0
	if (pinNumber< 0 || pinNumber >7) return -1;
 80840c4:	d840      	bhi.n	8084148 <_Z17tinkerAnalogWrite6String+0x98>

	String value = command.substring(3);
 80840c6:	2203      	movs	r2, #3
 80840c8:	4629      	mov	r1, r5
 80840ca:	4668      	mov	r0, sp
 80840cc:	f000 ff6a 	bl	8084fa4 <_ZNK6String9substringEj>

	if(command.startsWith("D"))
 80840d0:	491f      	ldr	r1, [pc, #124]	; (8084150 <_Z17tinkerAnalogWrite6String+0xa0>)
 80840d2:	a804      	add	r0, sp, #16
 80840d4:	f000 fe52 	bl	8084d7c <_ZN6StringC1EPKc>
 80840d8:	4628      	mov	r0, r5
 80840da:	a904      	add	r1, sp, #16
 80840dc:	f000 ff1b 	bl	8084f16 <_ZNK6String10startsWithERKS_>
 80840e0:	4607      	mov	r7, r0
 80840e2:	a804      	add	r0, sp, #16
 80840e4:	f000 fe00 	bl	8084ce8 <_ZN6StringD1Ev>
 80840e8:	b197      	cbz	r7, 8084110 <_Z17tinkerAnalogWrite6String+0x60>
	{
		pinMode(pinNumber, OUTPUT);
 80840ea:	b2b6      	uxth	r6, r6
 80840ec:	2101      	movs	r1, #1
 80840ee:	4630      	mov	r0, r6
 80840f0:	f003 fc50 	bl	8087994 <pinMode>
		analogWrite(pinNumber, value.toInt());
 80840f4:	4668      	mov	r0, sp
 80840f6:	f000 ff5c 	bl	8084fb2 <_ZNK6String5toIntEv>
 80840fa:	4601      	mov	r1, r0
 80840fc:	4630      	mov	r0, r6
		return 1;
	}
	else if(command.startsWith("A"))
	{
		pinMode(pinNumber+10, OUTPUT);
		analogWrite(pinNumber+10, value.toInt());
 80840fe:	f003 fc9d 	bl	8087a3c <_Z11analogWritetm>
		return 1;
 8084102:	2401      	movs	r4, #1
	String value = command.substring(3);
 8084104:	4668      	mov	r0, sp
 8084106:	f000 fdef 	bl	8084ce8 <_ZN6StringD1Ev>
	}
	else return -2;
}
 808410a:	4620      	mov	r0, r4
 808410c:	b009      	add	sp, #36	; 0x24
 808410e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(command.startsWith("A"))
 8084110:	4910      	ldr	r1, [pc, #64]	; (8084154 <_Z17tinkerAnalogWrite6String+0xa4>)
 8084112:	a804      	add	r0, sp, #16
 8084114:	f000 fe32 	bl	8084d7c <_ZN6StringC1EPKc>
 8084118:	4628      	mov	r0, r5
 808411a:	a904      	add	r1, sp, #16
 808411c:	f000 fefb 	bl	8084f16 <_ZNK6String10startsWithERKS_>
 8084120:	4605      	mov	r5, r0
 8084122:	a804      	add	r0, sp, #16
 8084124:	f000 fde0 	bl	8084ce8 <_ZN6StringD1Ev>
 8084128:	b15d      	cbz	r5, 8084142 <_Z17tinkerAnalogWrite6String+0x92>
		pinMode(pinNumber+10, OUTPUT);
 808412a:	3c26      	subs	r4, #38	; 0x26
 808412c:	b2a4      	uxth	r4, r4
 808412e:	2101      	movs	r1, #1
 8084130:	4620      	mov	r0, r4
 8084132:	f003 fc2f 	bl	8087994 <pinMode>
		analogWrite(pinNumber+10, value.toInt());
 8084136:	4668      	mov	r0, sp
 8084138:	f000 ff3b 	bl	8084fb2 <_ZNK6String5toIntEv>
 808413c:	4601      	mov	r1, r0
 808413e:	4620      	mov	r0, r4
 8084140:	e7dd      	b.n	80840fe <_Z17tinkerAnalogWrite6String+0x4e>
	else return -2;
 8084142:	f06f 0401 	mvn.w	r4, #1
 8084146:	e7dd      	b.n	8084104 <_Z17tinkerAnalogWrite6String+0x54>
	if (pinNumber< 0 || pinNumber >7) return -1;
 8084148:	f04f 34ff 	mov.w	r4, #4294967295
 808414c:	e7dd      	b.n	808410a <_Z17tinkerAnalogWrite6String+0x5a>
 808414e:	bf00      	nop
 8084150:	080894c4 	.word	0x080894c4
 8084154:	08089cbc 	.word	0x08089cbc

08084158 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 8084158:	b508      	push	{r3, lr}
 808415a:	4b02      	ldr	r3, [pc, #8]	; (8084164 <HAL_Pin_Map+0xc>)
 808415c:	681b      	ldr	r3, [r3, #0]
 808415e:	681b      	ldr	r3, [r3, #0]
 8084160:	9301      	str	r3, [sp, #4]
 8084162:	bd08      	pop	{r3, pc}
 8084164:	080401b0 	.word	0x080401b0

08084168 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 8084168:	b508      	push	{r3, lr}
 808416a:	4b02      	ldr	r3, [pc, #8]	; (8084174 <HAL_Validate_Pin_Function+0xc>)
 808416c:	681b      	ldr	r3, [r3, #0]
 808416e:	685b      	ldr	r3, [r3, #4]
 8084170:	9301      	str	r3, [sp, #4]
 8084172:	bd08      	pop	{r3, pc}
 8084174:	080401b0 	.word	0x080401b0

08084178 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8084178:	b508      	push	{r3, lr}
 808417a:	4b02      	ldr	r3, [pc, #8]	; (8084184 <HAL_Pin_Mode+0xc>)
 808417c:	681b      	ldr	r3, [r3, #0]
 808417e:	689b      	ldr	r3, [r3, #8]
 8084180:	9301      	str	r3, [sp, #4]
 8084182:	bd08      	pop	{r3, pc}
 8084184:	080401b0 	.word	0x080401b0

08084188 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8084188:	b508      	push	{r3, lr}
 808418a:	4b02      	ldr	r3, [pc, #8]	; (8084194 <HAL_Get_Pin_Mode+0xc>)
 808418c:	681b      	ldr	r3, [r3, #0]
 808418e:	68db      	ldr	r3, [r3, #12]
 8084190:	9301      	str	r3, [sp, #4]
 8084192:	bd08      	pop	{r3, pc}
 8084194:	080401b0 	.word	0x080401b0

08084198 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8084198:	b508      	push	{r3, lr}
 808419a:	4b02      	ldr	r3, [pc, #8]	; (80841a4 <HAL_GPIO_Write+0xc>)
 808419c:	681b      	ldr	r3, [r3, #0]
 808419e:	691b      	ldr	r3, [r3, #16]
 80841a0:	9301      	str	r3, [sp, #4]
 80841a2:	bd08      	pop	{r3, pc}
 80841a4:	080401b0 	.word	0x080401b0

080841a8 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80841a8:	b508      	push	{r3, lr}
 80841aa:	4b02      	ldr	r3, [pc, #8]	; (80841b4 <HAL_GPIO_Read+0xc>)
 80841ac:	681b      	ldr	r3, [r3, #0]
 80841ae:	695b      	ldr	r3, [r3, #20]
 80841b0:	9301      	str	r3, [sp, #4]
 80841b2:	bd08      	pop	{r3, pc}
 80841b4:	080401b0 	.word	0x080401b0

080841b8 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 80841b8:	b508      	push	{r3, lr}
 80841ba:	4b02      	ldr	r3, [pc, #8]	; (80841c4 <HAL_Interrupts_Attach+0xc>)
 80841bc:	681b      	ldr	r3, [r3, #0]
 80841be:	699b      	ldr	r3, [r3, #24]
 80841c0:	9301      	str	r3, [sp, #4]
 80841c2:	bd08      	pop	{r3, pc}
 80841c4:	080401b0 	.word	0x080401b0

080841c8 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
 80841c8:	b508      	push	{r3, lr}
 80841ca:	4b02      	ldr	r3, [pc, #8]	; (80841d4 <HAL_Interrupts_Detach+0xc>)
 80841cc:	681b      	ldr	r3, [r3, #0]
 80841ce:	69db      	ldr	r3, [r3, #28]
 80841d0:	9301      	str	r3, [sp, #4]
 80841d2:	bd08      	pop	{r3, pc}
 80841d4:	080401b0 	.word	0x080401b0

080841d8 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
 80841d8:	b508      	push	{r3, lr}
 80841da:	4b02      	ldr	r3, [pc, #8]	; (80841e4 <HAL_Interrupts_Enable_All+0xc>)
 80841dc:	681b      	ldr	r3, [r3, #0]
 80841de:	6a1b      	ldr	r3, [r3, #32]
 80841e0:	9301      	str	r3, [sp, #4]
 80841e2:	bd08      	pop	{r3, pc}
 80841e4:	080401b0 	.word	0x080401b0

080841e8 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
 80841e8:	b508      	push	{r3, lr}
 80841ea:	4b02      	ldr	r3, [pc, #8]	; (80841f4 <HAL_Interrupts_Disable_All+0xc>)
 80841ec:	681b      	ldr	r3, [r3, #0]
 80841ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80841f0:	9301      	str	r3, [sp, #4]
 80841f2:	bd08      	pop	{r3, pc}
 80841f4:	080401b0 	.word	0x080401b0

080841f8 <HAL_DAC_Write>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
 80841f8:	b508      	push	{r3, lr}
 80841fa:	4b02      	ldr	r3, [pc, #8]	; (8084204 <HAL_DAC_Write+0xc>)
 80841fc:	681b      	ldr	r3, [r3, #0]
 80841fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8084200:	9301      	str	r3, [sp, #4]
 8084202:	bd08      	pop	{r3, pc}
 8084204:	080401b0 	.word	0x080401b0

08084208 <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 8084208:	b508      	push	{r3, lr}
 808420a:	4b02      	ldr	r3, [pc, #8]	; (8084214 <hal_adc_read+0xc>)
 808420c:	681b      	ldr	r3, [r3, #0]
 808420e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8084210:	9301      	str	r3, [sp, #4]
 8084212:	bd08      	pop	{r3, pc}
 8084214:	080401b0 	.word	0x080401b0

08084218 <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
 8084218:	b508      	push	{r3, lr}
 808421a:	4b02      	ldr	r3, [pc, #8]	; (8084224 <hal_pwm_write_ext+0xc>)
 808421c:	681b      	ldr	r3, [r3, #0]
 808421e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8084220:	9301      	str	r3, [sp, #4]
 8084222:	bd08      	pop	{r3, pc}
 8084224:	080401b0 	.word	0x080401b0

08084228 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8084228:	b508      	push	{r3, lr}
 808422a:	4b02      	ldr	r3, [pc, #8]	; (8084234 <HAL_RNG_GetRandomNumber+0xc>)
 808422c:	681b      	ldr	r3, [r3, #0]
 808422e:	685b      	ldr	r3, [r3, #4]
 8084230:	9301      	str	r3, [sp, #4]
 8084232:	bd08      	pop	{r3, pc}
 8084234:	0804019c 	.word	0x0804019c

08084238 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
 8084238:	b508      	push	{r3, lr}
 808423a:	4b02      	ldr	r3, [pc, #8]	; (8084244 <HAL_Delay_Milliseconds+0xc>)
 808423c:	681b      	ldr	r3, [r3, #0]
 808423e:	689b      	ldr	r3, [r3, #8]
 8084240:	9301      	str	r3, [sp, #4]
 8084242:	bd08      	pop	{r3, pc}
 8084244:	0804019c 	.word	0x0804019c

08084248 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 8084248:	b508      	push	{r3, lr}
 808424a:	4b02      	ldr	r3, [pc, #8]	; (8084254 <HAL_Delay_Microseconds+0xc>)
 808424c:	681b      	ldr	r3, [r3, #0]
 808424e:	68db      	ldr	r3, [r3, #12]
 8084250:	9301      	str	r3, [sp, #4]
 8084252:	bd08      	pop	{r3, pc}
 8084254:	0804019c 	.word	0x0804019c

08084258 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8084258:	b508      	push	{r3, lr}
 808425a:	4b02      	ldr	r3, [pc, #8]	; (8084264 <HAL_Timer_Get_Milli_Seconds+0xc>)
 808425c:	681b      	ldr	r3, [r3, #0]
 808425e:	695b      	ldr	r3, [r3, #20]
 8084260:	9301      	str	r3, [sp, #4]
 8084262:	bd08      	pop	{r3, pc}
 8084264:	0804019c 	.word	0x0804019c

08084268 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 8084268:	b508      	push	{r3, lr}
 808426a:	4b02      	ldr	r3, [pc, #8]	; (8084274 <hal_rtc_time_is_valid+0xc>)
 808426c:	681b      	ldr	r3, [r3, #0]
 808426e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8084270:	9301      	str	r3, [sp, #4]
 8084272:	bd08      	pop	{r3, pc}
 8084274:	0804019c 	.word	0x0804019c

08084278 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 8084278:	b508      	push	{r3, lr}
 808427a:	4b02      	ldr	r3, [pc, #8]	; (8084284 <hal_rtc_get_time+0xc>)
 808427c:	681b      	ldr	r3, [r3, #0]
 808427e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8084280:	9301      	str	r3, [sp, #4]
 8084282:	bd08      	pop	{r3, pc}
 8084284:	0804019c 	.word	0x0804019c

08084288 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 8084288:	b508      	push	{r3, lr}
 808428a:	4b02      	ldr	r3, [pc, #8]	; (8084294 <HAL_Core_Get_Last_Reset_Info+0xc>)
 808428c:	681b      	ldr	r3, [r3, #0]
 808428e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8084290:	9301      	str	r3, [sp, #4]
 8084292:	bd08      	pop	{r3, pc}
 8084294:	080401b8 	.word	0x080401b8

08084298 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
 8084298:	b508      	push	{r3, lr}
 808429a:	4b02      	ldr	r3, [pc, #8]	; (80842a4 <os_thread_create+0xc>)
 808429c:	681b      	ldr	r3, [r3, #0]
 808429e:	685b      	ldr	r3, [r3, #4]
 80842a0:	9301      	str	r3, [sp, #4]
 80842a2:	bd08      	pop	{r3, pc}
 80842a4:	080401d0 	.word	0x080401d0

080842a8 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
 80842a8:	b508      	push	{r3, lr}
 80842aa:	4b02      	ldr	r3, [pc, #8]	; (80842b4 <os_thread_is_current+0xc>)
 80842ac:	681b      	ldr	r3, [r3, #0]
 80842ae:	689b      	ldr	r3, [r3, #8]
 80842b0:	9301      	str	r3, [sp, #4]
 80842b2:	bd08      	pop	{r3, pc}
 80842b4:	080401d0 	.word	0x080401d0

080842b8 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
 80842b8:	b508      	push	{r3, lr}
 80842ba:	4b02      	ldr	r3, [pc, #8]	; (80842c4 <os_thread_yield+0xc>)
 80842bc:	681b      	ldr	r3, [r3, #0]
 80842be:	68db      	ldr	r3, [r3, #12]
 80842c0:	9301      	str	r3, [sp, #4]
 80842c2:	bd08      	pop	{r3, pc}
 80842c4:	080401d0 	.word	0x080401d0

080842c8 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
 80842c8:	b508      	push	{r3, lr}
 80842ca:	4b02      	ldr	r3, [pc, #8]	; (80842d4 <os_thread_join+0xc>)
 80842cc:	681b      	ldr	r3, [r3, #0]
 80842ce:	691b      	ldr	r3, [r3, #16]
 80842d0:	9301      	str	r3, [sp, #4]
 80842d2:	bd08      	pop	{r3, pc}
 80842d4:	080401d0 	.word	0x080401d0

080842d8 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
 80842d8:	b508      	push	{r3, lr}
 80842da:	4b02      	ldr	r3, [pc, #8]	; (80842e4 <os_thread_cleanup+0xc>)
 80842dc:	681b      	ldr	r3, [r3, #0]
 80842de:	695b      	ldr	r3, [r3, #20]
 80842e0:	9301      	str	r3, [sp, #4]
 80842e2:	bd08      	pop	{r3, pc}
 80842e4:	080401d0 	.word	0x080401d0

080842e8 <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
 80842e8:	b508      	push	{r3, lr}
 80842ea:	4b02      	ldr	r3, [pc, #8]	; (80842f4 <os_thread_scheduling+0xc>)
 80842ec:	681b      	ldr	r3, [r3, #0]
 80842ee:	69db      	ldr	r3, [r3, #28]
 80842f0:	9301      	str	r3, [sp, #4]
 80842f2:	bd08      	pop	{r3, pc}
 80842f4:	080401d0 	.word	0x080401d0

080842f8 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
 80842f8:	b508      	push	{r3, lr}
 80842fa:	4b02      	ldr	r3, [pc, #8]	; (8084304 <os_timer_create+0xc>)
 80842fc:	681b      	ldr	r3, [r3, #0]
 80842fe:	6a1b      	ldr	r3, [r3, #32]
 8084300:	9301      	str	r3, [sp, #4]
 8084302:	bd08      	pop	{r3, pc}
 8084304:	080401d0 	.word	0x080401d0

08084308 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
 8084308:	b508      	push	{r3, lr}
 808430a:	4b02      	ldr	r3, [pc, #8]	; (8084314 <os_timer_destroy+0xc>)
 808430c:	681b      	ldr	r3, [r3, #0]
 808430e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8084310:	9301      	str	r3, [sp, #4]
 8084312:	bd08      	pop	{r3, pc}
 8084314:	080401d0 	.word	0x080401d0

08084318 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
 8084318:	b508      	push	{r3, lr}
 808431a:	4b02      	ldr	r3, [pc, #8]	; (8084324 <os_timer_get_id+0xc>)
 808431c:	681b      	ldr	r3, [r3, #0]
 808431e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8084320:	9301      	str	r3, [sp, #4]
 8084322:	bd08      	pop	{r3, pc}
 8084324:	080401d0 	.word	0x080401d0

08084328 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
 8084328:	b508      	push	{r3, lr}
 808432a:	4b02      	ldr	r3, [pc, #8]	; (8084334 <os_timer_change+0xc>)
 808432c:	681b      	ldr	r3, [r3, #0]
 808432e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8084330:	9301      	str	r3, [sp, #4]
 8084332:	bd08      	pop	{r3, pc}
 8084334:	080401d0 	.word	0x080401d0

08084338 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 8084338:	b508      	push	{r3, lr}
 808433a:	4b02      	ldr	r3, [pc, #8]	; (8084344 <os_mutex_recursive_create+0xc>)
 808433c:	681b      	ldr	r3, [r3, #0]
 808433e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8084340:	9301      	str	r3, [sp, #4]
 8084342:	bd08      	pop	{r3, pc}
 8084344:	080401d0 	.word	0x080401d0

08084348 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 8084348:	b508      	push	{r3, lr}
 808434a:	4b02      	ldr	r3, [pc, #8]	; (8084354 <os_mutex_recursive_destroy+0xc>)
 808434c:	681b      	ldr	r3, [r3, #0]
 808434e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8084350:	9301      	str	r3, [sp, #4]
 8084352:	bd08      	pop	{r3, pc}
 8084354:	080401d0 	.word	0x080401d0

08084358 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 8084358:	b508      	push	{r3, lr}
 808435a:	4b02      	ldr	r3, [pc, #8]	; (8084364 <os_mutex_recursive_lock+0xc>)
 808435c:	681b      	ldr	r3, [r3, #0]
 808435e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8084360:	9301      	str	r3, [sp, #4]
 8084362:	bd08      	pop	{r3, pc}
 8084364:	080401d0 	.word	0x080401d0

08084368 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 8084368:	b508      	push	{r3, lr}
 808436a:	4b02      	ldr	r3, [pc, #8]	; (8084374 <os_mutex_recursive_unlock+0xc>)
 808436c:	681b      	ldr	r3, [r3, #0]
 808436e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8084370:	9301      	str	r3, [sp, #4]
 8084372:	bd08      	pop	{r3, pc}
 8084374:	080401d0 	.word	0x080401d0

08084378 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
 8084378:	b508      	push	{r3, lr}
 808437a:	4b02      	ldr	r3, [pc, #8]	; (8084384 <os_thread_exit+0xc>)
 808437c:	681b      	ldr	r3, [r3, #0]
 808437e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8084380:	9301      	str	r3, [sp, #4]
 8084382:	bd08      	pop	{r3, pc}
 8084384:	080401d0 	.word	0x080401d0

08084388 <os_timer_set_id>:

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
 8084388:	b508      	push	{r3, lr}
 808438a:	4b02      	ldr	r3, [pc, #8]	; (8084394 <os_timer_set_id+0xc>)
 808438c:	681b      	ldr	r3, [r3, #0]
 808438e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8084390:	9301      	str	r3, [sp, #4]
 8084392:	bd08      	pop	{r3, pc}
 8084394:	080401d0 	.word	0x080401d0

08084398 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 8084398:	b508      	push	{r3, lr}
 808439a:	4b02      	ldr	r3, [pc, #8]	; (80843a4 <hal_usart_init+0xc>)
 808439c:	681b      	ldr	r3, [r3, #0]
 808439e:	699b      	ldr	r3, [r3, #24]
 80843a0:	9301      	str	r3, [sp, #4]
 80843a2:	bd08      	pop	{r3, pc}
 80843a4:	080401c4 	.word	0x080401c4

080843a8 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 80843a8:	b508      	push	{r3, lr}
 80843aa:	4b02      	ldr	r3, [pc, #8]	; (80843b4 <hal_usart_end+0xc>)
 80843ac:	681b      	ldr	r3, [r3, #0]
 80843ae:	6a1b      	ldr	r3, [r3, #32]
 80843b0:	9301      	str	r3, [sp, #4]
 80843b2:	bd08      	pop	{r3, pc}
 80843b4:	080401c4 	.word	0x080401c4

080843b8 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80843b8:	b508      	push	{r3, lr}
 80843ba:	4b02      	ldr	r3, [pc, #8]	; (80843c4 <hal_usart_write+0xc>)
 80843bc:	681b      	ldr	r3, [r3, #0]
 80843be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80843c0:	9301      	str	r3, [sp, #4]
 80843c2:	bd08      	pop	{r3, pc}
 80843c4:	080401c4 	.word	0x080401c4

080843c8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80843c8:	b508      	push	{r3, lr}
 80843ca:	4b02      	ldr	r3, [pc, #8]	; (80843d4 <hal_usart_available+0xc>)
 80843cc:	681b      	ldr	r3, [r3, #0]
 80843ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80843d0:	9301      	str	r3, [sp, #4]
 80843d2:	bd08      	pop	{r3, pc}
 80843d4:	080401c4 	.word	0x080401c4

080843d8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80843d8:	b508      	push	{r3, lr}
 80843da:	4b02      	ldr	r3, [pc, #8]	; (80843e4 <hal_usart_read+0xc>)
 80843dc:	681b      	ldr	r3, [r3, #0]
 80843de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80843e0:	9301      	str	r3, [sp, #4]
 80843e2:	bd08      	pop	{r3, pc}
 80843e4:	080401c4 	.word	0x080401c4

080843e8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80843e8:	b508      	push	{r3, lr}
 80843ea:	4b02      	ldr	r3, [pc, #8]	; (80843f4 <hal_usart_peek+0xc>)
 80843ec:	681b      	ldr	r3, [r3, #0]
 80843ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80843f0:	9301      	str	r3, [sp, #4]
 80843f2:	bd08      	pop	{r3, pc}
 80843f4:	080401c4 	.word	0x080401c4

080843f8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80843f8:	b508      	push	{r3, lr}
 80843fa:	4b02      	ldr	r3, [pc, #8]	; (8084404 <hal_usart_flush+0xc>)
 80843fc:	681b      	ldr	r3, [r3, #0]
 80843fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8084400:	9301      	str	r3, [sp, #4]
 8084402:	bd08      	pop	{r3, pc}
 8084404:	080401c4 	.word	0x080401c4

08084408 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 8084408:	b508      	push	{r3, lr}
 808440a:	4b02      	ldr	r3, [pc, #8]	; (8084414 <hal_usart_is_enabled+0xc>)
 808440c:	681b      	ldr	r3, [r3, #0]
 808440e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8084410:	9301      	str	r3, [sp, #4]
 8084412:	bd08      	pop	{r3, pc}
 8084414:	080401c4 	.word	0x080401c4

08084418 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 8084418:	b508      	push	{r3, lr}
 808441a:	4b02      	ldr	r3, [pc, #8]	; (8084424 <hal_usart_available_data_for_write+0xc>)
 808441c:	681b      	ldr	r3, [r3, #0]
 808441e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8084420:	9301      	str	r3, [sp, #4]
 8084422:	bd08      	pop	{r3, pc}
 8084424:	080401c4 	.word	0x080401c4

08084428 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 8084428:	b508      	push	{r3, lr}
 808442a:	4b02      	ldr	r3, [pc, #8]	; (8084434 <hal_usart_begin_config+0xc>)
 808442c:	681b      	ldr	r3, [r3, #0]
 808442e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8084430:	9301      	str	r3, [sp, #4]
 8084432:	bd08      	pop	{r3, pc}
 8084434:	080401c4 	.word	0x080401c4

08084438 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 8084438:	b508      	push	{r3, lr}
 808443a:	4b02      	ldr	r3, [pc, #8]	; (8084444 <hal_i2c_begin+0xc>)
 808443c:	681b      	ldr	r3, [r3, #0]
 808443e:	68db      	ldr	r3, [r3, #12]
 8084440:	9301      	str	r3, [sp, #4]
 8084442:	bd08      	pop	{r3, pc}
 8084444:	080401ac 	.word	0x080401ac

08084448 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 8084448:	b508      	push	{r3, lr}
 808444a:	4b02      	ldr	r3, [pc, #8]	; (8084454 <hal_i2c_begin_transmission+0xc>)
 808444c:	681b      	ldr	r3, [r3, #0]
 808444e:	699b      	ldr	r3, [r3, #24]
 8084450:	9301      	str	r3, [sp, #4]
 8084452:	bd08      	pop	{r3, pc}
 8084454:	080401ac 	.word	0x080401ac

08084458 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 8084458:	b508      	push	{r3, lr}
 808445a:	4b02      	ldr	r3, [pc, #8]	; (8084464 <hal_i2c_end_transmission+0xc>)
 808445c:	681b      	ldr	r3, [r3, #0]
 808445e:	69db      	ldr	r3, [r3, #28]
 8084460:	9301      	str	r3, [sp, #4]
 8084462:	bd08      	pop	{r3, pc}
 8084464:	080401ac 	.word	0x080401ac

08084468 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 8084468:	b508      	push	{r3, lr}
 808446a:	4b02      	ldr	r3, [pc, #8]	; (8084474 <hal_i2c_write+0xc>)
 808446c:	681b      	ldr	r3, [r3, #0]
 808446e:	6a1b      	ldr	r3, [r3, #32]
 8084470:	9301      	str	r3, [sp, #4]
 8084472:	bd08      	pop	{r3, pc}
 8084474:	080401ac 	.word	0x080401ac

08084478 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 8084478:	b508      	push	{r3, lr}
 808447a:	4b02      	ldr	r3, [pc, #8]	; (8084484 <hal_i2c_available+0xc>)
 808447c:	681b      	ldr	r3, [r3, #0]
 808447e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8084480:	9301      	str	r3, [sp, #4]
 8084482:	bd08      	pop	{r3, pc}
 8084484:	080401ac 	.word	0x080401ac

08084488 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 8084488:	b508      	push	{r3, lr}
 808448a:	4b02      	ldr	r3, [pc, #8]	; (8084494 <hal_i2c_read+0xc>)
 808448c:	681b      	ldr	r3, [r3, #0]
 808448e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8084490:	9301      	str	r3, [sp, #4]
 8084492:	bd08      	pop	{r3, pc}
 8084494:	080401ac 	.word	0x080401ac

08084498 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 8084498:	b508      	push	{r3, lr}
 808449a:	4b02      	ldr	r3, [pc, #8]	; (80844a4 <hal_i2c_peek+0xc>)
 808449c:	681b      	ldr	r3, [r3, #0]
 808449e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80844a0:	9301      	str	r3, [sp, #4]
 80844a2:	bd08      	pop	{r3, pc}
 80844a4:	080401ac 	.word	0x080401ac

080844a8 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80844a8:	b508      	push	{r3, lr}
 80844aa:	4b02      	ldr	r3, [pc, #8]	; (80844b4 <hal_i2c_flush+0xc>)
 80844ac:	681b      	ldr	r3, [r3, #0]
 80844ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80844b0:	9301      	str	r3, [sp, #4]
 80844b2:	bd08      	pop	{r3, pc}
 80844b4:	080401ac 	.word	0x080401ac

080844b8 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80844b8:	b508      	push	{r3, lr}
 80844ba:	4b02      	ldr	r3, [pc, #8]	; (80844c4 <hal_i2c_is_enabled+0xc>)
 80844bc:	681b      	ldr	r3, [r3, #0]
 80844be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80844c0:	9301      	str	r3, [sp, #4]
 80844c2:	bd08      	pop	{r3, pc}
 80844c4:	080401ac 	.word	0x080401ac

080844c8 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80844c8:	b508      	push	{r3, lr}
 80844ca:	4b02      	ldr	r3, [pc, #8]	; (80844d4 <hal_i2c_init+0xc>)
 80844cc:	681b      	ldr	r3, [r3, #0]
 80844ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80844d0:	9301      	str	r3, [sp, #4]
 80844d2:	bd08      	pop	{r3, pc}
 80844d4:	080401ac 	.word	0x080401ac

080844d8 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
 80844d8:	b508      	push	{r3, lr}
 80844da:	4b02      	ldr	r3, [pc, #8]	; (80844e4 <hal_i2c_lock+0xc>)
 80844dc:	681b      	ldr	r3, [r3, #0]
 80844de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80844e0:	9301      	str	r3, [sp, #4]
 80844e2:	bd08      	pop	{r3, pc}
 80844e4:	080401ac 	.word	0x080401ac

080844e8 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
 80844e8:	b508      	push	{r3, lr}
 80844ea:	4b02      	ldr	r3, [pc, #8]	; (80844f4 <hal_i2c_unlock+0xc>)
 80844ec:	681b      	ldr	r3, [r3, #0]
 80844ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80844f0:	9301      	str	r3, [sp, #4]
 80844f2:	bd08      	pop	{r3, pc}
 80844f4:	080401ac 	.word	0x080401ac

080844f8 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 80844f8:	b508      	push	{r3, lr}
 80844fa:	4b02      	ldr	r3, [pc, #8]	; (8084504 <hal_i2c_request_ex+0xc>)
 80844fc:	681b      	ldr	r3, [r3, #0]
 80844fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8084500:	9301      	str	r3, [sp, #4]
 8084502:	bd08      	pop	{r3, pc}
 8084504:	080401ac 	.word	0x080401ac

08084508 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 8084508:	b508      	push	{r3, lr}
 808450a:	4b02      	ldr	r3, [pc, #8]	; (8084514 <hal_spi_begin+0xc>)
 808450c:	681b      	ldr	r3, [r3, #0]
 808450e:	681b      	ldr	r3, [r3, #0]
 8084510:	9301      	str	r3, [sp, #4]
 8084512:	bd08      	pop	{r3, pc}
 8084514:	080401b4 	.word	0x080401b4

08084518 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
 8084518:	b508      	push	{r3, lr}
 808451a:	4b02      	ldr	r3, [pc, #8]	; (8084524 <hal_spi_set_bit_order+0xc>)
 808451c:	681b      	ldr	r3, [r3, #0]
 808451e:	689b      	ldr	r3, [r3, #8]
 8084520:	9301      	str	r3, [sp, #4]
 8084522:	bd08      	pop	{r3, pc}
 8084524:	080401b4 	.word	0x080401b4

08084528 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
 8084528:	b508      	push	{r3, lr}
 808452a:	4b02      	ldr	r3, [pc, #8]	; (8084534 <hal_spi_set_data_mode+0xc>)
 808452c:	681b      	ldr	r3, [r3, #0]
 808452e:	68db      	ldr	r3, [r3, #12]
 8084530:	9301      	str	r3, [sp, #4]
 8084532:	bd08      	pop	{r3, pc}
 8084534:	080401b4 	.word	0x080401b4

08084538 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
 8084538:	b508      	push	{r3, lr}
 808453a:	4b02      	ldr	r3, [pc, #8]	; (8084544 <hal_spi_set_clock_divider+0xc>)
 808453c:	681b      	ldr	r3, [r3, #0]
 808453e:	691b      	ldr	r3, [r3, #16]
 8084540:	9301      	str	r3, [sp, #4]
 8084542:	bd08      	pop	{r3, pc}
 8084544:	080401b4 	.word	0x080401b4

08084548 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 8084548:	b508      	push	{r3, lr}
 808454a:	4b02      	ldr	r3, [pc, #8]	; (8084554 <hal_spi_transfer+0xc>)
 808454c:	681b      	ldr	r3, [r3, #0]
 808454e:	695b      	ldr	r3, [r3, #20]
 8084550:	9301      	str	r3, [sp, #4]
 8084552:	bd08      	pop	{r3, pc}
 8084554:	080401b4 	.word	0x080401b4

08084558 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 8084558:	b508      	push	{r3, lr}
 808455a:	4b02      	ldr	r3, [pc, #8]	; (8084564 <hal_spi_init+0xc>)
 808455c:	681b      	ldr	r3, [r3, #0]
 808455e:	69db      	ldr	r3, [r3, #28]
 8084560:	9301      	str	r3, [sp, #4]
 8084562:	bd08      	pop	{r3, pc}
 8084564:	080401b4 	.word	0x080401b4

08084568 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 8084568:	b508      	push	{r3, lr}
 808456a:	4b02      	ldr	r3, [pc, #8]	; (8084574 <hal_spi_is_enabled+0xc>)
 808456c:	681b      	ldr	r3, [r3, #0]
 808456e:	6a1b      	ldr	r3, [r3, #32]
 8084570:	9301      	str	r3, [sp, #4]
 8084572:	bd08      	pop	{r3, pc}
 8084574:	080401b4 	.word	0x080401b4

08084578 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 8084578:	b508      	push	{r3, lr}
 808457a:	4b02      	ldr	r3, [pc, #8]	; (8084584 <hal_spi_info+0xc>)
 808457c:	681b      	ldr	r3, [r3, #0]
 808457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8084580:	9301      	str	r3, [sp, #4]
 8084582:	bd08      	pop	{r3, pc}
 8084584:	080401b4 	.word	0x080401b4

08084588 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 8084588:	b508      	push	{r3, lr}
 808458a:	4b02      	ldr	r3, [pc, #8]	; (8084594 <inet_gethostbyname+0xc>)
 808458c:	681b      	ldr	r3, [r3, #0]
 808458e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8084590:	9301      	str	r3, [sp, #4]
 8084592:	bd08      	pop	{r3, pc}
 8084594:	08060020 	.word	0x08060020

08084598 <cellular_command>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
 8084598:	b508      	push	{r3, lr}
 808459a:	4b02      	ldr	r3, [pc, #8]	; (80845a4 <cellular_command+0xc>)
 808459c:	681b      	ldr	r3, [r3, #0]
 808459e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80845a0:	9301      	str	r3, [sp, #4]
 80845a2:	bd08      	pop	{r3, pc}
 80845a4:	08060020 	.word	0x08060020

080845a8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80845a8:	b508      	push	{r3, lr}
 80845aa:	4b02      	ldr	r3, [pc, #8]	; (80845b4 <HAL_USB_USART_Init+0xc>)
 80845ac:	681b      	ldr	r3, [r3, #0]
 80845ae:	681b      	ldr	r3, [r3, #0]
 80845b0:	9301      	str	r3, [sp, #4]
 80845b2:	bd08      	pop	{r3, pc}
 80845b4:	0806001c 	.word	0x0806001c

080845b8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80845b8:	b508      	push	{r3, lr}
 80845ba:	4b02      	ldr	r3, [pc, #8]	; (80845c4 <HAL_USB_USART_Begin+0xc>)
 80845bc:	681b      	ldr	r3, [r3, #0]
 80845be:	685b      	ldr	r3, [r3, #4]
 80845c0:	9301      	str	r3, [sp, #4]
 80845c2:	bd08      	pop	{r3, pc}
 80845c4:	0806001c 	.word	0x0806001c

080845c8 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 80845c8:	b508      	push	{r3, lr}
 80845ca:	4b02      	ldr	r3, [pc, #8]	; (80845d4 <HAL_USB_USART_End+0xc>)
 80845cc:	681b      	ldr	r3, [r3, #0]
 80845ce:	689b      	ldr	r3, [r3, #8]
 80845d0:	9301      	str	r3, [sp, #4]
 80845d2:	bd08      	pop	{r3, pc}
 80845d4:	0806001c 	.word	0x0806001c

080845d8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80845d8:	b508      	push	{r3, lr}
 80845da:	4b02      	ldr	r3, [pc, #8]	; (80845e4 <HAL_USB_USART_Available_Data+0xc>)
 80845dc:	681b      	ldr	r3, [r3, #0]
 80845de:	691b      	ldr	r3, [r3, #16]
 80845e0:	9301      	str	r3, [sp, #4]
 80845e2:	bd08      	pop	{r3, pc}
 80845e4:	0806001c 	.word	0x0806001c

080845e8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80845e8:	b508      	push	{r3, lr}
 80845ea:	4b02      	ldr	r3, [pc, #8]	; (80845f4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80845ec:	681b      	ldr	r3, [r3, #0]
 80845ee:	695b      	ldr	r3, [r3, #20]
 80845f0:	9301      	str	r3, [sp, #4]
 80845f2:	bd08      	pop	{r3, pc}
 80845f4:	0806001c 	.word	0x0806001c

080845f8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80845f8:	b508      	push	{r3, lr}
 80845fa:	4b02      	ldr	r3, [pc, #8]	; (8084604 <HAL_USB_USART_Receive_Data+0xc>)
 80845fc:	681b      	ldr	r3, [r3, #0]
 80845fe:	699b      	ldr	r3, [r3, #24]
 8084600:	9301      	str	r3, [sp, #4]
 8084602:	bd08      	pop	{r3, pc}
 8084604:	0806001c 	.word	0x0806001c

08084608 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8084608:	b508      	push	{r3, lr}
 808460a:	4b02      	ldr	r3, [pc, #8]	; (8084614 <HAL_USB_USART_Send_Data+0xc>)
 808460c:	681b      	ldr	r3, [r3, #0]
 808460e:	69db      	ldr	r3, [r3, #28]
 8084610:	9301      	str	r3, [sp, #4]
 8084612:	bd08      	pop	{r3, pc}
 8084614:	0806001c 	.word	0x0806001c

08084618 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8084618:	b508      	push	{r3, lr}
 808461a:	4b02      	ldr	r3, [pc, #8]	; (8084624 <HAL_USB_USART_Flush_Data+0xc>)
 808461c:	681b      	ldr	r3, [r3, #0]
 808461e:	6a1b      	ldr	r3, [r3, #32]
 8084620:	9301      	str	r3, [sp, #4]
 8084622:	bd08      	pop	{r3, pc}
 8084624:	0806001c 	.word	0x0806001c

08084628 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 8084628:	b508      	push	{r3, lr}
 808462a:	4b02      	ldr	r3, [pc, #8]	; (8084634 <panic_+0xc>)
 808462c:	681b      	ldr	r3, [r3, #0]
 808462e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8084630:	9301      	str	r3, [sp, #4]
 8084632:	bd08      	pop	{r3, pc}
 8084634:	080201a0 	.word	0x080201a0

08084638 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 8084638:	b508      	push	{r3, lr}
 808463a:	4b02      	ldr	r3, [pc, #8]	; (8084644 <log_message_v+0xc>)
 808463c:	681b      	ldr	r3, [r3, #0]
 808463e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8084640:	9301      	str	r3, [sp, #4]
 8084642:	bd08      	pop	{r3, pc}
 8084644:	080201a0 	.word	0x080201a0

08084648 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 8084648:	b508      	push	{r3, lr}
 808464a:	4b02      	ldr	r3, [pc, #8]	; (8084654 <log_level_name+0xc>)
 808464c:	681b      	ldr	r3, [r3, #0]
 808464e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8084650:	9301      	str	r3, [sp, #4]
 8084652:	bd08      	pop	{r3, pc}
 8084654:	080201a0 	.word	0x080201a0

08084658 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 8084658:	b508      	push	{r3, lr}
 808465a:	4b02      	ldr	r3, [pc, #8]	; (8084664 <log_set_callbacks+0xc>)
 808465c:	681b      	ldr	r3, [r3, #0]
 808465e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8084660:	9301      	str	r3, [sp, #4]
 8084662:	bd08      	pop	{r3, pc}
 8084664:	080201a0 	.word	0x080201a0

08084668 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 8084668:	b508      	push	{r3, lr}
 808466a:	4b02      	ldr	r3, [pc, #8]	; (8084674 <system_mode+0xc>)
 808466c:	681b      	ldr	r3, [r3, #0]
 808466e:	681b      	ldr	r3, [r3, #0]
 8084670:	9301      	str	r3, [sp, #4]
 8084672:	bd08      	pop	{r3, pc}
 8084674:	080401a4 	.word	0x080401a4

08084678 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8084678:	b508      	push	{r3, lr}
 808467a:	4b02      	ldr	r3, [pc, #8]	; (8084684 <set_system_mode+0xc>)
 808467c:	681b      	ldr	r3, [r3, #0]
 808467e:	685b      	ldr	r3, [r3, #4]
 8084680:	9301      	str	r3, [sp, #4]
 8084682:	bd08      	pop	{r3, pc}
 8084684:	080401a4 	.word	0x080401a4

08084688 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 8084688:	b508      	push	{r3, lr}
 808468a:	4b02      	ldr	r3, [pc, #8]	; (8084694 <system_delay_ms+0xc>)
 808468c:	681b      	ldr	r3, [r3, #0]
 808468e:	695b      	ldr	r3, [r3, #20]
 8084690:	9301      	str	r3, [sp, #4]
 8084692:	bd08      	pop	{r3, pc}
 8084694:	080401a4 	.word	0x080401a4

08084698 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
 8084698:	b508      	push	{r3, lr}
 808469a:	4b02      	ldr	r3, [pc, #8]	; (80846a4 <system_sleep+0xc>)
 808469c:	681b      	ldr	r3, [r3, #0]
 808469e:	699b      	ldr	r3, [r3, #24]
 80846a0:	9301      	str	r3, [sp, #4]
 80846a2:	bd08      	pop	{r3, pc}
 80846a4:	080401a4 	.word	0x080401a4

080846a8 <system_subscribe_event>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
 80846a8:	b508      	push	{r3, lr}
 80846aa:	4b02      	ldr	r3, [pc, #8]	; (80846b4 <system_subscribe_event+0xc>)
 80846ac:	681b      	ldr	r3, [r3, #0]
 80846ae:	6a1b      	ldr	r3, [r3, #32]
 80846b0:	9301      	str	r3, [sp, #4]
 80846b2:	bd08      	pop	{r3, pc}
 80846b4:	080401a4 	.word	0x080401a4

080846b8 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80846b8:	b508      	push	{r3, lr}
 80846ba:	4b02      	ldr	r3, [pc, #8]	; (80846c4 <system_thread_set_state+0xc>)
 80846bc:	681b      	ldr	r3, [r3, #0]
 80846be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80846c0:	9301      	str	r3, [sp, #4]
 80846c2:	bd08      	pop	{r3, pc}
 80846c4:	080401a4 	.word	0x080401a4

080846c8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80846c8:	b508      	push	{r3, lr}
 80846ca:	4b02      	ldr	r3, [pc, #8]	; (80846d4 <application_thread_current+0xc>)
 80846cc:	681b      	ldr	r3, [r3, #0]
 80846ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80846d0:	9301      	str	r3, [sp, #4]
 80846d2:	bd08      	pop	{r3, pc}
 80846d4:	080401a4 	.word	0x080401a4

080846d8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80846d8:	b508      	push	{r3, lr}
 80846da:	4b02      	ldr	r3, [pc, #8]	; (80846e4 <application_thread_invoke+0xc>)
 80846dc:	681b      	ldr	r3, [r3, #0]
 80846de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80846e0:	9301      	str	r3, [sp, #4]
 80846e2:	bd08      	pop	{r3, pc}
 80846e4:	080401a4 	.word	0x080401a4

080846e8 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80846e8:	b508      	push	{r3, lr}
 80846ea:	4b02      	ldr	r3, [pc, #8]	; (80846f4 <system_thread_get_state+0xc>)
 80846ec:	681b      	ldr	r3, [r3, #0]
 80846ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80846f0:	9301      	str	r3, [sp, #4]
 80846f2:	bd08      	pop	{r3, pc}
 80846f4:	080401a4 	.word	0x080401a4

080846f8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80846f8:	b508      	push	{r3, lr}
 80846fa:	4b03      	ldr	r3, [pc, #12]	; (8084708 <system_ctrl_set_app_request_handler+0x10>)
 80846fc:	681b      	ldr	r3, [r3, #0]
 80846fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8084702:	9301      	str	r3, [sp, #4]
 8084704:	bd08      	pop	{r3, pc}
 8084706:	0000      	.short	0x0000
 8084708:	080401a4 	.word	0x080401a4

0808470c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 808470c:	b508      	push	{r3, lr}
 808470e:	4b03      	ldr	r3, [pc, #12]	; (808471c <system_ctrl_set_result+0x10>)
 8084710:	681b      	ldr	r3, [r3, #0]
 8084712:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8084716:	9301      	str	r3, [sp, #4]
 8084718:	bd08      	pop	{r3, pc}
 808471a:	0000      	.short	0x0000
 808471c:	080401a4 	.word	0x080401a4

08084720 <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
 8084720:	b508      	push	{r3, lr}
 8084722:	4b03      	ldr	r3, [pc, #12]	; (8084730 <system_sleep_pins+0x10>)
 8084724:	681b      	ldr	r3, [r3, #0]
 8084726:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 808472a:	9301      	str	r3, [sp, #4]
 808472c:	bd08      	pop	{r3, pc}
 808472e:	0000      	.short	0x0000
 8084730:	080401a4 	.word	0x080401a4

08084734 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
 8084734:	b508      	push	{r3, lr}
 8084736:	4b03      	ldr	r3, [pc, #12]	; (8084744 <system_reset+0x10>)
 8084738:	681b      	ldr	r3, [r3, #0]
 808473a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 808473e:	9301      	str	r3, [sp, #4]
 8084740:	bd08      	pop	{r3, pc}
 8084742:	0000      	.short	0x0000
 8084744:	080401a4 	.word	0x080401a4

08084748 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 8084748:	b508      	push	{r3, lr}
 808474a:	4b02      	ldr	r3, [pc, #8]	; (8084754 <network_connect+0xc>)
 808474c:	681b      	ldr	r3, [r3, #0]
 808474e:	685b      	ldr	r3, [r3, #4]
 8084750:	9301      	str	r3, [sp, #4]
 8084752:	bd08      	pop	{r3, pc}
 8084754:	080401c8 	.word	0x080401c8

08084758 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 8084758:	b508      	push	{r3, lr}
 808475a:	4b02      	ldr	r3, [pc, #8]	; (8084764 <network_connecting+0xc>)
 808475c:	681b      	ldr	r3, [r3, #0]
 808475e:	689b      	ldr	r3, [r3, #8]
 8084760:	9301      	str	r3, [sp, #4]
 8084762:	bd08      	pop	{r3, pc}
 8084764:	080401c8 	.word	0x080401c8

08084768 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 8084768:	b508      	push	{r3, lr}
 808476a:	4b02      	ldr	r3, [pc, #8]	; (8084774 <network_disconnect+0xc>)
 808476c:	681b      	ldr	r3, [r3, #0]
 808476e:	68db      	ldr	r3, [r3, #12]
 8084770:	9301      	str	r3, [sp, #4]
 8084772:	bd08      	pop	{r3, pc}
 8084774:	080401c8 	.word	0x080401c8

08084778 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8084778:	b508      	push	{r3, lr}
 808477a:	4b02      	ldr	r3, [pc, #8]	; (8084784 <network_ready+0xc>)
 808477c:	681b      	ldr	r3, [r3, #0]
 808477e:	691b      	ldr	r3, [r3, #16]
 8084780:	9301      	str	r3, [sp, #4]
 8084782:	bd08      	pop	{r3, pc}
 8084784:	080401c8 	.word	0x080401c8

08084788 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 8084788:	b508      	push	{r3, lr}
 808478a:	4b02      	ldr	r3, [pc, #8]	; (8084794 <network_on+0xc>)
 808478c:	681b      	ldr	r3, [r3, #0]
 808478e:	695b      	ldr	r3, [r3, #20]
 8084790:	9301      	str	r3, [sp, #4]
 8084792:	bd08      	pop	{r3, pc}
 8084794:	080401c8 	.word	0x080401c8

08084798 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 8084798:	b508      	push	{r3, lr}
 808479a:	4b02      	ldr	r3, [pc, #8]	; (80847a4 <network_off+0xc>)
 808479c:	681b      	ldr	r3, [r3, #0]
 808479e:	699b      	ldr	r3, [r3, #24]
 80847a0:	9301      	str	r3, [sp, #4]
 80847a2:	bd08      	pop	{r3, pc}
 80847a4:	080401c8 	.word	0x080401c8

080847a8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80847a8:	b508      	push	{r3, lr}
 80847aa:	4b02      	ldr	r3, [pc, #8]	; (80847b4 <network_listen+0xc>)
 80847ac:	681b      	ldr	r3, [r3, #0]
 80847ae:	69db      	ldr	r3, [r3, #28]
 80847b0:	9301      	str	r3, [sp, #4]
 80847b2:	bd08      	pop	{r3, pc}
 80847b4:	080401c8 	.word	0x080401c8

080847b8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80847b8:	b508      	push	{r3, lr}
 80847ba:	4b02      	ldr	r3, [pc, #8]	; (80847c4 <network_listening+0xc>)
 80847bc:	681b      	ldr	r3, [r3, #0]
 80847be:	6a1b      	ldr	r3, [r3, #32]
 80847c0:	9301      	str	r3, [sp, #4]
 80847c2:	bd08      	pop	{r3, pc}
 80847c4:	080401c8 	.word	0x080401c8

080847c8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80847c8:	b508      	push	{r3, lr}
 80847ca:	4b02      	ldr	r3, [pc, #8]	; (80847d4 <network_set_listen_timeout+0xc>)
 80847cc:	681b      	ldr	r3, [r3, #0]
 80847ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80847d0:	9301      	str	r3, [sp, #4]
 80847d2:	bd08      	pop	{r3, pc}
 80847d4:	080401c8 	.word	0x080401c8

080847d8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80847d8:	b508      	push	{r3, lr}
 80847da:	4b02      	ldr	r3, [pc, #8]	; (80847e4 <network_get_listen_timeout+0xc>)
 80847dc:	681b      	ldr	r3, [r3, #0]
 80847de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80847e0:	9301      	str	r3, [sp, #4]
 80847e2:	bd08      	pop	{r3, pc}
 80847e4:	080401c8 	.word	0x080401c8

080847e8 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80847e8:	b508      	push	{r3, lr}
 80847ea:	4b02      	ldr	r3, [pc, #8]	; (80847f4 <spark_variable+0xc>)
 80847ec:	681b      	ldr	r3, [r3, #0]
 80847ee:	681b      	ldr	r3, [r3, #0]
 80847f0:	9301      	str	r3, [sp, #4]
 80847f2:	bd08      	pop	{r3, pc}
 80847f4:	080401cc 	.word	0x080401cc

080847f8 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80847f8:	b508      	push	{r3, lr}
 80847fa:	4b02      	ldr	r3, [pc, #8]	; (8084804 <spark_function+0xc>)
 80847fc:	681b      	ldr	r3, [r3, #0]
 80847fe:	685b      	ldr	r3, [r3, #4]
 8084800:	9301      	str	r3, [sp, #4]
 8084802:	bd08      	pop	{r3, pc}
 8084804:	080401cc 	.word	0x080401cc

08084808 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 8084808:	b508      	push	{r3, lr}
 808480a:	4b02      	ldr	r3, [pc, #8]	; (8084814 <spark_process+0xc>)
 808480c:	681b      	ldr	r3, [r3, #0]
 808480e:	689b      	ldr	r3, [r3, #8]
 8084810:	9301      	str	r3, [sp, #4]
 8084812:	bd08      	pop	{r3, pc}
 8084814:	080401cc 	.word	0x080401cc

08084818 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 8084818:	b508      	push	{r3, lr}
 808481a:	4b02      	ldr	r3, [pc, #8]	; (8084824 <spark_cloud_flag_connect+0xc>)
 808481c:	681b      	ldr	r3, [r3, #0]
 808481e:	68db      	ldr	r3, [r3, #12]
 8084820:	9301      	str	r3, [sp, #4]
 8084822:	bd08      	pop	{r3, pc}
 8084824:	080401cc 	.word	0x080401cc

08084828 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 8084828:	b508      	push	{r3, lr}
 808482a:	4b02      	ldr	r3, [pc, #8]	; (8084834 <spark_cloud_flag_connected+0xc>)
 808482c:	681b      	ldr	r3, [r3, #0]
 808482e:	695b      	ldr	r3, [r3, #20]
 8084830:	9301      	str	r3, [sp, #4]
 8084832:	bd08      	pop	{r3, pc}
 8084834:	080401cc 	.word	0x080401cc

08084838 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 8084838:	b508      	push	{r3, lr}
 808483a:	4b02      	ldr	r3, [pc, #8]	; (8084844 <spark_deviceID+0xc>)
 808483c:	681b      	ldr	r3, [r3, #0]
 808483e:	69db      	ldr	r3, [r3, #28]
 8084840:	9301      	str	r3, [sp, #4]
 8084842:	bd08      	pop	{r3, pc}
 8084844:	080401cc 	.word	0x080401cc

08084848 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 8084848:	b508      	push	{r3, lr}
 808484a:	4b02      	ldr	r3, [pc, #8]	; (8084854 <spark_send_event+0xc>)
 808484c:	681b      	ldr	r3, [r3, #0]
 808484e:	6a1b      	ldr	r3, [r3, #32]
 8084850:	9301      	str	r3, [sp, #4]
 8084852:	bd08      	pop	{r3, pc}
 8084854:	080401cc 	.word	0x080401cc

08084858 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 8084858:	b508      	push	{r3, lr}
 808485a:	4b02      	ldr	r3, [pc, #8]	; (8084864 <spark_subscribe+0xc>)
 808485c:	681b      	ldr	r3, [r3, #0]
 808485e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8084860:	9301      	str	r3, [sp, #4]
 8084862:	bd08      	pop	{r3, pc}
 8084864:	080401cc 	.word	0x080401cc

08084868 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 8084868:	b508      	push	{r3, lr}
 808486a:	4b02      	ldr	r3, [pc, #8]	; (8084874 <spark_sync_time_pending+0xc>)
 808486c:	681b      	ldr	r3, [r3, #0]
 808486e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8084870:	9301      	str	r3, [sp, #4]
 8084872:	bd08      	pop	{r3, pc}
 8084874:	080401cc 	.word	0x080401cc

08084878 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8084878:	b508      	push	{r3, lr}
 808487a:	4b02      	ldr	r3, [pc, #8]	; (8084884 <spark_set_random_seed_from_cloud_handler+0xc>)
 808487c:	681b      	ldr	r3, [r3, #0]
 808487e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8084880:	9301      	str	r3, [sp, #4]
 8084882:	bd08      	pop	{r3, pc}
 8084884:	080401cc 	.word	0x080401cc

08084888 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
 8084888:	b508      	push	{r3, lr}
 808488a:	4b02      	ldr	r3, [pc, #8]	; (8084894 <spark_cloud_disconnect+0xc>)
 808488c:	681b      	ldr	r3, [r3, #0]
 808488e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8084890:	9301      	str	r3, [sp, #4]
 8084892:	bd08      	pop	{r3, pc}
 8084894:	080401cc 	.word	0x080401cc

08084898 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8084898:	b508      	push	{r3, lr}
 808489a:	4b02      	ldr	r3, [pc, #8]	; (80848a4 <malloc+0xc>)
 808489c:	681b      	ldr	r3, [r3, #0]
 808489e:	681b      	ldr	r3, [r3, #0]
 80848a0:	9301      	str	r3, [sp, #4]
 80848a2:	bd08      	pop	{r3, pc}
 80848a4:	080401a0 	.word	0x080401a0

080848a8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80848a8:	b508      	push	{r3, lr}
 80848aa:	4b02      	ldr	r3, [pc, #8]	; (80848b4 <free+0xc>)
 80848ac:	681b      	ldr	r3, [r3, #0]
 80848ae:	685b      	ldr	r3, [r3, #4]
 80848b0:	9301      	str	r3, [sp, #4]
 80848b2:	bd08      	pop	{r3, pc}
 80848b4:	080401a0 	.word	0x080401a0

080848b8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80848b8:	b508      	push	{r3, lr}
 80848ba:	4b02      	ldr	r3, [pc, #8]	; (80848c4 <realloc+0xc>)
 80848bc:	681b      	ldr	r3, [r3, #0]
 80848be:	689b      	ldr	r3, [r3, #8]
 80848c0:	9301      	str	r3, [sp, #4]
 80848c2:	bd08      	pop	{r3, pc}
 80848c4:	080401a0 	.word	0x080401a0

080848c8 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 80848c8:	b508      	push	{r3, lr}
 80848ca:	4b02      	ldr	r3, [pc, #8]	; (80848d4 <siprintf+0xc>)
 80848cc:	681b      	ldr	r3, [r3, #0]
 80848ce:	691b      	ldr	r3, [r3, #16]
 80848d0:	9301      	str	r3, [sp, #4]
 80848d2:	bd08      	pop	{r3, pc}
 80848d4:	080401a0 	.word	0x080401a0

080848d8 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80848d8:	b508      	push	{r3, lr}
 80848da:	4b02      	ldr	r3, [pc, #8]	; (80848e4 <snprintf+0xc>)
 80848dc:	681b      	ldr	r3, [r3, #0]
 80848de:	69db      	ldr	r3, [r3, #28]
 80848e0:	9301      	str	r3, [sp, #4]
 80848e2:	bd08      	pop	{r3, pc}
 80848e4:	080401a0 	.word	0x080401a0

080848e8 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80848e8:	b508      	push	{r3, lr}
 80848ea:	4b02      	ldr	r3, [pc, #8]	; (80848f4 <vsnprintf+0xc>)
 80848ec:	681b      	ldr	r3, [r3, #0]
 80848ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80848f0:	9301      	str	r3, [sp, #4]
 80848f2:	bd08      	pop	{r3, pc}
 80848f4:	080401a0 	.word	0x080401a0

080848f8 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80848f8:	b508      	push	{r3, lr}
 80848fa:	4b02      	ldr	r3, [pc, #8]	; (8084904 <abort+0xc>)
 80848fc:	681b      	ldr	r3, [r3, #0]
 80848fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8084900:	9301      	str	r3, [sp, #4]
 8084902:	bd08      	pop	{r3, pc}
 8084904:	080401a0 	.word	0x080401a0

08084908 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 8084908:	b508      	push	{r3, lr}
 808490a:	4b02      	ldr	r3, [pc, #8]	; (8084914 <_malloc_r+0xc>)
 808490c:	681b      	ldr	r3, [r3, #0]
 808490e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8084910:	9301      	str	r3, [sp, #4]
 8084912:	bd08      	pop	{r3, pc}
 8084914:	080401a0 	.word	0x080401a0

08084918 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 8084918:	b508      	push	{r3, lr}
 808491a:	4b02      	ldr	r3, [pc, #8]	; (8084924 <__errno+0xc>)
 808491c:	681b      	ldr	r3, [r3, #0]
 808491e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8084920:	9301      	str	r3, [sp, #4]
 8084922:	bd08      	pop	{r3, pc}
 8084924:	080401a0 	.word	0x080401a0

08084928 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 8084928:	b508      	push	{r3, lr}
 808492a:	4b02      	ldr	r3, [pc, #8]	; (8084934 <newlib_impure_ptr_callback+0xc>)
 808492c:	681b      	ldr	r3, [r3, #0]
 808492e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8084930:	9301      	str	r3, [sp, #4]
 8084932:	bd08      	pop	{r3, pc}
 8084934:	080401a0 	.word	0x080401a0

08084938 <_ZN4PMIC4lockEv.constprop.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
 8084938:	b508      	push	{r3, lr}
            return &Wire3;
 808493a:	f003 f94d 	bl	8087bd8 <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->lock();
}
 808493e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
 8084942:	f002 bd85 	b.w	8087450 <_ZN7TwoWire4lockEv>

08084946 <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
 8084946:	b510      	push	{r4, lr}
 8084948:	4604      	mov	r4, r0
    lock_(_lock)
 808494a:	7001      	strb	r1, [r0, #0]
    if (lock_) {
 808494c:	b109      	cbz	r1, 8084952 <_ZN4PMICC1Eb+0xc>
        lock();
 808494e:	f7ff fff3 	bl	8084938 <_ZN4PMIC4lockEv.constprop.0>
}
 8084952:	4620      	mov	r0, r4
 8084954:	bd10      	pop	{r4, pc}

08084956 <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
 8084956:	b508      	push	{r3, lr}
            return &Wire3;
 8084958:	f003 f93e 	bl	8087bd8 <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->unlock();
}
 808495c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
 8084960:	f002 bd7f 	b.w	8087462 <_ZN7TwoWire6unlockEv>

08084964 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
 8084964:	b510      	push	{r4, lr}
    if (lock_) {
 8084966:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
 8084968:	4604      	mov	r4, r0
    if (lock_) {
 808496a:	b10b      	cbz	r3, 8084970 <_ZN4PMICD1Ev+0xc>
        unlock();
 808496c:	f7ff fff3 	bl	8084956 <_ZN4PMIC6unlockEv>
}
 8084970:	4620      	mov	r0, r4
 8084972:	bd10      	pop	{r4, pc}

08084974 <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 8084974:	b510      	push	{r4, lr}
 8084976:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 8084978:	6800      	ldr	r0, [r0, #0]
 808497a:	f7ff ffec 	bl	8084956 <_ZN4PMIC6unlockEv>
 808497e:	4620      	mov	r0, r4
 8084980:	bd10      	pop	{r4, pc}

08084982 <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
 8084982:	b530      	push	{r4, r5, lr}
 8084984:	b087      	sub	sp, #28
 8084986:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8084988:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 808498a:	f7ff ffd5 	bl	8084938 <_ZN4PMIC4lockEv.constprop.0>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 808498e:	236b      	movs	r3, #107	; 0x6b
 8084990:	f88d 3008 	strb.w	r3, [sp, #8]
 8084994:	2300      	movs	r3, #0
 8084996:	2401      	movs	r4, #1
 8084998:	9303      	str	r3, [sp, #12]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
 808499a:	230a      	movs	r3, #10
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 808499c:	f88d 4010 	strb.w	r4, [sp, #16]
    timeout_ = ms;
 80849a0:	9305      	str	r3, [sp, #20]
            return &Wire3;
 80849a2:	f003 f919 	bl	8087bd8 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->beginTransmission(config);
 80849a6:	a902      	add	r1, sp, #8
 80849a8:	f002 fd33 	bl	8087412 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire3;
 80849ac:	f003 f914 	bl	8087bd8 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->write(startAddress);
 80849b0:	6803      	ldr	r3, [r0, #0]
 80849b2:	4629      	mov	r1, r5
 80849b4:	689b      	ldr	r3, [r3, #8]
 80849b6:	4798      	blx	r3
            return &Wire3;
 80849b8:	f003 f90e 	bl	8087bd8 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->endTransmission(true);
 80849bc:	4621      	mov	r1, r4
 80849be:	f002 fd40 	bl	8087442 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
 80849c2:	9403      	str	r4, [sp, #12]
            return &Wire3;
 80849c4:	f003 f908 	bl	8087bd8 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->requestFrom(config);
 80849c8:	a902      	add	r1, sp, #8
 80849ca:	f002 fcef 	bl	80873ac <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire3;
 80849ce:	f003 f903 	bl	8087bd8 <_Z20__fetch_global_Wire3v>
    DATA = pmicWireInstance()->read();
 80849d2:	6803      	ldr	r3, [r0, #0]
 80849d4:	695b      	ldr	r3, [r3, #20]
 80849d6:	4798      	blx	r3
 80849d8:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
 80849da:	a801      	add	r0, sp, #4
 80849dc:	f7ff ffca 	bl	8084974 <_ZNSt10lock_guardI4PMICED1Ev>
}
 80849e0:	b2e0      	uxtb	r0, r4
 80849e2:	b007      	add	sp, #28
 80849e4:	bd30      	pop	{r4, r5, pc}

080849e6 <_ZN4PMIC11isPowerGoodEv>:
    DATA = readRegister(SYSTEM_STATUS_REGISTER);
 80849e6:	2108      	movs	r1, #8
bool PMIC::isPowerGood(void) {
 80849e8:	b508      	push	{r3, lr}
    DATA = readRegister(SYSTEM_STATUS_REGISTER);
 80849ea:	f7ff ffca 	bl	8084982 <_ZN4PMIC12readRegisterEh>
}
 80849ee:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80849f2:	bd08      	pop	{r3, pc}

080849f4 <_ZN4PMIC15getSystemStatusEv>:
    DATA = readRegister(SYSTEM_STATUS_REGISTER);
 80849f4:	2108      	movs	r1, #8
 80849f6:	f7ff bfc4 	b.w	8084982 <_ZN4PMIC12readRegisterEh>

080849fa <_ZN8SPIClass6unlockEv>:
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 80849fa:	6880      	ldr	r0, [r0, #8]
 80849fc:	f7ff bcb4 	b.w	8084368 <os_mutex_recursive_unlock>

08084a00 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 8084a00:	b570      	push	{r4, r5, r6, lr}
    RecursiveMutex() : handle_(nullptr)
 8084a02:	2600      	movs	r6, #0
 8084a04:	4604      	mov	r4, r0
 8084a06:	460d      	mov	r5, r1
 8084a08:	f840 6f08 	str.w	r6, [r0, #8]!
        os_mutex_recursive_create(&handle_);
 8084a0c:	f7ff fc94 	bl	8084338 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 8084a10:	4628      	mov	r0, r5
    _spi = spi;
 8084a12:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 8084a14:	f7ff fda0 	bl	8084558 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 8084a18:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 8084a1a:	6066      	str	r6, [r4, #4]
}
 8084a1c:	bd70      	pop	{r4, r5, r6, pc}

08084a1e <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 8084a1e:	b510      	push	{r4, lr}
 8084a20:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
 8084a22:	6880      	ldr	r0, [r0, #8]
 8084a24:	f7ff fc98 	bl	8084358 <os_mutex_recursive_lock>
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
 8084a28:	7820      	ldrb	r0, [r4, #0]
 8084a2a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8084a2e:	f7ff fd6b 	bl	8084508 <hal_spi_begin>
        unlock();
 8084a32:	4620      	mov	r0, r4
 8084a34:	f7ff ffe1 	bl	80849fa <_ZN8SPIClass6unlockEv>
    }
}
 8084a38:	bd10      	pop	{r4, pc}

08084a3a <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
 8084a3a:	b538      	push	{r3, r4, r5, lr}
 8084a3c:	4604      	mov	r4, r0
 8084a3e:	460d      	mov	r5, r1
 8084a40:	6880      	ldr	r0, [r0, #8]
 8084a42:	f7ff fc89 	bl	8084358 <os_mutex_recursive_lock>
    if (!lock())
    {
        hal_spi_set_bit_order(_spi, bitOrder);
 8084a46:	7820      	ldrb	r0, [r4, #0]
 8084a48:	4629      	mov	r1, r5
 8084a4a:	f7ff fd65 	bl	8084518 <hal_spi_set_bit_order>
        unlock();
 8084a4e:	4620      	mov	r0, r4
 8084a50:	f7ff ffd3 	bl	80849fa <_ZN8SPIClass6unlockEv>
    }
}
 8084a54:	bd38      	pop	{r3, r4, r5, pc}

08084a56 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
 8084a56:	b538      	push	{r3, r4, r5, lr}
 8084a58:	4604      	mov	r4, r0
 8084a5a:	460d      	mov	r5, r1
 8084a5c:	6880      	ldr	r0, [r0, #8]
 8084a5e:	f7ff fc7b 	bl	8084358 <os_mutex_recursive_lock>
    if (!lock())
    {
        hal_spi_set_data_mode(_spi, mode);
 8084a62:	7820      	ldrb	r0, [r4, #0]
 8084a64:	4629      	mov	r1, r5
 8084a66:	f7ff fd5f 	bl	8084528 <hal_spi_set_data_mode>
        unlock();
 8084a6a:	4620      	mov	r0, r4
 8084a6c:	f7ff ffc5 	bl	80849fa <_ZN8SPIClass6unlockEv>
    }
}
 8084a70:	bd38      	pop	{r3, r4, r5, pc}
	...

08084a74 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 8084a74:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 8084a76:	2400      	movs	r4, #0
 8084a78:	0840      	lsrs	r0, r0, #1
 8084a7a:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 8084a7c:	6818      	ldr	r0, [r3, #0]
 8084a7e:	b2e5      	uxtb	r5, r4
 8084a80:	4288      	cmp	r0, r1
 8084a82:	d906      	bls.n	8084a92 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 8084a84:	3401      	adds	r4, #1
 8084a86:	2c08      	cmp	r4, #8
 8084a88:	d002      	beq.n	8084a90 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 8084a8a:	0840      	lsrs	r0, r0, #1
 8084a8c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 8084a8e:	e7f5      	b.n	8084a7c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 8084a90:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 8084a92:	4b02      	ldr	r3, [pc, #8]	; (8084a9c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 8084a94:	5d5b      	ldrb	r3, [r3, r5]
 8084a96:	7013      	strb	r3, [r2, #0]
}
 8084a98:	bd30      	pop	{r4, r5, pc}
 8084a9a:	bf00      	nop
 8084a9c:	08089cc7 	.word	0x08089cc7

08084aa0 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 8084aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned clock = 0;
 8084aa2:	2500      	movs	r5, #0
{
 8084aa4:	4604      	mov	r4, r0
 8084aa6:	b089      	sub	sp, #36	; 0x24
 8084aa8:	6880      	ldr	r0, [r0, #8]

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;
 8084aaa:	fb02 f601 	mul.w	r6, r2, r1
    unsigned clock = 0;
 8084aae:	9502      	str	r5, [sp, #8]
 8084ab0:	f7ff fc52 	bl	8084358 <os_mutex_recursive_lock>
    memset(info, 0, sizeof(hal_spi_info_t));
 8084ab4:	4629      	mov	r1, r5
 8084ab6:	2214      	movs	r2, #20
 8084ab8:	a803      	add	r0, sp, #12

    if (!lock())
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
 8084aba:	7827      	ldrb	r7, [r4, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
 8084abc:	f004 fa60 	bl	8088f80 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 8084ac0:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 8084ac2:	462a      	mov	r2, r5
 8084ac4:	4638      	mov	r0, r7
 8084ac6:	a903      	add	r1, sp, #12
    info->version = HAL_SPI_INFO_VERSION_1;
 8084ac8:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
 8084acc:	f7ff fd54 	bl	8084578 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 8084ad0:	ab02      	add	r3, sp, #8
 8084ad2:	f10d 0207 	add.w	r2, sp, #7
 8084ad6:	4631      	mov	r1, r6
 8084ad8:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
 8084ada:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 8084ade:	f7ff ffc9 	bl	8084a74 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
 8084ae2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8084ae6:	7820      	ldrb	r0, [r4, #0]
 8084ae8:	f7ff fd26 	bl	8084538 <hal_spi_set_clock_divider>
        unlock();
 8084aec:	4620      	mov	r0, r4
 8084aee:	f7ff ff84 	bl	80849fa <_ZN8SPIClass6unlockEv>
    }

    return clock;
}
 8084af2:	9802      	ldr	r0, [sp, #8]
 8084af4:	b009      	add	sp, #36	; 0x24
 8084af6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08084af8 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
 8084af8:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 8084afa:	7800      	ldrb	r0, [r0, #0]
 8084afc:	f7ff fd24 	bl	8084548 <hal_spi_transfer>
}
 8084b00:	b2c0      	uxtb	r0, r0
 8084b02:	bd08      	pop	{r3, pc}

08084b04 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 8084b04:	b510      	push	{r4, lr}
 8084b06:	4604      	mov	r4, r0
        if (wakeupSource_) {
 8084b08:	6800      	ldr	r0, [r0, #0]
 8084b0a:	b118      	cbz	r0, 8084b14 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 8084b0c:	f7ff fecc 	bl	80848a8 <free>
            wakeupSource_ = nullptr;
 8084b10:	2300      	movs	r3, #0
 8084b12:	6023      	str	r3, [r4, #0]
        }
    }
 8084b14:	bd10      	pop	{r4, pc}

08084b16 <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8084b16:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
 8084b18:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8084b1c:	460d      	mov	r5, r1
        error_ = result.error_;
 8084b1e:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
 8084b20:	460b      	mov	r3, r1
 8084b22:	f853 2f06 	ldr.w	r2, [r3, #6]!
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8084b26:	4604      	mov	r4, r0
        compatResult_ = result.compatResult_;
 8084b28:	f8c0 2006 	str.w	r2, [r0, #6]
 8084b2c:	889b      	ldrh	r3, [r3, #4]
 8084b2e:	8143      	strh	r3, [r0, #10]
        freeWakeupSourceMemory();
 8084b30:	f7ff ffe8 	bl	8084b04 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
 8084b34:	682b      	ldr	r3, [r5, #0]
 8084b36:	b113      	cbz	r3, 8084b3e <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
 8084b38:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
 8084b3a:	2300      	movs	r3, #0
 8084b3c:	602b      	str	r3, [r5, #0]
    }
 8084b3e:	4620      	mov	r0, r4
 8084b40:	bd38      	pop	{r3, r4, r5, pc}

08084b42 <_ZN17SystemSleepResult13toSleepResultEv>:
        if (error_ || wakeupSource_) {
 8084b42:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SleepResult toSleepResult() {
 8084b46:	b510      	push	{r4, lr}
 8084b48:	680a      	ldr	r2, [r1, #0]
        if (error_ || wakeupSource_) {
 8084b4a:	b933      	cbnz	r3, 8084b5a <_ZN17SystemSleepResult13toSleepResultEv+0x18>
 8084b4c:	b932      	cbnz	r2, 8084b5c <_ZN17SystemSleepResult13toSleepResultEv+0x1a>
        return compatResult_;
 8084b4e:	f851 3f06 	ldr.w	r3, [r1, #6]!
 8084b52:	6003      	str	r3, [r0, #0]
 8084b54:	888b      	ldrh	r3, [r1, #4]
 8084b56:	8083      	strh	r3, [r0, #4]
    }
 8084b58:	bd10      	pop	{r4, pc}
        if (wakeupSource_) {
 8084b5a:	b122      	cbz	r2, 8084b66 <_ZN17SystemSleepResult13toSleepResultEv+0x24>
            return static_cast<SystemSleepWakeupReason>(wakeupSource_->type);
 8084b5c:	8894      	ldrh	r4, [r2, #4]
            switch (wakeupReason()) {
 8084b5e:	2c01      	cmp	r4, #1
 8084b60:	d003      	beq.n	8084b6a <_ZN17SystemSleepResult13toSleepResultEv+0x28>
 8084b62:	2c04      	cmp	r4, #4
 8084b64:	d006      	beq.n	8084b74 <_ZN17SystemSleepResult13toSleepResultEv+0x32>
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 8084b66:	2204      	movs	r2, #4
 8084b68:	e005      	b.n	8084b76 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
 8084b6a:	8992      	ldrh	r2, [r2, #12]
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
 8084b6c:	718c      	strb	r4, [r1, #6]
 8084b6e:	810b      	strh	r3, [r1, #8]
 8084b70:	814a      	strh	r2, [r1, #10]
                    break;
 8084b72:	e7ec      	b.n	8084b4e <_ZN17SystemSleepResult13toSleepResultEv+0xc>
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
 8084b74:	2202      	movs	r2, #2
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 8084b76:	810b      	strh	r3, [r1, #8]
 8084b78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8084b7c:	718a      	strb	r2, [r1, #6]
 8084b7e:	814b      	strh	r3, [r1, #10]
                    break;
 8084b80:	e7e5      	b.n	8084b4e <_ZN17SystemSleepResult13toSleepResultEv+0xc>

08084b82 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
 8084b82:	b507      	push	{r0, r1, r2, lr}
 8084b84:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 8084b86:	2100      	movs	r1, #0
{
 8084b88:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 8084b8a:	9100      	str	r1, [sp, #0]
 8084b8c:	2001      	movs	r0, #1
 8084b8e:	218c      	movs	r1, #140	; 0x8c
 8084b90:	f7ff fdd0 	bl	8084734 <system_reset>
}
 8084b94:	b003      	add	sp, #12
 8084b96:	f85d fb04 	ldr.w	pc, [sp], #4

08084b9a <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
 8084b9a:	4601      	mov	r1, r0
    reset(0, flags);
 8084b9c:	2000      	movs	r0, #0
 8084b9e:	f7ff bff0 	b.w	8084b82 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

08084ba2 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
 8084ba2:	2000      	movs	r0, #0
 8084ba4:	f7ff bff9 	b.w	8084b9a <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

08084ba8 <_ZN11SystemClass13enterSafeModeEN8particle5FlagsI19SystemResetFlagTypemEE>:

void SystemClass::enterSafeMode(SystemResetFlags flags)
{
 8084ba8:	b507      	push	{r0, r1, r2, lr}
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
 8084baa:	2200      	movs	r2, #0
{
 8084bac:	4603      	mov	r3, r0
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
 8084bae:	4611      	mov	r1, r2
 8084bb0:	9200      	str	r2, [sp, #0]
 8084bb2:	2003      	movs	r0, #3
 8084bb4:	f7ff fdbe 	bl	8084734 <system_reset>
}
 8084bb8:	b003      	add	sp, #12
 8084bba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08084bc0 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
    }
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
 8084bc0:	b530      	push	{r4, r5, lr}
 8084bc2:	4604      	mov	r4, r0
 8084bc4:	b085      	sub	sp, #20
 8084bc6:	4608      	mov	r0, r1
 8084bc8:	4611      	mov	r1, r2
 8084bca:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
 8084bcc:	2300      	movs	r3, #0
 8084bce:	f7ff fd63 	bl	8084698 <system_sleep>
              compatResult_(r) {
 8084bd2:	2300      	movs	r3, #0
 8084bd4:	9301      	str	r3, [sp, #4]
 8084bd6:	f8ad 3008 	strh.w	r3, [sp, #8]
 8084bda:	f88d 300a 	strb.w	r3, [sp, #10]
 8084bde:	f64f 73ff 	movw	r3, #65535	; 0xffff
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
 8084be2:	4d09      	ldr	r5, [pc, #36]	; (8084c08 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
 8084be4:	a901      	add	r1, sp, #4
 8084be6:	f8ad 000c 	strh.w	r0, [sp, #12]
 8084bea:	4628      	mov	r0, r5
 8084bec:	f8ad 300e 	strh.w	r3, [sp, #14]
 8084bf0:	f7ff ff91 	bl	8084b16 <_ZN17SystemSleepResultaSEOS_>
        freeWakeupSourceMemory();
 8084bf4:	a801      	add	r0, sp, #4
 8084bf6:	f7ff ff85 	bl	8084b04 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        return toSleepResult();
 8084bfa:	4620      	mov	r0, r4
 8084bfc:	4629      	mov	r1, r5
 8084bfe:	f7ff ffa0 	bl	8084b42 <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
 8084c02:	4620      	mov	r0, r4
 8084c04:	b005      	add	sp, #20
 8084c06:	bd30      	pop	{r4, r5, pc}
 8084c08:	200003a0 	.word	0x200003a0

08084c0c <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
 8084c0c:	b510      	push	{r4, lr}
 8084c0e:	2400      	movs	r4, #0
 8084c10:	7004      	strb	r4, [r0, #0]
 8084c12:	8044      	strh	r4, [r0, #2]
 8084c14:	f64f 74ff 	movw	r4, #65535	; 0xffff
    if (ret > 0) {
 8084c18:	2900      	cmp	r1, #0
SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
 8084c1a:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
 8084c1c:	dd08      	ble.n	8084c30 <_ZN11SleepResultC1EiPKtj+0x24>
        // pin
        --ret;
 8084c1e:	3901      	subs	r1, #1
        if ((size_t)ret < pinsSize) {
 8084c20:	428b      	cmp	r3, r1
 8084c22:	d904      	bls.n	8084c2e <_ZN11SleepResultC1EiPKtj+0x22>
            pin_ = pins[ret];
 8084c24:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
 8084c28:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
 8084c2a:	2301      	movs	r3, #1
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
        reason_ = WAKEUP_REASON_RTC;
 8084c2c:	7003      	strb	r3, [r0, #0]
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
    }
}
 8084c2e:	bd10      	pop	{r4, pc}
    } else if (ret == 0) {
 8084c30:	d101      	bne.n	8084c36 <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
 8084c32:	2302      	movs	r3, #2
 8084c34:	e7fa      	b.n	8084c2c <_ZN11SleepResultC1EiPKtj+0x20>
        err_ = static_cast<system_error_t>(ret);
 8084c36:	8041      	strh	r1, [r0, #2]
 8084c38:	e7f9      	b.n	8084c2e <_ZN11SleepResultC1EiPKtj+0x22>
	...

08084c3c <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 8084c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8084c3e:	460d      	mov	r5, r1
 8084c40:	4616      	mov	r6, r2
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 8084c42:	2700      	movs	r7, #0
SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 8084c44:	b08b      	sub	sp, #44	; 0x2c
 8084c46:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 8084c48:	9b12      	ldr	r3, [sp, #72]	; 0x48
SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 8084c4a:	4604      	mov	r4, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 8084c4c:	9301      	str	r3, [sp, #4]
 8084c4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8084c50:	4631      	mov	r1, r6
 8084c52:	9300      	str	r3, [sp, #0]
 8084c54:	4628      	mov	r0, r5
 8084c56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8084c58:	9702      	str	r7, [sp, #8]
 8084c5a:	f7ff fd61 	bl	8084720 <system_sleep_pins>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
 8084c5e:	4633      	mov	r3, r6
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 8084c60:	4601      	mov	r1, r0
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
 8084c62:	462a      	mov	r2, r5
 8084c64:	a805      	add	r0, sp, #20
 8084c66:	f7ff ffd1 	bl	8084c0c <_ZN11SleepResultC1EiPKtj>
 8084c6a:	4d0f      	ldr	r5, [pc, #60]	; (8084ca8 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x6c>)
 8084c6c:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8084c70:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 8084c74:	f8bd 3018 	ldrh.w	r3, [sp, #24]
              compatResult_(r) {
 8084c78:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
 8084c7c:	4628      	mov	r0, r5
 8084c7e:	a907      	add	r1, sp, #28
 8084c80:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8084c84:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8084c88:	9707      	str	r7, [sp, #28]
 8084c8a:	f8ad 7020 	strh.w	r7, [sp, #32]
 8084c8e:	f7ff ff42 	bl	8084b16 <_ZN17SystemSleepResultaSEOS_>
        freeWakeupSourceMemory();
 8084c92:	a807      	add	r0, sp, #28
 8084c94:	f7ff ff36 	bl	8084b04 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        return toSleepResult();
 8084c98:	4620      	mov	r0, r4
 8084c9a:	4629      	mov	r1, r5
 8084c9c:	f7ff ff51 	bl	8084b42 <_ZN17SystemSleepResult13toSleepResultEv>
}
 8084ca0:	4620      	mov	r0, r4
 8084ca2:	b00b      	add	sp, #44	; 0x2c
 8084ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8084ca6:	bf00      	nop
 8084ca8:	200003a0 	.word	0x200003a0

08084cac <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 8084cac:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 8084cae:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 8084cb0:	b510      	push	{r4, lr}
 8084cb2:	4b08      	ldr	r3, [pc, #32]	; (8084cd4 <_GLOBAL__sub_I_System+0x28>)
 8084cb4:	4c08      	ldr	r4, [pc, #32]	; (8084cd8 <_GLOBAL__sub_I_System+0x2c>)
 8084cb6:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 8084cb8:	4b08      	ldr	r3, [pc, #32]	; (8084cdc <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 8084cba:	6020      	str	r0, [r4, #0]
 8084cbc:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 8084cbe:	71a0      	strb	r0, [r4, #6]
 8084cc0:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8084cc2:	f7ff fcd9 	bl	8084678 <set_system_mode>
SystemClass System;
 8084cc6:	4620      	mov	r0, r4
 8084cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 8084ccc:	4a04      	ldr	r2, [pc, #16]	; (8084ce0 <_GLOBAL__sub_I_System+0x34>)
 8084cce:	4905      	ldr	r1, [pc, #20]	; (8084ce4 <_GLOBAL__sub_I_System+0x38>)
 8084cd0:	f002 bfaa 	b.w	8087c28 <__aeabi_atexit>
 8084cd4:	200003ac 	.word	0x200003ac
 8084cd8:	200003a0 	.word	0x200003a0
 8084cdc:	ffff0000 	.word	0xffff0000
 8084ce0:	20000130 	.word	0x20000130
 8084ce4:	08080255 	.word	0x08080255

08084ce8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8084ce8:	b510      	push	{r4, lr}
 8084cea:	4604      	mov	r4, r0
{
	free(buffer);
 8084cec:	6800      	ldr	r0, [r0, #0]
 8084cee:	f7ff fddb 	bl	80848a8 <free>
}
 8084cf2:	4620      	mov	r0, r4
 8084cf4:	bd10      	pop	{r4, pc}

08084cf6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 8084cf6:	b510      	push	{r4, lr}
 8084cf8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 8084cfa:	6800      	ldr	r0, [r0, #0]
 8084cfc:	b108      	cbz	r0, 8084d02 <_ZN6String10invalidateEv+0xc>
 8084cfe:	f7ff fdd3 	bl	80848a8 <free>
	buffer = NULL;
 8084d02:	2300      	movs	r3, #0
	capacity = len = 0;
 8084d04:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 8084d08:	6023      	str	r3, [r4, #0]
}
 8084d0a:	bd10      	pop	{r4, pc}

08084d0c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 8084d0c:	b538      	push	{r3, r4, r5, lr}
 8084d0e:	4604      	mov	r4, r0
 8084d10:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 8084d12:	6800      	ldr	r0, [r0, #0]
 8084d14:	3101      	adds	r1, #1
 8084d16:	f7ff fdcf 	bl	80848b8 <realloc>
	if (newbuffer) {
 8084d1a:	b110      	cbz	r0, 8084d22 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 8084d1c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 8084d20:	2001      	movs	r0, #1
	}
	return 0;
}
 8084d22:	bd38      	pop	{r3, r4, r5, pc}

08084d24 <_ZN6String7reserveEj>:
{
 8084d24:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 8084d26:	6803      	ldr	r3, [r0, #0]
{
 8084d28:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 8084d2a:	b123      	cbz	r3, 8084d36 <_ZN6String7reserveEj+0x12>
 8084d2c:	6843      	ldr	r3, [r0, #4]
 8084d2e:	428b      	cmp	r3, r1
 8084d30:	d301      	bcc.n	8084d36 <_ZN6String7reserveEj+0x12>
 8084d32:	2001      	movs	r0, #1
}
 8084d34:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 8084d36:	4620      	mov	r0, r4
 8084d38:	f7ff ffe8 	bl	8084d0c <_ZN6String12changeBufferEj>
 8084d3c:	2800      	cmp	r0, #0
 8084d3e:	d0f9      	beq.n	8084d34 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 8084d40:	68a3      	ldr	r3, [r4, #8]
 8084d42:	2b00      	cmp	r3, #0
 8084d44:	d1f5      	bne.n	8084d32 <_ZN6String7reserveEj+0xe>
 8084d46:	6822      	ldr	r2, [r4, #0]
 8084d48:	7013      	strb	r3, [r2, #0]
 8084d4a:	e7f2      	b.n	8084d32 <_ZN6String7reserveEj+0xe>

08084d4c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8084d4c:	b570      	push	{r4, r5, r6, lr}
 8084d4e:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8084d50:	4611      	mov	r1, r2
{
 8084d52:	4604      	mov	r4, r0
 8084d54:	4615      	mov	r5, r2
	if (!reserve(length)) {
 8084d56:	f7ff ffe5 	bl	8084d24 <_ZN6String7reserveEj>
 8084d5a:	b920      	cbnz	r0, 8084d66 <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 8084d5c:	4620      	mov	r0, r4
 8084d5e:	f7ff ffca 	bl	8084cf6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 8084d62:	4620      	mov	r0, r4
 8084d64:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 8084d66:	462a      	mov	r2, r5
 8084d68:	4631      	mov	r1, r6
 8084d6a:	6820      	ldr	r0, [r4, #0]
	len = length;
 8084d6c:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 8084d6e:	f004 f8df 	bl	8088f30 <memcpy>
	buffer[len] = 0;
 8084d72:	2100      	movs	r1, #0
 8084d74:	6822      	ldr	r2, [r4, #0]
 8084d76:	68a3      	ldr	r3, [r4, #8]
 8084d78:	54d1      	strb	r1, [r2, r3]
	return *this;
 8084d7a:	e7f2      	b.n	8084d62 <_ZN6String4copyEPKcj+0x16>

08084d7c <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 8084d7c:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 8084d7e:	2300      	movs	r3, #0
String::String(const char *cstr)
 8084d80:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 8084d82:	460d      	mov	r5, r1
	capacity = 0;
 8084d84:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 8084d88:	6083      	str	r3, [r0, #8]
	flags = 0;
 8084d8a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 8084d8c:	b139      	cbz	r1, 8084d9e <_ZN6StringC1EPKc+0x22>
 8084d8e:	4608      	mov	r0, r1
 8084d90:	f004 f967 	bl	8089062 <strlen>
 8084d94:	4629      	mov	r1, r5
 8084d96:	4602      	mov	r2, r0
 8084d98:	4620      	mov	r0, r4
 8084d9a:	f7ff ffd7 	bl	8084d4c <_ZN6String4copyEPKcj>
}
 8084d9e:	4620      	mov	r0, r4
 8084da0:	bd38      	pop	{r3, r4, r5, pc}

08084da2 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 8084da2:	b538      	push	{r3, r4, r5, lr}
 8084da4:	4605      	mov	r5, r0
	if (buffer) {
 8084da6:	6800      	ldr	r0, [r0, #0]
{
 8084da8:	460c      	mov	r4, r1
	if (buffer) {
 8084daa:	b168      	cbz	r0, 8084dc8 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 8084dac:	686a      	ldr	r2, [r5, #4]
 8084dae:	688b      	ldr	r3, [r1, #8]
 8084db0:	429a      	cmp	r2, r3
 8084db2:	d307      	bcc.n	8084dc4 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 8084db4:	6809      	ldr	r1, [r1, #0]
 8084db6:	f004 f930 	bl	808901a <strcpy>
			len = rhs.len;
 8084dba:	68a3      	ldr	r3, [r4, #8]
 8084dbc:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 8084dbe:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 8084dc0:	60a3      	str	r3, [r4, #8]
}
 8084dc2:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 8084dc4:	f7ff fd70 	bl	80848a8 <free>
	buffer = rhs.buffer;
 8084dc8:	6823      	ldr	r3, [r4, #0]
 8084dca:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 8084dcc:	6863      	ldr	r3, [r4, #4]
 8084dce:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 8084dd0:	68a3      	ldr	r3, [r4, #8]
 8084dd2:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 8084dd4:	2300      	movs	r3, #0
	rhs.capacity = 0;
 8084dd6:	e9c4 3300 	strd	r3, r3, [r4]
 8084dda:	e7f1      	b.n	8084dc0 <_ZN6String4moveERS_+0x1e>

08084ddc <_ZN6StringC1EOS_>:
	buffer = NULL;
 8084ddc:	2300      	movs	r3, #0
String::String(String &&rval)
 8084dde:	b510      	push	{r4, lr}
 8084de0:	4604      	mov	r4, r0
	capacity = 0;
 8084de2:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 8084de6:	6083      	str	r3, [r0, #8]
	flags = 0;
 8084de8:	7303      	strb	r3, [r0, #12]
	move(rval);
 8084dea:	f7ff ffda 	bl	8084da2 <_ZN6String4moveERS_>
}
 8084dee:	4620      	mov	r0, r4
 8084df0:	bd10      	pop	{r4, pc}

08084df2 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8084df2:	4288      	cmp	r0, r1
{
 8084df4:	b510      	push	{r4, lr}
 8084df6:	460b      	mov	r3, r1
 8084df8:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 8084dfa:	d004      	beq.n	8084e06 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 8084dfc:	6809      	ldr	r1, [r1, #0]
 8084dfe:	b121      	cbz	r1, 8084e0a <_ZN6StringaSERKS_+0x18>
 8084e00:	689a      	ldr	r2, [r3, #8]
 8084e02:	f7ff ffa3 	bl	8084d4c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 8084e06:	4620      	mov	r0, r4
 8084e08:	bd10      	pop	{r4, pc}
	else invalidate();
 8084e0a:	f7ff ff74 	bl	8084cf6 <_ZN6String10invalidateEv>
 8084e0e:	e7fa      	b.n	8084e06 <_ZN6StringaSERKS_+0x14>

08084e10 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 8084e10:	2300      	movs	r3, #0
String::String(const String &value)
 8084e12:	b510      	push	{r4, lr}
 8084e14:	4604      	mov	r4, r0
	capacity = 0;
 8084e16:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 8084e1a:	6083      	str	r3, [r0, #8]
	flags = 0;
 8084e1c:	7303      	strb	r3, [r0, #12]
	*this = value;
 8084e1e:	f7ff ffe8 	bl	8084df2 <_ZN6StringaSERKS_>
}
 8084e22:	4620      	mov	r0, r4
 8084e24:	bd10      	pop	{r4, pc}

08084e26 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 8084e26:	4288      	cmp	r0, r1
{
 8084e28:	b510      	push	{r4, lr}
 8084e2a:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 8084e2c:	d001      	beq.n	8084e32 <_ZN6StringaSEOS_+0xc>
 8084e2e:	f7ff ffb8 	bl	8084da2 <_ZN6String4moveERS_>
	return *this;
}
 8084e32:	4620      	mov	r0, r4
 8084e34:	bd10      	pop	{r4, pc}

08084e36 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 8084e36:	b538      	push	{r3, r4, r5, lr}
 8084e38:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 8084e3a:	460c      	mov	r4, r1
 8084e3c:	b149      	cbz	r1, 8084e52 <_ZN6StringaSEPKc+0x1c>
 8084e3e:	4608      	mov	r0, r1
 8084e40:	f004 f90f 	bl	8089062 <strlen>
 8084e44:	4621      	mov	r1, r4
 8084e46:	4602      	mov	r2, r0
 8084e48:	4628      	mov	r0, r5
 8084e4a:	f7ff ff7f 	bl	8084d4c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 8084e4e:	4628      	mov	r0, r5
 8084e50:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 8084e52:	f7ff ff50 	bl	8084cf6 <_ZN6String10invalidateEv>
 8084e56:	e7fa      	b.n	8084e4e <_ZN6StringaSEPKc+0x18>

08084e58 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 8084e58:	b570      	push	{r4, r5, r6, lr}
 8084e5a:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 8084e5c:	460e      	mov	r6, r1
 8084e5e:	b909      	cbnz	r1, 8084e64 <_ZN6String6concatEPKcj+0xc>
 8084e60:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 8084e62:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 8084e64:	b16a      	cbz	r2, 8084e82 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 8084e66:	6884      	ldr	r4, [r0, #8]
 8084e68:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 8084e6a:	4621      	mov	r1, r4
 8084e6c:	f7ff ff5a 	bl	8084d24 <_ZN6String7reserveEj>
 8084e70:	2800      	cmp	r0, #0
 8084e72:	d0f5      	beq.n	8084e60 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 8084e74:	6828      	ldr	r0, [r5, #0]
 8084e76:	68ab      	ldr	r3, [r5, #8]
 8084e78:	4631      	mov	r1, r6
 8084e7a:	4418      	add	r0, r3
 8084e7c:	f004 f8cd 	bl	808901a <strcpy>
	len = newlen;
 8084e80:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 8084e82:	2001      	movs	r0, #1
 8084e84:	e7ed      	b.n	8084e62 <_ZN6String6concatEPKcj+0xa>

08084e86 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 8084e86:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 8084e88:	688a      	ldr	r2, [r1, #8]
 8084e8a:	6809      	ldr	r1, [r1, #0]
{
 8084e8c:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 8084e8e:	f7ff ffe3 	bl	8084e58 <_ZN6String6concatEPKcj>
 8084e92:	b910      	cbnz	r0, 8084e9a <_ZplRK15StringSumHelperRK6String+0x14>
 8084e94:	4620      	mov	r0, r4
 8084e96:	f7ff ff2e 	bl	8084cf6 <_ZN6String10invalidateEv>
	return a;
}
 8084e9a:	4620      	mov	r0, r4
 8084e9c:	bd10      	pop	{r4, pc}

08084e9e <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 8084e9e:	b538      	push	{r3, r4, r5, lr}
 8084ea0:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 8084ea2:	460d      	mov	r5, r1
 8084ea4:	b921      	cbnz	r1, 8084eb0 <_ZplRK15StringSumHelperPKc+0x12>
 8084ea6:	4620      	mov	r0, r4
 8084ea8:	f7ff ff25 	bl	8084cf6 <_ZN6String10invalidateEv>
	return a;
}
 8084eac:	4620      	mov	r0, r4
 8084eae:	bd38      	pop	{r3, r4, r5, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 8084eb0:	4608      	mov	r0, r1
 8084eb2:	f004 f8d6 	bl	8089062 <strlen>
 8084eb6:	4629      	mov	r1, r5
 8084eb8:	4602      	mov	r2, r0
 8084eba:	4620      	mov	r0, r4
 8084ebc:	f7ff ffcc 	bl	8084e58 <_ZN6String6concatEPKcj>
 8084ec0:	2800      	cmp	r0, #0
 8084ec2:	d0f0      	beq.n	8084ea6 <_ZplRK15StringSumHelperPKc+0x8>
 8084ec4:	e7f2      	b.n	8084eac <_ZplRK15StringSumHelperPKc+0xe>

08084ec6 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8084ec6:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8084ec8:	6882      	ldr	r2, [r0, #8]
 8084eca:	b93a      	cbnz	r2, 8084edc <_ZNK6String6equalsEPKc+0x16>
 8084ecc:	b121      	cbz	r1, 8084ed8 <_ZNK6String6equalsEPKc+0x12>
 8084ece:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
 8084ed0:	fab0 f080 	clz	r0, r0
 8084ed4:	0940      	lsrs	r0, r0, #5
 8084ed6:	e000      	b.n	8084eda <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8084ed8:	2001      	movs	r0, #1
}
 8084eda:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 8084edc:	6800      	ldr	r0, [r0, #0]
 8084ede:	b909      	cbnz	r1, 8084ee4 <_ZNK6String6equalsEPKc+0x1e>
 8084ee0:	7800      	ldrb	r0, [r0, #0]
 8084ee2:	e7f5      	b.n	8084ed0 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
 8084ee4:	f004 f88f 	bl	8089006 <strcmp>
 8084ee8:	e7f2      	b.n	8084ed0 <_ZNK6String6equalsEPKc+0xa>

08084eea <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
 8084eea:	4613      	mov	r3, r2
 8084eec:	b510      	push	{r4, lr}
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
 8084eee:	688a      	ldr	r2, [r1, #8]
 8084ef0:	6884      	ldr	r4, [r0, #8]
 8084ef2:	1aa4      	subs	r4, r4, r2
 8084ef4:	429c      	cmp	r4, r3
 8084ef6:	d30a      	bcc.n	8084f0e <_ZNK6String10startsWithERKS_j+0x24>
 8084ef8:	6800      	ldr	r0, [r0, #0]
 8084efa:	b138      	cbz	r0, 8084f0c <_ZNK6String10startsWithERKS_j+0x22>
 8084efc:	6809      	ldr	r1, [r1, #0]
 8084efe:	b141      	cbz	r1, 8084f12 <_ZNK6String10startsWithERKS_j+0x28>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
 8084f00:	4418      	add	r0, r3
 8084f02:	f004 f8b6 	bl	8089072 <strncmp>
 8084f06:	fab0 f080 	clz	r0, r0
 8084f0a:	0940      	lsrs	r0, r0, #5
}
 8084f0c:	bd10      	pop	{r4, pc}
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
 8084f0e:	2000      	movs	r0, #0
 8084f10:	e7fc      	b.n	8084f0c <_ZNK6String10startsWithERKS_j+0x22>
 8084f12:	4608      	mov	r0, r1
 8084f14:	e7fa      	b.n	8084f0c <_ZNK6String10startsWithERKS_j+0x22>

08084f16 <_ZNK6String10startsWithERKS_>:
	if (len < s2.len) return 0;
 8084f16:	6882      	ldr	r2, [r0, #8]
 8084f18:	688b      	ldr	r3, [r1, #8]
 8084f1a:	429a      	cmp	r2, r3
 8084f1c:	d302      	bcc.n	8084f24 <_ZNK6String10startsWithERKS_+0xe>
	return startsWith(s2, 0);
 8084f1e:	2200      	movs	r2, #0
 8084f20:	f7ff bfe3 	b.w	8084eea <_ZNK6String10startsWithERKS_j>
}
 8084f24:	2000      	movs	r0, #0
 8084f26:	4770      	bx	lr

08084f28 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
 8084f28:	6883      	ldr	r3, [r0, #8]
 8084f2a:	428b      	cmp	r3, r1
 8084f2c:	d903      	bls.n	8084f36 <_ZNK6StringixEj+0xe>
 8084f2e:	6800      	ldr	r0, [r0, #0]
 8084f30:	b110      	cbz	r0, 8084f38 <_ZNK6StringixEj+0x10>
	return buffer[index];
 8084f32:	5c40      	ldrb	r0, [r0, r1]
 8084f34:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
 8084f36:	2000      	movs	r0, #0
}
 8084f38:	4770      	bx	lr

08084f3a <_ZNK6String6charAtEj>:
	return operator[](loc);
 8084f3a:	f7ff bff5 	b.w	8084f28 <_ZNK6StringixEj>

08084f3e <_ZNK6String7indexOfEcj>:
{
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
 8084f3e:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
 8084f40:	6883      	ldr	r3, [r0, #8]
 8084f42:	4293      	cmp	r3, r2
 8084f44:	d906      	bls.n	8084f54 <_ZNK6String7indexOfEcj+0x16>
	const char* temp = strchr(buffer + fromIndex, ch);
 8084f46:	6804      	ldr	r4, [r0, #0]
 8084f48:	18a0      	adds	r0, r4, r2
 8084f4a:	f004 f845 	bl	8088fd8 <strchr>
	if (temp == NULL) return -1;
 8084f4e:	b108      	cbz	r0, 8084f54 <_ZNK6String7indexOfEcj+0x16>
	return temp - buffer;
 8084f50:	1b00      	subs	r0, r0, r4
}
 8084f52:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
 8084f54:	f04f 30ff 	mov.w	r0, #4294967295
 8084f58:	e7fb      	b.n	8084f52 <_ZNK6String7indexOfEcj+0x14>

08084f5a <_ZNK6String7indexOfEc>:
	return indexOf(c, 0);
 8084f5a:	2200      	movs	r2, #0
 8084f5c:	f7ff bfef 	b.w	8084f3e <_ZNK6String7indexOfEcj>

08084f60 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 8084f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8084f62:	461d      	mov	r5, r3
	if (left > right) {
 8084f64:	429a      	cmp	r2, r3
 8084f66:	bf88      	it	hi
 8084f68:	4613      	movhi	r3, r2
{
 8084f6a:	460f      	mov	r7, r1
 8084f6c:	4614      	mov	r4, r2
	if (left > right) {
 8084f6e:	bf88      	it	hi
 8084f70:	462c      	movhi	r4, r5
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 8084f72:	490b      	ldr	r1, [pc, #44]	; (8084fa0 <_ZNK6String9substringEjj+0x40>)
	if (left > right) {
 8084f74:	bf88      	it	hi
 8084f76:	461d      	movhi	r5, r3
{
 8084f78:	4606      	mov	r6, r0
	String out;
 8084f7a:	f7ff feff 	bl	8084d7c <_ZN6StringC1EPKc>
	if (left > len) return out;
 8084f7e:	68ba      	ldr	r2, [r7, #8]
 8084f80:	42a2      	cmp	r2, r4
 8084f82:	d30a      	bcc.n	8084f9a <_ZNK6String9substringEjj+0x3a>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
 8084f84:	6839      	ldr	r1, [r7, #0]
 8084f86:	42aa      	cmp	r2, r5
 8084f88:	bf94      	ite	ls
 8084f8a:	ebc4 0202 	rsbls	r2, r4, r2
 8084f8e:	ebc4 0205 	rsbhi	r2, r4, r5
 8084f92:	4630      	mov	r0, r6
 8084f94:	4421      	add	r1, r4
 8084f96:	f7ff fed9 	bl	8084d4c <_ZN6String4copyEPKcj>
	return out;
}
 8084f9a:	4630      	mov	r0, r6
 8084f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8084f9e:	bf00      	nop
 8084fa0:	08089844 	.word	0x08089844

08084fa4 <_ZNK6String9substringEj>:
{
 8084fa4:	b510      	push	{r4, lr}
 8084fa6:	4604      	mov	r4, r0
	return substring(left, len);
 8084fa8:	688b      	ldr	r3, [r1, #8]
 8084faa:	f7ff ffd9 	bl	8084f60 <_ZNK6String9substringEjj>
}
 8084fae:	4620      	mov	r0, r4
 8084fb0:	bd10      	pop	{r4, pc}

08084fb2 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 8084fb2:	6800      	ldr	r0, [r0, #0]
 8084fb4:	b108      	cbz	r0, 8084fba <_ZNK6String5toIntEv+0x8>
 8084fb6:	f003 bfa9 	b.w	8088f0c <atol>
	return 0;
}
 8084fba:	4770      	bx	lr

08084fbc <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
 8084fbc:	b40e      	push	{r1, r2, r3}
 8084fbe:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
 8084fc0:	ad09      	add	r5, sp, #36	; 0x24
 8084fc2:	f855 7b04 	ldr.w	r7, [r5], #4
 8084fc6:	4604      	mov	r4, r0
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 8084fc8:	462b      	mov	r3, r5
 8084fca:	463a      	mov	r2, r7
 8084fcc:	2105      	movs	r1, #5
 8084fce:	a802      	add	r0, sp, #8
    va_start(marker, fmt);
 8084fd0:	9501      	str	r5, [sp, #4]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 8084fd2:	f7ff fc89 	bl	80848e8 <vsnprintf>
 8084fd6:	4606      	mov	r6, r0
    va_end(marker);

    String result;
 8084fd8:	490b      	ldr	r1, [pc, #44]	; (8085008 <_ZN6String6formatEPKcz+0x4c>)
 8084fda:	4620      	mov	r0, r4
 8084fdc:	f7ff fece 	bl	8084d7c <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
 8084fe0:	4631      	mov	r1, r6
 8084fe2:	4620      	mov	r0, r4
 8084fe4:	f7ff fe9e 	bl	8084d24 <_ZN6String7reserveEj>
    if (result.buffer) {
 8084fe8:	6820      	ldr	r0, [r4, #0]
 8084fea:	b130      	cbz	r0, 8084ffa <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 8084fec:	462b      	mov	r3, r5
 8084fee:	463a      	mov	r2, r7
 8084ff0:	1c71      	adds	r1, r6, #1
        va_start(marker, fmt);
 8084ff2:	9501      	str	r5, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 8084ff4:	f7ff fc78 	bl	80848e8 <vsnprintf>
        va_end(marker);
        result.len = n;
 8084ff8:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
 8084ffa:	4620      	mov	r0, r4
 8084ffc:	b004      	add	sp, #16
 8084ffe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8085002:	b003      	add	sp, #12
 8085004:	4770      	bx	lr
 8085006:	bf00      	nop
 8085008:	08089844 	.word	0x08089844

0808500c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 808500c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808500e:	4606      	mov	r6, r0
 8085010:	460d      	mov	r5, r1
  size_t n = 0;
 8085012:	2400      	movs	r4, #0
 8085014:	188f      	adds	r7, r1, r2
  while (size--) {
 8085016:	42bd      	cmp	r5, r7
 8085018:	d00c      	beq.n	8085034 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 808501a:	6833      	ldr	r3, [r6, #0]
 808501c:	4630      	mov	r0, r6
 808501e:	689b      	ldr	r3, [r3, #8]
 8085020:	f815 1b01 	ldrb.w	r1, [r5], #1
 8085024:	4798      	blx	r3
     if (chunk>=0)
 8085026:	1e03      	subs	r3, r0, #0
 8085028:	db01      	blt.n	808502e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 808502a:	441c      	add	r4, r3
  while (size--) {
 808502c:	e7f3      	b.n	8085016 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 808502e:	2c00      	cmp	r4, #0
 8085030:	bf08      	it	eq
 8085032:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 8085034:	4620      	mov	r0, r4
 8085036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08085038 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8085038:	b570      	push	{r4, r5, r6, lr}
 808503a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 808503c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 808503e:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 8085040:	b149      	cbz	r1, 8085056 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8085042:	f004 f80e 	bl	8089062 <strlen>
 8085046:	682b      	ldr	r3, [r5, #0]
 8085048:	4602      	mov	r2, r0
 808504a:	4621      	mov	r1, r4
 808504c:	4628      	mov	r0, r5
    }
 808504e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 8085052:	68db      	ldr	r3, [r3, #12]
 8085054:	4718      	bx	r3
    }
 8085056:	bd70      	pop	{r4, r5, r6, pc}

08085058 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 8085058:	b508      	push	{r3, lr}
  return write(str);
 808505a:	f7ff ffed 	bl	8085038 <_ZN5Print5writeEPKc>
}
 808505e:	bd08      	pop	{r3, pc}

08085060 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 8085060:	6803      	ldr	r3, [r0, #0]
 8085062:	689b      	ldr	r3, [r3, #8]
 8085064:	4718      	bx	r3

08085066 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8085066:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 8085068:	210d      	movs	r1, #13
{
 808506a:	4605      	mov	r5, r0
  size_t n = print('\r');
 808506c:	f7ff fff8 	bl	8085060 <_ZN5Print5printEc>
  n += print('\n');
 8085070:	210a      	movs	r1, #10
  size_t n = print('\r');
 8085072:	4604      	mov	r4, r0
  n += print('\n');
 8085074:	4628      	mov	r0, r5
 8085076:	f7ff fff3 	bl	8085060 <_ZN5Print5printEc>
  return n;
}
 808507a:	4420      	add	r0, r4
 808507c:	bd38      	pop	{r3, r4, r5, pc}

0808507e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 808507e:	b538      	push	{r3, r4, r5, lr}
 8085080:	4605      	mov	r5, r0
  return write(str);
 8085082:	f7ff ffd9 	bl	8085038 <_ZN5Print5writeEPKc>
 8085086:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 8085088:	4628      	mov	r0, r5
 808508a:	f7ff ffec 	bl	8085066 <_ZN5Print7printlnEv>
  return n;
}
 808508e:	4420      	add	r0, r4
 8085090:	bd38      	pop	{r3, r4, r5, pc}

08085092 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8085092:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8085094:	2a01      	cmp	r2, #1
 8085096:	bf98      	it	ls
 8085098:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 808509a:	b530      	push	{r4, r5, lr}
 808509c:	b08b      	sub	sp, #44	; 0x2c
 808509e:	460c      	mov	r4, r1
  *str = '\0';
 80850a0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80850a4:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80850a6:	4625      	mov	r5, r4
 80850a8:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80850ac:	fb04 5312 	mls	r3, r4, r2, r5
 80850b0:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80850b2:	2b09      	cmp	r3, #9
 80850b4:	bf94      	ite	ls
 80850b6:	3330      	addls	r3, #48	; 0x30
 80850b8:	3337      	addhi	r3, #55	; 0x37
 80850ba:	b2db      	uxtb	r3, r3
  } while(n);
 80850bc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80850be:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80850c2:	d9f0      	bls.n	80850a6 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80850c4:	f7ff ffb8 	bl	8085038 <_ZN5Print5writeEPKc>
}
 80850c8:	b00b      	add	sp, #44	; 0x2c
 80850ca:	bd30      	pop	{r4, r5, pc}

080850cc <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80850cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80850d0:	4605      	mov	r5, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80850d2:	4619      	mov	r1, r3
 80850d4:	4610      	mov	r0, r2
{
 80850d6:	4692      	mov	sl, r2
 80850d8:	461f      	mov	r7, r3
 80850da:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
  if (isnan(number)) return print("nan");
 80850de:	f003 fb2d 	bl	808873c <__aeabi_dcmpun>
 80850e2:	b140      	cbz	r0, 80850f6 <_ZN5Print10printFloatEdh+0x2a>
  return write(str);
 80850e4:	4950      	ldr	r1, [pc, #320]	; (8085228 <_ZN5Print10printFloatEdh+0x15c>)
 80850e6:	4628      	mov	r0, r5
 80850e8:	f7ff ffa6 	bl	8085038 <_ZN5Print5writeEPKc>
 80850ec:	4604      	mov	r4, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
 80850ee:	4620      	mov	r0, r4
 80850f0:	b003      	add	sp, #12
 80850f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 80850f6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
 80850fa:	f04f 32ff 	mov.w	r2, #4294967295
 80850fe:	4650      	mov	r0, sl
 8085100:	4621      	mov	r1, r4
 8085102:	4b4a      	ldr	r3, [pc, #296]	; (808522c <_ZN5Print10printFloatEdh+0x160>)
 8085104:	f003 fb1a 	bl	808873c <__aeabi_dcmpun>
 8085108:	b948      	cbnz	r0, 808511e <_ZN5Print10printFloatEdh+0x52>
 808510a:	f04f 32ff 	mov.w	r2, #4294967295
 808510e:	4650      	mov	r0, sl
 8085110:	4621      	mov	r1, r4
 8085112:	4b46      	ldr	r3, [pc, #280]	; (808522c <_ZN5Print10printFloatEdh+0x160>)
 8085114:	f003 faf4 	bl	8088700 <__aeabi_dcmple>
 8085118:	b908      	cbnz	r0, 808511e <_ZN5Print10printFloatEdh+0x52>
  return write(str);
 808511a:	4945      	ldr	r1, [pc, #276]	; (8085230 <_ZN5Print10printFloatEdh+0x164>)
 808511c:	e7e3      	b.n	80850e6 <_ZN5Print10printFloatEdh+0x1a>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 808511e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8085122:	4650      	mov	r0, sl
 8085124:	4639      	mov	r1, r7
 8085126:	4b43      	ldr	r3, [pc, #268]	; (8085234 <_ZN5Print10printFloatEdh+0x168>)
 8085128:	f003 fafe 	bl	8088728 <__aeabi_dcmpgt>
 808512c:	b108      	cbz	r0, 8085132 <_ZN5Print10printFloatEdh+0x66>
  return write(str);
 808512e:	4942      	ldr	r1, [pc, #264]	; (8085238 <_ZN5Print10printFloatEdh+0x16c>)
 8085130:	e7d9      	b.n	80850e6 <_ZN5Print10printFloatEdh+0x1a>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 8085132:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8085136:	4650      	mov	r0, sl
 8085138:	4639      	mov	r1, r7
 808513a:	4b40      	ldr	r3, [pc, #256]	; (808523c <_ZN5Print10printFloatEdh+0x170>)
 808513c:	f003 fad6 	bl	80886ec <__aeabi_dcmplt>
 8085140:	2800      	cmp	r0, #0
 8085142:	d1f4      	bne.n	808512e <_ZN5Print10printFloatEdh+0x62>
  if (number < 0.0)
 8085144:	2200      	movs	r2, #0
 8085146:	2300      	movs	r3, #0
 8085148:	4650      	mov	r0, sl
 808514a:	4639      	mov	r1, r7
 808514c:	f003 face 	bl	80886ec <__aeabi_dcmplt>
 8085150:	4604      	mov	r4, r0
 8085152:	b130      	cbz	r0, 8085162 <_ZN5Print10printFloatEdh+0x96>
     n += print('-');
 8085154:	212d      	movs	r1, #45	; 0x2d
 8085156:	4628      	mov	r0, r5
 8085158:	f7ff ff82 	bl	8085060 <_ZN5Print5printEc>
 808515c:	4604      	mov	r4, r0
     number = -number;
 808515e:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
  size_t n = 0;
 8085162:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
 8085166:	2000      	movs	r0, #0
    rounding /= 10.0;
 8085168:	f04f 0800 	mov.w	r8, #0
  double rounding = 0.5;
 808516c:	4934      	ldr	r1, [pc, #208]	; (8085240 <_ZN5Print10printFloatEdh+0x174>)
    rounding /= 10.0;
 808516e:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8085248 <_ZN5Print10printFloatEdh+0x17c>
  for (uint8_t i=0; i<digits; ++i)
 8085172:	fa5f f38b 	uxtb.w	r3, fp
 8085176:	429e      	cmp	r6, r3
 8085178:	d906      	bls.n	8085188 <_ZN5Print10printFloatEdh+0xbc>
    rounding /= 10.0;
 808517a:	4642      	mov	r2, r8
 808517c:	464b      	mov	r3, r9
 808517e:	f003 f96d 	bl	808845c <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
 8085182:	f10b 0b01 	add.w	fp, fp, #1
 8085186:	e7f4      	b.n	8085172 <_ZN5Print10printFloatEdh+0xa6>
  number += rounding;
 8085188:	463b      	mov	r3, r7
 808518a:	4652      	mov	r2, sl
 808518c:	f002 fe86 	bl	8087e9c <__adddf3>
 8085190:	4689      	mov	r9, r1
 8085192:	4680      	mov	r8, r0
  unsigned long int_part = (unsigned long)number;
 8085194:	f003 fb10 	bl	80887b8 <__aeabi_d2uiz>
 8085198:	4607      	mov	r7, r0
  double remainder = number - (double)int_part;
 808519a:	f002 ffbb 	bl	8088114 <__aeabi_ui2d>
 808519e:	4602      	mov	r2, r0
 80851a0:	460b      	mov	r3, r1
 80851a2:	4640      	mov	r0, r8
 80851a4:	4649      	mov	r1, r9
 80851a6:	f002 fe77 	bl	8087e98 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80851aa:	220a      	movs	r2, #10
 80851ac:	4680      	mov	r8, r0
 80851ae:	4689      	mov	r9, r1
 80851b0:	4628      	mov	r0, r5
 80851b2:	4639      	mov	r1, r7
 80851b4:	f7ff ff6d 	bl	8085092 <_ZN5Print11printNumberEmh>
  n += print(int_part);
 80851b8:	4404      	add	r4, r0
  if (digits > 0) {
 80851ba:	b126      	cbz	r6, 80851c6 <_ZN5Print10printFloatEdh+0xfa>
  return write(str);
 80851bc:	4628      	mov	r0, r5
 80851be:	4921      	ldr	r1, [pc, #132]	; (8085244 <_ZN5Print10printFloatEdh+0x178>)
 80851c0:	f7ff ff3a 	bl	8085038 <_ZN5Print5writeEPKc>
    n += print(".");
 80851c4:	4404      	add	r4, r0
    remainder *= 10.0;
 80851c6:	f04f 0a00 	mov.w	sl, #0
 80851ca:	f8df b07c 	ldr.w	fp, [pc, #124]	; 8085248 <_ZN5Print10printFloatEdh+0x17c>
  while (digits-- > 0)
 80851ce:	3e01      	subs	r6, #1
 80851d0:	b2f6      	uxtb	r6, r6
 80851d2:	2eff      	cmp	r6, #255	; 0xff
 80851d4:	d08b      	beq.n	80850ee <_ZN5Print10printFloatEdh+0x22>
    remainder *= 10.0;
 80851d6:	4652      	mov	r2, sl
 80851d8:	465b      	mov	r3, fp
 80851da:	4640      	mov	r0, r8
 80851dc:	4649      	mov	r1, r9
 80851de:	f003 f813 	bl	8088208 <__aeabi_dmul>
 80851e2:	4680      	mov	r8, r0
 80851e4:	4689      	mov	r9, r1
    int toPrint = int(remainder);
 80851e6:	f003 fabf 	bl	8088768 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
 80851ea:	1e07      	subs	r7, r0, #0
 80851ec:	da19      	bge.n	8085222 <_ZN5Print10printFloatEdh+0x156>
            t = print('-');
 80851ee:	212d      	movs	r1, #45	; 0x2d
 80851f0:	4628      	mov	r0, r5
 80851f2:	f7ff ff35 	bl	8085060 <_ZN5Print5printEc>
 80851f6:	4603      	mov	r3, r0
            val = -n;
 80851f8:	4279      	negs	r1, r7
        return printNumber(val, base) + t;
 80851fa:	220a      	movs	r2, #10
 80851fc:	4628      	mov	r0, r5
 80851fe:	9301      	str	r3, [sp, #4]
 8085200:	f7ff ff47 	bl	8085092 <_ZN5Print11printNumberEmh>
 8085204:	9b01      	ldr	r3, [sp, #4]
 8085206:	4403      	add	r3, r0
    remainder -= toPrint;
 8085208:	4638      	mov	r0, r7
    n += print(toPrint);
 808520a:	441c      	add	r4, r3
    remainder -= toPrint;
 808520c:	f002 ff92 	bl	8088134 <__aeabi_i2d>
 8085210:	4602      	mov	r2, r0
 8085212:	460b      	mov	r3, r1
 8085214:	4640      	mov	r0, r8
 8085216:	4649      	mov	r1, r9
 8085218:	f002 fe3e 	bl	8087e98 <__aeabi_dsub>
 808521c:	4680      	mov	r8, r0
 808521e:	4689      	mov	r9, r1
  while (digits-- > 0)
 8085220:	e7d5      	b.n	80851ce <_ZN5Print10printFloatEdh+0x102>
            val = n;
 8085222:	4639      	mov	r1, r7
        size_t t = 0;
 8085224:	2300      	movs	r3, #0
 8085226:	e7e8      	b.n	80851fa <_ZN5Print10printFloatEdh+0x12e>
 8085228:	08089ccf 	.word	0x08089ccf
 808522c:	7fefffff 	.word	0x7fefffff
 8085230:	08089cd3 	.word	0x08089cd3
 8085234:	41efffff 	.word	0x41efffff
 8085238:	08089cd7 	.word	0x08089cd7
 808523c:	c1efffff 	.word	0xc1efffff
 8085240:	3fe00000 	.word	0x3fe00000
 8085244:	08089501 	.word	0x08089501
 8085248:	40240000 	.word	0x40240000

0808524c <_ZN5Print7printlnEdi>:
{
 808524c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return printFloat(n, digits);
 808524e:	f89d 1018 	ldrb.w	r1, [sp, #24]
{
 8085252:	4605      	mov	r5, r0
  return printFloat(n, digits);
 8085254:	9100      	str	r1, [sp, #0]
 8085256:	f7ff ff39 	bl	80850cc <_ZN5Print10printFloatEdh>
 808525a:	4604      	mov	r4, r0
  n += println();
 808525c:	4628      	mov	r0, r5
 808525e:	f7ff ff02 	bl	8085066 <_ZN5Print7printlnEv>
}
 8085262:	4420      	add	r0, r4
 8085264:	b003      	add	sp, #12
 8085266:	bd30      	pop	{r4, r5, pc}

08085268 <_ZN5Print7printlnEfi>:
{
 8085268:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808526a:	4604      	mov	r4, r0
    return println((double)num, digits);
 808526c:	4608      	mov	r0, r1
{
 808526e:	4615      	mov	r5, r2
    return println((double)num, digits);
 8085270:	f002 ff72 	bl	8088158 <__aeabi_f2d>
 8085274:	9500      	str	r5, [sp, #0]
 8085276:	4602      	mov	r2, r0
 8085278:	460b      	mov	r3, r1
 808527a:	4620      	mov	r0, r4
 808527c:	f7ff ffe6 	bl	808524c <_ZN5Print7printlnEdi>
}
 8085280:	b003      	add	sp, #12
 8085282:	bd30      	pop	{r4, r5, pc}

08085284 <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 8085284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8085288:	b086      	sub	sp, #24
 808528a:	af00      	add	r7, sp, #0
 808528c:	4605      	mov	r5, r0
 808528e:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 8085290:	1d38      	adds	r0, r7, #4
 8085292:	2114      	movs	r1, #20
{
 8085294:	4614      	mov	r4, r2
    va_copy(args2, args);
 8085296:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 8085298:	f7ff fb26 	bl	80848e8 <vsnprintf>

    if (n<bufsize)
 808529c:	2813      	cmp	r0, #19
 808529e:	d80e      	bhi.n	80852be <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 80852a0:	4628      	mov	r0, r5
 80852a2:	1d39      	adds	r1, r7, #4
 80852a4:	f7ff fec8 	bl	8085038 <_ZN5Print5writeEPKc>
 80852a8:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 80852aa:	b11e      	cbz	r6, 80852b4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 80852ac:	4628      	mov	r0, r5
 80852ae:	f7ff feda 	bl	8085066 <_ZN5Print7printlnEv>
 80852b2:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 80852b4:	4620      	mov	r0, r4
 80852b6:	3718      	adds	r7, #24
 80852b8:	46bd      	mov	sp, r7
 80852ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 80852be:	f100 0308 	add.w	r3, r0, #8
 80852c2:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 80852c6:	46e8      	mov	r8, sp
        char bigger[n+1];
 80852c8:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 80852cc:	4622      	mov	r2, r4
 80852ce:	1c41      	adds	r1, r0, #1
 80852d0:	683b      	ldr	r3, [r7, #0]
 80852d2:	4668      	mov	r0, sp
 80852d4:	f7ff fb08 	bl	80848e8 <vsnprintf>
  return write(str);
 80852d8:	4669      	mov	r1, sp
 80852da:	4628      	mov	r0, r5
 80852dc:	f7ff feac 	bl	8085038 <_ZN5Print5writeEPKc>
 80852e0:	4604      	mov	r4, r0
 80852e2:	46c5      	mov	sp, r8
 80852e4:	e7e1      	b.n	80852aa <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

080852e6 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 80852e6:	6880      	ldr	r0, [r0, #8]
 80852e8:	6803      	ldr	r3, [r0, #0]
 80852ea:	68db      	ldr	r3, [r3, #12]
 80852ec:	4718      	bx	r3

080852ee <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 80852ee:	4770      	bx	lr

080852f0 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 80852f0:	4608      	mov	r0, r1
 80852f2:	b111      	cbz	r1, 80852fa <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 80852f4:	680b      	ldr	r3, [r1, #0]
 80852f6:	685b      	ldr	r3, [r3, #4]
 80852f8:	4718      	bx	r3
}
 80852fa:	4770      	bx	lr

080852fc <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 80852fc:	4770      	bx	lr

080852fe <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 80852fe:	4770      	bx	lr

08085300 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 8085300:	4770      	bx	lr

08085302 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
 8085302:	b538      	push	{r3, r4, r5, lr}
 8085304:	4604      	mov	r4, r0
 8085306:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 8085308:	6800      	ldr	r0, [r0, #0]
 808530a:	212e      	movs	r1, #46	; 0x2e
 808530c:	f003 fe71 	bl	8088ff2 <strchrnul>
    size = s - category;
 8085310:	6823      	ldr	r3, [r4, #0]
    const char *s = strchrnul(category, '.');
 8085312:	4602      	mov	r2, r0
    size = s - category;
 8085314:	1ac0      	subs	r0, r0, r3
 8085316:	6028      	str	r0, [r5, #0]
    if (size) {
 8085318:	b120      	cbz	r0, 8085324 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x22>
        if (*s) {
 808531a:	7813      	ldrb	r3, [r2, #0]
 808531c:	b103      	cbz	r3, 8085320 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1e>
            ++s;
 808531e:	3201      	adds	r2, #1
 8085320:	6820      	ldr	r0, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8085322:	6022      	str	r2, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
}
 8085324:	bd38      	pop	{r3, r4, r5, pc}

08085326 <_ZN5spark16JSONStreamWriterD0Ev>:
 8085326:	b510      	push	{r4, lr}
 8085328:	4604      	mov	r4, r0
 808532a:	210c      	movs	r1, #12
 808532c:	f002 fc81 	bl	8087c32 <_ZdlPvj>
 8085330:	4620      	mov	r0, r4
 8085332:	bd10      	pop	{r4, pc}

08085334 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 8085334:	b510      	push	{r4, lr}
 8085336:	4604      	mov	r4, r0
 8085338:	2104      	movs	r1, #4
 808533a:	f002 fc7a 	bl	8087c32 <_ZdlPvj>
 808533e:	4620      	mov	r0, r4
 8085340:	bd10      	pop	{r4, pc}

08085342 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 8085342:	b510      	push	{r4, lr}
 8085344:	4604      	mov	r4, r0
 8085346:	2104      	movs	r1, #4
 8085348:	f002 fc73 	bl	8087c32 <_ZdlPvj>
 808534c:	4620      	mov	r0, r4
 808534e:	bd10      	pop	{r4, pc}

08085350 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 8085350:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 8085352:	f003 fe58 	bl	8089006 <strcmp>
}
 8085356:	fab0 f080 	clz	r0, r0
 808535a:	0940      	lsrs	r0, r0, #5
 808535c:	bd08      	pop	{r3, pc}

0808535e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 808535e:	b510      	push	{r4, lr}
 8085360:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
 8085362:	f001 fe01 	bl	8086f68 <_Z16_fetch_usbserialv>
 8085366:	4284      	cmp	r4, r0
 8085368:	d105      	bne.n	8085376 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 808536a:	f001 fdfd 	bl	8086f68 <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
 808536e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        USBSerial1.end();
 8085372:	f001 bded 	b.w	8086f50 <_ZN9USBSerial3endEv>
    if (stream == &USBSerial1) {
 8085376:	f001 fe27 	bl	8086fc8 <_Z17_fetch_usbserial1v>
 808537a:	4284      	cmp	r4, r0
 808537c:	d102      	bne.n	8085384 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x26>
        USBSerial1.end();
 808537e:	f001 fe23 	bl	8086fc8 <_Z17_fetch_usbserial1v>
 8085382:	e7f4      	b.n	808536e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x10>
    if (stream == &Serial1) {
 8085384:	f001 ff78 	bl	8087278 <_Z22__fetch_global_Serial1v>
 8085388:	4284      	cmp	r4, r0
 808538a:	d105      	bne.n	8085398 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
        Serial1.end();
 808538c:	f001 ff74 	bl	8087278 <_Z22__fetch_global_Serial1v>
}
 8085390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 8085394:	f001 bf6d 	b.w	8087272 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 8085398:	b12c      	cbz	r4, 80853a6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x48>
 808539a:	6823      	ldr	r3, [r4, #0]
 808539c:	4620      	mov	r0, r4
}
 808539e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80853a2:	685b      	ldr	r3, [r3, #4]
 80853a4:	4718      	bx	r3
 80853a6:	bd10      	pop	{r4, pc}

080853a8 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 80853a8:	b538      	push	{r3, r4, r5, lr}
 80853aa:	4605      	mov	r5, r0
    return value(val, strlen(val));
 80853ac:	4608      	mov	r0, r1
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 80853ae:	460c      	mov	r4, r1
    return value(val, strlen(val));
 80853b0:	f003 fe57 	bl	8089062 <strlen>
 80853b4:	4621      	mov	r1, r4
 80853b6:	4602      	mov	r2, r0
 80853b8:	4628      	mov	r0, r5
}
 80853ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return value(val, strlen(val));
 80853be:	f002 ba94 	b.w	80878ea <_ZN5spark10JSONWriter5valueEPKcj>

080853c2 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 80853c2:	b570      	push	{r4, r5, r6, lr}
 80853c4:	4604      	mov	r4, r0
    write(str, strlen(str));
 80853c6:	4608      	mov	r0, r1
inline void spark::StreamLogHandler::write(const char *str) {
 80853c8:	460d      	mov	r5, r1
    write(str, strlen(str));
 80853ca:	f003 fe4a 	bl	8089062 <strlen>
 80853ce:	6823      	ldr	r3, [r4, #0]
 80853d0:	4602      	mov	r2, r0
 80853d2:	4629      	mov	r1, r5
 80853d4:	4620      	mov	r0, r4
}
 80853d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    write(str, strlen(str));
 80853da:	68db      	ldr	r3, [r3, #12]
 80853dc:	4718      	bx	r3

080853de <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 80853de:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 80853e0:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 80853e2:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 80853e6:	2201      	movs	r2, #1
 80853e8:	68db      	ldr	r3, [r3, #12]
 80853ea:	f10d 0107 	add.w	r1, sp, #7
 80853ee:	4798      	blx	r3
}
 80853f0:	b003      	add	sp, #12
 80853f2:	f85d fb04 	ldr.w	pc, [sp], #4

080853f6 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
 80853f6:	b40e      	push	{r1, r2, r3}
 80853f8:	b503      	push	{r0, r1, lr}
 80853fa:	ab03      	add	r3, sp, #12
 80853fc:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
 8085400:	2100      	movs	r1, #0
 8085402:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
 8085404:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
 8085406:	f7ff ff3d 	bl	8085284 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
 808540a:	b002      	add	sp, #8
 808540c:	f85d eb04 	ldr.w	lr, [sp], #4
 8085410:	b003      	add	sp, #12
 8085412:	4770      	bx	lr

08085414 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 8085414:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 8085418:	f04f 0814 	mov.w	r8, #20
 808541c:	e9d0 9500 	ldrd	r9, r5, [r0]
 8085420:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 8085422:	464c      	mov	r4, r9
 8085424:	fb08 f505 	mul.w	r5, r8, r5
 8085428:	9300      	str	r3, [sp, #0]
 808542a:	10ab      	asrs	r3, r5, #2
 808542c:	4d17      	ldr	r5, [pc, #92]	; (808548c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
 808542e:	435d      	muls	r5, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 8085430:	2d00      	cmp	r5, #0
 8085432:	dd23      	ble.n	808547c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
 8085434:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 8085436:	fb08 f006 	mul.w	r0, r8, r6
 808543a:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 808543e:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8085442:	463a      	mov	r2, r7
 8085444:	455f      	cmp	r7, fp
 8085446:	bf28      	it	cs
 8085448:	465a      	movcs	r2, fp
 808544a:	5820      	ldr	r0, [r4, r0]
 808544c:	9101      	str	r1, [sp, #4]
 808544e:	f003 fe10 	bl	8089072 <strncmp>
                if (cmp == 0) {
 8085452:	2301      	movs	r3, #1
 8085454:	9901      	ldr	r1, [sp, #4]
 8085456:	b978      	cbnz	r0, 8085478 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
 8085458:	455f      	cmp	r7, fp
 808545a:	d103      	bne.n	8085464 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 808545c:	9a00      	ldr	r2, [sp, #0]
 808545e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 8085460:	4635      	mov	r5, r6
 8085462:	e7e5      	b.n	8085430 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
 8085464:	bf8c      	ite	hi
 8085466:	2001      	movhi	r0, #1
 8085468:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 808546a:	2800      	cmp	r0, #0
 808546c:	d0f8      	beq.n	8085460 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 808546e:	1bae      	subs	r6, r5, r6
	      ++__first;
 8085470:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
 8085474:	3e01      	subs	r6, #1
 8085476:	e7f3      	b.n	8085460 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
 8085478:	0fc0      	lsrs	r0, r0, #31
 808547a:	e7f6      	b.n	808546a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
 808547c:	eba4 0409 	sub.w	r4, r4, r9
}
 8085480:	4802      	ldr	r0, [pc, #8]	; (808548c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
 8085482:	10a4      	asrs	r4, r4, #2
 8085484:	4360      	muls	r0, r4
 8085486:	b003      	add	sp, #12
 8085488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808548c:	cccccccd 	.word	0xcccccccd

08085490 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 8085490:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 8085492:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 8085494:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 8085496:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 8085498:	b303      	cbz	r3, 80854dc <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 808549a:	b1f9      	cbz	r1, 80854dc <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 808549c:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 808549e:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 80854a2:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 80854a4:	a903      	add	r1, sp, #12
 80854a6:	a801      	add	r0, sp, #4
 80854a8:	f7ff ff2b 	bl	8085302 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 80854ac:	4601      	mov	r1, r0
 80854ae:	b1a8      	cbz	r0, 80854dc <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 80854b0:	f10d 030b 	add.w	r3, sp, #11
 80854b4:	4620      	mov	r0, r4
 80854b6:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 80854b8:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 80854bc:	f7ff ffaa 	bl	8085414 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 80854c0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80854c4:	b153      	cbz	r3, 80854dc <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 80854c6:	2314      	movs	r3, #20
 80854c8:	6824      	ldr	r4, [r4, #0]
 80854ca:	fb03 4400 	mla	r4, r3, r0, r4
            if (node.level >= 0) {
 80854ce:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 80854d2:	3408      	adds	r4, #8
            if (node.level >= 0) {
 80854d4:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 80854d6:	bfa8      	it	ge
 80854d8:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
 80854da:	e7e3      	b.n	80854a4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 80854dc:	4630      	mov	r0, r6
 80854de:	b004      	add	sp, #16
 80854e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080854e4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 80854e4:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 80854e6:	4c0a      	ldr	r4, [pc, #40]	; (8085510 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 80854e8:	7823      	ldrb	r3, [r4, #0]
 80854ea:	f3bf 8f5b 	dmb	ish
 80854ee:	07db      	lsls	r3, r3, #31
 80854f0:	d40b      	bmi.n	808550a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
 80854f2:	4620      	mov	r0, r4
 80854f4:	f7fa fdf2 	bl	80800dc <__cxa_guard_acquire>
 80854f8:	b138      	cbz	r0, 808550a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
 80854fa:	4620      	mov	r0, r4
 80854fc:	f7fa fdf3 	bl	80800e6 <__cxa_guard_release>
 8085500:	4a04      	ldr	r2, [pc, #16]	; (8085514 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
 8085502:	4905      	ldr	r1, [pc, #20]	; (8085518 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
 8085504:	4805      	ldr	r0, [pc, #20]	; (808551c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
 8085506:	f002 fb8f 	bl	8087c28 <__aeabi_atexit>
}
 808550a:	4804      	ldr	r0, [pc, #16]	; (808551c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
 808550c:	bd10      	pop	{r4, pc}
 808550e:	bf00      	nop
 8085510:	200003b4 	.word	0x200003b4
 8085514:	20000130 	.word	0x20000130
 8085518:	080852ff 	.word	0x080852ff
 808551c:	200000b8 	.word	0x200000b8

08085520 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 8085520:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 8085522:	4c0a      	ldr	r4, [pc, #40]	; (808554c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 8085524:	7823      	ldrb	r3, [r4, #0]
 8085526:	f3bf 8f5b 	dmb	ish
 808552a:	07db      	lsls	r3, r3, #31
 808552c:	d40b      	bmi.n	8085546 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
 808552e:	4620      	mov	r0, r4
 8085530:	f7fa fdd4 	bl	80800dc <__cxa_guard_acquire>
 8085534:	b138      	cbz	r0, 8085546 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
 8085536:	4620      	mov	r0, r4
 8085538:	f7fa fdd5 	bl	80800e6 <__cxa_guard_release>
 808553c:	4a04      	ldr	r2, [pc, #16]	; (8085550 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
 808553e:	4905      	ldr	r1, [pc, #20]	; (8085554 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
 8085540:	4805      	ldr	r0, [pc, #20]	; (8085558 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
 8085542:	f002 fb71 	bl	8087c28 <__aeabi_atexit>
    return &factory;
}
 8085546:	4804      	ldr	r0, [pc, #16]	; (8085558 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
 8085548:	bd10      	pop	{r4, pc}
 808554a:	bf00      	nop
 808554c:	200003b8 	.word	0x200003b8
 8085550:	20000130 	.word	0x20000130
 8085554:	080852fd 	.word	0x080852fd
 8085558:	200000bc 	.word	0x200000bc

0808555c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 808555c:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 808555e:	2500      	movs	r5, #0
 8085560:	4604      	mov	r4, r0
 8085562:	e9c0 5500 	strd	r5, r5, [r0]
 8085566:	e9c0 5504 	strd	r5, r5, [r0, #16]
 808556a:	6085      	str	r5, [r0, #8]
 808556c:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
 808556e:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
 8085572:	f7fe fee1 	bl	8084338 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 8085576:	f7ff ffb5 	bl	80854e4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 808557a:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 808557c:	f7ff ffd0 	bl	8085520 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 8085580:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 8085582:	6220      	str	r0, [r4, #32]
}
 8085584:	4620      	mov	r0, r4
 8085586:	bd38      	pop	{r3, r4, r5, pc}

08085588 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 8085588:	b510      	push	{r4, lr}
    static LogManager mgr;
 808558a:	4c0b      	ldr	r4, [pc, #44]	; (80855b8 <_ZN5spark10LogManager8instanceEv+0x30>)
 808558c:	7823      	ldrb	r3, [r4, #0]
 808558e:	f3bf 8f5b 	dmb	ish
 8085592:	07db      	lsls	r3, r3, #31
 8085594:	d40e      	bmi.n	80855b4 <_ZN5spark10LogManager8instanceEv+0x2c>
 8085596:	4620      	mov	r0, r4
 8085598:	f7fa fda0 	bl	80800dc <__cxa_guard_acquire>
 808559c:	b150      	cbz	r0, 80855b4 <_ZN5spark10LogManager8instanceEv+0x2c>
 808559e:	4807      	ldr	r0, [pc, #28]	; (80855bc <_ZN5spark10LogManager8instanceEv+0x34>)
 80855a0:	f7ff ffdc 	bl	808555c <_ZN5spark10LogManagerC1Ev>
 80855a4:	4620      	mov	r0, r4
 80855a6:	f7fa fd9e 	bl	80800e6 <__cxa_guard_release>
 80855aa:	4a05      	ldr	r2, [pc, #20]	; (80855c0 <_ZN5spark10LogManager8instanceEv+0x38>)
 80855ac:	4905      	ldr	r1, [pc, #20]	; (80855c4 <_ZN5spark10LogManager8instanceEv+0x3c>)
 80855ae:	4803      	ldr	r0, [pc, #12]	; (80855bc <_ZN5spark10LogManager8instanceEv+0x34>)
 80855b0:	f002 fb3a 	bl	8087c28 <__aeabi_atexit>
    return &mgr;
}
 80855b4:	4801      	ldr	r0, [pc, #4]	; (80855bc <_ZN5spark10LogManager8instanceEv+0x34>)
 80855b6:	bd10      	pop	{r4, pc}
 80855b8:	200003b0 	.word	0x200003b0
 80855bc:	200003c0 	.word	0x200003c0
 80855c0:	20000130 	.word	0x20000130
 80855c4:	08085a4b 	.word	0x08085a4b

080855c8 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 80855c8:	2300      	movs	r3, #0
 80855ca:	4a02      	ldr	r2, [pc, #8]	; (80855d4 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 80855cc:	4902      	ldr	r1, [pc, #8]	; (80855d8 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 80855ce:	4803      	ldr	r0, [pc, #12]	; (80855dc <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 80855d0:	f7ff b842 	b.w	8084658 <log_set_callbacks>
 80855d4:	08085929 	.word	0x08085929
 80855d8:	080858b5 	.word	0x080858b5
 80855dc:	08085835 	.word	0x08085835

080855e0 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 80855e0:	2300      	movs	r3, #0
 80855e2:	461a      	mov	r2, r3
 80855e4:	4619      	mov	r1, r3
 80855e6:	4618      	mov	r0, r3
 80855e8:	f7ff b836 	b.w	8084658 <log_set_callbacks>

080855ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
 80855ec:	680b      	ldr	r3, [r1, #0]
 80855ee:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
 80855f0:	b113      	cbz	r3, 80855f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 80855f2:	685a      	ldr	r2, [r3, #4]
 80855f4:	3201      	adds	r2, #1
 80855f6:	605a      	str	r2, [r3, #4]
      }
 80855f8:	4770      	bx	lr

080855fa <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 80855fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80855fc:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 80855fe:	690d      	ldr	r5, [r1, #16]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8085600:	f851 3b04 	ldr.w	r3, [r1], #4
 8085604:	a801      	add	r0, sp, #4
 8085606:	9300      	str	r3, [sp, #0]
 8085608:	f7ff fff0 	bl	80855ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 808560c:	466a      	mov	r2, sp
 808560e:	4629      	mov	r1, r5
 8085610:	4620      	mov	r0, r4
 8085612:	f002 f815 	bl	8087640 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 8085616:	a801      	add	r0, sp, #4
 8085618:	f7fa ff0a 	bl	8080430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 808561c:	4620      	mov	r0, r4
 808561e:	b003      	add	sp, #12
 8085620:	bd30      	pop	{r4, r5, pc}

08085622 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 8085622:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8085624:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 8085626:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8085628:	f851 3b04 	ldr.w	r3, [r1], #4
 808562c:	a801      	add	r0, sp, #4
 808562e:	9300      	str	r3, [sp, #0]
 8085630:	f7ff ffdc 	bl	80855ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8085634:	466a      	mov	r2, sp
 8085636:	4629      	mov	r1, r5
 8085638:	4620      	mov	r0, r4
 808563a:	f002 f87d 	bl	8087738 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 808563e:	a801      	add	r0, sp, #4
 8085640:	f7fa fef6 	bl	8080430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 8085644:	4620      	mov	r0, r4
 8085646:	b003      	add	sp, #12
 8085648:	bd30      	pop	{r4, r5, pc}

0808564a <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 808564a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808564c:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 808564e:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8085650:	f851 3b04 	ldr.w	r3, [r1], #4
 8085654:	a801      	add	r0, sp, #4
 8085656:	9300      	str	r3, [sp, #0]
 8085658:	f7ff ffc8 	bl	80855ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 808565c:	466a      	mov	r2, sp
 808565e:	4629      	mov	r1, r5
 8085660:	4620      	mov	r0, r4
 8085662:	f002 f845 	bl	80876f0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 8085666:	a801      	add	r0, sp, #4
 8085668:	f7fa fee2 	bl	8080430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 808566c:	4620      	mov	r0, r4
 808566e:	b003      	add	sp, #12
 8085670:	bd30      	pop	{r4, r5, pc}
	...

08085674 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 8085674:	b570      	push	{r4, r5, r6, lr}
 8085676:	b08a      	sub	sp, #40	; 0x28
 8085678:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 808567a:	4601      	mov	r1, r0
 808567c:	a804      	add	r0, sp, #16
 808567e:	f7ff ffd0 	bl	8085622 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 8085682:	4e14      	ldr	r6, [pc, #80]	; (80856d4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 8085684:	a804      	add	r0, sp, #16
 8085686:	f002 f86f 	bl	8087768 <_ZN5spark18JSONObjectIterator4nextEv>
 808568a:	b1e8      	cbz	r0, 80856c8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 808568c:	4668      	mov	r0, sp
 808568e:	a904      	add	r1, sp, #16
 8085690:	f7ff ffdb 	bl	808564a <_ZNK5spark18JSONObjectIterator4nameEv>
 8085694:	4631      	mov	r1, r6
 8085696:	9802      	ldr	r0, [sp, #8]
 8085698:	f7ff fe5a 	bl	8085350 <_ZNK5spark10JSONStringeqEPKc.isra.0>
 808569c:	4604      	mov	r4, r0
 808569e:	b110      	cbz	r0, 80856a6 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 80856a0:	1e2c      	subs	r4, r5, #0
 80856a2:	bf18      	it	ne
 80856a4:	2401      	movne	r4, #1
 80856a6:	a801      	add	r0, sp, #4
 80856a8:	f7fa fec2 	bl	8080430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80856ac:	2c00      	cmp	r4, #0
 80856ae:	d0e9      	beq.n	8085684 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 80856b0:	4668      	mov	r0, sp
 80856b2:	a904      	add	r1, sp, #16
 80856b4:	f7ff ffa1 	bl	80855fa <_ZNK5spark18JSONObjectIterator5valueEv>
 80856b8:	4668      	mov	r0, sp
 80856ba:	f001 fff8 	bl	80876ae <_ZNK5spark9JSONValue5toIntEv>
 80856be:	6028      	str	r0, [r5, #0]
 80856c0:	a801      	add	r0, sp, #4
 80856c2:	f7fa feb5 	bl	8080430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80856c6:	e7dd      	b.n	8085684 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 80856c8:	a805      	add	r0, sp, #20
 80856ca:	f7fa feb1 	bl	8080430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80856ce:	b00a      	add	sp, #40	; 0x28
 80856d0:	bd70      	pop	{r4, r5, r6, pc}
 80856d2:	bf00      	nop
 80856d4:	08089cdb 	.word	0x08089cdb

080856d8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 80856d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80856da:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 80856dc:	4919      	ldr	r1, [pc, #100]	; (8085744 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x6c>)
 80856de:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 80856e0:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 80856e2:	f003 fc90 	bl	8089006 <strcmp>
 80856e6:	b948      	cbnz	r0, 80856fc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
 80856e8:	f001 fc3e 	bl	8086f68 <_Z16_fetch_usbserialv>
 80856ec:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80856f0:	f001 fc2a 	bl	8086f48 <_ZN9USBSerial5beginEl>
        return &Serial;
 80856f4:	f001 fc38 	bl	8086f68 <_Z16_fetch_usbserialv>
}
 80856f8:	b003      	add	sp, #12
 80856fa:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "USBSerial1") == 0) {
 80856fc:	4620      	mov	r0, r4
 80856fe:	4912      	ldr	r1, [pc, #72]	; (8085748 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x70>)
 8085700:	f003 fc81 	bl	8089006 <strcmp>
 8085704:	b940      	cbnz	r0, 8085718 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x40>
        USBSerial1.begin();
 8085706:	f001 fc5f 	bl	8086fc8 <_Z17_fetch_usbserial1v>
 808570a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 808570e:	f001 fc1b 	bl	8086f48 <_ZN9USBSerial5beginEl>
        return &USBSerial1;
 8085712:	f001 fc59 	bl	8086fc8 <_Z17_fetch_usbserial1v>
 8085716:	e7ef      	b.n	80856f8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    if (strcmp(type, "Serial1") == 0) {
 8085718:	4620      	mov	r0, r4
 808571a:	490c      	ldr	r1, [pc, #48]	; (808574c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x74>)
 808571c:	f003 fc73 	bl	8089006 <strcmp>
 8085720:	b970      	cbnz	r0, 8085740 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x68>
        int baud = 9600;
 8085722:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 8085726:	a901      	add	r1, sp, #4
 8085728:	4628      	mov	r0, r5
        int baud = 9600;
 808572a:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 808572c:	f7ff ffa2 	bl	8085674 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 8085730:	f001 fda2 	bl	8087278 <_Z22__fetch_global_Serial1v>
 8085734:	9901      	ldr	r1, [sp, #4]
 8085736:	f001 fd99 	bl	808726c <_ZN11USARTSerial5beginEm>
        return &Serial1;
 808573a:	f001 fd9d 	bl	8087278 <_Z22__fetch_global_Serial1v>
 808573e:	e7db      	b.n	80856f8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
 8085740:	2000      	movs	r0, #0
 8085742:	e7d9      	b.n	80856f8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
 8085744:	08089ce0 	.word	0x08089ce0
 8085748:	08089ce7 	.word	0x08089ce7
 808574c:	08089cea 	.word	0x08089cea

08085750 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 8085750:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 8085752:	2614      	movs	r6, #20
 8085754:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 8085758:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 808575a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 808575e:	42ae      	cmp	r6, r5
 8085760:	d005      	beq.n	808576e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 8085762:	f105 0008 	add.w	r0, r5, #8
 8085766:	f7ff fff3 	bl	8085750 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 808576a:	3514      	adds	r5, #20
 808576c:	e7f7      	b.n	808575e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 808576e:	6820      	ldr	r0, [r4, #0]
 8085770:	f7ff f89a 	bl	80848a8 <free>
}
 8085774:	4620      	mov	r0, r4
 8085776:	bd70      	pop	{r4, r5, r6, pc}

08085778 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 8085778:	b570      	push	{r4, r5, r6, lr}
 808577a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 808577c:	e9d0 5300 	ldrd	r5, r3, [r0]
 8085780:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 8085784:	42ae      	cmp	r6, r5
 8085786:	d004      	beq.n	8085792 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 8085788:	4628      	mov	r0, r5
 808578a:	f7ff faad 	bl	8084ce8 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 808578e:	3510      	adds	r5, #16
 8085790:	e7f8      	b.n	8085784 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 8085792:	6820      	ldr	r0, [r4, #0]
 8085794:	f7ff f888 	bl	80848a8 <free>
}
 8085798:	4620      	mov	r0, r4
 808579a:	bd70      	pop	{r4, r5, r6, pc}

0808579c <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 808579c:	b510      	push	{r4, lr}
 808579e:	4604      	mov	r4, r0
 80857a0:	300c      	adds	r0, #12
 80857a2:	f7ff ffd5 	bl	8085750 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80857a6:	4620      	mov	r0, r4
 80857a8:	f7ff ffe6 	bl	8085778 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 80857ac:	4620      	mov	r0, r4
 80857ae:	bd10      	pop	{r4, pc}

080857b0 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 80857b0:	b510      	push	{r4, lr}
 80857b2:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 80857b4:	4b03      	ldr	r3, [pc, #12]	; (80857c4 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 80857b6:	f840 3b04 	str.w	r3, [r0], #4
 80857ba:	f7ff ffef 	bl	808579c <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 80857be:	4620      	mov	r0, r4
 80857c0:	bd10      	pop	{r4, pc}
 80857c2:	bf00      	nop
 80857c4:	08089768 	.word	0x08089768

080857c8 <_ZN5spark16StreamLogHandlerD0Ev>:
 80857c8:	b510      	push	{r4, lr}
 80857ca:	4604      	mov	r4, r0
 80857cc:	f7ff fff0 	bl	80857b0 <_ZN5spark16StreamLogHandlerD1Ev>
 80857d0:	4620      	mov	r0, r4
 80857d2:	2124      	movs	r1, #36	; 0x24
 80857d4:	f002 fa2d 	bl	8087c32 <_ZdlPvj>
 80857d8:	4620      	mov	r0, r4
 80857da:	bd10      	pop	{r4, pc}

080857dc <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 80857dc:	b510      	push	{r4, lr}
 80857de:	4604      	mov	r4, r0
 80857e0:	4b02      	ldr	r3, [pc, #8]	; (80857ec <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 80857e2:	6003      	str	r3, [r0, #0]
 80857e4:	f7ff ffe4 	bl	80857b0 <_ZN5spark16StreamLogHandlerD1Ev>
 80857e8:	4620      	mov	r0, r4
 80857ea:	bd10      	pop	{r4, pc}
 80857ec:	08089d80 	.word	0x08089d80

080857f0 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 80857f0:	b510      	push	{r4, lr}
 80857f2:	4604      	mov	r4, r0
 80857f4:	f7ff fff2 	bl	80857dc <_ZN5spark20JSONStreamLogHandlerD1Ev>
 80857f8:	4620      	mov	r0, r4
 80857fa:	2124      	movs	r1, #36	; 0x24
 80857fc:	f002 fa19 	bl	8087c32 <_ZdlPvj>
 8085800:	4620      	mov	r0, r4
 8085802:	bd10      	pop	{r4, pc}

08085804 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 8085804:	2200      	movs	r2, #0
 8085806:	e9c0 2200 	strd	r2, r2, [r0]
 808580a:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 808580c:	b510      	push	{r4, lr}
      __a = _GLIBCXX_MOVE(__b);
 808580e:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8085810:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 8085812:	6004      	str	r4, [r0, #0]
 8085814:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8085816:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 8085818:	6044      	str	r4, [r0, #4]
 808581a:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808581c:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 808581e:	6084      	str	r4, [r0, #8]
}
 8085820:	bd10      	pop	{r4, pc}

08085822 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
 8085822:	b510      	push	{r4, lr}
 8085824:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 8085826:	6803      	ldr	r3, [r0, #0]
    void unlock() { os_mutex_recursive_unlock(handle_); }
 8085828:	6818      	ldr	r0, [r3, #0]
 808582a:	f7fe fd9d 	bl	8084368 <os_mutex_recursive_unlock>
 808582e:	4620      	mov	r0, r4
 8085830:	bd10      	pop	{r4, pc}
	...

08085834 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 8085834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8085838:	b087      	sub	sp, #28
 808583a:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 808583c:	4b1c      	ldr	r3, [pc, #112]	; (80858b0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 808583e:	4680      	mov	r8, r0
 8085840:	685b      	ldr	r3, [r3, #4]
 8085842:	4689      	mov	r9, r1
 8085844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8085848:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 808584a:	b96b      	cbnz	r3, 8085868 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 808584c:	f7ff fe9c 	bl	8085588 <_ZN5spark10LogManager8instanceEv>
 8085850:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 8085852:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
 8085856:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8085858:	9305      	str	r3, [sp, #20]
 808585a:	f7fe fd7d 	bl	8084358 <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
 808585e:	7b23      	ldrb	r3, [r4, #12]
 8085860:	b12b      	cbz	r3, 808586e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 8085862:	a805      	add	r0, sp, #20
 8085864:	f7ff ffdd 	bl	8085822 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 8085868:	b007      	add	sp, #28
 808586a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 808586e:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 8085870:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 8085874:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 8085876:	e9d4 5300 	ldrd	r5, r3, [r4]
 808587a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 808587e:	45aa      	cmp	sl, r5
 8085880:	d012      	beq.n	80858a8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 8085882:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 8085886:	4631      	mov	r1, r6
 8085888:	1d38      	adds	r0, r7, #4
 808588a:	f7ff fe01 	bl	8085490 <_ZNK5spark6detail9LogFilter5levelEPKc>
 808588e:	4581      	cmp	r9, r0
 8085890:	d3f5      	bcc.n	808587e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 8085892:	9a03      	ldr	r2, [sp, #12]
 8085894:	683b      	ldr	r3, [r7, #0]
 8085896:	9200      	str	r2, [sp, #0]
 8085898:	f8d3 b008 	ldr.w	fp, [r3, #8]
 808589c:	464a      	mov	r2, r9
 808589e:	4633      	mov	r3, r6
 80858a0:	4641      	mov	r1, r8
 80858a2:	4638      	mov	r0, r7
 80858a4:	47d8      	blx	fp
 80858a6:	e7ea      	b.n	808587e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 80858a8:	2300      	movs	r3, #0
 80858aa:	7323      	strb	r3, [r4, #12]
 80858ac:	e7d9      	b.n	8085862 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 80858ae:	bf00      	nop
 80858b0:	e000ed00 	.word	0xe000ed00

080858b4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 80858b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80858b8:	469b      	mov	fp, r3
 80858ba:	4b1a      	ldr	r3, [pc, #104]	; (8085924 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 80858bc:	4680      	mov	r8, r0
 80858be:	685b      	ldr	r3, [r3, #4]
 80858c0:	4689      	mov	r9, r1
 80858c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80858c6:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
 80858c8:	b96b      	cbnz	r3, 80858e6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 80858ca:	f7ff fe5d 	bl	8085588 <_ZN5spark10LogManager8instanceEv>
 80858ce:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 80858d0:	f100 0324 	add.w	r3, r0, #36	; 0x24
 80858d4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80858d6:	9301      	str	r3, [sp, #4]
 80858d8:	f7fe fd3e 	bl	8084358 <os_mutex_recursive_lock>
        if (that->isActive()) {
 80858dc:	7b23      	ldrb	r3, [r4, #12]
 80858de:	b12b      	cbz	r3, 80858ec <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 80858e0:	a801      	add	r0, sp, #4
 80858e2:	f7ff ff9e 	bl	8085822 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 80858e6:	b003      	add	sp, #12
 80858e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 80858ec:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 80858ee:	b2f6      	uxtb	r6, r6
 80858f0:	7323      	strb	r3, [r4, #12]
 80858f2:	e9d4 5300 	ldrd	r5, r3, [r4]
 80858f6:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 80858fa:	4555      	cmp	r5, sl
 80858fc:	d00e      	beq.n	808591c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 80858fe:	f855 7b04 	ldr.w	r7, [r5], #4
 8085902:	4659      	mov	r1, fp
 8085904:	1d38      	adds	r0, r7, #4
 8085906:	f7ff fdc3 	bl	8085490 <_ZNK5spark6detail9LogFilter5levelEPKc>
 808590a:	4286      	cmp	r6, r0
 808590c:	d3f5      	bcc.n	80858fa <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 808590e:	683b      	ldr	r3, [r7, #0]
 8085910:	464a      	mov	r2, r9
 8085912:	4641      	mov	r1, r8
 8085914:	4638      	mov	r0, r7
 8085916:	68db      	ldr	r3, [r3, #12]
 8085918:	4798      	blx	r3
 808591a:	e7ee      	b.n	80858fa <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 808591c:	2300      	movs	r3, #0
 808591e:	7323      	strb	r3, [r4, #12]
 8085920:	e7de      	b.n	80858e0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 8085922:	bf00      	nop
 8085924:	e000ed00 	.word	0xe000ed00

08085928 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 8085928:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 808592c:	4b16      	ldr	r3, [pc, #88]	; (8085988 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 808592e:	4605      	mov	r5, r0
 8085930:	685b      	ldr	r3, [r3, #4]
 8085932:	460f      	mov	r7, r1
 8085934:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (HAL_IsISR()) {
 8085938:	bb1b      	cbnz	r3, 8085982 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 808593a:	f7ff fe25 	bl	8085588 <_ZN5spark10LogManager8instanceEv>
 808593e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 8085940:	f100 0324 	add.w	r3, r0, #36	; 0x24
 8085944:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8085946:	9301      	str	r3, [sp, #4]
 8085948:	f7fe fd06 	bl	8084358 <os_mutex_recursive_lock>
 808594c:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 8085950:	2446      	movs	r4, #70	; 0x46
 8085952:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 8085956:	45b0      	cmp	r8, r6
 8085958:	d109      	bne.n	808596e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 808595a:	a801      	add	r0, sp, #4
 808595c:	f7ff ff61 	bl	8085822 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 8085960:	42a5      	cmp	r5, r4
 8085962:	bfb4      	ite	lt
 8085964:	2000      	movlt	r0, #0
 8085966:	2001      	movge	r0, #1
}
 8085968:	b002      	add	sp, #8
 808596a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 808596e:	f856 0b04 	ldr.w	r0, [r6], #4
 8085972:	4639      	mov	r1, r7
 8085974:	3004      	adds	r0, #4
 8085976:	f7ff fd8b 	bl	8085490 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 808597a:	4284      	cmp	r4, r0
 808597c:	bfa8      	it	ge
 808597e:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 8085980:	e7e9      	b.n	8085956 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 8085982:	2000      	movs	r0, #0
 8085984:	e7f0      	b.n	8085968 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 8085986:	bf00      	nop
 8085988:	e000ed00 	.word	0xe000ed00

0808598c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 808598c:	460b      	mov	r3, r1
 808598e:	b570      	push	{r4, r5, r6, lr}
 8085990:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 8085992:	c805      	ldmia	r0, {r0, r2}
 8085994:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 8085998:	4282      	cmp	r2, r0
 808599a:	d007      	beq.n	80859ac <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x20>
 808599c:	4601      	mov	r1, r0
            if (*p == value) {
 808599e:	681d      	ldr	r5, [r3, #0]
 80859a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80859a4:	42ae      	cmp	r6, r5
 80859a6:	d003      	beq.n	80859b0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
 80859a8:	4608      	mov	r0, r1
 80859aa:	e7f5      	b.n	8085998 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
        return false;
 80859ac:	2000      	movs	r0, #0
}
 80859ae:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
 80859b0:	1a52      	subs	r2, r2, r1
 80859b2:	f003 facb 	bl	8088f4c <memmove>
    --size_;
 80859b6:	6863      	ldr	r3, [r4, #4]
    return true;
 80859b8:	2001      	movs	r0, #1
    --size_;
 80859ba:	3b01      	subs	r3, #1
 80859bc:	6063      	str	r3, [r4, #4]
    return true;
 80859be:	e7f6      	b.n	80859ae <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>

080859c0 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 80859c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80859c2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 80859c4:	f100 0324 	add.w	r3, r0, #36	; 0x24
 80859c8:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 80859ca:	9101      	str	r1, [sp, #4]
 80859cc:	9303      	str	r3, [sp, #12]
 80859ce:	f7fe fcc3 	bl	8084358 <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 80859d2:	4620      	mov	r0, r4
 80859d4:	a901      	add	r1, sp, #4
 80859d6:	f7ff ffd9 	bl	808598c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 80859da:	b118      	cbz	r0, 80859e4 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 80859dc:	6863      	ldr	r3, [r4, #4]
 80859de:	b90b      	cbnz	r3, 80859e4 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 80859e0:	f7ff fdfe 	bl	80855e0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 80859e4:	a803      	add	r0, sp, #12
 80859e6:	f7ff ff1c 	bl	8085822 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 80859ea:	b004      	add	sp, #16
 80859ec:	bd10      	pop	{r4, pc}

080859ee <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 80859ee:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 80859f0:	b570      	push	{r4, r5, r6, lr}
 80859f2:	4604      	mov	r4, r0
 80859f4:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 80859f8:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 80859fc:	42ae      	cmp	r6, r5
 80859fe:	d015      	beq.n	8085a2c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 8085a00:	4620      	mov	r0, r4
 8085a02:	f105 0110 	add.w	r1, r5, #16
 8085a06:	f7ff ffc1 	bl	808598c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 8085a0a:	6863      	ldr	r3, [r4, #4]
 8085a0c:	b90b      	cbnz	r3, 8085a12 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 8085a0e:	f7ff fde7 	bl	80855e0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 8085a12:	69e0      	ldr	r0, [r4, #28]
 8085a14:	6929      	ldr	r1, [r5, #16]
 8085a16:	6803      	ldr	r3, [r0, #0]
 8085a18:	68db      	ldr	r3, [r3, #12]
 8085a1a:	4798      	blx	r3
        if (h.stream) {
 8085a1c:	6969      	ldr	r1, [r5, #20]
 8085a1e:	b119      	cbz	r1, 8085a28 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 8085a20:	6a20      	ldr	r0, [r4, #32]
 8085a22:	6803      	ldr	r3, [r0, #0]
 8085a24:	68db      	ldr	r3, [r3, #12]
 8085a26:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 8085a28:	3518      	adds	r5, #24
 8085a2a:	e7e7      	b.n	80859fc <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 8085a2c:	2618      	movs	r6, #24
 8085a2e:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 8085a32:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 8085a36:	42ae      	cmp	r6, r5
 8085a38:	d004      	beq.n	8085a44 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 8085a3a:	4628      	mov	r0, r5
 8085a3c:	f7ff f954 	bl	8084ce8 <_ZN6StringD1Ev>
 8085a40:	3518      	adds	r5, #24
 8085a42:	e7f8      	b.n	8085a36 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 8085a44:	2300      	movs	r3, #0
 8085a46:	6163      	str	r3, [r4, #20]
}
 8085a48:	bd70      	pop	{r4, r5, r6, pc}

08085a4a <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 8085a4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8085a4c:	4604      	mov	r4, r0
    resetSystemCallbacks();
 8085a4e:	f7ff fdc7 	bl	80855e0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 8085a52:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8085a56:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8085a58:	9301      	str	r3, [sp, #4]
 8085a5a:	f7fe fc7d 	bl	8084358 <os_mutex_recursive_lock>
         destroyFactoryHandlers();
 8085a5e:	4620      	mov	r0, r4
 8085a60:	f7ff ffc5 	bl	80859ee <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 8085a64:	a801      	add	r0, sp, #4
 8085a66:	f7ff fedc 	bl	8085822 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 8085a6a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8085a6c:	b108      	cbz	r0, 8085a72 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 8085a6e:	f7fe fc6b 	bl	8084348 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 8085a72:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 8085a76:	2618      	movs	r6, #24
 8085a78:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 8085a7c:	42ae      	cmp	r6, r5
 8085a7e:	d004      	beq.n	8085a8a <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 8085a80:	4628      	mov	r0, r5
 8085a82:	f7ff f931 	bl	8084ce8 <_ZN6StringD1Ev>
 8085a86:	3518      	adds	r5, #24
 8085a88:	e7f8      	b.n	8085a7c <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 8085a8a:	6920      	ldr	r0, [r4, #16]
 8085a8c:	f7fe ff0c 	bl	80848a8 <free>
 8085a90:	6820      	ldr	r0, [r4, #0]
 8085a92:	f7fe ff09 	bl	80848a8 <free>
}
 8085a96:	4620      	mov	r0, r4
 8085a98:	b002      	add	sp, #8
 8085a9a:	bd70      	pop	{r4, r5, r6, pc}

08085a9c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 8085a9c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 8085a9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8085aa0:	4606      	mov	r6, r0
 8085aa2:	460c      	mov	r4, r1
 8085aa4:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
 8085aa6:	d927      	bls.n	8085af8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
 8085aa8:	4290      	cmp	r0, r2
 8085aaa:	d226      	bcs.n	8085afa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
        capacity_(0) {
 8085aac:	2600      	movs	r6, #0
            --end;
 8085aae:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
 8085ab2:	1a6c      	subs	r4, r5, r1
 8085ab4:	f1a1 0714 	sub.w	r7, r1, #20
 8085ab8:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
 8085aba:	42af      	cmp	r7, r5
 8085abc:	d03d      	beq.n	8085b3a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
 8085abe:	b1a4      	cbz	r4, 8085aea <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
 8085ac0:	682b      	ldr	r3, [r5, #0]
 8085ac2:	6023      	str	r3, [r4, #0]
 8085ac4:	88ab      	ldrh	r3, [r5, #4]
 8085ac6:	80a3      	strh	r3, [r4, #4]
 8085ac8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
        capacity_(0) {
 8085acc:	e9c4 6602 	strd	r6, r6, [r4, #8]
 8085ad0:	6126      	str	r6, [r4, #16]
 8085ad2:	80e3      	strh	r3, [r4, #6]
 8085ad4:	68ab      	ldr	r3, [r5, #8]
 8085ad6:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8085ad8:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8085ada:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 8085adc:	68ea      	ldr	r2, [r5, #12]
 8085ade:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8085ae0:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8085ae2:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 8085ae4:	692a      	ldr	r2, [r5, #16]
 8085ae6:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 8085ae8:	612b      	str	r3, [r5, #16]
 8085aea:	f105 0008 	add.w	r0, r5, #8
 8085aee:	f7ff fe2f 	bl	8085750 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 8085af2:	3d14      	subs	r5, #20
 8085af4:	3c14      	subs	r4, #20
 8085af6:	e7e0      	b.n	8085aba <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
 8085af8:	d01f      	beq.n	8085b3a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
 8085afa:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
 8085afc:	42ac      	cmp	r4, r5
 8085afe:	d01c      	beq.n	8085b3a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
 8085b00:	b1a6      	cbz	r6, 8085b2c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
 8085b02:	6823      	ldr	r3, [r4, #0]
 8085b04:	6033      	str	r3, [r6, #0]
 8085b06:	88a3      	ldrh	r3, [r4, #4]
 8085b08:	80b3      	strh	r3, [r6, #4]
 8085b0a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
        capacity_(0) {
 8085b0e:	e9c6 7702 	strd	r7, r7, [r6, #8]
 8085b12:	6137      	str	r7, [r6, #16]
 8085b14:	80f3      	strh	r3, [r6, #6]
      __a = _GLIBCXX_MOVE(__b);
 8085b16:	68a3      	ldr	r3, [r4, #8]
 8085b18:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8085b1a:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8085b1c:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
 8085b1e:	68e2      	ldr	r2, [r4, #12]
 8085b20:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8085b22:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8085b24:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
 8085b26:	6922      	ldr	r2, [r4, #16]
 8085b28:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 8085b2a:	6123      	str	r3, [r4, #16]
 8085b2c:	f104 0008 	add.w	r0, r4, #8
 8085b30:	f7ff fe0e 	bl	8085750 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 8085b34:	3414      	adds	r4, #20
 8085b36:	3614      	adds	r6, #20
 8085b38:	e7e0      	b.n	8085afc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
 8085b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08085b3c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 8085b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 8085b3e:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 8085b42:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 8085b44:	4604      	mov	r4, r0
 8085b46:	460e      	mov	r6, r1
 8085b48:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 8085b4a:	db0d      	blt.n	8085b68 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
 8085b4c:	3501      	adds	r5, #1
        if (n > 0) {
 8085b4e:	2d00      	cmp	r5, #0
 8085b50:	6800      	ldr	r0, [r0, #0]
 8085b52:	dd04      	ble.n	8085b5e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
 8085b54:	00a9      	lsls	r1, r5, #2
 8085b56:	f7fe feaf 	bl	80848b8 <realloc>
            if (!d) {
 8085b5a:	b918      	cbnz	r0, 8085b64 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
 8085b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 8085b5e:	f7fe fea3 	bl	80848a8 <free>
        T* d = nullptr;
 8085b62:	2000      	movs	r0, #0
        data_ = d;
 8085b64:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 8085b66:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
 8085b68:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
 8085b6a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 8085b6c:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
 8085b70:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 8085b72:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
 8085b76:	1d08      	adds	r0, r1, #4
 8085b78:	f003 f9e8 	bl	8088f4c <memmove>
    new(p) T(std::move(value));
 8085b7c:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
 8085b80:	6863      	ldr	r3, [r4, #4]
    return true;
 8085b82:	2001      	movs	r0, #1
    ++size_;
 8085b84:	3301      	adds	r3, #1
 8085b86:	6063      	str	r3, [r4, #4]
    return true;
 8085b88:	e7e8      	b.n	8085b5c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

08085b8a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 8085b8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8085b8c:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 8085b8e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
 8085b92:	6a40      	ldr	r0, [r0, #36]	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
 8085b94:	460d      	mov	r5, r1
 8085b96:	9301      	str	r3, [sp, #4]
 8085b98:	f7fe fbde 	bl	8084358 <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
 8085b9c:	e9d4 3100 	ldrd	r3, r1, [r4]
 8085ba0:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
 8085ba4:	4283      	cmp	r3, r0
 8085ba6:	461a      	mov	r2, r3
 8085ba8:	d00a      	beq.n	8085bc0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 8085baa:	6812      	ldr	r2, [r2, #0]
 8085bac:	3304      	adds	r3, #4
 8085bae:	42aa      	cmp	r2, r5
 8085bb0:	d1f8      	bne.n	8085ba4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
 8085bb2:	a801      	add	r0, sp, #4
 8085bb4:	f7ff fe35 	bl	8085822 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
 8085bb8:	2500      	movs	r5, #0
}
 8085bba:	4628      	mov	r0, r5
 8085bbc:	b003      	add	sp, #12
 8085bbe:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
 8085bc0:	462a      	mov	r2, r5
 8085bc2:	4620      	mov	r0, r4
 8085bc4:	f7ff ffba 	bl	8085b3c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 8085bc8:	4605      	mov	r5, r0
 8085bca:	2800      	cmp	r0, #0
 8085bcc:	d0f1      	beq.n	8085bb2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 8085bce:	6863      	ldr	r3, [r4, #4]
 8085bd0:	2b01      	cmp	r3, #1
 8085bd2:	d101      	bne.n	8085bd8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 8085bd4:	f7ff fcf8 	bl	80855c8 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 8085bd8:	a801      	add	r0, sp, #4
 8085bda:	f7ff fe22 	bl	8085822 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 8085bde:	e7ec      	b.n	8085bba <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

08085be0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 8085be0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 8085be2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8085be4:	4604      	mov	r4, r0
 8085be6:	460d      	mov	r5, r1
 8085be8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 8085bea:	d914      	bls.n	8085c16 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 8085bec:	4290      	cmp	r0, r2
 8085bee:	d213      	bcs.n	8085c18 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 8085bf0:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 8085bf4:	1a75      	subs	r5, r6, r1
 8085bf6:	f1a1 0710 	sub.w	r7, r1, #16
 8085bfa:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 8085bfc:	42b7      	cmp	r7, r6
 8085bfe:	d018      	beq.n	8085c32 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 8085c00:	b11c      	cbz	r4, 8085c0a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 8085c02:	4631      	mov	r1, r6
 8085c04:	4620      	mov	r0, r4
 8085c06:	f7ff f8e9 	bl	8084ddc <_ZN6StringC1EOS_>
                end->~T();
 8085c0a:	4630      	mov	r0, r6
 8085c0c:	f7ff f86c 	bl	8084ce8 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 8085c10:	3e10      	subs	r6, #16
 8085c12:	3c10      	subs	r4, #16
 8085c14:	e7f2      	b.n	8085bfc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 8085c16:	d00c      	beq.n	8085c32 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 8085c18:	42b5      	cmp	r5, r6
 8085c1a:	d00a      	beq.n	8085c32 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 8085c1c:	b11c      	cbz	r4, 8085c26 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 8085c1e:	4629      	mov	r1, r5
 8085c20:	4620      	mov	r0, r4
 8085c22:	f7ff f8db 	bl	8084ddc <_ZN6StringC1EOS_>
                p->~T();
 8085c26:	4628      	mov	r0, r5
 8085c28:	f7ff f85e 	bl	8084ce8 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 8085c2c:	3510      	adds	r5, #16
 8085c2e:	3410      	adds	r4, #16
 8085c30:	e7f2      	b.n	8085c18 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 8085c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08085c34 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 8085c34:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 8085c36:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 8085c38:	4605      	mov	r5, r0
        if (n > 0) {
 8085c3a:	dd11      	ble.n	8085c60 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 8085c3c:	0130      	lsls	r0, r6, #4
 8085c3e:	f7fe fe2b 	bl	8084898 <malloc>
            if (!d) {
 8085c42:	4604      	mov	r4, r0
 8085c44:	b158      	cbz	r0, 8085c5e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 8085c46:	e9d5 1200 	ldrd	r1, r2, [r5]
 8085c4a:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8085c4e:	f7ff ffc7 	bl	8085be0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 8085c52:	6828      	ldr	r0, [r5, #0]
 8085c54:	f7fe fe28 	bl	80848a8 <free>
        return true;
 8085c58:	2001      	movs	r0, #1
        data_ = d;
 8085c5a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 8085c5c:	60ae      	str	r6, [r5, #8]
    }
 8085c5e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 8085c60:	2400      	movs	r4, #0
 8085c62:	e7f6      	b.n	8085c52 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

08085c64 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 8085c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8085c68:	4691      	mov	r9, r2
        capacity_(0) {
 8085c6a:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 8085c6c:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 8085c6e:	b097      	sub	sp, #92	; 0x5c
 8085c70:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
 8085c72:	f8d9 1004 	ldr.w	r1, [r9, #4]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 8085c76:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 8085c78:	4299      	cmp	r1, r3
        capacity_(0) {
 8085c7a:	e9c0 3300 	strd	r3, r3, [r0]
 8085c7e:	e9c0 3302 	strd	r3, r3, [r0, #8]
 8085c82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8085c86:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 8085c8a:	7602      	strb	r2, [r0, #24]
 8085c8c:	930c      	str	r3, [sp, #48]	; 0x30
    if (n > capacity_ && !realloc(n)) {
 8085c8e:	dc23      	bgt.n	8085cd8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 8085c90:	e9d9 5700 	ldrd	r5, r7, [r9]
 8085c94:	2314      	movs	r3, #20
 8085c96:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 8085c9a:	42af      	cmp	r7, r5
 8085c9c:	d03b      	beq.n	8085d16 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 8085c9e:	4629      	mov	r1, r5
 8085ca0:	a80d      	add	r0, sp, #52	; 0x34
 8085ca2:	f7ff f89b 	bl	8084ddc <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 8085ca6:	a90d      	add	r1, sp, #52	; 0x34
 8085ca8:	a811      	add	r0, sp, #68	; 0x44
 8085caa:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8085cac:	f7ff f896 	bl	8084ddc <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 8085cb0:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
 8085cb4:	4299      	cmp	r1, r3
 8085cb6:	da1b      	bge.n	8085cf0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 8085cb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
 8085cba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
 8085cbc:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 8085cc0:	4631      	mov	r1, r6
 8085cc2:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8085cc6:	f106 0010 	add.w	r0, r6, #16
 8085cca:	f7ff ff89 	bl	8085be0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 8085cce:	b9ee      	cbnz	r6, 8085d0c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 8085cd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8085cd2:	3301      	adds	r3, #1
 8085cd4:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
 8085cd6:	e011      	b.n	8085cfc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 8085cd8:	a80a      	add	r0, sp, #40	; 0x28
 8085cda:	f7ff ffab 	bl	8085c34 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 8085cde:	2800      	cmp	r0, #0
 8085ce0:	d1d6      	bne.n	8085c90 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
 8085ce2:	a80a      	add	r0, sp, #40	; 0x28
 8085ce4:	f7ff fd48 	bl	8085778 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 8085ce8:	4620      	mov	r0, r4
 8085cea:	b017      	add	sp, #92	; 0x5c
 8085cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 8085cf0:	3101      	adds	r1, #1
 8085cf2:	a80a      	add	r0, sp, #40	; 0x28
 8085cf4:	f7ff ff9e 	bl	8085c34 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 8085cf8:	2800      	cmp	r0, #0
 8085cfa:	d1dd      	bne.n	8085cb8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 8085cfc:	a811      	add	r0, sp, #68	; 0x44
 8085cfe:	f7fe fff3 	bl	8084ce8 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 8085d02:	a80d      	add	r0, sp, #52	; 0x34
 8085d04:	f7fe fff0 	bl	8084ce8 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 8085d08:	3514      	adds	r5, #20
 8085d0a:	e7c6      	b.n	8085c9a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 8085d0c:	4630      	mov	r0, r6
 8085d0e:	a911      	add	r1, sp, #68	; 0x44
 8085d10:	f7ff f864 	bl	8084ddc <_ZN6StringC1EOS_>
 8085d14:	e7dc      	b.n	8085cd0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 8085d16:	2600      	movs	r6, #0
 8085d18:	f04f 0a14 	mov.w	sl, #20
        size_t size = 0; // Name length
 8085d1c:	4637      	mov	r7, r6
 8085d1e:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
 8085d22:	960f      	str	r6, [sp, #60]	; 0x3c
    for (int i = 0; i < cats.size(); ++i) {
 8085d24:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8085d28:	429e      	cmp	r6, r3
 8085d2a:	f280 8097 	bge.w	8085e5c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
 8085d2e:	0133      	lsls	r3, r6, #4
 8085d30:	58d3      	ldr	r3, [r2, r3]
 8085d32:	9308      	str	r3, [sp, #32]
        if (!category) {
 8085d34:	b90b      	cbnz	r3, 8085d3a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
 8085d36:	3601      	adds	r6, #1
 8085d38:	e7f4      	b.n	8085d24 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
 8085d3a:	fb0a f306 	mul.w	r3, sl, r6
 8085d3e:	9709      	str	r7, [sp, #36]	; 0x24
 8085d40:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
 8085d42:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
 8085d44:	a909      	add	r1, sp, #36	; 0x24
 8085d46:	a808      	add	r0, sp, #32
 8085d48:	f7ff fadb 	bl	8085302 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 8085d4c:	4683      	mov	fp, r0
 8085d4e:	2800      	cmp	r0, #0
 8085d50:	d0f1      	beq.n	8085d36 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
 8085d52:	4601      	mov	r1, r0
 8085d54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8085d56:	4628      	mov	r0, r5
 8085d58:	f10d 031f 	add.w	r3, sp, #31
            bool found = false;
 8085d5c:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
 8085d60:	f7ff fb58 	bl	8085414 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 8085d64:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
 8085d68:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 8085d6a:	f1b8 0f00 	cmp.w	r8, #0
 8085d6e:	d166      	bne.n	8085e3e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
 8085d70:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8085d74:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
            level(-1) {
 8085d78:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
 8085d7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8085d80:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8085d84:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 8085d88:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 8085d8c:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 8085d90:	4293      	cmp	r3, r2
 8085d92:	db1a      	blt.n	8085dca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
 8085d94:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
 8085d98:	f1bb 0f00 	cmp.w	fp, #0
 8085d9c:	dd4a      	ble.n	8085e34 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
 8085d9e:	fb0a f00b 	mul.w	r0, sl, fp
 8085da2:	f7fe fd79 	bl	8084898 <malloc>
            if (!d) {
 8085da6:	9004      	str	r0, [sp, #16]
 8085da8:	2800      	cmp	r0, #0
 8085daa:	d045      	beq.n	8085e38 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
 8085dac:	e9d5 1200 	ldrd	r1, r2, [r5]
 8085db0:	fb0a 1202 	mla	r2, sl, r2, r1
 8085db4:	f7ff fe72 	bl	8085a9c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
 8085db8:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
 8085dba:	6828      	ldr	r0, [r5, #0]
 8085dbc:	9304      	str	r3, [sp, #16]
 8085dbe:	f7fe fd73 	bl	80848a8 <free>
        data_ = d;
 8085dc2:	9b04      	ldr	r3, [sp, #16]
        capacity_ = n;
 8085dc4:	f8c5 b008 	str.w	fp, [r5, #8]
        data_ = d;
 8085dc8:	602b      	str	r3, [r5, #0]
    T* const p = data_ + i;
 8085dca:	9b01      	ldr	r3, [sp, #4]
 8085dcc:	f8d5 b000 	ldr.w	fp, [r5]
 8085dd0:	fb0a f303 	mul.w	r3, sl, r3
    move(p + 1, p, data_ + size_);
 8085dd4:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
 8085dd6:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
 8085dda:	f101 0014 	add.w	r0, r1, #20
 8085dde:	fb0a b202 	mla	r2, sl, r2, fp
 8085de2:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
 8085de4:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
 8085de6:	f7ff fe59 	bl	8085a9c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 8085dea:	9904      	ldr	r1, [sp, #16]
 8085dec:	b1a9      	cbz	r1, 8085e1a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
 8085dee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8085df0:	9b05      	ldr	r3, [sp, #20]
 8085df2:	f84b 2003 	str.w	r2, [fp, r3]
 8085df6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8085dfa:	808b      	strh	r3, [r1, #4]
 8085dfc:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
        capacity_(0) {
 8085e00:	e9c1 7702 	strd	r7, r7, [r1, #8]
 8085e04:	610f      	str	r7, [r1, #16]
 8085e06:	80cb      	strh	r3, [r1, #6]
      __a = _GLIBCXX_MOVE(__b);
 8085e08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8085e0a:	608b      	str	r3, [r1, #8]
 8085e0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
 8085e0e:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
 8085e10:	60cb      	str	r3, [r1, #12]
 8085e12:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
 8085e14:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
 8085e16:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 8085e18:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
 8085e1a:	686b      	ldr	r3, [r5, #4]
 8085e1c:	3301      	adds	r3, #1
 8085e1e:	606b      	str	r3, [r5, #4]
 8085e20:	a813      	add	r0, sp, #76	; 0x4c
 8085e22:	f7ff fc95 	bl	8085750 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 8085e26:	f1b8 0f00 	cmp.w	r8, #0
 8085e2a:	d008      	beq.n	8085e3e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
 8085e2c:	a80d      	add	r0, sp, #52	; 0x34
 8085e2e:	f7ff fc8f 	bl	8085750 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 8085e32:	e756      	b.n	8085ce2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 8085e34:	4643      	mov	r3, r8
 8085e36:	e7c0      	b.n	8085dba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 8085e38:	f04f 0801 	mov.w	r8, #1
 8085e3c:	e7f0      	b.n	8085e20 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
 8085e3e:	9b01      	ldr	r3, [sp, #4]
 8085e40:	682d      	ldr	r5, [r5, #0]
 8085e42:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
 8085e46:	9b08      	ldr	r3, [sp, #32]
 8085e48:	781b      	ldrb	r3, [r3, #0]
 8085e4a:	b92b      	cbnz	r3, 8085e58 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
 8085e4c:	f8d9 3000 	ldr.w	r3, [r9]
 8085e50:	9a02      	ldr	r2, [sp, #8]
 8085e52:	4413      	add	r3, r2
 8085e54:	7c1b      	ldrb	r3, [r3, #16]
 8085e56:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 8085e58:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 8085e5a:	e773      	b.n	8085d44 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8085e5c:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 8085e5e:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8085e60:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 8085e62:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8085e64:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8085e66:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
 8085e68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 8085e6a:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8085e6c:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 8085e6e:	60a2      	str	r2, [r4, #8]
 8085e70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 8085e72:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8085e74:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 8085e76:	60e2      	str	r2, [r4, #12]
 8085e78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
 8085e7a:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8085e7c:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 8085e7e:	6122      	str	r2, [r4, #16]
 8085e80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
 8085e82:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
 8085e84:	9b03      	ldr	r3, [sp, #12]
 8085e86:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
 8085e88:	6162      	str	r2, [r4, #20]
 8085e8a:	7623      	strb	r3, [r4, #24]
 8085e8c:	e7ce      	b.n	8085e2c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>
	...

08085e90 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
 8085e90:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
 8085e92:	4605      	mov	r5, r0
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
 8085e94:	460e      	mov	r6, r1
 8085e96:	4604      	mov	r4, r0
        filter_(level, filters) {
 8085e98:	4b08      	ldr	r3, [pc, #32]	; (8085ebc <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
 8085e9a:	4611      	mov	r1, r2
 8085e9c:	f845 3b04 	str.w	r3, [r5], #4
 8085ea0:	a801      	add	r0, sp, #4
 8085ea2:	f7fb fbef 	bl	8081684 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 8085ea6:	4631      	mov	r1, r6
 8085ea8:	aa01      	add	r2, sp, #4
 8085eaa:	4628      	mov	r0, r5
 8085eac:	f7ff feda 	bl	8085c64 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 8085eb0:	a801      	add	r0, sp, #4
 8085eb2:	f7fb f83f 	bl	8080f34 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 8085eb6:	4620      	mov	r0, r4
 8085eb8:	b004      	add	sp, #16
 8085eba:	bd70      	pop	{r4, r5, r6, pc}
 8085ebc:	08089768 	.word	0x08089768

08085ec0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 8085ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8085ec2:	460f      	mov	r7, r1
 8085ec4:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 8085ec6:	4638      	mov	r0, r7
 8085ec8:	4925      	ldr	r1, [pc, #148]	; (8085f60 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
 8085eca:	4616      	mov	r6, r2
 8085ecc:	461d      	mov	r5, r3
 8085ece:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 8085ed0:	f003 f899 	bl	8089006 <strcmp>
 8085ed4:	bb00      	cbnz	r0, 8085f18 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
 8085ed6:	b1e4      	cbz	r4, 8085f12 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 8085ed8:	4629      	mov	r1, r5
 8085eda:	4668      	mov	r0, sp
 8085edc:	f7ff fc92 	bl	8085804 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 8085ee0:	2024      	movs	r0, #36	; 0x24
 8085ee2:	4920      	ldr	r1, [pc, #128]	; (8085f64 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
 8085ee4:	f001 fea7 	bl	8087c36 <_ZnwjRKSt9nothrow_t>
 8085ee8:	4605      	mov	r5, r0
 8085eea:	b170      	cbz	r0, 8085f0a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
 8085eec:	4669      	mov	r1, sp
 8085eee:	a803      	add	r0, sp, #12
 8085ef0:	f7fb fbc8 	bl	8081684 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 8085ef4:	4631      	mov	r1, r6
 8085ef6:	aa03      	add	r2, sp, #12
 8085ef8:	4628      	mov	r0, r5
 8085efa:	f7ff ffc9 	bl	8085e90 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 8085efe:	a803      	add	r0, sp, #12
 8085f00:	f7fb f818 	bl	8080f34 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
 8085f04:	4b18      	ldr	r3, [pc, #96]	; (8085f68 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
 8085f06:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
 8085f08:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 8085f0a:	4668      	mov	r0, sp
 8085f0c:	f7fb f812 	bl	8080f34 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 8085f10:	462c      	mov	r4, r5
}
 8085f12:	4620      	mov	r0, r4
 8085f14:	b007      	add	sp, #28
 8085f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 8085f18:	4638      	mov	r0, r7
 8085f1a:	4914      	ldr	r1, [pc, #80]	; (8085f6c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
 8085f1c:	f003 f873 	bl	8089006 <strcmp>
 8085f20:	b9e0      	cbnz	r0, 8085f5c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
 8085f22:	2c00      	cmp	r4, #0
 8085f24:	d0f5      	beq.n	8085f12 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 8085f26:	4629      	mov	r1, r5
 8085f28:	4668      	mov	r0, sp
 8085f2a:	f7ff fc6b 	bl	8085804 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 8085f2e:	2024      	movs	r0, #36	; 0x24
 8085f30:	490c      	ldr	r1, [pc, #48]	; (8085f64 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
 8085f32:	f001 fe80 	bl	8087c36 <_ZnwjRKSt9nothrow_t>
 8085f36:	4605      	mov	r5, r0
 8085f38:	2800      	cmp	r0, #0
 8085f3a:	d0e6      	beq.n	8085f0a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
 8085f3c:	4669      	mov	r1, sp
 8085f3e:	a803      	add	r0, sp, #12
 8085f40:	f7fb fba0 	bl	8081684 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 8085f44:	4631      	mov	r1, r6
 8085f46:	aa03      	add	r2, sp, #12
 8085f48:	4628      	mov	r0, r5
 8085f4a:	f7ff ffa1 	bl	8085e90 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 8085f4e:	a803      	add	r0, sp, #12
 8085f50:	f7fa fff0 	bl	8080f34 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 8085f54:	4b06      	ldr	r3, [pc, #24]	; (8085f70 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
 8085f56:	622c      	str	r4, [r5, #32]
 8085f58:	602b      	str	r3, [r5, #0]
}
 8085f5a:	e7d6      	b.n	8085f0a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
 8085f5c:	2400      	movs	r4, #0
 8085f5e:	e7d8      	b.n	8085f12 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
 8085f60:	08089cf2 	.word	0x08089cf2
 8085f64:	08089f15 	.word	0x08089f15
 8085f68:	08089d80 	.word	0x08089d80
 8085f6c:	08089cf6 	.word	0x08089cf6
 8085f70:	08089d68 	.word	0x08089d68

08085f74 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 8085f74:	4b01      	ldr	r3, [pc, #4]	; (8085f7c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 8085f76:	4a02      	ldr	r2, [pc, #8]	; (8085f80 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8085f78:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 8085f7a:	4770      	bx	lr
 8085f7c:	200003bc 	.word	0x200003bc
 8085f80:	08089d07 	.word	0x08089d07

08085f84 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 8085f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8085f88:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 8085f8a:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 8085f8e:	4604      	mov	r4, r0
 8085f90:	460e      	mov	r6, r1
 8085f92:	4617      	mov	r7, r2
 8085f94:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 8085f96:	f000 ffe7 	bl	8086f68 <_Z16_fetch_usbserialv>
 8085f9a:	4581      	cmp	r9, r0
 8085f9c:	d04d      	beq.n	808603a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 8085f9e:	792b      	ldrb	r3, [r5, #4]
 8085fa0:	0719      	lsls	r1, r3, #28
 8085fa2:	d504      	bpl.n	8085fae <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 8085fa4:	4620      	mov	r0, r4
 8085fa6:	696a      	ldr	r2, [r5, #20]
 8085fa8:	4954      	ldr	r1, [pc, #336]	; (80860fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 8085faa:	f7ff fa24 	bl	80853f6 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 8085fae:	f1b8 0f00 	cmp.w	r8, #0
 8085fb2:	d00d      	beq.n	8085fd0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 8085fb4:	215b      	movs	r1, #91	; 0x5b
 8085fb6:	4620      	mov	r0, r4
 8085fb8:	f7ff fa11 	bl	80853de <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 8085fbc:	4641      	mov	r1, r8
 8085fbe:	4620      	mov	r0, r4
 8085fc0:	f7ff f9ff 	bl	80853c2 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 8085fc4:	6823      	ldr	r3, [r4, #0]
 8085fc6:	2202      	movs	r2, #2
 8085fc8:	4620      	mov	r0, r4
 8085fca:	68db      	ldr	r3, [r3, #12]
 8085fcc:	494c      	ldr	r1, [pc, #304]	; (8086100 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 8085fce:	4798      	blx	r3
    if (attr.has_file) {
 8085fd0:	792b      	ldrb	r3, [r5, #4]
 8085fd2:	07da      	lsls	r2, r3, #31
 8085fd4:	d524      	bpl.n	8086020 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 8085fd6:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 8085fda:	212f      	movs	r1, #47	; 0x2f
 8085fdc:	4640      	mov	r0, r8
 8085fde:	f003 f86d 	bl	80890bc <strrchr>
    if (s1) {
 8085fe2:	b108      	cbz	r0, 8085fe8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 8085fe4:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 8085fe8:	4641      	mov	r1, r8
 8085fea:	4620      	mov	r0, r4
 8085fec:	f7ff f9e9 	bl	80853c2 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 8085ff0:	792b      	ldrb	r3, [r5, #4]
 8085ff2:	079b      	lsls	r3, r3, #30
 8085ff4:	d508      	bpl.n	8086008 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 8085ff6:	213a      	movs	r1, #58	; 0x3a
 8085ff8:	4620      	mov	r0, r4
 8085ffa:	f7ff f9f0 	bl	80853de <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 8085ffe:	4620      	mov	r0, r4
 8086000:	68ea      	ldr	r2, [r5, #12]
 8086002:	4940      	ldr	r1, [pc, #256]	; (8086104 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 8086004:	f7ff f9f7 	bl	80853f6 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 8086008:	792a      	ldrb	r2, [r5, #4]
 808600a:	6823      	ldr	r3, [r4, #0]
 808600c:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 8086010:	4620      	mov	r0, r4
            write(", ", 2);
 8086012:	f04f 0202 	mov.w	r2, #2
 8086016:	68db      	ldr	r3, [r3, #12]
 8086018:	bf14      	ite	ne
 808601a:	493b      	ldrne	r1, [pc, #236]	; (8086108 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 808601c:	493b      	ldreq	r1, [pc, #236]	; (808610c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 808601e:	4798      	blx	r3
    if (attr.has_function) {
 8086020:	792b      	ldrb	r3, [r5, #4]
 8086022:	0758      	lsls	r0, r3, #29
 8086024:	d51d      	bpl.n	8086062 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 8086026:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 8086028:	460b      	mov	r3, r1
 808602a:	461a      	mov	r2, r3
    for (; *s; ++s) {
 808602c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8086030:	b160      	cbz	r0, 808604c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 8086032:	2820      	cmp	r0, #32
 8086034:	d108      	bne.n	8086048 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 8086036:	4619      	mov	r1, r3
 8086038:	e7f7      	b.n	808602a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 808603a:	4835      	ldr	r0, [pc, #212]	; (8086110 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 808603c:	f001 fa49 	bl	80874d2 <_ZN5spark12NetworkClass9listeningEv>
 8086040:	2800      	cmp	r0, #0
 8086042:	d0ac      	beq.n	8085f9e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 8086044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 8086048:	2828      	cmp	r0, #40	; 0x28
 808604a:	d1ee      	bne.n	808602a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 808604c:	6823      	ldr	r3, [r4, #0]
 808604e:	1a52      	subs	r2, r2, r1
 8086050:	4620      	mov	r0, r4
 8086052:	68db      	ldr	r3, [r3, #12]
 8086054:	4798      	blx	r3
        write("(): ", 4);
 8086056:	6823      	ldr	r3, [r4, #0]
 8086058:	2204      	movs	r2, #4
 808605a:	4620      	mov	r0, r4
 808605c:	68db      	ldr	r3, [r3, #12]
 808605e:	492d      	ldr	r1, [pc, #180]	; (8086114 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 8086060:	4798      	blx	r3
    return log_level_name(level, nullptr);
 8086062:	2100      	movs	r1, #0
 8086064:	4638      	mov	r0, r7
 8086066:	f7fe faef 	bl	8084648 <log_level_name>
 808606a:	4601      	mov	r1, r0
    write(s);
 808606c:	4620      	mov	r0, r4
 808606e:	f7ff f9a8 	bl	80853c2 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 8086072:	6823      	ldr	r3, [r4, #0]
 8086074:	2202      	movs	r2, #2
 8086076:	4620      	mov	r0, r4
 8086078:	68db      	ldr	r3, [r3, #12]
 808607a:	4924      	ldr	r1, [pc, #144]	; (808610c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 808607c:	4798      	blx	r3
    if (msg) {
 808607e:	b11e      	cbz	r6, 8086088 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 8086080:	4631      	mov	r1, r6
 8086082:	4620      	mov	r0, r4
 8086084:	f7ff f99d 	bl	80853c2 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 8086088:	792b      	ldrb	r3, [r5, #4]
 808608a:	f013 0f30 	tst.w	r3, #48	; 0x30
 808608e:	d02c      	beq.n	80860ea <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 8086090:	6823      	ldr	r3, [r4, #0]
 8086092:	4921      	ldr	r1, [pc, #132]	; (8086118 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 8086094:	68db      	ldr	r3, [r3, #12]
 8086096:	2202      	movs	r2, #2
 8086098:	4620      	mov	r0, r4
 808609a:	4798      	blx	r3
        if (attr.has_code) {
 808609c:	792b      	ldrb	r3, [r5, #4]
 808609e:	06d9      	lsls	r1, r3, #27
 80860a0:	d50a      	bpl.n	80860b8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 80860a2:	6823      	ldr	r3, [r4, #0]
 80860a4:	2207      	movs	r2, #7
 80860a6:	4620      	mov	r0, r4
 80860a8:	491c      	ldr	r1, [pc, #112]	; (808611c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 80860aa:	68db      	ldr	r3, [r3, #12]
 80860ac:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 80860ae:	4620      	mov	r0, r4
 80860b0:	69aa      	ldr	r2, [r5, #24]
 80860b2:	491b      	ldr	r1, [pc, #108]	; (8086120 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 80860b4:	f7ff f99f 	bl	80853f6 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 80860b8:	792b      	ldrb	r3, [r5, #4]
 80860ba:	069a      	lsls	r2, r3, #26
 80860bc:	d511      	bpl.n	80860e2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 80860be:	06db      	lsls	r3, r3, #27
 80860c0:	d505      	bpl.n	80860ce <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 80860c2:	6823      	ldr	r3, [r4, #0]
 80860c4:	2202      	movs	r2, #2
 80860c6:	4620      	mov	r0, r4
 80860c8:	68db      	ldr	r3, [r3, #12]
 80860ca:	490f      	ldr	r1, [pc, #60]	; (8086108 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 80860cc:	4798      	blx	r3
            write("details = ", 10);
 80860ce:	6823      	ldr	r3, [r4, #0]
 80860d0:	4620      	mov	r0, r4
 80860d2:	4914      	ldr	r1, [pc, #80]	; (8086124 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 80860d4:	220a      	movs	r2, #10
 80860d6:	68db      	ldr	r3, [r3, #12]
 80860d8:	4798      	blx	r3
            write(attr.details);
 80860da:	4620      	mov	r0, r4
 80860dc:	69e9      	ldr	r1, [r5, #28]
 80860de:	f7ff f970 	bl	80853c2 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 80860e2:	215d      	movs	r1, #93	; 0x5d
 80860e4:	4620      	mov	r0, r4
 80860e6:	f7ff f97a 	bl	80853de <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 80860ea:	6823      	ldr	r3, [r4, #0]
 80860ec:	4620      	mov	r0, r4
}
 80860ee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 80860f2:	2202      	movs	r2, #2
 80860f4:	68db      	ldr	r3, [r3, #12]
 80860f6:	490c      	ldr	r1, [pc, #48]	; (8086128 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 80860f8:	4718      	bx	r3
 80860fa:	bf00      	nop
 80860fc:	08089d0b 	.word	0x08089d0b
 8086100:	08089d12 	.word	0x08089d12
 8086104:	0808999b 	.word	0x0808999b
 8086108:	08089d15 	.word	0x08089d15
 808610c:	08089d1a 	.word	0x08089d1a
 8086110:	20000554 	.word	0x20000554
 8086114:	08089d18 	.word	0x08089d18
 8086118:	08089d1d 	.word	0x08089d1d
 808611c:	08089d20 	.word	0x08089d20
 8086120:	08089d28 	.word	0x08089d28
 8086124:	08089d2b 	.word	0x08089d2b
 8086128:	08089842 	.word	0x08089842

0808612c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 808612c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8086130:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
 8086132:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 8086136:	4605      	mov	r5, r0
 8086138:	460f      	mov	r7, r1
 808613a:	4690      	mov	r8, r2
 808613c:	461e      	mov	r6, r3
 808613e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 8086140:	f000 ff12 	bl	8086f68 <_Z16_fetch_usbserialv>
 8086144:	4581      	cmp	r9, r0
 8086146:	d105      	bne.n	8086154 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 8086148:	4849      	ldr	r0, [pc, #292]	; (8086270 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 808614a:	f001 f9c2 	bl	80874d2 <_ZN5spark12NetworkClass9listeningEv>
 808614e:	2800      	cmp	r0, #0
 8086150:	f040 808a 	bne.w	8086268 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 8086154:	f04f 0900 	mov.w	r9, #0
    JSONStreamWriter json(*this->stream());
 8086158:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 808615a:	4a46      	ldr	r2, [pc, #280]	; (8086274 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 808615c:	a801      	add	r0, sp, #4
 808615e:	9201      	str	r2, [sp, #4]
 8086160:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 8086162:	f88d 9008 	strb.w	r9, [sp, #8]
 8086166:	f001 fb28 	bl	80877ba <_ZN5spark10JSONWriter11beginObjectEv>
 808616a:	4649      	mov	r1, r9
 808616c:	4640      	mov	r0, r8
 808616e:	f7fe fa6b 	bl	8084648 <log_level_name>
 8086172:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 8086174:	4940      	ldr	r1, [pc, #256]	; (8086278 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 8086176:	2201      	movs	r2, #1
 8086178:	a801      	add	r0, sp, #4
 808617a:	f001 fba7 	bl	80878cc <_ZN5spark10JSONWriter4nameEPKcj>
 808617e:	4641      	mov	r1, r8
 8086180:	f7ff f912 	bl	80853a8 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 8086184:	b13f      	cbz	r7, 8086196 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 8086186:	493d      	ldr	r1, [pc, #244]	; (808627c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 8086188:	2201      	movs	r2, #1
 808618a:	a801      	add	r0, sp, #4
 808618c:	f001 fb9e 	bl	80878cc <_ZN5spark10JSONWriter4nameEPKcj>
 8086190:	4639      	mov	r1, r7
 8086192:	f7ff f909 	bl	80853a8 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 8086196:	b13e      	cbz	r6, 80861a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 8086198:	4939      	ldr	r1, [pc, #228]	; (8086280 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 808619a:	2201      	movs	r2, #1
 808619c:	a801      	add	r0, sp, #4
 808619e:	f001 fb95 	bl	80878cc <_ZN5spark10JSONWriter4nameEPKcj>
 80861a2:	4631      	mov	r1, r6
 80861a4:	f7ff f900 	bl	80853a8 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 80861a8:	7923      	ldrb	r3, [r4, #4]
 80861aa:	07df      	lsls	r7, r3, #31
 80861ac:	d50e      	bpl.n	80861cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 80861ae:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 80861b0:	212f      	movs	r1, #47	; 0x2f
 80861b2:	4630      	mov	r0, r6
 80861b4:	f002 ff82 	bl	80890bc <strrchr>
    if (s1) {
 80861b8:	b100      	cbz	r0, 80861bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 80861ba:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 80861bc:	4931      	ldr	r1, [pc, #196]	; (8086284 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 80861be:	2201      	movs	r2, #1
 80861c0:	a801      	add	r0, sp, #4
 80861c2:	f001 fb83 	bl	80878cc <_ZN5spark10JSONWriter4nameEPKcj>
 80861c6:	4631      	mov	r1, r6
 80861c8:	f7ff f8ee 	bl	80853a8 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 80861cc:	7923      	ldrb	r3, [r4, #4]
 80861ce:	079e      	lsls	r6, r3, #30
 80861d0:	d507      	bpl.n	80861e2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 80861d2:	492d      	ldr	r1, [pc, #180]	; (8086288 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 80861d4:	2202      	movs	r2, #2
 80861d6:	a801      	add	r0, sp, #4
 80861d8:	f001 fb78 	bl	80878cc <_ZN5spark10JSONWriter4nameEPKcj>
 80861dc:	68e1      	ldr	r1, [r4, #12]
 80861de:	f001 faf9 	bl	80877d4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 80861e2:	7923      	ldrb	r3, [r4, #4]
 80861e4:	0758      	lsls	r0, r3, #29
 80861e6:	d514      	bpl.n	8086212 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 80861e8:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 80861ea:	4633      	mov	r3, r6
 80861ec:	461f      	mov	r7, r3
    for (; *s; ++s) {
 80861ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80861f2:	b12a      	cbz	r2, 8086200 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 80861f4:	2a20      	cmp	r2, #32
 80861f6:	d101      	bne.n	80861fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 80861f8:	461e      	mov	r6, r3
 80861fa:	e7f7      	b.n	80861ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 80861fc:	2a28      	cmp	r2, #40	; 0x28
 80861fe:	d1f5      	bne.n	80861ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 8086200:	2202      	movs	r2, #2
 8086202:	4922      	ldr	r1, [pc, #136]	; (808628c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 8086204:	a801      	add	r0, sp, #4
 8086206:	f001 fb61 	bl	80878cc <_ZN5spark10JSONWriter4nameEPKcj>
 808620a:	4631      	mov	r1, r6
 808620c:	1bba      	subs	r2, r7, r6
 808620e:	f001 fb6c 	bl	80878ea <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 8086212:	7923      	ldrb	r3, [r4, #4]
 8086214:	0719      	lsls	r1, r3, #28
 8086216:	d507      	bpl.n	8086228 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 8086218:	491d      	ldr	r1, [pc, #116]	; (8086290 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 808621a:	2201      	movs	r2, #1
 808621c:	a801      	add	r0, sp, #4
 808621e:	f001 fb55 	bl	80878cc <_ZN5spark10JSONWriter4nameEPKcj>
 8086222:	6961      	ldr	r1, [r4, #20]
 8086224:	f001 fae8 	bl	80877f8 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 8086228:	7923      	ldrb	r3, [r4, #4]
 808622a:	06da      	lsls	r2, r3, #27
 808622c:	d508      	bpl.n	8086240 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 808622e:	2204      	movs	r2, #4
 8086230:	4918      	ldr	r1, [pc, #96]	; (8086294 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 8086232:	eb0d 0002 	add.w	r0, sp, r2
 8086236:	f001 fb49 	bl	80878cc <_ZN5spark10JSONWriter4nameEPKcj>
 808623a:	69a1      	ldr	r1, [r4, #24]
 808623c:	f001 faca 	bl	80877d4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 8086240:	7923      	ldrb	r3, [r4, #4]
 8086242:	069b      	lsls	r3, r3, #26
 8086244:	d507      	bpl.n	8086256 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 8086246:	4914      	ldr	r1, [pc, #80]	; (8086298 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 8086248:	2206      	movs	r2, #6
 808624a:	a801      	add	r0, sp, #4
 808624c:	f001 fb3e 	bl	80878cc <_ZN5spark10JSONWriter4nameEPKcj>
 8086250:	69e1      	ldr	r1, [r4, #28]
 8086252:	f7ff f8a9 	bl	80853a8 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 8086256:	a801      	add	r0, sp, #4
 8086258:	f001 fa99 	bl	808778e <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
 808625c:	6a28      	ldr	r0, [r5, #32]
 808625e:	2202      	movs	r2, #2
 8086260:	6803      	ldr	r3, [r0, #0]
 8086262:	490e      	ldr	r1, [pc, #56]	; (808629c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 8086264:	68db      	ldr	r3, [r3, #12]
 8086266:	4798      	blx	r3
}
 8086268:	b005      	add	sp, #20
 808626a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808626e:	bf00      	nop
 8086270:	20000554 	.word	0x20000554
 8086274:	08089d50 	.word	0x08089d50
 8086278:	08089511 	.word	0x08089511
 808627c:	08089870 	.word	0x08089870
 8086280:	080894b1 	.word	0x080894b1
 8086284:	080899f0 	.word	0x080899f0
 8086288:	08089d36 	.word	0x08089d36
 808628c:	08089d39 	.word	0x08089d39
 8086290:	080898d5 	.word	0x080898d5
 8086294:	08089d3c 	.word	0x08089d3c
 8086298:	08089d41 	.word	0x08089d41
 808629c:	08089842 	.word	0x08089842

080862a0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 80862a0:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80862a2:	2000      	movs	r0, #0
 80862a4:	f7fe fae0 	bl	8084868 <spark_sync_time_pending>
 80862a8:	b128      	cbz	r0, 80862b6 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80862aa:	f7fe fabd 	bl	8084828 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 80862ae:	f080 0001 	eor.w	r0, r0, #1
 80862b2:	b2c0      	uxtb	r0, r0
    }
 80862b4:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80862b6:	2001      	movs	r0, #1
 80862b8:	e7fc      	b.n	80862b4 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

080862bc <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80862bc:	b530      	push	{r4, r5, lr}
 80862be:	4604      	mov	r4, r0
    t += time_zone_cache;
 80862c0:	4818      	ldr	r0, [pc, #96]	; (8086324 <_ZN9TimeClass7timeStrEx+0x68>)
{
 80862c2:	b093      	sub	sp, #76	; 0x4c
    t += time_zone_cache;
 80862c4:	e9d0 1000 	ldrd	r1, r0, [r0]
 80862c8:	1852      	adds	r2, r2, r1
 80862ca:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
 80862ce:	4816      	ldr	r0, [pc, #88]	; (8086328 <_ZN9TimeClass7timeStrEx+0x6c>)
    struct tm calendar_time = {};
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
 80862d0:	2500      	movs	r5, #0
    t += dst_current_cache;
 80862d2:	e9d0 1000 	ldrd	r1, r0, [r0]
 80862d6:	1852      	adds	r2, r2, r1
 80862d8:	eb40 0303 	adc.w	r3, r0, r3
 80862dc:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
 80862e0:	2224      	movs	r2, #36	; 0x24
 80862e2:	2100      	movs	r1, #0
 80862e4:	eb0d 0002 	add.w	r0, sp, r2
 80862e8:	f002 fe4a 	bl	8088f80 <memset>
    localtime_r(&t, &calendar_time);
 80862ec:	a909      	add	r1, sp, #36	; 0x24
 80862ee:	4668      	mov	r0, sp
 80862f0:	f7f9 fe96 	bl	8080020 <localtime_r>
    char ascstr[26] = {};
 80862f4:	2216      	movs	r2, #22
 80862f6:	4629      	mov	r1, r5
 80862f8:	a803      	add	r0, sp, #12
 80862fa:	9502      	str	r5, [sp, #8]
 80862fc:	f002 fe40 	bl	8088f80 <memset>
    asctime_r(&calendar_time, ascstr);
 8086300:	a902      	add	r1, sp, #8
 8086302:	a809      	add	r0, sp, #36	; 0x24
 8086304:	f002 fdd8 	bl	8088eb8 <asctime_r>
    int len = strlen(ascstr);
 8086308:	a802      	add	r0, sp, #8
 808630a:	f002 feaa 	bl	8089062 <strlen>
    ascstr[len-1] = 0; // remove final newline
 808630e:	ab12      	add	r3, sp, #72	; 0x48
 8086310:	4418      	add	r0, r3
 8086312:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
 8086316:	a902      	add	r1, sp, #8
 8086318:	4620      	mov	r0, r4
 808631a:	f7fe fd2f 	bl	8084d7c <_ZN6StringC1EPKc>
}
 808631e:	4620      	mov	r0, r4
 8086320:	b013      	add	sp, #76	; 0x4c
 8086322:	bd30      	pop	{r4, r5, pc}
 8086324:	200003f8 	.word	0x200003f8
 8086328:	200003f0 	.word	0x200003f0

0808632c <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 808632c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8086330:	b0a5      	sub	sp, #148	; 0x94
 8086332:	4607      	mov	r7, r0
 8086334:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 8086336:	a814      	add	r0, sp, #80	; 0x50
{
 8086338:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 808633a:	223f      	movs	r2, #63	; 0x3f
{
 808633c:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 808633e:	f002 feaa 	bl	8089096 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 8086342:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 8086344:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 8086346:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 808634a:	f002 fe8a 	bl	8089062 <strlen>
 808634e:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 8086350:	bb5d      	cbnz	r5, 80863aa <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
 8086352:	492a      	ldr	r1, [pc, #168]	; (80863fc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
 8086354:	a803      	add	r0, sp, #12
 8086356:	f002 fe60 	bl	808901a <strcpy>
{
 808635a:	2500      	movs	r5, #0
 808635c:	ae14      	add	r6, sp, #80	; 0x50
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 808635e:	f104 3bff 	add.w	fp, r4, #4294967295
 8086362:	45ab      	cmp	fp, r5
 8086364:	d936      	bls.n	80863d4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 8086366:	46b1      	mov	r9, r6
 8086368:	f819 3b01 	ldrb.w	r3, [r9], #1
 808636c:	f105 0a01 	add.w	sl, r5, #1
 8086370:	2b25      	cmp	r3, #37	; 0x25
 8086372:	d117      	bne.n	80863a4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
 8086374:	7873      	ldrb	r3, [r6, #1]
 8086376:	2b7a      	cmp	r3, #122	; 0x7a
 8086378:	d114      	bne.n	80863a4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
 808637a:	a803      	add	r0, sp, #12
 808637c:	f002 fe71 	bl	8089062 <strlen>
 8086380:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 8086382:	ab14      	add	r3, sp, #80	; 0x50
 8086384:	1828      	adds	r0, r5, r0
 8086386:	4418      	add	r0, r3
 8086388:	ebab 0205 	sub.w	r2, fp, r5
 808638c:	1cb1      	adds	r1, r6, #2
 808638e:	f002 fdcf 	bl	8088f30 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 8086392:	4622      	mov	r2, r4
 8086394:	a903      	add	r1, sp, #12
 8086396:	4630      	mov	r0, r6
 8086398:	f002 fdca 	bl	8088f30 <memcpy>
            len = strlen(format_str);
 808639c:	a814      	add	r0, sp, #80	; 0x50
 808639e:	f002 fe60 	bl	8089062 <strlen>
 80863a2:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
 80863a4:	464e      	mov	r6, r9
 80863a6:	4655      	mov	r5, sl
 80863a8:	e7d9      	b.n	808635e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 80863aa:	213c      	movs	r1, #60	; 0x3c
 80863ac:	fb95 f3f1 	sdiv	r3, r5, r1
 80863b0:	2b00      	cmp	r3, #0
 80863b2:	bfb8      	it	lt
 80863b4:	425b      	neglt	r3, r3
 80863b6:	fbb3 f2f1 	udiv	r2, r3, r1
 80863ba:	fb01 3312 	mls	r3, r1, r2, r3
 80863be:	9300      	str	r3, [sp, #0]
 80863c0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80863c4:	2110      	movs	r1, #16
 80863c6:	fb95 f3f3 	sdiv	r3, r5, r3
 80863ca:	4a0d      	ldr	r2, [pc, #52]	; (8086400 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
 80863cc:	a803      	add	r0, sp, #12
 80863ce:	f7fe fa83 	bl	80848d8 <snprintf>
 80863d2:	e7c2      	b.n	808635a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
 80863d4:	2100      	movs	r1, #0
 80863d6:	222e      	movs	r2, #46	; 0x2e
 80863d8:	a808      	add	r0, sp, #32
 80863da:	9107      	str	r1, [sp, #28]
 80863dc:	f002 fdd0 	bl	8088f80 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
 80863e0:	4643      	mov	r3, r8
 80863e2:	aa14      	add	r2, sp, #80	; 0x50
 80863e4:	2132      	movs	r1, #50	; 0x32
 80863e6:	a807      	add	r0, sp, #28
 80863e8:	f7f9 fe22 	bl	8080030 <strftime>
    return String(buf);
 80863ec:	4638      	mov	r0, r7
 80863ee:	a907      	add	r1, sp, #28
 80863f0:	f7fe fcc4 	bl	8084d7c <_ZN6StringC1EPKc>
}
 80863f4:	4638      	mov	r0, r7
 80863f6:	b025      	add	sp, #148	; 0x94
 80863f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80863fc:	08089dc0 	.word	0x08089dc0
 8086400:	08089dc2 	.word	0x08089dc2

08086404 <_ZN9TimeClass6formatExPKc>:
{
 8086404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8086406:	b08d      	sub	sp, #52	; 0x34
 8086408:	9d12      	ldr	r5, [sp, #72]	; 0x48
 808640a:	4604      	mov	r4, r0
 808640c:	e9cd 2300 	strd	r2, r3, [sp]
    if (format_spec == nullptr)
 8086410:	b915      	cbnz	r5, 8086418 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
 8086412:	4b19      	ldr	r3, [pc, #100]	; (8086478 <_ZN9TimeClass6formatExPKc+0x74>)
 8086414:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
 8086416:	b12d      	cbz	r5, 8086424 <_ZN9TimeClass6formatExPKc+0x20>
 8086418:	4b18      	ldr	r3, [pc, #96]	; (808647c <_ZN9TimeClass6formatExPKc+0x78>)
 808641a:	4628      	mov	r0, r5
 808641c:	6819      	ldr	r1, [r3, #0]
 808641e:	f002 fdf2 	bl	8089006 <strcmp>
 8086422:	b938      	cbnz	r0, 8086434 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
 8086424:	e9dd 2300 	ldrd	r2, r3, [sp]
 8086428:	4620      	mov	r0, r4
 808642a:	f7ff ff47 	bl	80862bc <_ZN9TimeClass7timeStrEx>
}
 808642e:	4620      	mov	r0, r4
 8086430:	b00d      	add	sp, #52	; 0x34
 8086432:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
 8086434:	9900      	ldr	r1, [sp, #0]
 8086436:	4e12      	ldr	r6, [pc, #72]	; (8086480 <_ZN9TimeClass6formatExPKc+0x7c>)
    t += dst_current_cache;
 8086438:	4f12      	ldr	r7, [pc, #72]	; (8086484 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
 808643a:	e9d6 3200 	ldrd	r3, r2, [r6]
 808643e:	185b      	adds	r3, r3, r1
 8086440:	9901      	ldr	r1, [sp, #4]
 8086442:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
 8086446:	e9d7 0100 	ldrd	r0, r1, [r7]
 808644a:	181b      	adds	r3, r3, r0
 808644c:	eb41 0202 	adc.w	r2, r1, r2
 8086450:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
 8086454:	2100      	movs	r1, #0
 8086456:	2224      	movs	r2, #36	; 0x24
 8086458:	a803      	add	r0, sp, #12
 808645a:	f002 fd91 	bl	8088f80 <memset>
    localtime_r(&t, &calendar_time);
 808645e:	a903      	add	r1, sp, #12
 8086460:	4668      	mov	r0, sp
 8086462:	f7f9 fddd 	bl	8080020 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
 8086466:	6832      	ldr	r2, [r6, #0]
 8086468:	683b      	ldr	r3, [r7, #0]
 808646a:	4620      	mov	r0, r4
 808646c:	4413      	add	r3, r2
 808646e:	a903      	add	r1, sp, #12
 8086470:	462a      	mov	r2, r5
 8086472:	f7ff ff5b 	bl	808632c <_ZN9TimeClass14timeFormatImplEP2tmPKci>
 8086476:	e7da      	b.n	808642e <_ZN9TimeClass6formatExPKc+0x2a>
 8086478:	200003ec 	.word	0x200003ec
 808647c:	200000c0 	.word	0x200000c0
 8086480:	200003f8 	.word	0x200003f8
 8086484:	200003f0 	.word	0x200003f0

08086488 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
 8086488:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 808648a:	2000      	movs	r0, #0
 808648c:	f7fd feec 	bl	8084268 <hal_rtc_time_is_valid>
    if (rtcstate)
 8086490:	4604      	mov	r4, r0
 8086492:	b9a0      	cbnz	r0, 80864be <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 8086494:	f7fe f8e8 	bl	8084668 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 8086498:	2801      	cmp	r0, #1
 808649a:	d110      	bne.n	80864be <_ZN9TimeClass7isValidEv+0x36>
 808649c:	4620      	mov	r0, r4
 808649e:	f7fe f923 	bl	80846e8 <system_thread_get_state>
 80864a2:	b960      	cbnz	r0, 80864be <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 80864a4:	f7ff fefc 	bl	80862a0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80864a8:	b910      	cbnz	r0, 80864b0 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 80864aa:	f7fe f9ad 	bl	8084808 <spark_process>
        while (_while() && !_condition()) {
 80864ae:	e7f9      	b.n	80864a4 <_ZN9TimeClass7isValidEv+0x1c>
 80864b0:	f7ff fef6 	bl	80862a0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 80864b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 80864b8:	2000      	movs	r0, #0
 80864ba:	f7fd bed5 	b.w	8084268 <hal_rtc_time_is_valid>
}
 80864be:	4620      	mov	r0, r4
 80864c0:	bd10      	pop	{r4, pc}

080864c2 <_ZN9TimeClass3nowEv>:
{
 80864c2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 80864c4:	f7ff ffe0 	bl	8086488 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 80864c8:	2210      	movs	r2, #16
 80864ca:	2100      	movs	r1, #0
 80864cc:	4668      	mov	r0, sp
 80864ce:	f002 fd57 	bl	8088f80 <memset>
    hal_rtc_get_time(&tv, nullptr);
 80864d2:	2100      	movs	r1, #0
 80864d4:	4668      	mov	r0, sp
 80864d6:	f7fd fecf 	bl	8084278 <hal_rtc_get_time>
}
 80864da:	9800      	ldr	r0, [sp, #0]
 80864dc:	b005      	add	sp, #20
 80864de:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080864e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80864e4:	4b02      	ldr	r3, [pc, #8]	; (80864f0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80864e6:	681a      	ldr	r2, [r3, #0]
 80864e8:	4b02      	ldr	r3, [pc, #8]	; (80864f4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80864ea:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80864ec:	4770      	bx	lr
 80864ee:	bf00      	nop
 80864f0:	200000c0 	.word	0x200000c0
 80864f4:	200003ec 	.word	0x200003ec

080864f8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80864f8:	2100      	movs	r1, #0
 80864fa:	f7fe b8c5 	b.w	8084688 <system_delay_ms>

080864fe <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80864fe:	b510      	push	{r4, lr}
 8086500:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
 8086502:	f7f9 ff47 	bl	8080394 <_ZNSt14_Function_baseD1Ev>
 8086506:	4620      	mov	r0, r4
 8086508:	bd10      	pop	{r4, pc}

0808650a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 808650a:	b513      	push	{r0, r1, r4, lr}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808650c:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 808650e:	460b      	mov	r3, r1
 8086510:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8086512:	c803      	ldmia	r0, {r0, r1}
 8086514:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8086518:	e893 0003 	ldmia.w	r3, {r0, r1}
 808651c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8086520:	e894 0003 	ldmia.w	r4, {r0, r1}
 8086524:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8086528:	b002      	add	sp, #8
 808652a:	bd10      	pop	{r4, pc}

0808652c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 808652c:	2300      	movs	r3, #0
 808652e:	4803      	ldr	r0, [pc, #12]	; (808653c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8086530:	4a03      	ldr	r2, [pc, #12]	; (8086540 <_GLOBAL__sub_I_RGB+0x14>)
 8086532:	4904      	ldr	r1, [pc, #16]	; (8086544 <_GLOBAL__sub_I_RGB+0x18>)
 8086534:	6083      	str	r3, [r0, #8]
 8086536:	f001 bb77 	b.w	8087c28 <__aeabi_atexit>
 808653a:	bf00      	nop
 808653c:	20000400 	.word	0x20000400
 8086540:	20000130 	.word	0x20000130
 8086544:	080864ff 	.word	0x080864ff

08086548 <_ZN8particle6detail9_getVCellEhh>:
    return i2c_.isEnabled();
}

namespace particle { namespace detail {
    // Converts VCELL_REGISTER reading to Battery Voltage
    float _getVCell(byte MSB, byte LSB) {
 8086548:	b508      	push	{r3, lr}
        // VCELL = 12-bit value, 1.25mV (1V/800) per bit
        float value = (float)((MSB << 4) | (LSB >> 4));
 808654a:	0909      	lsrs	r1, r1, #4
 808654c:	ea41 1000 	orr.w	r0, r1, r0, lsl #4
 8086550:	f002 fa5c 	bl	8088a0c <__aeabi_i2f>
        return value / 800.0;
 8086554:	4901      	ldr	r1, [pc, #4]	; (808655c <_ZN8particle6detail9_getVCellEhh+0x14>)
 8086556:	f002 fb61 	bl	8088c1c <__aeabi_fdiv>
    }
 808655a:	bd08      	pop	{r3, pc}
 808655c:	44480000 	.word	0x44480000

08086560 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
 8086560:	6800      	ldr	r0, [r0, #0]
 8086562:	f000 bf75 	b.w	8087450 <_ZN7TwoWire4lockEv>

08086566 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 8086566:	b510      	push	{r4, lr}
 8086568:	4604      	mov	r4, r0
      lock_(_lock) {
 808656a:	6001      	str	r1, [r0, #0]
 808656c:	7102      	strb	r2, [r0, #4]
    if (lock_) {
 808656e:	b10a      	cbz	r2, 8086574 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 8086570:	f7ff fff6 	bl	8086560 <_ZN9FuelGauge4lockEv>
}
 8086574:	4620      	mov	r0, r4
 8086576:	bd10      	pop	{r4, pc}

08086578 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
 8086578:	b538      	push	{r3, r4, r5, lr}
 808657a:	4604      	mov	r4, r0
 808657c:	460d      	mov	r5, r1
            return &Wire3;
 808657e:	f001 fb2b 	bl	8087bd8 <_Z20__fetch_global_Wire3v>
        : FuelGauge(*fuelWireInstance(), _lock)
 8086582:	462a      	mov	r2, r5
            return &Wire3;
 8086584:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
 8086586:	4620      	mov	r0, r4
 8086588:	f7ff ffed 	bl	8086566 <_ZN9FuelGaugeC1ER7TwoWireb>
}
 808658c:	4620      	mov	r0, r4
 808658e:	bd38      	pop	{r3, r4, r5, pc}

08086590 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
 8086590:	6800      	ldr	r0, [r0, #0]
 8086592:	f000 bf66 	b.w	8087462 <_ZN7TwoWire6unlockEv>

08086596 <_ZN9FuelGaugeD1Ev>:
FuelGauge::~FuelGauge()
 8086596:	b510      	push	{r4, lr}
    if (lock_) {
 8086598:	7903      	ldrb	r3, [r0, #4]
FuelGauge::~FuelGauge()
 808659a:	4604      	mov	r4, r0
    if (lock_) {
 808659c:	b10b      	cbz	r3, 80865a2 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
 808659e:	f7ff fff7 	bl	8086590 <_ZN9FuelGauge6unlockEv>
}
 80865a2:	4620      	mov	r0, r4
 80865a4:	bd10      	pop	{r4, pc}

080865a6 <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
 80865a6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80865aa:	4604      	mov	r4, r0
 80865ac:	460d      	mov	r5, r1
 80865ae:	4617      	mov	r7, r2
 80865b0:	461e      	mov	r6, r3
      { _M_device.lock(); }
 80865b2:	f7ff ffd5 	bl	8086560 <_ZN9FuelGauge4lockEv>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 80865b6:	2336      	movs	r3, #54	; 0x36
 80865b8:	f88d 3000 	strb.w	r3, [sp]
 80865bc:	2300      	movs	r3, #0
 80865be:	f04f 0801 	mov.w	r8, #1
 80865c2:	9301      	str	r3, [sp, #4]
    timeout_ = ms;
 80865c4:	230a      	movs	r3, #10
    i2c_.beginTransmission(config);
 80865c6:	4669      	mov	r1, sp
 80865c8:	6820      	ldr	r0, [r4, #0]
 80865ca:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 80865cc:	f88d 8008 	strb.w	r8, [sp, #8]
 80865d0:	f000 ff1f 	bl	8087412 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
 80865d4:	6820      	ldr	r0, [r4, #0]
 80865d6:	4629      	mov	r1, r5
 80865d8:	6803      	ldr	r3, [r0, #0]
 80865da:	689b      	ldr	r3, [r3, #8]
 80865dc:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
 80865de:	4641      	mov	r1, r8
 80865e0:	6820      	ldr	r0, [r4, #0]
 80865e2:	f000 ff2e 	bl	8087442 <_ZN7TwoWire15endTransmissionEh>
 80865e6:	4605      	mov	r5, r0
 80865e8:	b140      	cbz	r0, 80865fc <_ZN9FuelGauge12readRegisterEhRhS0_+0x56>
 80865ea:	f06f 059f 	mvn.w	r5, #159	; 0x9f
      { _M_device.unlock(); }
 80865ee:	4620      	mov	r0, r4
 80865f0:	f7ff ffce 	bl	8086590 <_ZN9FuelGauge6unlockEv>
}
 80865f4:	4628      	mov	r0, r5
 80865f6:	b004      	add	sp, #16
 80865f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
 80865fc:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
 80865fe:	4669      	mov	r1, sp
 8086600:	6820      	ldr	r0, [r4, #0]
 8086602:	9301      	str	r3, [sp, #4]
 8086604:	f000 fed2 	bl	80873ac <_ZN7TwoWire11requestFromERK16WireTransmission>
 8086608:	2802      	cmp	r0, #2
 808660a:	d1ee      	bne.n	80865ea <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>
    MSB = i2c_.read();
 808660c:	6820      	ldr	r0, [r4, #0]
 808660e:	6803      	ldr	r3, [r0, #0]
 8086610:	695b      	ldr	r3, [r3, #20]
 8086612:	4798      	blx	r3
 8086614:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
 8086616:	6820      	ldr	r0, [r4, #0]
 8086618:	6803      	ldr	r3, [r0, #0]
 808661a:	695b      	ldr	r3, [r3, #20]
 808661c:	4798      	blx	r3
 808661e:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
 8086620:	e7e5      	b.n	80865ee <_ZN9FuelGauge12readRegisterEhRhS0_+0x48>
	...

08086624 <_ZN9FuelGauge8getVCellEv>:
    byte MSB = 0;
 8086624:	2300      	movs	r3, #0
float FuelGauge::getVCell() {
 8086626:	b507      	push	{r0, r1, r2, lr}
    if (readRegister(VCELL_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
 8086628:	2102      	movs	r1, #2
    byte MSB = 0;
 808662a:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
 808662e:	f88d 3007 	strb.w	r3, [sp, #7]
    if (readRegister(VCELL_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
 8086632:	f10d 0206 	add.w	r2, sp, #6
 8086636:	f10d 0307 	add.w	r3, sp, #7
 808663a:	f7ff ffb4 	bl	80865a6 <_ZN9FuelGauge12readRegisterEhRhS0_>
 808663e:	b940      	cbnz	r0, 8086652 <_ZN9FuelGauge8getVCellEv+0x2e>
    return particle::detail::_getVCell(MSB, LSB);
 8086640:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8086644:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
 8086648:	b003      	add	sp, #12
 808664a:	f85d eb04 	ldr.w	lr, [sp], #4
    return particle::detail::_getVCell(MSB, LSB);
 808664e:	f7ff bf7b 	b.w	8086548 <_ZN8particle6detail9_getVCellEhh>
}
 8086652:	4802      	ldr	r0, [pc, #8]	; (808665c <_ZN9FuelGauge8getVCellEv+0x38>)
 8086654:	b003      	add	sp, #12
 8086656:	f85d fb04 	ldr.w	pc, [sp], #4
 808665a:	bf00      	nop
 808665c:	bf800000 	.word	0xbf800000

08086660 <_ZN9FuelGauge6getSoCEv>:
    byte MSB = 0;
 8086660:	2300      	movs	r3, #0
float FuelGauge::getSoC() {
 8086662:	b513      	push	{r0, r1, r4, lr}
    if(readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
 8086664:	2104      	movs	r1, #4
    byte MSB = 0;
 8086666:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
 808666a:	f88d 3007 	strb.w	r3, [sp, #7]
    if(readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
 808666e:	f10d 0206 	add.w	r2, sp, #6
 8086672:	f10d 0307 	add.w	r3, sp, #7
 8086676:	f7ff ff96 	bl	80865a6 <_ZN9FuelGauge12readRegisterEhRhS0_>
 808667a:	b9a0      	cbnz	r0, 80866a6 <_ZN9FuelGauge6getSoCEv+0x46>
        float decimal = LSB / 256.0;
 808667c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8086680:	f001 fd58 	bl	8088134 <__aeabi_i2d>
 8086684:	2200      	movs	r2, #0
 8086686:	4b09      	ldr	r3, [pc, #36]	; (80866ac <_ZN9FuelGauge6getSoCEv+0x4c>)
 8086688:	f001 fdbe 	bl	8088208 <__aeabi_dmul>
 808668c:	f002 f8b4 	bl	80887f8 <__aeabi_d2f>
 8086690:	4604      	mov	r4, r0
        return MSB + decimal;
 8086692:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8086696:	f002 f9b9 	bl	8088a0c <__aeabi_i2f>
 808669a:	4601      	mov	r1, r0
 808669c:	4620      	mov	r0, r4
 808669e:	f002 f901 	bl	80888a4 <__addsf3>
}
 80866a2:	b002      	add	sp, #8
 80866a4:	bd10      	pop	{r4, pc}
        return -1.0f;
 80866a6:	4802      	ldr	r0, [pc, #8]	; (80866b0 <_ZN9FuelGauge6getSoCEv+0x50>)
 80866a8:	e7fb      	b.n	80866a2 <_ZN9FuelGauge6getSoCEv+0x42>
 80866aa:	bf00      	nop
 80866ac:	3f700000 	.word	0x3f700000
 80866b0:	bf800000 	.word	0xbf800000

080866b4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80866b4:	4b01      	ldr	r3, [pc, #4]	; (80866bc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80866b6:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80866b8:	4770      	bx	lr
 80866ba:	bf00      	nop
 80866bc:	200000cc 	.word	0x200000cc

080866c0 <serialEventRun>:
{
 80866c0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80866c2:	4b17      	ldr	r3, [pc, #92]	; (8086720 <serialEventRun+0x60>)
 80866c4:	b143      	cbz	r3, 80866d8 <serialEventRun+0x18>
 80866c6:	f000 fc4f 	bl	8086f68 <_Z16_fetch_usbserialv>
 80866ca:	6803      	ldr	r3, [r0, #0]
 80866cc:	691b      	ldr	r3, [r3, #16]
 80866ce:	4798      	blx	r3
 80866d0:	2800      	cmp	r0, #0
 80866d2:	dd01      	ble.n	80866d8 <serialEventRun+0x18>
        serialEvent();
 80866d4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80866d8:	4b12      	ldr	r3, [pc, #72]	; (8086724 <serialEventRun+0x64>)
 80866da:	b143      	cbz	r3, 80866ee <serialEventRun+0x2e>
 80866dc:	f000 fdcc 	bl	8087278 <_Z22__fetch_global_Serial1v>
 80866e0:	6803      	ldr	r3, [r0, #0]
 80866e2:	691b      	ldr	r3, [r3, #16]
 80866e4:	4798      	blx	r3
 80866e6:	2800      	cmp	r0, #0
 80866e8:	dd01      	ble.n	80866ee <serialEventRun+0x2e>
        serialEvent1();
 80866ea:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80866ee:	4b0e      	ldr	r3, [pc, #56]	; (8086728 <serialEventRun+0x68>)
 80866f0:	b10b      	cbz	r3, 80866f6 <serialEventRun+0x36>
 80866f2:	f3af 8000 	nop.w
    if (serialEventRun4) serialEventRun4();
 80866f6:	4b0d      	ldr	r3, [pc, #52]	; (808672c <serialEventRun+0x6c>)
 80866f8:	b10b      	cbz	r3, 80866fe <serialEventRun+0x3e>
 80866fa:	f3af 8000 	nop.w
    if (serialEventRun5) serialEventRun5();
 80866fe:	4b0c      	ldr	r3, [pc, #48]	; (8086730 <serialEventRun+0x70>)
 8086700:	b10b      	cbz	r3, 8086706 <serialEventRun+0x46>
 8086702:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8086706:	4b0b      	ldr	r3, [pc, #44]	; (8086734 <serialEventRun+0x74>)
 8086708:	b143      	cbz	r3, 808671c <serialEventRun+0x5c>
 808670a:	f000 fc5d 	bl	8086fc8 <_Z17_fetch_usbserial1v>
 808670e:	6803      	ldr	r3, [r0, #0]
 8086710:	691b      	ldr	r3, [r3, #16]
 8086712:	4798      	blx	r3
 8086714:	2800      	cmp	r0, #0
 8086716:	dd01      	ble.n	808671c <serialEventRun+0x5c>
        usbSerialEvent1();
 8086718:	f3af 8000 	nop.w
}
 808671c:	bd08      	pop	{r3, pc}
 808671e:	bf00      	nop
	...

08086738 <_post_loop>:
{
 8086738:	b508      	push	{r3, lr}
	serialEventRun();
 808673a:	f7ff ffc1 	bl	80866c0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 808673e:	f7fd fd8b 	bl	8084258 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8086742:	4b01      	ldr	r3, [pc, #4]	; (8086748 <_post_loop+0x10>)
 8086744:	6018      	str	r0, [r3, #0]
}
 8086746:	bd08      	pop	{r3, pc}
 8086748:	2000055c 	.word	0x2000055c

0808674c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 808674c:	4802      	ldr	r0, [pc, #8]	; (8086758 <_Z33system_initialize_user_backup_ramv+0xc>)
 808674e:	4a03      	ldr	r2, [pc, #12]	; (808675c <_Z33system_initialize_user_backup_ramv+0x10>)
 8086750:	4903      	ldr	r1, [pc, #12]	; (8086760 <_Z33system_initialize_user_backup_ramv+0x14>)
 8086752:	1a12      	subs	r2, r2, r0
 8086754:	f002 bbec 	b.w	8088f30 <memcpy>
 8086758:	40024000 	.word	0x40024000
 808675c:	40024224 	.word	0x40024224
 8086760:	0808a0c0 	.word	0x0808a0c0

08086764 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8086764:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8086766:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8086768:	461a      	mov	r2, r3
 808676a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 808676e:	9300      	str	r3, [sp, #0]
 8086770:	f7fd ffcc 	bl	808470c <system_ctrl_set_result>
}
 8086774:	b003      	add	sp, #12
 8086776:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0808677c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 808677c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 808677e:	8843      	ldrh	r3, [r0, #2]
 8086780:	2b0a      	cmp	r3, #10
 8086782:	d008      	beq.n	8086796 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8086784:	2b50      	cmp	r3, #80	; 0x50
 8086786:	d10b      	bne.n	80867a0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 8086788:	4b09      	ldr	r3, [pc, #36]	; (80867b0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 808678a:	681b      	ldr	r3, [r3, #0]
 808678c:	b14b      	cbz	r3, 80867a2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 808678e:	b003      	add	sp, #12
 8086790:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 8086794:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 8086796:	f7ff ffe5 	bl	8086764 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 808679a:	b003      	add	sp, #12
 808679c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80867a0:	2300      	movs	r3, #0
 80867a2:	461a      	mov	r2, r3
 80867a4:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80867a8:	9300      	str	r3, [sp, #0]
 80867aa:	f7fd ffaf 	bl	808470c <system_ctrl_set_result>
}
 80867ae:	e7f4      	b.n	808679a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80867b0:	20000414 	.word	0x20000414

080867b4 <module_user_init_hook>:
{
 80867b4:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80867b6:	4c12      	ldr	r4, [pc, #72]	; (8086800 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80867b8:	2100      	movs	r1, #0
 80867ba:	4812      	ldr	r0, [pc, #72]	; (8086804 <module_user_init_hook+0x50>)
 80867bc:	f7fe f8b4 	bl	8084928 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80867c0:	4d11      	ldr	r5, [pc, #68]	; (8086808 <module_user_init_hook+0x54>)
 80867c2:	6823      	ldr	r3, [r4, #0]
 80867c4:	42ab      	cmp	r3, r5
 80867c6:	bf0c      	ite	eq
 80867c8:	2201      	moveq	r2, #1
 80867ca:	2200      	movne	r2, #0
 80867cc:	4b0f      	ldr	r3, [pc, #60]	; (808680c <module_user_init_hook+0x58>)
 80867ce:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80867d0:	d002      	beq.n	80867d8 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 80867d2:	f7ff ffbb 	bl	808674c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80867d6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80867d8:	f7fd fd26 	bl	8084228 <HAL_RNG_GetRandomNumber>
 80867dc:	4604      	mov	r4, r0
    srand(seed);
 80867de:	f002 fbd7 	bl	8088f90 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80867e2:	4b0b      	ldr	r3, [pc, #44]	; (8086810 <module_user_init_hook+0x5c>)
 80867e4:	b113      	cbz	r3, 80867ec <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 80867e6:	4620      	mov	r0, r4
 80867e8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80867ec:	2100      	movs	r1, #0
 80867ee:	4808      	ldr	r0, [pc, #32]	; (8086810 <module_user_init_hook+0x5c>)
 80867f0:	f7fe f842 	bl	8084878 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80867f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80867f8:	2100      	movs	r1, #0
 80867fa:	4806      	ldr	r0, [pc, #24]	; (8086814 <module_user_init_hook+0x60>)
 80867fc:	f7fd bf7c 	b.w	80846f8 <system_ctrl_set_app_request_handler>
 8086800:	40024220 	.word	0x40024220
 8086804:	080866b5 	.word	0x080866b5
 8086808:	9a271c1e 	.word	0x9a271c1e
 808680c:	20000410 	.word	0x20000410
 8086810:	00000000 	.word	0x00000000
 8086814:	0808677d 	.word	0x0808677d

08086818 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8086818:	4770      	bx	lr

0808681a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 808681a:	2000      	movs	r0, #0
 808681c:	4770      	bx	lr

0808681e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 808681e:	b510      	push	{r4, lr}
 8086820:	4604      	mov	r4, r0
 8086822:	2110      	movs	r1, #16
 8086824:	f001 fa05 	bl	8087c32 <_ZdlPvj>
 8086828:	4620      	mov	r0, r4
 808682a:	bd10      	pop	{r4, pc}

0808682c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 808682c:	b508      	push	{r3, lr}
      { delete this; }
 808682e:	f7ff fff6 	bl	808681e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8086832:	bd08      	pop	{r3, pc}

08086834 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8086834:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 8086836:	b530      	push	{r4, r5, lr}
        type_(type) {
 8086838:	f64f 749c 	movw	r4, #65436	; 0xff9c
 808683c:	6002      	str	r2, [r0, #0]
 808683e:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 8086840:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8086842:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 8086844:	680c      	ldr	r4, [r1, #0]
 8086846:	8085      	strh	r5, [r0, #4]
 8086848:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 808684a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 808684c:	bd30      	pop	{r4, r5, pc}

0808684e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 808684e:	b510      	push	{r4, lr}
 8086850:	4604      	mov	r4, r0
    free((void*)msg_);
 8086852:	6800      	ldr	r0, [r0, #0]
 8086854:	f7fe f828 	bl	80848a8 <free>
}
 8086858:	4620      	mov	r0, r4
 808685a:	bd10      	pop	{r4, pc}

0808685c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 808685c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 808685e:	68c4      	ldr	r4, [r0, #12]
 8086860:	b1f4      	cbz	r4, 80868a0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 8086862:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 8086864:	2b02      	cmp	r3, #2
 8086866:	d103      	bne.n	8086870 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 8086868:	f104 000c 	add.w	r0, r4, #12
 808686c:	f7ff ffef 	bl	808684e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 8086870:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 8086872:	b135      	cbz	r5, 8086882 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 8086874:	4628      	mov	r0, r5
 8086876:	f7f9 fd8d 	bl	8080394 <_ZNSt14_Function_baseD1Ev>
 808687a:	2110      	movs	r1, #16
 808687c:	4628      	mov	r0, r5
 808687e:	f001 f9d8 	bl	8087c32 <_ZdlPvj>
 8086882:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 8086884:	b135      	cbz	r5, 8086894 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 8086886:	4628      	mov	r0, r5
 8086888:	f7f9 fd84 	bl	8080394 <_ZNSt14_Function_baseD1Ev>
 808688c:	2110      	movs	r1, #16
 808688e:	4628      	mov	r0, r5
 8086890:	f001 f9cf 	bl	8087c32 <_ZdlPvj>
 8086894:	4620      	mov	r0, r4
 8086896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 808689a:	2114      	movs	r1, #20
 808689c:	f001 b9c9 	b.w	8087c32 <_ZdlPvj>
 80868a0:	bd38      	pop	{r3, r4, r5, pc}

080868a2 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80868a2:	b510      	push	{r4, lr}
 80868a4:	b088      	sub	sp, #32
 80868a6:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80868a8:	4668      	mov	r0, sp
 80868aa:	f7fe fa67 	bl	8084d7c <_ZN6StringC1EPKc>
    return (*fn)(p);
 80868ae:	4669      	mov	r1, sp
 80868b0:	a804      	add	r0, sp, #16
 80868b2:	f7fe faad 	bl	8084e10 <_ZN6StringC1ERKS_>
 80868b6:	a804      	add	r0, sp, #16
 80868b8:	47a0      	blx	r4
 80868ba:	4604      	mov	r4, r0
 80868bc:	a804      	add	r0, sp, #16
 80868be:	f7fe fa13 	bl	8084ce8 <_ZN6StringD1Ev>
    String p(param);
 80868c2:	4668      	mov	r0, sp
 80868c4:	f7fe fa10 	bl	8084ce8 <_ZN6StringD1Ev>
}
 80868c8:	4620      	mov	r0, r4
 80868ca:	b008      	add	sp, #32
 80868cc:	bd10      	pop	{r4, pc}

080868ce <_ZN10CloudClass22call_std_user_functionEPvPKcS0_>:

int CloudClass::call_std_user_function(void* data, const char* param, void* reserved)
{
 80868ce:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80868d0:	4604      	mov	r4, r0
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
 80868d2:	4668      	mov	r0, sp
 80868d4:	f7fe fa52 	bl	8084d7c <_ZN6StringC1EPKc>
      if (_M_empty())
 80868d8:	68a3      	ldr	r3, [r4, #8]
 80868da:	b90b      	cbnz	r3, 80868e0 <_ZN10CloudClass22call_std_user_functionEPvPKcS0_+0x12>
	__throw_bad_function_call();
 80868dc:	f001 f9af 	bl	8087c3e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80868e0:	68e3      	ldr	r3, [r4, #12]
 80868e2:	4669      	mov	r1, sp
 80868e4:	4620      	mov	r0, r4
 80868e6:	4798      	blx	r3
 80868e8:	4604      	mov	r4, r0
 80868ea:	4668      	mov	r0, sp
 80868ec:	f7fe f9fc 	bl	8084ce8 <_ZN6StringD1Ev>
}
 80868f0:	4620      	mov	r0, r4
 80868f2:	b004      	add	sp, #16
 80868f4:	bd10      	pop	{r4, pc}

080868f6 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_>:

void CloudClass::call_wiring_event_handler(const void* handler_data, const char *event_name, const char *data)
{
 80868f6:	b507      	push	{r0, r1, r2, lr}
 80868f8:	e9cd 1200 	strd	r1, r2, [sp]
      if (_M_empty())
 80868fc:	6882      	ldr	r2, [r0, #8]
 80868fe:	b90a      	cbnz	r2, 8086904 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_+0xe>
	__throw_bad_function_call();
 8086900:	f001 f99d 	bl	8087c3e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8086904:	4669      	mov	r1, sp
 8086906:	68c3      	ldr	r3, [r0, #12]
 8086908:	aa01      	add	r2, sp, #4
 808690a:	4798      	blx	r3
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}
 808690c:	b003      	add	sp, #12
 808690e:	f85d fb04 	ldr.w	pc, [sp], #4

08086912 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 8086912:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 8086914:	2300      	movs	r3, #0
         size = sizeof(*this);
 8086916:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 8086918:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 808691c:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 808691e:	4669      	mov	r1, sp
 8086920:	461a      	mov	r2, r3
 8086922:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 8086924:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 8086928:	f8ad 4000 	strh.w	r4, [sp]
 808692c:	f7fd ff64 	bl	80847f8 <spark_function>
}
 8086930:	b004      	add	sp, #16
 8086932:	bd10      	pop	{r4, pc}

08086934 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:
    opts.size = sizeof(opts);
 8086934:	2308      	movs	r3, #8

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
 8086936:	b507      	push	{r0, r1, r2, lr}
    opts.size = sizeof(opts);
 8086938:	f8ad 3000 	strh.w	r3, [sp]
    opts.flags = flags_;
 808693c:	6803      	ldr	r3, [r0, #0]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 808693e:	2100      	movs	r1, #0
    opts.flags = flags_;
 8086940:	f88d 3002 	strb.w	r3, [sp, #2]
    opts.graceful = graceful_;
 8086944:	7a03      	ldrb	r3, [r0, #8]
 8086946:	f88d 3003 	strb.w	r3, [sp, #3]
    opts.timeout = timeout_;
 808694a:	6843      	ldr	r3, [r0, #4]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 808694c:	4668      	mov	r0, sp
    opts.timeout = timeout_;
 808694e:	9301      	str	r3, [sp, #4]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 8086950:	f7fd ff9a 	bl	8084888 <spark_cloud_disconnect>
}
 8086954:	b003      	add	sp, #12
 8086956:	f85d fb04 	ldr.w	pc, [sp], #4

0808695a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 808695a:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
 808695c:	460e      	mov	r6, r1
 808695e:	4604      	mov	r4, r0
 8086960:	f856 3b04 	ldr.w	r3, [r6], #4
 8086964:	460d      	mov	r5, r1
 8086966:	a801      	add	r0, sp, #4
 8086968:	4631      	mov	r1, r6
 808696a:	9300      	str	r3, [sp, #0]
 808696c:	f7fe fe3e 	bl	80855ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 8086970:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8086972:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8086974:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 8086976:	2300      	movs	r3, #0
	_M_pi = __tmp;
 8086978:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 808697a:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 808697c:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 808697e:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 8086980:	f7f9 fd56 	bl	8080430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8086984:	4630      	mov	r0, r6
 8086986:	f7f9 fd53 	bl	8080430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 808698a:	4628      	mov	r0, r5
 808698c:	2108      	movs	r1, #8
 808698e:	f001 f950 	bl	8087c32 <_ZdlPvj>
        return p;
    }
 8086992:	4620      	mov	r0, r4
 8086994:	b002      	add	sp, #8
 8086996:	bd70      	pop	{r4, r5, r6, pc}

08086998 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 8086998:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 808699a:	b510      	push	{r4, lr}
      if (_M_empty())
 808699c:	b90a      	cbnz	r2, 80869a2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 808699e:	f001 f94e 	bl	8087c3e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80869a2:	68c3      	ldr	r3, [r0, #12]
    }
 80869a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80869a8:	4718      	bx	r3

080869aa <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80869aa:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80869ac:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80869ae:	f100 0110 	add.w	r1, r0, #16
 80869b2:	f7ff fff1 	bl	8086998 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 80869b6:	bd08      	pop	{r3, pc}

080869b8 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 80869b8:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80869ba:	b510      	push	{r4, lr}
      if (_M_empty())
 80869bc:	b90a      	cbnz	r2, 80869c2 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80869be:	f001 f93e 	bl	8087c3e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80869c2:	68c3      	ldr	r3, [r0, #12]
    }
 80869c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80869c8:	4718      	bx	r3

080869ca <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80869ca:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80869cc:	6800      	ldr	r0, [r0, #0]
 80869ce:	f100 0110 	add.w	r1, r0, #16
 80869d2:	f7ff fff1 	bl	80869b8 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 80869d6:	bd08      	pop	{r3, pc}

080869d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80869d8:	b538      	push	{r3, r4, r5, lr}
 80869da:	2300      	movs	r3, #0
 80869dc:	4604      	mov	r4, r0
 80869de:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80869e0:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 80869e2:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80869e4:	f7f9 fb69 	bl	80800ba <_Znwj>
 80869e8:	b128      	cbz	r0, 80869f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 80869ea:	2301      	movs	r3, #1
 80869ec:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 80869f0:	4b02      	ldr	r3, [pc, #8]	; (80869fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80869f2:	60c5      	str	r5, [r0, #12]
 80869f4:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80869f6:	6020      	str	r0, [r4, #0]
	}
 80869f8:	4620      	mov	r0, r4
 80869fa:	bd38      	pop	{r3, r4, r5, pc}
 80869fc:	08089df4 	.word	0x08089df4

08086a00 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 8086a00:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8086a02:	2300      	movs	r3, #0
 8086a04:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 8086a06:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 8086a08:	4604      	mov	r4, r0
 8086a0a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 8086a0c:	b12b      	cbz	r3, 8086a1a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8086a0e:	2202      	movs	r2, #2
 8086a10:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8086a12:	68eb      	ldr	r3, [r5, #12]
 8086a14:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8086a16:	68ab      	ldr	r3, [r5, #8]
 8086a18:	60a3      	str	r3, [r4, #8]
    }
 8086a1a:	4620      	mov	r0, r4
 8086a1c:	bd38      	pop	{r3, r4, r5, pc}
	...

08086a20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 8086a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8086a22:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8086a24:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 8086a26:	4668      	mov	r0, sp
 8086a28:	f7ff ff04 	bl	8086834 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 8086a2c:	f04f 0302 	mov.w	r3, #2
 8086a30:	e8d4 2f4f 	ldrexb	r2, [r4]
 8086a34:	2a00      	cmp	r2, #0
 8086a36:	d103      	bne.n	8086a40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 8086a38:	e8c4 3f41 	strexb	r1, r3, [r4]
 8086a3c:	2900      	cmp	r1, #0
 8086a3e:	d1f7      	bne.n	8086a30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 8086a40:	d125      	bne.n	8086a8e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 8086a42:	f104 050c 	add.w	r5, r4, #12
 8086a46:	4669      	mov	r1, sp
 8086a48:	4628      	mov	r0, r5
 8086a4a:	f7ff fef3 	bl	8086834 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 8086a4e:	2301      	movs	r3, #1
 8086a50:	f3bf 8f5b 	dmb	ish
 8086a54:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 8086a56:	2000      	movs	r0, #0
 8086a58:	f3bf 8f5b 	dmb	ish
 8086a5c:	f104 0308 	add.w	r3, r4, #8
 8086a60:	e853 6f00 	ldrex	r6, [r3]
 8086a64:	e843 0200 	strex	r2, r0, [r3]
 8086a68:	2a00      	cmp	r2, #0
 8086a6a:	d1f9      	bne.n	8086a60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 8086a6c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 8086a70:	b16e      	cbz	r6, 8086a8e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 8086a72:	f7fd fe29 	bl	80846c8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 8086a76:	b178      	cbz	r0, 8086a98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8086a78:	4629      	mov	r1, r5
 8086a7a:	4630      	mov	r0, r6
 8086a7c:	f7ff ff8c 	bl	8086998 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 8086a80:	4630      	mov	r0, r6
 8086a82:	f7f9 fc87 	bl	8080394 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 8086a86:	2110      	movs	r1, #16
 8086a88:	4630      	mov	r0, r6
 8086a8a:	f001 f8d2 	bl	8087c32 <_ZdlPvj>
        p_->setError(std::move(error));
 8086a8e:	4668      	mov	r0, sp
 8086a90:	f7ff fedd 	bl	808684e <_ZN8particle5ErrorD1Ev>
    }
 8086a94:	b009      	add	sp, #36	; 0x24
 8086a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8086a98:	4631      	mov	r1, r6
 8086a9a:	a802      	add	r0, sp, #8
 8086a9c:	f7ff ffb0 	bl	8086a00 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 8086aa0:	68e0      	ldr	r0, [r4, #12]
 8086aa2:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 8086aa6:	b108      	cbz	r0, 8086aac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 8086aa8:	f002 fac0 	bl	808902c <strdup>
        type_(type) {
 8086aac:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8086aae:	2010      	movs	r0, #16
 8086ab0:	f8ad 501c 	strh.w	r5, [sp, #28]
 8086ab4:	f7f9 fb01 	bl	80800ba <_Znwj>
 8086ab8:	4605      	mov	r5, r0
 8086aba:	b1e8      	cbz	r0, 8086af8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 8086abc:	2700      	movs	r7, #0
 8086abe:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8086ac0:	2018      	movs	r0, #24
 8086ac2:	f7f9 fafa 	bl	80800ba <_Znwj>
 8086ac6:	4604      	mov	r4, r0
 8086ac8:	b188      	cbz	r0, 8086aee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 8086aca:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 8086acc:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 8086ace:	a802      	add	r0, sp, #8
 8086ad0:	f7ff fd1b 	bl	808650a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8086ad4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8086ad6:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8086ad8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8086ada:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8086adc:	9204      	str	r2, [sp, #16]
 8086ade:	68e2      	ldr	r2, [r4, #12]
 8086ae0:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 8086ae2:	60e3      	str	r3, [r4, #12]
 8086ae4:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 8086ae8:	9205      	str	r2, [sp, #20]
 8086aea:	f7ff fea3 	bl	8086834 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 8086aee:	4b08      	ldr	r3, [pc, #32]	; (8086b10 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8086af0:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 8086af2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8086af4:	4b07      	ldr	r3, [pc, #28]	; (8086b14 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 8086af6:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 8086af8:	a806      	add	r0, sp, #24
 8086afa:	f7ff fea8 	bl	808684e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 8086afe:	a802      	add	r0, sp, #8
 8086b00:	f7f9 fc48 	bl	8080394 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8086b04:	2200      	movs	r2, #0
 8086b06:	4629      	mov	r1, r5
 8086b08:	4803      	ldr	r0, [pc, #12]	; (8086b18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 8086b0a:	f7fd fde5 	bl	80846d8 <application_thread_invoke>
 8086b0e:	e7b7      	b.n	8086a80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 8086b10:	080869ab 	.word	0x080869ab
 8086b14:	08086c41 	.word	0x08086c41
 8086b18:	080872fd 	.word	0x080872fd

08086b1c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8086b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8086b20:	b08a      	sub	sp, #40	; 0x28
 8086b22:	4605      	mov	r5, r0
 8086b24:	460c      	mov	r4, r1
 8086b26:	4617      	mov	r7, r2
 8086b28:	4698      	mov	r8, r3
 8086b2a:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8086b2e:	f7fd fe7b 	bl	8084828 <spark_cloud_flag_connected>
 8086b32:	ae07      	add	r6, sp, #28
    if (!connected()) {
 8086b34:	4682      	mov	sl, r0
 8086b36:	bb38      	cbnz	r0, 8086b88 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 8086b38:	f64f 732e 	movw	r3, #65326	; 0xff2e
 8086b3c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8086b3e:	a905      	add	r1, sp, #20
 8086b40:	4630      	mov	r0, r6
 8086b42:	f8ad 3018 	strh.w	r3, [sp, #24]
 8086b46:	f7ff fe75 	bl	8086834 <_ZN8particle5ErrorC1EOS0_>
 8086b4a:	2014      	movs	r0, #20
 8086b4c:	f7f9 fab5 	bl	80800ba <_Znwj>
 8086b50:	4604      	mov	r4, r0
 8086b52:	b148      	cbz	r0, 8086b68 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 8086b54:	2302      	movs	r3, #2
 8086b56:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8086b58:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8086b5a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8086b5e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 8086b60:	4631      	mov	r1, r6
 8086b62:	300c      	adds	r0, #12
 8086b64:	f7ff fe66 	bl	8086834 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8086b68:	4628      	mov	r0, r5
	: __shared_count(__p)
 8086b6a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8086b6c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 8086b70:	f7ff ff32 	bl	80869d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8086b74:	4630      	mov	r0, r6
 8086b76:	f7ff fe6a 	bl	808684e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 8086b7a:	a805      	add	r0, sp, #20
 8086b7c:	f7ff fe67 	bl	808684e <_ZN8particle5ErrorD1Ev>
}
 8086b80:	4628      	mov	r0, r5
 8086b82:	b00a      	add	sp, #40	; 0x28
 8086b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8086b88:	230c      	movs	r3, #12
 8086b8a:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 8086b8e:	2014      	movs	r0, #20
 8086b90:	e9cd aa08 	strd	sl, sl, [sp, #32]
 8086b94:	9307      	str	r3, [sp, #28]
 8086b96:	f7f9 fa90 	bl	80800ba <_Znwj>
 8086b9a:	4601      	mov	r1, r0
 8086b9c:	b128      	cbz	r0, 8086baa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8086b9e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 8086ba2:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8086ba6:	f880 a001 	strb.w	sl, [r0, #1]
 8086baa:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8086bac:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 8086bae:	f7ff ff13 	bl	80869d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 8086bb2:	4b22      	ldr	r3, [pc, #136]	; (8086c3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 8086bb4:	2008      	movs	r0, #8
 8086bb6:	9308      	str	r3, [sp, #32]
 8086bb8:	f7f9 fa7f 	bl	80800ba <_Znwj>
 8086bbc:	4682      	mov	sl, r0
 8086bbe:	b128      	cbz	r0, 8086bcc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8086bc0:	9b03      	ldr	r3, [sp, #12]
 8086bc2:	a904      	add	r1, sp, #16
 8086bc4:	f840 3b04 	str.w	r3, [r0], #4
 8086bc8:	f7fe fd10 	bl	80855ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8086bcc:	4642      	mov	r2, r8
 8086bce:	4639      	mov	r1, r7
 8086bd0:	4620      	mov	r0, r4
 8086bd2:	9600      	str	r6, [sp, #0]
 8086bd4:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 8086bd8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8086bdc:	f7fd fe34 	bl	8084848 <spark_send_event>
 8086be0:	b9b8      	cbnz	r0, 8086c12 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 8086be2:	9b03      	ldr	r3, [sp, #12]
 8086be4:	785b      	ldrb	r3, [r3, #1]
 8086be6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8086bea:	b993      	cbnz	r3, 8086c12 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 8086bec:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 8086bf0:	a905      	add	r1, sp, #20
 8086bf2:	a803      	add	r0, sp, #12
 8086bf4:	9205      	str	r2, [sp, #20]
 8086bf6:	f8ad 3018 	strh.w	r3, [sp, #24]
 8086bfa:	f7ff ff11 	bl	8086a20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8086bfe:	a805      	add	r0, sp, #20
 8086c00:	f7ff fe25 	bl	808684e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 8086c04:	a805      	add	r0, sp, #20
 8086c06:	9909      	ldr	r1, [sp, #36]	; 0x24
 8086c08:	f7ff fea7 	bl	808695a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 8086c0c:	a806      	add	r0, sp, #24
 8086c0e:	f7f9 fc0f 	bl	8080430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8086c12:	9b03      	ldr	r3, [sp, #12]
 8086c14:	a904      	add	r1, sp, #16
 8086c16:	a806      	add	r0, sp, #24
 8086c18:	9305      	str	r3, [sp, #20]
 8086c1a:	f7fe fce7 	bl	80855ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 8086c1e:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8086c20:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8086c22:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 8086c24:	2300      	movs	r3, #0
	_M_pi = __tmp;
 8086c26:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 8086c28:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 8086c2a:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 8086c2c:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 8086c2e:	f7f9 fbff 	bl	8080430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8086c32:	a804      	add	r0, sp, #16
 8086c34:	f7f9 fbfc 	bl	8080430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 8086c38:	e7a2      	b.n	8086b80 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 8086c3a:	bf00      	nop
 8086c3c:	08086d05 	.word	0x08086d05

08086c40 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 8086c40:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8086c42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8086c44:	4605      	mov	r5, r0
	  switch (__op)
 8086c46:	d007      	beq.n	8086c58 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 8086c48:	2a03      	cmp	r2, #3
 8086c4a:	d018      	beq.n	8086c7e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 8086c4c:	2a01      	cmp	r2, #1
 8086c4e:	d101      	bne.n	8086c54 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 8086c50:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8086c52:	6003      	str	r3, [r0, #0]
	}
 8086c54:	2000      	movs	r0, #0
 8086c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 8086c58:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 8086c5a:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 8086c5c:	f7f9 fa2d 	bl	80800ba <_Znwj>
 8086c60:	4604      	mov	r4, r0
 8086c62:	b150      	cbz	r0, 8086c7a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      _Bind(const _Bind&) = default;
 8086c64:	4631      	mov	r1, r6
 8086c66:	f7ff fecb 	bl	8086a00 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 8086c6a:	6930      	ldr	r0, [r6, #16]
 8086c6c:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 8086c70:	b108      	cbz	r0, 8086c76 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 8086c72:	f002 f9db 	bl	808902c <strdup>
        type_(type) {
 8086c76:	6120      	str	r0, [r4, #16]
 8086c78:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 8086c7a:	602c      	str	r4, [r5, #0]
	}
 8086c7c:	e7ea      	b.n	8086c54 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 8086c7e:	6804      	ldr	r4, [r0, #0]
 8086c80:	2c00      	cmp	r4, #0
 8086c82:	d0e7      	beq.n	8086c54 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 8086c84:	f104 0010 	add.w	r0, r4, #16
 8086c88:	f7ff fde1 	bl	808684e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 8086c8c:	4620      	mov	r0, r4
 8086c8e:	f7f9 fb81 	bl	8080394 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 8086c92:	2118      	movs	r1, #24
 8086c94:	4620      	mov	r0, r4
 8086c96:	f000 ffcc 	bl	8087c32 <_ZdlPvj>
 8086c9a:	e7db      	b.n	8086c54 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

08086c9c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 8086c9c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8086c9e:	2300      	movs	r3, #0
 8086ca0:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 8086ca2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 8086ca4:	4604      	mov	r4, r0
 8086ca6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 8086ca8:	b12b      	cbz	r3, 8086cb6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8086caa:	2202      	movs	r2, #2
 8086cac:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8086cae:	68eb      	ldr	r3, [r5, #12]
 8086cb0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8086cb2:	68ab      	ldr	r3, [r5, #8]
 8086cb4:	60a3      	str	r3, [r4, #8]
    }
 8086cb6:	4620      	mov	r0, r4
 8086cb8:	bd38      	pop	{r3, r4, r5, pc}

08086cba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 8086cba:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8086cbc:	b570      	push	{r4, r5, r6, lr}
 8086cbe:	4604      	mov	r4, r0
	  switch (__op)
 8086cc0:	d007      	beq.n	8086cd2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 8086cc2:	2a03      	cmp	r2, #3
 8086cc4:	d012      	beq.n	8086cec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 8086cc6:	2a01      	cmp	r2, #1
 8086cc8:	d101      	bne.n	8086cce <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 8086cca:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8086ccc:	6003      	str	r3, [r0, #0]
	}
 8086cce:	2000      	movs	r0, #0
 8086cd0:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 8086cd2:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 8086cd4:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 8086cd6:	f7f9 f9f0 	bl	80800ba <_Znwj>
 8086cda:	4605      	mov	r5, r0
 8086cdc:	b120      	cbz	r0, 8086ce8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 8086cde:	4631      	mov	r1, r6
 8086ce0:	f7ff ffdc 	bl	8086c9c <_ZNSt8functionIFvRKbEEC1ERKS3_>
 8086ce4:	7c33      	ldrb	r3, [r6, #16]
 8086ce6:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 8086ce8:	6025      	str	r5, [r4, #0]
	}
 8086cea:	e7f0      	b.n	8086cce <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 8086cec:	6804      	ldr	r4, [r0, #0]
 8086cee:	2c00      	cmp	r4, #0
 8086cf0:	d0ed      	beq.n	8086cce <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 8086cf2:	4620      	mov	r0, r4
 8086cf4:	f7f9 fb4e 	bl	8080394 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 8086cf8:	2114      	movs	r1, #20
 8086cfa:	4620      	mov	r0, r4
 8086cfc:	f000 ff99 	bl	8087c32 <_ZdlPvj>
 8086d00:	e7e5      	b.n	8086cce <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

08086d04 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 8086d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8086d06:	4604      	mov	r4, r0
 8086d08:	b089      	sub	sp, #36	; 0x24
 8086d0a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 8086d0c:	a801      	add	r0, sp, #4
 8086d0e:	4611      	mov	r1, r2
 8086d10:	f7ff fe23 	bl	808695a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 8086d14:	b1a4      	cbz	r4, 8086d40 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 8086d16:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 8086d18:	b11d      	cbz	r5, 8086d22 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 8086d1a:	4628      	mov	r0, r5
 8086d1c:	f002 f986 	bl	808902c <strdup>
 8086d20:	4605      	mov	r5, r0
 8086d22:	a801      	add	r0, sp, #4
 8086d24:	a903      	add	r1, sp, #12
        type_(type) {
 8086d26:	9503      	str	r5, [sp, #12]
 8086d28:	f8ad 4010 	strh.w	r4, [sp, #16]
 8086d2c:	f7ff fe78 	bl	8086a20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8086d30:	a803      	add	r0, sp, #12
 8086d32:	f7ff fd8c 	bl	808684e <_ZN8particle5ErrorD1Ev>
 8086d36:	a802      	add	r0, sp, #8
 8086d38:	f7f9 fb7a 	bl	8080430 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 8086d3c:	b009      	add	sp, #36	; 0x24
 8086d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 8086d40:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8086d42:	9d01      	ldr	r5, [sp, #4]
 8086d44:	e8d5 2f4f 	ldrexb	r2, [r5]
 8086d48:	2a00      	cmp	r2, #0
 8086d4a:	d103      	bne.n	8086d54 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 8086d4c:	e8c5 3f41 	strexb	r1, r3, [r5]
 8086d50:	2900      	cmp	r1, #0
 8086d52:	d1f7      	bne.n	8086d44 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 8086d54:	d1ef      	bne.n	8086d36 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 8086d56:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 8086d58:	f3bf 8f5b 	dmb	ish
 8086d5c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 8086d5e:	f3bf 8f5b 	dmb	ish
 8086d62:	1d2b      	adds	r3, r5, #4
 8086d64:	e853 6f00 	ldrex	r6, [r3]
 8086d68:	e843 4200 	strex	r2, r4, [r3]
 8086d6c:	2a00      	cmp	r2, #0
 8086d6e:	d1f9      	bne.n	8086d64 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 8086d70:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 8086d74:	2e00      	cmp	r6, #0
 8086d76:	d0de      	beq.n	8086d36 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 8086d78:	4620      	mov	r0, r4
 8086d7a:	f7fd fca5 	bl	80846c8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 8086d7e:	4607      	mov	r7, r0
 8086d80:	b160      	cbz	r0, 8086d9c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8086d82:	4630      	mov	r0, r6
 8086d84:	f105 010c 	add.w	r1, r5, #12
 8086d88:	f7ff fe16 	bl	80869b8 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 8086d8c:	4630      	mov	r0, r6
 8086d8e:	f7f9 fb01 	bl	8080394 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 8086d92:	2110      	movs	r1, #16
 8086d94:	4630      	mov	r0, r6
 8086d96:	f000 ff4c 	bl	8087c32 <_ZdlPvj>
 8086d9a:	e7cc      	b.n	8086d36 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8086d9c:	4631      	mov	r1, r6
 8086d9e:	a803      	add	r0, sp, #12
 8086da0:	f7ff ff7c 	bl	8086c9c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8086da4:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8086da6:	2010      	movs	r0, #16
 8086da8:	f88d 301c 	strb.w	r3, [sp, #28]
 8086dac:	f7f9 f985 	bl	80800ba <_Znwj>
 8086db0:	4605      	mov	r5, r0
 8086db2:	b1d0      	cbz	r0, 8086dea <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 8086db4:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8086db6:	2014      	movs	r0, #20
 8086db8:	f7f9 f97f 	bl	80800ba <_Znwj>
 8086dbc:	4604      	mov	r4, r0
 8086dbe:	b178      	cbz	r0, 8086de0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 8086dc0:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 8086dc2:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 8086dc4:	a803      	add	r0, sp, #12
 8086dc6:	f7ff fba0 	bl	808650a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8086dca:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8086dcc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8086dce:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8086dd0:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 8086dd2:	9205      	str	r2, [sp, #20]
 8086dd4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8086dd6:	60e3      	str	r3, [r4, #12]
 8086dd8:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 8086ddc:	9206      	str	r2, [sp, #24]
 8086dde:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 8086de0:	4b06      	ldr	r3, [pc, #24]	; (8086dfc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8086de2:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 8086de4:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8086de6:	4b06      	ldr	r3, [pc, #24]	; (8086e00 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 8086de8:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 8086dea:	a803      	add	r0, sp, #12
 8086dec:	f7f9 fad2 	bl	8080394 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8086df0:	2200      	movs	r2, #0
 8086df2:	4629      	mov	r1, r5
 8086df4:	4803      	ldr	r0, [pc, #12]	; (8086e04 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 8086df6:	f7fd fc6f 	bl	80846d8 <application_thread_invoke>
 8086dfa:	e7c7      	b.n	8086d8c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 8086dfc:	080869cb 	.word	0x080869cb
 8086e00:	08086cbb 	.word	0x08086cbb
 8086e04:	080872fd 	.word	0x080872fd

08086e08 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8086e08:	4770      	bx	lr

08086e0a <_ZN9IPAddressD0Ev>:
 8086e0a:	b510      	push	{r4, lr}
 8086e0c:	4604      	mov	r4, r0
 8086e0e:	2108      	movs	r1, #8
 8086e10:	f000 ff0f 	bl	8087c32 <_ZdlPvj>
 8086e14:	4620      	mov	r0, r4
 8086e16:	bd10      	pop	{r4, pc}

08086e18 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8086e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8086e1a:	460e      	mov	r6, r1
 8086e1c:	2400      	movs	r4, #0
 8086e1e:	f100 0708 	add.w	r7, r0, #8
 8086e22:	1d05      	adds	r5, r0, #4
        return printNumber(val, base) + t;
 8086e24:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 8086e28:	220a      	movs	r2, #10
 8086e2a:	4630      	mov	r0, r6
 8086e2c:	f7fe f931 	bl	8085092 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8086e30:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8086e32:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 8086e34:	d101      	bne.n	8086e3a <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 8086e36:	4620      	mov	r0, r4
 8086e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 8086e3a:	2c00      	cmp	r4, #0
 8086e3c:	d0f2      	beq.n	8086e24 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8086e3e:	212e      	movs	r1, #46	; 0x2e
 8086e40:	4630      	mov	r0, r6
 8086e42:	f7fe f90d 	bl	8085060 <_ZN5Print5printEc>
 8086e46:	4404      	add	r4, r0
 8086e48:	e7ec      	b.n	8086e24 <_ZNK9IPAddress7printToER5Print+0xc>
	...

08086e4c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 8086e4c:	4a02      	ldr	r2, [pc, #8]	; (8086e58 <_ZN9IPAddressC1Ev+0xc>)
 8086e4e:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8086e50:	2200      	movs	r2, #0
 8086e52:	6042      	str	r2, [r0, #4]
}
 8086e54:	4770      	bx	lr
 8086e56:	bf00      	nop
 8086e58:	08089e10 	.word	0x08089e10

08086e5c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 8086e5c:	4a02      	ldr	r2, [pc, #8]	; (8086e68 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 8086e5e:	6002      	str	r2, [r0, #0]
    memcpy(&this->address, &address, sizeof(address));
 8086e60:	680a      	ldr	r2, [r1, #0]
 8086e62:	6042      	str	r2, [r0, #4]
}
 8086e64:	4770      	bx	lr
 8086e66:	bf00      	nop
 8086e68:	08089e10 	.word	0x08089e10

08086e6c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 8086e6c:	4a01      	ldr	r2, [pc, #4]	; (8086e74 <_ZN9IPAddressC1Em+0x8>)
    address.ipv4 = ipv4;
 8086e6e:	e9c0 2100 	strd	r2, r1, [r0]
}
 8086e72:	4770      	bx	lr
 8086e74:	08089e10 	.word	0x08089e10

08086e78 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 8086e78:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8086e7a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8086e7e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8086e82:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8086e86:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 8086e8a:	6044      	str	r4, [r0, #4]
}
 8086e8c:	bd10      	pop	{r4, pc}
	...

08086e90 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8086e90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8086e92:	4d04      	ldr	r5, [pc, #16]	; (8086ea4 <_ZN9IPAddressC1Ehhhh+0x14>)
 8086e94:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 8086e96:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8086e9a:	9500      	str	r5, [sp, #0]
 8086e9c:	f7ff ffec 	bl	8086e78 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8086ea0:	b003      	add	sp, #12
 8086ea2:	bd30      	pop	{r4, r5, pc}
 8086ea4:	08089e10 	.word	0x08089e10

08086ea8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8086ea8:	7441      	strb	r1, [r0, #17]
}
 8086eaa:	4770      	bx	lr

08086eac <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 8086eac:	4770      	bx	lr

08086eae <_ZN9USBSerial4readEv>:
{
 8086eae:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 8086eb0:	2100      	movs	r1, #0
 8086eb2:	7c00      	ldrb	r0, [r0, #16]
 8086eb4:	f7fd fba0 	bl	80845f8 <HAL_USB_USART_Receive_Data>
}
 8086eb8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8086ebc:	bd08      	pop	{r3, pc}

08086ebe <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 8086ebe:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 8086ec0:	2101      	movs	r1, #1
 8086ec2:	7c00      	ldrb	r0, [r0, #16]
 8086ec4:	f7fd fb98 	bl	80845f8 <HAL_USB_USART_Receive_Data>
}
 8086ec8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8086ecc:	bd08      	pop	{r3, pc}

08086ece <_ZN9USBSerial17availableForWriteEv>:
{
 8086ece:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 8086ed0:	7c00      	ldrb	r0, [r0, #16]
 8086ed2:	f7fd fb89 	bl	80845e8 <HAL_USB_USART_Available_Data_For_Write>
}
 8086ed6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8086eda:	bd08      	pop	{r3, pc}

08086edc <_ZN9USBSerial9availableEv>:
{
 8086edc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 8086ede:	7c00      	ldrb	r0, [r0, #16]
 8086ee0:	f7fd fb7a 	bl	80845d8 <HAL_USB_USART_Available_Data>
}
 8086ee4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8086ee8:	bd08      	pop	{r3, pc}

08086eea <_ZN9USBSerial5writeEh>:
{
 8086eea:	b538      	push	{r3, r4, r5, lr}
 8086eec:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8086eee:	7c00      	ldrb	r0, [r0, #16]
{
 8086ef0:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8086ef2:	f7fd fb79 	bl	80845e8 <HAL_USB_USART_Available_Data_For_Write>
 8086ef6:	2800      	cmp	r0, #0
 8086ef8:	dc01      	bgt.n	8086efe <_ZN9USBSerial5writeEh+0x14>
 8086efa:	7c60      	ldrb	r0, [r4, #17]
 8086efc:	b128      	cbz	r0, 8086f0a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 8086efe:	4629      	mov	r1, r5
 8086f00:	7c20      	ldrb	r0, [r4, #16]
 8086f02:	f7fd fb81 	bl	8084608 <HAL_USB_USART_Send_Data>
 8086f06:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 8086f0a:	bd38      	pop	{r3, r4, r5, pc}

08086f0c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 8086f0c:	7c00      	ldrb	r0, [r0, #16]
 8086f0e:	f7fd bb83 	b.w	8084618 <HAL_USB_USART_Flush_Data>

08086f12 <_ZN9USBSerialD0Ev>:
 8086f12:	b510      	push	{r4, lr}
 8086f14:	4604      	mov	r4, r0
 8086f16:	2114      	movs	r1, #20
 8086f18:	f000 fe8b 	bl	8087c32 <_ZdlPvj>
 8086f1c:	4620      	mov	r0, r4
 8086f1e:	bd10      	pop	{r4, pc}

08086f20 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8086f20:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8086f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8086f26:	4604      	mov	r4, r0
 8086f28:	4608      	mov	r0, r1
 8086f2a:	2100      	movs	r1, #0
 8086f2c:	e9c4 1301 	strd	r1, r3, [r4, #4]
 8086f30:	4b04      	ldr	r3, [pc, #16]	; (8086f44 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 8086f32:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8086f34:	6023      	str	r3, [r4, #0]
  _blocking = true;
 8086f36:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 8086f38:	4611      	mov	r1, r2
  _blocking = true;
 8086f3a:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 8086f3c:	f7fd fb34 	bl	80845a8 <HAL_USB_USART_Init>
}
 8086f40:	4620      	mov	r0, r4
 8086f42:	bd10      	pop	{r4, pc}
 8086f44:	08089e24 	.word	0x08089e24

08086f48 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 8086f48:	2200      	movs	r2, #0
 8086f4a:	7c00      	ldrb	r0, [r0, #16]
 8086f4c:	f7fd bb34 	b.w	80845b8 <HAL_USB_USART_Begin>

08086f50 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 8086f50:	7c00      	ldrb	r0, [r0, #16]
 8086f52:	f7fd bb39 	b.w	80845c8 <HAL_USB_USART_End>

08086f56 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 8086f56:	b510      	push	{r4, lr}
 8086f58:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8086f5a:	2214      	movs	r2, #20
 8086f5c:	2100      	movs	r1, #0
 8086f5e:	f002 f80f 	bl	8088f80 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8086f62:	4620      	mov	r0, r4
 8086f64:	bd10      	pop	{r4, pc}
	...

08086f68 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 8086f68:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8086f6a:	4d0f      	ldr	r5, [pc, #60]	; (8086fa8 <_Z16_fetch_usbserialv+0x40>)
{
 8086f6c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 8086f6e:	a801      	add	r0, sp, #4
 8086f70:	f7ff fff1 	bl	8086f56 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8086f74:	7829      	ldrb	r1, [r5, #0]
 8086f76:	f3bf 8f5b 	dmb	ish
 8086f7a:	f011 0401 	ands.w	r4, r1, #1
 8086f7e:	d110      	bne.n	8086fa2 <_Z16_fetch_usbserialv+0x3a>
 8086f80:	4628      	mov	r0, r5
 8086f82:	f7f9 f8ab 	bl	80800dc <__cxa_guard_acquire>
 8086f86:	b160      	cbz	r0, 8086fa2 <_Z16_fetch_usbserialv+0x3a>
 8086f88:	4621      	mov	r1, r4
 8086f8a:	aa01      	add	r2, sp, #4
 8086f8c:	4807      	ldr	r0, [pc, #28]	; (8086fac <_Z16_fetch_usbserialv+0x44>)
 8086f8e:	f7ff ffc7 	bl	8086f20 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8086f92:	4628      	mov	r0, r5
 8086f94:	f7f9 f8a7 	bl	80800e6 <__cxa_guard_release>
 8086f98:	4a05      	ldr	r2, [pc, #20]	; (8086fb0 <_Z16_fetch_usbserialv+0x48>)
 8086f9a:	4906      	ldr	r1, [pc, #24]	; (8086fb4 <_Z16_fetch_usbserialv+0x4c>)
 8086f9c:	4803      	ldr	r0, [pc, #12]	; (8086fac <_Z16_fetch_usbserialv+0x44>)
 8086f9e:	f000 fe43 	bl	8087c28 <__aeabi_atexit>
	return _usbserial;
}
 8086fa2:	4802      	ldr	r0, [pc, #8]	; (8086fac <_Z16_fetch_usbserialv+0x44>)
 8086fa4:	b007      	add	sp, #28
 8086fa6:	bd30      	pop	{r4, r5, pc}
 8086fa8:	20000418 	.word	0x20000418
 8086fac:	20000420 	.word	0x20000420
 8086fb0:	20000130 	.word	0x20000130
 8086fb4:	08086ead 	.word	0x08086ead

08086fb8 <_Z23acquireUSBSerial1Bufferv>:
 8086fb8:	b510      	push	{r4, lr}
 8086fba:	4604      	mov	r4, r0
 8086fbc:	2214      	movs	r2, #20
 8086fbe:	2100      	movs	r1, #0
 8086fc0:	f001 ffde 	bl	8088f80 <memset>
 8086fc4:	4620      	mov	r0, r4
 8086fc6:	bd10      	pop	{r4, pc}

08086fc8 <_Z17_fetch_usbserial1v>:

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 8086fc8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8086fca:	4c0f      	ldr	r4, [pc, #60]	; (8087008 <_Z17_fetch_usbserial1v+0x40>)
{
 8086fcc:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8086fce:	a801      	add	r0, sp, #4
 8086fd0:	f7ff fff2 	bl	8086fb8 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8086fd4:	7823      	ldrb	r3, [r4, #0]
 8086fd6:	f3bf 8f5b 	dmb	ish
 8086fda:	07db      	lsls	r3, r3, #31
 8086fdc:	d410      	bmi.n	8087000 <_Z17_fetch_usbserial1v+0x38>
 8086fde:	4620      	mov	r0, r4
 8086fe0:	f7f9 f87c 	bl	80800dc <__cxa_guard_acquire>
 8086fe4:	b160      	cbz	r0, 8087000 <_Z17_fetch_usbserial1v+0x38>
 8086fe6:	2101      	movs	r1, #1
 8086fe8:	aa01      	add	r2, sp, #4
 8086fea:	4808      	ldr	r0, [pc, #32]	; (808700c <_Z17_fetch_usbserial1v+0x44>)
 8086fec:	f7ff ff98 	bl	8086f20 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8086ff0:	4620      	mov	r0, r4
 8086ff2:	f7f9 f878 	bl	80800e6 <__cxa_guard_release>
 8086ff6:	4a06      	ldr	r2, [pc, #24]	; (8087010 <_Z17_fetch_usbserial1v+0x48>)
 8086ff8:	4906      	ldr	r1, [pc, #24]	; (8087014 <_Z17_fetch_usbserial1v+0x4c>)
 8086ffa:	4804      	ldr	r0, [pc, #16]	; (808700c <_Z17_fetch_usbserial1v+0x44>)
 8086ffc:	f000 fe14 	bl	8087c28 <__aeabi_atexit>
  return _usbserial1;
}
 8087000:	4802      	ldr	r0, [pc, #8]	; (808700c <_Z17_fetch_usbserial1v+0x44>)
 8087002:	b006      	add	sp, #24
 8087004:	bd10      	pop	{r4, pc}
 8087006:	bf00      	nop
 8087008:	2000041c 	.word	0x2000041c
 808700c:	20000434 	.word	0x20000434
 8087010:	20000130 	.word	0x20000130
 8087014:	08086ead 	.word	0x08086ead

08087018 <_Z29call_wiring_interrupt_handlerPv>:
      if (_M_empty())
 8087018:	6882      	ldr	r2, [r0, #8]
    delete handlers[pin];
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
}

void call_wiring_interrupt_handler(void* data)
{
 808701a:	b510      	push	{r4, lr}
 808701c:	b90a      	cbnz	r2, 8087022 <_Z29call_wiring_interrupt_handlerPv+0xa>
	__throw_bad_function_call();
 808701e:	f000 fe0e 	bl	8087c3e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8087022:	68c3      	ldr	r3, [r0, #12]
    wiring_interrupt_handler_t* handler = (wiring_interrupt_handler_t*)data;
    (*handler)();
}
 8087024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8087028:	4718      	bx	r3

0808702a <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
 808702a:	f7fd b8dd 	b.w	80841e8 <HAL_Interrupts_Disable_All>

0808702e <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
 808702e:	f7fd b8d3 	b.w	80841d8 <HAL_Interrupts_Enable_All>

08087032 <_ZNSt8functionIFvvEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 8087032:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8087034:	2300      	movs	r3, #0
 8087036:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 8087038:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 808703a:	4604      	mov	r4, r0
 808703c:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 808703e:	b12b      	cbz	r3, 808704c <_ZNSt8functionIFvvEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8087040:	2202      	movs	r2, #2
 8087042:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8087044:	68eb      	ldr	r3, [r5, #12]
 8087046:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8087048:	68ab      	ldr	r3, [r5, #8]
 808704a:	60a3      	str	r3, [r4, #8]
    }
 808704c:	4620      	mov	r0, r4
 808704e:	bd38      	pop	{r3, r4, r5, pc}

08087050 <_Z16allocate_handlertRSt8functionIFvvEE>:
{
 8087050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    delete handlers[pin];
 8087052:	4d0c      	ldr	r5, [pc, #48]	; (8087084 <_Z16allocate_handlertRSt8functionIFvvEE+0x34>)
{
 8087054:	4606      	mov	r6, r0
    delete handlers[pin];
 8087056:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
{
 808705a:	460f      	mov	r7, r1
    delete handlers[pin];
 808705c:	b134      	cbz	r4, 808706c <_Z16allocate_handlertRSt8functionIFvvEE+0x1c>
    class function<_Res(_ArgTypes...)>
 808705e:	4620      	mov	r0, r4
 8087060:	f7f9 f998 	bl	8080394 <_ZNSt14_Function_baseD1Ev>
 8087064:	2110      	movs	r1, #16
 8087066:	4620      	mov	r0, r4
 8087068:	f000 fde3 	bl	8087c32 <_ZdlPvj>
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
 808706c:	2010      	movs	r0, #16
 808706e:	f7f9 f824 	bl	80800ba <_Znwj>
 8087072:	4604      	mov	r4, r0
 8087074:	b110      	cbz	r0, 808707c <_Z16allocate_handlertRSt8functionIFvvEE+0x2c>
 8087076:	4639      	mov	r1, r7
 8087078:	f7ff ffdb 	bl	8087032 <_ZNSt8functionIFvvEEC1ERKS1_>
}
 808707c:	4620      	mov	r0, r4
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
 808707e:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
}
 8087082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8087084:	20000448 	.word	0x20000448

08087088 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>:
{
 8087088:	b5f0      	push	{r4, r5, r6, r7, lr}
 808708a:	460c      	mov	r4, r1
 808708c:	4605      	mov	r5, r0
 808708e:	b085      	sub	sp, #20
 8087090:	4617      	mov	r7, r2
 8087092:	461e      	mov	r6, r3
    HAL_Interrupts_Detach(pin);
 8087094:	f7fd f898 	bl	80841c8 <HAL_Interrupts_Detach>
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
 8087098:	4621      	mov	r1, r4
 808709a:	4628      	mov	r0, r5
 808709c:	f7ff ffd8 	bl	8087050 <_Z16allocate_handlertRSt8functionIFvvEE>
    if (handler) {
 80870a0:	4604      	mov	r4, r0
 80870a2:	b1e8      	cbz	r0, 80870e0 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x58>
        HAL_InterruptExtraConfiguration extra = {0};
 80870a4:	2100      	movs	r1, #0
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80870a6:	2304      	movs	r3, #4
  if (priority >= 0) {
 80870a8:	428e      	cmp	r6, r1
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80870aa:	f88d 300c 	strb.w	r3, [sp, #12]
    extra.IRQChannelSubPriority = subpriority;
 80870ae:	bfa8      	it	ge
 80870b0:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
        HAL_InterruptExtraConfiguration extra = {0};
 80870b4:	f8ad 100d 	strh.w	r1, [sp, #13]
 80870b8:	f88d 100f 	strb.w	r1, [sp, #15]
    return &extra;
 80870bc:	bfa4      	itt	ge
 80870be:	a903      	addge	r1, sp, #12
    extra.IRQChannelSubPriority = subpriority;
 80870c0:	f88d 300e 	strbge.w	r3, [sp, #14]
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
 80870c4:	4602      	mov	r2, r0
 80870c6:	9100      	str	r1, [sp, #0]
 80870c8:	463b      	mov	r3, r7
 80870ca:	4628      	mov	r0, r5
 80870cc:	4906      	ldr	r1, [pc, #24]	; (80870e8 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x60>)
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 80870ce:	bfa8      	it	ge
 80870d0:	f88d 600d 	strbge.w	r6, [sp, #13]
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
 80870d4:	f7fd f870 	bl	80841b8 <HAL_Interrupts_Attach>
 80870d8:	b110      	cbz	r0, 80870e0 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x58>
            return false;
 80870da:	2000      	movs	r0, #0
}
 80870dc:	b005      	add	sp, #20
 80870de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return handler!=NULL;
 80870e0:	1e20      	subs	r0, r4, #0
 80870e2:	bf18      	it	ne
 80870e4:	2001      	movne	r0, #1
 80870e6:	e7f9      	b.n	80870dc <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x54>
 80870e8:	08087019 	.word	0x08087019

080870ec <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 80870ec:	2200      	movs	r2, #0
 80870ee:	6840      	ldr	r0, [r0, #4]
 80870f0:	4611      	mov	r1, r2
 80870f2:	f7fd bb41 	b.w	8084778 <network_ready>

080870f6 <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80870f6:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        HAL_IPAddress ip = {0};
 80870f8:	2600      	movs	r6, #0
    IPAddress resolve(const char* name)
 80870fa:	b085      	sub	sp, #20
 80870fc:	4604      	mov	r4, r0
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80870fe:	4610      	mov	r0, r2
    IPAddress resolve(const char* name)
 8087100:	460f      	mov	r7, r1
 8087102:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 8087104:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8087106:	f001 ffac 	bl	8089062 <strlen>
 808710a:	687b      	ldr	r3, [r7, #4]
 808710c:	b281      	uxth	r1, r0
 808710e:	9600      	str	r6, [sp, #0]
 8087110:	4628      	mov	r0, r5
 8087112:	aa03      	add	r2, sp, #12
 8087114:	f7fd fa38 	bl	8084588 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8087118:	b130      	cbz	r0, 8087128 <_ZN5spark13CellularClass7resolveEPKc+0x32>
 808711a:	4631      	mov	r1, r6
 808711c:	4620      	mov	r0, r4
 808711e:	f7ff fea5 	bl	8086e6c <_ZN9IPAddressC1Em>
    }
 8087122:	4620      	mov	r0, r4
 8087124:	b005      	add	sp, #20
 8087126:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8087128:	4620      	mov	r0, r4
 808712a:	a903      	add	r1, sp, #12
 808712c:	f7ff fe96 	bl	8086e5c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 8087130:	e7f7      	b.n	8087122 <_ZN5spark13CellularClass7resolveEPKc+0x2c>

08087132 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 8087132:	2200      	movs	r2, #0
 8087134:	6840      	ldr	r0, [r0, #4]
 8087136:	4611      	mov	r1, r2
 8087138:	f7fd bb3e 	b.w	80847b8 <network_listening>

0808713c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 808713c:	2200      	movs	r2, #0
 808713e:	6840      	ldr	r0, [r0, #4]
 8087140:	4611      	mov	r1, r2
 8087142:	f7fd bb49 	b.w	80847d8 <network_get_listen_timeout>

08087146 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 8087146:	2200      	movs	r2, #0
 8087148:	6840      	ldr	r0, [r0, #4]
 808714a:	f7fd bb3d 	b.w	80847c8 <network_set_listen_timeout>

0808714e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 808714e:	2200      	movs	r2, #0
 8087150:	6840      	ldr	r0, [r0, #4]
 8087152:	f081 0101 	eor.w	r1, r1, #1
 8087156:	f7fd bb27 	b.w	80847a8 <network_listen>

0808715a <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
 808715a:	2300      	movs	r3, #0
 808715c:	6840      	ldr	r0, [r0, #4]
 808715e:	461a      	mov	r2, r3
 8087160:	4619      	mov	r1, r3
 8087162:	f7fd bb19 	b.w	8084798 <network_off>

08087166 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
 8087166:	2300      	movs	r3, #0
 8087168:	6840      	ldr	r0, [r0, #4]
 808716a:	461a      	mov	r2, r3
 808716c:	4619      	mov	r1, r3
 808716e:	f7fd bb0b 	b.w	8084788 <network_on>

08087172 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 8087172:	2200      	movs	r2, #0
 8087174:	6840      	ldr	r0, [r0, #4]
 8087176:	4611      	mov	r1, r2
 8087178:	f7fd baee 	b.w	8084758 <network_connecting>

0808717c <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 808717c:	2200      	movs	r2, #0
 808717e:	2102      	movs	r1, #2
 8087180:	6840      	ldr	r0, [r0, #4]
 8087182:	f7fd baf1 	b.w	8084768 <network_disconnect>

08087186 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 8087186:	2300      	movs	r3, #0
 8087188:	6840      	ldr	r0, [r0, #4]
 808718a:	461a      	mov	r2, r3
 808718c:	f7fd badc 	b.w	8084748 <network_connect>

08087190 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 8087190:	b510      	push	{r4, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 8087192:	2428      	movs	r4, #40	; 0x28
 8087194:	4b07      	ldr	r3, [pc, #28]	; (80871b4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 8087196:	4622      	mov	r2, r4
 8087198:	4618      	mov	r0, r3
 808719a:	2100      	movs	r1, #0
 808719c:	f001 fef0 	bl	8088f80 <memset>
        cid = -1;
 80871a0:	f04f 32ff 	mov.w	r2, #4294967295
 80871a4:	6042      	str	r2, [r0, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80871a6:	2204      	movs	r2, #4
 80871a8:	4b03      	ldr	r3, [pc, #12]	; (80871b8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
 80871aa:	8004      	strh	r4, [r0, #0]
 80871ac:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 80871ae:	4a03      	ldr	r2, [pc, #12]	; (80871bc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
 80871b0:	601a      	str	r2, [r3, #0]
 80871b2:	bd10      	pop	{r4, pc}
 80871b4:	2000050c 	.word	0x2000050c
 80871b8:	20000504 	.word	0x20000504
 80871bc:	08089e54 	.word	0x08089e54

080871c0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80871c0:	4770      	bx	lr

080871c2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80871c2:	7441      	strb	r1, [r0, #17]
}
 80871c4:	4770      	bx	lr

080871c6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80871c6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80871c8:	7c00      	ldrb	r0, [r0, #16]
 80871ca:	f7fd f925 	bl	8084418 <hal_usart_available_data_for_write>
}
 80871ce:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80871d2:	bd08      	pop	{r3, pc}

080871d4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80871d4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80871d6:	7c00      	ldrb	r0, [r0, #16]
 80871d8:	f7fd f8f6 	bl	80843c8 <hal_usart_available>
}
 80871dc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80871e0:	bd08      	pop	{r3, pc}

080871e2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80871e2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80871e4:	7c00      	ldrb	r0, [r0, #16]
 80871e6:	f7fd f8ff 	bl	80843e8 <hal_usart_peek>
}
 80871ea:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80871ee:	bd08      	pop	{r3, pc}

080871f0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80871f0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80871f2:	7c00      	ldrb	r0, [r0, #16]
 80871f4:	f7fd f8f0 	bl	80843d8 <hal_usart_read>
}
 80871f8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80871fc:	bd08      	pop	{r3, pc}

080871fe <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80871fe:	7c00      	ldrb	r0, [r0, #16]
 8087200:	f7fd b8fa 	b.w	80843f8 <hal_usart_flush>

08087204 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 8087204:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8087206:	7c46      	ldrb	r6, [r0, #17]
{
 8087208:	4604      	mov	r4, r0
 808720a:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 808720c:	b12e      	cbz	r6, 808721a <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 808720e:	4629      	mov	r1, r5
 8087210:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 8087212:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 8087216:	f7fd b8cf 	b.w	80843b8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 808721a:	7c00      	ldrb	r0, [r0, #16]
 808721c:	f7fd f8fc 	bl	8084418 <hal_usart_available_data_for_write>
 8087220:	2800      	cmp	r0, #0
 8087222:	dcf4      	bgt.n	808720e <_ZN11USARTSerial5writeEh+0xa>
}
 8087224:	4630      	mov	r0, r6
 8087226:	bd70      	pop	{r4, r5, r6, pc}

08087228 <_ZN11USARTSerialD0Ev>:
 8087228:	b510      	push	{r4, lr}
 808722a:	4604      	mov	r4, r0
 808722c:	2114      	movs	r1, #20
 808722e:	f000 fd00 	bl	8087c32 <_ZdlPvj>
 8087232:	4620      	mov	r0, r4
 8087234:	bd10      	pop	{r4, pc}
	...

08087238 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 8087238:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 808723c:	b510      	push	{r4, lr}
 808723e:	4604      	mov	r4, r0
 8087240:	4608      	mov	r0, r1
 8087242:	4611      	mov	r1, r2
 8087244:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8087248:	e9c4 c201 	strd	ip, r2, [r4, #4]
 808724c:	4a04      	ldr	r2, [pc, #16]	; (8087260 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 808724e:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 8087250:	6022      	str	r2, [r4, #0]
  _blocking = true;
 8087252:	2201      	movs	r2, #1
 8087254:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 8087256:	461a      	mov	r2, r3
 8087258:	f7fd f89e 	bl	8084398 <hal_usart_init>
}
 808725c:	4620      	mov	r0, r4
 808725e:	bd10      	pop	{r4, pc}
 8087260:	08089e88 	.word	0x08089e88

08087264 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 8087264:	2300      	movs	r3, #0
 8087266:	7c00      	ldrb	r0, [r0, #16]
 8087268:	f7fd b8de 	b.w	8084428 <hal_usart_begin_config>

0808726c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 808726c:	2200      	movs	r2, #0
 808726e:	f7ff bff9 	b.w	8087264 <_ZN11USARTSerial5beginEmm>

08087272 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 8087272:	7c00      	ldrb	r0, [r0, #16]
 8087274:	f7fd b898 	b.w	80843a8 <hal_usart_end>

08087278 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 8087278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 808727a:	4c1a      	ldr	r4, [pc, #104]	; (80872e4 <_Z22__fetch_global_Serial1v+0x6c>)
 808727c:	6826      	ldr	r6, [r4, #0]
 808727e:	b94e      	cbnz	r6, 8087294 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
 8087280:	2084      	movs	r0, #132	; 0x84
 8087282:	f7f8 ff1a 	bl	80800ba <_Znwj>
 8087286:	4605      	mov	r5, r0
 8087288:	b118      	cbz	r0, 8087292 <_Z22__fetch_global_Serial1v+0x1a>
 808728a:	2284      	movs	r2, #132	; 0x84
 808728c:	4631      	mov	r1, r6
 808728e:	f001 fe77 	bl	8088f80 <memset>
 8087292:	6025      	str	r5, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 8087294:	4d14      	ldr	r5, [pc, #80]	; (80872e8 <_Z22__fetch_global_Serial1v+0x70>)
 8087296:	682f      	ldr	r7, [r5, #0]
 8087298:	b94f      	cbnz	r7, 80872ae <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
 808729a:	2084      	movs	r0, #132	; 0x84
 808729c:	f7f8 ff0d 	bl	80800ba <_Znwj>
 80872a0:	4606      	mov	r6, r0
 80872a2:	b118      	cbz	r0, 80872ac <_Z22__fetch_global_Serial1v+0x34>
 80872a4:	2284      	movs	r2, #132	; 0x84
 80872a6:	4639      	mov	r1, r7
 80872a8:	f001 fe6a 	bl	8088f80 <memset>
 80872ac:	602e      	str	r6, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80872ae:	4f0f      	ldr	r7, [pc, #60]	; (80872ec <_Z22__fetch_global_Serial1v+0x74>)
 80872b0:	7839      	ldrb	r1, [r7, #0]
 80872b2:	f3bf 8f5b 	dmb	ish
 80872b6:	f011 0601 	ands.w	r6, r1, #1
 80872ba:	d111      	bne.n	80872e0 <_Z22__fetch_global_Serial1v+0x68>
 80872bc:	4638      	mov	r0, r7
 80872be:	f7f8 ff0d 	bl	80800dc <__cxa_guard_acquire>
 80872c2:	b168      	cbz	r0, 80872e0 <_Z22__fetch_global_Serial1v+0x68>
 80872c4:	4631      	mov	r1, r6
 80872c6:	6822      	ldr	r2, [r4, #0]
 80872c8:	682b      	ldr	r3, [r5, #0]
 80872ca:	4809      	ldr	r0, [pc, #36]	; (80872f0 <_Z22__fetch_global_Serial1v+0x78>)
 80872cc:	f7ff ffb4 	bl	8087238 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80872d0:	4638      	mov	r0, r7
 80872d2:	f7f8 ff08 	bl	80800e6 <__cxa_guard_release>
 80872d6:	4a07      	ldr	r2, [pc, #28]	; (80872f4 <_Z22__fetch_global_Serial1v+0x7c>)
 80872d8:	4907      	ldr	r1, [pc, #28]	; (80872f8 <_Z22__fetch_global_Serial1v+0x80>)
 80872da:	4805      	ldr	r0, [pc, #20]	; (80872f0 <_Z22__fetch_global_Serial1v+0x78>)
 80872dc:	f000 fca4 	bl	8087c28 <__aeabi_atexit>
#endif
	return serial1;
}
 80872e0:	4803      	ldr	r0, [pc, #12]	; (80872f0 <_Z22__fetch_global_Serial1v+0x78>)
 80872e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80872e4:	20000538 	.word	0x20000538
 80872e8:	2000053c 	.word	0x2000053c
 80872ec:	20000534 	.word	0x20000534
 80872f0:	20000540 	.word	0x20000540
 80872f4:	20000130 	.word	0x20000130
 80872f8:	080871c1 	.word	0x080871c1

080872fc <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80872fc:	b510      	push	{r4, lr}
      if (_M_empty())
 80872fe:	6883      	ldr	r3, [r0, #8]
 8087300:	4604      	mov	r4, r0
 8087302:	b90b      	cbnz	r3, 8087308 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 8087304:	f000 fc9b 	bl	8087c3e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8087308:	68c3      	ldr	r3, [r0, #12]
 808730a:	4798      	blx	r3
      if (_M_manager)
 808730c:	68a3      	ldr	r3, [r4, #8]
 808730e:	b11b      	cbz	r3, 8087318 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8087310:	2203      	movs	r2, #3
 8087312:	4621      	mov	r1, r4
 8087314:	4620      	mov	r0, r4
 8087316:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8087318:	4620      	mov	r0, r4
}
 808731a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 808731e:	2110      	movs	r1, #16
 8087320:	f000 bc87 	b.w	8087c32 <_ZdlPvj>

08087324 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 8087324:	4770      	bx	lr

08087326 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8087326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8087328:	4606      	mov	r6, r0
 808732a:	4615      	mov	r5, r2
 808732c:	460c      	mov	r4, r1
 808732e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8087330:	42bc      	cmp	r4, r7
 8087332:	d006      	beq.n	8087342 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 8087334:	6833      	ldr	r3, [r6, #0]
 8087336:	4630      	mov	r0, r6
 8087338:	689b      	ldr	r3, [r3, #8]
 808733a:	f814 1b01 	ldrb.w	r1, [r4], #1
 808733e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 8087340:	e7f6      	b.n	8087330 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 8087342:	4628      	mov	r0, r5
 8087344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08087346 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 8087346:	2200      	movs	r2, #0
 8087348:	7c00      	ldrb	r0, [r0, #16]
 808734a:	f7fd b88d 	b.w	8084468 <hal_i2c_write>

0808734e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 808734e:	2100      	movs	r1, #0
 8087350:	7c00      	ldrb	r0, [r0, #16]
 8087352:	f7fd b891 	b.w	8084478 <hal_i2c_available>

08087356 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 8087356:	2100      	movs	r1, #0
 8087358:	7c00      	ldrb	r0, [r0, #16]
 808735a:	f7fd b895 	b.w	8084488 <hal_i2c_read>

0808735e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 808735e:	2100      	movs	r1, #0
 8087360:	7c00      	ldrb	r0, [r0, #16]
 8087362:	f7fd b899 	b.w	8084498 <hal_i2c_peek>

08087366 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 8087366:	2100      	movs	r1, #0
 8087368:	7c00      	ldrb	r0, [r0, #16]
 808736a:	f7fd b89d 	b.w	80844a8 <hal_i2c_flush>

0808736e <_ZN7TwoWireD0Ev>:
 808736e:	b510      	push	{r4, lr}
 8087370:	4604      	mov	r4, r0
 8087372:	2114      	movs	r1, #20
 8087374:	f000 fc5d 	bl	8087c32 <_ZdlPvj>
 8087378:	4620      	mov	r0, r4
 808737a:	bd10      	pop	{r4, pc}

0808737c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 808737c:	b510      	push	{r4, lr}
 808737e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8087382:	4604      	mov	r4, r0
 8087384:	4608      	mov	r0, r1
 8087386:	2100      	movs	r1, #0
 8087388:	e9c4 1301 	strd	r1, r3, [r4, #4]
 808738c:	4b03      	ldr	r3, [pc, #12]	; (808739c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 808738e:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 8087390:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 8087392:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 8087394:	f7fd f898 	bl	80844c8 <hal_i2c_init>
}
 8087398:	4620      	mov	r0, r4
 808739a:	bd10      	pop	{r4, pc}
 808739c:	08089eb8 	.word	0x08089eb8

080873a0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80873a0:	2300      	movs	r3, #0
 80873a2:	7c00      	ldrb	r0, [r0, #16]
 80873a4:	461a      	mov	r2, r3
 80873a6:	4619      	mov	r1, r3
 80873a8:	f7fd b846 	b.w	8084438 <hal_i2c_begin>

080873ac <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 80873ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 80873ae:	2200      	movs	r2, #0
 80873b0:	2314      	movs	r3, #20
 80873b2:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80873b6:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 80873ba:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 80873bc:	7c00      	ldrb	r0, [r0, #16]
 80873be:	f88d 3008 	strb.w	r3, [sp, #8]
 80873c2:	684b      	ldr	r3, [r1, #4]
 80873c4:	9303      	str	r3, [sp, #12]
 80873c6:	68cb      	ldr	r3, [r1, #12]
 80873c8:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 80873ca:	7a0b      	ldrb	r3, [r1, #8]
 80873cc:	a901      	add	r1, sp, #4
 80873ce:	9305      	str	r3, [sp, #20]
 80873d0:	f7fd f892 	bl	80844f8 <hal_i2c_request_ex>
}
 80873d4:	b007      	add	sp, #28
 80873d6:	f85d fb04 	ldr.w	pc, [sp], #4

080873da <_ZN7TwoWire11requestFromEhjh>:
{
 80873da:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 80873dc:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 80873de:	f88d 1000 	strb.w	r1, [sp]
 80873e2:	f04f 0164 	mov.w	r1, #100	; 0x64
 80873e6:	bf18      	it	ne
 80873e8:	2301      	movne	r3, #1
 80873ea:	9103      	str	r1, [sp, #12]
 80873ec:	4669      	mov	r1, sp
    size_ = size;
 80873ee:	9201      	str	r2, [sp, #4]
 80873f0:	f88d 3008 	strb.w	r3, [sp, #8]
 80873f4:	f7ff ffda 	bl	80873ac <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 80873f8:	b005      	add	sp, #20
 80873fa:	f85d fb04 	ldr.w	pc, [sp], #4

080873fe <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 80873fe:	2301      	movs	r3, #1
 8087400:	f7ff bfeb 	b.w	80873da <_ZN7TwoWire11requestFromEhjh>

08087404 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 8087404:	2200      	movs	r2, #0
 8087406:	7c00      	ldrb	r0, [r0, #16]
 8087408:	f7fd b81e 	b.w	8084448 <hal_i2c_begin_transmission>

0808740c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 808740c:	b2c9      	uxtb	r1, r1
 808740e:	f7ff bff9 	b.w	8087404 <_ZN7TwoWire17beginTransmissionEh>

08087412 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
 8087412:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 8087414:	2200      	movs	r2, #0
 8087416:	460b      	mov	r3, r1
 8087418:	e9cd 2201 	strd	r2, r2, [sp, #4]
 808741c:	2214      	movs	r2, #20
 808741e:	f8ad 2004 	strh.w	r2, [sp, #4]
    };
 8087422:	685a      	ldr	r2, [r3, #4]
      .address = address_,
 8087424:	7809      	ldrb	r1, [r1, #0]
    };
 8087426:	9203      	str	r2, [sp, #12]
 8087428:	68da      	ldr	r2, [r3, #12]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 808742a:	7a1b      	ldrb	r3, [r3, #8]
    };
 808742c:	9204      	str	r2, [sp, #16]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
 808742e:	7c00      	ldrb	r0, [r0, #16]
 8087430:	aa01      	add	r2, sp, #4
 8087432:	f88d 1008 	strb.w	r1, [sp, #8]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 8087436:	9305      	str	r3, [sp, #20]
 8087438:	f7fd f806 	bl	8084448 <hal_i2c_begin_transmission>
}
 808743c:	b007      	add	sp, #28
 808743e:	f85d fb04 	ldr.w	pc, [sp], #4

08087442 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 8087442:	2200      	movs	r2, #0
 8087444:	7c00      	ldrb	r0, [r0, #16]
 8087446:	f7fd b807 	b.w	8084458 <hal_i2c_end_transmission>

0808744a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 808744a:	2101      	movs	r1, #1
 808744c:	f7ff bff9 	b.w	8087442 <_ZN7TwoWire15endTransmissionEh>

08087450 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 8087450:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
 8087452:	2100      	movs	r1, #0
 8087454:	7c00      	ldrb	r0, [r0, #16]
 8087456:	f7fd f83f 	bl	80844d8 <hal_i2c_lock>
}
 808745a:	fab0 f080 	clz	r0, r0
 808745e:	0940      	lsrs	r0, r0, #5
 8087460:	bd08      	pop	{r3, pc}

08087462 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 8087462:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
 8087464:	2100      	movs	r1, #0
 8087466:	7c00      	ldrb	r0, [r0, #16]
 8087468:	f7fd f83e 	bl	80844e8 <hal_i2c_unlock>
}
 808746c:	fab0 f080 	clz	r0, r0
 8087470:	0940      	lsrs	r0, r0, #5
 8087472:	bd08      	pop	{r3, pc}

08087474 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 8087474:	2300      	movs	r3, #0
 8087476:	6840      	ldr	r0, [r0, #4]
 8087478:	461a      	mov	r2, r3
 808747a:	f7fd b965 	b.w	8084748 <network_connect>

0808747e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 808747e:	2200      	movs	r2, #0
 8087480:	2102      	movs	r1, #2
 8087482:	6840      	ldr	r0, [r0, #4]
 8087484:	f7fd b970 	b.w	8084768 <network_disconnect>

08087488 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 8087488:	2200      	movs	r2, #0
 808748a:	6840      	ldr	r0, [r0, #4]
 808748c:	4611      	mov	r1, r2
 808748e:	f7fd b963 	b.w	8084758 <network_connecting>

08087492 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 8087492:	2200      	movs	r2, #0
 8087494:	6840      	ldr	r0, [r0, #4]
 8087496:	4611      	mov	r1, r2
 8087498:	f7fd b96e 	b.w	8084778 <network_ready>

0808749c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 808749c:	2300      	movs	r3, #0
 808749e:	6840      	ldr	r0, [r0, #4]
 80874a0:	461a      	mov	r2, r3
 80874a2:	4619      	mov	r1, r3
 80874a4:	f7fd b970 	b.w	8084788 <network_on>

080874a8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80874a8:	2300      	movs	r3, #0
 80874aa:	6840      	ldr	r0, [r0, #4]
 80874ac:	461a      	mov	r2, r3
 80874ae:	4619      	mov	r1, r3
 80874b0:	f7fd b972 	b.w	8084798 <network_off>

080874b4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80874b4:	2200      	movs	r2, #0
 80874b6:	6840      	ldr	r0, [r0, #4]
 80874b8:	f081 0101 	eor.w	r1, r1, #1
 80874bc:	f7fd b974 	b.w	80847a8 <network_listen>

080874c0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80874c0:	2200      	movs	r2, #0
 80874c2:	6840      	ldr	r0, [r0, #4]
 80874c4:	f7fd b980 	b.w	80847c8 <network_set_listen_timeout>

080874c8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80874c8:	2200      	movs	r2, #0
 80874ca:	6840      	ldr	r0, [r0, #4]
 80874cc:	4611      	mov	r1, r2
 80874ce:	f7fd b983 	b.w	80847d8 <network_get_listen_timeout>

080874d2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80874d2:	2200      	movs	r2, #0
 80874d4:	6840      	ldr	r0, [r0, #4]
 80874d6:	4611      	mov	r1, r2
 80874d8:	f7fd b96e 	b.w	80847b8 <network_listening>

080874dc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80874dc:	b570      	push	{r4, r5, r6, lr}
 80874de:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 80874e0:	2600      	movs	r6, #0
 80874e2:	b086      	sub	sp, #24
 80874e4:	4604      	mov	r4, r0
    IPAddress addr;
 80874e6:	a804      	add	r0, sp, #16
 80874e8:	f7ff fcb0 	bl	8086e4c <_ZN9IPAddressC1Ev>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80874ec:	4628      	mov	r0, r5
        HAL_IPAddress ip = {0};
 80874ee:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80874f0:	f001 fdb7 	bl	8089062 <strlen>
 80874f4:	4b0a      	ldr	r3, [pc, #40]	; (8087520 <_ZN5spark12NetworkClass7resolveEPKc+0x44>)
 80874f6:	9600      	str	r6, [sp, #0]
 80874f8:	b281      	uxth	r1, r0
 80874fa:	685b      	ldr	r3, [r3, #4]
 80874fc:	4628      	mov	r0, r5
 80874fe:	aa03      	add	r2, sp, #12
 8087500:	f7fd f842 	bl	8084588 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8087504:	b130      	cbz	r0, 8087514 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 8087506:	4631      	mov	r1, r6
 8087508:	4620      	mov	r0, r4
 808750a:	f7ff fcaf 	bl	8086e6c <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 808750e:	4620      	mov	r0, r4
 8087510:	b006      	add	sp, #24
 8087512:	bd70      	pop	{r4, r5, r6, pc}
 8087514:	4620      	mov	r0, r4
 8087516:	a903      	add	r1, sp, #12
 8087518:	f7ff fca0 	bl	8086e5c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 808751c:	e7f7      	b.n	808750e <_ZN5spark12NetworkClass7resolveEPKc+0x32>
 808751e:	bf00      	nop
 8087520:	20000504 	.word	0x20000504

08087524 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 8087524:	4b02      	ldr	r3, [pc, #8]	; (8087530 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 8087526:	4a03      	ldr	r2, [pc, #12]	; (8087534 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 8087528:	601a      	str	r2, [r3, #0]
 808752a:	2200      	movs	r2, #0
 808752c:	605a      	str	r2, [r3, #4]

} // spark
 808752e:	4770      	bx	lr
 8087530:	20000554 	.word	0x20000554
 8087534:	08089ee0 	.word	0x08089ee0

08087538 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 8087538:	2201      	movs	r2, #1
 808753a:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 808753e:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 8087542:	4618      	mov	r0, r3
 8087544:	2901      	cmp	r1, #1
 8087546:	d108      	bne.n	808755a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 8087548:	f853 1c04 	ldr.w	r1, [r3, #-4]
 808754c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 8087550:	3a01      	subs	r2, #1
 8087552:	f103 0310 	add.w	r3, r3, #16
 8087556:	d1f2      	bne.n	808753e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 8087558:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 808755a:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 808755c:	bf04      	itt	eq
 808755e:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 8087562:	1852      	addeq	r2, r2, r1
 8087564:	e7f4      	b.n	8087550 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

08087566 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 8087566:	b40e      	push	{r1, r2, r3}
 8087568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808756c:	b087      	sub	sp, #28
 808756e:	af00      	add	r7, sp, #0
 8087570:	f107 0534 	add.w	r5, r7, #52	; 0x34
 8087574:	f855 8b04 	ldr.w	r8, [r5], #4
 8087578:	4604      	mov	r4, r0
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 808757a:	462b      	mov	r3, r5
 808757c:	4642      	mov	r2, r8
 808757e:	2110      	movs	r1, #16
 8087580:	f107 0008 	add.w	r0, r7, #8
    va_start(args, fmt);
 8087584:	607d      	str	r5, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 8087586:	f7fd f9af 	bl	80848e8 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 808758a:	280f      	cmp	r0, #15
 808758c:	d91b      	bls.n	80875c6 <_ZN5spark10JSONWriter6printfEPKcz+0x60>
        char buf[n + 1]; // Use larger buffer
 808758e:	f100 0308 	add.w	r3, r0, #8
 8087592:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 8087596:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 8087598:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 808759c:	4642      	mov	r2, r8
 808759e:	1c41      	adds	r1, r0, #1
 80875a0:	462b      	mov	r3, r5
 80875a2:	4668      	mov	r0, sp
        va_start(args, fmt);
 80875a4:	607d      	str	r5, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 80875a6:	f7fd f99f 	bl	80848e8 <vsnprintf>
        if (n > 0) {
 80875aa:	1e02      	subs	r2, r0, #0
 80875ac:	dd04      	ble.n	80875b8 <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
 80875ae:	6823      	ldr	r3, [r4, #0]
 80875b0:	4669      	mov	r1, sp
 80875b2:	4620      	mov	r0, r4
 80875b4:	689b      	ldr	r3, [r3, #8]
 80875b6:	4798      	blx	r3
 80875b8:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 80875ba:	371c      	adds	r7, #28
 80875bc:	46bd      	mov	sp, r7
 80875be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80875c2:	b003      	add	sp, #12
 80875c4:	4770      	bx	lr
    } else if (n > 0) {
 80875c6:	2800      	cmp	r0, #0
 80875c8:	d0f7      	beq.n	80875ba <_ZN5spark10JSONWriter6printfEPKcz+0x54>
        write(buf, n);
 80875ca:	6823      	ldr	r3, [r4, #0]
 80875cc:	4602      	mov	r2, r0
 80875ce:	689b      	ldr	r3, [r3, #8]
 80875d0:	4620      	mov	r0, r4
 80875d2:	f107 0108 	add.w	r1, r7, #8
 80875d6:	4798      	blx	r3
}
 80875d8:	e7ef      	b.n	80875ba <_ZN5spark10JSONWriter6printfEPKcz+0x54>

080875da <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80875da:	b510      	push	{r4, lr}
 80875dc:	4604      	mov	r4, r0
          _M_dispose();
 80875de:	6803      	ldr	r3, [r0, #0]
 80875e0:	689b      	ldr	r3, [r3, #8]
 80875e2:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80875e4:	68a3      	ldr	r3, [r4, #8]
 80875e6:	3b01      	subs	r3, #1
 80875e8:	60a3      	str	r3, [r4, #8]
 80875ea:	b92b      	cbnz	r3, 80875f8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
 80875ec:	6823      	ldr	r3, [r4, #0]
 80875ee:	4620      	mov	r0, r4
    }
 80875f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 80875f4:	68db      	ldr	r3, [r3, #12]
 80875f6:	4718      	bx	r3
    }
 80875f8:	bd10      	pop	{r4, pc}

080875fa <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
 80875fa:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 80875fc:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 80875fe:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 8087602:	2201      	movs	r2, #1
 8087604:	689b      	ldr	r3, [r3, #8]
 8087606:	f10d 0107 	add.w	r1, sp, #7
 808760a:	4798      	blx	r3
}
 808760c:	b003      	add	sp, #12
 808760e:	f85d fb04 	ldr.w	pc, [sp], #4

08087612 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
 8087612:	b538      	push	{r3, r4, r5, lr}
 8087614:	680b      	ldr	r3, [r1, #0]
 8087616:	4604      	mov	r4, r0
 8087618:	6003      	str	r3, [r0, #0]
 808761a:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 808761c:	6843      	ldr	r3, [r0, #4]
 808761e:	429d      	cmp	r5, r3
 8087620:	d00c      	beq.n	808763c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
 8087622:	b115      	cbz	r5, 808762a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
 8087624:	686b      	ldr	r3, [r5, #4]
 8087626:	3301      	adds	r3, #1
 8087628:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 808762a:	6860      	ldr	r0, [r4, #4]
 808762c:	b128      	cbz	r0, 808763a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
 808762e:	6843      	ldr	r3, [r0, #4]
 8087630:	3b01      	subs	r3, #1
 8087632:	6043      	str	r3, [r0, #4]
 8087634:	b90b      	cbnz	r3, 808763a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
 8087636:	f7ff ffd0 	bl	80875da <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
 808763a:	6065      	str	r5, [r4, #4]
    class __shared_ptr
 808763c:	4620      	mov	r0, r4
 808763e:	bd38      	pop	{r3, r4, r5, pc}

08087640 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 8087640:	460b      	mov	r3, r1
 8087642:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 8087644:	2200      	movs	r2, #0
 8087646:	b510      	push	{r4, lr}
 8087648:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 808764a:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 808764e:	6083      	str	r3, [r0, #8]
    if (t) {
 8087650:	b90b      	cbnz	r3, 8087656 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 8087652:	4620      	mov	r0, r4
 8087654:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
 8087656:	f7ff ffdc 	bl	8087612 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
 808765a:	e7fa      	b.n	8087652 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

0808765c <_ZNK5spark9JSONValue4typeEv>:
spark::JSONType spark::JSONValue::type() const {
 808765c:	4603      	mov	r3, r0
    if (!t_) {
 808765e:	6880      	ldr	r0, [r0, #8]
 8087660:	b320      	cbz	r0, 80876ac <_ZNK5spark9JSONValue4typeEv+0x50>
    switch (t_->type) {
 8087662:	7802      	ldrb	r2, [r0, #0]
 8087664:	2a03      	cmp	r2, #3
 8087666:	d81a      	bhi.n	808769e <_ZNK5spark9JSONValue4typeEv+0x42>
 8087668:	e8df f002 	tbb	[pc, r2]
 808766c:	1b021704 	.word	0x1b021704
 8087670:	2005      	movs	r0, #5
 8087672:	4770      	bx	lr
        const char c = d_->json[t_->start];
 8087674:	681b      	ldr	r3, [r3, #0]
 8087676:	685a      	ldr	r2, [r3, #4]
 8087678:	6843      	ldr	r3, [r0, #4]
 808767a:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 808767c:	282d      	cmp	r0, #45	; 0x2d
 808767e:	d012      	beq.n	80876a6 <_ZNK5spark9JSONValue4typeEv+0x4a>
 8087680:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8087684:	2b09      	cmp	r3, #9
 8087686:	d90e      	bls.n	80876a6 <_ZNK5spark9JSONValue4typeEv+0x4a>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 8087688:	2874      	cmp	r0, #116	; 0x74
 808768a:	d00e      	beq.n	80876aa <_ZNK5spark9JSONValue4typeEv+0x4e>
 808768c:	2866      	cmp	r0, #102	; 0x66
 808768e:	d00c      	beq.n	80876aa <_ZNK5spark9JSONValue4typeEv+0x4e>
        return JSON_TYPE_INVALID;
 8087690:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 8087694:	4258      	negs	r0, r3
 8087696:	4158      	adcs	r0, r3
 8087698:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 808769a:	2006      	movs	r0, #6
 808769c:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 808769e:	2000      	movs	r0, #0
 80876a0:	4770      	bx	lr
        return JSON_TYPE_STRING;
 80876a2:	2004      	movs	r0, #4
 80876a4:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 80876a6:	2003      	movs	r0, #3
 80876a8:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 80876aa:	2002      	movs	r0, #2
}
 80876ac:	4770      	bx	lr

080876ae <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 80876ae:	b510      	push	{r4, lr}
 80876b0:	4604      	mov	r4, r0
    switch (type()) {
 80876b2:	f7ff ffd3 	bl	808765c <_ZNK5spark9JSONValue4typeEv>
 80876b6:	2802      	cmp	r0, #2
 80876b8:	d00e      	beq.n	80876d8 <_ZNK5spark9JSONValue5toIntEv+0x2a>
 80876ba:	1ec3      	subs	r3, r0, #3
 80876bc:	b2db      	uxtb	r3, r3
 80876be:	2b01      	cmp	r3, #1
 80876c0:	d814      	bhi.n	80876ec <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 80876c2:	6822      	ldr	r2, [r4, #0]
 80876c4:	68a3      	ldr	r3, [r4, #8]
 80876c6:	6850      	ldr	r0, [r2, #4]
 80876c8:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 80876ca:	220a      	movs	r2, #10
}
 80876cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 80876d0:	2100      	movs	r1, #0
 80876d2:	4418      	add	r0, r3
 80876d4:	f001 bdd2 	b.w	808927c <strtol>
        const char* const s = d_->json + t_->start;
 80876d8:	6822      	ldr	r2, [r4, #0]
 80876da:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 80876dc:	6852      	ldr	r2, [r2, #4]
 80876de:	685b      	ldr	r3, [r3, #4]
 80876e0:	5cd0      	ldrb	r0, [r2, r3]
 80876e2:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 80876e6:	4258      	negs	r0, r3
 80876e8:	4158      	adcs	r0, r3
}
 80876ea:	bd10      	pop	{r4, pc}
    switch (type()) {
 80876ec:	2000      	movs	r0, #0
 80876ee:	e7fc      	b.n	80876ea <_ZNK5spark9JSONValue5toIntEv+0x3c>

080876f0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 80876f0:	460b      	mov	r3, r1
 80876f2:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 80876f4:	2200      	movs	r2, #0
 80876f6:	b510      	push	{r4, lr}
 80876f8:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 80876fa:	e9c0 2200 	strd	r2, r2, [r0]
        n_(0) {
 80876fe:	480d      	ldr	r0, [pc, #52]	; (8087734 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 8087700:	e9c4 0202 	strd	r0, r2, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 8087704:	b1a3      	cbz	r3, 8087730 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x40>
 8087706:	781a      	ldrb	r2, [r3, #0]
 8087708:	2a03      	cmp	r2, #3
 808770a:	d006      	beq.n	808771a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2a>
 808770c:	b982      	cbnz	r2, 8087730 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x40>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 808770e:	680a      	ldr	r2, [r1, #0]
 8087710:	6850      	ldr	r0, [r2, #4]
 8087712:	685a      	ldr	r2, [r3, #4]
 8087714:	5c82      	ldrb	r2, [r0, r2]
 8087716:	2a6e      	cmp	r2, #110	; 0x6e
 8087718:	d007      	beq.n	808772a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3a>
            s_ = d->json + t->start;
 808771a:	680a      	ldr	r2, [r1, #0]
 808771c:	6858      	ldr	r0, [r3, #4]
 808771e:	6852      	ldr	r2, [r2, #4]
            n_ = t->end - t->start;
 8087720:	689b      	ldr	r3, [r3, #8]
            s_ = d->json + t->start;
 8087722:	4402      	add	r2, r0
            n_ = t->end - t->start;
 8087724:	1a1b      	subs	r3, r3, r0
            s_ = d->json + t->start;
 8087726:	60a2      	str	r2, [r4, #8]
            n_ = t->end - t->start;
 8087728:	60e3      	str	r3, [r4, #12]
 808772a:	4620      	mov	r0, r4
 808772c:	f7ff ff71 	bl	8087612 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
 8087730:	4620      	mov	r0, r4
 8087732:	bd10      	pop	{r4, pc}
 8087734:	08089844 	.word	0x08089844

08087738 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 8087738:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 808773a:	2500      	movs	r5, #0
 808773c:	460b      	mov	r3, r1
 808773e:	4604      	mov	r4, r0
 8087740:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 8087742:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 8087746:	e9c0 5502 	strd	r5, r5, [r0, #8]
 808774a:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 808774e:	b14b      	cbz	r3, 8087764 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 8087750:	781a      	ldrb	r2, [r3, #0]
 8087752:	2a01      	cmp	r2, #1
 8087754:	d106      	bne.n	8087764 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 8087756:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 808775a:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 808775c:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 808775e:	6143      	str	r3, [r0, #20]
 8087760:	f7ff ff57 	bl	8087612 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
 8087764:	4620      	mov	r0, r4
 8087766:	bd38      	pop	{r3, r4, r5, pc}

08087768 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 8087768:	b510      	push	{r4, lr}
    if (!n_) {
 808776a:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 808776c:	4604      	mov	r4, r0
    if (!n_) {
 808776e:	b163      	cbz	r3, 808778a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 8087770:	6880      	ldr	r0, [r0, #8]
    --n_;
 8087772:	3b01      	subs	r3, #1
    k_ = t_; // Name
 8087774:	60e0      	str	r0, [r4, #12]
    ++t_;
 8087776:	3010      	adds	r0, #16
 8087778:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 808777a:	6120      	str	r0, [r4, #16]
    --n_;
 808777c:	6163      	str	r3, [r4, #20]
    if (n_) {
 808777e:	b113      	cbz	r3, 8087786 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 8087780:	f7ff feda 	bl	8087538 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 8087784:	60a0      	str	r0, [r4, #8]
    return true;
 8087786:	2001      	movs	r0, #1
 8087788:	e000      	b.n	808778c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 808778a:	4618      	mov	r0, r3
}
 808778c:	bd10      	pop	{r4, pc}

0808778e <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 808778e:	b510      	push	{r4, lr}
    write('}');
 8087790:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 8087792:	4604      	mov	r4, r0
    write('}');
 8087794:	f7ff ff31 	bl	80875fa <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 8087798:	2301      	movs	r3, #1
}
 808779a:	4620      	mov	r0, r4
    state_ = NEXT;
 808779c:	7123      	strb	r3, [r4, #4]
}
 808779e:	bd10      	pop	{r4, pc}

080877a0 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 80877a0:	b508      	push	{r3, lr}
    switch (state_) {
 80877a2:	7903      	ldrb	r3, [r0, #4]
 80877a4:	2b01      	cmp	r3, #1
 80877a6:	d002      	beq.n	80877ae <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 80877a8:	2b02      	cmp	r3, #2
 80877aa:	d004      	beq.n	80877b6 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 80877ac:	bd08      	pop	{r3, pc}
        write(',');
 80877ae:	212c      	movs	r1, #44	; 0x2c
        write(':');
 80877b0:	f7ff ff23 	bl	80875fa <_ZN5spark10JSONWriter5writeEc>
}
 80877b4:	e7fa      	b.n	80877ac <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 80877b6:	213a      	movs	r1, #58	; 0x3a
 80877b8:	e7fa      	b.n	80877b0 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

080877ba <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 80877ba:	b510      	push	{r4, lr}
 80877bc:	4604      	mov	r4, r0
    writeSeparator();
 80877be:	f7ff ffef 	bl	80877a0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 80877c2:	4620      	mov	r0, r4
 80877c4:	217b      	movs	r1, #123	; 0x7b
 80877c6:	f7ff ff18 	bl	80875fa <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 80877ca:	2300      	movs	r3, #0
}
 80877cc:	4620      	mov	r0, r4
    state_ = BEGIN;
 80877ce:	7123      	strb	r3, [r4, #4]
}
 80877d0:	bd10      	pop	{r4, pc}
	...

080877d4 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 80877d4:	b538      	push	{r3, r4, r5, lr}
 80877d6:	4604      	mov	r4, r0
 80877d8:	460d      	mov	r5, r1
    writeSeparator();
 80877da:	f7ff ffe1 	bl	80877a0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 80877de:	6823      	ldr	r3, [r4, #0]
 80877e0:	4620      	mov	r0, r4
 80877e2:	462a      	mov	r2, r5
 80877e4:	68db      	ldr	r3, [r3, #12]
 80877e6:	4903      	ldr	r1, [pc, #12]	; (80877f4 <_ZN5spark10JSONWriter5valueEi+0x20>)
 80877e8:	4798      	blx	r3
    state_ = NEXT;
 80877ea:	2301      	movs	r3, #1
}
 80877ec:	4620      	mov	r0, r4
    state_ = NEXT;
 80877ee:	7123      	strb	r3, [r4, #4]
}
 80877f0:	bd38      	pop	{r3, r4, r5, pc}
 80877f2:	bf00      	nop
 80877f4:	0808999b 	.word	0x0808999b

080877f8 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 80877f8:	b538      	push	{r3, r4, r5, lr}
 80877fa:	4604      	mov	r4, r0
 80877fc:	460d      	mov	r5, r1
    writeSeparator();
 80877fe:	f7ff ffcf 	bl	80877a0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 8087802:	6823      	ldr	r3, [r4, #0]
 8087804:	4620      	mov	r0, r4
 8087806:	462a      	mov	r2, r5
 8087808:	68db      	ldr	r3, [r3, #12]
 808780a:	4903      	ldr	r1, [pc, #12]	; (8087818 <_ZN5spark10JSONWriter5valueEj+0x20>)
 808780c:	4798      	blx	r3
    state_ = NEXT;
 808780e:	2301      	movs	r3, #1
}
 8087810:	4620      	mov	r0, r4
    state_ = NEXT;
 8087812:	7123      	strb	r3, [r4, #4]
}
 8087814:	bd38      	pop	{r3, r4, r5, pc}
 8087816:	bf00      	nop
 8087818:	08089f0c 	.word	0x08089f0c

0808781c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 808781c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8087820:	460d      	mov	r5, r1
 8087822:	4617      	mov	r7, r2
    write('"');
 8087824:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 8087826:	4604      	mov	r4, r0
    write('"');
 8087828:	f7ff fee7 	bl	80875fa <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
 808782c:	4629      	mov	r1, r5
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 808782e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80878c8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
    const char* const end = str + size;
 8087832:	442f      	add	r7, r5
    while (s != end) {
 8087834:	42bd      	cmp	r5, r7
 8087836:	462a      	mov	r2, r5
 8087838:	d038      	beq.n	80878ac <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
 808783a:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
 808783e:	2e22      	cmp	r6, #34	; 0x22
 8087840:	d003      	beq.n	808784a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
 8087842:	2e5c      	cmp	r6, #92	; 0x5c
 8087844:	d001      	beq.n	808784a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
 8087846:	2e1f      	cmp	r6, #31
 8087848:	d8f4      	bhi.n	8087834 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 808784a:	6823      	ldr	r3, [r4, #0]
 808784c:	1a52      	subs	r2, r2, r1
 808784e:	4620      	mov	r0, r4
 8087850:	689b      	ldr	r3, [r3, #8]
 8087852:	4798      	blx	r3
            write('\\');
 8087854:	215c      	movs	r1, #92	; 0x5c
 8087856:	4620      	mov	r0, r4
 8087858:	f7ff fecf 	bl	80875fa <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 808785c:	2e0d      	cmp	r6, #13
 808785e:	d80a      	bhi.n	8087876 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
 8087860:	2e07      	cmp	r6, #7
 8087862:	d91c      	bls.n	808789e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
 8087864:	f1a6 0308 	sub.w	r3, r6, #8
 8087868:	2b05      	cmp	r3, #5
 808786a:	d818      	bhi.n	808789e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
 808786c:	e8df f003 	tbb	[pc, r3]
 8087870:	17110f0d 	.word	0x17110f0d
 8087874:	1513      	.short	0x1513
 8087876:	2e22      	cmp	r6, #34	; 0x22
 8087878:	d001      	beq.n	808787e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
 808787a:	2e5c      	cmp	r6, #92	; 0x5c
 808787c:	d10f      	bne.n	808789e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
 808787e:	4631      	mov	r1, r6
                write('b');
 8087880:	4620      	mov	r0, r4
 8087882:	f7ff feba 	bl	80875fa <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 8087886:	4629      	mov	r1, r5
    while (s != end) {
 8087888:	e7d4      	b.n	8087834 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 808788a:	2162      	movs	r1, #98	; 0x62
 808788c:	e7f8      	b.n	8087880 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
 808788e:	2174      	movs	r1, #116	; 0x74
 8087890:	e7f6      	b.n	8087880 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
 8087892:	216e      	movs	r1, #110	; 0x6e
 8087894:	e7f4      	b.n	8087880 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
 8087896:	2166      	movs	r1, #102	; 0x66
 8087898:	e7f2      	b.n	8087880 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
 808789a:	2172      	movs	r1, #114	; 0x72
 808789c:	e7f0      	b.n	8087880 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
 808789e:	6823      	ldr	r3, [r4, #0]
 80878a0:	4632      	mov	r2, r6
 80878a2:	4641      	mov	r1, r8
 80878a4:	4620      	mov	r0, r4
 80878a6:	68db      	ldr	r3, [r3, #12]
 80878a8:	4798      	blx	r3
                break;
 80878aa:	e7ec      	b.n	8087886 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
 80878ac:	428d      	cmp	r5, r1
 80878ae:	d004      	beq.n	80878ba <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
 80878b0:	6823      	ldr	r3, [r4, #0]
 80878b2:	4620      	mov	r0, r4
 80878b4:	689b      	ldr	r3, [r3, #8]
 80878b6:	1a6a      	subs	r2, r5, r1
 80878b8:	4798      	blx	r3
    }
    write('"');
 80878ba:	2122      	movs	r1, #34	; 0x22
 80878bc:	4620      	mov	r0, r4
 80878be:	f7ff fe9c 	bl	80875fa <_ZN5spark10JSONWriter5writeEc>
}
 80878c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80878c6:	bf00      	nop
 80878c8:	08089f0f 	.word	0x08089f0f

080878cc <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 80878cc:	b570      	push	{r4, r5, r6, lr}
 80878ce:	4604      	mov	r4, r0
 80878d0:	460d      	mov	r5, r1
 80878d2:	4616      	mov	r6, r2
    writeSeparator();
 80878d4:	f7ff ff64 	bl	80877a0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 80878d8:	4620      	mov	r0, r4
 80878da:	4632      	mov	r2, r6
 80878dc:	4629      	mov	r1, r5
 80878de:	f7ff ff9d 	bl	808781c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 80878e2:	2302      	movs	r3, #2
}
 80878e4:	4620      	mov	r0, r4
    state_ = VALUE;
 80878e6:	7123      	strb	r3, [r4, #4]
}
 80878e8:	bd70      	pop	{r4, r5, r6, pc}

080878ea <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 80878ea:	b570      	push	{r4, r5, r6, lr}
 80878ec:	4604      	mov	r4, r0
 80878ee:	460d      	mov	r5, r1
 80878f0:	4616      	mov	r6, r2
    writeSeparator();
 80878f2:	f7ff ff55 	bl	80877a0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 80878f6:	4620      	mov	r0, r4
 80878f8:	4632      	mov	r2, r6
 80878fa:	4629      	mov	r1, r5
 80878fc:	f7ff ff8e 	bl	808781c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 8087900:	2301      	movs	r3, #1
}
 8087902:	4620      	mov	r0, r4
    state_ = NEXT;
 8087904:	7123      	strb	r3, [r4, #4]
}
 8087906:	bd70      	pop	{r4, r5, r6, pc}

08087908 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 8087908:	282e      	cmp	r0, #46	; 0x2e
bool pinAvailable(uint16_t pin) {
 808790a:	b570      	push	{r4, r5, r6, lr}
 808790c:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 808790e:	d901      	bls.n	8087914 <pinAvailable+0xc>
    return false;
 8087910:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 8087912:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 8087914:	f1a0 030d 	sub.w	r3, r0, #13
 8087918:	2b02      	cmp	r3, #2
 808791a:	d90b      	bls.n	8087934 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 808791c:	2801      	cmp	r0, #1
 808791e:	d826      	bhi.n	808796e <pinAvailable+0x66>
 8087920:	f000 f932 	bl	8087b88 <_Z19__fetch_global_Wirev>
 8087924:	2100      	movs	r1, #0
 8087926:	7c00      	ldrb	r0, [r0, #16]
 8087928:	f7fc fdc6 	bl	80844b8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 808792c:	f080 0001 	eor.w	r0, r0, #1
 8087930:	b2c0      	uxtb	r0, r0
 8087932:	e7ee      	b.n	8087912 <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 8087934:	4e13      	ldr	r6, [pc, #76]	; (8087984 <pinAvailable+0x7c>)
 8087936:	7831      	ldrb	r1, [r6, #0]
 8087938:	f3bf 8f5b 	dmb	ish
 808793c:	f011 0501 	ands.w	r5, r1, #1
 8087940:	d10f      	bne.n	8087962 <pinAvailable+0x5a>
 8087942:	4630      	mov	r0, r6
 8087944:	f7f8 fbca 	bl	80800dc <__cxa_guard_acquire>
 8087948:	b158      	cbz	r0, 8087962 <pinAvailable+0x5a>
 808794a:	4629      	mov	r1, r5
 808794c:	480e      	ldr	r0, [pc, #56]	; (8087988 <pinAvailable+0x80>)
 808794e:	f7fd f857 	bl	8084a00 <_ZN8SPIClassC1E19hal_spi_interface_t>
 8087952:	4630      	mov	r0, r6
 8087954:	f7f8 fbc7 	bl	80800e6 <__cxa_guard_release>
 8087958:	4a0c      	ldr	r2, [pc, #48]	; (808798c <pinAvailable+0x84>)
 808795a:	490d      	ldr	r1, [pc, #52]	; (8087990 <pinAvailable+0x88>)
 808795c:	480a      	ldr	r0, [pc, #40]	; (8087988 <pinAvailable+0x80>)
 808795e:	f000 f963 	bl	8087c28 <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 8087962:	4b09      	ldr	r3, [pc, #36]	; (8087988 <pinAvailable+0x80>)
 8087964:	7818      	ldrb	r0, [r3, #0]
 8087966:	f7fc fdff 	bl	8084568 <hal_spi_is_enabled>
 808796a:	2800      	cmp	r0, #0
 808796c:	d1d0      	bne.n	8087910 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 808796e:	3c12      	subs	r4, #18
 8087970:	2c01      	cmp	r4, #1
 8087972:	d805      	bhi.n	8087980 <pinAvailable+0x78>
 8087974:	f7ff fc80 	bl	8087278 <_Z22__fetch_global_Serial1v>
 8087978:	7c00      	ldrb	r0, [r0, #16]
 808797a:	f7fc fd45 	bl	8084408 <hal_usart_is_enabled>
 808797e:	e7d5      	b.n	808792c <pinAvailable+0x24>
  return true; // 'pin' is available
 8087980:	2001      	movs	r0, #1
 8087982:	e7c6      	b.n	8087912 <pinAvailable+0xa>
 8087984:	20000344 	.word	0x20000344
 8087988:	20000348 	.word	0x20000348
 808798c:	20000130 	.word	0x20000130
 8087990:	08082ff1 	.word	0x08082ff1

08087994 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8087994:	282e      	cmp	r0, #46	; 0x2e
{
 8087996:	b538      	push	{r3, r4, r5, lr}
 8087998:	4604      	mov	r4, r0
 808799a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 808799c:	d80a      	bhi.n	80879b4 <pinMode+0x20>
 808799e:	29ff      	cmp	r1, #255	; 0xff
 80879a0:	d008      	beq.n	80879b4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80879a2:	f7ff ffb1 	bl	8087908 <pinAvailable>
 80879a6:	b128      	cbz	r0, 80879b4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80879a8:	4629      	mov	r1, r5
 80879aa:	4620      	mov	r0, r4
}
 80879ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80879b0:	f7fc bbe2 	b.w	8084178 <HAL_Pin_Mode>
}
 80879b4:	bd38      	pop	{r3, r4, r5, pc}

080879b6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80879b6:	b538      	push	{r3, r4, r5, lr}
 80879b8:	4604      	mov	r4, r0
 80879ba:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80879bc:	f7fc fbe4 	bl	8084188 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80879c0:	28ff      	cmp	r0, #255	; 0xff
 80879c2:	d010      	beq.n	80879e6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80879c4:	2806      	cmp	r0, #6
 80879c6:	d804      	bhi.n	80879d2 <digitalWrite+0x1c>
 80879c8:	234d      	movs	r3, #77	; 0x4d
 80879ca:	fa23 f000 	lsr.w	r0, r3, r0
 80879ce:	07c3      	lsls	r3, r0, #31
 80879d0:	d409      	bmi.n	80879e6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80879d2:	4620      	mov	r0, r4
 80879d4:	f7ff ff98 	bl	8087908 <pinAvailable>
 80879d8:	b128      	cbz	r0, 80879e6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80879da:	4629      	mov	r1, r5
 80879dc:	4620      	mov	r0, r4
}
 80879de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80879e2:	f7fc bbd9 	b.w	8084198 <HAL_GPIO_Write>
}
 80879e6:	bd38      	pop	{r3, r4, r5, pc}

080879e8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80879e8:	b510      	push	{r4, lr}
 80879ea:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80879ec:	f7fc fbcc 	bl	8084188 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 80879f0:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 80879f2:	b2db      	uxtb	r3, r3
 80879f4:	2b01      	cmp	r3, #1
 80879f6:	d908      	bls.n	8087a0a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80879f8:	4620      	mov	r0, r4
 80879fa:	f7ff ff85 	bl	8087908 <pinAvailable>
 80879fe:	b120      	cbz	r0, 8087a0a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 8087a00:	4620      	mov	r0, r4
}
 8087a02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
 8087a06:	f7fc bbcf 	b.w	80841a8 <HAL_GPIO_Read>
}
 8087a0a:	2000      	movs	r0, #0
 8087a0c:	bd10      	pop	{r4, pc}

08087a0e <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 8087a0e:	b510      	push	{r4, lr}
 8087a10:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 8087a12:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 8087a14:	bf9c      	itt	ls
 8087a16:	340a      	addls	r4, #10
 8087a18:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 8087a1a:	4620      	mov	r0, r4
 8087a1c:	f7ff ff74 	bl	8087908 <pinAvailable>
 8087a20:	b150      	cbz	r0, 8087a38 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 8087a22:	2103      	movs	r1, #3
 8087a24:	4620      	mov	r0, r4
 8087a26:	f7fc fb9f 	bl	8084168 <HAL_Validate_Pin_Function>
 8087a2a:	2803      	cmp	r0, #3
 8087a2c:	d104      	bne.n	8087a38 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 8087a2e:	4620      	mov	r0, r4
}
 8087a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 8087a34:	f7fc bbe8 	b.w	8084208 <hal_adc_read>
}
 8087a38:	2000      	movs	r0, #0
 8087a3a:	bd10      	pop	{r4, pc}

08087a3c <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
 8087a3c:	b538      	push	{r3, r4, r5, lr}
 8087a3e:	4604      	mov	r4, r0
 8087a40:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
 8087a42:	f7ff ff61 	bl	8087908 <pinAvailable>
 8087a46:	b1f0      	cbz	r0, 8087a86 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
 8087a48:	2104      	movs	r1, #4
 8087a4a:	4620      	mov	r0, r4
 8087a4c:	f7fc fb8c 	bl	8084168 <HAL_Validate_Pin_Function>
 8087a50:	2804      	cmp	r0, #4
 8087a52:	d105      	bne.n	8087a60 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
 8087a54:	4620      	mov	r0, r4
 8087a56:	b2a9      	uxth	r1, r5
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
 8087a58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
 8087a5c:	f7fc bbcc 	b.w	80841f8 <HAL_DAC_Write>
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
 8087a60:	2102      	movs	r1, #2
 8087a62:	4620      	mov	r0, r4
 8087a64:	f7fc fb80 	bl	8084168 <HAL_Validate_Pin_Function>
 8087a68:	2802      	cmp	r0, #2
 8087a6a:	d10c      	bne.n	8087a86 <_Z11analogWritetm+0x4a>
        PinMode mode = HAL_Get_Pin_Mode(pin);
 8087a6c:	4620      	mov	r0, r4
 8087a6e:	f7fc fb8b 	bl	8084188 <HAL_Get_Pin_Mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
 8087a72:	2801      	cmp	r0, #1
 8087a74:	d001      	beq.n	8087a7a <_Z11analogWritetm+0x3e>
 8087a76:	2804      	cmp	r0, #4
 8087a78:	d105      	bne.n	8087a86 <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
 8087a7a:	4629      	mov	r1, r5
 8087a7c:	4620      	mov	r0, r4
}
 8087a7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
 8087a82:	f7fc bbc9 	b.w	8084218 <hal_pwm_write_ext>
}
 8087a86:	bd38      	pop	{r3, r4, r5, pc}

08087a88 <_ZN19ApplicationWatchdog4loopEv>:
	wd.loop();
	os_thread_cleanup(nullptr);
}

void ApplicationWatchdog::loop()
{
 8087a88:	b530      	push	{r4, r5, lr}
 8087a8a:	4604      	mov	r4, r0
	bool done = false;
	system_tick_t now;
	while (!done) {
		HAL_Delay_Milliseconds(timeout);
		now = current_time();
		done = (now-last_checkin)>=timeout;
 8087a8c:	4d1b      	ldr	r5, [pc, #108]	; (8087afc <_ZN19ApplicationWatchdog4loopEv+0x74>)
{
 8087a8e:	b089      	sub	sp, #36	; 0x24
		HAL_Delay_Milliseconds(timeout);
 8087a90:	6820      	ldr	r0, [r4, #0]
 8087a92:	f7fc fbd1 	bl	8084238 <HAL_Delay_Milliseconds>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8087a96:	f7fc fbdf 	bl	8084258 <HAL_Timer_Get_Milli_Seconds>
		done = (now-last_checkin)>=timeout;
 8087a9a:	682a      	ldr	r2, [r5, #0]
 8087a9c:	6823      	ldr	r3, [r4, #0]
 8087a9e:	1a80      	subs	r0, r0, r2
	while (!done) {
 8087aa0:	4298      	cmp	r0, r3
 8087aa2:	d3f5      	bcc.n	8087a90 <_ZN19ApplicationWatchdog4loopEv+0x8>
	}

	if (timeout>0 && timeout_fn) {
 8087aa4:	6823      	ldr	r3, [r4, #0]
 8087aa6:	b333      	cbz	r3, 8087af6 <_ZN19ApplicationWatchdog4loopEv+0x6e>
 8087aa8:	68e3      	ldr	r3, [r4, #12]
 8087aaa:	b323      	cbz	r3, 8087af6 <_ZN19ApplicationWatchdog4loopEv+0x6e>
		timeout_fn();
 8087aac:	1d25      	adds	r5, r4, #4
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8087aae:	4628      	mov	r0, r5
 8087ab0:	6923      	ldr	r3, [r4, #16]
 8087ab2:	4798      	blx	r3
    _Function_base() : _M_manager(nullptr) { }
 8087ab4:	2300      	movs	r3, #0
	std::swap(_M_functor, __x._M_functor);
 8087ab6:	4668      	mov	r0, sp
 8087ab8:	a904      	add	r1, sp, #16
    _Function_base() : _M_manager(nullptr) { }
 8087aba:	9302      	str	r3, [sp, #8]
 8087abc:	9306      	str	r3, [sp, #24]
	std::swap(_M_functor, __x._M_functor);
 8087abe:	f7fe fd24 	bl	808650a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8087ac2:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 8087ac4:	9a06      	ldr	r2, [sp, #24]
      __b = _GLIBCXX_MOVE(__tmp);
 8087ac6:	9306      	str	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 8087ac8:	9202      	str	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8087aca:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8087acc:	9a07      	ldr	r2, [sp, #28]
 8087ace:	4629      	mov	r1, r5
 8087ad0:	a804      	add	r0, sp, #16
 8087ad2:	9203      	str	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8087ad4:	9307      	str	r3, [sp, #28]
 8087ad6:	f7fe fd18 	bl	808650a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8087ada:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 8087adc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8087ade:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8087ae0:	9b07      	ldr	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 8087ae2:	9206      	str	r2, [sp, #24]
 8087ae4:	6922      	ldr	r2, [r4, #16]
    class function<_Res(_ArgTypes...)>
 8087ae6:	a804      	add	r0, sp, #16
      __b = _GLIBCXX_MOVE(__tmp);
 8087ae8:	6123      	str	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 8087aea:	9207      	str	r2, [sp, #28]
 8087aec:	f7f8 fc52 	bl	8080394 <_ZNSt14_Function_baseD1Ev>
 8087af0:	4668      	mov	r0, sp
 8087af2:	f7f8 fc4f 	bl	8080394 <_ZNSt14_Function_baseD1Ev>
		timeout_fn = std::function<void(void)>();
	}
}
 8087af6:	b009      	add	sp, #36	; 0x24
 8087af8:	bd30      	pop	{r4, r5, pc}
 8087afa:	bf00      	nop
 8087afc:	2000055c 	.word	0x2000055c

08087b00 <_ZN19ApplicationWatchdog5startEPv>:
{
 8087b00:	b508      	push	{r3, lr}
	wd.loop();
 8087b02:	f7ff ffc1 	bl	8087a88 <_ZN19ApplicationWatchdog4loopEv>
}
 8087b06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	os_thread_cleanup(nullptr);
 8087b0a:	2000      	movs	r0, #0
 8087b0c:	f7fc bbe4 	b.w	80842d8 <os_thread_cleanup>

08087b10 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 8087b10:	2300      	movs	r3, #0
 8087b12:	b513      	push	{r0, r1, r4, lr}
 8087b14:	4c07      	ldr	r4, [pc, #28]	; (8087b34 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 8087b16:	461a      	mov	r2, r3
 8087b18:	4619      	mov	r1, r3
 8087b1a:	4620      	mov	r0, r4
 8087b1c:	9300      	str	r3, [sp, #0]
 8087b1e:	f7ff f9b7 	bl	8086e90 <_ZN9IPAddressC1Ehhhh>
 8087b22:	4620      	mov	r0, r4
 8087b24:	4a04      	ldr	r2, [pc, #16]	; (8087b38 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 8087b26:	4905      	ldr	r1, [pc, #20]	; (8087b3c <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 8087b28:	b002      	add	sp, #8
 8087b2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8087b2e:	f000 b87b 	b.w	8087c28 <__aeabi_atexit>
 8087b32:	bf00      	nop
 8087b34:	20000560 	.word	0x20000560
 8087b38:	20000130 	.word	0x20000130
 8087b3c:	08086e09 	.word	0x08086e09

08087b40 <_ZN12_GLOBAL__N_117defaultWireConfigEv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 8087b40:	2300      	movs	r3, #0
hal_i2c_config_t defaultWireConfig() {
 8087b42:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 8087b44:	2520      	movs	r5, #32
 8087b46:	8043      	strh	r3, [r0, #2]
 8087b48:	2314      	movs	r3, #20
		.size = sizeof(hal_i2c_config_t),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8087b4a:	4e08      	ldr	r6, [pc, #32]	; (8087b6c <_ZN12_GLOBAL__N_117defaultWireConfigEv+0x2c>)
hal_i2c_config_t defaultWireConfig() {
 8087b4c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 8087b4e:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8087b50:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 8087b52:	6085      	str	r5, [r0, #8]
 8087b54:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8087b56:	4628      	mov	r0, r5
 8087b58:	f000 f86f 	bl	8087c3a <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8087b5c:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 8087b5e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8087b60:	4628      	mov	r0, r5
 8087b62:	f000 f86a 	bl	8087c3a <_ZnajRKSt9nothrow_t>
	};
 8087b66:	60e0      	str	r0, [r4, #12]

	return config;
}
 8087b68:	4620      	mov	r0, r4
 8087b6a:	bd70      	pop	{r4, r5, r6, pc}
 8087b6c:	08089f15 	.word	0x08089f15

08087b70 <_Z17acquireWireBufferv>:

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 8087b70:	b510      	push	{r4, lr}
 8087b72:	4604      	mov	r4, r0
	return defaultWireConfig();
 8087b74:	f7ff ffe4 	bl	8087b40 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
}
 8087b78:	4620      	mov	r0, r4
 8087b7a:	bd10      	pop	{r4, pc}

08087b7c <_Z18acquireWire3Bufferv>:
 8087b7c:	b510      	push	{r4, lr}
 8087b7e:	4604      	mov	r4, r0
 8087b80:	f7ff ffde 	bl	8087b40 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
 8087b84:	4620      	mov	r0, r4
 8087b86:	bd10      	pop	{r4, pc}

08087b88 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 8087b88:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 8087b8a:	4d0f      	ldr	r5, [pc, #60]	; (8087bc8 <_Z19__fetch_global_Wirev+0x40>)
{
 8087b8c:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 8087b8e:	7829      	ldrb	r1, [r5, #0]
 8087b90:	f3bf 8f5b 	dmb	ish
 8087b94:	f011 0401 	ands.w	r4, r1, #1
 8087b98:	d113      	bne.n	8087bc2 <_Z19__fetch_global_Wirev+0x3a>
 8087b9a:	4628      	mov	r0, r5
 8087b9c:	f7f8 fa9e 	bl	80800dc <__cxa_guard_acquire>
 8087ba0:	b178      	cbz	r0, 8087bc2 <_Z19__fetch_global_Wirev+0x3a>
 8087ba2:	a801      	add	r0, sp, #4
 8087ba4:	f7ff ffe4 	bl	8087b70 <_Z17acquireWireBufferv>
 8087ba8:	4621      	mov	r1, r4
 8087baa:	aa01      	add	r2, sp, #4
 8087bac:	4807      	ldr	r0, [pc, #28]	; (8087bcc <_Z19__fetch_global_Wirev+0x44>)
 8087bae:	f7ff fbe5 	bl	808737c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 8087bb2:	4628      	mov	r0, r5
 8087bb4:	f7f8 fa97 	bl	80800e6 <__cxa_guard_release>
 8087bb8:	4a05      	ldr	r2, [pc, #20]	; (8087bd0 <_Z19__fetch_global_Wirev+0x48>)
 8087bba:	4906      	ldr	r1, [pc, #24]	; (8087bd4 <_Z19__fetch_global_Wirev+0x4c>)
 8087bbc:	4803      	ldr	r0, [pc, #12]	; (8087bcc <_Z19__fetch_global_Wirev+0x44>)
 8087bbe:	f000 f833 	bl	8087c28 <__aeabi_atexit>
	return wire;
}
 8087bc2:	4802      	ldr	r0, [pc, #8]	; (8087bcc <_Z19__fetch_global_Wirev+0x44>)
 8087bc4:	b007      	add	sp, #28
 8087bc6:	bd30      	pop	{r4, r5, pc}
 8087bc8:	20000568 	.word	0x20000568
 8087bcc:	20000570 	.word	0x20000570
 8087bd0:	20000130 	.word	0x20000130
 8087bd4:	08087325 	.word	0x08087325

08087bd8 <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 8087bd8:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 8087bda:	4c0f      	ldr	r4, [pc, #60]	; (8087c18 <_Z20__fetch_global_Wire3v+0x40>)
{
 8087bdc:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 8087bde:	7823      	ldrb	r3, [r4, #0]
 8087be0:	f3bf 8f5b 	dmb	ish
 8087be4:	07db      	lsls	r3, r3, #31
 8087be6:	d413      	bmi.n	8087c10 <_Z20__fetch_global_Wire3v+0x38>
 8087be8:	4620      	mov	r0, r4
 8087bea:	f7f8 fa77 	bl	80800dc <__cxa_guard_acquire>
 8087bee:	b178      	cbz	r0, 8087c10 <_Z20__fetch_global_Wire3v+0x38>
 8087bf0:	a801      	add	r0, sp, #4
 8087bf2:	f7ff ffc3 	bl	8087b7c <_Z18acquireWire3Bufferv>
 8087bf6:	2102      	movs	r1, #2
 8087bf8:	aa01      	add	r2, sp, #4
 8087bfa:	4808      	ldr	r0, [pc, #32]	; (8087c1c <_Z20__fetch_global_Wire3v+0x44>)
 8087bfc:	f7ff fbbe 	bl	808737c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 8087c00:	4620      	mov	r0, r4
 8087c02:	f7f8 fa70 	bl	80800e6 <__cxa_guard_release>
 8087c06:	4a06      	ldr	r2, [pc, #24]	; (8087c20 <_Z20__fetch_global_Wire3v+0x48>)
 8087c08:	4906      	ldr	r1, [pc, #24]	; (8087c24 <_Z20__fetch_global_Wire3v+0x4c>)
 8087c0a:	4804      	ldr	r0, [pc, #16]	; (8087c1c <_Z20__fetch_global_Wire3v+0x44>)
 8087c0c:	f000 f80c 	bl	8087c28 <__aeabi_atexit>
	return wire;
}
 8087c10:	4802      	ldr	r0, [pc, #8]	; (8087c1c <_Z20__fetch_global_Wire3v+0x44>)
 8087c12:	b006      	add	sp, #24
 8087c14:	bd10      	pop	{r4, pc}
 8087c16:	bf00      	nop
 8087c18:	2000056c 	.word	0x2000056c
 8087c1c:	20000584 	.word	0x20000584
 8087c20:	20000130 	.word	0x20000130
 8087c24:	08087325 	.word	0x08087325

08087c28 <__aeabi_atexit>:
 8087c28:	460b      	mov	r3, r1
 8087c2a:	4601      	mov	r1, r0
 8087c2c:	4618      	mov	r0, r3
 8087c2e:	f001 b971 	b.w	8088f14 <__cxa_atexit>

08087c32 <_ZdlPvj>:
 8087c32:	f7f8 ba46 	b.w	80800c2 <_ZdlPv>

08087c36 <_ZnwjRKSt9nothrow_t>:
 8087c36:	f7f8 ba40 	b.w	80800ba <_Znwj>

08087c3a <_ZnajRKSt9nothrow_t>:
 8087c3a:	f7f8 ba40 	b.w	80800be <_Znaj>

08087c3e <_ZSt25__throw_bad_function_callv>:
 8087c3e:	b508      	push	{r3, lr}
 8087c40:	f7fc fe5a 	bl	80848f8 <abort>

08087c44 <sqrt>:
 8087c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8087c48:	b08b      	sub	sp, #44	; 0x2c
 8087c4a:	4604      	mov	r4, r0
 8087c4c:	460d      	mov	r5, r1
 8087c4e:	f000 f859 	bl	8087d04 <__ieee754_sqrt>
 8087c52:	4b2a      	ldr	r3, [pc, #168]	; (8087cfc <sqrt+0xb8>)
 8087c54:	4606      	mov	r6, r0
 8087c56:	f993 b000 	ldrsb.w	fp, [r3]
 8087c5a:	460f      	mov	r7, r1
 8087c5c:	f1bb 3fff 	cmp.w	fp, #4294967295
 8087c60:	d012      	beq.n	8087c88 <sqrt+0x44>
 8087c62:	4622      	mov	r2, r4
 8087c64:	462b      	mov	r3, r5
 8087c66:	4620      	mov	r0, r4
 8087c68:	4629      	mov	r1, r5
 8087c6a:	f000 fd67 	bl	808873c <__aeabi_dcmpun>
 8087c6e:	4682      	mov	sl, r0
 8087c70:	b950      	cbnz	r0, 8087c88 <sqrt+0x44>
 8087c72:	f04f 0800 	mov.w	r8, #0
 8087c76:	f04f 0900 	mov.w	r9, #0
 8087c7a:	4620      	mov	r0, r4
 8087c7c:	4629      	mov	r1, r5
 8087c7e:	4642      	mov	r2, r8
 8087c80:	464b      	mov	r3, r9
 8087c82:	f000 fd33 	bl	80886ec <__aeabi_dcmplt>
 8087c86:	b920      	cbnz	r0, 8087c92 <sqrt+0x4e>
 8087c88:	4630      	mov	r0, r6
 8087c8a:	4639      	mov	r1, r7
 8087c8c:	b00b      	add	sp, #44	; 0x2c
 8087c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8087c92:	2201      	movs	r2, #1
 8087c94:	4b1a      	ldr	r3, [pc, #104]	; (8087d00 <sqrt+0xbc>)
 8087c96:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8087c9a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8087c9e:	e9cd 2300 	strd	r2, r3, [sp]
 8087ca2:	f8cd a020 	str.w	sl, [sp, #32]
 8087ca6:	f1bb 0f00 	cmp.w	fp, #0
 8087caa:	d017      	beq.n	8087cdc <sqrt+0x98>
 8087cac:	4642      	mov	r2, r8
 8087cae:	464b      	mov	r3, r9
 8087cb0:	4640      	mov	r0, r8
 8087cb2:	4649      	mov	r1, r9
 8087cb4:	f000 fbd2 	bl	808845c <__aeabi_ddiv>
 8087cb8:	f1bb 0f02 	cmp.w	fp, #2
 8087cbc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8087cc0:	d10e      	bne.n	8087ce0 <sqrt+0x9c>
 8087cc2:	f7fc fe29 	bl	8084918 <__errno>
 8087cc6:	2321      	movs	r3, #33	; 0x21
 8087cc8:	6003      	str	r3, [r0, #0]
 8087cca:	9b08      	ldr	r3, [sp, #32]
 8087ccc:	b983      	cbnz	r3, 8087cf0 <sqrt+0xac>
 8087cce:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8087cd2:	4630      	mov	r0, r6
 8087cd4:	4639      	mov	r1, r7
 8087cd6:	b00b      	add	sp, #44	; 0x2c
 8087cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8087cdc:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8087ce0:	4668      	mov	r0, sp
 8087ce2:	f000 f8d3 	bl	8087e8c <matherr>
 8087ce6:	2800      	cmp	r0, #0
 8087ce8:	d0eb      	beq.n	8087cc2 <sqrt+0x7e>
 8087cea:	9b08      	ldr	r3, [sp, #32]
 8087cec:	2b00      	cmp	r3, #0
 8087cee:	d0ee      	beq.n	8087cce <sqrt+0x8a>
 8087cf0:	f7fc fe12 	bl	8084918 <__errno>
 8087cf4:	9b08      	ldr	r3, [sp, #32]
 8087cf6:	6003      	str	r3, [r0, #0]
 8087cf8:	e7e9      	b.n	8087cce <sqrt+0x8a>
 8087cfa:	bf00      	nop
 8087cfc:	200000c8 	.word	0x200000c8
 8087d00:	08089f18 	.word	0x08089f18

08087d04 <__ieee754_sqrt>:
 8087d04:	4a60      	ldr	r2, [pc, #384]	; (8087e88 <__ieee754_sqrt+0x184>)
 8087d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8087d0a:	438a      	bics	r2, r1
 8087d0c:	460e      	mov	r6, r1
 8087d0e:	4605      	mov	r5, r0
 8087d10:	f000 8097 	beq.w	8087e42 <__ieee754_sqrt+0x13e>
 8087d14:	2900      	cmp	r1, #0
 8087d16:	460b      	mov	r3, r1
 8087d18:	4604      	mov	r4, r0
 8087d1a:	dd4e      	ble.n	8087dba <__ieee754_sqrt+0xb6>
 8087d1c:	1509      	asrs	r1, r1, #20
 8087d1e:	d05a      	beq.n	8087dd6 <__ieee754_sqrt+0xd2>
 8087d20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8087d24:	07ca      	lsls	r2, r1, #31
 8087d26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8087d2a:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
 8087d2e:	d403      	bmi.n	8087d38 <__ieee754_sqrt+0x34>
 8087d30:	005b      	lsls	r3, r3, #1
 8087d32:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8087d36:	0064      	lsls	r4, r4, #1
 8087d38:	f04f 0c00 	mov.w	ip, #0
 8087d3c:	2516      	movs	r5, #22
 8087d3e:	4666      	mov	r6, ip
 8087d40:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8087d44:	0fe1      	lsrs	r1, r4, #31
 8087d46:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 8087d4a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8087d4e:	0064      	lsls	r4, r4, #1
 8087d50:	18b1      	adds	r1, r6, r2
 8087d52:	4299      	cmp	r1, r3
 8087d54:	dc02      	bgt.n	8087d5c <__ieee754_sqrt+0x58>
 8087d56:	1a5b      	subs	r3, r3, r1
 8087d58:	188e      	adds	r6, r1, r2
 8087d5a:	4494      	add	ip, r2
 8087d5c:	005b      	lsls	r3, r3, #1
 8087d5e:	3d01      	subs	r5, #1
 8087d60:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8087d64:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8087d68:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8087d6c:	d1f0      	bne.n	8087d50 <__ieee754_sqrt+0x4c>
 8087d6e:	462f      	mov	r7, r5
 8087d70:	2020      	movs	r0, #32
 8087d72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8087d76:	e009      	b.n	8087d8c <__ieee754_sqrt+0x88>
 8087d78:	d03d      	beq.n	8087df6 <__ieee754_sqrt+0xf2>
 8087d7a:	0fe1      	lsrs	r1, r4, #31
 8087d7c:	3801      	subs	r0, #1
 8087d7e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8087d82:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8087d86:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8087d8a:	d03d      	beq.n	8087e08 <__ieee754_sqrt+0x104>
 8087d8c:	42b3      	cmp	r3, r6
 8087d8e:	eb02 0105 	add.w	r1, r2, r5
 8087d92:	ddf1      	ble.n	8087d78 <__ieee754_sqrt+0x74>
 8087d94:	2900      	cmp	r1, #0
 8087d96:	eb01 0502 	add.w	r5, r1, r2
 8087d9a:	db09      	blt.n	8087db0 <__ieee754_sqrt+0xac>
 8087d9c:	46b0      	mov	r8, r6
 8087d9e:	1b9b      	subs	r3, r3, r6
 8087da0:	42a1      	cmp	r1, r4
 8087da2:	bf88      	it	hi
 8087da4:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8087da8:	4646      	mov	r6, r8
 8087daa:	1a64      	subs	r4, r4, r1
 8087dac:	4417      	add	r7, r2
 8087dae:	e7e4      	b.n	8087d7a <__ieee754_sqrt+0x76>
 8087db0:	2d00      	cmp	r5, #0
 8087db2:	dbf3      	blt.n	8087d9c <__ieee754_sqrt+0x98>
 8087db4:	f106 0801 	add.w	r8, r6, #1
 8087db8:	e7f1      	b.n	8087d9e <__ieee754_sqrt+0x9a>
 8087dba:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8087dbe:	4302      	orrs	r2, r0
 8087dc0:	d057      	beq.n	8087e72 <__ieee754_sqrt+0x16e>
 8087dc2:	2900      	cmp	r1, #0
 8087dc4:	d14b      	bne.n	8087e5e <__ieee754_sqrt+0x15a>
 8087dc6:	0ae2      	lsrs	r2, r4, #11
 8087dc8:	4613      	mov	r3, r2
 8087dca:	3915      	subs	r1, #21
 8087dcc:	0564      	lsls	r4, r4, #21
 8087dce:	2a00      	cmp	r2, #0
 8087dd0:	d0f9      	beq.n	8087dc6 <__ieee754_sqrt+0xc2>
 8087dd2:	02d7      	lsls	r7, r2, #11
 8087dd4:	d452      	bmi.n	8087e7c <__ieee754_sqrt+0x178>
 8087dd6:	2000      	movs	r0, #0
 8087dd8:	005b      	lsls	r3, r3, #1
 8087dda:	02de      	lsls	r6, r3, #11
 8087ddc:	4605      	mov	r5, r0
 8087dde:	f100 0001 	add.w	r0, r0, #1
 8087de2:	d5f9      	bpl.n	8087dd8 <__ieee754_sqrt+0xd4>
 8087de4:	461a      	mov	r2, r3
 8087de6:	4623      	mov	r3, r4
 8087de8:	4084      	lsls	r4, r0
 8087dea:	f1c0 0020 	rsb	r0, r0, #32
 8087dee:	40c3      	lsrs	r3, r0
 8087df0:	4313      	orrs	r3, r2
 8087df2:	1b49      	subs	r1, r1, r5
 8087df4:	e794      	b.n	8087d20 <__ieee754_sqrt+0x1c>
 8087df6:	42a1      	cmp	r1, r4
 8087df8:	d8bf      	bhi.n	8087d7a <__ieee754_sqrt+0x76>
 8087dfa:	2900      	cmp	r1, #0
 8087dfc:	eb01 0502 	add.w	r5, r1, r2
 8087e00:	dbd6      	blt.n	8087db0 <__ieee754_sqrt+0xac>
 8087e02:	4698      	mov	r8, r3
 8087e04:	2300      	movs	r3, #0
 8087e06:	e7cf      	b.n	8087da8 <__ieee754_sqrt+0xa4>
 8087e08:	4323      	orrs	r3, r4
 8087e0a:	d113      	bne.n	8087e34 <__ieee754_sqrt+0x130>
 8087e0c:	0878      	lsrs	r0, r7, #1
 8087e0e:	ea4f 036c 	mov.w	r3, ip, asr #1
 8087e12:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8087e16:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8087e1a:	f01c 0f01 	tst.w	ip, #1
 8087e1e:	bf18      	it	ne
 8087e20:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
 8087e24:	eb03 550e 	add.w	r5, r3, lr, lsl #20
 8087e28:	4602      	mov	r2, r0
 8087e2a:	462b      	mov	r3, r5
 8087e2c:	4610      	mov	r0, r2
 8087e2e:	4619      	mov	r1, r3
 8087e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8087e34:	1c7b      	adds	r3, r7, #1
 8087e36:	bf16      	itet	ne
 8087e38:	1c78      	addne	r0, r7, #1
 8087e3a:	f10c 0c01 	addeq.w	ip, ip, #1
 8087e3e:	0840      	lsrne	r0, r0, #1
 8087e40:	e7e5      	b.n	8087e0e <__ieee754_sqrt+0x10a>
 8087e42:	4602      	mov	r2, r0
 8087e44:	460b      	mov	r3, r1
 8087e46:	f000 f9df 	bl	8088208 <__aeabi_dmul>
 8087e4a:	462a      	mov	r2, r5
 8087e4c:	4633      	mov	r3, r6
 8087e4e:	f000 f825 	bl	8087e9c <__adddf3>
 8087e52:	4602      	mov	r2, r0
 8087e54:	460b      	mov	r3, r1
 8087e56:	4610      	mov	r0, r2
 8087e58:	4619      	mov	r1, r3
 8087e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8087e5e:	4602      	mov	r2, r0
 8087e60:	f000 f81a 	bl	8087e98 <__aeabi_dsub>
 8087e64:	4602      	mov	r2, r0
 8087e66:	460b      	mov	r3, r1
 8087e68:	f000 faf8 	bl	808845c <__aeabi_ddiv>
 8087e6c:	4602      	mov	r2, r0
 8087e6e:	460b      	mov	r3, r1
 8087e70:	e7dc      	b.n	8087e2c <__ieee754_sqrt+0x128>
 8087e72:	4602      	mov	r2, r0
 8087e74:	4619      	mov	r1, r3
 8087e76:	4610      	mov	r0, r2
 8087e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8087e7c:	4623      	mov	r3, r4
 8087e7e:	2020      	movs	r0, #32
 8087e80:	f04f 35ff 	mov.w	r5, #4294967295
 8087e84:	e7b3      	b.n	8087dee <__ieee754_sqrt+0xea>
 8087e86:	bf00      	nop
 8087e88:	7ff00000 	.word	0x7ff00000

08087e8c <matherr>:
 8087e8c:	2000      	movs	r0, #0
 8087e8e:	4770      	bx	lr

08087e90 <__aeabi_drsub>:
 8087e90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8087e94:	e002      	b.n	8087e9c <__adddf3>
 8087e96:	bf00      	nop

08087e98 <__aeabi_dsub>:
 8087e98:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08087e9c <__adddf3>:
 8087e9c:	b530      	push	{r4, r5, lr}
 8087e9e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8087ea2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8087ea6:	ea94 0f05 	teq	r4, r5
 8087eaa:	bf08      	it	eq
 8087eac:	ea90 0f02 	teqeq	r0, r2
 8087eb0:	bf1f      	itttt	ne
 8087eb2:	ea54 0c00 	orrsne.w	ip, r4, r0
 8087eb6:	ea55 0c02 	orrsne.w	ip, r5, r2
 8087eba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8087ebe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8087ec2:	f000 80e2 	beq.w	808808a <__adddf3+0x1ee>
 8087ec6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8087eca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8087ece:	bfb8      	it	lt
 8087ed0:	426d      	neglt	r5, r5
 8087ed2:	dd0c      	ble.n	8087eee <__adddf3+0x52>
 8087ed4:	442c      	add	r4, r5
 8087ed6:	ea80 0202 	eor.w	r2, r0, r2
 8087eda:	ea81 0303 	eor.w	r3, r1, r3
 8087ede:	ea82 0000 	eor.w	r0, r2, r0
 8087ee2:	ea83 0101 	eor.w	r1, r3, r1
 8087ee6:	ea80 0202 	eor.w	r2, r0, r2
 8087eea:	ea81 0303 	eor.w	r3, r1, r3
 8087eee:	2d36      	cmp	r5, #54	; 0x36
 8087ef0:	bf88      	it	hi
 8087ef2:	bd30      	pophi	{r4, r5, pc}
 8087ef4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8087ef8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8087efc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8087f00:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8087f04:	d002      	beq.n	8087f0c <__adddf3+0x70>
 8087f06:	4240      	negs	r0, r0
 8087f08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8087f0c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8087f10:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8087f14:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8087f18:	d002      	beq.n	8087f20 <__adddf3+0x84>
 8087f1a:	4252      	negs	r2, r2
 8087f1c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8087f20:	ea94 0f05 	teq	r4, r5
 8087f24:	f000 80a7 	beq.w	8088076 <__adddf3+0x1da>
 8087f28:	f1a4 0401 	sub.w	r4, r4, #1
 8087f2c:	f1d5 0e20 	rsbs	lr, r5, #32
 8087f30:	db0d      	blt.n	8087f4e <__adddf3+0xb2>
 8087f32:	fa02 fc0e 	lsl.w	ip, r2, lr
 8087f36:	fa22 f205 	lsr.w	r2, r2, r5
 8087f3a:	1880      	adds	r0, r0, r2
 8087f3c:	f141 0100 	adc.w	r1, r1, #0
 8087f40:	fa03 f20e 	lsl.w	r2, r3, lr
 8087f44:	1880      	adds	r0, r0, r2
 8087f46:	fa43 f305 	asr.w	r3, r3, r5
 8087f4a:	4159      	adcs	r1, r3
 8087f4c:	e00e      	b.n	8087f6c <__adddf3+0xd0>
 8087f4e:	f1a5 0520 	sub.w	r5, r5, #32
 8087f52:	f10e 0e20 	add.w	lr, lr, #32
 8087f56:	2a01      	cmp	r2, #1
 8087f58:	fa03 fc0e 	lsl.w	ip, r3, lr
 8087f5c:	bf28      	it	cs
 8087f5e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8087f62:	fa43 f305 	asr.w	r3, r3, r5
 8087f66:	18c0      	adds	r0, r0, r3
 8087f68:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8087f6c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8087f70:	d507      	bpl.n	8087f82 <__adddf3+0xe6>
 8087f72:	f04f 0e00 	mov.w	lr, #0
 8087f76:	f1dc 0c00 	rsbs	ip, ip, #0
 8087f7a:	eb7e 0000 	sbcs.w	r0, lr, r0
 8087f7e:	eb6e 0101 	sbc.w	r1, lr, r1
 8087f82:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8087f86:	d31b      	bcc.n	8087fc0 <__adddf3+0x124>
 8087f88:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8087f8c:	d30c      	bcc.n	8087fa8 <__adddf3+0x10c>
 8087f8e:	0849      	lsrs	r1, r1, #1
 8087f90:	ea5f 0030 	movs.w	r0, r0, rrx
 8087f94:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8087f98:	f104 0401 	add.w	r4, r4, #1
 8087f9c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8087fa0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8087fa4:	f080 809a 	bcs.w	80880dc <__adddf3+0x240>
 8087fa8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8087fac:	bf08      	it	eq
 8087fae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8087fb2:	f150 0000 	adcs.w	r0, r0, #0
 8087fb6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8087fba:	ea41 0105 	orr.w	r1, r1, r5
 8087fbe:	bd30      	pop	{r4, r5, pc}
 8087fc0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8087fc4:	4140      	adcs	r0, r0
 8087fc6:	eb41 0101 	adc.w	r1, r1, r1
 8087fca:	3c01      	subs	r4, #1
 8087fcc:	bf28      	it	cs
 8087fce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8087fd2:	d2e9      	bcs.n	8087fa8 <__adddf3+0x10c>
 8087fd4:	f091 0f00 	teq	r1, #0
 8087fd8:	bf04      	itt	eq
 8087fda:	4601      	moveq	r1, r0
 8087fdc:	2000      	moveq	r0, #0
 8087fde:	fab1 f381 	clz	r3, r1
 8087fe2:	bf08      	it	eq
 8087fe4:	3320      	addeq	r3, #32
 8087fe6:	f1a3 030b 	sub.w	r3, r3, #11
 8087fea:	f1b3 0220 	subs.w	r2, r3, #32
 8087fee:	da0c      	bge.n	808800a <__adddf3+0x16e>
 8087ff0:	320c      	adds	r2, #12
 8087ff2:	dd08      	ble.n	8088006 <__adddf3+0x16a>
 8087ff4:	f102 0c14 	add.w	ip, r2, #20
 8087ff8:	f1c2 020c 	rsb	r2, r2, #12
 8087ffc:	fa01 f00c 	lsl.w	r0, r1, ip
 8088000:	fa21 f102 	lsr.w	r1, r1, r2
 8088004:	e00c      	b.n	8088020 <__adddf3+0x184>
 8088006:	f102 0214 	add.w	r2, r2, #20
 808800a:	bfd8      	it	le
 808800c:	f1c2 0c20 	rsble	ip, r2, #32
 8088010:	fa01 f102 	lsl.w	r1, r1, r2
 8088014:	fa20 fc0c 	lsr.w	ip, r0, ip
 8088018:	bfdc      	itt	le
 808801a:	ea41 010c 	orrle.w	r1, r1, ip
 808801e:	4090      	lslle	r0, r2
 8088020:	1ae4      	subs	r4, r4, r3
 8088022:	bfa2      	ittt	ge
 8088024:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8088028:	4329      	orrge	r1, r5
 808802a:	bd30      	popge	{r4, r5, pc}
 808802c:	ea6f 0404 	mvn.w	r4, r4
 8088030:	3c1f      	subs	r4, #31
 8088032:	da1c      	bge.n	808806e <__adddf3+0x1d2>
 8088034:	340c      	adds	r4, #12
 8088036:	dc0e      	bgt.n	8088056 <__adddf3+0x1ba>
 8088038:	f104 0414 	add.w	r4, r4, #20
 808803c:	f1c4 0220 	rsb	r2, r4, #32
 8088040:	fa20 f004 	lsr.w	r0, r0, r4
 8088044:	fa01 f302 	lsl.w	r3, r1, r2
 8088048:	ea40 0003 	orr.w	r0, r0, r3
 808804c:	fa21 f304 	lsr.w	r3, r1, r4
 8088050:	ea45 0103 	orr.w	r1, r5, r3
 8088054:	bd30      	pop	{r4, r5, pc}
 8088056:	f1c4 040c 	rsb	r4, r4, #12
 808805a:	f1c4 0220 	rsb	r2, r4, #32
 808805e:	fa20 f002 	lsr.w	r0, r0, r2
 8088062:	fa01 f304 	lsl.w	r3, r1, r4
 8088066:	ea40 0003 	orr.w	r0, r0, r3
 808806a:	4629      	mov	r1, r5
 808806c:	bd30      	pop	{r4, r5, pc}
 808806e:	fa21 f004 	lsr.w	r0, r1, r4
 8088072:	4629      	mov	r1, r5
 8088074:	bd30      	pop	{r4, r5, pc}
 8088076:	f094 0f00 	teq	r4, #0
 808807a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 808807e:	bf06      	itte	eq
 8088080:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8088084:	3401      	addeq	r4, #1
 8088086:	3d01      	subne	r5, #1
 8088088:	e74e      	b.n	8087f28 <__adddf3+0x8c>
 808808a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 808808e:	bf18      	it	ne
 8088090:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8088094:	d029      	beq.n	80880ea <__adddf3+0x24e>
 8088096:	ea94 0f05 	teq	r4, r5
 808809a:	bf08      	it	eq
 808809c:	ea90 0f02 	teqeq	r0, r2
 80880a0:	d005      	beq.n	80880ae <__adddf3+0x212>
 80880a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80880a6:	bf04      	itt	eq
 80880a8:	4619      	moveq	r1, r3
 80880aa:	4610      	moveq	r0, r2
 80880ac:	bd30      	pop	{r4, r5, pc}
 80880ae:	ea91 0f03 	teq	r1, r3
 80880b2:	bf1e      	ittt	ne
 80880b4:	2100      	movne	r1, #0
 80880b6:	2000      	movne	r0, #0
 80880b8:	bd30      	popne	{r4, r5, pc}
 80880ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80880be:	d105      	bne.n	80880cc <__adddf3+0x230>
 80880c0:	0040      	lsls	r0, r0, #1
 80880c2:	4149      	adcs	r1, r1
 80880c4:	bf28      	it	cs
 80880c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80880ca:	bd30      	pop	{r4, r5, pc}
 80880cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80880d0:	bf3c      	itt	cc
 80880d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80880d6:	bd30      	popcc	{r4, r5, pc}
 80880d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80880dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80880e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80880e4:	f04f 0000 	mov.w	r0, #0
 80880e8:	bd30      	pop	{r4, r5, pc}
 80880ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80880ee:	bf1a      	itte	ne
 80880f0:	4619      	movne	r1, r3
 80880f2:	4610      	movne	r0, r2
 80880f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80880f8:	bf1c      	itt	ne
 80880fa:	460b      	movne	r3, r1
 80880fc:	4602      	movne	r2, r0
 80880fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8088102:	bf06      	itte	eq
 8088104:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8088108:	ea91 0f03 	teqeq	r1, r3
 808810c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8088110:	bd30      	pop	{r4, r5, pc}
 8088112:	bf00      	nop

08088114 <__aeabi_ui2d>:
 8088114:	f090 0f00 	teq	r0, #0
 8088118:	bf04      	itt	eq
 808811a:	2100      	moveq	r1, #0
 808811c:	4770      	bxeq	lr
 808811e:	b530      	push	{r4, r5, lr}
 8088120:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8088124:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8088128:	f04f 0500 	mov.w	r5, #0
 808812c:	f04f 0100 	mov.w	r1, #0
 8088130:	e750      	b.n	8087fd4 <__adddf3+0x138>
 8088132:	bf00      	nop

08088134 <__aeabi_i2d>:
 8088134:	f090 0f00 	teq	r0, #0
 8088138:	bf04      	itt	eq
 808813a:	2100      	moveq	r1, #0
 808813c:	4770      	bxeq	lr
 808813e:	b530      	push	{r4, r5, lr}
 8088140:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8088144:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8088148:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 808814c:	bf48      	it	mi
 808814e:	4240      	negmi	r0, r0
 8088150:	f04f 0100 	mov.w	r1, #0
 8088154:	e73e      	b.n	8087fd4 <__adddf3+0x138>
 8088156:	bf00      	nop

08088158 <__aeabi_f2d>:
 8088158:	0042      	lsls	r2, r0, #1
 808815a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 808815e:	ea4f 0131 	mov.w	r1, r1, rrx
 8088162:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8088166:	bf1f      	itttt	ne
 8088168:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 808816c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8088170:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8088174:	4770      	bxne	lr
 8088176:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 808817a:	bf08      	it	eq
 808817c:	4770      	bxeq	lr
 808817e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8088182:	bf04      	itt	eq
 8088184:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8088188:	4770      	bxeq	lr
 808818a:	b530      	push	{r4, r5, lr}
 808818c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8088190:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8088194:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8088198:	e71c      	b.n	8087fd4 <__adddf3+0x138>
 808819a:	bf00      	nop

0808819c <__aeabi_ul2d>:
 808819c:	ea50 0201 	orrs.w	r2, r0, r1
 80881a0:	bf08      	it	eq
 80881a2:	4770      	bxeq	lr
 80881a4:	b530      	push	{r4, r5, lr}
 80881a6:	f04f 0500 	mov.w	r5, #0
 80881aa:	e00a      	b.n	80881c2 <__aeabi_l2d+0x16>

080881ac <__aeabi_l2d>:
 80881ac:	ea50 0201 	orrs.w	r2, r0, r1
 80881b0:	bf08      	it	eq
 80881b2:	4770      	bxeq	lr
 80881b4:	b530      	push	{r4, r5, lr}
 80881b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80881ba:	d502      	bpl.n	80881c2 <__aeabi_l2d+0x16>
 80881bc:	4240      	negs	r0, r0
 80881be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80881c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80881c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80881ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80881ce:	f43f aed8 	beq.w	8087f82 <__adddf3+0xe6>
 80881d2:	f04f 0203 	mov.w	r2, #3
 80881d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80881da:	bf18      	it	ne
 80881dc:	3203      	addne	r2, #3
 80881de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80881e2:	bf18      	it	ne
 80881e4:	3203      	addne	r2, #3
 80881e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80881ea:	f1c2 0320 	rsb	r3, r2, #32
 80881ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80881f2:	fa20 f002 	lsr.w	r0, r0, r2
 80881f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80881fa:	ea40 000e 	orr.w	r0, r0, lr
 80881fe:	fa21 f102 	lsr.w	r1, r1, r2
 8088202:	4414      	add	r4, r2
 8088204:	e6bd      	b.n	8087f82 <__adddf3+0xe6>
 8088206:	bf00      	nop

08088208 <__aeabi_dmul>:
 8088208:	b570      	push	{r4, r5, r6, lr}
 808820a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808820e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8088212:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8088216:	bf1d      	ittte	ne
 8088218:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 808821c:	ea94 0f0c 	teqne	r4, ip
 8088220:	ea95 0f0c 	teqne	r5, ip
 8088224:	f000 f8de 	bleq	80883e4 <__aeabi_dmul+0x1dc>
 8088228:	442c      	add	r4, r5
 808822a:	ea81 0603 	eor.w	r6, r1, r3
 808822e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8088232:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8088236:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 808823a:	bf18      	it	ne
 808823c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8088240:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8088244:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8088248:	d038      	beq.n	80882bc <__aeabi_dmul+0xb4>
 808824a:	fba0 ce02 	umull	ip, lr, r0, r2
 808824e:	f04f 0500 	mov.w	r5, #0
 8088252:	fbe1 e502 	umlal	lr, r5, r1, r2
 8088256:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 808825a:	fbe0 e503 	umlal	lr, r5, r0, r3
 808825e:	f04f 0600 	mov.w	r6, #0
 8088262:	fbe1 5603 	umlal	r5, r6, r1, r3
 8088266:	f09c 0f00 	teq	ip, #0
 808826a:	bf18      	it	ne
 808826c:	f04e 0e01 	orrne.w	lr, lr, #1
 8088270:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8088274:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8088278:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 808827c:	d204      	bcs.n	8088288 <__aeabi_dmul+0x80>
 808827e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8088282:	416d      	adcs	r5, r5
 8088284:	eb46 0606 	adc.w	r6, r6, r6
 8088288:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 808828c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8088290:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8088294:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8088298:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 808829c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80882a0:	bf88      	it	hi
 80882a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80882a6:	d81e      	bhi.n	80882e6 <__aeabi_dmul+0xde>
 80882a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80882ac:	bf08      	it	eq
 80882ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80882b2:	f150 0000 	adcs.w	r0, r0, #0
 80882b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80882ba:	bd70      	pop	{r4, r5, r6, pc}
 80882bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80882c0:	ea46 0101 	orr.w	r1, r6, r1
 80882c4:	ea40 0002 	orr.w	r0, r0, r2
 80882c8:	ea81 0103 	eor.w	r1, r1, r3
 80882cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80882d0:	bfc2      	ittt	gt
 80882d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80882d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80882da:	bd70      	popgt	{r4, r5, r6, pc}
 80882dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80882e0:	f04f 0e00 	mov.w	lr, #0
 80882e4:	3c01      	subs	r4, #1
 80882e6:	f300 80ab 	bgt.w	8088440 <__aeabi_dmul+0x238>
 80882ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80882ee:	bfde      	ittt	le
 80882f0:	2000      	movle	r0, #0
 80882f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80882f6:	bd70      	pople	{r4, r5, r6, pc}
 80882f8:	f1c4 0400 	rsb	r4, r4, #0
 80882fc:	3c20      	subs	r4, #32
 80882fe:	da35      	bge.n	808836c <__aeabi_dmul+0x164>
 8088300:	340c      	adds	r4, #12
 8088302:	dc1b      	bgt.n	808833c <__aeabi_dmul+0x134>
 8088304:	f104 0414 	add.w	r4, r4, #20
 8088308:	f1c4 0520 	rsb	r5, r4, #32
 808830c:	fa00 f305 	lsl.w	r3, r0, r5
 8088310:	fa20 f004 	lsr.w	r0, r0, r4
 8088314:	fa01 f205 	lsl.w	r2, r1, r5
 8088318:	ea40 0002 	orr.w	r0, r0, r2
 808831c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8088320:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8088324:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8088328:	fa21 f604 	lsr.w	r6, r1, r4
 808832c:	eb42 0106 	adc.w	r1, r2, r6
 8088330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8088334:	bf08      	it	eq
 8088336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808833a:	bd70      	pop	{r4, r5, r6, pc}
 808833c:	f1c4 040c 	rsb	r4, r4, #12
 8088340:	f1c4 0520 	rsb	r5, r4, #32
 8088344:	fa00 f304 	lsl.w	r3, r0, r4
 8088348:	fa20 f005 	lsr.w	r0, r0, r5
 808834c:	fa01 f204 	lsl.w	r2, r1, r4
 8088350:	ea40 0002 	orr.w	r0, r0, r2
 8088354:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8088358:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 808835c:	f141 0100 	adc.w	r1, r1, #0
 8088360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8088364:	bf08      	it	eq
 8088366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808836a:	bd70      	pop	{r4, r5, r6, pc}
 808836c:	f1c4 0520 	rsb	r5, r4, #32
 8088370:	fa00 f205 	lsl.w	r2, r0, r5
 8088374:	ea4e 0e02 	orr.w	lr, lr, r2
 8088378:	fa20 f304 	lsr.w	r3, r0, r4
 808837c:	fa01 f205 	lsl.w	r2, r1, r5
 8088380:	ea43 0302 	orr.w	r3, r3, r2
 8088384:	fa21 f004 	lsr.w	r0, r1, r4
 8088388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808838c:	fa21 f204 	lsr.w	r2, r1, r4
 8088390:	ea20 0002 	bic.w	r0, r0, r2
 8088394:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8088398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808839c:	bf08      	it	eq
 808839e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80883a2:	bd70      	pop	{r4, r5, r6, pc}
 80883a4:	f094 0f00 	teq	r4, #0
 80883a8:	d10f      	bne.n	80883ca <__aeabi_dmul+0x1c2>
 80883aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80883ae:	0040      	lsls	r0, r0, #1
 80883b0:	eb41 0101 	adc.w	r1, r1, r1
 80883b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80883b8:	bf08      	it	eq
 80883ba:	3c01      	subeq	r4, #1
 80883bc:	d0f7      	beq.n	80883ae <__aeabi_dmul+0x1a6>
 80883be:	ea41 0106 	orr.w	r1, r1, r6
 80883c2:	f095 0f00 	teq	r5, #0
 80883c6:	bf18      	it	ne
 80883c8:	4770      	bxne	lr
 80883ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80883ce:	0052      	lsls	r2, r2, #1
 80883d0:	eb43 0303 	adc.w	r3, r3, r3
 80883d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80883d8:	bf08      	it	eq
 80883da:	3d01      	subeq	r5, #1
 80883dc:	d0f7      	beq.n	80883ce <__aeabi_dmul+0x1c6>
 80883de:	ea43 0306 	orr.w	r3, r3, r6
 80883e2:	4770      	bx	lr
 80883e4:	ea94 0f0c 	teq	r4, ip
 80883e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80883ec:	bf18      	it	ne
 80883ee:	ea95 0f0c 	teqne	r5, ip
 80883f2:	d00c      	beq.n	808840e <__aeabi_dmul+0x206>
 80883f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80883f8:	bf18      	it	ne
 80883fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80883fe:	d1d1      	bne.n	80883a4 <__aeabi_dmul+0x19c>
 8088400:	ea81 0103 	eor.w	r1, r1, r3
 8088404:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8088408:	f04f 0000 	mov.w	r0, #0
 808840c:	bd70      	pop	{r4, r5, r6, pc}
 808840e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8088412:	bf06      	itte	eq
 8088414:	4610      	moveq	r0, r2
 8088416:	4619      	moveq	r1, r3
 8088418:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808841c:	d019      	beq.n	8088452 <__aeabi_dmul+0x24a>
 808841e:	ea94 0f0c 	teq	r4, ip
 8088422:	d102      	bne.n	808842a <__aeabi_dmul+0x222>
 8088424:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8088428:	d113      	bne.n	8088452 <__aeabi_dmul+0x24a>
 808842a:	ea95 0f0c 	teq	r5, ip
 808842e:	d105      	bne.n	808843c <__aeabi_dmul+0x234>
 8088430:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8088434:	bf1c      	itt	ne
 8088436:	4610      	movne	r0, r2
 8088438:	4619      	movne	r1, r3
 808843a:	d10a      	bne.n	8088452 <__aeabi_dmul+0x24a>
 808843c:	ea81 0103 	eor.w	r1, r1, r3
 8088440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8088444:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8088448:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 808844c:	f04f 0000 	mov.w	r0, #0
 8088450:	bd70      	pop	{r4, r5, r6, pc}
 8088452:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8088456:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 808845a:	bd70      	pop	{r4, r5, r6, pc}

0808845c <__aeabi_ddiv>:
 808845c:	b570      	push	{r4, r5, r6, lr}
 808845e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8088462:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8088466:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808846a:	bf1d      	ittte	ne
 808846c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8088470:	ea94 0f0c 	teqne	r4, ip
 8088474:	ea95 0f0c 	teqne	r5, ip
 8088478:	f000 f8a7 	bleq	80885ca <__aeabi_ddiv+0x16e>
 808847c:	eba4 0405 	sub.w	r4, r4, r5
 8088480:	ea81 0e03 	eor.w	lr, r1, r3
 8088484:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8088488:	ea4f 3101 	mov.w	r1, r1, lsl #12
 808848c:	f000 8088 	beq.w	80885a0 <__aeabi_ddiv+0x144>
 8088490:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8088494:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8088498:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 808849c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80884a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80884a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80884a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80884ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80884b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80884b4:	429d      	cmp	r5, r3
 80884b6:	bf08      	it	eq
 80884b8:	4296      	cmpeq	r6, r2
 80884ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80884be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80884c2:	d202      	bcs.n	80884ca <__aeabi_ddiv+0x6e>
 80884c4:	085b      	lsrs	r3, r3, #1
 80884c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80884ca:	1ab6      	subs	r6, r6, r2
 80884cc:	eb65 0503 	sbc.w	r5, r5, r3
 80884d0:	085b      	lsrs	r3, r3, #1
 80884d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80884d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80884da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80884de:	ebb6 0e02 	subs.w	lr, r6, r2
 80884e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80884e6:	bf22      	ittt	cs
 80884e8:	1ab6      	subcs	r6, r6, r2
 80884ea:	4675      	movcs	r5, lr
 80884ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80884f0:	085b      	lsrs	r3, r3, #1
 80884f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80884f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80884fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80884fe:	bf22      	ittt	cs
 8088500:	1ab6      	subcs	r6, r6, r2
 8088502:	4675      	movcs	r5, lr
 8088504:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8088508:	085b      	lsrs	r3, r3, #1
 808850a:	ea4f 0232 	mov.w	r2, r2, rrx
 808850e:	ebb6 0e02 	subs.w	lr, r6, r2
 8088512:	eb75 0e03 	sbcs.w	lr, r5, r3
 8088516:	bf22      	ittt	cs
 8088518:	1ab6      	subcs	r6, r6, r2
 808851a:	4675      	movcs	r5, lr
 808851c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8088520:	085b      	lsrs	r3, r3, #1
 8088522:	ea4f 0232 	mov.w	r2, r2, rrx
 8088526:	ebb6 0e02 	subs.w	lr, r6, r2
 808852a:	eb75 0e03 	sbcs.w	lr, r5, r3
 808852e:	bf22      	ittt	cs
 8088530:	1ab6      	subcs	r6, r6, r2
 8088532:	4675      	movcs	r5, lr
 8088534:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8088538:	ea55 0e06 	orrs.w	lr, r5, r6
 808853c:	d018      	beq.n	8088570 <__aeabi_ddiv+0x114>
 808853e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8088542:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8088546:	ea4f 1606 	mov.w	r6, r6, lsl #4
 808854a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 808854e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8088552:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8088556:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 808855a:	d1c0      	bne.n	80884de <__aeabi_ddiv+0x82>
 808855c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8088560:	d10b      	bne.n	808857a <__aeabi_ddiv+0x11e>
 8088562:	ea41 0100 	orr.w	r1, r1, r0
 8088566:	f04f 0000 	mov.w	r0, #0
 808856a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 808856e:	e7b6      	b.n	80884de <__aeabi_ddiv+0x82>
 8088570:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8088574:	bf04      	itt	eq
 8088576:	4301      	orreq	r1, r0
 8088578:	2000      	moveq	r0, #0
 808857a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808857e:	bf88      	it	hi
 8088580:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8088584:	f63f aeaf 	bhi.w	80882e6 <__aeabi_dmul+0xde>
 8088588:	ebb5 0c03 	subs.w	ip, r5, r3
 808858c:	bf04      	itt	eq
 808858e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8088592:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8088596:	f150 0000 	adcs.w	r0, r0, #0
 808859a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808859e:	bd70      	pop	{r4, r5, r6, pc}
 80885a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80885a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80885a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80885ac:	bfc2      	ittt	gt
 80885ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80885b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80885b6:	bd70      	popgt	{r4, r5, r6, pc}
 80885b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80885bc:	f04f 0e00 	mov.w	lr, #0
 80885c0:	3c01      	subs	r4, #1
 80885c2:	e690      	b.n	80882e6 <__aeabi_dmul+0xde>
 80885c4:	ea45 0e06 	orr.w	lr, r5, r6
 80885c8:	e68d      	b.n	80882e6 <__aeabi_dmul+0xde>
 80885ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80885ce:	ea94 0f0c 	teq	r4, ip
 80885d2:	bf08      	it	eq
 80885d4:	ea95 0f0c 	teqeq	r5, ip
 80885d8:	f43f af3b 	beq.w	8088452 <__aeabi_dmul+0x24a>
 80885dc:	ea94 0f0c 	teq	r4, ip
 80885e0:	d10a      	bne.n	80885f8 <__aeabi_ddiv+0x19c>
 80885e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80885e6:	f47f af34 	bne.w	8088452 <__aeabi_dmul+0x24a>
 80885ea:	ea95 0f0c 	teq	r5, ip
 80885ee:	f47f af25 	bne.w	808843c <__aeabi_dmul+0x234>
 80885f2:	4610      	mov	r0, r2
 80885f4:	4619      	mov	r1, r3
 80885f6:	e72c      	b.n	8088452 <__aeabi_dmul+0x24a>
 80885f8:	ea95 0f0c 	teq	r5, ip
 80885fc:	d106      	bne.n	808860c <__aeabi_ddiv+0x1b0>
 80885fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8088602:	f43f aefd 	beq.w	8088400 <__aeabi_dmul+0x1f8>
 8088606:	4610      	mov	r0, r2
 8088608:	4619      	mov	r1, r3
 808860a:	e722      	b.n	8088452 <__aeabi_dmul+0x24a>
 808860c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8088610:	bf18      	it	ne
 8088612:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8088616:	f47f aec5 	bne.w	80883a4 <__aeabi_dmul+0x19c>
 808861a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 808861e:	f47f af0d 	bne.w	808843c <__aeabi_dmul+0x234>
 8088622:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8088626:	f47f aeeb 	bne.w	8088400 <__aeabi_dmul+0x1f8>
 808862a:	e712      	b.n	8088452 <__aeabi_dmul+0x24a>

0808862c <__gedf2>:
 808862c:	f04f 3cff 	mov.w	ip, #4294967295
 8088630:	e006      	b.n	8088640 <__cmpdf2+0x4>
 8088632:	bf00      	nop

08088634 <__ledf2>:
 8088634:	f04f 0c01 	mov.w	ip, #1
 8088638:	e002      	b.n	8088640 <__cmpdf2+0x4>
 808863a:	bf00      	nop

0808863c <__cmpdf2>:
 808863c:	f04f 0c01 	mov.w	ip, #1
 8088640:	f84d cd04 	str.w	ip, [sp, #-4]!
 8088644:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8088648:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808864c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8088650:	bf18      	it	ne
 8088652:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8088656:	d01b      	beq.n	8088690 <__cmpdf2+0x54>
 8088658:	b001      	add	sp, #4
 808865a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 808865e:	bf0c      	ite	eq
 8088660:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8088664:	ea91 0f03 	teqne	r1, r3
 8088668:	bf02      	ittt	eq
 808866a:	ea90 0f02 	teqeq	r0, r2
 808866e:	2000      	moveq	r0, #0
 8088670:	4770      	bxeq	lr
 8088672:	f110 0f00 	cmn.w	r0, #0
 8088676:	ea91 0f03 	teq	r1, r3
 808867a:	bf58      	it	pl
 808867c:	4299      	cmppl	r1, r3
 808867e:	bf08      	it	eq
 8088680:	4290      	cmpeq	r0, r2
 8088682:	bf2c      	ite	cs
 8088684:	17d8      	asrcs	r0, r3, #31
 8088686:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 808868a:	f040 0001 	orr.w	r0, r0, #1
 808868e:	4770      	bx	lr
 8088690:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8088694:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8088698:	d102      	bne.n	80886a0 <__cmpdf2+0x64>
 808869a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808869e:	d107      	bne.n	80886b0 <__cmpdf2+0x74>
 80886a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80886a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80886a8:	d1d6      	bne.n	8088658 <__cmpdf2+0x1c>
 80886aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80886ae:	d0d3      	beq.n	8088658 <__cmpdf2+0x1c>
 80886b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80886b4:	4770      	bx	lr
 80886b6:	bf00      	nop

080886b8 <__aeabi_cdrcmple>:
 80886b8:	4684      	mov	ip, r0
 80886ba:	4610      	mov	r0, r2
 80886bc:	4662      	mov	r2, ip
 80886be:	468c      	mov	ip, r1
 80886c0:	4619      	mov	r1, r3
 80886c2:	4663      	mov	r3, ip
 80886c4:	e000      	b.n	80886c8 <__aeabi_cdcmpeq>
 80886c6:	bf00      	nop

080886c8 <__aeabi_cdcmpeq>:
 80886c8:	b501      	push	{r0, lr}
 80886ca:	f7ff ffb7 	bl	808863c <__cmpdf2>
 80886ce:	2800      	cmp	r0, #0
 80886d0:	bf48      	it	mi
 80886d2:	f110 0f00 	cmnmi.w	r0, #0
 80886d6:	bd01      	pop	{r0, pc}

080886d8 <__aeabi_dcmpeq>:
 80886d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80886dc:	f7ff fff4 	bl	80886c8 <__aeabi_cdcmpeq>
 80886e0:	bf0c      	ite	eq
 80886e2:	2001      	moveq	r0, #1
 80886e4:	2000      	movne	r0, #0
 80886e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80886ea:	bf00      	nop

080886ec <__aeabi_dcmplt>:
 80886ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80886f0:	f7ff ffea 	bl	80886c8 <__aeabi_cdcmpeq>
 80886f4:	bf34      	ite	cc
 80886f6:	2001      	movcc	r0, #1
 80886f8:	2000      	movcs	r0, #0
 80886fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80886fe:	bf00      	nop

08088700 <__aeabi_dcmple>:
 8088700:	f84d ed08 	str.w	lr, [sp, #-8]!
 8088704:	f7ff ffe0 	bl	80886c8 <__aeabi_cdcmpeq>
 8088708:	bf94      	ite	ls
 808870a:	2001      	movls	r0, #1
 808870c:	2000      	movhi	r0, #0
 808870e:	f85d fb08 	ldr.w	pc, [sp], #8
 8088712:	bf00      	nop

08088714 <__aeabi_dcmpge>:
 8088714:	f84d ed08 	str.w	lr, [sp, #-8]!
 8088718:	f7ff ffce 	bl	80886b8 <__aeabi_cdrcmple>
 808871c:	bf94      	ite	ls
 808871e:	2001      	movls	r0, #1
 8088720:	2000      	movhi	r0, #0
 8088722:	f85d fb08 	ldr.w	pc, [sp], #8
 8088726:	bf00      	nop

08088728 <__aeabi_dcmpgt>:
 8088728:	f84d ed08 	str.w	lr, [sp, #-8]!
 808872c:	f7ff ffc4 	bl	80886b8 <__aeabi_cdrcmple>
 8088730:	bf34      	ite	cc
 8088732:	2001      	movcc	r0, #1
 8088734:	2000      	movcs	r0, #0
 8088736:	f85d fb08 	ldr.w	pc, [sp], #8
 808873a:	bf00      	nop

0808873c <__aeabi_dcmpun>:
 808873c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8088740:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8088744:	d102      	bne.n	808874c <__aeabi_dcmpun+0x10>
 8088746:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808874a:	d10a      	bne.n	8088762 <__aeabi_dcmpun+0x26>
 808874c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8088750:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8088754:	d102      	bne.n	808875c <__aeabi_dcmpun+0x20>
 8088756:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 808875a:	d102      	bne.n	8088762 <__aeabi_dcmpun+0x26>
 808875c:	f04f 0000 	mov.w	r0, #0
 8088760:	4770      	bx	lr
 8088762:	f04f 0001 	mov.w	r0, #1
 8088766:	4770      	bx	lr

08088768 <__aeabi_d2iz>:
 8088768:	ea4f 0241 	mov.w	r2, r1, lsl #1
 808876c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8088770:	d215      	bcs.n	808879e <__aeabi_d2iz+0x36>
 8088772:	d511      	bpl.n	8088798 <__aeabi_d2iz+0x30>
 8088774:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8088778:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 808877c:	d912      	bls.n	80887a4 <__aeabi_d2iz+0x3c>
 808877e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8088782:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8088786:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808878a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808878e:	fa23 f002 	lsr.w	r0, r3, r2
 8088792:	bf18      	it	ne
 8088794:	4240      	negne	r0, r0
 8088796:	4770      	bx	lr
 8088798:	f04f 0000 	mov.w	r0, #0
 808879c:	4770      	bx	lr
 808879e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80887a2:	d105      	bne.n	80887b0 <__aeabi_d2iz+0x48>
 80887a4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80887a8:	bf08      	it	eq
 80887aa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80887ae:	4770      	bx	lr
 80887b0:	f04f 0000 	mov.w	r0, #0
 80887b4:	4770      	bx	lr
 80887b6:	bf00      	nop

080887b8 <__aeabi_d2uiz>:
 80887b8:	004a      	lsls	r2, r1, #1
 80887ba:	d211      	bcs.n	80887e0 <__aeabi_d2uiz+0x28>
 80887bc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80887c0:	d211      	bcs.n	80887e6 <__aeabi_d2uiz+0x2e>
 80887c2:	d50d      	bpl.n	80887e0 <__aeabi_d2uiz+0x28>
 80887c4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80887c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80887cc:	d40e      	bmi.n	80887ec <__aeabi_d2uiz+0x34>
 80887ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80887d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80887d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80887da:	fa23 f002 	lsr.w	r0, r3, r2
 80887de:	4770      	bx	lr
 80887e0:	f04f 0000 	mov.w	r0, #0
 80887e4:	4770      	bx	lr
 80887e6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80887ea:	d102      	bne.n	80887f2 <__aeabi_d2uiz+0x3a>
 80887ec:	f04f 30ff 	mov.w	r0, #4294967295
 80887f0:	4770      	bx	lr
 80887f2:	f04f 0000 	mov.w	r0, #0
 80887f6:	4770      	bx	lr

080887f8 <__aeabi_d2f>:
 80887f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80887fc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8088800:	bf24      	itt	cs
 8088802:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8088806:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 808880a:	d90d      	bls.n	8088828 <__aeabi_d2f+0x30>
 808880c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8088810:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8088814:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8088818:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 808881c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8088820:	bf08      	it	eq
 8088822:	f020 0001 	biceq.w	r0, r0, #1
 8088826:	4770      	bx	lr
 8088828:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 808882c:	d121      	bne.n	8088872 <__aeabi_d2f+0x7a>
 808882e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8088832:	bfbc      	itt	lt
 8088834:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8088838:	4770      	bxlt	lr
 808883a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808883e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8088842:	f1c2 0218 	rsb	r2, r2, #24
 8088846:	f1c2 0c20 	rsb	ip, r2, #32
 808884a:	fa10 f30c 	lsls.w	r3, r0, ip
 808884e:	fa20 f002 	lsr.w	r0, r0, r2
 8088852:	bf18      	it	ne
 8088854:	f040 0001 	orrne.w	r0, r0, #1
 8088858:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808885c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8088860:	fa03 fc0c 	lsl.w	ip, r3, ip
 8088864:	ea40 000c 	orr.w	r0, r0, ip
 8088868:	fa23 f302 	lsr.w	r3, r3, r2
 808886c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8088870:	e7cc      	b.n	808880c <__aeabi_d2f+0x14>
 8088872:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8088876:	d107      	bne.n	8088888 <__aeabi_d2f+0x90>
 8088878:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 808887c:	bf1e      	ittt	ne
 808887e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8088882:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8088886:	4770      	bxne	lr
 8088888:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 808888c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8088890:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8088894:	4770      	bx	lr
 8088896:	bf00      	nop

08088898 <__aeabi_frsub>:
 8088898:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 808889c:	e002      	b.n	80888a4 <__addsf3>
 808889e:	bf00      	nop

080888a0 <__aeabi_fsub>:
 80888a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080888a4 <__addsf3>:
 80888a4:	0042      	lsls	r2, r0, #1
 80888a6:	bf1f      	itttt	ne
 80888a8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80888ac:	ea92 0f03 	teqne	r2, r3
 80888b0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80888b4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80888b8:	d06a      	beq.n	8088990 <__addsf3+0xec>
 80888ba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80888be:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80888c2:	bfc1      	itttt	gt
 80888c4:	18d2      	addgt	r2, r2, r3
 80888c6:	4041      	eorgt	r1, r0
 80888c8:	4048      	eorgt	r0, r1
 80888ca:	4041      	eorgt	r1, r0
 80888cc:	bfb8      	it	lt
 80888ce:	425b      	neglt	r3, r3
 80888d0:	2b19      	cmp	r3, #25
 80888d2:	bf88      	it	hi
 80888d4:	4770      	bxhi	lr
 80888d6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80888da:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80888de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80888e2:	bf18      	it	ne
 80888e4:	4240      	negne	r0, r0
 80888e6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80888ea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80888ee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80888f2:	bf18      	it	ne
 80888f4:	4249      	negne	r1, r1
 80888f6:	ea92 0f03 	teq	r2, r3
 80888fa:	d03f      	beq.n	808897c <__addsf3+0xd8>
 80888fc:	f1a2 0201 	sub.w	r2, r2, #1
 8088900:	fa41 fc03 	asr.w	ip, r1, r3
 8088904:	eb10 000c 	adds.w	r0, r0, ip
 8088908:	f1c3 0320 	rsb	r3, r3, #32
 808890c:	fa01 f103 	lsl.w	r1, r1, r3
 8088910:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8088914:	d502      	bpl.n	808891c <__addsf3+0x78>
 8088916:	4249      	negs	r1, r1
 8088918:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 808891c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8088920:	d313      	bcc.n	808894a <__addsf3+0xa6>
 8088922:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8088926:	d306      	bcc.n	8088936 <__addsf3+0x92>
 8088928:	0840      	lsrs	r0, r0, #1
 808892a:	ea4f 0131 	mov.w	r1, r1, rrx
 808892e:	f102 0201 	add.w	r2, r2, #1
 8088932:	2afe      	cmp	r2, #254	; 0xfe
 8088934:	d251      	bcs.n	80889da <__addsf3+0x136>
 8088936:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 808893a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808893e:	bf08      	it	eq
 8088940:	f020 0001 	biceq.w	r0, r0, #1
 8088944:	ea40 0003 	orr.w	r0, r0, r3
 8088948:	4770      	bx	lr
 808894a:	0049      	lsls	r1, r1, #1
 808894c:	eb40 0000 	adc.w	r0, r0, r0
 8088950:	3a01      	subs	r2, #1
 8088952:	bf28      	it	cs
 8088954:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8088958:	d2ed      	bcs.n	8088936 <__addsf3+0x92>
 808895a:	fab0 fc80 	clz	ip, r0
 808895e:	f1ac 0c08 	sub.w	ip, ip, #8
 8088962:	ebb2 020c 	subs.w	r2, r2, ip
 8088966:	fa00 f00c 	lsl.w	r0, r0, ip
 808896a:	bfaa      	itet	ge
 808896c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8088970:	4252      	neglt	r2, r2
 8088972:	4318      	orrge	r0, r3
 8088974:	bfbc      	itt	lt
 8088976:	40d0      	lsrlt	r0, r2
 8088978:	4318      	orrlt	r0, r3
 808897a:	4770      	bx	lr
 808897c:	f092 0f00 	teq	r2, #0
 8088980:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8088984:	bf06      	itte	eq
 8088986:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 808898a:	3201      	addeq	r2, #1
 808898c:	3b01      	subne	r3, #1
 808898e:	e7b5      	b.n	80888fc <__addsf3+0x58>
 8088990:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8088994:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8088998:	bf18      	it	ne
 808899a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808899e:	d021      	beq.n	80889e4 <__addsf3+0x140>
 80889a0:	ea92 0f03 	teq	r2, r3
 80889a4:	d004      	beq.n	80889b0 <__addsf3+0x10c>
 80889a6:	f092 0f00 	teq	r2, #0
 80889aa:	bf08      	it	eq
 80889ac:	4608      	moveq	r0, r1
 80889ae:	4770      	bx	lr
 80889b0:	ea90 0f01 	teq	r0, r1
 80889b4:	bf1c      	itt	ne
 80889b6:	2000      	movne	r0, #0
 80889b8:	4770      	bxne	lr
 80889ba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80889be:	d104      	bne.n	80889ca <__addsf3+0x126>
 80889c0:	0040      	lsls	r0, r0, #1
 80889c2:	bf28      	it	cs
 80889c4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80889c8:	4770      	bx	lr
 80889ca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80889ce:	bf3c      	itt	cc
 80889d0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80889d4:	4770      	bxcc	lr
 80889d6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80889da:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80889de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80889e2:	4770      	bx	lr
 80889e4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80889e8:	bf16      	itet	ne
 80889ea:	4608      	movne	r0, r1
 80889ec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80889f0:	4601      	movne	r1, r0
 80889f2:	0242      	lsls	r2, r0, #9
 80889f4:	bf06      	itte	eq
 80889f6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80889fa:	ea90 0f01 	teqeq	r0, r1
 80889fe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8088a02:	4770      	bx	lr

08088a04 <__aeabi_ui2f>:
 8088a04:	f04f 0300 	mov.w	r3, #0
 8088a08:	e004      	b.n	8088a14 <__aeabi_i2f+0x8>
 8088a0a:	bf00      	nop

08088a0c <__aeabi_i2f>:
 8088a0c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8088a10:	bf48      	it	mi
 8088a12:	4240      	negmi	r0, r0
 8088a14:	ea5f 0c00 	movs.w	ip, r0
 8088a18:	bf08      	it	eq
 8088a1a:	4770      	bxeq	lr
 8088a1c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8088a20:	4601      	mov	r1, r0
 8088a22:	f04f 0000 	mov.w	r0, #0
 8088a26:	e01c      	b.n	8088a62 <__aeabi_l2f+0x2a>

08088a28 <__aeabi_ul2f>:
 8088a28:	ea50 0201 	orrs.w	r2, r0, r1
 8088a2c:	bf08      	it	eq
 8088a2e:	4770      	bxeq	lr
 8088a30:	f04f 0300 	mov.w	r3, #0
 8088a34:	e00a      	b.n	8088a4c <__aeabi_l2f+0x14>
 8088a36:	bf00      	nop

08088a38 <__aeabi_l2f>:
 8088a38:	ea50 0201 	orrs.w	r2, r0, r1
 8088a3c:	bf08      	it	eq
 8088a3e:	4770      	bxeq	lr
 8088a40:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8088a44:	d502      	bpl.n	8088a4c <__aeabi_l2f+0x14>
 8088a46:	4240      	negs	r0, r0
 8088a48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8088a4c:	ea5f 0c01 	movs.w	ip, r1
 8088a50:	bf02      	ittt	eq
 8088a52:	4684      	moveq	ip, r0
 8088a54:	4601      	moveq	r1, r0
 8088a56:	2000      	moveq	r0, #0
 8088a58:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8088a5c:	bf08      	it	eq
 8088a5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8088a62:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8088a66:	fabc f28c 	clz	r2, ip
 8088a6a:	3a08      	subs	r2, #8
 8088a6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8088a70:	db10      	blt.n	8088a94 <__aeabi_l2f+0x5c>
 8088a72:	fa01 fc02 	lsl.w	ip, r1, r2
 8088a76:	4463      	add	r3, ip
 8088a78:	fa00 fc02 	lsl.w	ip, r0, r2
 8088a7c:	f1c2 0220 	rsb	r2, r2, #32
 8088a80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8088a84:	fa20 f202 	lsr.w	r2, r0, r2
 8088a88:	eb43 0002 	adc.w	r0, r3, r2
 8088a8c:	bf08      	it	eq
 8088a8e:	f020 0001 	biceq.w	r0, r0, #1
 8088a92:	4770      	bx	lr
 8088a94:	f102 0220 	add.w	r2, r2, #32
 8088a98:	fa01 fc02 	lsl.w	ip, r1, r2
 8088a9c:	f1c2 0220 	rsb	r2, r2, #32
 8088aa0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8088aa4:	fa21 f202 	lsr.w	r2, r1, r2
 8088aa8:	eb43 0002 	adc.w	r0, r3, r2
 8088aac:	bf08      	it	eq
 8088aae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8088ab2:	4770      	bx	lr

08088ab4 <__aeabi_fmul>:
 8088ab4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8088ab8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8088abc:	bf1e      	ittt	ne
 8088abe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8088ac2:	ea92 0f0c 	teqne	r2, ip
 8088ac6:	ea93 0f0c 	teqne	r3, ip
 8088aca:	d06f      	beq.n	8088bac <__aeabi_fmul+0xf8>
 8088acc:	441a      	add	r2, r3
 8088ace:	ea80 0c01 	eor.w	ip, r0, r1
 8088ad2:	0240      	lsls	r0, r0, #9
 8088ad4:	bf18      	it	ne
 8088ad6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8088ada:	d01e      	beq.n	8088b1a <__aeabi_fmul+0x66>
 8088adc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8088ae0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8088ae4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8088ae8:	fba0 3101 	umull	r3, r1, r0, r1
 8088aec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8088af0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8088af4:	bf3e      	ittt	cc
 8088af6:	0049      	lslcc	r1, r1, #1
 8088af8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8088afc:	005b      	lslcc	r3, r3, #1
 8088afe:	ea40 0001 	orr.w	r0, r0, r1
 8088b02:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8088b06:	2afd      	cmp	r2, #253	; 0xfd
 8088b08:	d81d      	bhi.n	8088b46 <__aeabi_fmul+0x92>
 8088b0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8088b0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8088b12:	bf08      	it	eq
 8088b14:	f020 0001 	biceq.w	r0, r0, #1
 8088b18:	4770      	bx	lr
 8088b1a:	f090 0f00 	teq	r0, #0
 8088b1e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8088b22:	bf08      	it	eq
 8088b24:	0249      	lsleq	r1, r1, #9
 8088b26:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8088b2a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8088b2e:	3a7f      	subs	r2, #127	; 0x7f
 8088b30:	bfc2      	ittt	gt
 8088b32:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8088b36:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8088b3a:	4770      	bxgt	lr
 8088b3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8088b40:	f04f 0300 	mov.w	r3, #0
 8088b44:	3a01      	subs	r2, #1
 8088b46:	dc5d      	bgt.n	8088c04 <__aeabi_fmul+0x150>
 8088b48:	f112 0f19 	cmn.w	r2, #25
 8088b4c:	bfdc      	itt	le
 8088b4e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8088b52:	4770      	bxle	lr
 8088b54:	f1c2 0200 	rsb	r2, r2, #0
 8088b58:	0041      	lsls	r1, r0, #1
 8088b5a:	fa21 f102 	lsr.w	r1, r1, r2
 8088b5e:	f1c2 0220 	rsb	r2, r2, #32
 8088b62:	fa00 fc02 	lsl.w	ip, r0, r2
 8088b66:	ea5f 0031 	movs.w	r0, r1, rrx
 8088b6a:	f140 0000 	adc.w	r0, r0, #0
 8088b6e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8088b72:	bf08      	it	eq
 8088b74:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8088b78:	4770      	bx	lr
 8088b7a:	f092 0f00 	teq	r2, #0
 8088b7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8088b82:	bf02      	ittt	eq
 8088b84:	0040      	lsleq	r0, r0, #1
 8088b86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8088b8a:	3a01      	subeq	r2, #1
 8088b8c:	d0f9      	beq.n	8088b82 <__aeabi_fmul+0xce>
 8088b8e:	ea40 000c 	orr.w	r0, r0, ip
 8088b92:	f093 0f00 	teq	r3, #0
 8088b96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8088b9a:	bf02      	ittt	eq
 8088b9c:	0049      	lsleq	r1, r1, #1
 8088b9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8088ba2:	3b01      	subeq	r3, #1
 8088ba4:	d0f9      	beq.n	8088b9a <__aeabi_fmul+0xe6>
 8088ba6:	ea41 010c 	orr.w	r1, r1, ip
 8088baa:	e78f      	b.n	8088acc <__aeabi_fmul+0x18>
 8088bac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8088bb0:	ea92 0f0c 	teq	r2, ip
 8088bb4:	bf18      	it	ne
 8088bb6:	ea93 0f0c 	teqne	r3, ip
 8088bba:	d00a      	beq.n	8088bd2 <__aeabi_fmul+0x11e>
 8088bbc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8088bc0:	bf18      	it	ne
 8088bc2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8088bc6:	d1d8      	bne.n	8088b7a <__aeabi_fmul+0xc6>
 8088bc8:	ea80 0001 	eor.w	r0, r0, r1
 8088bcc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8088bd0:	4770      	bx	lr
 8088bd2:	f090 0f00 	teq	r0, #0
 8088bd6:	bf17      	itett	ne
 8088bd8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8088bdc:	4608      	moveq	r0, r1
 8088bde:	f091 0f00 	teqne	r1, #0
 8088be2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8088be6:	d014      	beq.n	8088c12 <__aeabi_fmul+0x15e>
 8088be8:	ea92 0f0c 	teq	r2, ip
 8088bec:	d101      	bne.n	8088bf2 <__aeabi_fmul+0x13e>
 8088bee:	0242      	lsls	r2, r0, #9
 8088bf0:	d10f      	bne.n	8088c12 <__aeabi_fmul+0x15e>
 8088bf2:	ea93 0f0c 	teq	r3, ip
 8088bf6:	d103      	bne.n	8088c00 <__aeabi_fmul+0x14c>
 8088bf8:	024b      	lsls	r3, r1, #9
 8088bfa:	bf18      	it	ne
 8088bfc:	4608      	movne	r0, r1
 8088bfe:	d108      	bne.n	8088c12 <__aeabi_fmul+0x15e>
 8088c00:	ea80 0001 	eor.w	r0, r0, r1
 8088c04:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8088c08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8088c0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8088c10:	4770      	bx	lr
 8088c12:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8088c16:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8088c1a:	4770      	bx	lr

08088c1c <__aeabi_fdiv>:
 8088c1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8088c20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8088c24:	bf1e      	ittt	ne
 8088c26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8088c2a:	ea92 0f0c 	teqne	r2, ip
 8088c2e:	ea93 0f0c 	teqne	r3, ip
 8088c32:	d069      	beq.n	8088d08 <__aeabi_fdiv+0xec>
 8088c34:	eba2 0203 	sub.w	r2, r2, r3
 8088c38:	ea80 0c01 	eor.w	ip, r0, r1
 8088c3c:	0249      	lsls	r1, r1, #9
 8088c3e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8088c42:	d037      	beq.n	8088cb4 <__aeabi_fdiv+0x98>
 8088c44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8088c48:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8088c4c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8088c50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8088c54:	428b      	cmp	r3, r1
 8088c56:	bf38      	it	cc
 8088c58:	005b      	lslcc	r3, r3, #1
 8088c5a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8088c5e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8088c62:	428b      	cmp	r3, r1
 8088c64:	bf24      	itt	cs
 8088c66:	1a5b      	subcs	r3, r3, r1
 8088c68:	ea40 000c 	orrcs.w	r0, r0, ip
 8088c6c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8088c70:	bf24      	itt	cs
 8088c72:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8088c76:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8088c7a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8088c7e:	bf24      	itt	cs
 8088c80:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8088c84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8088c88:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8088c8c:	bf24      	itt	cs
 8088c8e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8088c92:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8088c96:	011b      	lsls	r3, r3, #4
 8088c98:	bf18      	it	ne
 8088c9a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8088c9e:	d1e0      	bne.n	8088c62 <__aeabi_fdiv+0x46>
 8088ca0:	2afd      	cmp	r2, #253	; 0xfd
 8088ca2:	f63f af50 	bhi.w	8088b46 <__aeabi_fmul+0x92>
 8088ca6:	428b      	cmp	r3, r1
 8088ca8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8088cac:	bf08      	it	eq
 8088cae:	f020 0001 	biceq.w	r0, r0, #1
 8088cb2:	4770      	bx	lr
 8088cb4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8088cb8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8088cbc:	327f      	adds	r2, #127	; 0x7f
 8088cbe:	bfc2      	ittt	gt
 8088cc0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8088cc4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8088cc8:	4770      	bxgt	lr
 8088cca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8088cce:	f04f 0300 	mov.w	r3, #0
 8088cd2:	3a01      	subs	r2, #1
 8088cd4:	e737      	b.n	8088b46 <__aeabi_fmul+0x92>
 8088cd6:	f092 0f00 	teq	r2, #0
 8088cda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8088cde:	bf02      	ittt	eq
 8088ce0:	0040      	lsleq	r0, r0, #1
 8088ce2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8088ce6:	3a01      	subeq	r2, #1
 8088ce8:	d0f9      	beq.n	8088cde <__aeabi_fdiv+0xc2>
 8088cea:	ea40 000c 	orr.w	r0, r0, ip
 8088cee:	f093 0f00 	teq	r3, #0
 8088cf2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8088cf6:	bf02      	ittt	eq
 8088cf8:	0049      	lsleq	r1, r1, #1
 8088cfa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8088cfe:	3b01      	subeq	r3, #1
 8088d00:	d0f9      	beq.n	8088cf6 <__aeabi_fdiv+0xda>
 8088d02:	ea41 010c 	orr.w	r1, r1, ip
 8088d06:	e795      	b.n	8088c34 <__aeabi_fdiv+0x18>
 8088d08:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8088d0c:	ea92 0f0c 	teq	r2, ip
 8088d10:	d108      	bne.n	8088d24 <__aeabi_fdiv+0x108>
 8088d12:	0242      	lsls	r2, r0, #9
 8088d14:	f47f af7d 	bne.w	8088c12 <__aeabi_fmul+0x15e>
 8088d18:	ea93 0f0c 	teq	r3, ip
 8088d1c:	f47f af70 	bne.w	8088c00 <__aeabi_fmul+0x14c>
 8088d20:	4608      	mov	r0, r1
 8088d22:	e776      	b.n	8088c12 <__aeabi_fmul+0x15e>
 8088d24:	ea93 0f0c 	teq	r3, ip
 8088d28:	d104      	bne.n	8088d34 <__aeabi_fdiv+0x118>
 8088d2a:	024b      	lsls	r3, r1, #9
 8088d2c:	f43f af4c 	beq.w	8088bc8 <__aeabi_fmul+0x114>
 8088d30:	4608      	mov	r0, r1
 8088d32:	e76e      	b.n	8088c12 <__aeabi_fmul+0x15e>
 8088d34:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8088d38:	bf18      	it	ne
 8088d3a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8088d3e:	d1ca      	bne.n	8088cd6 <__aeabi_fdiv+0xba>
 8088d40:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8088d44:	f47f af5c 	bne.w	8088c00 <__aeabi_fmul+0x14c>
 8088d48:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8088d4c:	f47f af3c 	bne.w	8088bc8 <__aeabi_fmul+0x114>
 8088d50:	e75f      	b.n	8088c12 <__aeabi_fmul+0x15e>
 8088d52:	bf00      	nop

08088d54 <__gesf2>:
 8088d54:	f04f 3cff 	mov.w	ip, #4294967295
 8088d58:	e006      	b.n	8088d68 <__cmpsf2+0x4>
 8088d5a:	bf00      	nop

08088d5c <__lesf2>:
 8088d5c:	f04f 0c01 	mov.w	ip, #1
 8088d60:	e002      	b.n	8088d68 <__cmpsf2+0x4>
 8088d62:	bf00      	nop

08088d64 <__cmpsf2>:
 8088d64:	f04f 0c01 	mov.w	ip, #1
 8088d68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8088d6c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8088d70:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8088d74:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8088d78:	bf18      	it	ne
 8088d7a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8088d7e:	d011      	beq.n	8088da4 <__cmpsf2+0x40>
 8088d80:	b001      	add	sp, #4
 8088d82:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8088d86:	bf18      	it	ne
 8088d88:	ea90 0f01 	teqne	r0, r1
 8088d8c:	bf58      	it	pl
 8088d8e:	ebb2 0003 	subspl.w	r0, r2, r3
 8088d92:	bf88      	it	hi
 8088d94:	17c8      	asrhi	r0, r1, #31
 8088d96:	bf38      	it	cc
 8088d98:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8088d9c:	bf18      	it	ne
 8088d9e:	f040 0001 	orrne.w	r0, r0, #1
 8088da2:	4770      	bx	lr
 8088da4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8088da8:	d102      	bne.n	8088db0 <__cmpsf2+0x4c>
 8088daa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8088dae:	d105      	bne.n	8088dbc <__cmpsf2+0x58>
 8088db0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8088db4:	d1e4      	bne.n	8088d80 <__cmpsf2+0x1c>
 8088db6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8088dba:	d0e1      	beq.n	8088d80 <__cmpsf2+0x1c>
 8088dbc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8088dc0:	4770      	bx	lr
 8088dc2:	bf00      	nop

08088dc4 <__aeabi_cfrcmple>:
 8088dc4:	4684      	mov	ip, r0
 8088dc6:	4608      	mov	r0, r1
 8088dc8:	4661      	mov	r1, ip
 8088dca:	e7ff      	b.n	8088dcc <__aeabi_cfcmpeq>

08088dcc <__aeabi_cfcmpeq>:
 8088dcc:	b50f      	push	{r0, r1, r2, r3, lr}
 8088dce:	f7ff ffc9 	bl	8088d64 <__cmpsf2>
 8088dd2:	2800      	cmp	r0, #0
 8088dd4:	bf48      	it	mi
 8088dd6:	f110 0f00 	cmnmi.w	r0, #0
 8088dda:	bd0f      	pop	{r0, r1, r2, r3, pc}

08088ddc <__aeabi_fcmpeq>:
 8088ddc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8088de0:	f7ff fff4 	bl	8088dcc <__aeabi_cfcmpeq>
 8088de4:	bf0c      	ite	eq
 8088de6:	2001      	moveq	r0, #1
 8088de8:	2000      	movne	r0, #0
 8088dea:	f85d fb08 	ldr.w	pc, [sp], #8
 8088dee:	bf00      	nop

08088df0 <__aeabi_fcmplt>:
 8088df0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8088df4:	f7ff ffea 	bl	8088dcc <__aeabi_cfcmpeq>
 8088df8:	bf34      	ite	cc
 8088dfa:	2001      	movcc	r0, #1
 8088dfc:	2000      	movcs	r0, #0
 8088dfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8088e02:	bf00      	nop

08088e04 <__aeabi_fcmple>:
 8088e04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8088e08:	f7ff ffe0 	bl	8088dcc <__aeabi_cfcmpeq>
 8088e0c:	bf94      	ite	ls
 8088e0e:	2001      	movls	r0, #1
 8088e10:	2000      	movhi	r0, #0
 8088e12:	f85d fb08 	ldr.w	pc, [sp], #8
 8088e16:	bf00      	nop

08088e18 <__aeabi_fcmpge>:
 8088e18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8088e1c:	f7ff ffd2 	bl	8088dc4 <__aeabi_cfrcmple>
 8088e20:	bf94      	ite	ls
 8088e22:	2001      	movls	r0, #1
 8088e24:	2000      	movhi	r0, #0
 8088e26:	f85d fb08 	ldr.w	pc, [sp], #8
 8088e2a:	bf00      	nop

08088e2c <__aeabi_fcmpgt>:
 8088e2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8088e30:	f7ff ffc8 	bl	8088dc4 <__aeabi_cfrcmple>
 8088e34:	bf34      	ite	cc
 8088e36:	2001      	movcc	r0, #1
 8088e38:	2000      	movcs	r0, #0
 8088e3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8088e3e:	bf00      	nop

08088e40 <__aeabi_fcmpun>:
 8088e40:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8088e44:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8088e48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8088e4c:	d102      	bne.n	8088e54 <__aeabi_fcmpun+0x14>
 8088e4e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8088e52:	d108      	bne.n	8088e66 <__aeabi_fcmpun+0x26>
 8088e54:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8088e58:	d102      	bne.n	8088e60 <__aeabi_fcmpun+0x20>
 8088e5a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8088e5e:	d102      	bne.n	8088e66 <__aeabi_fcmpun+0x26>
 8088e60:	f04f 0000 	mov.w	r0, #0
 8088e64:	4770      	bx	lr
 8088e66:	f04f 0001 	mov.w	r0, #1
 8088e6a:	4770      	bx	lr

08088e6c <__aeabi_f2iz>:
 8088e6c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8088e70:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8088e74:	d30f      	bcc.n	8088e96 <__aeabi_f2iz+0x2a>
 8088e76:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8088e7a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8088e7e:	d90d      	bls.n	8088e9c <__aeabi_f2iz+0x30>
 8088e80:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8088e84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8088e88:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8088e8c:	fa23 f002 	lsr.w	r0, r3, r2
 8088e90:	bf18      	it	ne
 8088e92:	4240      	negne	r0, r0
 8088e94:	4770      	bx	lr
 8088e96:	f04f 0000 	mov.w	r0, #0
 8088e9a:	4770      	bx	lr
 8088e9c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8088ea0:	d101      	bne.n	8088ea6 <__aeabi_f2iz+0x3a>
 8088ea2:	0242      	lsls	r2, r0, #9
 8088ea4:	d105      	bne.n	8088eb2 <__aeabi_f2iz+0x46>
 8088ea6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8088eaa:	bf08      	it	eq
 8088eac:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8088eb0:	4770      	bx	lr
 8088eb2:	f04f 0000 	mov.w	r0, #0
 8088eb6:	4770      	bx	lr

08088eb8 <asctime_r>:
 8088eb8:	b510      	push	{r4, lr}
 8088eba:	460c      	mov	r4, r1
 8088ebc:	6941      	ldr	r1, [r0, #20]
 8088ebe:	b086      	sub	sp, #24
 8088ec0:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 8088ec4:	6903      	ldr	r3, [r0, #16]
 8088ec6:	6982      	ldr	r2, [r0, #24]
 8088ec8:	9104      	str	r1, [sp, #16]
 8088eca:	6801      	ldr	r1, [r0, #0]
 8088ecc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8088ed0:	9103      	str	r1, [sp, #12]
 8088ed2:	6841      	ldr	r1, [r0, #4]
 8088ed4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8088ed8:	9102      	str	r1, [sp, #8]
 8088eda:	6881      	ldr	r1, [r0, #8]
 8088edc:	9101      	str	r1, [sp, #4]
 8088ede:	68c1      	ldr	r1, [r0, #12]
 8088ee0:	4620      	mov	r0, r4
 8088ee2:	9100      	str	r1, [sp, #0]
 8088ee4:	4904      	ldr	r1, [pc, #16]	; (8088ef8 <asctime_r+0x40>)
 8088ee6:	440b      	add	r3, r1
 8088ee8:	4904      	ldr	r1, [pc, #16]	; (8088efc <asctime_r+0x44>)
 8088eea:	440a      	add	r2, r1
 8088eec:	4904      	ldr	r1, [pc, #16]	; (8088f00 <asctime_r+0x48>)
 8088eee:	f7fb fceb 	bl	80848c8 <siprintf>
 8088ef2:	4620      	mov	r0, r4
 8088ef4:	b006      	add	sp, #24
 8088ef6:	bd10      	pop	{r4, pc}
 8088ef8:	08089f52 	.word	0x08089f52
 8088efc:	08089f3d 	.word	0x08089f3d
 8088f00:	08089f1d 	.word	0x08089f1d

08088f04 <atoi>:
 8088f04:	220a      	movs	r2, #10
 8088f06:	2100      	movs	r1, #0
 8088f08:	f000 b9b8 	b.w	808927c <strtol>

08088f0c <atol>:
 8088f0c:	220a      	movs	r2, #10
 8088f0e:	2100      	movs	r1, #0
 8088f10:	f000 b9b4 	b.w	808927c <strtol>

08088f14 <__cxa_atexit>:
 8088f14:	b510      	push	{r4, lr}
 8088f16:	4604      	mov	r4, r0
 8088f18:	4804      	ldr	r0, [pc, #16]	; (8088f2c <__cxa_atexit+0x18>)
 8088f1a:	4613      	mov	r3, r2
 8088f1c:	b120      	cbz	r0, 8088f28 <__cxa_atexit+0x14>
 8088f1e:	460a      	mov	r2, r1
 8088f20:	2002      	movs	r0, #2
 8088f22:	4621      	mov	r1, r4
 8088f24:	f3af 8000 	nop.w
 8088f28:	bd10      	pop	{r4, pc}
 8088f2a:	bf00      	nop
 8088f2c:	00000000 	.word	0x00000000

08088f30 <memcpy>:
 8088f30:	440a      	add	r2, r1
 8088f32:	4291      	cmp	r1, r2
 8088f34:	f100 33ff 	add.w	r3, r0, #4294967295
 8088f38:	d100      	bne.n	8088f3c <memcpy+0xc>
 8088f3a:	4770      	bx	lr
 8088f3c:	b510      	push	{r4, lr}
 8088f3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8088f42:	4291      	cmp	r1, r2
 8088f44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8088f48:	d1f9      	bne.n	8088f3e <memcpy+0xe>
 8088f4a:	bd10      	pop	{r4, pc}

08088f4c <memmove>:
 8088f4c:	4288      	cmp	r0, r1
 8088f4e:	b510      	push	{r4, lr}
 8088f50:	eb01 0402 	add.w	r4, r1, r2
 8088f54:	d902      	bls.n	8088f5c <memmove+0x10>
 8088f56:	4284      	cmp	r4, r0
 8088f58:	4623      	mov	r3, r4
 8088f5a:	d807      	bhi.n	8088f6c <memmove+0x20>
 8088f5c:	1e43      	subs	r3, r0, #1
 8088f5e:	42a1      	cmp	r1, r4
 8088f60:	d008      	beq.n	8088f74 <memmove+0x28>
 8088f62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8088f66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8088f6a:	e7f8      	b.n	8088f5e <memmove+0x12>
 8088f6c:	4601      	mov	r1, r0
 8088f6e:	4402      	add	r2, r0
 8088f70:	428a      	cmp	r2, r1
 8088f72:	d100      	bne.n	8088f76 <memmove+0x2a>
 8088f74:	bd10      	pop	{r4, pc}
 8088f76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8088f7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8088f7e:	e7f7      	b.n	8088f70 <memmove+0x24>

08088f80 <memset>:
 8088f80:	4603      	mov	r3, r0
 8088f82:	4402      	add	r2, r0
 8088f84:	4293      	cmp	r3, r2
 8088f86:	d100      	bne.n	8088f8a <memset+0xa>
 8088f88:	4770      	bx	lr
 8088f8a:	f803 1b01 	strb.w	r1, [r3], #1
 8088f8e:	e7f9      	b.n	8088f84 <memset+0x4>

08088f90 <srand>:
 8088f90:	b538      	push	{r3, r4, r5, lr}
 8088f92:	4b0d      	ldr	r3, [pc, #52]	; (8088fc8 <srand+0x38>)
 8088f94:	4604      	mov	r4, r0
 8088f96:	681d      	ldr	r5, [r3, #0]
 8088f98:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8088f9a:	b97b      	cbnz	r3, 8088fbc <srand+0x2c>
 8088f9c:	2018      	movs	r0, #24
 8088f9e:	f7fb fc7b 	bl	8084898 <malloc>
 8088fa2:	4a0a      	ldr	r2, [pc, #40]	; (8088fcc <srand+0x3c>)
 8088fa4:	4b0a      	ldr	r3, [pc, #40]	; (8088fd0 <srand+0x40>)
 8088fa6:	63a8      	str	r0, [r5, #56]	; 0x38
 8088fa8:	e9c0 2300 	strd	r2, r3, [r0]
 8088fac:	4b09      	ldr	r3, [pc, #36]	; (8088fd4 <srand+0x44>)
 8088fae:	2201      	movs	r2, #1
 8088fb0:	6083      	str	r3, [r0, #8]
 8088fb2:	230b      	movs	r3, #11
 8088fb4:	8183      	strh	r3, [r0, #12]
 8088fb6:	2300      	movs	r3, #0
 8088fb8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8088fbc:	2200      	movs	r2, #0
 8088fbe:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8088fc0:	611c      	str	r4, [r3, #16]
 8088fc2:	615a      	str	r2, [r3, #20]
 8088fc4:	bd38      	pop	{r3, r4, r5, pc}
 8088fc6:	bf00      	nop
 8088fc8:	200000cc 	.word	0x200000cc
 8088fcc:	abcd330e 	.word	0xabcd330e
 8088fd0:	e66d1234 	.word	0xe66d1234
 8088fd4:	0005deec 	.word	0x0005deec

08088fd8 <strchr>:
 8088fd8:	4603      	mov	r3, r0
 8088fda:	b2c9      	uxtb	r1, r1
 8088fdc:	4618      	mov	r0, r3
 8088fde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8088fe2:	b112      	cbz	r2, 8088fea <strchr+0x12>
 8088fe4:	428a      	cmp	r2, r1
 8088fe6:	d1f9      	bne.n	8088fdc <strchr+0x4>
 8088fe8:	4770      	bx	lr
 8088fea:	2900      	cmp	r1, #0
 8088fec:	bf18      	it	ne
 8088fee:	2000      	movne	r0, #0
 8088ff0:	4770      	bx	lr

08088ff2 <strchrnul>:
 8088ff2:	b510      	push	{r4, lr}
 8088ff4:	4604      	mov	r4, r0
 8088ff6:	f7ff ffef 	bl	8088fd8 <strchr>
 8088ffa:	b918      	cbnz	r0, 8089004 <strchrnul+0x12>
 8088ffc:	4620      	mov	r0, r4
 8088ffe:	f000 f830 	bl	8089062 <strlen>
 8089002:	4420      	add	r0, r4
 8089004:	bd10      	pop	{r4, pc}

08089006 <strcmp>:
 8089006:	f810 2b01 	ldrb.w	r2, [r0], #1
 808900a:	f811 3b01 	ldrb.w	r3, [r1], #1
 808900e:	2a01      	cmp	r2, #1
 8089010:	bf28      	it	cs
 8089012:	429a      	cmpcs	r2, r3
 8089014:	d0f7      	beq.n	8089006 <strcmp>
 8089016:	1ad0      	subs	r0, r2, r3
 8089018:	4770      	bx	lr

0808901a <strcpy>:
 808901a:	4603      	mov	r3, r0
 808901c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8089020:	f803 2b01 	strb.w	r2, [r3], #1
 8089024:	2a00      	cmp	r2, #0
 8089026:	d1f9      	bne.n	808901c <strcpy+0x2>
 8089028:	4770      	bx	lr
	...

0808902c <strdup>:
 808902c:	4b02      	ldr	r3, [pc, #8]	; (8089038 <strdup+0xc>)
 808902e:	4601      	mov	r1, r0
 8089030:	6818      	ldr	r0, [r3, #0]
 8089032:	f000 b803 	b.w	808903c <_strdup_r>
 8089036:	bf00      	nop
 8089038:	200000cc 	.word	0x200000cc

0808903c <_strdup_r>:
 808903c:	b570      	push	{r4, r5, r6, lr}
 808903e:	4604      	mov	r4, r0
 8089040:	4608      	mov	r0, r1
 8089042:	460d      	mov	r5, r1
 8089044:	f000 f80d 	bl	8089062 <strlen>
 8089048:	1c46      	adds	r6, r0, #1
 808904a:	4631      	mov	r1, r6
 808904c:	4620      	mov	r0, r4
 808904e:	f7fb fc5b 	bl	8084908 <_malloc_r>
 8089052:	4604      	mov	r4, r0
 8089054:	b118      	cbz	r0, 808905e <_strdup_r+0x22>
 8089056:	4632      	mov	r2, r6
 8089058:	4629      	mov	r1, r5
 808905a:	f7ff ff69 	bl	8088f30 <memcpy>
 808905e:	4620      	mov	r0, r4
 8089060:	bd70      	pop	{r4, r5, r6, pc}

08089062 <strlen>:
 8089062:	4603      	mov	r3, r0
 8089064:	f813 2b01 	ldrb.w	r2, [r3], #1
 8089068:	2a00      	cmp	r2, #0
 808906a:	d1fb      	bne.n	8089064 <strlen+0x2>
 808906c:	1a18      	subs	r0, r3, r0
 808906e:	3801      	subs	r0, #1
 8089070:	4770      	bx	lr

08089072 <strncmp>:
 8089072:	b510      	push	{r4, lr}
 8089074:	b16a      	cbz	r2, 8089092 <strncmp+0x20>
 8089076:	3901      	subs	r1, #1
 8089078:	1884      	adds	r4, r0, r2
 808907a:	f810 3b01 	ldrb.w	r3, [r0], #1
 808907e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8089082:	4293      	cmp	r3, r2
 8089084:	d103      	bne.n	808908e <strncmp+0x1c>
 8089086:	42a0      	cmp	r0, r4
 8089088:	d001      	beq.n	808908e <strncmp+0x1c>
 808908a:	2b00      	cmp	r3, #0
 808908c:	d1f5      	bne.n	808907a <strncmp+0x8>
 808908e:	1a98      	subs	r0, r3, r2
 8089090:	bd10      	pop	{r4, pc}
 8089092:	4610      	mov	r0, r2
 8089094:	e7fc      	b.n	8089090 <strncmp+0x1e>

08089096 <strncpy>:
 8089096:	4603      	mov	r3, r0
 8089098:	b510      	push	{r4, lr}
 808909a:	3901      	subs	r1, #1
 808909c:	b132      	cbz	r2, 80890ac <strncpy+0x16>
 808909e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80890a2:	3a01      	subs	r2, #1
 80890a4:	f803 4b01 	strb.w	r4, [r3], #1
 80890a8:	2c00      	cmp	r4, #0
 80890aa:	d1f7      	bne.n	808909c <strncpy+0x6>
 80890ac:	2100      	movs	r1, #0
 80890ae:	441a      	add	r2, r3
 80890b0:	4293      	cmp	r3, r2
 80890b2:	d100      	bne.n	80890b6 <strncpy+0x20>
 80890b4:	bd10      	pop	{r4, pc}
 80890b6:	f803 1b01 	strb.w	r1, [r3], #1
 80890ba:	e7f9      	b.n	80890b0 <strncpy+0x1a>

080890bc <strrchr>:
 80890bc:	b538      	push	{r3, r4, r5, lr}
 80890be:	4603      	mov	r3, r0
 80890c0:	460c      	mov	r4, r1
 80890c2:	b969      	cbnz	r1, 80890e0 <strrchr+0x24>
 80890c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80890c8:	f7ff bf86 	b.w	8088fd8 <strchr>
 80890cc:	4605      	mov	r5, r0
 80890ce:	1c43      	adds	r3, r0, #1
 80890d0:	4621      	mov	r1, r4
 80890d2:	4618      	mov	r0, r3
 80890d4:	f7ff ff80 	bl	8088fd8 <strchr>
 80890d8:	2800      	cmp	r0, #0
 80890da:	d1f7      	bne.n	80890cc <strrchr+0x10>
 80890dc:	4628      	mov	r0, r5
 80890de:	bd38      	pop	{r3, r4, r5, pc}
 80890e0:	2500      	movs	r5, #0
 80890e2:	e7f5      	b.n	80890d0 <strrchr+0x14>

080890e4 <strtok>:
 80890e4:	4b13      	ldr	r3, [pc, #76]	; (8089134 <strtok+0x50>)
 80890e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80890ea:	681f      	ldr	r7, [r3, #0]
 80890ec:	4605      	mov	r5, r0
 80890ee:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80890f0:	460e      	mov	r6, r1
 80890f2:	b9b4      	cbnz	r4, 8089122 <strtok+0x3e>
 80890f4:	2050      	movs	r0, #80	; 0x50
 80890f6:	f7fb fbcf 	bl	8084898 <malloc>
 80890fa:	65b8      	str	r0, [r7, #88]	; 0x58
 80890fc:	e9c0 4400 	strd	r4, r4, [r0]
 8089100:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8089104:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8089108:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 808910c:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8089110:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8089114:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8089118:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 808911c:	6184      	str	r4, [r0, #24]
 808911e:	7704      	strb	r4, [r0, #28]
 8089120:	6244      	str	r4, [r0, #36]	; 0x24
 8089122:	4631      	mov	r1, r6
 8089124:	4628      	mov	r0, r5
 8089126:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8089128:	2301      	movs	r3, #1
 808912a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 808912e:	f000 b803 	b.w	8089138 <__strtok_r>
 8089132:	bf00      	nop
 8089134:	200000cc 	.word	0x200000cc

08089138 <__strtok_r>:
 8089138:	b5f0      	push	{r4, r5, r6, r7, lr}
 808913a:	b908      	cbnz	r0, 8089140 <__strtok_r+0x8>
 808913c:	6810      	ldr	r0, [r2, #0]
 808913e:	b188      	cbz	r0, 8089164 <__strtok_r+0x2c>
 8089140:	4604      	mov	r4, r0
 8089142:	460f      	mov	r7, r1
 8089144:	4620      	mov	r0, r4
 8089146:	f814 5b01 	ldrb.w	r5, [r4], #1
 808914a:	f817 6b01 	ldrb.w	r6, [r7], #1
 808914e:	b91e      	cbnz	r6, 8089158 <__strtok_r+0x20>
 8089150:	b965      	cbnz	r5, 808916c <__strtok_r+0x34>
 8089152:	4628      	mov	r0, r5
 8089154:	6015      	str	r5, [r2, #0]
 8089156:	e005      	b.n	8089164 <__strtok_r+0x2c>
 8089158:	42b5      	cmp	r5, r6
 808915a:	d1f6      	bne.n	808914a <__strtok_r+0x12>
 808915c:	2b00      	cmp	r3, #0
 808915e:	d1f0      	bne.n	8089142 <__strtok_r+0xa>
 8089160:	6014      	str	r4, [r2, #0]
 8089162:	7003      	strb	r3, [r0, #0]
 8089164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8089166:	461c      	mov	r4, r3
 8089168:	e00c      	b.n	8089184 <__strtok_r+0x4c>
 808916a:	b915      	cbnz	r5, 8089172 <__strtok_r+0x3a>
 808916c:	460e      	mov	r6, r1
 808916e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8089172:	f816 5b01 	ldrb.w	r5, [r6], #1
 8089176:	42ab      	cmp	r3, r5
 8089178:	d1f7      	bne.n	808916a <__strtok_r+0x32>
 808917a:	2b00      	cmp	r3, #0
 808917c:	d0f3      	beq.n	8089166 <__strtok_r+0x2e>
 808917e:	2300      	movs	r3, #0
 8089180:	f804 3c01 	strb.w	r3, [r4, #-1]
 8089184:	6014      	str	r4, [r2, #0]
 8089186:	e7ed      	b.n	8089164 <__strtok_r+0x2c>

08089188 <_strtol_l.isra.0>:
 8089188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808918c:	468c      	mov	ip, r1
 808918e:	4686      	mov	lr, r0
 8089190:	4e39      	ldr	r6, [pc, #228]	; (8089278 <_strtol_l.isra.0+0xf0>)
 8089192:	4660      	mov	r0, ip
 8089194:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8089198:	5da5      	ldrb	r5, [r4, r6]
 808919a:	f015 0508 	ands.w	r5, r5, #8
 808919e:	d1f8      	bne.n	8089192 <_strtol_l.isra.0+0xa>
 80891a0:	2c2d      	cmp	r4, #45	; 0x2d
 80891a2:	d133      	bne.n	808920c <_strtol_l.isra.0+0x84>
 80891a4:	f04f 0801 	mov.w	r8, #1
 80891a8:	f89c 4000 	ldrb.w	r4, [ip]
 80891ac:	f100 0c02 	add.w	ip, r0, #2
 80891b0:	2b00      	cmp	r3, #0
 80891b2:	d05c      	beq.n	808926e <_strtol_l.isra.0+0xe6>
 80891b4:	2b10      	cmp	r3, #16
 80891b6:	d10c      	bne.n	80891d2 <_strtol_l.isra.0+0x4a>
 80891b8:	2c30      	cmp	r4, #48	; 0x30
 80891ba:	d10a      	bne.n	80891d2 <_strtol_l.isra.0+0x4a>
 80891bc:	f89c 0000 	ldrb.w	r0, [ip]
 80891c0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80891c4:	2858      	cmp	r0, #88	; 0x58
 80891c6:	d14d      	bne.n	8089264 <_strtol_l.isra.0+0xdc>
 80891c8:	2310      	movs	r3, #16
 80891ca:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80891ce:	f10c 0c02 	add.w	ip, ip, #2
 80891d2:	2600      	movs	r6, #0
 80891d4:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80891d8:	3f01      	subs	r7, #1
 80891da:	fbb7 f9f3 	udiv	r9, r7, r3
 80891de:	4630      	mov	r0, r6
 80891e0:	fb03 7a19 	mls	sl, r3, r9, r7
 80891e4:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 80891e8:	2d09      	cmp	r5, #9
 80891ea:	d818      	bhi.n	808921e <_strtol_l.isra.0+0x96>
 80891ec:	462c      	mov	r4, r5
 80891ee:	42a3      	cmp	r3, r4
 80891f0:	dd24      	ble.n	808923c <_strtol_l.isra.0+0xb4>
 80891f2:	1c75      	adds	r5, r6, #1
 80891f4:	d007      	beq.n	8089206 <_strtol_l.isra.0+0x7e>
 80891f6:	4581      	cmp	r9, r0
 80891f8:	d31d      	bcc.n	8089236 <_strtol_l.isra.0+0xae>
 80891fa:	d101      	bne.n	8089200 <_strtol_l.isra.0+0x78>
 80891fc:	45a2      	cmp	sl, r4
 80891fe:	db1a      	blt.n	8089236 <_strtol_l.isra.0+0xae>
 8089200:	2601      	movs	r6, #1
 8089202:	fb00 4003 	mla	r0, r0, r3, r4
 8089206:	f81c 4b01 	ldrb.w	r4, [ip], #1
 808920a:	e7eb      	b.n	80891e4 <_strtol_l.isra.0+0x5c>
 808920c:	2c2b      	cmp	r4, #43	; 0x2b
 808920e:	bf08      	it	eq
 8089210:	f89c 4000 	ldrbeq.w	r4, [ip]
 8089214:	46a8      	mov	r8, r5
 8089216:	bf08      	it	eq
 8089218:	f100 0c02 	addeq.w	ip, r0, #2
 808921c:	e7c8      	b.n	80891b0 <_strtol_l.isra.0+0x28>
 808921e:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 8089222:	2d19      	cmp	r5, #25
 8089224:	d801      	bhi.n	808922a <_strtol_l.isra.0+0xa2>
 8089226:	3c37      	subs	r4, #55	; 0x37
 8089228:	e7e1      	b.n	80891ee <_strtol_l.isra.0+0x66>
 808922a:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 808922e:	2d19      	cmp	r5, #25
 8089230:	d804      	bhi.n	808923c <_strtol_l.isra.0+0xb4>
 8089232:	3c57      	subs	r4, #87	; 0x57
 8089234:	e7db      	b.n	80891ee <_strtol_l.isra.0+0x66>
 8089236:	f04f 36ff 	mov.w	r6, #4294967295
 808923a:	e7e4      	b.n	8089206 <_strtol_l.isra.0+0x7e>
 808923c:	1c73      	adds	r3, r6, #1
 808923e:	d106      	bne.n	808924e <_strtol_l.isra.0+0xc6>
 8089240:	2322      	movs	r3, #34	; 0x22
 8089242:	4638      	mov	r0, r7
 8089244:	f8ce 3000 	str.w	r3, [lr]
 8089248:	b942      	cbnz	r2, 808925c <_strtol_l.isra.0+0xd4>
 808924a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808924e:	f1b8 0f00 	cmp.w	r8, #0
 8089252:	d000      	beq.n	8089256 <_strtol_l.isra.0+0xce>
 8089254:	4240      	negs	r0, r0
 8089256:	2a00      	cmp	r2, #0
 8089258:	d0f7      	beq.n	808924a <_strtol_l.isra.0+0xc2>
 808925a:	b10e      	cbz	r6, 8089260 <_strtol_l.isra.0+0xd8>
 808925c:	f10c 31ff 	add.w	r1, ip, #4294967295
 8089260:	6011      	str	r1, [r2, #0]
 8089262:	e7f2      	b.n	808924a <_strtol_l.isra.0+0xc2>
 8089264:	2430      	movs	r4, #48	; 0x30
 8089266:	2b00      	cmp	r3, #0
 8089268:	d1b3      	bne.n	80891d2 <_strtol_l.isra.0+0x4a>
 808926a:	2308      	movs	r3, #8
 808926c:	e7b1      	b.n	80891d2 <_strtol_l.isra.0+0x4a>
 808926e:	2c30      	cmp	r4, #48	; 0x30
 8089270:	d0a4      	beq.n	80891bc <_strtol_l.isra.0+0x34>
 8089272:	230a      	movs	r3, #10
 8089274:	e7ad      	b.n	80891d2 <_strtol_l.isra.0+0x4a>
 8089276:	bf00      	nop
 8089278:	08089f77 	.word	0x08089f77

0808927c <strtol>:
 808927c:	4613      	mov	r3, r2
 808927e:	460a      	mov	r2, r1
 8089280:	4601      	mov	r1, r0
 8089282:	4802      	ldr	r0, [pc, #8]	; (808928c <strtol+0x10>)
 8089284:	6800      	ldr	r0, [r0, #0]
 8089286:	f7ff bf7f 	b.w	8089188 <_strtol_l.isra.0>
 808928a:	bf00      	nop
 808928c:	200000cc 	.word	0x200000cc

08089290 <dynalib_user>:
 8089290:	08080041 08080081 080800a9 080800ad     A...............
 80892a0:	00000000 65746e69 6c616e72 74786500     ....internal.ext
 80892b0:	616e7265 6172006c 203a6574 616e2000     ernal.rate: . na
 80892c0:	00203a76 74747562 77206e6f 63207361     v: .button was c
 80892d0:	6b63696c 25206465 69742064 0073656d     licked %d times.
 80892e0:	616c227b 66253a22 6f6c222c 66253a22     {"la":%f,"lo":%f
 80892f0:	7468222c 66253a22 6361222c 66253a22     ,"ht":%f,"ac":%f
 8089300:	6d74222c 25223a22 007d2273 50474a4c     ,"tm":"%s"}.LJGP
 8089310:	58494653 73227b00 25203a22 6e222c64     SFIX.{"s": %d,"n
 8089320:	30203a22 2276222c 322e253a 63222c66     ": 0,"v":%.2f,"c
 8089330:	2e253a22 007d6632 57504a4c 41545352     ":%.2f}.LJPWRSTA
 8089340:	227b0054 253a2278 79222c64 64253a22     T.{"x":%d,"y":%d
 8089350:	227a222c 2c64253a 3a226d22 007d6425     ,"z":%d,"m":%d}.
 8089360:	43414a4c 54524c45 74227b00 2e253a22     LJACELRT.{"t":%.
 8089370:	222c6632 253a2268 7d66322e 454a4c00     2f,"h":%.2f}.LJE
 8089380:	544d564e 69614600 2064656c 72206f74     NVMT.Failed to r
 8089390:	20646165 6d6f7266 54484420 6e657320     ead from DHT sen
 80893a0:	21726f73 72777000 73706700 63636100     sor!.pwr.gps.acc
 80893b0:	766e6500 63227b00 3a22646d 22732522     .env.{"cmd":"%s"
 80893c0:	4a4c007d 45444d43 7b005252 3a227322     }.LJCMDERR.{"s":
 80893d0:	2c642520 3a226e22 222c3120 253a2276      %d,"n": 1,"v":%
 80893e0:	2c66322e 3a226322 66322e25 6e45007d     .2f,"c":%.2f}.En
 80893f0:	664f2064 6f6f6c20 20292870 636e7566     d Of loop() func
 8089400:	6e6f6974 696e6900 6d6f4374 74656c70     tion.initComplet
 8089410:	6f680065 6d007275 74756e69 6f6d0065     e.hour.minute.mo
 8089420:	0068746e 00796164 72616579 6c696d00     nth.day.year.mil
 8089430:	6573696c 646e6f63 616c0073 75746974     liseconds.latitu
 8089440:	6c006564 69676e6f 65647574 74616c00     de.longitude.lat
 8089450:	64757469 67654465 73656572 6e6f6c00     itudeDegrees.lon
 8089460:	75746967 65446564 65657267 65670073     gitudeDegrees.ge
 8089470:	6864696f 68676965 6c610074 75746974     oidheight.altitu
 8089480:	73006564 64656570 78696600 6c617571     de.speed.fixqual
 8089490:	00797469 65746173 74696c6c 68007365     ity.satellites.h
 80894a0:	417a726f 25006363 7600756c 41747265     orzAcc.%lu.vertA
 80894b0:	76006363 004e6c65 00646c25 456c6576     cc.velN.%ld.velE
 80894c0:	6c657600 53670044 64656570 6f646f00     .velD.gSpeed.odo
 80894d0:	70697254 6f646f00 61746f54 6f44006c     Trip.odoTotal.Do
 80894e0:	2074276e 776f6e6b 61687420 6e6f2074     n't know that on
 80894f0:	43202e65 6b636568 65707320 6e696c6c     e. Check spellin
 8089500:	4c002e67 444d434a 004c4156 56627570     g..LJCMDVAL.pubV
 8089510:	73006c61 43417465 72685443 74657300     al.setACCThr.set
 8089520:	44535047 7300796c 43417465 796c4443     GPSDly.setACCDly
 8089530:	74657300 44544844 6700796c 61527370     .setDHTDly.gpsRa
 8089540:	72006574 74657365 004f444f 776f6873     te.resetODO.show
 8089550:	006c6c41 74736f70 756c6156 69640065     All.postValue.di
 8089560:	61746967 6165726c 69640064 61746967     gitalread.digita
 8089570:	6972776c 61006574 6f6c616e 61657267     lwrite.analogrea
 8089580:	6e610064 676f6c61 74697277 616c0065     d.analogwrite.la
 8089590:	6f507473 00726577 65636361 7268546c     stPower.accelThr
 80895a0:	00687365 6e617274 74696d73 6b73614d     esh.transmitMask
 80895b0:	73616c00 53504774 00627550 7473616c     .lastGPSPub.last
 80895c0:	50434341 6c006275 44747361 75505448     ACCPub.lastDHTPu
 80895d0:	65640062 4779616c 694d5350 6564006e     b.delayGPSMin.de
 80895e0:	4179616c 694d4343 6564006e 4479616c     layACCMin.delayD
 80895f0:	694d5448 7067006e 74784573 616e7265     HTMin.gpsExterna
 8089600:	6e45006c 666f2064 74657320 29287075     l.End of setup()
 8089610:	6e756620 6f697463 6573006e 73706774      function.setgps
 8089620:	00746e61 74696e69 706d6f43 6574656c     ant.initComplete
 8089630:	6800203a 3a72756f 696d0020 6574756e     : .hour: .minute
 8089640:	6d00203a 68746e6f 6400203a 203a7961     : .month: .day: 
 8089650:	61657900 00203a72 6c6c696d 63657369     .year: .millisec
 8089660:	73646e6f 6c00203a 74697461 3a656475     onds: .latitude:
 8089670:	6f6c0020 7469676e 3a656475 616c0020      .longitude: .la
 8089680:	75746974 65446564 65657267 00203a73     titudeDegrees: .
 8089690:	676e6f6c 64757469 67654465 73656572     longitudeDegrees
 80896a0:	6700203a 64696f65 67696568 203a7468     : .geoidheight: 
 80896b0:	746c6100 64757469 00203a65 65657073     .altitude: .spee
 80896c0:	00203a64 71786966 696c6175 203a7974     d: .fixquality: 
 80896d0:	74617300 696c6c65 3a736574 6f680020     .satellites: .ho
 80896e0:	63417a72 00203a63 74726576 3a636341     rzAcc: .vertAcc:
 80896f0:	65760020 203a4e6c 6c657600 00203a45      .velN: .velE: .
 8089700:	446c6576 6700203a 65657053 00203a64     velD: .gSpeed: .
 8089710:	546f646f 3a706972 646f0020 746f546f     odoTrip: .odoTot
 8089720:	203a6c61 6e6f6300 6576456e 7453746e     al: .connEventSt
 8089730:	00737461 73736573 436e6f69 6b636568     ats.sessionCheck
 8089740:	73657400 46726574 0000006e              .testerFn...

0808974c <_ZTV5Timer>:
	...
 8089754:	080803d5 0808041d 080801c5              ............

08089760 <_ZTVN5spark10LogHandlerE>:
	...
 8089770:	080800c9 080800ed                       ........

08089778 <_ZTVN5spark16SerialLogHandlerE>:
	...
 8089780:	08080265 08080299 08085f85 080800ef     e........_......

08089790 <_ZTV12BatteryCheck>:
	...
 8089798:	08081981 08081983 65736572 6f6d0074     ........reset.mo
 80897a8:	526d6564 74657365 73657200 65537465     demReset.resetSe
 80897b8:	6f697373 7073006e 2f6b7261 69766564     ssion.spark/devi
 80897c8:	732f6563 69737365 652f6e6f 7300646e     ce/session/end.s
 80897d8:	4d656661 0065646f 57707061 68637461     afeMode.appWatch
 80897e8:	00676f64 65656c73 65640070 64007065     dog.sleep.deep.d
 80897f8:	53706565 646e6174 73007962 00706f74     eepStandby.stop.
 8089808:	706f7473 6e617453 00796264 676e6970     stopStandby.ping
 8089818:	61747300 00007472                       .start..

08089820 <_ZTV6Tester>:
	...
 8089828:	08081a75 08081a77 552b5441 474e4950     u...w...AT+UPING
 8089838:	2e38223d 2e382e38 0a0d2238 2b544100     ="8.8.8.8"...AT+
 8089848:	4e495055 61223d47 702e6970 69747261     UPING="api.parti
 8089858:	2e656c63 0d226f69 6572000a 74746573     cle.io"...resett
 8089868:	20676e69 65646f6d 5441006d 5546432b     ing modem.AT+CFU
 8089878:	36313d4e 75000a0d 6f640070 63006e77     N=16...up.down.c
 8089888:	756c6c65 2072616c 63007325 64756f6c     ellular %s.cloud
 8089898:	6e6f6320 7463656e 206e6f69 65007325      connection %s.e
 80898a8:	7265746e 6c206465 65747369 676e696e     ntered listening
 80898b8:	646f6d20 00000065                        mode...

080898c0 <_ZTV15ConnectionCheck>:
	...
 80898c8:	08081e65 08081e67 77707061 00007464     e...g...appwdt..

080898d8 <_ZTV18AppWatchdogWrapper>:
	...
 80898e0:	08082161 080821ad 7570002f 73696c62     a!...!../.publis
 80898f0:	676e6968 73657320 6e6f6973 65686320     hing session che
 8089900:	65206b63 746e6576 00732520              ck event %s.

0808990c <_ZTV12SessionCheck>:
	...
 8089914:	0808233d 0808235d 2c756c25 2c756c25     =#..]#..%lu,%lu,
 8089924:	252c6425 63003b64 646c756f 2074276e     %d,%d;.couldn't 
 8089934:	646e6573 6c6c6120 65766520 2c73746e     send all events,
 8089944:	76617320 20676e69 66206425 6c20726f      saving %d for l
 8089954:	72657461 6e657300 64252074 65766520     ater.sent %d eve
 8089964:	0073746e 63736964 69647261 6f20676e     nts.discarding o
 8089974:	6520646c 746e6576 6e6f6300 7463656e     ld event.connect
 8089984:	456e6f69 746e6576 65766520 253d746e     ionEvent event=%
 8089994:	61642064 253d6174 6e690064 61697469     d data=%d.initia
 80899a4:	697a696c 6320676e 656e6e6f 6f697463     lizing connectio
 80899b4:	7665206e 20746e65 61746572 64656e69     n event retained
 80899c4:	6d656d20 0079726f                        memory.

080899cc <_ZTV16ConnectionEvents>:
	...
 80899d4:	08082689 0808268b                       .&...&..

080899dc <_ZTV10PowerCheck>:
	...
 80899e4:	080828a1 080828b9 252c6625 70670066     .(...(..%f,%f.gp
 80899f4:	65622e73 206e6967 6c696166 203a6465     s.begin failed: 
 8089a04:	53504700 61747320 64657472 53494c00     .GPS started.LIS
 8089a14:	00484433                                3DH.

08089a18 <_ZTV15Adafruit_LIS3DH>:
	...
 8089a20:	080829cb 08082cbd 08082fb5 08083475     .)...,.../..u4..
 8089a30:	08082fb9 5024002c 2c584255 312c3134     ./..,.$PUBX,41,1
 8089a40:	312c332c 3036392c 2a302c30 0a0d3631     ,3,1,9600,0*16..
 8089a50:	67656200 66206e69 656c6961 73202c64     .begin failed, s
 8089a60:	65746174 2000203a 6f727265 00203a72     tate: . error: .
 8089a70:	73726170 41203a65 545f4b43 3a455059     parse: ACK_TYPE:
 8089a80:	656d0020 67617373 63612065 3a64656b      .message acked:
 8089a90:	61700020 3a657372 4b414e20 5059545f      .parse: NAK_TYP
 8089aa0:	00203a45 7373656d 20656761 654b414e     E: .message NAKe
 8089ab0:	00203a64 73726170 55203a65 6f6e6b6e     d: .parse: Unkno
 8089ac0:	74206e77 3a657079 003e0020 65726954     wn type: .>.Tire
 8089ad0:	666f2064 69617720 676e6974 726f6620     d of waiting for
 8089ae0:	65687420 53504720 2749202e 6f67206d      the GPS. I'm go
 8089af0:	20676e69 74756873 20746920 2066666f     ing shut it off 
 8089b00:	20646e61 6f626572 002e746f 64616572     and reboot..read
 8089b10:	6d584255 62206773 6c206461 74676e65     UBXmsg bad lengt
 8089b20:	00203a68 64616572 6d584255 62206773     h: .readUBXmsg b
 8089b30:	63206461 6b636568 6d757320 70670020     ad check sum .gp
 8089b40:	65722e73 67206461 7520746f 41427862     s.read got ubxBA
 8089b50:	454c5f44 4854474e 73706700 6165722e     D_LENGTH.gps.rea
 8089b60:	6f672064 62752074 44414278 4548435f     d got ubxBAD_CHE
 8089b70:	535f4b43 77004d55 65746972 3a584255     CK_SUM.writeUBX:
 8089b80:	70797420 00203a65 2e737067 646e6573      type: .gps.send
 8089b90:	6d6d6f43 20646e61 20746f67 42786275     Command got ubxB
 8089ba0:	4c5f4441 54474e45 70670048 65732e73     AD_LENGTH.gps.se
 8089bb0:	6f43646e 6e616d6d 6f672064 62752074     ndCommand got ub
 8089bc0:	44414278 4548435f 535f4b43 67004d55     xBAD_CHECK_SUM.g
 8089bd0:	732e7370 43646e65 616d6d6f 6720646e     ps.sendCommand g
 8089be0:	7520746f 4f4e7862 4b43415f 74657300     ot ubxNO_ACK.set
 8089bf0:	65746152 6863203a 65676e61 656d2064     Rate: changed me
 8089c00:	72757361 6e656d65 6f742074 6e696d20     asurement to min
 8089c10:	6d756d69 20303120 7300736d 61527465     imum 10 ms.setRa
 8089c20:	203a6574 6e616863 20646567 6976616e     te: changed navi
 8089c30:	69746167 6f536e6f 6f74206c 6e696d20     gationSol to min
 8089c40:	6d756d69 73003120 61527465 203a6574     imum 1.setRate: 
 8089c50:	6e616863 20646567 6976616e 69746167     changed navigati
 8089c60:	6f536e6f 6f74206c 78616d20 6d756d69     onSol to maximum
 8089c70:	37323120 74657300 65746152 656d203a      127.setRate: me
 8089c80:	72757361 6e656d65 00203a74 52746573     asurement: .setR
 8089c90:	3a657461 76616e20 74616769 536e6f69     ate: navigationS
 8089ca0:	203a6c6f 74657300 65746152 6275203a     ol: .setRate: ub
 8089cb0:	74615778 6f646863 00203a67 49480041     xWatchdog: .A.HI
 8089cc0:	4c004847                                 GH.LOW.

08089cc7 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 8089cc7:	18100800 38302820 006e616e 00666e69     .... (08nan.inf.
 8089cd7:	0066766f 64756162 72655300 006c6169     ovf.baud.Serial.
 8089ce7:	53425355 61697265 4a00316c 534e4f53     USBSerial1.JSONS
 8089cf7:	61657274 676f4c6d 646e6148 0072656c     treamLogHandler.
 8089d07:	00707061 30313025 5d002075 202c0020     app.%010u .] ., 
 8089d17:	3a292800 5b200020 646f6300 203d2065     .(): . [.code = 
 8089d27:	00692500 61746564 20736c69 6c00203d     .%i.details = .l
 8089d37:	6e66006e 646f6300 65640065 6c696174     n.fn.code.detail
	...

08089d48 <_ZTVN5spark16JSONStreamWriterE>:
	...
 8089d50:	08085301 08085327 080852e7 08087567     .S..'S...R..gu..

08089d60 <_ZTVN5spark16StreamLogHandlerE>:
	...
 8089d68:	080857b1 080857c9 08085f85 080800ef     .W...W..._......

08089d78 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 8089d80:	080857dd 080857f1 0808612d 080852ef     .W...W..-a...R..

08089d90 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 8089d98:	080852ff 08085335 08085ec1 080852f1     .R..5S...^...R..

08089da8 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 8089db0:	080852fd 08085343 080856d9 0808535f     .R..CS...V.._S..
 8089dc0:	2b25005a 3a643330 75323025 2d592500     Z.%+03d:%02u.%Y-
 8089dd0:	252d6d25 48255464 3a4d253a 7a255325     %m-%dT%H:%M:%S%z
 8089de0:	63736100 656d6974 00000000              .asctime....

08089dec <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 8089df4:	08086819 0808681f 0808685d 0808682d     .h...h..]h..-h..
 8089e04:	0808681b                                .h..

08089e08 <_ZTV9IPAddress>:
	...
 8089e10:	08086e19 08086e09 08086e0b              .n...n...n..

08089e1c <_ZTV9USBSerial>:
	...
 8089e24:	08086ead 08086f13 08086eeb 0808500d     .n...o...n...P..
 8089e34:	08086edd 08086eaf 08086ebf 08086f0d     .n...n...n...o..
 8089e44:	08086ecf 08086ea9                       .n...n..

08089e4c <_ZTVN5spark13CellularClassE>:
	...
 8089e54:	08087187 0808717d 08087173 080870ed     .q..}q..sq...p..
 8089e64:	08087167 0808715b 0808714f 08087147     gq..[q..Oq..Gq..
 8089e74:	0808713d 08087133 080870f7              =q..3q...p..

08089e80 <_ZTV11USARTSerial>:
	...
 8089e88:	080871c1 08087229 08087205 0808500d     .q..)r...r...P..
 8089e98:	080871d5 080871f1 080871e3 080871ff     .q...q...q...q..
 8089ea8:	080871c3 080871c7                       .q...q..

08089eb0 <_ZTV7TwoWire>:
	...
 8089eb8:	08087325 0808736f 08087347 08087327     %s..os..Gs..'s..
 8089ec8:	0808734f 08087357 0808735f 08087367     Os..Ws.._s..gs..

08089ed8 <_ZTVN5spark12NetworkClassE>:
	...
 8089ee0:	08087475 0808747f 08087489 08087493     ut...t...t...t..
 8089ef0:	0808749d 080874a9 080874b5 080874c1     .t...t...t...t..
 8089f00:	080874c9 080874d3 080874dd 75007525     .t...t...t..%u.u
 8089f10:	78343025                                 %04x.

08089f15 <_ZSt7nothrow>:
 8089f15:	73000000 00747271 73332e25 332e2520     ...sqrt.%.3s %.3
 8089f25:	64332573 322e2520 2e253a64 253a6432     s%3d %.2d:%.2d:%
 8089f35:	2064322e 000a6425                       .2d %d..

08089f3d <day_name.4782>:
 8089f3d:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
 8089f4d:	61536972                                 riSat

08089f52 <mon_name.4783>:
 8089f52:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
 8089f62:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
 8089f72:	63654476                                vDec

08089f76 <_ctype_>:
 8089f76:	20202000 20202020 28282020 20282828     .         ((((( 
 8089f86:	20202020 20202020 20202020 20202020                     
 8089f96:	10108820 10101010 10101010 10101010      ...............
 8089fa6:	04040410 04040404 10040404 10101010     ................
 8089fb6:	41411010 41414141 01010101 01010101     ..AAAAAA........
 8089fc6:	01010101 01010101 01010101 10101010     ................
 8089fd6:	42421010 42424242 02020202 02020202     ..BBBBBB........
 8089fe6:	02020202 02020202 02020202 10101010     ................
 8089ff6:	00000020 00000000 00000000 00000000      ...............
	...

0808a077 <link_const_variable_data_end>:
	...

0808a078 <link_constructors_location>:
 808a078:	080816ed 	.word	0x080816ed
 808a07c:	08081a25 	.word	0x08081a25
 808a080:	08081e45 	.word	0x08081e45
 808a084:	080820f1 	.word	0x080820f1
 808a088:	0808267d 	.word	0x0808267d
 808a08c:	08082895 	.word	0x08082895
 808a090:	08082ccd 	.word	0x08082ccd
 808a094:	08083ed5 	.word	0x08083ed5
 808a098:	08084cad 	.word	0x08084cad
 808a09c:	08085f75 	.word	0x08085f75
 808a0a0:	080864e5 	.word	0x080864e5
 808a0a4:	0808652d 	.word	0x0808652d
 808a0a8:	08087191 	.word	0x08087191
 808a0ac:	08087525 	.word	0x08087525
 808a0b0:	08087b11 	.word	0x08087b11

0808a0b4 <link_constructors_end>:
	...
