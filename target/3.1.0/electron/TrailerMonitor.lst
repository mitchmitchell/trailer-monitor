
c:/Users/Mitch/Documents/Particle/projects/TrailerMonitor/target/3.1.0/electron/TrailerMonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000c0a0  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000224  40024000  0808c0c0  00024000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000130  20000000  0808c2e4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000008c4  20000130  20000130  00040130  2**3
                  ALLOC
  6 .module_info_suffix 00000028  0808c414  0808c414  0003c414  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  0808c43c  0808c43c  0003c43c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001a79c0  00000000  00000000  0003c440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 0001fd3c  00000000  00000000  001e3e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 00003160  00000000  00000000  00203b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 000083d0  00000000  00000000  00206c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  000384ee  00000000  00000000  0020f06c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   00054e9b  00000000  00000000  0024755a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    000d0ff2  00000000  00000000  0029c3f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_frame  00008c78  00000000  00000000  0036d3e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    00031f21  00000000  00000000  00376060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08080020 <localtime_r>:
#endif // !(defined(DYNALIB_IMPORT) && (defined(PARTICLE_COMPILE_LTO) || defined(PARTICLE_COMPILE_LTO_FAT)))
DYNALIB_FN(18, services2, mktime32, time32_t(struct tm*))
DYNALIB_FN(19, services2, __ssvfscanf_r, int(struct _reent*, FILE*, const char*, va_list))
DYNALIB_FN(20, services2, _printf_i, int(struct _reent*, struct _prt_data_t*, FILE*, int (*pfunc)(struct _reent *, FILE *, const char *, size_t), va_list*))
DYNALIB_FN(21, services2, localtime32_r, struct tm*(const time32_t*, struct tm*))
DYNALIB_FN(22, services2, localtime_r, struct tm*(const time_t*, struct tm*))
 8080020:	b508      	push	{r3, lr}
 8080022:	4b02      	ldr	r3, [pc, #8]	; (808002c <localtime_r+0xc>)
 8080024:	681b      	ldr	r3, [r3, #0]
 8080026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8080028:	9301      	str	r3, [sp, #4]
 808002a:	bd08      	pop	{r3, pc}
 808002c:	0806002c 	.word	0x0806002c

08080030 <strftime>:
DYNALIB_FN(23, services2, mktime, time_t(struct tm*))
DYNALIB_FN(24, services2, gmtime_r, struct tm*(const time_t*, struct tm*))
DYNALIB_FN(25, services2, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
 8080030:	b508      	push	{r3, lr}
 8080032:	4b02      	ldr	r3, [pc, #8]	; (808003c <strftime+0xc>)
 8080034:	681b      	ldr	r3, [r3, #0]
 8080036:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8080038:	9301      	str	r3, [sp, #4]
 808003a:	bd08      	pop	{r3, pc}
 808003c:	0806002c 	.word	0x0806002c

08080040 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080040:	4809      	ldr	r0, [pc, #36]	; (8080068 <module_user_pre_init+0x28>)
 8080042:	490a      	ldr	r1, [pc, #40]	; (808006c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 8080044:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080046:	4288      	cmp	r0, r1
 8080048:	d005      	beq.n	8080056 <module_user_pre_init+0x16>
 808004a:	4a09      	ldr	r2, [pc, #36]	; (8080070 <module_user_pre_init+0x30>)
 808004c:	4282      	cmp	r2, r0
 808004e:	d002      	beq.n	8080056 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 8080050:	1a12      	subs	r2, r2, r0
 8080052:	f00a fdf7 	bl	808ac44 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080056:	4807      	ldr	r0, [pc, #28]	; (8080074 <module_user_pre_init+0x34>)
 8080058:	4a07      	ldr	r2, [pc, #28]	; (8080078 <module_user_pre_init+0x38>)
 808005a:	2100      	movs	r1, #0
 808005c:	1a12      	subs	r2, r2, r0
 808005e:	f00a fe19 	bl	808ac94 <memset>
    return &link_heap_start;
}
 8080062:	4806      	ldr	r0, [pc, #24]	; (808007c <module_user_pre_init+0x3c>)
 8080064:	bd08      	pop	{r3, pc}
 8080066:	bf00      	nop
 8080068:	20000000 	.word	0x20000000
 808006c:	0808c2e4 	.word	0x0808c2e4
 8080070:	20000130 	.word	0x20000130
 8080074:	20000130 	.word	0x20000130
 8080078:	200009f4 	.word	0x200009f4
 808007c:	200009f4 	.word	0x200009f4

08080080 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 8080080:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 8080082:	f006 ffd5 	bl	8087030 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080086:	2500      	movs	r5, #0
 8080088:	4e05      	ldr	r6, [pc, #20]	; (80800a0 <module_user_init+0x20>)
 808008a:	4c06      	ldr	r4, [pc, #24]	; (80800a4 <module_user_init+0x24>)
 808008c:	1ba4      	subs	r4, r4, r6
 808008e:	08a4      	lsrs	r4, r4, #2
 8080090:	42a5      	cmp	r5, r4
 8080092:	d100      	bne.n	8080096 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080094:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 8080096:	f856 3b04 	ldr.w	r3, [r6], #4
 808009a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808009c:	3501      	adds	r5, #1
 808009e:	e7f7      	b.n	8080090 <module_user_init+0x10>
 80800a0:	0808c078 	.word	0x0808c078
 80800a4:	0808c0b8 	.word	0x0808c0b8

080800a8 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80800a8:	f001 ba9c 	b.w	80815e4 <setup>

080800ac <module_user_loop>:
}

void module_user_loop() {
 80800ac:	b508      	push	{r3, lr}
    loop();
 80800ae:	f001 f87f 	bl	80811b0 <loop>
    _post_loop();
}
 80800b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80800b6:	f006 bf73 	b.w	8086fa0 <_post_loop>

080800ba <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80800ba:	f005 b861 	b.w	8085180 <malloc>

080800be <_Znaj>:
 80800be:	f005 b85f 	b.w	8085180 <malloc>

080800c2 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80800c2:	f005 b865 	b.w	8085190 <free>
	...

080800c8 <__cxa_pure_virtual>:
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 80800c8:	2100      	movs	r1, #0
 80800ca:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 80800cc:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80800ce:	4a02      	ldr	r2, [pc, #8]	; (80800d8 <__cxa_pure_virtual+0x10>)
 80800d0:	f004 ff0e 	bl	8084ef0 <panic_>
  while (1);
 80800d4:	e7fe      	b.n	80800d4 <__cxa_pure_virtual+0xc>
 80800d6:	bf00      	nop
 80800d8:	08084af1 	.word	0x08084af1

080800dc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800dc:	7800      	ldrb	r0, [r0, #0]
 80800de:	fab0 f080 	clz	r0, r0
 80800e2:	0940      	lsrs	r0, r0, #5
 80800e4:	4770      	bx	lr

080800e6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800e6:	2301      	movs	r3, #1
 80800e8:	7003      	strb	r3, [r0, #0]
 80800ea:	4770      	bx	lr

080800ec <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 80800ec:	4770      	bx	lr

080800ee <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
 80800ee:	6a00      	ldr	r0, [r0, #32]
 80800f0:	6803      	ldr	r3, [r0, #0]
 80800f2:	68db      	ldr	r3, [r3, #12]
 80800f4:	4718      	bx	r3
	...

080800f8 <_Z7callGPSv>:
int transmittingData = ( TRANSMITTINGGPSDATA | TRANSMITTINGACCDATA | TRANSMITTINGPWRDATA | TRANSMITTINGDHTDATA );
// Run the GPS off a timer interrupt.
// read all bytes available, if an entire message was received,
// parse it store the data for access by the get routines.
void callGPS() {
     t.updateGPS();
 80800f8:	4801      	ldr	r0, [pc, #4]	; (8080100 <_Z7callGPSv+0x8>)
 80800fa:	f002 bf73 	b.w	8082fe4 <_ZN13AssetTracker29updateGPSEv>
 80800fe:	bf00      	nop
 8080100:	20000278 	.word	0x20000278

08080104 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
 8080104:	6943      	ldr	r3, [r0, #20]
 8080106:	b113      	cbz	r3, 808010e <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8080108:	6983      	ldr	r3, [r0, #24]
 808010a:	300c      	adds	r0, #12
 808010c:	4718      	bx	r3
            callback();
        }
    }
 808010e:	4770      	bx	lr

08080110 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_>:
        system_set_flag(flag, value, nullptr);
    }

    static SleepResult sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags);

    static void subscribedEventHandler(system_event_t events, int data, void* pointer, void* context) {
 8080110:	b530      	push	{r4, r5, lr}
 8080112:	b085      	sub	sp, #20
 8080114:	4604      	mov	r4, r0
 8080116:	9808      	ldr	r0, [sp, #32]
        if (!context) {
 8080118:	b160      	cbz	r0, 8080134 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        auto pContext = static_cast<const SystemEventContext*>(context);
        if (!pContext->callable) {
 808011a:	6840      	ldr	r0, [r0, #4]
 808011c:	b150      	cbz	r0, 8080134 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        std::function<void(system_event_t, int, void*)>* handler = reinterpret_cast< std::function<void(system_event_t, int, void*)>* >(pContext->callable);
        if (!(*handler)) {
 808011e:	6885      	ldr	r5, [r0, #8]
 8080120:	b145      	cbz	r5, 8080134 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        (*handler)(events, data, pointer);
 8080122:	e9cd 4102 	strd	r4, r1, [sp, #8]
 8080126:	e9cd 2300 	strd	r2, r3, [sp]
 808012a:	68c4      	ldr	r4, [r0, #12]
 808012c:	466a      	mov	r2, sp
 808012e:	ab01      	add	r3, sp, #4
 8080130:	a902      	add	r1, sp, #8
 8080132:	47a0      	blx	r4
    }
 8080134:	b005      	add	sp, #20
 8080136:	bd30      	pop	{r4, r5, pc}

08080138 <_Z16accelThresholder6String>:
		else
		  transmittingData &= ~( SERIALBTNDATA | SERIALCONNDATA | SERIALLOOPDATA | SERIALSETUPDATA | SERIALGPSDATA | SERIALACCDATA | SERIALPWRDATA | SERIALDHTDATA );
}

// Remotely change the trigger threshold!
int accelThresholder(String command) {
 8080138:	b508      	push	{r3, lr}
    accelThreshold = atoi(command);
 808013a:	6800      	ldr	r0, [r0, #0]
 808013c:	f00a fd6c 	bl	808ac18 <atoi>
 8080140:	4b01      	ldr	r3, [pc, #4]	; (8080148 <_Z16accelThresholder6String+0x10>)
 8080142:	6018      	str	r0, [r3, #0]
    return accelThreshold;
}
 8080144:	bd08      	pop	{r3, pc}
 8080146:	bf00      	nop
 8080148:	20000000 	.word	0x20000000

0808014c <_Z18setDelayGPSMinutes6String>:
// Remotely change the publishing delay for GPS!
int setDelayGPSMinutes(String command) {
 808014c:	b508      	push	{r3, lr}
    delayGPSMinutes = atoi(command);
 808014e:	6800      	ldr	r0, [r0, #0]
 8080150:	f00a fd62 	bl	808ac18 <atoi>
 8080154:	4b01      	ldr	r3, [pc, #4]	; (808015c <_Z18setDelayGPSMinutes6String+0x10>)
 8080156:	6018      	str	r0, [r3, #0]
    return delayGPSMinutes;
}
 8080158:	bd08      	pop	{r3, pc}
 808015a:	bf00      	nop
 808015c:	2000000c 	.word	0x2000000c

08080160 <_Z18setDelayACCMinutes6String>:

// Remotely change the publishing delay for ACC!
int setDelayACCMinutes(String command) {
 8080160:	b508      	push	{r3, lr}
    delayACCMinutes = atoi(command);
 8080162:	6800      	ldr	r0, [r0, #0]
 8080164:	f00a fd58 	bl	808ac18 <atoi>
 8080168:	4b01      	ldr	r3, [pc, #4]	; (8080170 <_Z18setDelayACCMinutes6String+0x10>)
 808016a:	6018      	str	r0, [r3, #0]
    return delayACCMinutes;
}
 808016c:	bd08      	pop	{r3, pc}
 808016e:	bf00      	nop
 8080170:	20000004 	.word	0x20000004

08080174 <_Z18setDelayDHTMinutes6String>:

// Remotely change the publishing delay for DHT!
int setDelayDHTMinutes(String command) {
 8080174:	b508      	push	{r3, lr}
    delayDHTMinutes = atoi(command);
 8080176:	6800      	ldr	r0, [r0, #0]
 8080178:	f00a fd4e 	bl	808ac18 <atoi>
 808017c:	4b01      	ldr	r3, [pc, #4]	; (8080184 <_Z18setDelayDHTMinutes6String+0x10>)
 808017e:	6018      	str	r0, [r3, #0]
    return delayDHTMinutes;
}
 8080180:	bd08      	pop	{r3, pc}
 8080182:	bf00      	nop
 8080184:	20000008 	.word	0x20000008

08080188 <_Z12transmitMode6String>:

// Allows you to remotely change whether a device is publishing to the cloud
// or is only reporting data over Serial. Saves data when using only Serial!
// Change the default at the top of the code.
int transmitMode(String command) {
 8080188:	b508      	push	{r3, lr}
    transmittingData = atoi(command);
 808018a:	6800      	ldr	r0, [r0, #0]
 808018c:	f00a fd44 	bl	808ac18 <atoi>
 8080190:	4b01      	ldr	r3, [pc, #4]	; (8080198 <_Z12transmitMode6String+0x10>)
 8080192:	6018      	str	r0, [r3, #0]
    return transmittingData;
}
 8080194:	bd08      	pop	{r3, pc}
 8080196:	bf00      	nop
 8080198:	20000014 	.word	0x20000014

0808019c <_Z8resetODO6String>:
  }
}


// Reset the trip odometer
int resetODO(String command) {
 808019c:	b508      	push	{r3, lr}
    t.gpsResetODO();
 808019e:	4802      	ldr	r0, [pc, #8]	; (80801a8 <_Z8resetODO6String+0xc>)
 80801a0:	f002 ff2c 	bl	8082ffc <_ZN13AssetTracker211gpsResetODOEv>
    return 1;
}
 80801a4:	2001      	movs	r0, #1
 80801a6:	bd08      	pop	{r3, pc}
 80801a8:	20000278 	.word	0x20000278

080801ac <_ZN11SystemClassD1Ev>:
class SystemClass {
 80801ac:	b510      	push	{r4, lr}
 80801ae:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80801b0:	6800      	ldr	r0, [r0, #0]
 80801b2:	b108      	cbz	r0, 80801b8 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 80801b4:	f004 ffec 	bl	8085190 <free>
class SystemClass {
 80801b8:	4620      	mov	r0, r4
 80801ba:	bd10      	pop	{r4, pc}

080801bc <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
 80801bc:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
 80801be:	2100      	movs	r1, #0
 80801c0:	4604      	mov	r4, r0
 80801c2:	4608      	mov	r0, r1
 80801c4:	f004 fcf4 	bl	8084bb0 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
 80801c8:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
 80801ca:	4620      	mov	r0, r4
 80801cc:	a901      	add	r1, sp, #4
            void* id = nullptr;
 80801ce:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
 80801d0:	f004 fd06 	bl	8084be0 <os_timer_get_id>
            t = static_cast<Timer*>(id);
 80801d4:	9c01      	ldr	r4, [sp, #4]
            if (t) {
 80801d6:	b10c      	cbz	r4, 80801dc <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
 80801d8:	2301      	movs	r3, #1
 80801da:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
 80801dc:	2100      	movs	r1, #0
 80801de:	2001      	movs	r0, #1
 80801e0:	f004 fce6 	bl	8084bb0 <os_thread_scheduling>
            }
        }
        if (t) {
 80801e4:	b12c      	cbz	r4, 80801f2 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
 80801e6:	6823      	ldr	r3, [r4, #0]
 80801e8:	4620      	mov	r0, r4
 80801ea:	689b      	ldr	r3, [r3, #8]
 80801ec:	4798      	blx	r3
            t->running = false;
 80801ee:	2300      	movs	r3, #0
 80801f0:	7123      	strb	r3, [r4, #4]
        }
    }
 80801f2:	b002      	add	sp, #8
 80801f4:	bd10      	pop	{r4, pc}
	...

080801f8 <_Z13SetGPSAntenna6String>:
bool SetGPSAntenna(String command) {
 80801f8:	b510      	push	{r4, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80801fa:	490d      	ldr	r1, [pc, #52]	; (8080230 <_Z13SetGPSAntenna6String+0x38>)
 80801fc:	4604      	mov	r4, r0
 80801fe:	f005 fadc 	bl	80857ba <_ZNK6String6equalsEPKc>
  if (command == "internal") {
 8080202:	b138      	cbz	r0, 8080214 <_Z13SetGPSAntenna6String+0x1c>
    gpsAntennaExternal = false;
 8080204:	2200      	movs	r2, #0
 8080206:	4b0b      	ldr	r3, [pc, #44]	; (8080234 <_Z13SetGPSAntenna6String+0x3c>)
    return t.antennaInternal();
 8080208:	480b      	ldr	r0, [pc, #44]	; (8080238 <_Z13SetGPSAntenna6String+0x40>)
    gpsAntennaExternal = false;
 808020a:	701a      	strb	r2, [r3, #0]
}
 808020c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return t.antennaInternal();
 8080210:	f002 bec4 	b.w	8082f9c <_ZN13AssetTracker215antennaInternalEv>
 8080214:	4620      	mov	r0, r4
 8080216:	4909      	ldr	r1, [pc, #36]	; (808023c <_Z13SetGPSAntenna6String+0x44>)
 8080218:	f005 facf 	bl	80857ba <_ZNK6String6equalsEPKc>
  } else if (command == "external") {
 808021c:	b138      	cbz	r0, 808022e <_Z13SetGPSAntenna6String+0x36>
    gpsAntennaExternal = true;
 808021e:	2201      	movs	r2, #1
 8080220:	4b04      	ldr	r3, [pc, #16]	; (8080234 <_Z13SetGPSAntenna6String+0x3c>)
    return t.antennaExternal();
 8080222:	4805      	ldr	r0, [pc, #20]	; (8080238 <_Z13SetGPSAntenna6String+0x40>)
    gpsAntennaExternal = true;
 8080224:	701a      	strb	r2, [r3, #0]
}
 8080226:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return t.antennaExternal();
 808022a:	f002 bec9 	b.w	8082fc0 <_ZN13AssetTracker215antennaExternalEv>
}
 808022e:	bd10      	pop	{r4, pc}
 8080230:	0808afe8 	.word	0x0808afe8
 8080234:	20000010 	.word	0x20000010
 8080238:	20000278 	.word	0x20000278
 808023c:	0808aff1 	.word	0x0808aff1

08080240 <_ZNSt17_Function_handlerIFi6StringEPFbS0_EE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	switch (__op)
 8080240:	2a01      	cmp	r2, #1
 8080242:	d102      	bne.n	808024a <_ZNSt17_Function_handlerIFi6StringEPFbS0_EE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8080244:	6001      	str	r1, [r0, #0]
      }
 8080246:	2000      	movs	r0, #0
 8080248:	4770      	bx	lr
	  switch (__op)
 808024a:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 808024c:	bf04      	itt	eq
 808024e:	680b      	ldreq	r3, [r1, #0]
 8080250:	6003      	streq	r3, [r0, #0]
	      break;
 8080252:	e7f8      	b.n	8080246 <_ZNSt17_Function_handlerIFi6StringEPFbS0_EE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6>

08080254 <_ZNSt17_Function_handlerIFi6StringEPFbS0_EE9_M_invokeERKSt9_Any_dataOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8080254:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8080256:	6804      	ldr	r4, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8080258:	4668      	mov	r0, sp
 808025a:	f005 fa39 	bl	80856d0 <_ZN6StringC1EOS_>
 808025e:	4668      	mov	r0, sp
 8080260:	47a0      	blx	r4
 8080262:	4604      	mov	r4, r0
 8080264:	4668      	mov	r0, sp
 8080266:	f005 f9b9 	bl	80855dc <_ZN6StringD1Ev>
      }
 808026a:	4620      	mov	r0, r4
 808026c:	b004      	add	sp, #16
 808026e:	bd10      	pop	{r4, pc}

08080270 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
 8080270:	2a01      	cmp	r2, #1
 8080272:	d102      	bne.n	808027a <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8080274:	6001      	str	r1, [r0, #0]
      }
 8080276:	2000      	movs	r0, #0
 8080278:	4770      	bx	lr
	  switch (__op)
 808027a:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 808027c:	bf04      	itt	eq
 808027e:	680b      	ldreq	r3, [r1, #0]
 8080280:	6003      	streq	r3, [r0, #0]
	      break;
 8080282:	e7f8      	b.n	8080276 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

08080284 <_ZNSt17_Function_handlerIFvyiEPS0_E9_M_invokeERKSt9_Any_dataOyOi>:
 8080284:	6803      	ldr	r3, [r0, #0]
 8080286:	6812      	ldr	r2, [r2, #0]
 8080288:	e9d1 0100 	ldrd	r0, r1, [r1]
 808028c:	4718      	bx	r3

0808028e <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
 808028e:	2a01      	cmp	r2, #1
 8080290:	d102      	bne.n	8080298 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8080292:	6001      	str	r1, [r0, #0]
      }
 8080294:	2000      	movs	r0, #0
 8080296:	4770      	bx	lr
	  switch (__op)
 8080298:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 808029a:	bf04      	itt	eq
 808029c:	680b      	ldreq	r3, [r1, #0]
 808029e:	6003      	streq	r3, [r0, #0]
	      break;
 80802a0:	e7f8      	b.n	8080294 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

080802a2 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
 80802a2:	6803      	ldr	r3, [r0, #0]
 80802a4:	4718      	bx	r3

080802a6 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80802a6:	b530      	push	{r4, r5, lr}
 80802a8:	6813      	ldr	r3, [r2, #0]
	    return __source._M_access<_Functor*>();
 80802aa:	6800      	ldr	r0, [r0, #0]
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80802ac:	b085      	sub	sp, #20
 80802ae:	9301      	str	r3, [sp, #4]
      if (_M_empty())
 80802b0:	6883      	ldr	r3, [r0, #8]
 80802b2:	e9d1 4500 	ldrd	r4, r5, [r1]
 80802b6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80802ba:	b90b      	cbnz	r3, 80802c0 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_+0x1a>
	__throw_bad_function_call();
 80802bc:	f008 f925 	bl	808850a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80802c0:	68c3      	ldr	r3, [r0, #12]
 80802c2:	aa01      	add	r2, sp, #4
 80802c4:	a902      	add	r1, sp, #8
 80802c6:	4798      	blx	r3
      }
 80802c8:	b005      	add	sp, #20
 80802ca:	bd30      	pop	{r4, r5, pc}

080802cc <_ZN5Print7printlnIlLi0EEEjT_i.isra.0>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value), int> = 0>
    size_t println(T b, int base = DEC) {
 80802cc:	b570      	push	{r4, r5, r6, lr}
 80802ce:	4605      	mov	r5, r0
 80802d0:	460c      	mov	r4, r1

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
 80802d2:	4616      	mov	r6, r2
 80802d4:	b942      	cbnz	r2, 80802e8 <_ZN5Print7printlnIlLi0EEEjT_i.isra.0+0x1c>
        return write(n);
 80802d6:	6803      	ldr	r3, [r0, #0]
 80802d8:	b2c9      	uxtb	r1, r1
 80802da:	689b      	ldr	r3, [r3, #8]
 80802dc:	4798      	blx	r3
        n += println();
 80802de:	4628      	mov	r0, r5
    }
 80802e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        n += println();
 80802e4:	f005 bb39 	b.w	808595a <_ZN5Print7printlnEv>
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
 80802e8:	2900      	cmp	r1, #0
 80802ea:	da0a      	bge.n	8080302 <_ZN5Print7printlnIlLi0EEEjT_i.isra.0+0x36>
 80802ec:	2a0a      	cmp	r2, #10
 80802ee:	d108      	bne.n	8080302 <_ZN5Print7printlnIlLi0EEEjT_i.isra.0+0x36>
            t = print('-');
 80802f0:	212d      	movs	r1, #45	; 0x2d
 80802f2:	f005 fb2f 	bl	8085954 <_ZN5Print5printEc>
            val = -n;
 80802f6:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80802f8:	4628      	mov	r0, r5
 80802fa:	b2f2      	uxtb	r2, r6
 80802fc:	f005 fb43 	bl	8085986 <_ZN5Print11printNumberEmh>
 8080300:	e7ed      	b.n	80802de <_ZN5Print7printlnIlLi0EEEjT_i.isra.0+0x12>
            val = n;
 8080302:	4621      	mov	r1, r4
 8080304:	e7f8      	b.n	80802f8 <_ZN5Print7printlnIlLi0EEEjT_i.isra.0+0x2c>

08080306 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>:
    size_t println(T b, int base = DEC) {
 8080306:	b510      	push	{r4, lr}
 8080308:	4604      	mov	r4, r0
    if (base == 0) {
 808030a:	b93a      	cbnz	r2, 808031c <_ZN5Print7printlnIhLi0EEEjT_i.isra.0+0x16>
        return write(n);
 808030c:	6803      	ldr	r3, [r0, #0]
 808030e:	689b      	ldr	r3, [r3, #8]
 8080310:	4798      	blx	r3
        n += println();
 8080312:	4620      	mov	r0, r4
    }
 8080314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
 8080318:	f005 bb1f 	b.w	808595a <_ZN5Print7printlnEv>
        return printNumber(val, base) + t;
 808031c:	b2d2      	uxtb	r2, r2
 808031e:	f005 fb32 	bl	8085986 <_ZN5Print11printNumberEmh>
 8080322:	e7f6      	b.n	8080312 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0+0xc>

08080324 <_ZN10CloudClass9_functionEPKcPFi6StringE.isra.0>:
            "\n\nIn Particle.function, name must be " __XSTRING(USER_FUNC_KEY_LENGTH) " characters or less\n\n");

        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
 8080324:	4602      	mov	r2, r0
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
 8080326:	4801      	ldr	r0, [pc, #4]	; (808032c <_ZN10CloudClass9_functionEPKcPFi6StringE.isra.0+0x8>)
 8080328:	f006 bf31 	b.w	808718e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 808032c:	0808711f 	.word	0x0808711f

08080330 <_ZN10CloudClass8variableIA12_cJRiEEEbRKT_DpOT0_.isra.0>:
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 8080330:	2300      	movs	r3, #0
 8080332:	2202      	movs	r2, #2
 8080334:	f004 becc 	b.w	80850d0 <spark_variable>

08080338 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 8080338:	b510      	push	{r4, lr}
 808033a:	4604      	mov	r4, r0
 808033c:	4b09      	ldr	r3, [pc, #36]	; (8080364 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 808033e:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 8080340:	f005 fdba 	bl	8085eb8 <_ZN5spark10LogManager8instanceEv>
 8080344:	4621      	mov	r1, r4
 8080346:	f006 f818 	bl	808637a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 808034a:	f007 fa5f 	bl	808780c <_Z16_fetch_usbserialv>
 808034e:	f007 fa43 	bl	80877d8 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 8080352:	4620      	mov	r0, r4
 8080354:	4b04      	ldr	r3, [pc, #16]	; (8080368 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 8080356:	f840 3b04 	str.w	r3, [r0], #4
 808035a:	f005 feab 	bl	80860b4 <_ZN5spark6detail9LogFilterD1Ev>
    }
 808035e:	4620      	mov	r0, r4
 8080360:	bd10      	pop	{r4, pc}
 8080362:	bf00      	nop
 8080364:	0808b644 	.word	0x0808b644
 8080368:	0808b62c 	.word	0x0808b62c

0808036c <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 808036c:	b510      	push	{r4, lr}
 808036e:	4604      	mov	r4, r0
    }
 8080370:	f7ff ffe2 	bl	8080338 <_ZN5spark16SerialLogHandlerD1Ev>
 8080374:	4620      	mov	r0, r4
 8080376:	2124      	movs	r1, #36	; 0x24
 8080378:	f008 f8c1 	bl	80884fe <_ZdlPvj>
 808037c:	4620      	mov	r0, r4
 808037e:	bd10      	pop	{r4, pc}

08080380 <_Z7showAll6String>:
// then call the postValue routine passing it the name of one of these
// vales.
// For details on all values see the ublox spec:
// https://www.u-blox.com/sites/default/files/products/documents/u-blox8-M8_ReceiverDescrProtSpec_(UBX-13003221)_Public.pdf
int showAll(String cmd)
{
 8080380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    bool initComplete = t.gpsInitComplete();
 8080384:	4cc9      	ldr	r4, [pc, #804]	; (80806ac <_Z7showAll6String+0x32c>)
{
 8080386:	b093      	sub	sp, #76	; 0x4c
    bool initComplete = t.gpsInitComplete();
 8080388:	4620      	mov	r0, r4
 808038a:	f002 fdfb 	bl	8082f84 <_ZN13AssetTracker215gpsInitCompleteEv>
 808038e:	4683      	mov	fp, r0
    uint8_t hour = t.getHour(); // Time is UTC
 8080390:	4620      	mov	r0, r4
 8080392:	f002 fd5d 	bl	8082e50 <_ZN13AssetTracker27getHourEv>
 8080396:	4682      	mov	sl, r0
    uint8_t minute = t.getMinute();
 8080398:	4620      	mov	r0, r4
 808039a:	f002 fd5f 	bl	8082e5c <_ZN13AssetTracker29getMinuteEv>
 808039e:	4681      	mov	r9, r0
    uint8_t seconds = t.getSeconds();
 80803a0:	4620      	mov	r0, r4
 80803a2:	f002 fd61 	bl	8082e68 <_ZN13AssetTracker210getSecondsEv>
 80803a6:	4680      	mov	r8, r0
    uint8_t month = t.getMonth();
 80803a8:	4620      	mov	r0, r4
 80803aa:	f002 fd6f 	bl	8082e8c <_ZN13AssetTracker28getMonthEv>
 80803ae:	4607      	mov	r7, r0
    uint8_t day = t.getDay();
 80803b0:	4620      	mov	r0, r4
 80803b2:	f002 fd71 	bl	8082e98 <_ZN13AssetTracker26getDayEv>
 80803b6:	4606      	mov	r6, r0
    uint16_t year = t.getYear();
 80803b8:	4620      	mov	r0, r4
 80803ba:	f002 fd61 	bl	8082e80 <_ZN13AssetTracker27getYearEv>
 80803be:	4605      	mov	r5, r0
    uint16_t milliseconds = t.getMilliseconds(); // Since last measurement
 80803c0:	4620      	mov	r0, r4
 80803c2:	f002 fd57 	bl	8082e74 <_ZN13AssetTracker215getMillisecondsEv>
 80803c6:	9000      	str	r0, [sp, #0]
    float latitude = t.readLat(); // degrees
 80803c8:	4620      	mov	r0, r4
 80803ca:	f002 fcf1 	bl	8082db0 <_ZN13AssetTracker27readLatEv>
 80803ce:	9001      	str	r0, [sp, #4]
    float longitude = t.readLon(); // degrees
 80803d0:	4620      	mov	r0, r4
 80803d2:	f002 fcf3 	bl	8082dbc <_ZN13AssetTracker27readLonEv>
 80803d6:	9002      	str	r0, [sp, #8]
    float latitudeDegrees = t.readLatDeg(); // degrees
 80803d8:	4620      	mov	r0, r4
 80803da:	f002 fcf5 	bl	8082dc8 <_ZN13AssetTracker210readLatDegEv>
 80803de:	9003      	str	r0, [sp, #12]
    float longitudeDegrees = t.readLonDeg(); // degrees
 80803e0:	4620      	mov	r0, r4
 80803e2:	f002 fcf7 	bl	8082dd4 <_ZN13AssetTracker210readLonDegEv>
 80803e6:	9004      	str	r0, [sp, #16]
    float geoidheight = t.getGeoIdHeight(); // Height above ellipsoid, mm
 80803e8:	4620      	mov	r0, r4
 80803ea:	f002 fd6d 	bl	8082ec8 <_ZN13AssetTracker214getGeoIdHeightEv>
 80803ee:	9005      	str	r0, [sp, #20]
    float altitude = t.getAltitude(); // Height above mean sea level, mm
 80803f0:	4620      	mov	r0, r4
 80803f2:	f002 fd6f 	bl	8082ed4 <_ZN13AssetTracker211getAltitudeEv>
 80803f6:	9006      	str	r0, [sp, #24]
    float speed = t.getSpeed();  // m/s
 80803f8:	4620      	mov	r0, r4
 80803fa:	f002 fd5f 	bl	8082ebc <_ZN13AssetTracker28getSpeedEv>
 80803fe:	9007      	str	r0, [sp, #28]
    uint8_t fixquality = t.getFixQuality(); // 0:no fix,1:dead rec,2:2d,3:3d,4:gnss+dead rec,5:time only
 8080400:	4620      	mov	r0, r4
 8080402:	f002 fd55 	bl	8082eb0 <_ZN13AssetTracker213getFixQualityEv>
 8080406:	900f      	str	r0, [sp, #60]	; 0x3c
    uint8_t satellites = t.getSatellites(); // how many
 8080408:	4620      	mov	r0, r4
 808040a:	f002 fd4b 	bl	8082ea4 <_ZN13AssetTracker213getSatellitesEv>
 808040e:	9010      	str	r0, [sp, #64]	; 0x40
    uint32_t horzAcc = t.getHaccuracy(); // estimate, mm
 8080410:	4620      	mov	r0, r4
 8080412:	f002 fced 	bl	8082df0 <_ZN13AssetTracker212getHaccuracyEv>
 8080416:	9008      	str	r0, [sp, #32]
    uint32_t vertAcc = t.getVaccuracy(); // estimate, mm
 8080418:	4620      	mov	r0, r4
 808041a:	f002 fcef 	bl	8082dfc <_ZN13AssetTracker212getVaccuracyEv>
 808041e:	9009      	str	r0, [sp, #36]	; 0x24
    int32_t velN = t.getVelN(); // North velocity, mm/s
 8080420:	4620      	mov	r0, r4
 8080422:	f002 fcf1 	bl	8082e08 <_ZN13AssetTracker27getVelNEv>
 8080426:	900a      	str	r0, [sp, #40]	; 0x28
    int32_t velE = t.getVelE(); // East velocity, mm/s
 8080428:	4620      	mov	r0, r4
 808042a:	f002 fcf3 	bl	8082e14 <_ZN13AssetTracker27getVelEEv>
 808042e:	900b      	str	r0, [sp, #44]	; 0x2c
    int32_t velD = t.getVelD(); // Down velocity, mm/s
 8080430:	4620      	mov	r0, r4
 8080432:	f002 fcf5 	bl	8082e20 <_ZN13AssetTracker27getVelDEv>
 8080436:	900c      	str	r0, [sp, #48]	; 0x30
    int32_t gSpeed = t.getGspeed(); // Ground speed, mm/s
 8080438:	4620      	mov	r0, r4
 808043a:	f002 fd03 	bl	8082e44 <_ZN13AssetTracker29getGspeedEv>
 808043e:	900d      	str	r0, [sp, #52]	; 0x34
    int32_t odoTrip = t.getOdoTrip(); // m
 8080440:	4620      	mov	r0, r4
 8080442:	f002 fcf3 	bl	8082e2c <_ZN13AssetTracker210getOdoTripEv>
 8080446:	900e      	str	r0, [sp, #56]	; 0x38
    int32_t odoTotal = t.getOdoTotal(); // m
 8080448:	4620      	mov	r0, r4
 808044a:	f002 fcf5 	bl	8082e38 <_ZN13AssetTracker211getOdoTotalEv>
 808044e:	4604      	mov	r4, r0



    Serial.print("initComplete: ");
 8080450:	f007 f9dc 	bl	808780c <_Z16_fetch_usbserialv>
 8080454:	4996      	ldr	r1, [pc, #600]	; (80806b0 <_Z7showAll6String+0x330>)
 8080456:	f005 fa79 	bl	808594c <_ZN5Print5printEPKc>
    Serial.println(initComplete);
 808045a:	f007 f9d7 	bl	808780c <_Z16_fetch_usbserialv>
 808045e:	220a      	movs	r2, #10
 8080460:	4659      	mov	r1, fp
 8080462:	9011      	str	r0, [sp, #68]	; 0x44
 8080464:	f005 fa8f 	bl	8085986 <_ZN5Print11printNumberEmh>
        n += println();
 8080468:	9b11      	ldr	r3, [sp, #68]	; 0x44
 808046a:	4618      	mov	r0, r3
 808046c:	f005 fa75 	bl	808595a <_ZN5Print7printlnEv>
    Serial.print("hour: ");
 8080470:	f007 f9cc 	bl	808780c <_Z16_fetch_usbserialv>
 8080474:	498f      	ldr	r1, [pc, #572]	; (80806b4 <_Z7showAll6String+0x334>)
 8080476:	f005 fa69 	bl	808594c <_ZN5Print5printEPKc>
    Serial.println(hour);
 808047a:	f007 f9c7 	bl	808780c <_Z16_fetch_usbserialv>
 808047e:	220a      	movs	r2, #10
 8080480:	4651      	mov	r1, sl
 8080482:	f7ff ff40 	bl	8080306 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
    Serial.print("minute: ");
 8080486:	f007 f9c1 	bl	808780c <_Z16_fetch_usbserialv>
 808048a:	498b      	ldr	r1, [pc, #556]	; (80806b8 <_Z7showAll6String+0x338>)
 808048c:	f005 fa5e 	bl	808594c <_ZN5Print5printEPKc>
    Serial.println(minute);
 8080490:	f007 f9bc 	bl	808780c <_Z16_fetch_usbserialv>
 8080494:	220a      	movs	r2, #10
 8080496:	4649      	mov	r1, r9
 8080498:	f7ff ff35 	bl	8080306 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
    Serial.print("seconds: ");
 808049c:	f007 f9b6 	bl	808780c <_Z16_fetch_usbserialv>
 80804a0:	4986      	ldr	r1, [pc, #536]	; (80806bc <_Z7showAll6String+0x33c>)
 80804a2:	f005 fa53 	bl	808594c <_ZN5Print5printEPKc>
    Serial.println(seconds);
 80804a6:	f007 f9b1 	bl	808780c <_Z16_fetch_usbserialv>
 80804aa:	220a      	movs	r2, #10
 80804ac:	4641      	mov	r1, r8
 80804ae:	f7ff ff2a 	bl	8080306 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
    Serial.print("month: ");
 80804b2:	f007 f9ab 	bl	808780c <_Z16_fetch_usbserialv>
 80804b6:	4982      	ldr	r1, [pc, #520]	; (80806c0 <_Z7showAll6String+0x340>)
 80804b8:	f005 fa48 	bl	808594c <_ZN5Print5printEPKc>
    Serial.println(month);
 80804bc:	f007 f9a6 	bl	808780c <_Z16_fetch_usbserialv>
 80804c0:	220a      	movs	r2, #10
 80804c2:	4639      	mov	r1, r7
 80804c4:	f7ff ff1f 	bl	8080306 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
    Serial.print("day: ");
 80804c8:	f007 f9a0 	bl	808780c <_Z16_fetch_usbserialv>
 80804cc:	497d      	ldr	r1, [pc, #500]	; (80806c4 <_Z7showAll6String+0x344>)
 80804ce:	f005 fa3d 	bl	808594c <_ZN5Print5printEPKc>
    Serial.println(day);
 80804d2:	f007 f99b 	bl	808780c <_Z16_fetch_usbserialv>
 80804d6:	220a      	movs	r2, #10
 80804d8:	4631      	mov	r1, r6
 80804da:	f7ff ff14 	bl	8080306 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
    Serial.print("year: ");
 80804de:	f007 f995 	bl	808780c <_Z16_fetch_usbserialv>
 80804e2:	4979      	ldr	r1, [pc, #484]	; (80806c8 <_Z7showAll6String+0x348>)
 80804e4:	f005 fa32 	bl	808594c <_ZN5Print5printEPKc>
    Serial.println(year);
 80804e8:	f007 f990 	bl	808780c <_Z16_fetch_usbserialv>
 80804ec:	4606      	mov	r6, r0
        return printNumber(val, base) + t;
 80804ee:	220a      	movs	r2, #10
 80804f0:	4629      	mov	r1, r5
 80804f2:	f005 fa48 	bl	8085986 <_ZN5Print11printNumberEmh>
        n += println();
 80804f6:	4630      	mov	r0, r6
 80804f8:	f005 fa2f 	bl	808595a <_ZN5Print7printlnEv>
    Serial.print("milliseconds: ");
 80804fc:	f007 f986 	bl	808780c <_Z16_fetch_usbserialv>
 8080500:	4972      	ldr	r1, [pc, #456]	; (80806cc <_Z7showAll6String+0x34c>)
 8080502:	f005 fa23 	bl	808594c <_ZN5Print5printEPKc>
    Serial.println(milliseconds);
 8080506:	f007 f981 	bl	808780c <_Z16_fetch_usbserialv>
 808050a:	4605      	mov	r5, r0
        return printNumber(val, base) + t;
 808050c:	220a      	movs	r2, #10
 808050e:	f8bd 1000 	ldrh.w	r1, [sp]
 8080512:	f005 fa38 	bl	8085986 <_ZN5Print11printNumberEmh>
        n += println();
 8080516:	4628      	mov	r0, r5
 8080518:	f005 fa1f 	bl	808595a <_ZN5Print7printlnEv>
    Serial.print("latitude: ");
 808051c:	f007 f976 	bl	808780c <_Z16_fetch_usbserialv>
 8080520:	496b      	ldr	r1, [pc, #428]	; (80806d0 <_Z7showAll6String+0x350>)
 8080522:	f005 fa13 	bl	808594c <_ZN5Print5printEPKc>
    Serial.println(latitude);
 8080526:	f007 f971 	bl	808780c <_Z16_fetch_usbserialv>
 808052a:	2202      	movs	r2, #2
 808052c:	9901      	ldr	r1, [sp, #4]
 808052e:	f005 fb17 	bl	8085b60 <_ZN5Print7printlnEfi>
    Serial.print("longitude: ");
 8080532:	f007 f96b 	bl	808780c <_Z16_fetch_usbserialv>
 8080536:	4967      	ldr	r1, [pc, #412]	; (80806d4 <_Z7showAll6String+0x354>)
 8080538:	f005 fa08 	bl	808594c <_ZN5Print5printEPKc>
    Serial.println(longitude);
 808053c:	f007 f966 	bl	808780c <_Z16_fetch_usbserialv>
 8080540:	2202      	movs	r2, #2
 8080542:	9902      	ldr	r1, [sp, #8]
 8080544:	f005 fb0c 	bl	8085b60 <_ZN5Print7printlnEfi>
    Serial.print("latitudeDegrees: ");
 8080548:	f007 f960 	bl	808780c <_Z16_fetch_usbserialv>
 808054c:	4962      	ldr	r1, [pc, #392]	; (80806d8 <_Z7showAll6String+0x358>)
 808054e:	f005 f9fd 	bl	808594c <_ZN5Print5printEPKc>
    Serial.println(latitudeDegrees);
 8080552:	f007 f95b 	bl	808780c <_Z16_fetch_usbserialv>
 8080556:	2202      	movs	r2, #2
 8080558:	9903      	ldr	r1, [sp, #12]
 808055a:	f005 fb01 	bl	8085b60 <_ZN5Print7printlnEfi>
    Serial.print("longitudeDegrees: ");
 808055e:	f007 f955 	bl	808780c <_Z16_fetch_usbserialv>
 8080562:	495e      	ldr	r1, [pc, #376]	; (80806dc <_Z7showAll6String+0x35c>)
 8080564:	f005 f9f2 	bl	808594c <_ZN5Print5printEPKc>
    Serial.println(longitudeDegrees);
 8080568:	f007 f950 	bl	808780c <_Z16_fetch_usbserialv>
 808056c:	2202      	movs	r2, #2
 808056e:	9904      	ldr	r1, [sp, #16]
 8080570:	f005 faf6 	bl	8085b60 <_ZN5Print7printlnEfi>
    Serial.print("geoidheight: ");
 8080574:	f007 f94a 	bl	808780c <_Z16_fetch_usbserialv>
 8080578:	4959      	ldr	r1, [pc, #356]	; (80806e0 <_Z7showAll6String+0x360>)
 808057a:	f005 f9e7 	bl	808594c <_ZN5Print5printEPKc>
    Serial.println(geoidheight);
 808057e:	f007 f945 	bl	808780c <_Z16_fetch_usbserialv>
 8080582:	2202      	movs	r2, #2
 8080584:	9905      	ldr	r1, [sp, #20]
 8080586:	f005 faeb 	bl	8085b60 <_ZN5Print7printlnEfi>
    Serial.print("altitude: ");
 808058a:	f007 f93f 	bl	808780c <_Z16_fetch_usbserialv>
 808058e:	4955      	ldr	r1, [pc, #340]	; (80806e4 <_Z7showAll6String+0x364>)
 8080590:	f005 f9dc 	bl	808594c <_ZN5Print5printEPKc>
    Serial.println(altitude);
 8080594:	f007 f93a 	bl	808780c <_Z16_fetch_usbserialv>
 8080598:	2202      	movs	r2, #2
 808059a:	9906      	ldr	r1, [sp, #24]
 808059c:	f005 fae0 	bl	8085b60 <_ZN5Print7printlnEfi>
    Serial.print("speed: ");
 80805a0:	f007 f934 	bl	808780c <_Z16_fetch_usbserialv>
 80805a4:	4950      	ldr	r1, [pc, #320]	; (80806e8 <_Z7showAll6String+0x368>)
 80805a6:	f005 f9d1 	bl	808594c <_ZN5Print5printEPKc>
    Serial.println(speed);
 80805aa:	f007 f92f 	bl	808780c <_Z16_fetch_usbserialv>
 80805ae:	2202      	movs	r2, #2
 80805b0:	9907      	ldr	r1, [sp, #28]
 80805b2:	f005 fad5 	bl	8085b60 <_ZN5Print7printlnEfi>
    Serial.print("fixquality: ");
 80805b6:	f007 f929 	bl	808780c <_Z16_fetch_usbserialv>
 80805ba:	494c      	ldr	r1, [pc, #304]	; (80806ec <_Z7showAll6String+0x36c>)
 80805bc:	f005 f9c6 	bl	808594c <_ZN5Print5printEPKc>
    Serial.println(fixquality);
 80805c0:	f007 f924 	bl	808780c <_Z16_fetch_usbserialv>
 80805c4:	220a      	movs	r2, #10
 80805c6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80805c8:	f7ff fe9d 	bl	8080306 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
    Serial.print("satellites: ");
 80805cc:	f007 f91e 	bl	808780c <_Z16_fetch_usbserialv>
 80805d0:	4947      	ldr	r1, [pc, #284]	; (80806f0 <_Z7showAll6String+0x370>)
 80805d2:	f005 f9bb 	bl	808594c <_ZN5Print5printEPKc>
    Serial.println(satellites);
 80805d6:	f007 f919 	bl	808780c <_Z16_fetch_usbserialv>
 80805da:	220a      	movs	r2, #10
 80805dc:	9910      	ldr	r1, [sp, #64]	; 0x40
 80805de:	f7ff fe92 	bl	8080306 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
    Serial.print("horzAcc: ");
 80805e2:	f007 f913 	bl	808780c <_Z16_fetch_usbserialv>
 80805e6:	4943      	ldr	r1, [pc, #268]	; (80806f4 <_Z7showAll6String+0x374>)
 80805e8:	f005 f9b0 	bl	808594c <_ZN5Print5printEPKc>
    Serial.println(horzAcc);
 80805ec:	f007 f90e 	bl	808780c <_Z16_fetch_usbserialv>
 80805f0:	4605      	mov	r5, r0
        return printNumber(val, base) + t;
 80805f2:	220a      	movs	r2, #10
 80805f4:	9908      	ldr	r1, [sp, #32]
 80805f6:	f005 f9c6 	bl	8085986 <_ZN5Print11printNumberEmh>
        n += println();
 80805fa:	4628      	mov	r0, r5
 80805fc:	f005 f9ad 	bl	808595a <_ZN5Print7printlnEv>
    Serial.print("vertAcc: ");
 8080600:	f007 f904 	bl	808780c <_Z16_fetch_usbserialv>
 8080604:	493c      	ldr	r1, [pc, #240]	; (80806f8 <_Z7showAll6String+0x378>)
 8080606:	f005 f9a1 	bl	808594c <_ZN5Print5printEPKc>
    Serial.println(vertAcc);
 808060a:	f007 f8ff 	bl	808780c <_Z16_fetch_usbserialv>
 808060e:	4605      	mov	r5, r0
        return printNumber(val, base) + t;
 8080610:	220a      	movs	r2, #10
 8080612:	9909      	ldr	r1, [sp, #36]	; 0x24
 8080614:	f005 f9b7 	bl	8085986 <_ZN5Print11printNumberEmh>
        n += println();
 8080618:	4628      	mov	r0, r5
 808061a:	f005 f99e 	bl	808595a <_ZN5Print7printlnEv>
    Serial.print("velN: ");
 808061e:	f007 f8f5 	bl	808780c <_Z16_fetch_usbserialv>
 8080622:	4936      	ldr	r1, [pc, #216]	; (80806fc <_Z7showAll6String+0x37c>)
 8080624:	f005 f992 	bl	808594c <_ZN5Print5printEPKc>
    Serial.println(velN);
 8080628:	f007 f8f0 	bl	808780c <_Z16_fetch_usbserialv>
 808062c:	220a      	movs	r2, #10
 808062e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8080630:	f7ff fe4c 	bl	80802cc <_ZN5Print7printlnIlLi0EEEjT_i.isra.0>
    Serial.print("velE: ");
 8080634:	f007 f8ea 	bl	808780c <_Z16_fetch_usbserialv>
 8080638:	4931      	ldr	r1, [pc, #196]	; (8080700 <_Z7showAll6String+0x380>)
 808063a:	f005 f987 	bl	808594c <_ZN5Print5printEPKc>
    Serial.println(velE);
 808063e:	f007 f8e5 	bl	808780c <_Z16_fetch_usbserialv>
 8080642:	220a      	movs	r2, #10
 8080644:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8080646:	f7ff fe41 	bl	80802cc <_ZN5Print7printlnIlLi0EEEjT_i.isra.0>
    Serial.print("velD: ");
 808064a:	f007 f8df 	bl	808780c <_Z16_fetch_usbserialv>
 808064e:	492d      	ldr	r1, [pc, #180]	; (8080704 <_Z7showAll6String+0x384>)
 8080650:	f005 f97c 	bl	808594c <_ZN5Print5printEPKc>
    Serial.println(velD);
 8080654:	f007 f8da 	bl	808780c <_Z16_fetch_usbserialv>
 8080658:	220a      	movs	r2, #10
 808065a:	990c      	ldr	r1, [sp, #48]	; 0x30
 808065c:	f7ff fe36 	bl	80802cc <_ZN5Print7printlnIlLi0EEEjT_i.isra.0>
    Serial.print("gSpeed: ");
 8080660:	f007 f8d4 	bl	808780c <_Z16_fetch_usbserialv>
 8080664:	4928      	ldr	r1, [pc, #160]	; (8080708 <_Z7showAll6String+0x388>)
 8080666:	f005 f971 	bl	808594c <_ZN5Print5printEPKc>
    Serial.println(gSpeed);
 808066a:	f007 f8cf 	bl	808780c <_Z16_fetch_usbserialv>
 808066e:	220a      	movs	r2, #10
 8080670:	990d      	ldr	r1, [sp, #52]	; 0x34
 8080672:	f7ff fe2b 	bl	80802cc <_ZN5Print7printlnIlLi0EEEjT_i.isra.0>
    Serial.print("odoTrip: ");
 8080676:	f007 f8c9 	bl	808780c <_Z16_fetch_usbserialv>
 808067a:	4924      	ldr	r1, [pc, #144]	; (808070c <_Z7showAll6String+0x38c>)
 808067c:	f005 f966 	bl	808594c <_ZN5Print5printEPKc>
    Serial.println(odoTrip);
 8080680:	f007 f8c4 	bl	808780c <_Z16_fetch_usbserialv>
 8080684:	220a      	movs	r2, #10
 8080686:	990e      	ldr	r1, [sp, #56]	; 0x38
 8080688:	f7ff fe20 	bl	80802cc <_ZN5Print7printlnIlLi0EEEjT_i.isra.0>
    Serial.print("odoTotal: ");
 808068c:	f007 f8be 	bl	808780c <_Z16_fetch_usbserialv>
 8080690:	491f      	ldr	r1, [pc, #124]	; (8080710 <_Z7showAll6String+0x390>)
 8080692:	f005 f95b 	bl	808594c <_ZN5Print5printEPKc>
    Serial.println(odoTotal);
 8080696:	f007 f8b9 	bl	808780c <_Z16_fetch_usbserialv>
 808069a:	220a      	movs	r2, #10
 808069c:	4621      	mov	r1, r4
 808069e:	f7ff fe15 	bl	80802cc <_ZN5Print7printlnIlLi0EEEjT_i.isra.0>

    return 1;
}
 80806a2:	2001      	movs	r0, #1
 80806a4:	b013      	add	sp, #76	; 0x4c
 80806a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80806aa:	bf00      	nop
 80806ac:	20000278 	.word	0x20000278
 80806b0:	0808affa 	.word	0x0808affa
 80806b4:	0808b009 	.word	0x0808b009
 80806b8:	0808b010 	.word	0x0808b010
 80806bc:	0808b033 	.word	0x0808b033
 80806c0:	0808b019 	.word	0x0808b019
 80806c4:	0808b021 	.word	0x0808b021
 80806c8:	0808b027 	.word	0x0808b027
 80806cc:	0808b02e 	.word	0x0808b02e
 80806d0:	0808b03d 	.word	0x0808b03d
 80806d4:	0808b048 	.word	0x0808b048
 80806d8:	0808b054 	.word	0x0808b054
 80806dc:	0808b066 	.word	0x0808b066
 80806e0:	0808b079 	.word	0x0808b079
 80806e4:	0808b087 	.word	0x0808b087
 80806e8:	0808b092 	.word	0x0808b092
 80806ec:	0808b09a 	.word	0x0808b09a
 80806f0:	0808b0a7 	.word	0x0808b0a7
 80806f4:	0808b0b4 	.word	0x0808b0b4
 80806f8:	0808b0be 	.word	0x0808b0be
 80806fc:	0808b0c8 	.word	0x0808b0c8
 8080700:	0808b0cf 	.word	0x0808b0cf
 8080704:	0808b0d6 	.word	0x0808b0d6
 8080708:	0808b0dd 	.word	0x0808b0dd
 808070c:	0808b0e6 	.word	0x0808b0e6
 8080710:	0808b0f0 	.word	0x0808b0f0

08080714 <_Z7gpsRate6String>:
int gpsRate(String command) {
 8080714:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8080716:	4604      	mov	r4, r0
    uint16_t rate = atoi(command);
 8080718:	6800      	ldr	r0, [r0, #0]
 808071a:	f00a fa7d 	bl	808ac18 <atoi>
    int nav = atoi(command.substring(command.indexOf(' ')));
 808071e:	2120      	movs	r1, #32
    uint16_t rate = atoi(command);
 8080720:	b286      	uxth	r6, r0
    int nav = atoi(command.substring(command.indexOf(' ')));
 8080722:	4620      	mov	r0, r4
 8080724:	f005 f893 	bl	808584e <_ZNK6String7indexOfEc>
 8080728:	4621      	mov	r1, r4
 808072a:	4602      	mov	r2, r0
 808072c:	4668      	mov	r0, sp
 808072e:	f005 f8b3 	bl	8085898 <_ZNK6String9substringEj>
 8080732:	9800      	ldr	r0, [sp, #0]
 8080734:	f00a fa70 	bl	808ac18 <atoi>
 8080738:	4604      	mov	r4, r0
 808073a:	4668      	mov	r0, sp
 808073c:	f004 ff4e 	bl	80855dc <_ZN6StringD1Ev>
		if ((transmittingData & SERIALGPSDATA) == SERIALGPSDATA) {
 8080740:	4b16      	ldr	r3, [pc, #88]	; (808079c <_Z7gpsRate6String+0x88>)
 8080742:	681b      	ldr	r3, [r3, #0]
 8080744:	00db      	lsls	r3, r3, #3
 8080746:	d51f      	bpl.n	8080788 <_Z7gpsRate6String+0x74>
			Serial.print("rate: ");
 8080748:	f007 f860 	bl	808780c <_Z16_fetch_usbserialv>
 808074c:	4914      	ldr	r1, [pc, #80]	; (80807a0 <_Z7gpsRate6String+0x8c>)
 808074e:	f005 f8fd 	bl	808594c <_ZN5Print5printEPKc>
	    Serial.print(rate);
 8080752:	f007 f85b 	bl	808780c <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
 8080756:	220a      	movs	r2, #10
 8080758:	4631      	mov	r1, r6
 808075a:	f005 f914 	bl	8085986 <_ZN5Print11printNumberEmh>
	    Serial.print(" nav: ");
 808075e:	f007 f855 	bl	808780c <_Z16_fetch_usbserialv>
 8080762:	4910      	ldr	r1, [pc, #64]	; (80807a4 <_Z7gpsRate6String+0x90>)
 8080764:	f005 f8f2 	bl	808594c <_ZN5Print5printEPKc>
	    Serial.println(nav);
 8080768:	f007 f850 	bl	808780c <_Z16_fetch_usbserialv>
        if (n < 0 && base == 10) {
 808076c:	2c00      	cmp	r4, #0
 808076e:	4605      	mov	r5, r0
 8080770:	da12      	bge.n	8080798 <_Z7gpsRate6String+0x84>
            t = print('-');
 8080772:	212d      	movs	r1, #45	; 0x2d
 8080774:	f005 f8ee 	bl	8085954 <_ZN5Print5printEc>
            val = -n;
 8080778:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
 808077a:	220a      	movs	r2, #10
 808077c:	4628      	mov	r0, r5
 808077e:	f005 f902 	bl	8085986 <_ZN5Print11printNumberEmh>
        n += println();
 8080782:	4628      	mov	r0, r5
 8080784:	f005 f8e9 	bl	808595a <_ZN5Print7printlnEv>
    t.gpsRate(rate, nav);
 8080788:	4622      	mov	r2, r4
 808078a:	4631      	mov	r1, r6
 808078c:	4806      	ldr	r0, [pc, #24]	; (80807a8 <_Z7gpsRate6String+0x94>)
 808078e:	f002 fc2f 	bl	8082ff0 <_ZN13AssetTracker27gpsRateEti>
}
 8080792:	2001      	movs	r0, #1
 8080794:	b004      	add	sp, #16
 8080796:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
 8080798:	4621      	mov	r1, r4
 808079a:	e7ee      	b.n	808077a <_Z7gpsRate6String+0x66>
 808079c:	20000014 	.word	0x20000014
 80807a0:	0808b0fb 	.word	0x0808b0fb
 80807a4:	0808b102 	.word	0x0808b102
 80807a8:	20000278 	.word	0x20000278

080807ac <_ZN5Print8printlnfEPKcz>:
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 80807ac:	b40e      	push	{r1, r2, r3}
 80807ae:	b503      	push	{r0, r1, lr}
 80807b0:	ab03      	add	r3, sp, #12
 80807b2:	f853 2b04 	ldr.w	r2, [r3], #4
        auto r = this->vprintf(true, format, args);
 80807b6:	2101      	movs	r1, #1
        va_start(args, format);
 80807b8:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
 80807ba:	f005 f9df 	bl	8085b7c <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
 80807be:	b002      	add	sp, #8
 80807c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80807c4:	b003      	add	sp, #12
 80807c6:	4770      	bx	lr

080807c8 <_Z14button_clickedyi>:
{
 80807c8:	b538      	push	{r3, r4, r5, lr}
		if ((transmittingData & SERIALBTNDATA) == SERIALBTNDATA)
 80807ca:	4c0a      	ldr	r4, [pc, #40]	; (80807f4 <_Z14button_clickedyi+0x2c>)
{
 80807cc:	4615      	mov	r5, r2
		if ((transmittingData & SERIALBTNDATA) == SERIALBTNDATA)
 80807ce:	6823      	ldr	r3, [r4, #0]
 80807d0:	01d9      	lsls	r1, r3, #7
 80807d2:	d506      	bpl.n	80807e2 <_Z14button_clickedyi+0x1a>
    	Serial.printlnf("button was clicked %d times", times);
 80807d4:	f007 f81a 	bl	808780c <_Z16_fetch_usbserialv>
 80807d8:	4907      	ldr	r1, [pc, #28]	; (80807f8 <_Z14button_clickedyi+0x30>)
 80807da:	f005 020f 	and.w	r2, r5, #15
 80807de:	f7ff ffe5 	bl	80807ac <_ZN5Print8printlnfEPKcz>
		if ((transmittingData & SERIALLOOPDATA) == 0)
 80807e2:	6823      	ldr	r3, [r4, #0]
 80807e4:	011a      	lsls	r2, r3, #4
		 	transmittingData |= ( SERIALBTNDATA | SERIALCONNDATA | SERIALLOOPDATA | SERIALSETUPDATA | SERIALGPSDATA | SERIALACCDATA | SERIALPWRDATA | SERIALDHTDATA );
 80807e6:	bf54      	ite	pl
 80807e8:	f043 437f 	orrpl.w	r3, r3, #4278190080	; 0xff000000
		  transmittingData &= ~( SERIALBTNDATA | SERIALCONNDATA | SERIALLOOPDATA | SERIALSETUPDATA | SERIALGPSDATA | SERIALACCDATA | SERIALPWRDATA | SERIALDHTDATA );
 80807ec:	f023 437f 	bicmi.w	r3, r3, #4278190080	; 0xff000000
 80807f0:	6023      	str	r3, [r4, #0]
}
 80807f2:	bd38      	pop	{r3, r4, r5, pc}
 80807f4:	20000014 	.word	0x20000014
 80807f8:	0808b109 	.word	0x0808b109

080807fc <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 80807fc:	b510      	push	{r4, lr}
      if (_M_manager)
 80807fe:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 8080800:	4604      	mov	r4, r0
      if (_M_manager)
 8080802:	b113      	cbz	r3, 808080a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8080804:	2203      	movs	r2, #3
 8080806:	4601      	mov	r1, r0
 8080808:	4798      	blx	r3
    }
 808080a:	4620      	mov	r0, r4
 808080c:	bd10      	pop	{r4, pc}
	...

08080810 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
 8080810:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8080812:	4b13      	ldr	r3, [pc, #76]	; (8080860 <_ZN5TimerD1Ev+0x50>)
 8080814:	4604      	mov	r4, r0
 8080816:	6003      	str	r3, [r0, #0]
        if (handle) {
 8080818:	6880      	ldr	r0, [r0, #8]
 808081a:	b1c8      	cbz	r0, 8080850 <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
 808081c:	2500      	movs	r5, #0
 808081e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8080822:	2102      	movs	r1, #2
 8080824:	e9cd 3500 	strd	r3, r5, [sp]
 8080828:	462a      	mov	r2, r5
 808082a:	462b      	mov	r3, r5
 808082c:	f004 f9e0 	bl	8084bf0 <os_timer_change>
            os_timer_set_id(handle, nullptr);
 8080830:	4629      	mov	r1, r5
 8080832:	68a0      	ldr	r0, [r4, #8]
 8080834:	f004 fa0c 	bl	8084c50 <os_timer_set_id>
            while (running) {
 8080838:	7923      	ldrb	r3, [r4, #4]
 808083a:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 808083e:	b113      	cbz	r3, 8080846 <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
 8080840:	f004 f99e 	bl	8084b80 <os_thread_yield>
            while (running) {
 8080844:	e7f8      	b.n	8080838 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
 8080846:	4629      	mov	r1, r5
 8080848:	68a0      	ldr	r0, [r4, #8]
 808084a:	f004 f9c1 	bl	8084bd0 <os_timer_destroy>
            handle = nullptr;
 808084e:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
 8080850:	f104 000c 	add.w	r0, r4, #12
 8080854:	f7ff ffd2 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
    }
 8080858:	4620      	mov	r0, r4
 808085a:	b003      	add	sp, #12
 808085c:	bd30      	pop	{r4, r5, pc}
 808085e:	bf00      	nop
 8080860:	0808b618 	.word	0x0808b618

08080864 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
 8080864:	b510      	push	{r4, lr}
 8080866:	4604      	mov	r4, r0
    }
 8080868:	f7ff ffd2 	bl	8080810 <_ZN5TimerD1Ev>
 808086c:	4620      	mov	r0, r4
 808086e:	211c      	movs	r1, #28
 8080870:	f007 fe45 	bl	80884fe <_ZdlPvj>
 8080874:	4620      	mov	r0, r4
 8080876:	bd10      	pop	{r4, pc}

08080878 <_Z12startupMacrov>:
        return HAL_Feature_Set(feature, true);
 8080878:	2101      	movs	r1, #1
void startupMacro() {
 808087a:	b508      	push	{r3, lr}
 808087c:	4608      	mov	r0, r1
 808087e:	f004 f95f 	bl	8084b40 <HAL_Feature_Set>
}
 8080882:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8080886:	2101      	movs	r1, #1
 8080888:	2004      	movs	r0, #4
 808088a:	f004 b959 	b.w	8084b40 <HAL_Feature_Set>

0808088e <_ZNSt8functionIFvyiEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 808088e:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8080890:	2300      	movs	r3, #0
 8080892:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 8080894:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 8080896:	4604      	mov	r4, r0
 8080898:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 808089a:	b12b      	cbz	r3, 80808a8 <_ZNSt8functionIFvyiEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 808089c:	2202      	movs	r2, #2
 808089e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80808a0:	68eb      	ldr	r3, [r5, #12]
 80808a2:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80808a4:	68ab      	ldr	r3, [r5, #8]
 80808a6:	60a3      	str	r3, [r4, #8]
    }
 80808a8:	4620      	mov	r0, r4
 80808aa:	bd38      	pop	{r3, r4, r5, pc}

080808ac <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
 80808ac:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80808ae:	b570      	push	{r4, r5, r6, lr}
 80808b0:	4604      	mov	r4, r0
	switch (__op)
 80808b2:	d103      	bne.n	80808bc <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 80808b4:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80808b6:	6003      	str	r3, [r0, #0]
      }
 80808b8:	2000      	movs	r0, #0
 80808ba:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
 80808bc:	2a02      	cmp	r2, #2
 80808be:	d00c      	beq.n	80808da <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x2e>
 80808c0:	2a03      	cmp	r2, #3
 80808c2:	d1f9      	bne.n	80808b8 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 80808c4:	6804      	ldr	r4, [r0, #0]
 80808c6:	2c00      	cmp	r4, #0
 80808c8:	d0f6      	beq.n	80808b8 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
 80808ca:	4620      	mov	r0, r4
 80808cc:	f7ff ff96 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80808d0:	2110      	movs	r1, #16
 80808d2:	4620      	mov	r0, r4
 80808d4:	f007 fe13 	bl	80884fe <_ZdlPvj>
 80808d8:	e7ee      	b.n	80808b8 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 80808da:	2010      	movs	r0, #16
	  __dest._M_access<_Functor*>() =
 80808dc:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80808de:	f7ff fbec 	bl	80800ba <_Znwj>
 80808e2:	4605      	mov	r5, r0
 80808e4:	b110      	cbz	r0, 80808ec <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x40>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
 80808e6:	4631      	mov	r1, r6
 80808e8:	f7ff ffd1 	bl	808088e <_ZNSt8functionIFvyiEEC1ERKS1_>
	  __dest._M_access<_Functor*>() =
 80808ec:	6025      	str	r5, [r4, #0]
	}
 80808ee:	e7e3      	b.n	80808b8 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>

080808f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80808f0:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80808f2:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80808f4:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80808f6:	b17c      	cbz	r4, 8080918 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80808f8:	6863      	ldr	r3, [r4, #4]
 80808fa:	3b01      	subs	r3, #1
 80808fc:	6063      	str	r3, [r4, #4]
 80808fe:	b95b      	cbnz	r3, 8080918 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 8080900:	6823      	ldr	r3, [r4, #0]
 8080902:	4620      	mov	r0, r4
 8080904:	689b      	ldr	r3, [r3, #8]
 8080906:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8080908:	68a3      	ldr	r3, [r4, #8]
 808090a:	3b01      	subs	r3, #1
 808090c:	60a3      	str	r3, [r4, #8]
 808090e:	b91b      	cbnz	r3, 8080918 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 8080910:	6823      	ldr	r3, [r4, #0]
 8080912:	4620      	mov	r0, r4
 8080914:	68db      	ldr	r3, [r3, #12]
 8080916:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 8080918:	4628      	mov	r0, r5
 808091a:	bd38      	pop	{r3, r4, r5, pc}

0808091c <_Z10gpsPublish6String>:
int gpsPublish(String command) {
 808091c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (t.gpsFix()) {
 8080920:	482e      	ldr	r0, [pc, #184]	; (80809dc <_Z10gpsPublish6String+0xc0>)
int gpsPublish(String command) {
 8080922:	b092      	sub	sp, #72	; 0x48
    if (t.gpsFix()) {
 8080924:	f002 fb34 	bl	8082f90 <_ZN13AssetTracker26gpsFixEv>
 8080928:	2800      	cmp	r0, #0
 808092a:	d054      	beq.n	80809d6 <_Z10gpsPublish6String+0xba>
			  time_t time = Time.now();
 808092c:	f006 fa0f 	bl	8086d4e <_ZN9TimeClass3nowEv>
 8080930:	4605      	mov	r5, r0
			  Particle.publish("LJGPSFIX", String::format("{\"la\":%f,\"lo\":%f,\"ht\":%f,\"ac\":%f,\"tm\":\"%s\"}",t.readLatDeg(),t.readLonDeg(),(t.getAltitude() / 1000),(t.getGpsAccuracy() / 1000),Time.format(time, TIME_FORMAT_ISO8601_FULL).c_str()), 60, PRIVATE);
 8080932:	482a      	ldr	r0, [pc, #168]	; (80809dc <_Z10gpsPublish6String+0xc0>)
 8080934:	f002 fa48 	bl	8082dc8 <_ZN13AssetTracker210readLatDegEv>
 8080938:	4604      	mov	r4, r0
 808093a:	4828      	ldr	r0, [pc, #160]	; (80809dc <_Z10gpsPublish6String+0xc0>)
 808093c:	f002 fa4a 	bl	8082dd4 <_ZN13AssetTracker210readLonDegEv>
 8080940:	4606      	mov	r6, r0
 8080942:	4826      	ldr	r0, [pc, #152]	; (80809dc <_Z10gpsPublish6String+0xc0>)
 8080944:	f002 fac6 	bl	8082ed4 <_ZN13AssetTracker211getAltitudeEv>
 8080948:	4607      	mov	r7, r0
 808094a:	4824      	ldr	r0, [pc, #144]	; (80809dc <_Z10gpsPublish6String+0xc0>)
 808094c:	f002 fa48 	bl	8082de0 <_ZN13AssetTracker214getGpsAccuracyEv>
 8080950:	4b23      	ldr	r3, [pc, #140]	; (80809e0 <_Z10gpsPublish6String+0xc4>)
 8080952:	462a      	mov	r2, r5
 8080954:	681b      	ldr	r3, [r3, #0]
 8080956:	4680      	mov	r8, r0
 8080958:	4922      	ldr	r1, [pc, #136]	; (80809e4 <_Z10gpsPublish6String+0xc8>)
 808095a:	9300      	str	r3, [sp, #0]
 808095c:	a80e      	add	r0, sp, #56	; 0x38
 808095e:	17eb      	asrs	r3, r5, #31
 8080960:	f006 f996 	bl	8086c90 <_ZN9TimeClass6formatExPKc>
 8080964:	4620      	mov	r0, r4
 8080966:	f009 fa81 	bl	8089e6c <__aeabi_f2d>
 808096a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 808096c:	4604      	mov	r4, r0
 808096e:	460d      	mov	r5, r1
 8080970:	4640      	mov	r0, r8
 8080972:	491d      	ldr	r1, [pc, #116]	; (80809e8 <_Z10gpsPublish6String+0xcc>)
 8080974:	9306      	str	r3, [sp, #24]
 8080976:	f009 ffdb 	bl	808a930 <__aeabi_fdiv>
 808097a:	f009 fa77 	bl	8089e6c <__aeabi_f2d>
 808097e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8080982:	4919      	ldr	r1, [pc, #100]	; (80809e8 <_Z10gpsPublish6String+0xcc>)
 8080984:	4638      	mov	r0, r7
 8080986:	f009 ffd3 	bl	808a930 <__aeabi_fdiv>
 808098a:	f009 fa6f 	bl	8089e6c <__aeabi_f2d>
 808098e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8080992:	4630      	mov	r0, r6
 8080994:	f009 fa6a 	bl	8089e6c <__aeabi_f2d>
 8080998:	4622      	mov	r2, r4
 808099a:	e9cd 0100 	strd	r0, r1, [sp]
 808099e:	462b      	mov	r3, r5
 80809a0:	4912      	ldr	r1, [pc, #72]	; (80809ec <_Z10gpsPublish6String+0xd0>)
 80809a2:	a80a      	add	r0, sp, #40	; 0x28
 80809a4:	f004 ff84 	bl	80858b0 <_ZN6String6formatEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80809a8:	4b11      	ldr	r3, [pc, #68]	; (80809f0 <_Z10gpsPublish6String+0xd4>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80809aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80809ac:	781b      	ldrb	r3, [r3, #0]
 80809ae:	4911      	ldr	r1, [pc, #68]	; (80809f4 <_Z10gpsPublish6String+0xd8>)
 80809b0:	f88d 3000 	strb.w	r3, [sp]
 80809b4:	a808      	add	r0, sp, #32
 80809b6:	233c      	movs	r3, #60	; 0x3c
 80809b8:	f006 fcfa 	bl	80873b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80809bc:	a809      	add	r0, sp, #36	; 0x24
 80809be:	f7ff ff97 	bl	80808f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80809c2:	a80a      	add	r0, sp, #40	; 0x28
 80809c4:	f004 fe0a 	bl	80855dc <_ZN6StringD1Ev>
 80809c8:	a80e      	add	r0, sp, #56	; 0x38
 80809ca:	f004 fe07 	bl	80855dc <_ZN6StringD1Ev>
 80809ce:	2001      	movs	r0, #1
}
 80809d0:	b012      	add	sp, #72	; 0x48
 80809d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return 2;
 80809d6:	2002      	movs	r0, #2
 80809d8:	e7fa      	b.n	80809d0 <_Z10gpsPublish6String+0xb4>
 80809da:	bf00      	nop
 80809dc:	20000278 	.word	0x20000278
 80809e0:	200000c4 	.word	0x200000c4
 80809e4:	2000043c 	.word	0x2000043c
 80809e8:	447a0000 	.word	0x447a0000
 80809ec:	0808b125 	.word	0x0808b125
 80809f0:	20000140 	.word	0x20000140
 80809f4:	0808b151 	.word	0x0808b151

080809f8 <_Z10pwrPublish6String>:
int pwrPublish(String command){
 80809f8:	b530      	push	{r4, r5, lr}
    Particle.publish("LJPWRSTAT", String::format("{\"s\": %d,\"n\": 0,\"v\":%.2f,\"c\":%.2f}",pc.getHasPower(),fuel.getVCell(),fuel.getSoC()), 60, PRIVATE );
 80809fa:	481b      	ldr	r0, [pc, #108]	; (8080a68 <_Z10pwrPublish6String+0x70>)
int pwrPublish(String command){
 80809fc:	b08b      	sub	sp, #44	; 0x2c
    Particle.publish("LJPWRSTAT", String::format("{\"s\": %d,\"n\": 0,\"v\":%.2f,\"c\":%.2f}",pc.getHasPower(),fuel.getVCell(),fuel.getSoC()), 60, PRIVATE );
 80809fe:	f002 f9bb 	bl	8082d78 <_ZN10PowerCheck11getHasPowerEv>
 8080a02:	4604      	mov	r4, r0
 8080a04:	4819      	ldr	r0, [pc, #100]	; (8080a6c <_Z10pwrPublish6String+0x74>)
 8080a06:	f006 fa41 	bl	8086e8c <_ZN9FuelGauge8getVCellEv>
 8080a0a:	4605      	mov	r5, r0
 8080a0c:	4817      	ldr	r0, [pc, #92]	; (8080a6c <_Z10pwrPublish6String+0x74>)
 8080a0e:	f006 fa5b 	bl	8086ec8 <_ZN9FuelGauge6getSoCEv>
 8080a12:	f009 fa2b 	bl	8089e6c <__aeabi_f2d>
 8080a16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8080a1a:	4628      	mov	r0, r5
 8080a1c:	f009 fa26 	bl	8089e6c <__aeabi_f2d>
 8080a20:	4622      	mov	r2, r4
 8080a22:	e9cd 0100 	strd	r0, r1, [sp]
 8080a26:	a806      	add	r0, sp, #24
 8080a28:	4911      	ldr	r1, [pc, #68]	; (8080a70 <_Z10pwrPublish6String+0x78>)
 8080a2a:	f004 ff41 	bl	80858b0 <_ZN6String6formatEPKcz>
 8080a2e:	4b11      	ldr	r3, [pc, #68]	; (8080a74 <_Z10pwrPublish6String+0x7c>)
 8080a30:	9a06      	ldr	r2, [sp, #24]
 8080a32:	781b      	ldrb	r3, [r3, #0]
 8080a34:	4910      	ldr	r1, [pc, #64]	; (8080a78 <_Z10pwrPublish6String+0x80>)
 8080a36:	f88d 3000 	strb.w	r3, [sp]
 8080a3a:	a804      	add	r0, sp, #16
 8080a3c:	233c      	movs	r3, #60	; 0x3c
 8080a3e:	f006 fcb7 	bl	80873b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8080a42:	a805      	add	r0, sp, #20
 8080a44:	f7ff ff54 	bl	80808f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080a48:	a806      	add	r0, sp, #24
 8080a4a:	f004 fdc7 	bl	80855dc <_ZN6StringD1Ev>
    if (fuel.getSoC()>10){ return 1;}
 8080a4e:	4807      	ldr	r0, [pc, #28]	; (8080a6c <_Z10pwrPublish6String+0x74>)
 8080a50:	f006 fa3a 	bl	8086ec8 <_ZN9FuelGauge6getSoCEv>
 8080a54:	4909      	ldr	r1, [pc, #36]	; (8080a7c <_Z10pwrPublish6String+0x84>)
 8080a56:	f00a f873 	bl	808ab40 <__aeabi_fcmpgt>
    else { return 2;}
 8080a5a:	2800      	cmp	r0, #0
}
 8080a5c:	bf14      	ite	ne
 8080a5e:	2001      	movne	r0, #1
 8080a60:	2002      	moveq	r0, #2
 8080a62:	b00b      	add	sp, #44	; 0x2c
 8080a64:	bd30      	pop	{r4, r5, pc}
 8080a66:	bf00      	nop
 8080a68:	2000021c 	.word	0x2000021c
 8080a6c:	200001e4 	.word	0x200001e4
 8080a70:	0808b15a 	.word	0x0808b15a
 8080a74:	20000140 	.word	0x20000140
 8080a78:	0808b17d 	.word	0x0808b17d
 8080a7c:	41200000 	.word	0x41200000

08080a80 <_Z10accPublish6String>:
int accPublish(String command){
 8080a80:	b5f0      	push	{r4, r5, r6, r7, lr}
  Particle.publish("LJACELRT", String::format("{\"x\":%d,\"y\":%d,\"z\":%d,\"m\":%d}", t.readX(), t.readY(), t.readZ(), t.readXYZmagnitude()), 60, PRIVATE);
 8080a82:	4c16      	ldr	r4, [pc, #88]	; (8080adc <_Z10accPublish6String+0x5c>)
int accPublish(String command){
 8080a84:	b089      	sub	sp, #36	; 0x24
  Particle.publish("LJACELRT", String::format("{\"x\":%d,\"y\":%d,\"z\":%d,\"m\":%d}", t.readX(), t.readY(), t.readZ(), t.readXYZmagnitude()), 60, PRIVATE);
 8080a86:	4620      	mov	r0, r4
 8080a88:	f002 fabe 	bl	8083008 <_ZN13AssetTracker25readXEv>
 8080a8c:	4605      	mov	r5, r0
 8080a8e:	4620      	mov	r0, r4
 8080a90:	f002 fac4 	bl	808301c <_ZN13AssetTracker25readYEv>
 8080a94:	4606      	mov	r6, r0
 8080a96:	4620      	mov	r0, r4
 8080a98:	f002 faca 	bl	8083030 <_ZN13AssetTracker25readZEv>
 8080a9c:	4607      	mov	r7, r0
 8080a9e:	4620      	mov	r0, r4
 8080aa0:	f002 fad0 	bl	8083044 <_ZN13AssetTracker216readXYZmagnitudeEv>
 8080aa4:	4633      	mov	r3, r6
 8080aa6:	462a      	mov	r2, r5
 8080aa8:	e9cd 7000 	strd	r7, r0, [sp]
 8080aac:	490c      	ldr	r1, [pc, #48]	; (8080ae0 <_Z10accPublish6String+0x60>)
 8080aae:	a804      	add	r0, sp, #16
 8080ab0:	f004 fefe 	bl	80858b0 <_ZN6String6formatEPKcz>
 8080ab4:	4b0b      	ldr	r3, [pc, #44]	; (8080ae4 <_Z10accPublish6String+0x64>)
 8080ab6:	9a04      	ldr	r2, [sp, #16]
 8080ab8:	781b      	ldrb	r3, [r3, #0]
 8080aba:	490b      	ldr	r1, [pc, #44]	; (8080ae8 <_Z10accPublish6String+0x68>)
 8080abc:	f88d 3000 	strb.w	r3, [sp]
 8080ac0:	a802      	add	r0, sp, #8
 8080ac2:	233c      	movs	r3, #60	; 0x3c
 8080ac4:	f006 fc74 	bl	80873b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8080ac8:	a803      	add	r0, sp, #12
 8080aca:	f7ff ff11 	bl	80808f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080ace:	a804      	add	r0, sp, #16
 8080ad0:	f004 fd84 	bl	80855dc <_ZN6StringD1Ev>
}
 8080ad4:	2001      	movs	r0, #1
 8080ad6:	b009      	add	sp, #36	; 0x24
 8080ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8080ada:	bf00      	nop
 8080adc:	20000278 	.word	0x20000278
 8080ae0:	0808b187 	.word	0x0808b187
 8080ae4:	20000140 	.word	0x20000140
 8080ae8:	0808b1a5 	.word	0x0808b1a5

08080aec <_Z10envPublish6String>:
int envPublish(String command){
 8080aec:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = dht.acquireAndWait(DHT_SAMPLE_INTERVAL);  // Reading temperature or humidity takes about 250 milliseconds!
 8080aee:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
int envPublish(String command){
 8080af2:	b089      	sub	sp, #36	; 0x24
    int result = dht.acquireAndWait(DHT_SAMPLE_INTERVAL);  // Reading temperature or humidity takes about 250 milliseconds!
 8080af4:	4820      	ldr	r0, [pc, #128]	; (8080b78 <_Z10envPublish6String+0x8c>)
 8080af6:	f003 ff73 	bl	80849e0 <_ZN14PietteTech_DHT14acquireAndWaitEm>
 8080afa:	4606      	mov	r6, r0
  	float h = dht.getHumidity();
 8080afc:	481e      	ldr	r0, [pc, #120]	; (8080b78 <_Z10envPublish6String+0x8c>)
 8080afe:	f003 fd9b 	bl	8084638 <_ZN14PietteTech_DHT11getHumidityEv>
 8080b02:	4604      	mov	r4, r0
  	float f = dht.getFahrenheit();
 8080b04:	481c      	ldr	r0, [pc, #112]	; (8080b78 <_Z10envPublish6String+0x8c>)
 8080b06:	f003 fdb3 	bl	8084670 <_ZN14PietteTech_DHT13getFahrenheitEv>
 8080b0a:	4605      	mov	r5, r0
  	if (isnan(h) || isnan(f) || result != DHTLIB_OK) {
 8080b0c:	4601      	mov	r1, r0
 8080b0e:	4620      	mov	r0, r4
 8080b10:	f00a f820 	bl	808ab54 <__aeabi_fcmpun>
 8080b14:	b900      	cbnz	r0, 8080b18 <_Z10envPublish6String+0x2c>
 8080b16:	b12e      	cbz	r6, 8080b24 <_Z10envPublish6String+0x38>
			if ((transmittingData & SERIALDHTDATA) == SERIALDHTDATA)
 8080b18:	4b18      	ldr	r3, [pc, #96]	; (8080b7c <_Z10envPublish6String+0x90>)
 8080b1a:	681b      	ldr	r3, [r3, #0]
 8080b1c:	2b00      	cmp	r3, #0
 8080b1e:	db24      	blt.n	8080b6a <_Z10envPublish6String+0x7e>
  		return 2;
 8080b20:	2002      	movs	r0, #2
 8080b22:	e020      	b.n	8080b66 <_Z10envPublish6String+0x7a>
    Particle.publish("LJENVMT", String::format("{\"t\":%.2f,\"h\":%.2f}",f,h), 60, PRIVATE);
 8080b24:	4628      	mov	r0, r5
 8080b26:	f009 f9a1 	bl	8089e6c <__aeabi_f2d>
 8080b2a:	4606      	mov	r6, r0
 8080b2c:	4620      	mov	r0, r4
 8080b2e:	460f      	mov	r7, r1
 8080b30:	f009 f99c 	bl	8089e6c <__aeabi_f2d>
 8080b34:	4632      	mov	r2, r6
 8080b36:	e9cd 0100 	strd	r0, r1, [sp]
 8080b3a:	463b      	mov	r3, r7
 8080b3c:	4910      	ldr	r1, [pc, #64]	; (8080b80 <_Z10envPublish6String+0x94>)
 8080b3e:	a804      	add	r0, sp, #16
 8080b40:	f004 feb6 	bl	80858b0 <_ZN6String6formatEPKcz>
 8080b44:	4b0f      	ldr	r3, [pc, #60]	; (8080b84 <_Z10envPublish6String+0x98>)
 8080b46:	9a04      	ldr	r2, [sp, #16]
 8080b48:	781b      	ldrb	r3, [r3, #0]
 8080b4a:	490f      	ldr	r1, [pc, #60]	; (8080b88 <_Z10envPublish6String+0x9c>)
 8080b4c:	f88d 3000 	strb.w	r3, [sp]
 8080b50:	a802      	add	r0, sp, #8
 8080b52:	233c      	movs	r3, #60	; 0x3c
 8080b54:	f006 fc2c 	bl	80873b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8080b58:	a803      	add	r0, sp, #12
 8080b5a:	f7ff fec9 	bl	80808f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080b5e:	a804      	add	r0, sp, #16
 8080b60:	f004 fd3c 	bl	80855dc <_ZN6StringD1Ev>
    return 1;
 8080b64:	2001      	movs	r0, #1
}
 8080b66:	b009      	add	sp, #36	; 0x24
 8080b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
      	Serial.println("Failed to read from DHT sensor!");
 8080b6a:	f006 fe4f 	bl	808780c <_Z16_fetch_usbserialv>
 8080b6e:	4907      	ldr	r1, [pc, #28]	; (8080b8c <_Z10envPublish6String+0xa0>)
 8080b70:	f004 feff 	bl	8085972 <_ZN5Print7printlnEPKc>
 8080b74:	e7d4      	b.n	8080b20 <_Z10envPublish6String+0x34>
 8080b76:	bf00      	nop
 8080b78:	20000188 	.word	0x20000188
 8080b7c:	20000014 	.word	0x20000014
 8080b80:	0808b1ae 	.word	0x0808b1ae
 8080b84:	20000140 	.word	0x20000140
 8080b88:	0808b1c2 	.word	0x0808b1c2
 8080b8c:	0808b1ca 	.word	0x0808b1ca

08080b90 <_Z8pubValue6String>:
int pubValue(String command) {
 8080b90:	b530      	push	{r4, r5, lr}
 8080b92:	4927      	ldr	r1, [pc, #156]	; (8080c30 <_Z8pubValue6String+0xa0>)
 8080b94:	b089      	sub	sp, #36	; 0x24
 8080b96:	4605      	mov	r5, r0
 8080b98:	f004 fe0f 	bl	80857ba <_ZNK6String6equalsEPKc>
  if (command == "pwr") {
 8080b9c:	b168      	cbz	r0, 8080bba <_Z8pubValue6String+0x2a>
    return pwrPublish(command);
 8080b9e:	4629      	mov	r1, r5
 8080ba0:	a804      	add	r0, sp, #16
 8080ba2:	f004 fdaf 	bl	8085704 <_ZN6StringC1ERKS_>
 8080ba6:	a804      	add	r0, sp, #16
 8080ba8:	f7ff ff26 	bl	80809f8 <_Z10pwrPublish6String>
    return envPublish(command);
 8080bac:	4604      	mov	r4, r0
	  Particle.publish("LJCMDERR", String::format("{\"cmd\":\"%s\"}", command.c_str()), 60, PRIVATE);
 8080bae:	a804      	add	r0, sp, #16
 8080bb0:	f004 fd14 	bl	80855dc <_ZN6StringD1Ev>
}
 8080bb4:	4620      	mov	r0, r4
 8080bb6:	b009      	add	sp, #36	; 0x24
 8080bb8:	bd30      	pop	{r4, r5, pc}
 8080bba:	4628      	mov	r0, r5
 8080bbc:	491d      	ldr	r1, [pc, #116]	; (8080c34 <_Z8pubValue6String+0xa4>)
 8080bbe:	f004 fdfc 	bl	80857ba <_ZNK6String6equalsEPKc>
  } else if (command == "gps") {
 8080bc2:	b138      	cbz	r0, 8080bd4 <_Z8pubValue6String+0x44>
    return gpsPublish(command);
 8080bc4:	4629      	mov	r1, r5
 8080bc6:	a804      	add	r0, sp, #16
 8080bc8:	f004 fd9c 	bl	8085704 <_ZN6StringC1ERKS_>
 8080bcc:	a804      	add	r0, sp, #16
 8080bce:	f7ff fea5 	bl	808091c <_Z10gpsPublish6String>
 8080bd2:	e7eb      	b.n	8080bac <_Z8pubValue6String+0x1c>
 8080bd4:	4628      	mov	r0, r5
 8080bd6:	4918      	ldr	r1, [pc, #96]	; (8080c38 <_Z8pubValue6String+0xa8>)
 8080bd8:	f004 fdef 	bl	80857ba <_ZNK6String6equalsEPKc>
  } else if (command == "acc") {
 8080bdc:	b138      	cbz	r0, 8080bee <_Z8pubValue6String+0x5e>
    return accPublish(command);
 8080bde:	4629      	mov	r1, r5
 8080be0:	a804      	add	r0, sp, #16
 8080be2:	f004 fd8f 	bl	8085704 <_ZN6StringC1ERKS_>
 8080be6:	a804      	add	r0, sp, #16
 8080be8:	f7ff ff4a 	bl	8080a80 <_Z10accPublish6String>
 8080bec:	e7de      	b.n	8080bac <_Z8pubValue6String+0x1c>
 8080bee:	4628      	mov	r0, r5
 8080bf0:	4912      	ldr	r1, [pc, #72]	; (8080c3c <_Z8pubValue6String+0xac>)
 8080bf2:	f004 fde2 	bl	80857ba <_ZNK6String6equalsEPKc>
  } else if (command == "env") {
 8080bf6:	4604      	mov	r4, r0
 8080bf8:	b138      	cbz	r0, 8080c0a <_Z8pubValue6String+0x7a>
    return envPublish(command);
 8080bfa:	4629      	mov	r1, r5
 8080bfc:	a804      	add	r0, sp, #16
 8080bfe:	f004 fd81 	bl	8085704 <_ZN6StringC1ERKS_>
 8080c02:	a804      	add	r0, sp, #16
 8080c04:	f7ff ff72 	bl	8080aec <_Z10envPublish6String>
 8080c08:	e7d0      	b.n	8080bac <_Z8pubValue6String+0x1c>
	  Particle.publish("LJCMDERR", String::format("{\"cmd\":\"%s\"}", command.c_str()), 60, PRIVATE);
 8080c0a:	682a      	ldr	r2, [r5, #0]
 8080c0c:	a804      	add	r0, sp, #16
 8080c0e:	490c      	ldr	r1, [pc, #48]	; (8080c40 <_Z8pubValue6String+0xb0>)
 8080c10:	f004 fe4e 	bl	80858b0 <_ZN6String6formatEPKcz>
 8080c14:	4b0b      	ldr	r3, [pc, #44]	; (8080c44 <_Z8pubValue6String+0xb4>)
 8080c16:	a802      	add	r0, sp, #8
 8080c18:	781b      	ldrb	r3, [r3, #0]
 8080c1a:	9a04      	ldr	r2, [sp, #16]
 8080c1c:	f88d 3000 	strb.w	r3, [sp]
 8080c20:	4909      	ldr	r1, [pc, #36]	; (8080c48 <_Z8pubValue6String+0xb8>)
 8080c22:	233c      	movs	r3, #60	; 0x3c
 8080c24:	f006 fbc4 	bl	80873b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8080c28:	a803      	add	r0, sp, #12
 8080c2a:	f7ff fe61 	bl	80808f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080c2e:	e7be      	b.n	8080bae <_Z8pubValue6String+0x1e>
 8080c30:	0808b1ea 	.word	0x0808b1ea
 8080c34:	0808b1ee 	.word	0x0808b1ee
 8080c38:	0808b1f2 	.word	0x0808b1f2
 8080c3c:	0808b1f6 	.word	0x0808b1f6
 8080c40:	0808b1fa 	.word	0x0808b1fa
 8080c44:	20000140 	.word	0x20000140
 8080c48:	0808b207 	.word	0x0808b207

08080c4c <_Z16checkPowerStatusv>:
int checkPowerStatus() {
 8080c4c:	b570      	push	{r4, r5, r6, lr}
    bool currentPower = pc.getHasPower();
 8080c4e:	481b      	ldr	r0, [pc, #108]	; (8080cbc <_Z16checkPowerStatusv+0x70>)
int checkPowerStatus() {
 8080c50:	b08a      	sub	sp, #40	; 0x28
    bool currentPower = pc.getHasPower();
 8080c52:	f002 f891 	bl	8082d78 <_ZN10PowerCheck11getHasPowerEv>
    if (lastPower != currentPower) {
 8080c56:	4e1a      	ldr	r6, [pc, #104]	; (8080cc0 <_Z16checkPowerStatusv+0x74>)
    bool currentPower = pc.getHasPower();
 8080c58:	4604      	mov	r4, r0
    if (lastPower != currentPower) {
 8080c5a:	7833      	ldrb	r3, [r6, #0]
 8080c5c:	4283      	cmp	r3, r0
 8080c5e:	d029      	beq.n	8080cb4 <_Z16checkPowerStatusv+0x68>
      if ((transmittingData & TRANSMITTINGPWRDATA) == TRANSMITTINGPWRDATA) {
 8080c60:	4b18      	ldr	r3, [pc, #96]	; (8080cc4 <_Z16checkPowerStatusv+0x78>)
 8080c62:	681b      	ldr	r3, [r3, #0]
 8080c64:	075b      	lsls	r3, r3, #29
 8080c66:	d525      	bpl.n	8080cb4 <_Z16checkPowerStatusv+0x68>
        Particle.publish("LJPWRSTAT", String::format("{\"s\": %d,\"n\": 1,\"v\":%.2f,\"c\":%.2f}",currentPower,fuel.getVCell(),fuel.getSoC()), 60, PRIVATE );
 8080c68:	4817      	ldr	r0, [pc, #92]	; (8080cc8 <_Z16checkPowerStatusv+0x7c>)
 8080c6a:	f006 f90f 	bl	8086e8c <_ZN9FuelGauge8getVCellEv>
 8080c6e:	4605      	mov	r5, r0
 8080c70:	4815      	ldr	r0, [pc, #84]	; (8080cc8 <_Z16checkPowerStatusv+0x7c>)
 8080c72:	f006 f929 	bl	8086ec8 <_ZN9FuelGauge6getSoCEv>
 8080c76:	f009 f8f9 	bl	8089e6c <__aeabi_f2d>
 8080c7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8080c7e:	4628      	mov	r0, r5
 8080c80:	f009 f8f4 	bl	8089e6c <__aeabi_f2d>
 8080c84:	4622      	mov	r2, r4
 8080c86:	e9cd 0100 	strd	r0, r1, [sp]
 8080c8a:	4910      	ldr	r1, [pc, #64]	; (8080ccc <_Z16checkPowerStatusv+0x80>)
 8080c8c:	a806      	add	r0, sp, #24
 8080c8e:	f004 fe0f 	bl	80858b0 <_ZN6String6formatEPKcz>
 8080c92:	4b0f      	ldr	r3, [pc, #60]	; (8080cd0 <_Z16checkPowerStatusv+0x84>)
 8080c94:	9a06      	ldr	r2, [sp, #24]
 8080c96:	781b      	ldrb	r3, [r3, #0]
 8080c98:	490e      	ldr	r1, [pc, #56]	; (8080cd4 <_Z16checkPowerStatusv+0x88>)
 8080c9a:	f88d 3000 	strb.w	r3, [sp]
 8080c9e:	a804      	add	r0, sp, #16
 8080ca0:	233c      	movs	r3, #60	; 0x3c
 8080ca2:	f006 fb85 	bl	80873b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8080ca6:	a805      	add	r0, sp, #20
 8080ca8:	f7ff fe22 	bl	80808f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080cac:	a806      	add	r0, sp, #24
 8080cae:	f004 fc95 	bl	80855dc <_ZN6StringD1Ev>
        lastPower = currentPower; // note that we only update power status if we actually transmitted data so that when data is turned back on we will report
 8080cb2:	7034      	strb	r4, [r6, #0]
}
 8080cb4:	2001      	movs	r0, #1
 8080cb6:	b00a      	add	sp, #40	; 0x28
 8080cb8:	bd70      	pop	{r4, r5, r6, pc}
 8080cba:	bf00      	nop
 8080cbc:	2000021c 	.word	0x2000021c
 8080cc0:	20000011 	.word	0x20000011
 8080cc4:	20000014 	.word	0x20000014
 8080cc8:	200001e4 	.word	0x200001e4
 8080ccc:	0808b210 	.word	0x0808b210
 8080cd0:	20000140 	.word	0x20000140
 8080cd4:	0808b17d 	.word	0x0808b17d

08080cd8 <_Z14checkGPSStatusv>:
void checkGPSStatus() {
 8080cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080cdc:	b095      	sub	sp, #84	; 0x54

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8080cde:	f003 ff17 	bl	8084b10 <HAL_Timer_Get_Milli_Seconds>
    if (millis()-lastGPSPublish > ((unsigned long) delayGPSMinutes*60*1000)) {
 8080ce2:	f64e 2260 	movw	r2, #60000	; 0xea60
 8080ce6:	f8df a11c 	ldr.w	sl, [pc, #284]	; 8080e04 <_Z14checkGPSStatusv+0x12c>
 8080cea:	f8da 3000 	ldr.w	r3, [sl]
 8080cee:	1ac0      	subs	r0, r0, r3
 8080cf0:	4b45      	ldr	r3, [pc, #276]	; (8080e08 <_Z14checkGPSStatusv+0x130>)
 8080cf2:	681b      	ldr	r3, [r3, #0]
 8080cf4:	4353      	muls	r3, r2
 8080cf6:	4298      	cmp	r0, r3
 8080cf8:	f240 8081 	bls.w	8080dfe <_Z14checkGPSStatusv+0x126>
        if (t.gpsFix()) {
 8080cfc:	4843      	ldr	r0, [pc, #268]	; (8080e0c <_Z14checkGPSStatusv+0x134>)
 8080cfe:	f002 f947 	bl	8082f90 <_ZN13AssetTracker26gpsFixEv>
 8080d02:	2800      	cmp	r0, #0
 8080d04:	d07b      	beq.n	8080dfe <_Z14checkGPSStatusv+0x126>
            if ((transmittingData & TRANSMITTINGGPSDATA) == TRANSMITTINGGPSDATA) {
 8080d06:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8080e10 <_Z14checkGPSStatusv+0x138>
 8080d0a:	f8d9 3000 	ldr.w	r3, [r9]
 8080d0e:	07da      	lsls	r2, r3, #31
 8080d10:	d563      	bpl.n	8080dda <_Z14checkGPSStatusv+0x102>
							time_t time = Time.now();
 8080d12:	f006 f81c 	bl	8086d4e <_ZN9TimeClass3nowEv>
							Time.format(time, TIME_FORMAT_ISO8601_FULL); // 2004-01-10T08:22:04-05:15
 8080d16:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 8080e14 <_Z14checkGPSStatusv+0x13c>
							time_t time = Time.now();
 8080d1a:	17c3      	asrs	r3, r0, #31
							Time.format(time, TIME_FORMAT_ISO8601_FULL); // 2004-01-10T08:22:04-05:15
 8080d1c:	f8db 2000 	ldr.w	r2, [fp]
 8080d20:	493d      	ldr	r1, [pc, #244]	; (8080e18 <_Z14checkGPSStatusv+0x140>)
							time_t time = Time.now();
 8080d22:	4604      	mov	r4, r0
							Time.format(time, TIME_FORMAT_ISO8601_FULL); // 2004-01-10T08:22:04-05:15
 8080d24:	9200      	str	r2, [sp, #0]
 8080d26:	4602      	mov	r2, r0
 8080d28:	a810      	add	r0, sp, #64	; 0x40
 8080d2a:	9309      	str	r3, [sp, #36]	; 0x24
 8080d2c:	f005 ffb0 	bl	8086c90 <_ZN9TimeClass6formatExPKc>
 8080d30:	a810      	add	r0, sp, #64	; 0x40
 8080d32:	f004 fc53 	bl	80855dc <_ZN6StringD1Ev>
              Particle.publish("LJGPSFIX", String::format("{\"la\":%f,\"lo\":%f,\"ht\":%f,\"ac\":%f,\"tm\":\"%s\"}",t.readLatDeg(),t.readLonDeg(),(t.getAltitude() / 1000),(t.getGpsAccuracy() / 1000),Time.format(time, TIME_FORMAT_ISO8601_FULL).c_str()), 60, PRIVATE);
 8080d36:	4835      	ldr	r0, [pc, #212]	; (8080e0c <_Z14checkGPSStatusv+0x134>)
 8080d38:	f002 f846 	bl	8082dc8 <_ZN13AssetTracker210readLatDegEv>
 8080d3c:	4605      	mov	r5, r0
 8080d3e:	4833      	ldr	r0, [pc, #204]	; (8080e0c <_Z14checkGPSStatusv+0x134>)
 8080d40:	f002 f848 	bl	8082dd4 <_ZN13AssetTracker210readLonDegEv>
 8080d44:	4606      	mov	r6, r0
 8080d46:	4831      	ldr	r0, [pc, #196]	; (8080e0c <_Z14checkGPSStatusv+0x134>)
 8080d48:	f002 f8c4 	bl	8082ed4 <_ZN13AssetTracker211getAltitudeEv>
 8080d4c:	4607      	mov	r7, r0
 8080d4e:	482f      	ldr	r0, [pc, #188]	; (8080e0c <_Z14checkGPSStatusv+0x134>)
 8080d50:	f002 f846 	bl	8082de0 <_ZN13AssetTracker214getGpsAccuracyEv>
 8080d54:	f8db 2000 	ldr.w	r2, [fp]
 8080d58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8080d5a:	4680      	mov	r8, r0
 8080d5c:	492e      	ldr	r1, [pc, #184]	; (8080e18 <_Z14checkGPSStatusv+0x140>)
 8080d5e:	9200      	str	r2, [sp, #0]
 8080d60:	a810      	add	r0, sp, #64	; 0x40
 8080d62:	4622      	mov	r2, r4
 8080d64:	f005 ff94 	bl	8086c90 <_ZN9TimeClass6formatExPKc>
 8080d68:	4628      	mov	r0, r5
 8080d6a:	f009 f87f 	bl	8089e6c <__aeabi_f2d>
 8080d6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8080d70:	4604      	mov	r4, r0
 8080d72:	460d      	mov	r5, r1
 8080d74:	4640      	mov	r0, r8
 8080d76:	4929      	ldr	r1, [pc, #164]	; (8080e1c <_Z14checkGPSStatusv+0x144>)
 8080d78:	9306      	str	r3, [sp, #24]
 8080d7a:	f009 fdd9 	bl	808a930 <__aeabi_fdiv>
 8080d7e:	f009 f875 	bl	8089e6c <__aeabi_f2d>
 8080d82:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8080d86:	4925      	ldr	r1, [pc, #148]	; (8080e1c <_Z14checkGPSStatusv+0x144>)
 8080d88:	4638      	mov	r0, r7
 8080d8a:	f009 fdd1 	bl	808a930 <__aeabi_fdiv>
 8080d8e:	f009 f86d 	bl	8089e6c <__aeabi_f2d>
 8080d92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8080d96:	4630      	mov	r0, r6
 8080d98:	f009 f868 	bl	8089e6c <__aeabi_f2d>
 8080d9c:	4622      	mov	r2, r4
 8080d9e:	e9cd 0100 	strd	r0, r1, [sp]
 8080da2:	462b      	mov	r3, r5
 8080da4:	491e      	ldr	r1, [pc, #120]	; (8080e20 <_Z14checkGPSStatusv+0x148>)
 8080da6:	a80c      	add	r0, sp, #48	; 0x30
 8080da8:	f004 fd82 	bl	80858b0 <_ZN6String6formatEPKcz>
 8080dac:	4b1d      	ldr	r3, [pc, #116]	; (8080e24 <_Z14checkGPSStatusv+0x14c>)
 8080dae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8080db0:	781b      	ldrb	r3, [r3, #0]
 8080db2:	491d      	ldr	r1, [pc, #116]	; (8080e28 <_Z14checkGPSStatusv+0x150>)
 8080db4:	f88d 3000 	strb.w	r3, [sp]
 8080db8:	a80a      	add	r0, sp, #40	; 0x28
 8080dba:	233c      	movs	r3, #60	; 0x3c
 8080dbc:	f006 faf8 	bl	80873b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8080dc0:	a80b      	add	r0, sp, #44	; 0x2c
 8080dc2:	f7ff fd95 	bl	80808f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080dc6:	a80c      	add	r0, sp, #48	; 0x30
 8080dc8:	f004 fc08 	bl	80855dc <_ZN6StringD1Ev>
 8080dcc:	a810      	add	r0, sp, #64	; 0x40
 8080dce:	f004 fc05 	bl	80855dc <_ZN6StringD1Ev>
 8080dd2:	f003 fe9d 	bl	8084b10 <HAL_Timer_Get_Milli_Seconds>
              lastGPSPublish = millis();
 8080dd6:	f8ca 0000 	str.w	r0, [sl]
						if ((transmittingData & SERIALGPSDATA) == SERIALGPSDATA)
 8080dda:	f8d9 3000 	ldr.w	r3, [r9]
 8080dde:	00db      	lsls	r3, r3, #3
 8080de0:	d50d      	bpl.n	8080dfe <_Z14checkGPSStatusv+0x126>
            	Serial.println(t.readLatLon());
 8080de2:	f006 fd13 	bl	808780c <_Z16_fetch_usbserialv>
 8080de6:	4604      	mov	r4, r0
 8080de8:	4908      	ldr	r1, [pc, #32]	; (8080e0c <_Z14checkGPSStatusv+0x134>)
 8080dea:	a810      	add	r0, sp, #64	; 0x40
 8080dec:	f002 f878 	bl	8082ee0 <_ZN13AssetTracker210readLatLonEv>
 8080df0:	4620      	mov	r0, r4
 8080df2:	9910      	ldr	r1, [sp, #64]	; 0x40
 8080df4:	f004 fdbd 	bl	8085972 <_ZN5Print7printlnEPKc>
 8080df8:	a810      	add	r0, sp, #64	; 0x40
 8080dfa:	f004 fbef 	bl	80855dc <_ZN6StringD1Ev>
}
 8080dfe:	b015      	add	sp, #84	; 0x54
 8080e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8080e04:	200001f4 	.word	0x200001f4
 8080e08:	2000000c 	.word	0x2000000c
 8080e0c:	20000278 	.word	0x20000278
 8080e10:	20000014 	.word	0x20000014
 8080e14:	200000c4 	.word	0x200000c4
 8080e18:	2000043c 	.word	0x2000043c
 8080e1c:	447a0000 	.word	0x447a0000
 8080e20:	0808b125 	.word	0x0808b125
 8080e24:	20000140 	.word	0x20000140
 8080e28:	0808b151 	.word	0x0808b151

08080e2c <_Z16checkAccelStatusv>:
void checkAccelStatus() {
 8080e2c:	b570      	push	{r4, r5, r6, lr}
      int readMagnitude = t.readXYZmagnitude();
 8080e2e:	4833      	ldr	r0, [pc, #204]	; (8080efc <_Z16checkAccelStatusv+0xd0>)
void checkAccelStatus() {
 8080e30:	b086      	sub	sp, #24
      int readMagnitude = t.readXYZmagnitude();
 8080e32:	f002 f907 	bl	8083044 <_ZN13AssetTracker216readXYZmagnitudeEv>
      if (readMagnitude > accelThreshold) {
 8080e36:	4b32      	ldr	r3, [pc, #200]	; (8080f00 <_Z16checkAccelStatusv+0xd4>)
      int readMagnitude = t.readXYZmagnitude();
 8080e38:	4604      	mov	r4, r0
      if (readMagnitude > accelThreshold) {
 8080e3a:	681b      	ldr	r3, [r3, #0]
 8080e3c:	4283      	cmp	r3, r0
 8080e3e:	da23      	bge.n	8080e88 <_Z16checkAccelStatusv+0x5c>
          pubAccel = String::format("{\"x\":%d,\"y\":%d,\"z\":%d,\"m\":%d}", t.readX(), t.readY(), t.readZ(), readMagnitude);
 8080e40:	482e      	ldr	r0, [pc, #184]	; (8080efc <_Z16checkAccelStatusv+0xd0>)
 8080e42:	f002 f8e1 	bl	8083008 <_ZN13AssetTracker25readXEv>
 8080e46:	4605      	mov	r5, r0
 8080e48:	482c      	ldr	r0, [pc, #176]	; (8080efc <_Z16checkAccelStatusv+0xd0>)
 8080e4a:	f002 f8e7 	bl	808301c <_ZN13AssetTracker25readYEv>
 8080e4e:	4606      	mov	r6, r0
 8080e50:	482a      	ldr	r0, [pc, #168]	; (8080efc <_Z16checkAccelStatusv+0xd0>)
 8080e52:	f002 f8ed 	bl	8083030 <_ZN13AssetTracker25readZEv>
 8080e56:	e9cd 0400 	strd	r0, r4, [sp]
 8080e5a:	4c2a      	ldr	r4, [pc, #168]	; (8080f04 <_Z16checkAccelStatusv+0xd8>)
 8080e5c:	4633      	mov	r3, r6
 8080e5e:	462a      	mov	r2, r5
 8080e60:	4929      	ldr	r1, [pc, #164]	; (8080f08 <_Z16checkAccelStatusv+0xdc>)
 8080e62:	a802      	add	r0, sp, #8
 8080e64:	f004 fd24 	bl	80858b0 <_ZN6String6formatEPKcz>
 8080e68:	a902      	add	r1, sp, #8
 8080e6a:	4620      	mov	r0, r4
 8080e6c:	f004 fc55 	bl	808571a <_ZN6StringaSEOS_>
 8080e70:	a802      	add	r0, sp, #8
 8080e72:	f004 fbb3 	bl	80855dc <_ZN6StringD1Ev>
					if ((transmittingData & SERIALACCDATA) == SERIALACCDATA)
 8080e76:	4b25      	ldr	r3, [pc, #148]	; (8080f0c <_Z16checkAccelStatusv+0xe0>)
 8080e78:	681b      	ldr	r3, [r3, #0]
 8080e7a:	009a      	lsls	r2, r3, #2
 8080e7c:	d504      	bpl.n	8080e88 <_Z16checkAccelStatusv+0x5c>
          	Serial.println(pubAccel);
 8080e7e:	f006 fcc5 	bl	808780c <_Z16_fetch_usbserialv>
 8080e82:	6821      	ldr	r1, [r4, #0]
 8080e84:	f004 fd75 	bl	8085972 <_ZN5Print7printlnEPKc>
 8080e88:	f003 fe42 	bl	8084b10 <HAL_Timer_Get_Milli_Seconds>
      if (millis()-lastACCPublish > ((unsigned long) delayACCMinutes*60*1000)) {
 8080e8c:	f64e 2260 	movw	r2, #60000	; 0xea60
 8080e90:	4d1f      	ldr	r5, [pc, #124]	; (8080f10 <_Z16checkAccelStatusv+0xe4>)
 8080e92:	682b      	ldr	r3, [r5, #0]
 8080e94:	1ac0      	subs	r0, r0, r3
 8080e96:	4b1f      	ldr	r3, [pc, #124]	; (8080f14 <_Z16checkAccelStatusv+0xe8>)
 8080e98:	681b      	ldr	r3, [r3, #0]
 8080e9a:	4353      	muls	r3, r2
 8080e9c:	4298      	cmp	r0, r3
 8080e9e:	d92a      	bls.n	8080ef6 <_Z16checkAccelStatusv+0xca>
          if ((transmittingData & TRANSMITTINGACCDATA) == TRANSMITTINGACCDATA) {
 8080ea0:	4b1a      	ldr	r3, [pc, #104]	; (8080f0c <_Z16checkAccelStatusv+0xe0>)
 8080ea2:	681b      	ldr	r3, [r3, #0]
 8080ea4:	079b      	lsls	r3, r3, #30
 8080ea6:	d526      	bpl.n	8080ef6 <_Z16checkAccelStatusv+0xca>
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 8080ea8:	4c16      	ldr	r4, [pc, #88]	; (8080f04 <_Z16checkAccelStatusv+0xd8>)
 8080eaa:	491b      	ldr	r1, [pc, #108]	; (8080f18 <_Z16checkAccelStatusv+0xec>)
 8080eac:	4620      	mov	r0, r4
 8080eae:	f004 fc84 	bl	80857ba <_ZNK6String6equalsEPKc>
            if (pubAccel != "") {
 8080eb2:	bb00      	cbnz	r0, 8080ef6 <_Z16checkAccelStatusv+0xca>
 8080eb4:	4b19      	ldr	r3, [pc, #100]	; (8080f1c <_Z16checkAccelStatusv+0xf0>)
 8080eb6:	491a      	ldr	r1, [pc, #104]	; (8080f20 <_Z16checkAccelStatusv+0xf4>)
 8080eb8:	781b      	ldrb	r3, [r3, #0]
 8080eba:	a802      	add	r0, sp, #8
 8080ebc:	f88d 3000 	strb.w	r3, [sp]
 8080ec0:	6822      	ldr	r2, [r4, #0]
 8080ec2:	233c      	movs	r3, #60	; 0x3c
 8080ec4:	f006 fa74 	bl	80873b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8080ec8:	a803      	add	r0, sp, #12
 8080eca:	f7ff fd11 	bl	80808f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
							gpsPublish(""); // publish position if we get an accelleration alert
 8080ece:	4912      	ldr	r1, [pc, #72]	; (8080f18 <_Z16checkAccelStatusv+0xec>)
 8080ed0:	a802      	add	r0, sp, #8
 8080ed2:	f004 fbcd 	bl	8085670 <_ZN6StringC1EPK19__FlashStringHelper>
 8080ed6:	a802      	add	r0, sp, #8
 8080ed8:	f7ff fd20 	bl	808091c <_Z10gpsPublish6String>
 8080edc:	a802      	add	r0, sp, #8
 8080ede:	f004 fb7d 	bl	80855dc <_ZN6StringD1Ev>
 8080ee2:	f003 fe15 	bl	8084b10 <HAL_Timer_Get_Milli_Seconds>
              lastACCPublish = millis();
 8080ee6:	6028      	str	r0, [r5, #0]
              pubAccel = "";
 8080ee8:	4620      	mov	r0, r4
 8080eea:	490b      	ldr	r1, [pc, #44]	; (8080f18 <_Z16checkAccelStatusv+0xec>)
}
 8080eec:	b006      	add	sp, #24
 8080eee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              pubAccel = "";
 8080ef2:	f004 bc1a 	b.w	808572a <_ZN6StringaSEPKc>
}
 8080ef6:	b006      	add	sp, #24
 8080ef8:	bd70      	pop	{r4, r5, r6, pc}
 8080efa:	bf00      	nop
 8080efc:	20000278 	.word	0x20000278
 8080f00:	20000000 	.word	0x20000000
 8080f04:	20000228 	.word	0x20000228
 8080f08:	0808b187 	.word	0x0808b187
 8080f0c:	20000014 	.word	0x20000014
 8080f10:	200001ec 	.word	0x200001ec
 8080f14:	20000004 	.word	0x20000004
 8080f18:	0808b70c 	.word	0x0808b70c
 8080f1c:	20000140 	.word	0x20000140
 8080f20:	0808b1a5 	.word	0x0808b1a5

08080f24 <_Z14checkDHTStatusv>:
void checkDHTStatus() {
 8080f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8080f28:	b088      	sub	sp, #32
 8080f2a:	f003 fdf1 	bl	8084b10 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - msLastSample <  DHT_SAMPLE_INTERVAL) return;
 8080f2e:	f8df 9214 	ldr.w	r9, [pc, #532]	; 8081144 <_Z14checkDHTStatusv+0x220>
 8080f32:	f8d9 3000 	ldr.w	r3, [r9]
 8080f36:	1ac0      	subs	r0, r0, r3
 8080f38:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8080f3c:	f0c0 80d7 	bcc.w	80810ee <_Z14checkDHTStatusv+0x1ca>
  if (!bDHTstarted) {               // start the sample
 8080f40:	f8df 8204 	ldr.w	r8, [pc, #516]	; 8081148 <_Z14checkDHTStatusv+0x224>
 8080f44:	f898 3000 	ldrb.w	r3, [r8]
 8080f48:	b973      	cbnz	r3, 8080f68 <_Z14checkDHTStatusv+0x44>
		if ((transmittingData & SERIALDHTDATA) == SERIALDHTDATA) {
 8080f4a:	4b80      	ldr	r3, [pc, #512]	; (808114c <_Z14checkDHTStatusv+0x228>)
 8080f4c:	681b      	ldr	r3, [r3, #0]
 8080f4e:	2b00      	cmp	r3, #0
 8080f50:	da04      	bge.n	8080f5c <_Z14checkDHTStatusv+0x38>
      Serial.println("\r\nRetrieving information from DHT sensor. ");
 8080f52:	f006 fc5b 	bl	808780c <_Z16_fetch_usbserialv>
 8080f56:	497e      	ldr	r1, [pc, #504]	; (8081150 <_Z14checkDHTStatusv+0x22c>)
 8080f58:	f004 fd0b 	bl	8085972 <_ZN5Print7printlnEPKc>
    dht.acquire();
 8080f5c:	487d      	ldr	r0, [pc, #500]	; (8081154 <_Z14checkDHTStatusv+0x230>)
 8080f5e:	f003 fa63 	bl	8084428 <_ZN14PietteTech_DHT7acquireEv>
    bDHTstarted = true;
 8080f62:	2301      	movs	r3, #1
 8080f64:	f888 3000 	strb.w	r3, [r8]
  if (!dht.acquiring()) {           // has sample completed?
 8080f68:	487a      	ldr	r0, [pc, #488]	; (8081154 <_Z14checkDHTStatusv+0x230>)
 8080f6a:	f003 fb29 	bl	80845c0 <_ZN14PietteTech_DHT9acquiringEv>
 8080f6e:	2800      	cmp	r0, #0
 8080f70:	f040 80bd 	bne.w	80810ee <_Z14checkDHTStatusv+0x1ca>
    result = dht.getStatus();
 8080f74:	4877      	ldr	r0, [pc, #476]	; (8081154 <_Z14checkDHTStatusv+0x230>)
 8080f76:	f003 fb3c 	bl	80845f2 <_ZN14PietteTech_DHT9getStatusEv>
		if ((transmittingData & SERIALDHTDATA) == SERIALDHTDATA) {
 8080f7a:	4c74      	ldr	r4, [pc, #464]	; (808114c <_Z14checkDHTStatusv+0x228>)
    result = dht.getStatus();
 8080f7c:	4607      	mov	r7, r0
		if ((transmittingData & SERIALDHTDATA) == SERIALDHTDATA) {
 8080f7e:	6823      	ldr	r3, [r4, #0]
 8080f80:	2b00      	cmp	r3, #0
 8080f82:	da12      	bge.n	8080faa <_Z14checkDHTStatusv+0x86>
      Serial.print("Read sensor: ");
 8080f84:	f006 fc42 	bl	808780c <_Z16_fetch_usbserialv>
 8080f88:	4973      	ldr	r1, [pc, #460]	; (8081158 <_Z14checkDHTStatusv+0x234>)
 8080f8a:	f004 fcdf 	bl	808594c <_ZN5Print5printEPKc>
      switch (result) {
 8080f8e:	1dfb      	adds	r3, r7, #7
 8080f90:	2b07      	cmp	r3, #7
 8080f92:	d840      	bhi.n	8081016 <_Z14checkDHTStatusv+0xf2>
 8080f94:	e8df f003 	tbb	[pc, r3]
 8080f98:	2f33373b 	.word	0x2f33373b
 8080f9c:	0423272b 	.word	0x0423272b
          Serial.println("OK");
 8080fa0:	f006 fc34 	bl	808780c <_Z16_fetch_usbserialv>
 8080fa4:	496d      	ldr	r1, [pc, #436]	; (808115c <_Z14checkDHTStatusv+0x238>)
          Serial.println("Unknown error");
 8080fa6:	f004 fce4 	bl	8085972 <_ZN5Print7printlnEPKc>
  	float h = dht.getHumidity();
 8080faa:	486a      	ldr	r0, [pc, #424]	; (8081154 <_Z14checkDHTStatusv+0x230>)
 8080fac:	f003 fb44 	bl	8084638 <_ZN14PietteTech_DHT11getHumidityEv>
 8080fb0:	4605      	mov	r5, r0
  	float f = dht.getFahrenheit();
 8080fb2:	4868      	ldr	r0, [pc, #416]	; (8081154 <_Z14checkDHTStatusv+0x230>)
 8080fb4:	f003 fb5c 	bl	8084670 <_ZN14PietteTech_DHT13getFahrenheitEv>
 8080fb8:	4606      	mov	r6, r0
  	if (isnan(h) || isnan(f) || result != DHTLIB_OK) {
 8080fba:	4601      	mov	r1, r0
 8080fbc:	4628      	mov	r0, r5
 8080fbe:	f009 fdc9 	bl	808ab54 <__aeabi_fcmpun>
 8080fc2:	b900      	cbnz	r0, 8080fc6 <_Z14checkDHTStatusv+0xa2>
 8080fc4:	b35f      	cbz	r7, 808101e <_Z14checkDHTStatusv+0xfa>
  		if ((transmittingData & SERIALDHTDATA) == SERIALDHTDATA)
 8080fc6:	6823      	ldr	r3, [r4, #0]
 8080fc8:	2b00      	cmp	r3, #0
 8080fca:	f280 8090 	bge.w	80810ee <_Z14checkDHTStatusv+0x1ca>
  			Serial.println("Failed to read from DHT sensor!");
 8080fce:	f006 fc1d 	bl	808780c <_Z16_fetch_usbserialv>
 8080fd2:	4963      	ldr	r1, [pc, #396]	; (8081160 <_Z14checkDHTStatusv+0x23c>)
}
 8080fd4:	b008      	add	sp, #32
 8080fd6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  			Serial.println("Failed to read from DHT sensor!");
 8080fda:	f004 bcca 	b.w	8085972 <_ZN5Print7printlnEPKc>
          Serial.println("Error\n\r\tChecksum error");
 8080fde:	f006 fc15 	bl	808780c <_Z16_fetch_usbserialv>
 8080fe2:	4960      	ldr	r1, [pc, #384]	; (8081164 <_Z14checkDHTStatusv+0x240>)
 8080fe4:	e7df      	b.n	8080fa6 <_Z14checkDHTStatusv+0x82>
          Serial.println("Error\n\r\tISR time out error");
 8080fe6:	f006 fc11 	bl	808780c <_Z16_fetch_usbserialv>
 8080fea:	495f      	ldr	r1, [pc, #380]	; (8081168 <_Z14checkDHTStatusv+0x244>)
 8080fec:	e7db      	b.n	8080fa6 <_Z14checkDHTStatusv+0x82>
          Serial.println("Error\n\r\tResponse time out error");
 8080fee:	f006 fc0d 	bl	808780c <_Z16_fetch_usbserialv>
 8080ff2:	495e      	ldr	r1, [pc, #376]	; (808116c <_Z14checkDHTStatusv+0x248>)
 8080ff4:	e7d7      	b.n	8080fa6 <_Z14checkDHTStatusv+0x82>
          Serial.println("Error\n\r\tData time out error");
 8080ff6:	f006 fc09 	bl	808780c <_Z16_fetch_usbserialv>
 8080ffa:	495d      	ldr	r1, [pc, #372]	; (8081170 <_Z14checkDHTStatusv+0x24c>)
 8080ffc:	e7d3      	b.n	8080fa6 <_Z14checkDHTStatusv+0x82>
          Serial.println("Error\n\r\tAcquiring");
 8080ffe:	f006 fc05 	bl	808780c <_Z16_fetch_usbserialv>
 8081002:	495c      	ldr	r1, [pc, #368]	; (8081174 <_Z14checkDHTStatusv+0x250>)
 8081004:	e7cf      	b.n	8080fa6 <_Z14checkDHTStatusv+0x82>
          Serial.println("Error\n\r\tDelta time to small");
 8081006:	f006 fc01 	bl	808780c <_Z16_fetch_usbserialv>
 808100a:	495b      	ldr	r1, [pc, #364]	; (8081178 <_Z14checkDHTStatusv+0x254>)
 808100c:	e7cb      	b.n	8080fa6 <_Z14checkDHTStatusv+0x82>
          Serial.println("Error\n\r\tNot started");
 808100e:	f006 fbfd 	bl	808780c <_Z16_fetch_usbserialv>
 8081012:	495a      	ldr	r1, [pc, #360]	; (808117c <_Z14checkDHTStatusv+0x258>)
 8081014:	e7c7      	b.n	8080fa6 <_Z14checkDHTStatusv+0x82>
          Serial.println("Unknown error");
 8081016:	f006 fbf9 	bl	808780c <_Z16_fetch_usbserialv>
 808101a:	4959      	ldr	r1, [pc, #356]	; (8081180 <_Z14checkDHTStatusv+0x25c>)
 808101c:	e7c3      	b.n	8080fa6 <_Z14checkDHTStatusv+0x82>
 808101e:	f003 fd77 	bl	8084b10 <HAL_Timer_Get_Milli_Seconds>
    if (millis()-lastDHTPublish > ((unsigned long) delayDHTMinutes*60*1000)) {
 8081022:	f64e 2260 	movw	r2, #60000	; 0xea60
 8081026:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8081184 <_Z14checkDHTStatusv+0x260>
 808102a:	f8da 3000 	ldr.w	r3, [sl]
 808102e:	1ac0      	subs	r0, r0, r3
 8081030:	4b55      	ldr	r3, [pc, #340]	; (8081188 <_Z14checkDHTStatusv+0x264>)
 8081032:	681b      	ldr	r3, [r3, #0]
 8081034:	4353      	muls	r3, r2
 8081036:	4298      	cmp	r0, r3
 8081038:	d85c      	bhi.n	80810f4 <_Z14checkDHTStatusv+0x1d0>
		if ((transmittingData & SERIALDHTDATA) == SERIALDHTDATA) {
 808103a:	6823      	ldr	r3, [r4, #0]
 808103c:	2b00      	cmp	r3, #0
 808103e:	da4f      	bge.n	80810e0 <_Z14checkDHTStatusv+0x1bc>
      Serial.printlnf("Humidity (%%): %.2f", dht.getHumidity());
 8081040:	f006 fbe4 	bl	808780c <_Z16_fetch_usbserialv>
 8081044:	4604      	mov	r4, r0
 8081046:	4843      	ldr	r0, [pc, #268]	; (8081154 <_Z14checkDHTStatusv+0x230>)
 8081048:	f003 faf6 	bl	8084638 <_ZN14PietteTech_DHT11getHumidityEv>
 808104c:	f008 ff0e 	bl	8089e6c <__aeabi_f2d>
 8081050:	4602      	mov	r2, r0
 8081052:	460b      	mov	r3, r1
 8081054:	4620      	mov	r0, r4
 8081056:	494d      	ldr	r1, [pc, #308]	; (808118c <_Z14checkDHTStatusv+0x268>)
 8081058:	f7ff fba8 	bl	80807ac <_ZN5Print8printlnfEPKcz>
      Serial.printlnf("Temperature (oC): %.2f", dht.getCelsius());
 808105c:	f006 fbd6 	bl	808780c <_Z16_fetch_usbserialv>
 8081060:	4604      	mov	r4, r0
 8081062:	483c      	ldr	r0, [pc, #240]	; (8081154 <_Z14checkDHTStatusv+0x230>)
 8081064:	f003 facc 	bl	8084600 <_ZN14PietteTech_DHT10getCelsiusEv>
 8081068:	f008 ff00 	bl	8089e6c <__aeabi_f2d>
 808106c:	4602      	mov	r2, r0
 808106e:	460b      	mov	r3, r1
 8081070:	4620      	mov	r0, r4
 8081072:	4947      	ldr	r1, [pc, #284]	; (8081190 <_Z14checkDHTStatusv+0x26c>)
 8081074:	f7ff fb9a 	bl	80807ac <_ZN5Print8printlnfEPKcz>
      Serial.printlnf("Temperature (oF): %.2f", dht.getFahrenheit());
 8081078:	f006 fbc8 	bl	808780c <_Z16_fetch_usbserialv>
 808107c:	4604      	mov	r4, r0
 808107e:	4835      	ldr	r0, [pc, #212]	; (8081154 <_Z14checkDHTStatusv+0x230>)
 8081080:	f003 faf6 	bl	8084670 <_ZN14PietteTech_DHT13getFahrenheitEv>
 8081084:	f008 fef2 	bl	8089e6c <__aeabi_f2d>
 8081088:	4602      	mov	r2, r0
 808108a:	460b      	mov	r3, r1
 808108c:	4620      	mov	r0, r4
 808108e:	4941      	ldr	r1, [pc, #260]	; (8081194 <_Z14checkDHTStatusv+0x270>)
 8081090:	f7ff fb8c 	bl	80807ac <_ZN5Print8printlnfEPKcz>
      Serial.printlnf("Temperature (K): %.2f", dht.getKelvin());
 8081094:	f006 fbba 	bl	808780c <_Z16_fetch_usbserialv>
 8081098:	4604      	mov	r4, r0
 808109a:	482e      	ldr	r0, [pc, #184]	; (8081154 <_Z14checkDHTStatusv+0x230>)
 808109c:	f003 fb14 	bl	80846c8 <_ZN14PietteTech_DHT9getKelvinEv>
 80810a0:	f008 fee4 	bl	8089e6c <__aeabi_f2d>
 80810a4:	4602      	mov	r2, r0
 80810a6:	460b      	mov	r3, r1
 80810a8:	4620      	mov	r0, r4
 80810aa:	493b      	ldr	r1, [pc, #236]	; (8081198 <_Z14checkDHTStatusv+0x274>)
 80810ac:	f7ff fb7e 	bl	80807ac <_ZN5Print8printlnfEPKcz>
      Serial.printlnf("Dew Point (oC): %.2f", dht.getDewPoint());
 80810b0:	f006 fbac 	bl	808780c <_Z16_fetch_usbserialv>
 80810b4:	4604      	mov	r4, r0
 80810b6:	4827      	ldr	r0, [pc, #156]	; (8081154 <_Z14checkDHTStatusv+0x230>)
 80810b8:	f003 fb32 	bl	8084720 <_ZN14PietteTech_DHT11getDewPointEv>
 80810bc:	4602      	mov	r2, r0
 80810be:	460b      	mov	r3, r1
 80810c0:	4620      	mov	r0, r4
 80810c2:	4936      	ldr	r1, [pc, #216]	; (808119c <_Z14checkDHTStatusv+0x278>)
 80810c4:	f7ff fb72 	bl	80807ac <_ZN5Print8printlnfEPKcz>
      Serial.printlnf("Dew Point Slow (oC): %.2f", dht.getDewPointSlow());
 80810c8:	f006 fba0 	bl	808780c <_Z16_fetch_usbserialv>
 80810cc:	4604      	mov	r4, r0
 80810ce:	4821      	ldr	r0, [pc, #132]	; (8081154 <_Z14checkDHTStatusv+0x230>)
 80810d0:	f003 fb8e 	bl	80847f0 <_ZN14PietteTech_DHT15getDewPointSlowEv>
 80810d4:	4602      	mov	r2, r0
 80810d6:	460b      	mov	r3, r1
 80810d8:	4620      	mov	r0, r4
 80810da:	4931      	ldr	r1, [pc, #196]	; (80811a0 <_Z14checkDHTStatusv+0x27c>)
 80810dc:	f7ff fb66 	bl	80807ac <_ZN5Print8printlnfEPKcz>
    bDHTstarted = false;  // reset the sample flag so we can take another
 80810e0:	2300      	movs	r3, #0
 80810e2:	f888 3000 	strb.w	r3, [r8]
 80810e6:	f003 fd13 	bl	8084b10 <HAL_Timer_Get_Milli_Seconds>
    msLastSample = millis();
 80810ea:	f8c9 0000 	str.w	r0, [r9]
}
 80810ee:	b008      	add	sp, #32
 80810f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if ((transmittingData & TRANSMITTINGDHTDATA) == TRANSMITTINGDHTDATA) {
 80810f4:	6823      	ldr	r3, [r4, #0]
 80810f6:	071b      	lsls	r3, r3, #28
 80810f8:	d59f      	bpl.n	808103a <_Z14checkDHTStatusv+0x116>
        Particle.publish("LJENVMT", String::format("{\"t\":%.2f,\"h\":%.2f}",f,h), 60, PRIVATE);
 80810fa:	4630      	mov	r0, r6
 80810fc:	f008 feb6 	bl	8089e6c <__aeabi_f2d>
 8081100:	4606      	mov	r6, r0
 8081102:	4628      	mov	r0, r5
 8081104:	460f      	mov	r7, r1
 8081106:	f008 feb1 	bl	8089e6c <__aeabi_f2d>
 808110a:	4632      	mov	r2, r6
 808110c:	e9cd 0100 	strd	r0, r1, [sp]
 8081110:	463b      	mov	r3, r7
 8081112:	4924      	ldr	r1, [pc, #144]	; (80811a4 <_Z14checkDHTStatusv+0x280>)
 8081114:	a804      	add	r0, sp, #16
 8081116:	f004 fbcb 	bl	80858b0 <_ZN6String6formatEPKcz>
 808111a:	4b23      	ldr	r3, [pc, #140]	; (80811a8 <_Z14checkDHTStatusv+0x284>)
 808111c:	9a04      	ldr	r2, [sp, #16]
 808111e:	781b      	ldrb	r3, [r3, #0]
 8081120:	4922      	ldr	r1, [pc, #136]	; (80811ac <_Z14checkDHTStatusv+0x288>)
 8081122:	f88d 3000 	strb.w	r3, [sp]
 8081126:	a802      	add	r0, sp, #8
 8081128:	233c      	movs	r3, #60	; 0x3c
 808112a:	f006 f941 	bl	80873b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 808112e:	a803      	add	r0, sp, #12
 8081130:	f7ff fbde 	bl	80808f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081134:	a804      	add	r0, sp, #16
 8081136:	f004 fa51 	bl	80855dc <_ZN6StringD1Ev>
 808113a:	f003 fce9 	bl	8084b10 <HAL_Timer_Get_Milli_Seconds>
        lastDHTPublish = millis();
 808113e:	f8ca 0000 	str.w	r0, [sl]
 8081142:	e77a      	b.n	808103a <_Z14checkDHTStatusv+0x116>
 8081144:	20000144 	.word	0x20000144
 8081148:	20000148 	.word	0x20000148
 808114c:	20000014 	.word	0x20000014
 8081150:	0808b233 	.word	0x0808b233
 8081154:	20000188 	.word	0x20000188
 8081158:	0808b25e 	.word	0x0808b25e
 808115c:	0808b26c 	.word	0x0808b26c
 8081160:	0808b1ca 	.word	0x0808b1ca
 8081164:	0808b26f 	.word	0x0808b26f
 8081168:	0808b286 	.word	0x0808b286
 808116c:	0808b2a1 	.word	0x0808b2a1
 8081170:	0808b2c1 	.word	0x0808b2c1
 8081174:	0808b2dd 	.word	0x0808b2dd
 8081178:	0808b2ef 	.word	0x0808b2ef
 808117c:	0808b30b 	.word	0x0808b30b
 8081180:	0808b31f 	.word	0x0808b31f
 8081184:	200001f0 	.word	0x200001f0
 8081188:	20000008 	.word	0x20000008
 808118c:	0808b32d 	.word	0x0808b32d
 8081190:	0808b341 	.word	0x0808b341
 8081194:	0808b358 	.word	0x0808b358
 8081198:	0808b36f 	.word	0x0808b36f
 808119c:	0808b385 	.word	0x0808b385
 80811a0:	0808b39a 	.word	0x0808b39a
 80811a4:	0808b1ae 	.word	0x0808b1ae
 80811a8:	20000140 	.word	0x20000140
 80811ac:	0808b1c2 	.word	0x0808b1c2

080811b0 <loop>:
void loop() {
 80811b0:	b508      	push	{r3, lr}
	batteryCheck.loop();
 80811b2:	4811      	ldr	r0, [pc, #68]	; (80811f8 <loop+0x48>)
 80811b4:	f000 fdbe 	bl	8081d34 <_ZN12BatteryCheck4loopEv>
	sessionCheck.loop();
 80811b8:	4810      	ldr	r0, [pc, #64]	; (80811fc <loop+0x4c>)
 80811ba:	f001 fb19 	bl	80827f0 <_ZN12SessionCheck4loopEv>
	connectionCheck.loop();
 80811be:	4810      	ldr	r0, [pc, #64]	; (8081200 <loop+0x50>)
 80811c0:	f001 f8b0 	bl	8082324 <_ZN15ConnectionCheck4loopEv>
	connectionEvents.loop();
 80811c4:	480f      	ldr	r0, [pc, #60]	; (8081204 <loop+0x54>)
 80811c6:	f001 fcb7 	bl	8082b38 <_ZN16ConnectionEvents4loopEv>
	tester.loop();
 80811ca:	480f      	ldr	r0, [pc, #60]	; (8081208 <loop+0x58>)
 80811cc:	f000 ffcc 	bl	8082168 <_ZN6Tester4loopEv>
  checkAccelStatus();
 80811d0:	f7ff fe2c 	bl	8080e2c <_Z16checkAccelStatusv>
  checkGPSStatus();
 80811d4:	f7ff fd80 	bl	8080cd8 <_Z14checkGPSStatusv>
  checkPowerStatus();
 80811d8:	f7ff fd38 	bl	8080c4c <_Z16checkPowerStatusv>
  checkDHTStatus();
 80811dc:	f7ff fea2 	bl	8080f24 <_Z14checkDHTStatusv>
  if ((transmittingData & SERIALLOOPDATA) == SERIALLOOPDATA)
 80811e0:	4b0a      	ldr	r3, [pc, #40]	; (808120c <loop+0x5c>)
 80811e2:	681b      	ldr	r3, [r3, #0]
 80811e4:	011b      	lsls	r3, r3, #4
 80811e6:	d506      	bpl.n	80811f6 <loop+0x46>
    Serial.println("End Of loop() function");
 80811e8:	f006 fb10 	bl	808780c <_Z16_fetch_usbserialv>
}
 80811ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.println("End Of loop() function");
 80811f0:	4907      	ldr	r1, [pc, #28]	; (8081210 <loop+0x60>)
 80811f2:	f004 bbbe 	b.w	8085972 <_ZN5Print7printlnEPKc>
}
 80811f6:	bd08      	pop	{r3, pc}
 80811f8:	2000014c 	.word	0x2000014c
 80811fc:	20000238 	.word	0x20000238
 8081200:	2000015c 	.word	0x2000015c
 8081204:	2000017c 	.word	0x2000017c
 8081208:	2000027c 	.word	0x2000027c
 808120c:	20000014 	.word	0x20000014
 8081210:	0808b3b4 	.word	0x0808b3b4

08081214 <_Z9postValue6String>:

// Type the name of the value you want to see into the console function
// argument and it will be published.
// See showAll() above for names of values and units.
int postValue(String cmd)
{
 8081214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8081218:	b0a1      	sub	sp, #132	; 0x84
    String buf; // for publishing values
 808121a:	ae18      	add	r6, sp, #96	; 0x60
 808121c:	49a6      	ldr	r1, [pc, #664]	; (80814b8 <_Z9postValue6String+0x2a4>)
{
 808121e:	4605      	mov	r5, r0
    String buf; // for publishing values
 8081220:	4630      	mov	r0, r6
 8081222:	f004 fa25 	bl	8085670 <_ZN6StringC1EPK19__FlashStringHelper>

    bool initComplete = t.gpsInitComplete();
 8081226:	48a5      	ldr	r0, [pc, #660]	; (80814bc <_Z9postValue6String+0x2a8>)
 8081228:	f001 feac 	bl	8082f84 <_ZN13AssetTracker215gpsInitCompleteEv>
 808122c:	9015      	str	r0, [sp, #84]	; 0x54
    uint8_t hour = t.getHour();
 808122e:	48a3      	ldr	r0, [pc, #652]	; (80814bc <_Z9postValue6String+0x2a8>)
 8081230:	f001 fe0e 	bl	8082e50 <_ZN13AssetTracker27getHourEv>
 8081234:	4683      	mov	fp, r0
    uint8_t minute = t.getMinute();
 8081236:	48a1      	ldr	r0, [pc, #644]	; (80814bc <_Z9postValue6String+0x2a8>)
 8081238:	f001 fe10 	bl	8082e5c <_ZN13AssetTracker29getMinuteEv>
 808123c:	4682      	mov	sl, r0
    uint8_t seconds = t.getSeconds();
 808123e:	489f      	ldr	r0, [pc, #636]	; (80814bc <_Z9postValue6String+0x2a8>)
 8081240:	f001 fe12 	bl	8082e68 <_ZN13AssetTracker210getSecondsEv>
 8081244:	4681      	mov	r9, r0
    uint8_t month = t.getMonth();
 8081246:	489d      	ldr	r0, [pc, #628]	; (80814bc <_Z9postValue6String+0x2a8>)
 8081248:	f001 fe20 	bl	8082e8c <_ZN13AssetTracker28getMonthEv>
 808124c:	4680      	mov	r8, r0
    uint8_t day = t.getDay();
 808124e:	489b      	ldr	r0, [pc, #620]	; (80814bc <_Z9postValue6String+0x2a8>)
 8081250:	f001 fe22 	bl	8082e98 <_ZN13AssetTracker26getDayEv>
 8081254:	4607      	mov	r7, r0
    uint16_t year = t.getYear();
 8081256:	4899      	ldr	r0, [pc, #612]	; (80814bc <_Z9postValue6String+0x2a8>)
 8081258:	f001 fe12 	bl	8082e80 <_ZN13AssetTracker27getYearEv>
 808125c:	9014      	str	r0, [sp, #80]	; 0x50
    uint16_t milliseconds = t.getMilliseconds();
 808125e:	4897      	ldr	r0, [pc, #604]	; (80814bc <_Z9postValue6String+0x2a8>)
 8081260:	f001 fe08 	bl	8082e74 <_ZN13AssetTracker215getMillisecondsEv>
 8081264:	9002      	str	r0, [sp, #8]
    float latitude = t.readLat();
 8081266:	4895      	ldr	r0, [pc, #596]	; (80814bc <_Z9postValue6String+0x2a8>)
 8081268:	f001 fda2 	bl	8082db0 <_ZN13AssetTracker27readLatEv>
 808126c:	9005      	str	r0, [sp, #20]
    float longitude = t.readLon();
 808126e:	4893      	ldr	r0, [pc, #588]	; (80814bc <_Z9postValue6String+0x2a8>)
 8081270:	f001 fda4 	bl	8082dbc <_ZN13AssetTracker27readLonEv>
 8081274:	9006      	str	r0, [sp, #24]
    float latitudeDegrees = t.readLatDeg();
 8081276:	4891      	ldr	r0, [pc, #580]	; (80814bc <_Z9postValue6String+0x2a8>)
 8081278:	f001 fda6 	bl	8082dc8 <_ZN13AssetTracker210readLatDegEv>
 808127c:	9007      	str	r0, [sp, #28]
    float longitudeDegrees = t.readLonDeg();
 808127e:	488f      	ldr	r0, [pc, #572]	; (80814bc <_Z9postValue6String+0x2a8>)
 8081280:	f001 fda8 	bl	8082dd4 <_ZN13AssetTracker210readLonDegEv>
 8081284:	9008      	str	r0, [sp, #32]
    float geoidheight = t.getGeoIdHeight();
 8081286:	488d      	ldr	r0, [pc, #564]	; (80814bc <_Z9postValue6String+0x2a8>)
 8081288:	f001 fe1e 	bl	8082ec8 <_ZN13AssetTracker214getGeoIdHeightEv>
 808128c:	9009      	str	r0, [sp, #36]	; 0x24
    float altitude = t.getAltitude();
 808128e:	488b      	ldr	r0, [pc, #556]	; (80814bc <_Z9postValue6String+0x2a8>)
 8081290:	f001 fe20 	bl	8082ed4 <_ZN13AssetTracker211getAltitudeEv>
 8081294:	900a      	str	r0, [sp, #40]	; 0x28
    float speed = t.getSpeed();
 8081296:	4889      	ldr	r0, [pc, #548]	; (80814bc <_Z9postValue6String+0x2a8>)
 8081298:	f001 fe10 	bl	8082ebc <_ZN13AssetTracker28getSpeedEv>
 808129c:	900b      	str	r0, [sp, #44]	; 0x2c
    uint8_t fixquality = t.getFixQuality();
 808129e:	4887      	ldr	r0, [pc, #540]	; (80814bc <_Z9postValue6String+0x2a8>)
 80812a0:	f001 fe06 	bl	8082eb0 <_ZN13AssetTracker213getFixQualityEv>
 80812a4:	900c      	str	r0, [sp, #48]	; 0x30
    uint8_t satellites = t.getSatellites();
 80812a6:	4885      	ldr	r0, [pc, #532]	; (80814bc <_Z9postValue6String+0x2a8>)
 80812a8:	f001 fdfc 	bl	8082ea4 <_ZN13AssetTracker213getSatellitesEv>
 80812ac:	900d      	str	r0, [sp, #52]	; 0x34
    uint32_t horzAcc = t.getHaccuracy();
 80812ae:	4883      	ldr	r0, [pc, #524]	; (80814bc <_Z9postValue6String+0x2a8>)
 80812b0:	f001 fd9e 	bl	8082df0 <_ZN13AssetTracker212getHaccuracyEv>
 80812b4:	900e      	str	r0, [sp, #56]	; 0x38
    uint32_t vertAcc = t.getVaccuracy();
 80812b6:	4881      	ldr	r0, [pc, #516]	; (80814bc <_Z9postValue6String+0x2a8>)
 80812b8:	f001 fda0 	bl	8082dfc <_ZN13AssetTracker212getVaccuracyEv>
 80812bc:	900f      	str	r0, [sp, #60]	; 0x3c
    int32_t velN = t.getVelN();
 80812be:	487f      	ldr	r0, [pc, #508]	; (80814bc <_Z9postValue6String+0x2a8>)
 80812c0:	f001 fda2 	bl	8082e08 <_ZN13AssetTracker27getVelNEv>
 80812c4:	9010      	str	r0, [sp, #64]	; 0x40
    uint32_t velE = t.getVelE();
 80812c6:	487d      	ldr	r0, [pc, #500]	; (80814bc <_Z9postValue6String+0x2a8>)
 80812c8:	f001 fda4 	bl	8082e14 <_ZN13AssetTracker27getVelEEv>
 80812cc:	9003      	str	r0, [sp, #12]
    uint32_t velD = t.getVelD();
 80812ce:	487b      	ldr	r0, [pc, #492]	; (80814bc <_Z9postValue6String+0x2a8>)
 80812d0:	f001 fda6 	bl	8082e20 <_ZN13AssetTracker27getVelDEv>
 80812d4:	9004      	str	r0, [sp, #16]
    int32_t gSpeed = t.getGspeed();
 80812d6:	4879      	ldr	r0, [pc, #484]	; (80814bc <_Z9postValue6String+0x2a8>)
 80812d8:	f001 fdb4 	bl	8082e44 <_ZN13AssetTracker29getGspeedEv>
 80812dc:	9011      	str	r0, [sp, #68]	; 0x44
    int32_t odoTrip = t.getOdoTrip();
 80812de:	4877      	ldr	r0, [pc, #476]	; (80814bc <_Z9postValue6String+0x2a8>)
 80812e0:	f001 fda4 	bl	8082e2c <_ZN13AssetTracker210getOdoTripEv>
 80812e4:	9012      	str	r0, [sp, #72]	; 0x48
    int32_t odoTotal = t.getOdoTotal();
 80812e6:	4875      	ldr	r0, [pc, #468]	; (80814bc <_Z9postValue6String+0x2a8>)
 80812e8:	f001 fda6 	bl	8082e38 <_ZN13AssetTracker211getOdoTotalEv>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80812ec:	4974      	ldr	r1, [pc, #464]	; (80814c0 <_Z9postValue6String+0x2ac>)
 80812ee:	9013      	str	r0, [sp, #76]	; 0x4c
 80812f0:	4628      	mov	r0, r5
 80812f2:	f004 fa62 	bl	80857ba <_ZNK6String6equalsEPKc>
 80812f6:	ac1c      	add	r4, sp, #112	; 0x70



    // This implementation is a bit crude but it was easy to implement
    // and simple to read.
    if (cmd == "initComplete"){
 80812f8:	b368      	cbz	r0, 8081356 <_Z9postValue6String+0x142>
        buf = String::format("%d", initComplete);
 80812fa:	9a15      	ldr	r2, [sp, #84]	; 0x54
    } else if (cmd == "hour"){
        buf = String::format("%d", hour);
 80812fc:	4620      	mov	r0, r4
 80812fe:	4971      	ldr	r1, [pc, #452]	; (80814c4 <_Z9postValue6String+0x2b0>)
 8081300:	f004 fad6 	bl	80858b0 <_ZN6String6formatEPKcz>
 8081304:	4621      	mov	r1, r4
 8081306:	4630      	mov	r0, r6
 8081308:	f004 fa07 	bl	808571a <_ZN6StringaSEOS_>
 808130c:	4620      	mov	r0, r4
 808130e:	f004 f965 	bl	80855dc <_ZN6StringD1Ev>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8081312:	4629      	mov	r1, r5
 8081314:	4620      	mov	r0, r4
 8081316:	f004 f9f5 	bl	8085704 <_ZN6StringC1ERKS_>
    } else if (cmd == "odoTotal"){
        buf = String::format("%lu", odoTotal);
    } else {
        buf = "Don't know that one. Check spelling.";
    }
    Particle.publish("LJCMDVAL", cmd + ": " + buf, 60, PRIVATE);
 808131a:	4620      	mov	r0, r4
 808131c:	496a      	ldr	r1, [pc, #424]	; (80814c8 <_Z9postValue6String+0x2b4>)
 808131e:	f004 fa38 	bl	8085792 <_ZplRK15StringSumHelperPKc>
 8081322:	4631      	mov	r1, r6
 8081324:	f004 fa29 	bl	808577a <_ZplRK15StringSumHelperRK6String>
	const char * c_str() const { return buffer; }
 8081328:	4b68      	ldr	r3, [pc, #416]	; (80814cc <_Z9postValue6String+0x2b8>)
 808132a:	6802      	ldr	r2, [r0, #0]
 808132c:	781b      	ldrb	r3, [r3, #0]
 808132e:	4968      	ldr	r1, [pc, #416]	; (80814d0 <_Z9postValue6String+0x2bc>)
 8081330:	f88d 3000 	strb.w	r3, [sp]
 8081334:	a816      	add	r0, sp, #88	; 0x58
 8081336:	233c      	movs	r3, #60	; 0x3c
 8081338:	f006 f83a 	bl	80873b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 808133c:	a817      	add	r0, sp, #92	; 0x5c
 808133e:	f7ff fad7 	bl	80808f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class StringSumHelper : public String
 8081342:	4620      	mov	r0, r4
 8081344:	f004 f94a 	bl	80855dc <_ZN6StringD1Ev>
    String buf; // for publishing values
 8081348:	4630      	mov	r0, r6
 808134a:	f004 f947 	bl	80855dc <_ZN6StringD1Ev>


    return 1;
}
 808134e:	2001      	movs	r0, #1
 8081350:	b021      	add	sp, #132	; 0x84
 8081352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8081356:	4628      	mov	r0, r5
 8081358:	495e      	ldr	r1, [pc, #376]	; (80814d4 <_Z9postValue6String+0x2c0>)
 808135a:	f004 fa2e 	bl	80857ba <_ZNK6String6equalsEPKc>
    } else if (cmd == "hour"){
 808135e:	b108      	cbz	r0, 8081364 <_Z9postValue6String+0x150>
        buf = String::format("%d", hour);
 8081360:	465a      	mov	r2, fp
 8081362:	e7cb      	b.n	80812fc <_Z9postValue6String+0xe8>
 8081364:	4628      	mov	r0, r5
 8081366:	495c      	ldr	r1, [pc, #368]	; (80814d8 <_Z9postValue6String+0x2c4>)
 8081368:	f004 fa27 	bl	80857ba <_ZNK6String6equalsEPKc>
    } else if (cmd == "minute"){
 808136c:	b108      	cbz	r0, 8081372 <_Z9postValue6String+0x15e>
        buf = String::format("%d", minute);
 808136e:	4652      	mov	r2, sl
 8081370:	e7c4      	b.n	80812fc <_Z9postValue6String+0xe8>
 8081372:	4628      	mov	r0, r5
 8081374:	4959      	ldr	r1, [pc, #356]	; (80814dc <_Z9postValue6String+0x2c8>)
 8081376:	f004 fa20 	bl	80857ba <_ZNK6String6equalsEPKc>
    } else if (cmd == "seconds"){
 808137a:	b108      	cbz	r0, 8081380 <_Z9postValue6String+0x16c>
        buf = String::format("%d", seconds);
 808137c:	464a      	mov	r2, r9
 808137e:	e7bd      	b.n	80812fc <_Z9postValue6String+0xe8>
 8081380:	4628      	mov	r0, r5
 8081382:	4957      	ldr	r1, [pc, #348]	; (80814e0 <_Z9postValue6String+0x2cc>)
 8081384:	f004 fa19 	bl	80857ba <_ZNK6String6equalsEPKc>
    } else if (cmd == "month"){
 8081388:	b108      	cbz	r0, 808138e <_Z9postValue6String+0x17a>
        buf = String::format("%d", month);
 808138a:	4642      	mov	r2, r8
 808138c:	e7b6      	b.n	80812fc <_Z9postValue6String+0xe8>
 808138e:	4628      	mov	r0, r5
 8081390:	4954      	ldr	r1, [pc, #336]	; (80814e4 <_Z9postValue6String+0x2d0>)
 8081392:	f004 fa12 	bl	80857ba <_ZNK6String6equalsEPKc>
    } else if (cmd == "day"){
 8081396:	b108      	cbz	r0, 808139c <_Z9postValue6String+0x188>
        buf = String::format("%d", day);
 8081398:	463a      	mov	r2, r7
 808139a:	e7af      	b.n	80812fc <_Z9postValue6String+0xe8>
 808139c:	4628      	mov	r0, r5
 808139e:	4952      	ldr	r1, [pc, #328]	; (80814e8 <_Z9postValue6String+0x2d4>)
 80813a0:	f004 fa0b 	bl	80857ba <_ZNK6String6equalsEPKc>
    } else if (cmd == "year"){
 80813a4:	b108      	cbz	r0, 80813aa <_Z9postValue6String+0x196>
        buf = String::format("%d", year);
 80813a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80813a8:	e7a8      	b.n	80812fc <_Z9postValue6String+0xe8>
 80813aa:	4628      	mov	r0, r5
 80813ac:	494f      	ldr	r1, [pc, #316]	; (80814ec <_Z9postValue6String+0x2d8>)
 80813ae:	f004 fa04 	bl	80857ba <_ZNK6String6equalsEPKc>
    } else if (cmd == "milliseconds"){
 80813b2:	b110      	cbz	r0, 80813ba <_Z9postValue6String+0x1a6>
        buf = String::format("%d", milliseconds);
 80813b4:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80813b8:	e7a0      	b.n	80812fc <_Z9postValue6String+0xe8>
 80813ba:	4628      	mov	r0, r5
 80813bc:	494c      	ldr	r1, [pc, #304]	; (80814f0 <_Z9postValue6String+0x2dc>)
 80813be:	f004 f9fc 	bl	80857ba <_ZNK6String6equalsEPKc>
    } else if (cmd == "latitude"){
 80813c2:	b148      	cbz	r0, 80813d8 <_Z9postValue6String+0x1c4>
        buf = String::format("%f", latitude);
 80813c4:	9805      	ldr	r0, [sp, #20]
        buf = String::format("%f", longitude);
 80813c6:	f008 fd51 	bl	8089e6c <__aeabi_f2d>
 80813ca:	4602      	mov	r2, r0
 80813cc:	460b      	mov	r3, r1
 80813ce:	4620      	mov	r0, r4
 80813d0:	4948      	ldr	r1, [pc, #288]	; (80814f4 <_Z9postValue6String+0x2e0>)
 80813d2:	f004 fa6d 	bl	80858b0 <_ZN6String6formatEPKcz>
 80813d6:	e795      	b.n	8081304 <_Z9postValue6String+0xf0>
 80813d8:	4628      	mov	r0, r5
 80813da:	4947      	ldr	r1, [pc, #284]	; (80814f8 <_Z9postValue6String+0x2e4>)
 80813dc:	f004 f9ed 	bl	80857ba <_ZNK6String6equalsEPKc>
 80813e0:	46b0      	mov	r8, r6
 80813e2:	4627      	mov	r7, r4
    } else if (cmd == "longitude"){
 80813e4:	b108      	cbz	r0, 80813ea <_Z9postValue6String+0x1d6>
        buf = String::format("%f", longitude);
 80813e6:	9806      	ldr	r0, [sp, #24]
 80813e8:	e7ed      	b.n	80813c6 <_Z9postValue6String+0x1b2>
 80813ea:	4628      	mov	r0, r5
 80813ec:	4943      	ldr	r1, [pc, #268]	; (80814fc <_Z9postValue6String+0x2e8>)
 80813ee:	f004 f9e4 	bl	80857ba <_ZNK6String6equalsEPKc>
    } else if (cmd == "latitudeDegrees"){
 80813f2:	b170      	cbz	r0, 8081412 <_Z9postValue6String+0x1fe>
        buf = String::format("%f", latitudeDegrees);
 80813f4:	9807      	ldr	r0, [sp, #28]
        buf = String::format("%f", longitudeDegrees);
 80813f6:	f008 fd39 	bl	8089e6c <__aeabi_f2d>
 80813fa:	4602      	mov	r2, r0
 80813fc:	460b      	mov	r3, r1
 80813fe:	4638      	mov	r0, r7
 8081400:	493c      	ldr	r1, [pc, #240]	; (80814f4 <_Z9postValue6String+0x2e0>)
 8081402:	f004 fa55 	bl	80858b0 <_ZN6String6formatEPKcz>
        buf = String::format("%lu", vertAcc);
 8081406:	4639      	mov	r1, r7
 8081408:	4640      	mov	r0, r8
 808140a:	f004 f986 	bl	808571a <_ZN6StringaSEOS_>
 808140e:	4638      	mov	r0, r7
 8081410:	e77d      	b.n	808130e <_Z9postValue6String+0xfa>
 8081412:	4628      	mov	r0, r5
 8081414:	493a      	ldr	r1, [pc, #232]	; (8081500 <_Z9postValue6String+0x2ec>)
 8081416:	f004 f9d0 	bl	80857ba <_ZNK6String6equalsEPKc>
 808141a:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    } else if (cmd == "longitudeDegrees"){
 808141e:	b108      	cbz	r0, 8081424 <_Z9postValue6String+0x210>
        buf = String::format("%f", longitudeDegrees);
 8081420:	9808      	ldr	r0, [sp, #32]
 8081422:	e7e8      	b.n	80813f6 <_Z9postValue6String+0x1e2>
 8081424:	4628      	mov	r0, r5
 8081426:	4937      	ldr	r1, [pc, #220]	; (8081504 <_Z9postValue6String+0x2f0>)
 8081428:	f004 f9c7 	bl	80857ba <_ZNK6String6equalsEPKc>
 808142c:	af1c      	add	r7, sp, #112	; 0x70
    } else if (cmd == "geoidheight"){
 808142e:	b108      	cbz	r0, 8081434 <_Z9postValue6String+0x220>
        buf = String::format("%f", geoidheight);
 8081430:	9809      	ldr	r0, [sp, #36]	; 0x24
 8081432:	e7e0      	b.n	80813f6 <_Z9postValue6String+0x1e2>
 8081434:	4628      	mov	r0, r5
 8081436:	4934      	ldr	r1, [pc, #208]	; (8081508 <_Z9postValue6String+0x2f4>)
 8081438:	f004 f9bf 	bl	80857ba <_ZNK6String6equalsEPKc>
    } else if (cmd == "altitude"){
 808143c:	b108      	cbz	r0, 8081442 <_Z9postValue6String+0x22e>
        buf = String::format("%f", altitude);
 808143e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8081440:	e7d9      	b.n	80813f6 <_Z9postValue6String+0x1e2>
 8081442:	4628      	mov	r0, r5
 8081444:	4931      	ldr	r1, [pc, #196]	; (808150c <_Z9postValue6String+0x2f8>)
 8081446:	f004 f9b8 	bl	80857ba <_ZNK6String6equalsEPKc>
    } else if (cmd == "speed"){
 808144a:	b108      	cbz	r0, 8081450 <_Z9postValue6String+0x23c>
        buf = String::format("%f", speed);
 808144c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 808144e:	e7d2      	b.n	80813f6 <_Z9postValue6String+0x1e2>
 8081450:	4628      	mov	r0, r5
 8081452:	492f      	ldr	r1, [pc, #188]	; (8081510 <_Z9postValue6String+0x2fc>)
 8081454:	f004 f9b1 	bl	80857ba <_ZNK6String6equalsEPKc>
 8081458:	46c2      	mov	sl, r8
 808145a:	46b9      	mov	r9, r7
    } else if (cmd == "fixquality"){
 808145c:	b128      	cbz	r0, 808146a <_Z9postValue6String+0x256>
        buf = String::format("%d", fixquality);
 808145e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        buf = String::format("%d", satellites);
 8081460:	4918      	ldr	r1, [pc, #96]	; (80814c4 <_Z9postValue6String+0x2b0>)
        buf = String::format("%lu", vertAcc);
 8081462:	4638      	mov	r0, r7
 8081464:	f004 fa24 	bl	80858b0 <_ZN6String6formatEPKcz>
 8081468:	e7cd      	b.n	8081406 <_Z9postValue6String+0x1f2>
 808146a:	4628      	mov	r0, r5
 808146c:	4929      	ldr	r1, [pc, #164]	; (8081514 <_Z9postValue6String+0x300>)
 808146e:	f004 f9a4 	bl	80857ba <_ZNK6String6equalsEPKc>
    } else if (cmd == "satellites"){
 8081472:	b108      	cbz	r0, 8081478 <_Z9postValue6String+0x264>
        buf = String::format("%d", satellites);
 8081474:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8081476:	e7f3      	b.n	8081460 <_Z9postValue6String+0x24c>
 8081478:	4628      	mov	r0, r5
 808147a:	4927      	ldr	r1, [pc, #156]	; (8081518 <_Z9postValue6String+0x304>)
 808147c:	f004 f99d 	bl	80857ba <_ZNK6String6equalsEPKc>
    } else if (cmd == "horzAcc"){
 8081480:	b110      	cbz	r0, 8081488 <_Z9postValue6String+0x274>
        buf = String::format("%lu", horzAcc);
 8081482:	9a0e      	ldr	r2, [sp, #56]	; 0x38
        buf = String::format("%lu", vertAcc);
 8081484:	4925      	ldr	r1, [pc, #148]	; (808151c <_Z9postValue6String+0x308>)
 8081486:	e7ec      	b.n	8081462 <_Z9postValue6String+0x24e>
 8081488:	4628      	mov	r0, r5
 808148a:	4925      	ldr	r1, [pc, #148]	; (8081520 <_Z9postValue6String+0x30c>)
 808148c:	f004 f995 	bl	80857ba <_ZNK6String6equalsEPKc>
    } else if (cmd == "vertAcc"){
 8081490:	b108      	cbz	r0, 8081496 <_Z9postValue6String+0x282>
        buf = String::format("%lu", vertAcc);
 8081492:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8081494:	e7f6      	b.n	8081484 <_Z9postValue6String+0x270>
 8081496:	4628      	mov	r0, r5
 8081498:	4922      	ldr	r1, [pc, #136]	; (8081524 <_Z9postValue6String+0x310>)
 808149a:	f004 f98e 	bl	80857ba <_ZNK6String6equalsEPKc>
    } else if (cmd == "velN"){
 808149e:	2800      	cmp	r0, #0
 80814a0:	d044      	beq.n	808152c <_Z9postValue6String+0x318>
        buf = String::format("%ld", velN);
 80814a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
        buf = String::format("%ld", velE);
 80814a4:	4920      	ldr	r1, [pc, #128]	; (8081528 <_Z9postValue6String+0x314>)
        buf = String::format("%lu", odoTotal);
 80814a6:	4648      	mov	r0, r9
 80814a8:	f004 fa02 	bl	80858b0 <_ZN6String6formatEPKcz>
 80814ac:	4649      	mov	r1, r9
 80814ae:	4650      	mov	r0, sl
 80814b0:	f004 f933 	bl	808571a <_ZN6StringaSEOS_>
 80814b4:	4648      	mov	r0, r9
 80814b6:	e72a      	b.n	808130e <_Z9postValue6String+0xfa>
 80814b8:	0808b70c 	.word	0x0808b70c
 80814bc:	20000278 	.word	0x20000278
 80814c0:	0808b3cb 	.word	0x0808b3cb
 80814c4:	0808b863 	.word	0x0808b863
 80814c8:	0808bbe2 	.word	0x0808bbe2
 80814cc:	20000140 	.word	0x20000140
 80814d0:	0808b4c9 	.word	0x0808b4c9
 80814d4:	0808b3d8 	.word	0x0808b3d8
 80814d8:	0808b3dd 	.word	0x0808b3dd
 80814dc:	0808b3f8 	.word	0x0808b3f8
 80814e0:	0808b3e4 	.word	0x0808b3e4
 80814e4:	0808b3ea 	.word	0x0808b3ea
 80814e8:	0808b3ee 	.word	0x0808b3ee
 80814ec:	0808b3f3 	.word	0x0808b3f3
 80814f0:	0808b400 	.word	0x0808b400
 80814f4:	0808b8b7 	.word	0x0808b8b7
 80814f8:	0808b409 	.word	0x0808b409
 80814fc:	0808b413 	.word	0x0808b413
 8081500:	0808b423 	.word	0x0808b423
 8081504:	0808b434 	.word	0x0808b434
 8081508:	0808b440 	.word	0x0808b440
 808150c:	0808b449 	.word	0x0808b449
 8081510:	0808b44f 	.word	0x0808b44f
 8081514:	0808b45a 	.word	0x0808b45a
 8081518:	0808b465 	.word	0x0808b465
 808151c:	0808b46d 	.word	0x0808b46d
 8081520:	0808b471 	.word	0x0808b471
 8081524:	0808b479 	.word	0x0808b479
 8081528:	0808b47e 	.word	0x0808b47e
 808152c:	4628      	mov	r0, r5
 808152e:	4914      	ldr	r1, [pc, #80]	; (8081580 <_Z9postValue6String+0x36c>)
 8081530:	f004 f943 	bl	80857ba <_ZNK6String6equalsEPKc>
    } else if (cmd == "velE"){
 8081534:	b108      	cbz	r0, 808153a <_Z9postValue6String+0x326>
        buf = String::format("%ld", velE);
 8081536:	9a03      	ldr	r2, [sp, #12]
 8081538:	e7b4      	b.n	80814a4 <_Z9postValue6String+0x290>
 808153a:	4628      	mov	r0, r5
 808153c:	4911      	ldr	r1, [pc, #68]	; (8081584 <_Z9postValue6String+0x370>)
 808153e:	f004 f93c 	bl	80857ba <_ZNK6String6equalsEPKc>
    } else if (cmd == "velD"){
 8081542:	b108      	cbz	r0, 8081548 <_Z9postValue6String+0x334>
        buf = String::format("%ld", velD);
 8081544:	9a04      	ldr	r2, [sp, #16]
 8081546:	e7ad      	b.n	80814a4 <_Z9postValue6String+0x290>
 8081548:	4628      	mov	r0, r5
 808154a:	490f      	ldr	r1, [pc, #60]	; (8081588 <_Z9postValue6String+0x374>)
 808154c:	f004 f935 	bl	80857ba <_ZNK6String6equalsEPKc>
    } else if (cmd == "gSpeed"){
 8081550:	b110      	cbz	r0, 8081558 <_Z9postValue6String+0x344>
        buf = String::format("%lu", gSpeed);
 8081552:	9a11      	ldr	r2, [sp, #68]	; 0x44
        buf = String::format("%lu", odoTotal);
 8081554:	490d      	ldr	r1, [pc, #52]	; (808158c <_Z9postValue6String+0x378>)
 8081556:	e7a6      	b.n	80814a6 <_Z9postValue6String+0x292>
 8081558:	4628      	mov	r0, r5
 808155a:	490d      	ldr	r1, [pc, #52]	; (8081590 <_Z9postValue6String+0x37c>)
 808155c:	f004 f92d 	bl	80857ba <_ZNK6String6equalsEPKc>
    } else if (cmd == "odoTrip"){
 8081560:	b108      	cbz	r0, 8081566 <_Z9postValue6String+0x352>
        buf = String::format("%lu", odoTrip);
 8081562:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8081564:	e7f6      	b.n	8081554 <_Z9postValue6String+0x340>
 8081566:	4628      	mov	r0, r5
 8081568:	490a      	ldr	r1, [pc, #40]	; (8081594 <_Z9postValue6String+0x380>)
 808156a:	f004 f926 	bl	80857ba <_ZNK6String6equalsEPKc>
    } else if (cmd == "odoTotal"){
 808156e:	b108      	cbz	r0, 8081574 <_Z9postValue6String+0x360>
        buf = String::format("%lu", odoTotal);
 8081570:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8081572:	e7ef      	b.n	8081554 <_Z9postValue6String+0x340>
        buf = "Don't know that one. Check spelling.";
 8081574:	4640      	mov	r0, r8
 8081576:	4908      	ldr	r1, [pc, #32]	; (8081598 <_Z9postValue6String+0x384>)
 8081578:	f004 f8d7 	bl	808572a <_ZN6StringaSEPKc>
 808157c:	e6c9      	b.n	8081312 <_Z9postValue6String+0xfe>
 808157e:	bf00      	nop
 8081580:	0808b482 	.word	0x0808b482
 8081584:	0808b487 	.word	0x0808b487
 8081588:	0808b48c 	.word	0x0808b48c
 808158c:	0808b46d 	.word	0x0808b46d
 8081590:	0808b493 	.word	0x0808b493
 8081594:	0808b49b 	.word	0x0808b49b
 8081598:	0808b4a4 	.word	0x0808b4a4

0808159c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 808159c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 808159e:	2614      	movs	r6, #20
 80815a0:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 80815a4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 80815a6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80815aa:	42ae      	cmp	r6, r5
 80815ac:	d004      	beq.n	80815b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 80815ae:	4628      	mov	r0, r5
 80815b0:	f004 f814 	bl	80855dc <_ZN6StringD1Ev>
 80815b4:	3514      	adds	r5, #20
 80815b6:	e7f8      	b.n	80815aa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 80815b8:	6820      	ldr	r0, [r4, #0]
 80815ba:	f003 fde9 	bl	8085190 <free>
    AllocatorT::free(data_);
}
 80815be:	4620      	mov	r0, r4
 80815c0:	bd70      	pop	{r4, r5, r6, pc}

080815c2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 80815c2:	b513      	push	{r0, r1, r4, lr}
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80815c4:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80815c6:	460b      	mov	r3, r1
 80815c8:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80815ca:	c803      	ldmia	r0, {r0, r1}
 80815cc:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80815d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80815d4:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80815d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80815dc:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80815e0:	b002      	add	sp, #8
 80815e2:	bd10      	pop	{r4, pc}

080815e4 <setup>:
void setup() {
 80815e4:	b530      	push	{r4, r5, lr}
 80815e6:	b095      	sub	sp, #84	; 0x54
	Serial.begin(9600);
 80815e8:	f006 f910 	bl	808780c <_Z16_fetch_usbserialv>
 80815ec:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80815f0:	f006 f8ee 	bl	80877d0 <_ZN9USBSerial5beginEl>
  delay(10000);
 80815f4:	f242 7010 	movw	r0, #10000	; 0x2710
 80815f8:	f005 fbc4 	bl	8086d84 <delay>
  pc.setup();
 80815fc:	4894      	ldr	r0, [pc, #592]	; (8081850 <setup+0x26c>)
 80815fe:	f001 fb91 	bl	8082d24 <_ZN10PowerCheck5setupEv>
  dht.begin();
 8081602:	4894      	ldr	r0, [pc, #592]	; (8081854 <setup+0x270>)
 8081604:	f002 fef0 	bl	80843e8 <_ZN14PietteTech_DHT5beginEv>
  t.begin();
 8081608:	4893      	ldr	r0, [pc, #588]	; (8081858 <setup+0x274>)
 808160a:	f001 fbbf 	bl	8082d8c <_ZN13AssetTracker25beginEv>
  t.gpsOn();
 808160e:	4892      	ldr	r0, [pc, #584]	; (8081858 <setup+0x274>)
 8081610:	f001 fc80 	bl	8082f14 <_ZN13AssetTracker25gpsOnEv>
  SetGPSAntenna("external"); // set up for external antenna
 8081614:	4991      	ldr	r1, [pc, #580]	; (808185c <setup+0x278>)
 8081616:	a810      	add	r0, sp, #64	; 0x40
 8081618:	f004 f82a 	bl	8085670 <_ZN6StringC1EPK19__FlashStringHelper>
	connectionCheck.setup();
 808161c:	4c90      	ldr	r4, [pc, #576]	; (8081860 <setup+0x27c>)
  SetGPSAntenna("external"); // set up for external antenna
 808161e:	a810      	add	r0, sp, #64	; 0x40
 8081620:	f7fe fdea 	bl	80801f8 <_Z13SetGPSAntenna6String>
 8081624:	a810      	add	r0, sp, #64	; 0x40
 8081626:	f003 ffd9 	bl	80855dc <_ZN6StringD1Ev>
	connectionCheck.setup();
 808162a:	4620      	mov	r0, r4
 808162c:	f000 fe18 	bl	8082260 <_ZN15ConnectionCheck5setupEv>
	bool cloudConnectDebug();

	inline ConnectionCheck &withListenWaitForReboot(unsigned long value) { listenWaitForReboot = value; return *this; };
	inline ConnectionCheck &withCloudWaitForReboot(unsigned long value) { cloudWaitForReboot = value; return *this; };
	inline ConnectionCheck &withPingTimeout(unsigned long value) { pingTimeout = value; return *this; };
	inline ConnectionCheck &withFailureSleepSec(unsigned long value) { failureSleepSec = value; return *this; };
 8081630:	f44f 7396 	mov.w	r3, #300	; 0x12c
	connectionEvents.setup();
 8081634:	488b      	ldr	r0, [pc, #556]	; (8081864 <setup+0x280>)
 8081636:	6123      	str	r3, [r4, #16]
 8081638:	f001 fad0 	bl	8082bdc <_ZN16ConnectionEvents5setupEv>
	batteryCheck.setup();
 808163c:	488a      	ldr	r0, [pc, #552]	; (8081868 <setup+0x284>)
 808163e:	f000 fb77 	bl	8081d30 <_ZN12BatteryCheck5setupEv>
	sessionCheck.setup();
 8081642:	488a      	ldr	r0, [pc, #552]	; (808186c <setup+0x288>)
 8081644:	f001 f9a2 	bl	808298c <_ZN12SessionCheck5setupEv>
	tester.setup();
 8081648:	4889      	ldr	r0, [pc, #548]	; (8081870 <setup+0x28c>)
 808164a:	f000 fc07 	bl	8081e5c <_ZN6Tester5setupEv>
        return _function(name, args...);
 808164e:	4989      	ldr	r1, [pc, #548]	; (8081874 <setup+0x290>)
 8081650:	4889      	ldr	r0, [pc, #548]	; (8081878 <setup+0x294>)
 8081652:	f7fe fe67 	bl	8080324 <_ZN10CloudClass9_functionEPKcPFi6StringE.isra.0>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8081656:	4b89      	ldr	r3, [pc, #548]	; (808187c <setup+0x298>)
            auto wrapper = new user_std_function_int_str_t(func);
 8081658:	2010      	movs	r0, #16
 808165a:	9310      	str	r3, [sp, #64]	; 0x40
	    _M_invoker = &_My_handler::_M_invoke;
 808165c:	4b88      	ldr	r3, [pc, #544]	; (8081880 <setup+0x29c>)
 808165e:	9313      	str	r3, [sp, #76]	; 0x4c
	    _M_manager = &_My_handler::_M_manager;
 8081660:	4b88      	ldr	r3, [pc, #544]	; (8081884 <setup+0x2a0>)
 8081662:	9312      	str	r3, [sp, #72]	; 0x48
 8081664:	f7fe fd29 	bl	80800ba <_Znwj>
 8081668:	4604      	mov	r4, r0
 808166a:	b178      	cbz	r0, 808168c <setup+0xa8>
    _Function_base() : _M_manager(nullptr) { }
 808166c:	2300      	movs	r3, #0
 808166e:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 8081670:	9b12      	ldr	r3, [sp, #72]	; 0x48
      if (static_cast<bool>(__x))
 8081672:	b133      	cbz	r3, 8081682 <setup+0x9e>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8081674:	2202      	movs	r2, #2
 8081676:	a910      	add	r1, sp, #64	; 0x40
 8081678:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 808167a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 808167c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 808167e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8081680:	60a3      	str	r3, [r4, #8]
                success = register_function(call_std_user_function, wrapper, funcKey);
 8081682:	4621      	mov	r1, r4
 8081684:	4a80      	ldr	r2, [pc, #512]	; (8081888 <setup+0x2a4>)
 8081686:	4881      	ldr	r0, [pc, #516]	; (808188c <setup+0x2a8>)
 8081688:	f005 fd81 	bl	808718e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
    _Function_base() : _M_manager(nullptr) { }
 808168c:	2500      	movs	r5, #0
    class function<_Res(_ArgTypes...)>
 808168e:	a810      	add	r0, sp, #64	; 0x40
 8081690:	f7ff f8b4 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
        return _function(name, args...);
 8081694:	497e      	ldr	r1, [pc, #504]	; (8081890 <setup+0x2ac>)
 8081696:	487f      	ldr	r0, [pc, #508]	; (8081894 <setup+0x2b0>)
 8081698:	f7fe fe44 	bl	8080324 <_ZN10CloudClass9_functionEPKcPFi6StringE.isra.0>
 808169c:	497e      	ldr	r1, [pc, #504]	; (8081898 <setup+0x2b4>)
 808169e:	487f      	ldr	r0, [pc, #508]	; (808189c <setup+0x2b8>)
 80816a0:	f7fe fe40 	bl	8080324 <_ZN10CloudClass9_functionEPKcPFi6StringE.isra.0>
 80816a4:	497e      	ldr	r1, [pc, #504]	; (80818a0 <setup+0x2bc>)
 80816a6:	487f      	ldr	r0, [pc, #508]	; (80818a4 <setup+0x2c0>)
 80816a8:	f7fe fe3c 	bl	8080324 <_ZN10CloudClass9_functionEPKcPFi6StringE.isra.0>
 80816ac:	497e      	ldr	r1, [pc, #504]	; (80818a8 <setup+0x2c4>)
 80816ae:	487f      	ldr	r0, [pc, #508]	; (80818ac <setup+0x2c8>)
 80816b0:	f7fe fe38 	bl	8080324 <_ZN10CloudClass9_functionEPKcPFi6StringE.isra.0>
 80816b4:	497e      	ldr	r1, [pc, #504]	; (80818b0 <setup+0x2cc>)
 80816b6:	487f      	ldr	r0, [pc, #508]	; (80818b4 <setup+0x2d0>)
 80816b8:	f7fe fe34 	bl	8080324 <_ZN10CloudClass9_functionEPKcPFi6StringE.isra.0>
 80816bc:	497e      	ldr	r1, [pc, #504]	; (80818b8 <setup+0x2d4>)
 80816be:	487f      	ldr	r0, [pc, #508]	; (80818bc <setup+0x2d8>)
 80816c0:	f7fe fe30 	bl	8080324 <_ZN10CloudClass9_functionEPKcPFi6StringE.isra.0>
 80816c4:	497e      	ldr	r1, [pc, #504]	; (80818c0 <setup+0x2dc>)
 80816c6:	487f      	ldr	r0, [pc, #508]	; (80818c4 <setup+0x2e0>)
 80816c8:	f7fe fe2c 	bl	8080324 <_ZN10CloudClass9_functionEPKcPFi6StringE.isra.0>
 80816cc:	497e      	ldr	r1, [pc, #504]	; (80818c8 <setup+0x2e4>)
 80816ce:	487f      	ldr	r0, [pc, #508]	; (80818cc <setup+0x2e8>)
 80816d0:	f7fe fe28 	bl	8080324 <_ZN10CloudClass9_functionEPKcPFi6StringE.isra.0>
 80816d4:	497e      	ldr	r1, [pc, #504]	; (80818d0 <setup+0x2ec>)
 80816d6:	487f      	ldr	r0, [pc, #508]	; (80818d4 <setup+0x2f0>)
 80816d8:	f7fe fe24 	bl	8080324 <_ZN10CloudClass9_functionEPKcPFi6StringE.isra.0>
 80816dc:	497e      	ldr	r1, [pc, #504]	; (80818d8 <setup+0x2f4>)
 80816de:	487f      	ldr	r0, [pc, #508]	; (80818dc <setup+0x2f8>)
 80816e0:	f7fe fe20 	bl	8080324 <_ZN10CloudClass9_functionEPKcPFi6StringE.isra.0>
 80816e4:	497e      	ldr	r1, [pc, #504]	; (80818e0 <setup+0x2fc>)
 80816e6:	487f      	ldr	r0, [pc, #508]	; (80818e4 <setup+0x300>)
 80816e8:	f7fe fe1c 	bl	8080324 <_ZN10CloudClass9_functionEPKcPFi6StringE.isra.0>
 80816ec:	497e      	ldr	r1, [pc, #504]	; (80818e8 <setup+0x304>)
 80816ee:	487f      	ldr	r0, [pc, #508]	; (80818ec <setup+0x308>)
 80816f0:	f7fe fe18 	bl	8080324 <_ZN10CloudClass9_functionEPKcPFi6StringE.isra.0>
 80816f4:	497e      	ldr	r1, [pc, #504]	; (80818f0 <setup+0x30c>)
 80816f6:	487f      	ldr	r0, [pc, #508]	; (80818f4 <setup+0x310>)
 80816f8:	f7fe fe14 	bl	8080324 <_ZN10CloudClass9_functionEPKcPFi6StringE.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 80816fc:	2300      	movs	r3, #0
 80816fe:	2201      	movs	r2, #1
 8081700:	497d      	ldr	r1, [pc, #500]	; (80818f8 <setup+0x314>)
 8081702:	487e      	ldr	r0, [pc, #504]	; (80818fc <setup+0x318>)
 8081704:	f003 fce4 	bl	80850d0 <spark_variable>
  Particle.variable("accelThresh", accelThreshold);
 8081708:	497d      	ldr	r1, [pc, #500]	; (8081900 <setup+0x31c>)
 808170a:	487e      	ldr	r0, [pc, #504]	; (8081904 <setup+0x320>)
 808170c:	f7fe fe10 	bl	8080330 <_ZN10CloudClass8variableIA12_cJRiEEEbRKT_DpOT0_.isra.0>
 8081710:	2300      	movs	r3, #0
 8081712:	2202      	movs	r2, #2
 8081714:	497c      	ldr	r1, [pc, #496]	; (8081908 <setup+0x324>)
 8081716:	487d      	ldr	r0, [pc, #500]	; (808190c <setup+0x328>)
 8081718:	f003 fcda 	bl	80850d0 <spark_variable>
        return spark_variable(varKey, (const void*)userVar, CloudVariableTypeInt::TYPE_ID, NULL);
 808171c:	2300      	movs	r3, #0
 808171e:	2202      	movs	r2, #2
 8081720:	497b      	ldr	r1, [pc, #492]	; (8081910 <setup+0x32c>)
 8081722:	487c      	ldr	r0, [pc, #496]	; (8081914 <setup+0x330>)
 8081724:	f003 fcd4 	bl	80850d0 <spark_variable>
 8081728:	2300      	movs	r3, #0
 808172a:	2202      	movs	r2, #2
 808172c:	497a      	ldr	r1, [pc, #488]	; (8081918 <setup+0x334>)
 808172e:	487b      	ldr	r0, [pc, #492]	; (808191c <setup+0x338>)
 8081730:	f003 fcce 	bl	80850d0 <spark_variable>
 8081734:	2300      	movs	r3, #0
 8081736:	2202      	movs	r2, #2
 8081738:	4979      	ldr	r1, [pc, #484]	; (8081920 <setup+0x33c>)
 808173a:	487a      	ldr	r0, [pc, #488]	; (8081924 <setup+0x340>)
 808173c:	f003 fcc8 	bl	80850d0 <spark_variable>
  Particle.variable("delayGPSMin", delayGPSMinutes);
 8081740:	4979      	ldr	r1, [pc, #484]	; (8081928 <setup+0x344>)
 8081742:	487a      	ldr	r0, [pc, #488]	; (808192c <setup+0x348>)
 8081744:	f7fe fdf4 	bl	8080330 <_ZN10CloudClass8variableIA12_cJRiEEEbRKT_DpOT0_.isra.0>
  Particle.variable("delayACCMin", delayACCMinutes);
 8081748:	4979      	ldr	r1, [pc, #484]	; (8081930 <setup+0x34c>)
 808174a:	487a      	ldr	r0, [pc, #488]	; (8081934 <setup+0x350>)
 808174c:	f7fe fdf0 	bl	8080330 <_ZN10CloudClass8variableIA12_cJRiEEEbRKT_DpOT0_.isra.0>
  Particle.variable("delayDHTMin", delayDHTMinutes);
 8081750:	4979      	ldr	r1, [pc, #484]	; (8081938 <setup+0x354>)
 8081752:	487a      	ldr	r0, [pc, #488]	; (808193c <setup+0x358>)
 8081754:	f7fe fdec 	bl	8080330 <_ZN10CloudClass8variableIA12_cJRiEEEbRKT_DpOT0_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 8081758:	2201      	movs	r2, #1
 808175a:	2300      	movs	r3, #0
 808175c:	4978      	ldr	r1, [pc, #480]	; (8081940 <setup+0x35c>)
 808175e:	4879      	ldr	r0, [pc, #484]	; (8081944 <setup+0x360>)
 8081760:	f003 fcb6 	bl	80850d0 <spark_variable>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8081764:	4b78      	ldr	r3, [pc, #480]	; (8081948 <setup+0x364>)
        };
 8081766:	a904      	add	r1, sp, #16
 8081768:	9304      	str	r3, [sp, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 808176a:	4b78      	ldr	r3, [pc, #480]	; (808194c <setup+0x368>)
 808176c:	a808      	add	r0, sp, #32
 808176e:	9307      	str	r3, [sp, #28]
	    _M_manager = &_My_handler::_M_manager;
 8081770:	4b77      	ldr	r3, [pc, #476]	; (8081950 <setup+0x36c>)
 8081772:	9306      	str	r3, [sp, #24]
 8081774:	f7ff f88b 	bl	808088e <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
 8081778:	a908      	add	r1, sp, #32
 808177a:	a810      	add	r0, sp, #64	; 0x40
 808177c:	f7ff f887 	bl	808088e <_ZNSt8functionIFvyiEEC1ERKS1_>
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081780:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
 8081782:	950e      	str	r5, [sp, #56]	; 0x38
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081784:	f7fe fc99 	bl	80800ba <_Znwj>
 8081788:	4604      	mov	r4, r0
 808178a:	b160      	cbz	r0, 80817a6 <setup+0x1c2>
	std::swap(_M_functor, __x._M_functor);
 808178c:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 808178e:	6085      	str	r5, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 8081790:	a810      	add	r0, sp, #64	; 0x40
 8081792:	f7ff ff16 	bl	80815c2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081796:	9b12      	ldr	r3, [sp, #72]	; 0x48
      __a = _GLIBCXX_MOVE(__b);
 8081798:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808179a:	60a3      	str	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
 808179c:	9212      	str	r2, [sp, #72]	; 0x48
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808179e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
 80817a0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80817a2:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 80817a4:	9213      	str	r2, [sp, #76]	; 0x4c
	    _M_invoker = &_My_handler::_M_invoke;
 80817a6:	4b6b      	ldr	r3, [pc, #428]	; (8081954 <setup+0x370>)
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler); // This may leak memory.
 80817a8:	2010      	movs	r0, #16
 80817aa:	930f      	str	r3, [sp, #60]	; 0x3c
	    _M_manager = &_My_handler::_M_manager;
 80817ac:	4b6a      	ldr	r3, [pc, #424]	; (8081958 <setup+0x374>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80817ae:	940c      	str	r4, [sp, #48]	; 0x30
	    _M_manager = &_My_handler::_M_manager;
 80817b0:	930e      	str	r3, [sp, #56]	; 0x38
 80817b2:	f7fe fc82 	bl	80800ba <_Znwj>
 80817b6:	4604      	mov	r4, r0
 80817b8:	b1a0      	cbz	r0, 80817e4 <setup+0x200>
    _Function_base() : _M_manager(nullptr) { }
 80817ba:	2300      	movs	r3, #0
 80817bc:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 80817be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      if (static_cast<bool>(__x))
 80817c0:	b133      	cbz	r3, 80817d0 <setup+0x1ec>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80817c2:	2202      	movs	r2, #2
 80817c4:	a90c      	add	r1, sp, #48	; 0x30
 80817c6:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80817c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80817ca:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80817cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80817ce:	60a3      	str	r3, [r4, #8]
        SystemEventContext context = {
 80817d0:	4b62      	ldr	r3, [pc, #392]	; (808195c <setup+0x378>)
        return system_subscribe_event(events, subscribedEventHandler, &context);
 80817d2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
        };
 80817d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
        return system_subscribe_event(events, subscribedEventHandler, &context);
 80817da:	2100      	movs	r1, #0
 80817dc:	4a60      	ldr	r2, [pc, #384]	; (8081960 <setup+0x37c>)
 80817de:	ab02      	add	r3, sp, #8
 80817e0:	f003 fbc6 	bl	8084f70 <system_subscribe_event>
    class function<_Res(_ArgTypes...)>
 80817e4:	a80c      	add	r0, sp, #48	; 0x30
 80817e6:	f7ff f809 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
 80817ea:	a810      	add	r0, sp, #64	; 0x40
 80817ec:	f7ff f806 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
 80817f0:	4c5c      	ldr	r4, [pc, #368]	; (8081964 <setup+0x380>)
 80817f2:	a808      	add	r0, sp, #32
 80817f4:	f7ff f802 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
 80817f8:	a804      	add	r0, sp, #16
 80817fa:	f7fe ffff 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 80817fe:	f003 fc7f 	bl	8085100 <spark_cloud_flag_connect>
 8081802:	68a0      	ldr	r0, [r4, #8]
 8081804:	b130      	cbz	r0, 8081814 <setup+0x230>
 8081806:	2300      	movs	r3, #0
 8081808:	2102      	movs	r1, #2
 808180a:	461a      	mov	r2, r3
 808180c:	e9cd 3300 	strd	r3, r3, [sp]
 8081810:	f003 f9ee 	bl	8084bf0 <os_timer_change>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
 8081814:	68a0      	ldr	r0, [r4, #8]
 8081816:	b140      	cbz	r0, 808182a <setup+0x246>
 8081818:	2300      	movs	r3, #0
 808181a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 808181e:	4619      	mov	r1, r3
 8081820:	e9cd 2300 	strd	r2, r3, [sp]
 8081824:	461a      	mov	r2, r3
 8081826:	f003 f9e3 	bl	8084bf0 <os_timer_change>
	delay(DHT_SAMPLE_INTERVAL); // DHT 22 minumum sampling period
 808182a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 808182e:	f005 faa9 	bl	8086d84 <delay>
	if ((transmittingData & SERIALSETUPDATA) == SERIALSETUPDATA)
 8081832:	4b35      	ldr	r3, [pc, #212]	; (8081908 <setup+0x324>)
 8081834:	681b      	ldr	r3, [r3, #0]
 8081836:	015b      	lsls	r3, r3, #5
 8081838:	d507      	bpl.n	808184a <setup+0x266>
		Serial.println("End of setup() function");
 808183a:	f005 ffe7 	bl	808780c <_Z16_fetch_usbserialv>
 808183e:	494a      	ldr	r1, [pc, #296]	; (8081968 <setup+0x384>)
}
 8081840:	b015      	add	sp, #84	; 0x54
 8081842:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		Serial.println("End of setup() function");
 8081846:	f004 b894 	b.w	8085972 <_ZN5Print7printlnEPKc>
}
 808184a:	b015      	add	sp, #84	; 0x54
 808184c:	bd30      	pop	{r4, r5, pc}
 808184e:	bf00      	nop
 8081850:	2000021c 	.word	0x2000021c
 8081854:	20000188 	.word	0x20000188
 8081858:	20000278 	.word	0x20000278
 808185c:	0808aff1 	.word	0x0808aff1
 8081860:	2000015c 	.word	0x2000015c
 8081864:	2000017c 	.word	0x2000017c
 8081868:	2000014c 	.word	0x2000014c
 808186c:	20000238 	.word	0x20000238
 8081870:	2000027c 	.word	0x2000027c
 8081874:	08080189 	.word	0x08080189
 8081878:	0808b571 	.word	0x0808b571
 808187c:	080801f9 	.word	0x080801f9
 8081880:	08080255 	.word	0x08080255
 8081884:	08080241 	.word	0x08080241
 8081888:	0808b5e0 	.word	0x0808b5e0
 808188c:	0808714b 	.word	0x0808714b
 8081890:	08080b91 	.word	0x08080b91
 8081894:	0808b4d2 	.word	0x0808b4d2
 8081898:	08080139 	.word	0x08080139
 808189c:	0808b4d9 	.word	0x0808b4d9
 80818a0:	0808014d 	.word	0x0808014d
 80818a4:	0808b4e3 	.word	0x0808b4e3
 80818a8:	08080161 	.word	0x08080161
 80818ac:	0808b4ed 	.word	0x0808b4ed
 80818b0:	08080175 	.word	0x08080175
 80818b4:	0808b4f7 	.word	0x0808b4f7
 80818b8:	08080715 	.word	0x08080715
 80818bc:	0808b501 	.word	0x0808b501
 80818c0:	0808019d 	.word	0x0808019d
 80818c4:	0808b509 	.word	0x0808b509
 80818c8:	08080381 	.word	0x08080381
 80818cc:	0808b512 	.word	0x0808b512
 80818d0:	08081215 	.word	0x08081215
 80818d4:	0808b51a 	.word	0x0808b51a
 80818d8:	08083fc5 	.word	0x08083fc5
 80818dc:	0808b524 	.word	0x0808b524
 80818e0:	0808404d 	.word	0x0808404d
 80818e4:	0808b530 	.word	0x0808b530
 80818e8:	08084115 	.word	0x08084115
 80818ec:	0808b53d 	.word	0x0808b53d
 80818f0:	0808419d 	.word	0x0808419d
 80818f4:	0808b548 	.word	0x0808b548
 80818f8:	20000011 	.word	0x20000011
 80818fc:	0808b554 	.word	0x0808b554
 8081900:	20000000 	.word	0x20000000
 8081904:	0808b55e 	.word	0x0808b55e
 8081908:	20000014 	.word	0x20000014
 808190c:	0808b56a 	.word	0x0808b56a
 8081910:	200001f4 	.word	0x200001f4
 8081914:	0808b577 	.word	0x0808b577
 8081918:	200001ec 	.word	0x200001ec
 808191c:	0808b582 	.word	0x0808b582
 8081920:	200001f0 	.word	0x200001f0
 8081924:	0808b58d 	.word	0x0808b58d
 8081928:	2000000c 	.word	0x2000000c
 808192c:	0808b598 	.word	0x0808b598
 8081930:	20000004 	.word	0x20000004
 8081934:	0808b5a4 	.word	0x0808b5a4
 8081938:	20000008 	.word	0x20000008
 808193c:	0808b5b0 	.word	0x0808b5b0
 8081940:	20000010 	.word	0x20000010
 8081944:	0808b5bc 	.word	0x0808b5bc
 8081948:	080807c9 	.word	0x080807c9
 808194c:	08080285 	.word	0x08080285
 8081950:	08080271 	.word	0x08080271
 8081954:	080802a7 	.word	0x080802a7
 8081958:	080808ad 	.word	0x080808ad
 808195c:	00080001 	.word	0x00080001
 8081960:	08080111 	.word	0x08080111
 8081964:	20000298 	.word	0x20000298
 8081968:	0808b5c8 	.word	0x0808b5c8

0808196c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 808196c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 808196e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081970:	4604      	mov	r4, r0
 8081972:	460d      	mov	r5, r1
 8081974:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 8081976:	d916      	bls.n	80819a6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 8081978:	4290      	cmp	r0, r2
 808197a:	d215      	bcs.n	80819a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 808197c:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 8081980:	1a75      	subs	r5, r6, r1
 8081982:	f1a1 0714 	sub.w	r7, r1, #20
 8081986:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 8081988:	42b7      	cmp	r7, r6
 808198a:	d01c      	beq.n	80819c6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 808198c:	b12c      	cbz	r4, 808199a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 808198e:	4631      	mov	r1, r6
 8081990:	4620      	mov	r0, r4
 8081992:	f003 fe9d 	bl	80856d0 <_ZN6StringC1EOS_>
 8081996:	7c33      	ldrb	r3, [r6, #16]
 8081998:	7423      	strb	r3, [r4, #16]
 808199a:	4630      	mov	r0, r6
 808199c:	f003 fe1e 	bl	80855dc <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 80819a0:	3e14      	subs	r6, #20
 80819a2:	3c14      	subs	r4, #20
 80819a4:	e7f0      	b.n	8081988 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 80819a6:	d00e      	beq.n	80819c6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 80819a8:	42b5      	cmp	r5, r6
 80819aa:	d00c      	beq.n	80819c6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 80819ac:	b12c      	cbz	r4, 80819ba <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 80819ae:	4629      	mov	r1, r5
 80819b0:	4620      	mov	r0, r4
 80819b2:	f003 fe8d 	bl	80856d0 <_ZN6StringC1EOS_>
 80819b6:	7c2b      	ldrb	r3, [r5, #16]
 80819b8:	7423      	strb	r3, [r4, #16]
 80819ba:	4628      	mov	r0, r5
 80819bc:	f003 fe0e 	bl	80855dc <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 80819c0:	3514      	adds	r5, #20
 80819c2:	3414      	adds	r4, #20
 80819c4:	e7f0      	b.n	80819a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 80819c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080819c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 80819c8:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80819ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 80819ce:	e9c0 3300 	strd	r3, r3, [r0]
 80819d2:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80819d4:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80819d6:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80819d8:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80819da:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80819dc:	dd24      	ble.n	8081a28 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 80819de:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 80819e2:	fb08 f007 	mul.w	r0, r8, r7
 80819e6:	f003 fbcb 	bl	8085180 <malloc>
            if (!d) {
 80819ea:	4605      	mov	r5, r0
 80819ec:	b1e0      	cbz	r0, 8081a28 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 80819ee:	e9d4 1200 	ldrd	r1, r2, [r4]
 80819f2:	fb08 1202 	mla	r2, r8, r2, r1
 80819f6:	f7ff ffb9 	bl	808196c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 80819fa:	6820      	ldr	r0, [r4, #0]
 80819fc:	f003 fbc8 	bl	8085190 <free>
        data_ = d;
 8081a00:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 8081a02:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 8081a04:	e9d6 7300 	ldrd	r7, r3, [r6]
 8081a08:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 8081a0c:	45b8      	cmp	r8, r7
 8081a0e:	d009      	beq.n	8081a24 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 8081a10:	4639      	mov	r1, r7
 8081a12:	4628      	mov	r0, r5
 8081a14:	f003 fe76 	bl	8085704 <_ZN6StringC1ERKS_>
 8081a18:	7c3b      	ldrb	r3, [r7, #16]
 8081a1a:	3514      	adds	r5, #20
 8081a1c:	f805 3c04 	strb.w	r3, [r5, #-4]
 8081a20:	3714      	adds	r7, #20
 8081a22:	e7f3      	b.n	8081a0c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 8081a24:	6873      	ldr	r3, [r6, #4]
 8081a26:	6063      	str	r3, [r4, #4]
}
 8081a28:	4620      	mov	r0, r4
 8081a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08081a30 <_GLOBAL__sub_I_logHandler>:
}
 8081a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        val_(val) {
 8081a34:	f04f 0801 	mov.w	r8, #1
        capacity_(0) {
 8081a38:	2400      	movs	r4, #0
 8081a3a:	4b75      	ldr	r3, [pc, #468]	; (8081c10 <_GLOBAL__sub_I_logHandler+0x1e0>)
 8081a3c:	b090      	sub	sp, #64	; 0x40
 8081a3e:	f883 8000 	strb.w	r8, [r3]
 8081a42:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8081a46:	9405      	str	r4, [sp, #20]
            StreamLogHandler(Serial, level, filters) {
 8081a48:	f005 fee0 	bl	808780c <_Z16_fetch_usbserialv>
        filter_(level, filters) {
 8081a4c:	4d71      	ldr	r5, [pc, #452]	; (8081c14 <_GLOBAL__sub_I_logHandler+0x1e4>)
 8081a4e:	4606      	mov	r6, r0
 8081a50:	462f      	mov	r7, r5
 8081a52:	a903      	add	r1, sp, #12
 8081a54:	a806      	add	r0, sp, #24
 8081a56:	f7ff ffb7 	bl	80819c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
 8081a5a:	a906      	add	r1, sp, #24
 8081a5c:	a809      	add	r0, sp, #36	; 0x24
 8081a5e:	f7ff ffb3 	bl	80819c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 8081a62:	4b6d      	ldr	r3, [pc, #436]	; (8081c18 <_GLOBAL__sub_I_logHandler+0x1e8>)
 8081a64:	a909      	add	r1, sp, #36	; 0x24
 8081a66:	f847 3b04 	str.w	r3, [r7], #4
 8081a6a:	a80c      	add	r0, sp, #48	; 0x30
 8081a6c:	f7ff ffac 	bl	80819c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 8081a70:	aa0c      	add	r2, sp, #48	; 0x30
 8081a72:	211e      	movs	r1, #30
 8081a74:	4638      	mov	r0, r7
 8081a76:	f004 fd5c 	bl	8086532 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 8081a7a:	a80c      	add	r0, sp, #48	; 0x30
 8081a7c:	f7ff fd8e 	bl	808159c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 8081a80:	a809      	add	r0, sp, #36	; 0x24
 8081a82:	f7ff fd8b 	bl	808159c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 8081a86:	4b65      	ldr	r3, [pc, #404]	; (8081c1c <_GLOBAL__sub_I_logHandler+0x1ec>)
 8081a88:	622e      	str	r6, [r5, #32]
 8081a8a:	602b      	str	r3, [r5, #0]
 8081a8c:	a806      	add	r0, sp, #24
 8081a8e:	f7ff fd85 	bl	808159c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 8081a92:	4b63      	ldr	r3, [pc, #396]	; (8081c20 <_GLOBAL__sub_I_logHandler+0x1f0>)
SerialLogHandler logHandler;
 8081a94:	4e63      	ldr	r6, [pc, #396]	; (8081c24 <_GLOBAL__sub_I_logHandler+0x1f4>)
 8081a96:	602b      	str	r3, [r5, #0]
        Serial.begin();
 8081a98:	f005 feb8 	bl	808780c <_Z16_fetch_usbserialv>
 8081a9c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8081aa0:	f005 fe96 	bl	80877d0 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 8081aa4:	f004 fa08 	bl	8085eb8 <_ZN5spark10LogManager8instanceEv>
 8081aa8:	4629      	mov	r1, r5
 8081aaa:	f004 fc21 	bl	80862f0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
 8081aae:	a803      	add	r0, sp, #12
 8081ab0:	f7ff fd74 	bl	808159c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 8081ab4:	4632      	mov	r2, r6
 8081ab6:	495c      	ldr	r1, [pc, #368]	; (8081c28 <_GLOBAL__sub_I_logHandler+0x1f8>)
 8081ab8:	4628      	mov	r0, r5
 8081aba:	f006 fd1b 	bl	80884f4 <__aeabi_atexit>
STARTUP(startupMacro());
 8081abe:	f7fe fedb 	bl	8080878 <_Z12startupMacrov>
SYSTEM_THREAD(ENABLED);
 8081ac2:	4621      	mov	r1, r4
 8081ac4:	4640      	mov	r0, r8
 8081ac6:	f003 fa5b 	bl	8084f80 <system_thread_set_state>
              error_(SYSTEM_ERROR_NONE) {
 8081aca:	4d58      	ldr	r5, [pc, #352]	; (8081c2c <_GLOBAL__sub_I_logHandler+0x1fc>)
    SleepResult() {}
 8081acc:	4b58      	ldr	r3, [pc, #352]	; (8081c30 <_GLOBAL__sub_I_logHandler+0x200>)
              error_(SYSTEM_ERROR_NONE) {
 8081ace:	e9c5 4400 	strd	r4, r4, [r5]
    SleepResult() {}
 8081ad2:	60ab      	str	r3, [r5, #8]
        set_system_mode(mode);
 8081ad4:	2002      	movs	r0, #2
 8081ad6:	f003 fa33 	bl	8084f40 <set_system_mode>
SYSTEM_MODE(SEMI_AUTOMATIC);
 8081ada:	4628      	mov	r0, r5
ConnectionEvents connectionEvents("connEventStats");
 8081adc:	4d55      	ldr	r5, [pc, #340]	; (8081c34 <_GLOBAL__sub_I_logHandler+0x204>)
SYSTEM_MODE(SEMI_AUTOMATIC);
 8081ade:	4632      	mov	r2, r6
 8081ae0:	4955      	ldr	r1, [pc, #340]	; (8081c38 <_GLOBAL__sub_I_logHandler+0x208>)
 8081ae2:	f006 fd07 	bl	80884f4 <__aeabi_atexit>
ConnectionEvents connectionEvents("connEventStats");
 8081ae6:	4628      	mov	r0, r5
 8081ae8:	4954      	ldr	r1, [pc, #336]	; (8081c3c <_GLOBAL__sub_I_logHandler+0x20c>)
 8081aea:	f001 f819 	bl	8082b20 <_ZN16ConnectionEventsC1EPKc>
 8081aee:	4632      	mov	r2, r6
 8081af0:	4953      	ldr	r1, [pc, #332]	; (8081c40 <_GLOBAL__sub_I_logHandler+0x210>)
 8081af2:	4628      	mov	r0, r5
 8081af4:	f006 fcfe 	bl	80884f4 <__aeabi_atexit>
SessionCheck sessionCheck(3600);
 8081af8:	4d52      	ldr	r5, [pc, #328]	; (8081c44 <_GLOBAL__sub_I_logHandler+0x214>)
 8081afa:	4b53      	ldr	r3, [pc, #332]	; (8081c48 <_GLOBAL__sub_I_logHandler+0x218>)
 8081afc:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8081b00:	9300      	str	r3, [sp, #0]
 8081b02:	4628      	mov	r0, r5
 8081b04:	2300      	movs	r3, #0
 8081b06:	f000 fe33 	bl	8082770 <_ZN12SessionCheckC1ExPKc>
 8081b0a:	4628      	mov	r0, r5
ConnectionCheck connectionCheck;
 8081b0c:	4d4f      	ldr	r5, [pc, #316]	; (8081c4c <_GLOBAL__sub_I_logHandler+0x21c>)
SessionCheck sessionCheck(3600);
 8081b0e:	4632      	mov	r2, r6
 8081b10:	494f      	ldr	r1, [pc, #316]	; (8081c50 <_GLOBAL__sub_I_logHandler+0x220>)
 8081b12:	f006 fcef 	bl	80884f4 <__aeabi_atexit>
ConnectionCheck connectionCheck;
 8081b16:	4628      	mov	r0, r5
 8081b18:	f000 fb7e 	bl	8082218 <_ZN15ConnectionCheckC1Ev>
 8081b1c:	4628      	mov	r0, r5
Tester tester("testerFn", D2);
 8081b1e:	4d4d      	ldr	r5, [pc, #308]	; (8081c54 <_GLOBAL__sub_I_logHandler+0x224>)
ConnectionCheck connectionCheck;
 8081b20:	4632      	mov	r2, r6
 8081b22:	494d      	ldr	r1, [pc, #308]	; (8081c58 <_GLOBAL__sub_I_logHandler+0x228>)
 8081b24:	f006 fce6 	bl	80884f4 <__aeabi_atexit>
Tester tester("testerFn", D2);
 8081b28:	2202      	movs	r2, #2
 8081b2a:	4628      	mov	r0, r5
 8081b2c:	494b      	ldr	r1, [pc, #300]	; (8081c5c <_GLOBAL__sub_I_logHandler+0x22c>)
 8081b2e:	f000 f987 	bl	8081e40 <_ZN6TesterC1EPKci>
 8081b32:	4628      	mov	r0, r5
BatteryCheck batteryCheck(15.0, 3600);
 8081b34:	4d4a      	ldr	r5, [pc, #296]	; (8081c60 <_GLOBAL__sub_I_logHandler+0x230>)
Tester tester("testerFn", D2);
 8081b36:	4632      	mov	r2, r6
 8081b38:	494a      	ldr	r1, [pc, #296]	; (8081c64 <_GLOBAL__sub_I_logHandler+0x234>)
 8081b3a:	f006 fcdb 	bl	80884f4 <__aeabi_atexit>
BatteryCheck batteryCheck(15.0, 3600);
 8081b3e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8081b42:	4628      	mov	r0, r5
 8081b44:	4948      	ldr	r1, [pc, #288]	; (8081c68 <_GLOBAL__sub_I_logHandler+0x238>)
 8081b46:	f000 f8bf 	bl	8081cc8 <_ZN12BatteryCheckC1Efl>
 8081b4a:	4628      	mov	r0, r5
AppWatchdogWrapper watchdog(APP_WATCHDOG_TIMEOUT);
 8081b4c:	4d47      	ldr	r5, [pc, #284]	; (8081c6c <_GLOBAL__sub_I_logHandler+0x23c>)
BatteryCheck batteryCheck(15.0, 3600);
 8081b4e:	4632      	mov	r2, r6
 8081b50:	4947      	ldr	r1, [pc, #284]	; (8081c70 <_GLOBAL__sub_I_logHandler+0x240>)
 8081b52:	f006 fccf 	bl	80884f4 <__aeabi_atexit>
AppWatchdogWrapper watchdog(APP_WATCHDOG_TIMEOUT);
 8081b56:	f64e 2160 	movw	r1, #60000	; 0xea60
 8081b5a:	4628      	mov	r0, r5
 8081b5c:	f000 fd2c 	bl	80825b8 <_ZN18AppWatchdogWrapperC1Em>
 8081b60:	4632      	mov	r2, r6
 8081b62:	4944      	ldr	r1, [pc, #272]	; (8081c74 <_GLOBAL__sub_I_logHandler+0x244>)
 8081b64:	4628      	mov	r0, r5
FuelGauge fuel = FuelGauge();
 8081b66:	4d44      	ldr	r5, [pc, #272]	; (8081c78 <_GLOBAL__sub_I_logHandler+0x248>)
AppWatchdogWrapper watchdog(APP_WATCHDOG_TIMEOUT);
 8081b68:	f006 fcc4 	bl	80884f4 <__aeabi_atexit>
AssetTracker2 t = AssetTracker2();
 8081b6c:	4843      	ldr	r0, [pc, #268]	; (8081c7c <_GLOBAL__sub_I_logHandler+0x24c>)
 8081b6e:	f001 f90b 	bl	8082d88 <_ZN13AssetTracker2C1Ev>
FuelGauge fuel = FuelGauge();
 8081b72:	4621      	mov	r1, r4
 8081b74:	4628      	mov	r0, r5
 8081b76:	f005 f935 	bl	8086de4 <_ZN9FuelGaugeC1Eb>
 8081b7a:	4628      	mov	r0, r5
PowerCheck pc = PowerCheck();
 8081b7c:	4d40      	ldr	r5, [pc, #256]	; (8081c80 <_GLOBAL__sub_I_logHandler+0x250>)
FuelGauge fuel = FuelGauge();
 8081b7e:	4632      	mov	r2, r6
 8081b80:	4940      	ldr	r1, [pc, #256]	; (8081c84 <_GLOBAL__sub_I_logHandler+0x254>)
 8081b82:	f006 fcb7 	bl	80884f4 <__aeabi_atexit>
PowerCheck pc = PowerCheck();
 8081b86:	4628      	mov	r0, r5
 8081b88:	f001 f8bc 	bl	8082d04 <_ZN10PowerCheckC1Ev>
 8081b8c:	4632      	mov	r2, r6
 8081b8e:	4628      	mov	r0, r5
 8081b90:	493d      	ldr	r1, [pc, #244]	; (8081c88 <_GLOBAL__sub_I_logHandler+0x258>)
String pubAccel = "";
 8081b92:	4d3e      	ldr	r5, [pc, #248]	; (8081c8c <_GLOBAL__sub_I_logHandler+0x25c>)
PowerCheck pc = PowerCheck();
 8081b94:	f006 fcae 	bl	80884f4 <__aeabi_atexit>
PietteTech_DHT dht(DHTPIN, DHTTYPE, NULL);
 8081b98:	4623      	mov	r3, r4
 8081b9a:	2216      	movs	r2, #22
 8081b9c:	2103      	movs	r1, #3
 8081b9e:	483c      	ldr	r0, [pc, #240]	; (8081c90 <_GLOBAL__sub_I_logHandler+0x260>)
 8081ba0:	f002 fc1f 	bl	80843e2 <_ZN14PietteTech_DHTC1EhhPFvvE>
String pubAccel = "";
 8081ba4:	4628      	mov	r0, r5
 8081ba6:	493b      	ldr	r1, [pc, #236]	; (8081c94 <_GLOBAL__sub_I_logHandler+0x264>)
 8081ba8:	f003 fd62 	bl	8085670 <_ZN6StringC1EPK19__FlashStringHelper>
 8081bac:	4632      	mov	r2, r6
 8081bae:	4628      	mov	r0, r5
 8081bb0:	4939      	ldr	r1, [pc, #228]	; (8081c98 <_GLOBAL__sub_I_logHandler+0x268>)
 8081bb2:	f006 fc9f 	bl	80884f4 <__aeabi_atexit>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8081bb6:	4b39      	ldr	r3, [pc, #228]	; (8081c9c <_GLOBAL__sub_I_logHandler+0x26c>)
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
 8081bb8:	4d39      	ldr	r5, [pc, #228]	; (8081ca0 <_GLOBAL__sub_I_logHandler+0x270>)
 8081bba:	930c      	str	r3, [sp, #48]	; 0x30
	    _M_invoker = &_My_handler::_M_invoke;
 8081bbc:	4b39      	ldr	r3, [pc, #228]	; (8081ca4 <_GLOBAL__sub_I_logHandler+0x274>)
	std::swap(_M_functor, __x._M_functor);
 8081bbe:	f105 010c 	add.w	r1, r5, #12
	    _M_invoker = &_My_handler::_M_invoke;
 8081bc2:	930f      	str	r3, [sp, #60]	; 0x3c
	    _M_manager = &_My_handler::_M_manager;
 8081bc4:	4b38      	ldr	r3, [pc, #224]	; (8081ca8 <_GLOBAL__sub_I_logHandler+0x278>)
	std::swap(_M_functor, __x._M_functor);
 8081bc6:	a80c      	add	r0, sp, #48	; 0x30
	    _M_manager = &_My_handler::_M_manager;
 8081bc8:	930e      	str	r3, [sp, #56]	; 0x38
 8081bca:	4b38      	ldr	r3, [pc, #224]	; (8081cac <_GLOBAL__sub_I_logHandler+0x27c>)
 8081bcc:	712c      	strb	r4, [r5, #4]
 8081bce:	602b      	str	r3, [r5, #0]
 8081bd0:	60ac      	str	r4, [r5, #8]
    _Function_base() : _M_manager(nullptr) { }
 8081bd2:	616c      	str	r4, [r5, #20]
	std::swap(_M_functor, __x._M_functor);
 8081bd4:	f7ff fcf5 	bl	80815c2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
 8081bd8:	696a      	ldr	r2, [r5, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081bda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      __a = _GLIBCXX_MOVE(__b);
 8081bdc:	920e      	str	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
 8081bde:	616b      	str	r3, [r5, #20]
      __a = _GLIBCXX_MOVE(__b);
 8081be0:	69aa      	ldr	r2, [r5, #24]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081be2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
 8081be4:	2132      	movs	r1, #50	; 0x32
      __b = _GLIBCXX_MOVE(__tmp);
 8081be6:	61ab      	str	r3, [r5, #24]
      __a = _GLIBCXX_MOVE(__b);
 8081be8:	920f      	str	r2, [sp, #60]	; 0x3c
 8081bea:	462b      	mov	r3, r5
 8081bec:	4a30      	ldr	r2, [pc, #192]	; (8081cb0 <_GLOBAL__sub_I_logHandler+0x280>)
 8081bee:	e9cd 4400 	strd	r4, r4, [sp]
 8081bf2:	f105 0008 	add.w	r0, r5, #8
 8081bf6:	f002 ffe3 	bl	8084bc0 <os_timer_create>
    class function<_Res(_ArgTypes...)>
 8081bfa:	a80c      	add	r0, sp, #48	; 0x30
 8081bfc:	f7fe fdfe 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
Timer timer(50, callGPS);
 8081c00:	4632      	mov	r2, r6
 8081c02:	4628      	mov	r0, r5
 8081c04:	492b      	ldr	r1, [pc, #172]	; (8081cb4 <_GLOBAL__sub_I_logHandler+0x284>)
}
 8081c06:	b010      	add	sp, #64	; 0x40
 8081c08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
Timer timer(50, callGPS);
 8081c0c:	f006 bc72 	b.w	80884f4 <__aeabi_atexit>
 8081c10:	20000140 	.word	0x20000140
 8081c14:	200001f8 	.word	0x200001f8
 8081c18:	0808b62c 	.word	0x0808b62c
 8081c1c:	0808bc30 	.word	0x0808bc30
 8081c20:	0808b644 	.word	0x0808b644
 8081c24:	20000130 	.word	0x20000130
 8081c28:	08080339 	.word	0x08080339
 8081c2c:	20000134 	.word	0x20000134
 8081c30:	ffff0000 	.word	0xffff0000
 8081c34:	2000017c 	.word	0x2000017c
 8081c38:	080801ad 	.word	0x080801ad
 8081c3c:	0808b5ea 	.word	0x0808b5ea
 8081c40:	08082a29 	.word	0x08082a29
 8081c44:	20000238 	.word	0x20000238
 8081c48:	0808b5f9 	.word	0x0808b5f9
 8081c4c:	2000015c 	.word	0x2000015c
 8081c50:	080826dd 	.word	0x080826dd
 8081c54:	2000027c 	.word	0x2000027c
 8081c58:	080821d9 	.word	0x080821d9
 8081c5c:	0808b606 	.word	0x0808b606
 8081c60:	2000014c 	.word	0x2000014c
 8081c64:	08081dad 	.word	0x08081dad
 8081c68:	41700000 	.word	0x41700000
 8081c6c:	200002b4 	.word	0x200002b4
 8081c70:	08081cb9 	.word	0x08081cb9
 8081c74:	080824ed 	.word	0x080824ed
 8081c78:	200001e4 	.word	0x200001e4
 8081c7c:	20000278 	.word	0x20000278
 8081c80:	2000021c 	.word	0x2000021c
 8081c84:	08086e03 	.word	0x08086e03
 8081c88:	08082c5d 	.word	0x08082c5d
 8081c8c:	20000228 	.word	0x20000228
 8081c90:	20000188 	.word	0x20000188
 8081c94:	0808b70c 	.word	0x0808b70c
 8081c98:	080855dd 	.word	0x080855dd
 8081c9c:	080800f9 	.word	0x080800f9
 8081ca0:	20000298 	.word	0x20000298
 8081ca4:	080802a3 	.word	0x080802a3
 8081ca8:	0808028f 	.word	0x0808028f
 8081cac:	0808b618 	.word	0x0808b618
 8081cb0:	080801bd 	.word	0x080801bd
 8081cb4:	08080811 	.word	0x08080811

08081cb8 <_ZN12BatteryCheckD1Ev>:


}
BatteryCheck::~BatteryCheck() {

}
 8081cb8:	4770      	bx	lr

08081cba <_ZN12BatteryCheckD0Ev>:
BatteryCheck::~BatteryCheck() {
 8081cba:	b510      	push	{r4, lr}
 8081cbc:	4604      	mov	r4, r0
}
 8081cbe:	2110      	movs	r1, #16
 8081cc0:	f006 fc1d 	bl	80884fe <_ZdlPvj>
 8081cc4:	4620      	mov	r0, r4
 8081cc6:	bd10      	pop	{r4, pc}

08081cc8 <_ZN12BatteryCheckC1Efl>:
BatteryCheck::BatteryCheck(float minimumSoC, long sleepTimeSecs) : minimumSoC(minimumSoC), sleepTimeSecs(sleepTimeSecs) {
 8081cc8:	6082      	str	r2, [r0, #8]
 8081cca:	2200      	movs	r2, #0
 8081ccc:	b510      	push	{r4, lr}
 8081cce:	4c02      	ldr	r4, [pc, #8]	; (8081cd8 <_ZN12BatteryCheckC1Efl+0x10>)
 8081cd0:	6041      	str	r1, [r0, #4]
 8081cd2:	6004      	str	r4, [r0, #0]
 8081cd4:	60c2      	str	r2, [r0, #12]
}
 8081cd6:	bd10      	pop	{r4, pc}
 8081cd8:	0808b65c 	.word	0x0808b65c

08081cdc <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv>:
		lastCheckMs = millis();
		checkAndSleepIfNecessary();
	}
}

void BatteryCheck::checkAndSleepIfNecessary() {
 8081cdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8081cde:	4604      	mov	r4, r0
	float soc = fuel.getSoC();
 8081ce0:	4810      	ldr	r0, [pc, #64]	; (8081d24 <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv+0x48>)
 8081ce2:	f005 f8f1 	bl	8086ec8 <_ZN9FuelGauge6getSoCEv>

	// There is an SoC, it's less than the minimum, and there's no external power (USB or VIN)
	if (soc != 0.0 && soc < minimumSoC && !pmic.isPowerGood()) {
 8081ce6:	2100      	movs	r1, #0
	float soc = fuel.getSoC();
 8081ce8:	4605      	mov	r5, r0
	if (soc != 0.0 && soc < minimumSoC && !pmic.isPowerGood()) {
 8081cea:	f008 ff01 	bl	808aaf0 <__aeabi_fcmpeq>
 8081cee:	b9b0      	cbnz	r0, 8081d1e <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv+0x42>
 8081cf0:	4629      	mov	r1, r5
 8081cf2:	6860      	ldr	r0, [r4, #4]
 8081cf4:	f008 ff24 	bl	808ab40 <__aeabi_fcmpgt>
 8081cf8:	b188      	cbz	r0, 8081d1e <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv+0x42>
 8081cfa:	480b      	ldr	r0, [pc, #44]	; (8081d28 <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv+0x4c>)
 8081cfc:	f003 faed 	bl	80852da <_ZN4PMIC11isPowerGoodEv>
 8081d00:	b968      	cbnz	r0, 8081d1e <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv+0x42>
		ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_LOW_BATTERY_SLEEP, static_cast<int>(soc));
 8081d02:	4628      	mov	r0, r5
 8081d04:	f008 ff3c 	bl	808ab80 <__aeabi_f2iz>
 8081d08:	4601      	mov	r1, r0
 8081d0a:	200d      	movs	r0, #13
 8081d0c:	f000 ff94 	bl	8082c38 <_ZN16ConnectionEvents8addEventEii>

		System.sleep(SLEEP_MODE_DEEP, sleepTimeSecs);
 8081d10:	4b06      	ldr	r3, [pc, #24]	; (8081d2c <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv+0x50>)
 8081d12:	2101      	movs	r1, #1
 8081d14:	4668      	mov	r0, sp
 8081d16:	681b      	ldr	r3, [r3, #0]
 8081d18:	68a2      	ldr	r2, [r4, #8]
 8081d1a:	f003 fbcd 	bl	80854b8 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
	}

}
 8081d1e:	b003      	add	sp, #12
 8081d20:	bd30      	pop	{r4, r5, pc}
 8081d22:	bf00      	nop
 8081d24:	200002d4 	.word	0x200002d4
 8081d28:	200002dc 	.word	0x200002dc
 8081d2c:	200002d0 	.word	0x200002d0

08081d30 <_ZN12BatteryCheck5setupEv>:
	checkAndSleepIfNecessary();
 8081d30:	f7ff bfd4 	b.w	8081cdc <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv>

08081d34 <_ZN12BatteryCheck4loopEv>:
void BatteryCheck::loop() {
 8081d34:	b510      	push	{r4, lr}
 8081d36:	4604      	mov	r4, r0
 8081d38:	f002 feea 	bl	8084b10 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastCheckMs >= CHECK_PERIOD_MS) {
 8081d3c:	68e3      	ldr	r3, [r4, #12]
 8081d3e:	1ac0      	subs	r0, r0, r3
 8081d40:	f64e 235f 	movw	r3, #59999	; 0xea5f
 8081d44:	4298      	cmp	r0, r3
 8081d46:	d907      	bls.n	8081d58 <_ZN12BatteryCheck4loopEv+0x24>
 8081d48:	f002 fee2 	bl	8084b10 <HAL_Timer_Get_Milli_Seconds>
		lastCheckMs = millis();
 8081d4c:	60e0      	str	r0, [r4, #12]
		checkAndSleepIfNecessary();
 8081d4e:	4620      	mov	r0, r4
}
 8081d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		checkAndSleepIfNecessary();
 8081d54:	f7ff bfc2 	b.w	8081cdc <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv>
}
 8081d58:	bd10      	pop	{r4, pc}
	...

08081d5c <_GLOBAL__sub_I__ZN12BatteryCheckC2Efl>:
}
 8081d5c:	b570      	push	{r4, r5, r6, lr}
 8081d5e:	2400      	movs	r4, #0
 8081d60:	4b0c      	ldr	r3, [pc, #48]	; (8081d94 <_GLOBAL__sub_I__ZN12BatteryCheckC2Efl+0x38>)
static FuelGauge fuel;
 8081d62:	4d0d      	ldr	r5, [pc, #52]	; (8081d98 <_GLOBAL__sub_I__ZN12BatteryCheckC2Efl+0x3c>)
 8081d64:	601c      	str	r4, [r3, #0]
 8081d66:	4621      	mov	r1, r4
 8081d68:	4e0c      	ldr	r6, [pc, #48]	; (8081d9c <_GLOBAL__sub_I__ZN12BatteryCheckC2Efl+0x40>)
 8081d6a:	4628      	mov	r0, r5
 8081d6c:	f005 f83a 	bl	8086de4 <_ZN9FuelGaugeC1Eb>
 8081d70:	4628      	mov	r0, r5
static PMIC pmic;
 8081d72:	4d0b      	ldr	r5, [pc, #44]	; (8081da0 <_GLOBAL__sub_I__ZN12BatteryCheckC2Efl+0x44>)
static FuelGauge fuel;
 8081d74:	4632      	mov	r2, r6
 8081d76:	490b      	ldr	r1, [pc, #44]	; (8081da4 <_GLOBAL__sub_I__ZN12BatteryCheckC2Efl+0x48>)
 8081d78:	f006 fbbc 	bl	80884f4 <__aeabi_atexit>
static PMIC pmic;
 8081d7c:	4621      	mov	r1, r4
 8081d7e:	4628      	mov	r0, r5
 8081d80:	f003 fa5d 	bl	808523e <_ZN4PMICC1Eb>
 8081d84:	4632      	mov	r2, r6
 8081d86:	4628      	mov	r0, r5
}
 8081d88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
static PMIC pmic;
 8081d8c:	4906      	ldr	r1, [pc, #24]	; (8081da8 <_GLOBAL__sub_I__ZN12BatteryCheckC2Efl+0x4c>)
 8081d8e:	f006 bbb1 	b.w	80884f4 <__aeabi_atexit>
 8081d92:	bf00      	nop
 8081d94:	200002d0 	.word	0x200002d0
 8081d98:	200002d4 	.word	0x200002d4
 8081d9c:	20000130 	.word	0x20000130
 8081da0:	200002dc 	.word	0x200002dc
 8081da4:	08086e03 	.word	0x08086e03
 8081da8:	0808525d 	.word	0x0808525d

08081dac <_ZN6TesterD1Ev>:
}


Tester::~Tester() {

}
 8081dac:	4770      	bx	lr

08081dae <_ZN6TesterD0Ev>:
Tester::~Tester() {
 8081dae:	b510      	push	{r4, lr}
 8081db0:	4604      	mov	r4, r0
}
 8081db2:	211c      	movs	r1, #28
 8081db4:	f006 fba3 	bl	80884fe <_ZdlPvj>
 8081db8:	4620      	mov	r0, r4
 8081dba:	bd10      	pop	{r4, pc}

08081dbc <_ZN6Tester15functionHandlerE6String>:

// This is the function registered with Particle.function(). Just copy the data and return so
// the successful response can be returned to the caller. Since we do things like reset, or
// enter an infinite loop, or sleep, doing this right from the callback causes the caller to
// time out because the response will never be received.
int Tester::functionHandler(String argStr) {
 8081dbc:	b510      	push	{r4, lr}
 8081dbe:	4604      	mov	r4, r0
	// Process this in loop so the function won't time out
	functionData = strdup(argStr.c_str());
 8081dc0:	6808      	ldr	r0, [r1, #0]
 8081dc2:	f008 ffc7 	bl	808ad54 <strdup>
 8081dc6:	60e0      	str	r0, [r4, #12]

	return 0;
}
 8081dc8:	2000      	movs	r0, #0
 8081dca:	bd10      	pop	{r4, pc}

08081dcc <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM6TesterFiS0_EPS3_St12_PlaceholderILi1EEEEE9_M_invokeERKSt9_Any_dataOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8081dcc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	    return __source._M_access<_Functor*>();
 8081dce:	6802      	ldr	r2, [r0, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
 8081dd0:	6853      	ldr	r3, [r2, #4]
 8081dd2:	6890      	ldr	r0, [r2, #8]
 8081dd4:	105e      	asrs	r6, r3, #1
 8081dd6:	eb00 0563 	add.w	r5, r0, r3, asr #1
 8081dda:	07db      	lsls	r3, r3, #31
 8081ddc:	6814      	ldr	r4, [r2, #0]
 8081dde:	bf48      	it	mi
 8081de0:	5983      	ldrmi	r3, [r0, r6]
 8081de2:	4668      	mov	r0, sp
 8081de4:	bf48      	it	mi
 8081de6:	591c      	ldrmi	r4, [r3, r4]
 8081de8:	f003 fc72 	bl	80856d0 <_ZN6StringC1EOS_>
 8081dec:	4669      	mov	r1, sp
 8081dee:	4628      	mov	r0, r5
 8081df0:	47a0      	blx	r4
 8081df2:	4604      	mov	r4, r0
 8081df4:	4668      	mov	r0, sp
 8081df6:	f003 fbf1 	bl	80855dc <_ZN6StringD1Ev>
      }
 8081dfa:	4620      	mov	r0, r4
 8081dfc:	b004      	add	sp, #16
 8081dfe:	bd70      	pop	{r4, r5, r6, pc}

08081e00 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM6TesterFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
 8081e00:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8081e02:	b538      	push	{r3, r4, r5, lr}
 8081e04:	4604      	mov	r4, r0
	switch (__op)
 8081e06:	d102      	bne.n	8081e0e <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM6TesterFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
 8081e08:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
 8081e0a:	6023      	str	r3, [r4, #0]
	}
 8081e0c:	e003      	b.n	8081e16 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM6TesterFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
	  switch (__op)
 8081e0e:	2a02      	cmp	r2, #2
 8081e10:	d003      	beq.n	8081e1a <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM6TesterFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1a>
 8081e12:	2a03      	cmp	r2, #3
 8081e14:	d00d      	beq.n	8081e32 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM6TesterFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x32>
      }
 8081e16:	2000      	movs	r0, #0
 8081e18:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 8081e1a:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
 8081e1c:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 8081e1e:	f7fe f94c 	bl	80800ba <_Znwj>
 8081e22:	4603      	mov	r3, r0
 8081e24:	2800      	cmp	r0, #0
 8081e26:	d0f0      	beq.n	8081e0a <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM6TesterFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xa>
 8081e28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8081e2c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8081e30:	e7eb      	b.n	8081e0a <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM6TesterFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
 8081e32:	6800      	ldr	r0, [r0, #0]
 8081e34:	2800      	cmp	r0, #0
 8081e36:	d0ee      	beq.n	8081e16 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM6TesterFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 8081e38:	210c      	movs	r1, #12
 8081e3a:	f006 fb60 	bl	80884fe <_ZdlPvj>
 8081e3e:	e7ea      	b.n	8081e16 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM6TesterFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>

08081e40 <_ZN6TesterC1EPKci>:
	functionName(functionName), sleepTestPin(sleepTestPin) {
 8081e40:	6082      	str	r2, [r0, #8]
 8081e42:	2200      	movs	r2, #0
Tester::Tester(const char *functionName, int sleepTestPin) :
 8081e44:	b510      	push	{r4, lr}
	functionName(functionName), sleepTestPin(sleepTestPin) {
 8081e46:	4c04      	ldr	r4, [pc, #16]	; (8081e58 <_ZN6TesterC1EPKci+0x18>)
 8081e48:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8081e4c:	e9c0 4100 	strd	r4, r1, [r0]
 8081e50:	e9c0 2205 	strd	r2, r2, [r0, #20]
}
 8081e54:	bd10      	pop	{r4, pc}
 8081e56:	bf00      	nop
 8081e58:	0808b6f0 	.word	0x0808b6f0

08081e5c <_ZN6Tester5setupEv>:
void Tester::setup() {
 8081e5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    _Function_base() : _M_manager(nullptr) { }
 8081e5e:	2400      	movs	r4, #0
 8081e60:	4605      	mov	r5, r0
 8081e62:	6846      	ldr	r6, [r0, #4]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081e64:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
 8081e66:	9402      	str	r4, [sp, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081e68:	f7fe f927 	bl	80800ba <_Znwj>
 8081e6c:	b118      	cbz	r0, 8081e76 <_ZN6Tester5setupEv+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
 8081e6e:	4b18      	ldr	r3, [pc, #96]	; (8081ed0 <_ZN6Tester5setupEv+0x74>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8081e70:	6085      	str	r5, [r0, #8]
 8081e72:	e9c0 3400 	strd	r3, r4, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
 8081e76:	4b17      	ldr	r3, [pc, #92]	; (8081ed4 <_ZN6Tester5setupEv+0x78>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081e78:	9000      	str	r0, [sp, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 8081e7a:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 8081e7c:	4b16      	ldr	r3, [pc, #88]	; (8081ed8 <_ZN6Tester5setupEv+0x7c>)
            auto wrapper = new user_std_function_int_str_t(func);
 8081e7e:	2010      	movs	r0, #16
 8081e80:	9302      	str	r3, [sp, #8]
 8081e82:	f7fe f91a 	bl	80800ba <_Znwj>
 8081e86:	4604      	mov	r4, r0
 8081e88:	b178      	cbz	r0, 8081eaa <_ZN6Tester5setupEv+0x4e>
    _Function_base() : _M_manager(nullptr) { }
 8081e8a:	2300      	movs	r3, #0
 8081e8c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 8081e8e:	9b02      	ldr	r3, [sp, #8]
      if (static_cast<bool>(__x))
 8081e90:	b133      	cbz	r3, 8081ea0 <_ZN6Tester5setupEv+0x44>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8081e92:	2202      	movs	r2, #2
 8081e94:	4669      	mov	r1, sp
 8081e96:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8081e98:	9b03      	ldr	r3, [sp, #12]
 8081e9a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8081e9c:	9b02      	ldr	r3, [sp, #8]
 8081e9e:	60a3      	str	r3, [r4, #8]
                success = register_function(call_std_user_function, wrapper, funcKey);
 8081ea0:	4632      	mov	r2, r6
 8081ea2:	4621      	mov	r1, r4
 8081ea4:	480d      	ldr	r0, [pc, #52]	; (8081edc <_ZN6Tester5setupEv+0x80>)
 8081ea6:	f005 f972 	bl	808718e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
      if (_M_manager)
 8081eaa:	9b02      	ldr	r3, [sp, #8]
 8081eac:	b11b      	cbz	r3, 8081eb6 <_ZN6Tester5setupEv+0x5a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8081eae:	4669      	mov	r1, sp
 8081eb0:	2203      	movs	r2, #3
 8081eb2:	4608      	mov	r0, r1
 8081eb4:	4798      	blx	r3
	if (sleepTestPin >= 0) {
 8081eb6:	68a8      	ldr	r0, [r5, #8]
 8081eb8:	2800      	cmp	r0, #0
 8081eba:	db06      	blt.n	8081eca <_ZN6Tester5setupEv+0x6e>
		pinMode(sleepTestPin, INPUT_PULLUP);
 8081ebc:	2102      	movs	r1, #2
 8081ebe:	b280      	uxth	r0, r0
}
 8081ec0:	b004      	add	sp, #16
 8081ec2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		pinMode(sleepTestPin, INPUT_PULLUP);
 8081ec6:	f006 b9cd 	b.w	8088264 <pinMode>
}
 8081eca:	b004      	add	sp, #16
 8081ecc:	bd70      	pop	{r4, r5, r6, pc}
 8081ece:	bf00      	nop
 8081ed0:	08081dbd 	.word	0x08081dbd
 8081ed4:	08081dcd 	.word	0x08081dcd
 8081ed8:	08081e01 	.word	0x08081e01
 8081edc:	0808714b 	.word	0x0808714b

08081ee0 <_ZN6Tester14processOptionsEPc>:

// This does the actual work from the Particle.function(). It's called from looo().
void Tester::processOptions(char *mutableData) {
 8081ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081ee2:	4605      	mov	r5, r0
 8081ee4:	b08d      	sub	sp, #52	; 0x34
 8081ee6:	4608      	mov	r0, r1
	// Parse argument into space-separated fields
	const char *argv[MAX_ARGS];
	size_t argc = 0;

	char *cp = strtok(mutableData, " ");
 8081ee8:	498a      	ldr	r1, [pc, #552]	; (8082114 <_ZN6Tester14processOptionsEPc+0x234>)
 8081eea:	f008 ff91 	bl	808ae10 <strtok>
	size_t argc = 0;
 8081eee:	2400      	movs	r4, #0
	while(cp && argc < MAX_ARGS) {
		argv[argc++] = cp;
		cp = strtok(NULL, " ");
 8081ef0:	4f88      	ldr	r7, [pc, #544]	; (8082114 <_ZN6Tester14processOptionsEPc+0x234>)
 8081ef2:	ae07      	add	r6, sp, #28
	while(cp && argc < MAX_ARGS) {
 8081ef4:	b148      	cbz	r0, 8081f0a <_ZN6Tester14processOptionsEPc+0x2a>
 8081ef6:	2c05      	cmp	r4, #5
 8081ef8:	d009      	beq.n	8081f0e <_ZN6Tester14processOptionsEPc+0x2e>
		argv[argc++] = cp;
 8081efa:	f846 0b04 	str.w	r0, [r6], #4
		cp = strtok(NULL, " ");
 8081efe:	4639      	mov	r1, r7
 8081f00:	2000      	movs	r0, #0
		argv[argc++] = cp;
 8081f02:	3401      	adds	r4, #1
		cp = strtok(NULL, " ");
 8081f04:	f008 ff84 	bl	808ae10 <strtok>
	while(cp && argc < MAX_ARGS) {
 8081f08:	e7f4      	b.n	8081ef4 <_ZN6Tester14processOptionsEPc+0x14>
	}
	if (argc == 0) {
 8081f0a:	2c00      	cmp	r4, #0
 8081f0c:	d04a      	beq.n	8081fa4 <_ZN6Tester14processOptionsEPc+0xc4>
		return;
	}

	// Delay a bit here to make sure the function result is returned, otherwise if we
	// immediately go to sleep the function may return a timeout error.
	delay(500);
 8081f0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8081f12:	f004 ff37 	bl	8086d84 <delay>

	// Process options here
	if (strcmp(argv[0], "reset") == 0) {
 8081f16:	9e07      	ldr	r6, [sp, #28]
 8081f18:	497f      	ldr	r1, [pc, #508]	; (8082118 <_ZN6Tester14processOptionsEPc+0x238>)
 8081f1a:	4630      	mov	r0, r6
 8081f1c:	f008 ff07 	bl	808ad2e <strcmp>
 8081f20:	b940      	cbnz	r0, 8081f34 <_ZN6Tester14processOptionsEPc+0x54>
		ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_TESTER_RESET);
 8081f22:	2100      	movs	r1, #0
 8081f24:	200a      	movs	r0, #10
 8081f26:	f000 fe87 	bl	8082c38 <_ZN16ConnectionEvents8addEventEii>
			pingInterval = 0;
		}

	}

}
 8081f2a:	b00d      	add	sp, #52	; 0x34
 8081f2c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		System.reset();
 8081f30:	f003 bab3 	b.w	808549a <_ZN11SystemClass5resetEv>
	if (strcmp(argv[0], "modemReset") == 0) {
 8081f34:	4979      	ldr	r1, [pc, #484]	; (808211c <_ZN6Tester14processOptionsEPc+0x23c>)
 8081f36:	4630      	mov	r0, r6
 8081f38:	f008 fef9 	bl	808ad2e <strcmp>
 8081f3c:	4601      	mov	r1, r0
 8081f3e:	b960      	cbnz	r0, 8081f5a <_ZN6Tester14processOptionsEPc+0x7a>

	static inline ConnectionCheck *getInstance() { return instance; };
 8081f40:	4c77      	ldr	r4, [pc, #476]	; (8082120 <_ZN6Tester14processOptionsEPc+0x240>)
		if (ConnectionCheck::getInstance()) {
 8081f42:	6823      	ldr	r3, [r4, #0]
 8081f44:	2b00      	cmp	r3, #0
 8081f46:	d0ec      	beq.n	8081f22 <_ZN6Tester14processOptionsEPc+0x42>
			ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_TESTER_RESET_MODEM);
 8081f48:	2011      	movs	r0, #17
 8081f4a:	f000 fe75 	bl	8082c38 <_ZN16ConnectionEvents8addEventEii>
			ConnectionCheck::getInstance()->fullModemReset();
 8081f4e:	6820      	ldr	r0, [r4, #0]
}
 8081f50:	b00d      	add	sp, #52	; 0x34
 8081f52:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			ConnectionCheck::getInstance()->fullModemReset();
 8081f56:	f000 b9a5 	b.w	80822a4 <_ZN15ConnectionCheck14fullModemResetEv>
	if (strcmp(argv[0], "resetSession") == 0) {
 8081f5a:	4972      	ldr	r1, [pc, #456]	; (8082124 <_ZN6Tester14processOptionsEPc+0x244>)
 8081f5c:	4630      	mov	r0, r6
 8081f5e:	f008 fee6 	bl	808ad2e <strcmp>
 8081f62:	4601      	mov	r1, r0
 8081f64:	bb00      	cbnz	r0, 8081fa8 <_ZN6Tester14processOptionsEPc+0xc8>
		ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_TESTER_RESET_SESSION);
 8081f66:	2010      	movs	r0, #16
 8081f68:	f000 fe66 	bl	8082c38 <_ZN16ConnectionEvents8addEventEii>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 8081f6c:	4b6e      	ldr	r3, [pc, #440]	; (8082128 <_ZN6Tester14processOptionsEPc+0x248>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8081f6e:	4a6f      	ldr	r2, [pc, #444]	; (808212c <_ZN6Tester14processOptionsEPc+0x24c>)
 8081f70:	781b      	ldrb	r3, [r3, #0]
 8081f72:	496f      	ldr	r1, [pc, #444]	; (8082130 <_ZN6Tester14processOptionsEPc+0x250>)
 8081f74:	f88d 3000 	strb.w	r3, [sp]
 8081f78:	a805      	add	r0, sp, #20
 8081f7a:	233c      	movs	r3, #60	; 0x3c
 8081f7c:	f005 fa18 	bl	80873b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
 8081f80:	9c06      	ldr	r4, [sp, #24]
 8081f82:	b17c      	cbz	r4, 8081fa4 <_ZN6Tester14processOptionsEPc+0xc4>
      if (--_M_use_count == 0)
 8081f84:	6863      	ldr	r3, [r4, #4]
 8081f86:	3b01      	subs	r3, #1
 8081f88:	6063      	str	r3, [r4, #4]
 8081f8a:	b95b      	cbnz	r3, 8081fa4 <_ZN6Tester14processOptionsEPc+0xc4>
          _M_dispose();
 8081f8c:	6823      	ldr	r3, [r4, #0]
 8081f8e:	4620      	mov	r0, r4
 8081f90:	689b      	ldr	r3, [r3, #8]
 8081f92:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8081f94:	68a3      	ldr	r3, [r4, #8]
 8081f96:	3b01      	subs	r3, #1
 8081f98:	60a3      	str	r3, [r4, #8]
 8081f9a:	b91b      	cbnz	r3, 8081fa4 <_ZN6Tester14processOptionsEPc+0xc4>
            _M_destroy();
 8081f9c:	6823      	ldr	r3, [r4, #0]
 8081f9e:	4620      	mov	r0, r4
 8081fa0:	68db      	ldr	r3, [r3, #12]
 8081fa2:	4798      	blx	r3
}
 8081fa4:	b00d      	add	sp, #52	; 0x34
 8081fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (strcmp(argv[0], "safeMode") == 0) {
 8081fa8:	4630      	mov	r0, r6
 8081faa:	4962      	ldr	r1, [pc, #392]	; (8082134 <_ZN6Tester14processOptionsEPc+0x254>)
 8081fac:	f008 febf 	bl	808ad2e <strcmp>
 8081fb0:	4607      	mov	r7, r0
 8081fb2:	b948      	cbnz	r0, 8081fc8 <_ZN6Tester14processOptionsEPc+0xe8>
		ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_TESTER_SAFE_MODE);
 8081fb4:	4601      	mov	r1, r0
 8081fb6:	2013      	movs	r0, #19
 8081fb8:	f000 fe3e 	bl	8082c38 <_ZN16ConnectionEvents8addEventEii>
		System.enterSafeMode();
 8081fbc:	4638      	mov	r0, r7
}
 8081fbe:	b00d      	add	sp, #52	; 0x34
 8081fc0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		System.enterSafeMode();
 8081fc4:	f003 ba6c 	b.w	80854a0 <_ZN11SystemClass13enterSafeModeEN8particle5FlagsI19SystemResetFlagTypemEE>
	if (strcmp(argv[0], "appWatchdog") == 0) {
 8081fc8:	495b      	ldr	r1, [pc, #364]	; (8082138 <_ZN6Tester14processOptionsEPc+0x258>)
 8081fca:	4630      	mov	r0, r6
 8081fcc:	f008 feaf 	bl	808ad2e <strcmp>
 8081fd0:	4601      	mov	r1, r0
 8081fd2:	b918      	cbnz	r0, 8081fdc <_ZN6Tester14processOptionsEPc+0xfc>
		ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_TESTER_APP_WATCHDOG, 0);
 8081fd4:	200b      	movs	r0, #11
 8081fd6:	f000 fe2f 	bl	8082c38 <_ZN16ConnectionEvents8addEventEii>
		while(true) {
 8081fda:	e7fe      	b.n	8081fda <_ZN6Tester14processOptionsEPc+0xfa>
	if (strcmp(argv[0], "sleep") == 0 && argc >= 2) {
 8081fdc:	4630      	mov	r0, r6
 8081fde:	4957      	ldr	r1, [pc, #348]	; (808213c <_ZN6Tester14processOptionsEPc+0x25c>)
 8081fe0:	f008 fea5 	bl	808ad2e <strcmp>
 8081fe4:	2800      	cmp	r0, #0
 8081fe6:	d173      	bne.n	80820d0 <_ZN6Tester14processOptionsEPc+0x1f0>
 8081fe8:	2c01      	cmp	r4, #1
 8081fea:	d071      	beq.n	80820d0 <_ZN6Tester14processOptionsEPc+0x1f0>
		if (argc >= 3) {
 8081fec:	2c02      	cmp	r4, #2
 8081fee:	d112      	bne.n	8082016 <_ZN6Tester14processOptionsEPc+0x136>
		int duration = 30;
 8081ff0:	241e      	movs	r4, #30
		ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_TESTER_SLEEP, duration);
 8081ff2:	4621      	mov	r1, r4
 8081ff4:	200c      	movs	r0, #12
 8081ff6:	f000 fe1f 	bl	8082c38 <_ZN16ConnectionEvents8addEventEii>
		if (strcmp(argv[1], "wlan") == 0) {
 8081ffa:	9e08      	ldr	r6, [sp, #32]
 8081ffc:	4950      	ldr	r1, [pc, #320]	; (8082140 <_ZN6Tester14processOptionsEPc+0x260>)
 8081ffe:	4630      	mov	r0, r6
 8082000:	f008 fe95 	bl	808ad2e <strcmp>
 8082004:	4601      	mov	r1, r0
 8082006:	b968      	cbnz	r0, 8082024 <_ZN6Tester14processOptionsEPc+0x144>
			System.sleep(SLEEP_MODE_WLAN, duration, SLEEP_DISABLE_WKP_PIN);
 8082008:	4622      	mov	r2, r4
 808200a:	4b4e      	ldr	r3, [pc, #312]	; (8082144 <_ZN6Tester14processOptionsEPc+0x264>)
 808200c:	681b      	ldr	r3, [r3, #0]
			System.sleep(SLEEP_MODE_DEEP, duration, SLEEP_DISABLE_WKP_PIN);
 808200e:	a805      	add	r0, sp, #20
 8082010:	f003 fa52 	bl	80854b8 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
 8082014:	e7c6      	b.n	8081fa4 <_ZN6Tester14processOptionsEPc+0xc4>
			duration = atoi(argv[2]);
 8082016:	9809      	ldr	r0, [sp, #36]	; 0x24
 8082018:	f008 fdfe 	bl	808ac18 <atoi>
			if (duration == 0) {
 808201c:	4604      	mov	r4, r0
 808201e:	2800      	cmp	r0, #0
 8082020:	d0e6      	beq.n	8081ff0 <_ZN6Tester14processOptionsEPc+0x110>
 8082022:	e7e6      	b.n	8081ff2 <_ZN6Tester14processOptionsEPc+0x112>
		if (strcmp(argv[1], "deep") == 0) {
 8082024:	4630      	mov	r0, r6
 8082026:	4948      	ldr	r1, [pc, #288]	; (8082148 <_ZN6Tester14processOptionsEPc+0x268>)
 8082028:	f008 fe81 	bl	808ad2e <strcmp>
 808202c:	b920      	cbnz	r0, 8082038 <_ZN6Tester14processOptionsEPc+0x158>
			System.sleep(SLEEP_MODE_DEEP, duration, SLEEP_DISABLE_WKP_PIN);
 808202e:	4b45      	ldr	r3, [pc, #276]	; (8082144 <_ZN6Tester14processOptionsEPc+0x264>)
 8082030:	681b      	ldr	r3, [r3, #0]
 8082032:	4622      	mov	r2, r4
 8082034:	2101      	movs	r1, #1
 8082036:	e7ea      	b.n	808200e <_ZN6Tester14processOptionsEPc+0x12e>
		if (strcmp(argv[1], "deepStandby") == 0) {
 8082038:	4630      	mov	r0, r6
 808203a:	4944      	ldr	r1, [pc, #272]	; (808214c <_ZN6Tester14processOptionsEPc+0x26c>)
 808203c:	f008 fe77 	bl	808ad2e <strcmp>
 8082040:	b928      	cbnz	r0, 808204e <_ZN6Tester14processOptionsEPc+0x16e>
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
 8082042:	4b40      	ldr	r3, [pc, #256]	; (8082144 <_ZN6Tester14processOptionsEPc+0x264>)
 8082044:	681a      	ldr	r2, [r3, #0]
 8082046:	4b42      	ldr	r3, [pc, #264]	; (8082150 <_ZN6Tester14processOptionsEPc+0x270>)
 8082048:	681b      	ldr	r3, [r3, #0]
			System.sleep(SLEEP_MODE_DEEP, duration, SLEEP_NETWORK_STANDBY | SLEEP_DISABLE_WKP_PIN);
 808204a:	4313      	orrs	r3, r2
 808204c:	e7f1      	b.n	8082032 <_ZN6Tester14processOptionsEPc+0x152>
		if (strcmp(argv[1], "stop") == 0) {
 808204e:	4630      	mov	r0, r6
 8082050:	4940      	ldr	r1, [pc, #256]	; (8082154 <_ZN6Tester14processOptionsEPc+0x274>)
 8082052:	f008 fe6c 	bl	808ad2e <strcmp>
 8082056:	4607      	mov	r7, r0
 8082058:	b9d8      	cbnz	r0, 8082092 <_ZN6Tester14processOptionsEPc+0x1b2>
			if (sleepTestPin >= 0) {
 808205a:	68ab      	ldr	r3, [r5, #8]
 808205c:	2b00      	cmp	r3, #0
 808205e:	dba1      	blt.n	8081fa4 <_ZN6Tester14processOptionsEPc+0xc4>
				System.sleep(sleepTestPin, FALLING, duration);
 8082060:	4a3d      	ldr	r2, [pc, #244]	; (8082158 <_ZN6Tester14processOptionsEPc+0x278>)
 8082062:	f8ad 3012 	strh.w	r3, [sp, #18]
 8082066:	6812      	ldr	r2, [r2, #0]
inline ValueT particle::Flag<TagT, ValueT>::value() const {
 8082068:	2302      	movs	r3, #2
        return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag);
 808206a:	e9cd 4201 	strd	r4, r2, [sp, #4]
 808206e:	2201      	movs	r2, #1
 8082070:	f88d 3011 	strb.w	r3, [sp, #17]
 8082074:	f10d 0112 	add.w	r1, sp, #18
 8082078:	9200      	str	r2, [sp, #0]
 808207a:	f10d 0311 	add.w	r3, sp, #17
 808207e:	a805      	add	r0, sp, #20
 8082080:	f003 fa56 	bl	8085530 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
				ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_STOP_SLEEP_WAKE, 0);
 8082084:	4639      	mov	r1, r7
				ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_STOP_SLEEP_WAKE, 0);
 8082086:	2015      	movs	r0, #21
}
 8082088:	b00d      	add	sp, #52	; 0x34
 808208a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
				ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_STOP_SLEEP_WAKE, 0);
 808208e:	f000 bdd3 	b.w	8082c38 <_ZN16ConnectionEvents8addEventEii>
		if (strcmp(argv[1], "stopStandby") == 0) {
 8082092:	4630      	mov	r0, r6
 8082094:	4931      	ldr	r1, [pc, #196]	; (808215c <_ZN6Tester14processOptionsEPc+0x27c>)
 8082096:	f008 fe4a 	bl	808ad2e <strcmp>
 808209a:	4606      	mov	r6, r0
 808209c:	2800      	cmp	r0, #0
 808209e:	d181      	bne.n	8081fa4 <_ZN6Tester14processOptionsEPc+0xc4>
			if (sleepTestPin >= 0) {
 80820a0:	68ab      	ldr	r3, [r5, #8]
 80820a2:	2b00      	cmp	r3, #0
 80820a4:	f6ff af7e 	blt.w	8081fa4 <_ZN6Tester14processOptionsEPc+0xc4>
				System.sleep(sleepTestPin, FALLING, duration, SLEEP_NETWORK_STANDBY);
 80820a8:	4a29      	ldr	r2, [pc, #164]	; (8082150 <_ZN6Tester14processOptionsEPc+0x270>)
 80820aa:	f8ad 3012 	strh.w	r3, [sp, #18]
 80820ae:	6812      	ldr	r2, [r2, #0]
 80820b0:	2302      	movs	r3, #2
 80820b2:	e9cd 4201 	strd	r4, r2, [sp, #4]
 80820b6:	2201      	movs	r2, #1
 80820b8:	f88d 3011 	strb.w	r3, [sp, #17]
 80820bc:	f10d 0112 	add.w	r1, sp, #18
 80820c0:	9200      	str	r2, [sp, #0]
 80820c2:	f10d 0311 	add.w	r3, sp, #17
 80820c6:	a805      	add	r0, sp, #20
 80820c8:	f003 fa32 	bl	8085530 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
				ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_STOP_SLEEP_WAKE, 0);
 80820cc:	4631      	mov	r1, r6
 80820ce:	e7da      	b.n	8082086 <_ZN6Tester14processOptionsEPc+0x1a6>
	if (strcmp(argv[0], "ping") == 0 && argc >= 2) {
 80820d0:	4630      	mov	r0, r6
 80820d2:	4923      	ldr	r1, [pc, #140]	; (8082160 <_ZN6Tester14processOptionsEPc+0x280>)
 80820d4:	f008 fe2b 	bl	808ad2e <strcmp>
 80820d8:	2800      	cmp	r0, #0
 80820da:	f47f af63 	bne.w	8081fa4 <_ZN6Tester14processOptionsEPc+0xc4>
 80820de:	2c01      	cmp	r4, #1
 80820e0:	f43f af60 	beq.w	8081fa4 <_ZN6Tester14processOptionsEPc+0xc4>
		if (strcmp(argv[1], "start") == 0) {
 80820e4:	9e08      	ldr	r6, [sp, #32]
 80820e6:	491f      	ldr	r1, [pc, #124]	; (8082164 <_ZN6Tester14processOptionsEPc+0x284>)
 80820e8:	4630      	mov	r0, r6
 80820ea:	f008 fe20 	bl	808ad2e <strcmp>
 80820ee:	b948      	cbnz	r0, 8082104 <_ZN6Tester14processOptionsEPc+0x224>
			if (argc >= 3) {
 80820f0:	2c02      	cmp	r4, #2
 80820f2:	d004      	beq.n	80820fe <_ZN6Tester14processOptionsEPc+0x21e>
				pingInterval = (unsigned long) atoi(argv[2]);
 80820f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80820f6:	f008 fd8f 	bl	808ac18 <atoi>
			pingInterval = 0;
 80820fa:	6168      	str	r0, [r5, #20]
 80820fc:	e752      	b.n	8081fa4 <_ZN6Tester14processOptionsEPc+0xc4>
				pingInterval = 30;
 80820fe:	231e      	movs	r3, #30
 8082100:	616b      	str	r3, [r5, #20]
 8082102:	e74f      	b.n	8081fa4 <_ZN6Tester14processOptionsEPc+0xc4>
		if (strcmp(argv[1], "stop") == 0) {
 8082104:	4630      	mov	r0, r6
 8082106:	4913      	ldr	r1, [pc, #76]	; (8082154 <_ZN6Tester14processOptionsEPc+0x274>)
 8082108:	f008 fe11 	bl	808ad2e <strcmp>
 808210c:	2800      	cmp	r0, #0
 808210e:	f47f af49 	bne.w	8081fa4 <_ZN6Tester14processOptionsEPc+0xc4>
 8082112:	e7f2      	b.n	80820fa <_ZN6Tester14processOptionsEPc+0x21a>
 8082114:	0808bbde 	.word	0x0808bbde
 8082118:	0808b664 	.word	0x0808b664
 808211c:	0808b66a 	.word	0x0808b66a
 8082120:	200002f8 	.word	0x200002f8
 8082124:	0808b675 	.word	0x0808b675
 8082128:	200002ec 	.word	0x200002ec
 808212c:	0808b70c 	.word	0x0808b70c
 8082130:	0808b682 	.word	0x0808b682
 8082134:	0808b69b 	.word	0x0808b69b
 8082138:	0808b6a4 	.word	0x0808b6a4
 808213c:	0808b6b0 	.word	0x0808b6b0
 8082140:	0808b6b6 	.word	0x0808b6b6
 8082144:	200002e4 	.word	0x200002e4
 8082148:	0808b6bb 	.word	0x0808b6bb
 808214c:	0808b6c0 	.word	0x0808b6c0
 8082150:	200002e8 	.word	0x200002e8
 8082154:	0808b6cc 	.word	0x0808b6cc
 8082158:	200002e0 	.word	0x200002e0
 808215c:	0808b6d1 	.word	0x0808b6d1
 8082160:	0808b6dd 	.word	0x0808b6dd
 8082164:	0808b6e2 	.word	0x0808b6e2

08082168 <_ZN6Tester4loopEv>:
void Tester::loop() {
 8082168:	b510      	push	{r4, lr}
	if (functionData) {
 808216a:	68c1      	ldr	r1, [r0, #12]
void Tester::loop() {
 808216c:	4604      	mov	r4, r0
	if (functionData) {
 808216e:	b131      	cbz	r1, 808217e <_ZN6Tester4loopEv+0x16>
		processOptions(functionData);
 8082170:	f7ff feb6 	bl	8081ee0 <_ZN6Tester14processOptionsEPc>
		free(functionData);
 8082174:	68e0      	ldr	r0, [r4, #12]
 8082176:	f003 f80b 	bl	8085190 <free>
		functionData = NULL;
 808217a:	2300      	movs	r3, #0
 808217c:	60e3      	str	r3, [r4, #12]
	if (pingInterval > 0) {
 808217e:	6963      	ldr	r3, [r4, #20]
 8082180:	2b00      	cmp	r3, #0
 8082182:	dd14      	ble.n	80821ae <_ZN6Tester4loopEv+0x46>
 8082184:	f002 fcc4 	bl	8084b10 <HAL_Timer_Get_Milli_Seconds>
		if (millis() - lastPing >= (unsigned long) (pingInterval * 1000)) {
 8082188:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 808218c:	6923      	ldr	r3, [r4, #16]
 808218e:	1ac0      	subs	r0, r0, r3
 8082190:	6963      	ldr	r3, [r4, #20]
 8082192:	4353      	muls	r3, r2
 8082194:	4298      	cmp	r0, r3
 8082196:	d30a      	bcc.n	80821ae <_ZN6Tester4loopEv+0x46>
 8082198:	f002 fcba 	bl	8084b10 <HAL_Timer_Get_Milli_Seconds>
			ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_TESTER_PING, ++pingCounter);
 808219c:	69a1      	ldr	r1, [r4, #24]
			lastPing = millis();
 808219e:	6120      	str	r0, [r4, #16]
			ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_TESTER_PING, ++pingCounter);
 80821a0:	3101      	adds	r1, #1
 80821a2:	61a1      	str	r1, [r4, #24]
 80821a4:	2014      	movs	r0, #20
}
 80821a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_TESTER_PING, ++pingCounter);
 80821aa:	f000 bd45 	b.w	8082c38 <_ZN16ConnectionEvents8addEventEii>
}
 80821ae:	bd10      	pop	{r4, pc}

080821b0 <_GLOBAL__sub_I__ZN6TesterC2EPKci>:
        val_(val) {
 80821b0:	2200      	movs	r2, #0
 80821b2:	4b05      	ldr	r3, [pc, #20]	; (80821c8 <_GLOBAL__sub_I__ZN6TesterC2EPKci+0x18>)
 80821b4:	2102      	movs	r1, #2
 80821b6:	601a      	str	r2, [r3, #0]
 80821b8:	2301      	movs	r3, #1
 80821ba:	4a04      	ldr	r2, [pc, #16]	; (80821cc <_GLOBAL__sub_I__ZN6TesterC2EPKci+0x1c>)
 80821bc:	6013      	str	r3, [r2, #0]
 80821be:	4a04      	ldr	r2, [pc, #16]	; (80821d0 <_GLOBAL__sub_I__ZN6TesterC2EPKci+0x20>)
 80821c0:	6011      	str	r1, [r2, #0]
 80821c2:	4a04      	ldr	r2, [pc, #16]	; (80821d4 <_GLOBAL__sub_I__ZN6TesterC2EPKci+0x24>)
 80821c4:	7013      	strb	r3, [r2, #0]
}
 80821c6:	4770      	bx	lr
 80821c8:	200002e0 	.word	0x200002e0
 80821cc:	200002e8 	.word	0x200002e8
 80821d0:	200002e4 	.word	0x200002e4
 80821d4:	200002ec 	.word	0x200002ec

080821d8 <_ZN15ConnectionCheckD1Ev>:
		connectionCheckRetainedData.numFailures = 0;
	}
}
ConnectionCheck::~ConnectionCheck() {

}
 80821d8:	4770      	bx	lr

080821da <_ZN15ConnectionCheckD0Ev>:
ConnectionCheck::~ConnectionCheck() {
 80821da:	b510      	push	{r4, lr}
 80821dc:	4604      	mov	r4, r0
}
 80821de:	2120      	movs	r1, #32
 80821e0:	f006 f98d 	bl	80884fe <_ZdlPvj>
 80821e4:	4620      	mov	r0, r4
 80821e6:	bd10      	pop	{r4, pc}

080821e8 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 80821e8:	b40e      	push	{r1, r2, r3}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 80821ea:	f04f 0c20 	mov.w	ip, #32
 80821ee:	2300      	movs	r3, #0
inline void spark::Logger::info(const char *fmt, ...) const {
 80821f0:	b500      	push	{lr}
 80821f2:	b08c      	sub	sp, #48	; 0x30
 80821f4:	aa0d      	add	r2, sp, #52	; 0x34
 80821f6:	f852 1b04 	ldr.w	r1, [r2], #4
    attr.flags = 0;
 80821fa:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80821fe:	e9cd 1200 	strd	r1, r2, [sp]
    va_start(args, fmt);
 8082202:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8082204:	6801      	ldr	r1, [r0, #0]
 8082206:	aa04      	add	r2, sp, #16
 8082208:	201e      	movs	r0, #30
 808220a:	f002 fe79 	bl	8084f00 <log_message_v>
}
 808220e:	b00c      	add	sp, #48	; 0x30
 8082210:	f85d eb04 	ldr.w	lr, [sp], #4
 8082214:	b003      	add	sp, #12
 8082216:	4770      	bx	lr

08082218 <_ZN15ConnectionCheckC1Ev>:
ConnectionCheck::ConnectionCheck()  {
 8082218:	f247 5230 	movw	r2, #30000	; 0x7530
 808221c:	4b0b      	ldr	r3, [pc, #44]	; (808224c <_ZN15ConnectionCheckC1Ev+0x34>)
 808221e:	f242 7110 	movw	r1, #10000	; 0x2710
 8082222:	6003      	str	r3, [r0, #0]
 8082224:	4b0a      	ldr	r3, [pc, #40]	; (8082250 <_ZN15ConnectionCheckC1Ev+0x38>)
 8082226:	b510      	push	{r4, lr}
 8082228:	e9c0 2301 	strd	r2, r3, [r0, #4]
 808222c:	2300      	movs	r3, #0
	instance = this;
 808222e:	4a09      	ldr	r2, [pc, #36]	; (8082254 <_ZN15ConnectionCheckC1Ev+0x3c>)
ConnectionCheck::ConnectionCheck()  {
 8082230:	e9c0 1303 	strd	r1, r3, [r0, #12]
	instance = this;
 8082234:	6010      	str	r0, [r2, #0]
	if (connectionCheckRetainedData.magic != CONNECTION_CHECK_MAGIC) {
 8082236:	4a08      	ldr	r2, [pc, #32]	; (8082258 <_ZN15ConnectionCheckC1Ev+0x40>)
 8082238:	4908      	ldr	r1, [pc, #32]	; (808225c <_ZN15ConnectionCheckC1Ev+0x44>)
 808223a:	6814      	ldr	r4, [r2, #0]
ConnectionCheck::ConnectionCheck()  {
 808223c:	e9c0 3306 	strd	r3, r3, [r0, #24]
	if (connectionCheckRetainedData.magic != CONNECTION_CHECK_MAGIC) {
 8082240:	428c      	cmp	r4, r1
		connectionCheckRetainedData.numFailures = 0;
 8082242:	bf18      	it	ne
 8082244:	e9c2 1300 	strdne	r1, r3, [r2]
ConnectionCheck::ConnectionCheck()  {
 8082248:	8283      	strh	r3, [r0, #20]
}
 808224a:	bd10      	pop	{r4, pc}
 808224c:	0808b790 	.word	0x0808b790
 8082250:	0002bf20 	.word	0x0002bf20
 8082254:	200002f8 	.word	0x200002f8
 8082258:	40024000 	.word	0x40024000
 808225c:	2e4ec594 	.word	0x2e4ec594

08082260 <_ZN15ConnectionCheck5setupEv>:

void ConnectionCheck::setup() {

}
 8082260:	4770      	bx	lr
	...

08082264 <_ZN15ConnectionCheck17cloudConnectDebugEv>:
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
 8082264:	2100      	movs	r1, #0


// This is called when timing out connecting to the cloud. It adds some debugging events to
// help log the current state for debugging purposes.
// It returns true to force a modem reset immediately, false to use the normal logic for whether to reset the modem.
bool ConnectionCheck::cloudConnectDebug() {
 8082266:	b510      	push	{r4, lr}
 8082268:	4b0c      	ldr	r3, [pc, #48]	; (808229c <_ZN15ConnectionCheck17cloudConnectDebugEv+0x38>)
 808226a:	68c2      	ldr	r2, [r0, #12]
 808226c:	4604      	mov	r4, r0
 808226e:	4608      	mov	r0, r1
 8082270:	f002 fdf6 	bl	8084e60 <cellular_command>
 8082274:	4601      	mov	r1, r0
	int res = Cellular.command(pingTimeout, "AT+UPING=\"8.8.8.8\"\r\n");
	ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_PING_DNS, res);
 8082276:	2007      	movs	r0, #7
 8082278:	f000 fcde 	bl	8082c38 <_ZN16ConnectionEvents8addEventEii>
 808227c:	2100      	movs	r1, #0
 808227e:	68e2      	ldr	r2, [r4, #12]
 8082280:	4b07      	ldr	r3, [pc, #28]	; (80822a0 <_ZN15ConnectionCheck17cloudConnectDebugEv+0x3c>)
 8082282:	4608      	mov	r0, r1
 8082284:	f002 fdec 	bl	8084e60 <cellular_command>
 8082288:	4604      	mov	r4, r0

	res = Cellular.command(pingTimeout, "AT+UPING=\"api.particle.io\"\r\n");
	ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_PING_API, res);
 808228a:	4601      	mov	r1, r0
 808228c:	2008      	movs	r0, #8
 808228e:	f000 fcd3 	bl	8082c38 <_ZN16ConnectionEvents8addEventEii>

	// If pinging api.particle.io does not succeed, then reboot the modem right away
	return (res != RESP_OK);
}
 8082292:	1ca0      	adds	r0, r4, #2
 8082294:	bf18      	it	ne
 8082296:	2001      	movne	r0, #1
 8082298:	bd10      	pop	{r4, pc}
 808229a:	bf00      	nop
 808229c:	0808b6f8 	.word	0x0808b6f8
 80822a0:	0808b70d 	.word	0x0808b70d

080822a4 <_ZN15ConnectionCheck14fullModemResetEv>:


// reason is the reason code, one of the ConnectionEvents::CONNECTION_EVENT_* constants
// forceResetMode will reset the modem even immediately instead of waiting for multiple failures
void ConnectionCheck::fullModemReset() {
 80822a4:	b530      	push	{r4, r5, lr}

	Log.info("resetting modem");
 80822a6:	491b      	ldr	r1, [pc, #108]	; (8082314 <_ZN15ConnectionCheck14fullModemResetEv+0x70>)
void ConnectionCheck::fullModemReset() {
 80822a8:	b085      	sub	sp, #20
	Log.info("resetting modem");
 80822aa:	481b      	ldr	r0, [pc, #108]	; (8082318 <_ZN15ConnectionCheck14fullModemResetEv+0x74>)
 80822ac:	f7ff ff9c 	bl	80821e8 <_ZNK5spark6Logger4infoEPKcz>

	ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_MODEM_RESET);
 80822b0:	2100      	movs	r1, #0
 80822b2:	2004      	movs	r0, #4
 80822b4:	f000 fcc0 	bl	8082c38 <_ZN16ConnectionEvents8addEventEii>
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
 80822b8:	2300      	movs	r3, #0

	// Disconnect from the cloud
	Particle.disconnect();
 80822ba:	a801      	add	r0, sp, #4
 80822bc:	e9cd 3301 	strd	r3, r3, [sp, #4]
        bool clearSession) :
 80822c0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80822c4:	f004 ff74 	bl	80871b0 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
 80822c8:	f002 fc22 	bl	8084b10 <HAL_Timer_Get_Milli_Seconds>

	// Wait up to 15 seconds to disconnect
	unsigned long startTime = millis();
	while(Particle.connected() && millis() - startTime < 15000) {
 80822cc:	f643 2597 	movw	r5, #14999	; 0x3a97
 80822d0:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80822d2:	f002 ff1d 	bl	8085110 <spark_cloud_flag_connected>
 80822d6:	b140      	cbz	r0, 80822ea <_ZN15ConnectionCheck14fullModemResetEv+0x46>
 80822d8:	f002 fc1a 	bl	8084b10 <HAL_Timer_Get_Milli_Seconds>
 80822dc:	1b00      	subs	r0, r0, r4
 80822de:	42a8      	cmp	r0, r5
 80822e0:	d803      	bhi.n	80822ea <_ZN15ConnectionCheck14fullModemResetEv+0x46>
		delay(100);
 80822e2:	2064      	movs	r0, #100	; 0x64
 80822e4:	f004 fd4e 	bl	8086d84 <delay>
	while(Particle.connected() && millis() - startTime < 15000) {
 80822e8:	e7f3      	b.n	80822d2 <_ZN15ConnectionCheck14fullModemResetEv+0x2e>
 80822ea:	2100      	movs	r1, #0
 80822ec:	f247 5230 	movw	r2, #30000	; 0x7530
 80822f0:	4608      	mov	r0, r1
 80822f2:	4b0a      	ldr	r3, [pc, #40]	; (808231c <_ZN15ConnectionCheck14fullModemResetEv+0x78>)
 80822f4:	f002 fdb4 	bl	8084e60 <cellular_command>

	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");

	delay(1000);
 80822f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80822fc:	f004 fd42 	bl	8086d84 <delay>

	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
 8082300:	4b07      	ldr	r3, [pc, #28]	; (8082320 <_ZN15ConnectionCheck14fullModemResetEv+0x7c>)
 8082302:	220a      	movs	r2, #10
 8082304:	2101      	movs	r1, #1
 8082306:	681b      	ldr	r3, [r3, #0]
 8082308:	a801      	add	r0, sp, #4
 808230a:	f003 f8d5 	bl	80854b8 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
 808230e:	b005      	add	sp, #20
 8082310:	bd30      	pop	{r4, r5, pc}
 8082312:	bf00      	nop
 8082314:	0808b72a 	.word	0x0808b72a
 8082318:	20000410 	.word	0x20000410
 808231c:	0808b73a 	.word	0x0808b73a
 8082320:	200002f0 	.word	0x200002f0

08082324 <_ZN15ConnectionCheck4loopEv>:
void ConnectionCheck::loop() {
 8082324:	b537      	push	{r0, r1, r2, r4, r5, lr}
        return network_ready(*this, 0,  NULL);
 8082326:	2200      	movs	r2, #0
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
 8082328:	4d45      	ldr	r5, [pc, #276]	; (8082440 <_ZN15ConnectionCheck4loopEv+0x11c>)
 808232a:	4604      	mov	r4, r0
 808232c:	4611      	mov	r1, r2
 808232e:	6868      	ldr	r0, [r5, #4]
 8082330:	f002 fe86 	bl	8085040 <network_ready>
	if (temp != isCellularReady) {
 8082334:	7d23      	ldrb	r3, [r4, #20]
 8082336:	4601      	mov	r1, r0
 8082338:	4283      	cmp	r3, r0
 808233a:	d00d      	beq.n	8082358 <_ZN15ConnectionCheck4loopEv+0x34>
		isCellularReady = temp;
 808233c:	7520      	strb	r0, [r4, #20]
		ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_CELLULAR_READY, isCellularReady);
 808233e:	2001      	movs	r0, #1
 8082340:	f000 fc7a 	bl	8082c38 <_ZN16ConnectionEvents8addEventEii>
		Log.info("cellular %s", isCellularReady ? "up" : "down");
 8082344:	7d21      	ldrb	r1, [r4, #20]
 8082346:	4a3f      	ldr	r2, [pc, #252]	; (8082444 <_ZN15ConnectionCheck4loopEv+0x120>)
 8082348:	4b3f      	ldr	r3, [pc, #252]	; (8082448 <_ZN15ConnectionCheck4loopEv+0x124>)
 808234a:	4840      	ldr	r0, [pc, #256]	; (808244c <_ZN15ConnectionCheck4loopEv+0x128>)
 808234c:	2900      	cmp	r1, #0
 808234e:	bf08      	it	eq
 8082350:	461a      	moveq	r2, r3
 8082352:	493f      	ldr	r1, [pc, #252]	; (8082450 <_ZN15ConnectionCheck4loopEv+0x12c>)
 8082354:	f7ff ff48 	bl	80821e8 <_ZNK5spark6Logger4infoEPKcz>
 8082358:	f002 feda 	bl	8085110 <spark_cloud_flag_connected>
	if (temp != isCloudConnected) {
 808235c:	7d63      	ldrb	r3, [r4, #21]
 808235e:	4601      	mov	r1, r0
 8082360:	4283      	cmp	r3, r0
 8082362:	d02b      	beq.n	80823bc <_ZN15ConnectionCheck4loopEv+0x98>
		isCloudConnected = temp;
 8082364:	7560      	strb	r0, [r4, #21]
		ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_CLOUD_CONNECTED, isCloudConnected);
 8082366:	2002      	movs	r0, #2
 8082368:	f000 fc66 	bl	8082c38 <_ZN16ConnectionEvents8addEventEii>
		Log.info("cloud connection %s", isCloudConnected ? "up" : "down");
 808236c:	7d61      	ldrb	r1, [r4, #21]
 808236e:	4b36      	ldr	r3, [pc, #216]	; (8082448 <_ZN15ConnectionCheck4loopEv+0x124>)
 8082370:	4a34      	ldr	r2, [pc, #208]	; (8082444 <_ZN15ConnectionCheck4loopEv+0x120>)
 8082372:	4836      	ldr	r0, [pc, #216]	; (808244c <_ZN15ConnectionCheck4loopEv+0x128>)
 8082374:	2900      	cmp	r1, #0
 8082376:	bf08      	it	eq
 8082378:	461a      	moveq	r2, r3
 808237a:	4936      	ldr	r1, [pc, #216]	; (8082454 <_ZN15ConnectionCheck4loopEv+0x130>)
 808237c:	f7ff ff34 	bl	80821e8 <_ZNK5spark6Logger4infoEPKcz>
		if (isCloudConnected) {
 8082380:	7d63      	ldrb	r3, [r4, #21]
 8082382:	b1c3      	cbz	r3, 80823b6 <_ZN15ConnectionCheck4loopEv+0x92>
			connectionCheckRetainedData.numFailures = 0;
 8082384:	2200      	movs	r2, #0
 8082386:	4b34      	ldr	r3, [pc, #208]	; (8082458 <_ZN15ConnectionCheck4loopEv+0x134>)
 8082388:	605a      	str	r2, [r3, #4]
        return network_listening(*this, 0, NULL);
 808238a:	2200      	movs	r2, #0
 808238c:	6868      	ldr	r0, [r5, #4]
 808238e:	4611      	mov	r1, r2
 8082390:	f002 fe76 	bl	8085080 <network_listening>
	if (Cellular.listening()) {
 8082394:	b168      	cbz	r0, 80823b2 <_ZN15ConnectionCheck4loopEv+0x8e>
		if (listeningStart == 0) {
 8082396:	69a5      	ldr	r5, [r4, #24]
 8082398:	2d00      	cmp	r5, #0
 808239a:	d13c      	bne.n	8082416 <_ZN15ConnectionCheck4loopEv+0xf2>
 808239c:	f002 fbb8 	bl	8084b10 <HAL_Timer_Get_Milli_Seconds>
			ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_LISTENING_ENTERED);
 80823a0:	4629      	mov	r1, r5
			listeningStart = millis();
 80823a2:	61a0      	str	r0, [r4, #24]
			ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_LISTENING_ENTERED);
 80823a4:	2003      	movs	r0, #3
 80823a6:	f000 fc47 	bl	8082c38 <_ZN16ConnectionEvents8addEventEii>
			Log.info("entered listening mode");
 80823aa:	492c      	ldr	r1, [pc, #176]	; (808245c <_ZN15ConnectionCheck4loopEv+0x138>)
 80823ac:	4827      	ldr	r0, [pc, #156]	; (808244c <_ZN15ConnectionCheck4loopEv+0x128>)
 80823ae:	f7ff ff1b 	bl	80821e8 <_ZNK5spark6Logger4infoEPKcz>
}
 80823b2:	b003      	add	sp, #12
 80823b4:	bd30      	pop	{r4, r5, pc}
 80823b6:	f002 fbab 	bl	8084b10 <HAL_Timer_Get_Milli_Seconds>
			cloudCheckStart = millis();
 80823ba:	61e0      	str	r0, [r4, #28]
	if (!isCloudConnected) {
 80823bc:	7d63      	ldrb	r3, [r4, #21]
 80823be:	2b00      	cmp	r3, #0
 80823c0:	d1e3      	bne.n	808238a <_ZN15ConnectionCheck4loopEv+0x66>
		if (cloudWaitForReboot != 0 && millis() - cloudCheckStart >= cloudWaitForReboot) {
 80823c2:	68a3      	ldr	r3, [r4, #8]
 80823c4:	2b00      	cmp	r3, #0
 80823c6:	d0e0      	beq.n	808238a <_ZN15ConnectionCheck4loopEv+0x66>
 80823c8:	f002 fba2 	bl	8084b10 <HAL_Timer_Get_Milli_Seconds>
 80823cc:	69e3      	ldr	r3, [r4, #28]
 80823ce:	1ac0      	subs	r0, r0, r3
 80823d0:	68a3      	ldr	r3, [r4, #8]
 80823d2:	4298      	cmp	r0, r3
 80823d4:	d3d9      	bcc.n	808238a <_ZN15ConnectionCheck4loopEv+0x66>
			if (isCellularReady) {
 80823d6:	7d23      	ldrb	r3, [r4, #20]
 80823d8:	b113      	cbz	r3, 80823e0 <_ZN15ConnectionCheck4loopEv+0xbc>
				cloudConnectDebug();
 80823da:	4620      	mov	r0, r4
 80823dc:	f7ff ff42 	bl	8082264 <_ZN15ConnectionCheck17cloudConnectDebugEv>
			connectionCheckRetainedData.numFailures++;
 80823e0:	4a1d      	ldr	r2, [pc, #116]	; (8082458 <_ZN15ConnectionCheck4loopEv+0x134>)
 80823e2:	6853      	ldr	r3, [r2, #4]
 80823e4:	3301      	adds	r3, #1
 80823e6:	6053      	str	r3, [r2, #4]
			if (failureSleepSec > 0 && connectionCheckRetainedData.numFailures > 1) {
 80823e8:	6922      	ldr	r2, [r4, #16]
 80823ea:	b162      	cbz	r2, 8082406 <_ZN15ConnectionCheck4loopEv+0xe2>
 80823ec:	2b01      	cmp	r3, #1
 80823ee:	d90a      	bls.n	8082406 <_ZN15ConnectionCheck4loopEv+0xe2>
				ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_FAILURE_SLEEP);
 80823f0:	2100      	movs	r1, #0
 80823f2:	2016      	movs	r0, #22
 80823f4:	f000 fc20 	bl	8082c38 <_ZN16ConnectionEvents8addEventEii>
				System.sleep(SLEEP_MODE_DEEP, failureSleepSec, SLEEP_DISABLE_WKP_PIN);
 80823f8:	4b19      	ldr	r3, [pc, #100]	; (8082460 <_ZN15ConnectionCheck4loopEv+0x13c>)
 80823fa:	2101      	movs	r1, #1
 80823fc:	4668      	mov	r0, sp
 80823fe:	681b      	ldr	r3, [r3, #0]
 8082400:	6922      	ldr	r2, [r4, #16]
 8082402:	f003 f859 	bl	80854b8 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
			ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_REBOOT_NO_CLOUD);
 8082406:	2100      	movs	r1, #0
 8082408:	2006      	movs	r0, #6
 808240a:	f000 fc15 	bl	8082c38 <_ZN16ConnectionEvents8addEventEii>
			fullModemReset();
 808240e:	4620      	mov	r0, r4
 8082410:	f7ff ff48 	bl	80822a4 <_ZN15ConnectionCheck14fullModemResetEv>
 8082414:	e7b9      	b.n	808238a <_ZN15ConnectionCheck4loopEv+0x66>
			if (listenWaitForReboot != 0 && millis() - listeningStart >= listenWaitForReboot) {
 8082416:	6863      	ldr	r3, [r4, #4]
 8082418:	2b00      	cmp	r3, #0
 808241a:	d0ca      	beq.n	80823b2 <_ZN15ConnectionCheck4loopEv+0x8e>
 808241c:	f002 fb78 	bl	8084b10 <HAL_Timer_Get_Milli_Seconds>
 8082420:	69a3      	ldr	r3, [r4, #24]
 8082422:	1ac0      	subs	r0, r0, r3
 8082424:	6863      	ldr	r3, [r4, #4]
 8082426:	4298      	cmp	r0, r3
 8082428:	d3c3      	bcc.n	80823b2 <_ZN15ConnectionCheck4loopEv+0x8e>
				ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_REBOOT_LISTENING);
 808242a:	2100      	movs	r1, #0
 808242c:	2005      	movs	r0, #5
 808242e:	f000 fc03 	bl	8082c38 <_ZN16ConnectionEvents8addEventEii>
				fullModemReset();
 8082432:	4620      	mov	r0, r4
}
 8082434:	b003      	add	sp, #12
 8082436:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				fullModemReset();
 808243a:	f7ff bf33 	b.w	80822a4 <_ZN15ConnectionCheck14fullModemResetEv>
 808243e:	bf00      	nop
 8082440:	20000860 	.word	0x20000860
 8082444:	0808b747 	.word	0x0808b747
 8082448:	0808b74a 	.word	0x0808b74a
 808244c:	20000410 	.word	0x20000410
 8082450:	0808b74f 	.word	0x0808b74f
 8082454:	0808b75b 	.word	0x0808b75b
 8082458:	40024000 	.word	0x40024000
 808245c:	0808b76f 	.word	0x0808b76f
 8082460:	200002f4 	.word	0x200002f4

08082464 <_GLOBAL__sub_I__ZN15ConnectionCheck8instanceE>:
 8082464:	2200      	movs	r2, #0
 8082466:	4b03      	ldr	r3, [pc, #12]	; (8082474 <_GLOBAL__sub_I__ZN15ConnectionCheck8instanceE+0x10>)
 8082468:	601a      	str	r2, [r3, #0]
 808246a:	2202      	movs	r2, #2
 808246c:	4b02      	ldr	r3, [pc, #8]	; (8082478 <_GLOBAL__sub_I__ZN15ConnectionCheck8instanceE+0x14>)
 808246e:	601a      	str	r2, [r3, #0]
}
 8082470:	4770      	bx	lr
 8082472:	bf00      	nop
 8082474:	200002f0 	.word	0x200002f0
 8082478:	200002f4 	.word	0x200002f4

0808247c <_ZN6Thread3runEPv>:

private:

    static os_thread_return_t run(void* param) {
        Data* th = (Data*)param;
        th->started = true;
 808247c:	2301      	movs	r3, #1
    static os_thread_return_t run(void* param) {
 808247e:	b510      	push	{r4, lr}
        th->started = true;
 8082480:	7403      	strb	r3, [r0, #16]
        if (th->func) {
 8082482:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
 8082484:	4604      	mov	r4, r0
        if (th->func) {
 8082486:	b143      	cbz	r3, 808249a <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
 8082488:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808248a:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
 808248c:	2301      	movs	r3, #1
        os_thread_exit(nullptr);
 808248e:	2000      	movs	r0, #0
        th->exited = true;
 8082490:	7463      	strb	r3, [r4, #17]
    }
 8082492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
 8082496:	f002 bbd3 	b.w	8084c40 <os_thread_exit>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
	return *this;
      }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 808249a:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
 808249c:	2800      	cmp	r0, #0
 808249e:	d0f5      	beq.n	808248c <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
 80824a0:	6883      	ldr	r3, [r0, #8]
 80824a2:	b90b      	cbnz	r3, 80824a8 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
 80824a4:	f006 f831 	bl	808850a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80824a8:	68c3      	ldr	r3, [r0, #12]
 80824aa:	e7ee      	b.n	808248a <_ZN6Thread3runEPv+0xe>

080824ac <_ZN18AppWatchdogWrapper16watchdogCallbackEv>:

}


// static
void AppWatchdogWrapper::watchdogCallback() {
 80824ac:	b508      	push	{r3, lr}
	// This isn't quite safe; connectionEvents.add should only be called from the main loop thread,
	// but since by definition the main loop thread is stuck when the app watchdog fires, this is
	// probably not that unsafe. (The application watchdog runs in a separate thread.)
	ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_APP_WATCHDOG);
 80824ae:	2009      	movs	r0, #9
 80824b0:	2100      	movs	r1, #0
 80824b2:	f000 fbc1 	bl	8082c38 <_ZN16ConnectionEvents8addEventEii>
	System.reset(RESET_NO_WAIT);
 80824b6:	4b03      	ldr	r3, [pc, #12]	; (80824c4 <_ZN18AppWatchdogWrapper16watchdogCallbackEv+0x18>)
 80824b8:	6818      	ldr	r0, [r3, #0]
}
 80824ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	System.reset(RESET_NO_WAIT);
 80824be:	f002 bfe8 	b.w	8085492 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
 80824c2:	bf00      	nop
 80824c4:	200002fc 	.word	0x200002fc

080824c8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>:
      operator()(_Tp* __ptr) const
 80824c8:	b538      	push	{r3, r4, r5, lr}
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
 80824ca:	6805      	ldr	r5, [r0, #0]
      operator()(_Tp* __ptr) const
 80824cc:	4604      	mov	r4, r0
	if (__ptr != nullptr)
 80824ce:	b135      	cbz	r5, 80824de <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0+0x16>
    class function<_Res(_ArgTypes...)>
 80824d0:	4628      	mov	r0, r5
 80824d2:	f7fe f993 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
 80824d6:	2110      	movs	r1, #16
 80824d8:	4628      	mov	r0, r5
 80824da:	f006 f810 	bl	80884fe <_ZdlPvj>
 80824de:	4620      	mov	r0, r4
      }
 80824e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delete __ptr;
 80824e4:	2114      	movs	r1, #20
 80824e6:	f006 b80a 	b.w	80884fe <_ZdlPvj>
	...

080824ec <_ZN18AppWatchdogWrapperD1Ev>:
AppWatchdogWrapper::~AppWatchdogWrapper() {
 80824ec:	b510      	push	{r4, lr}
 80824ee:	4b11      	ldr	r3, [pc, #68]	; (8082534 <_ZN18AppWatchdogWrapperD1Ev+0x48>)
 80824f0:	4604      	mov	r4, r0
 80824f2:	6003      	str	r3, [r0, #0]
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80824f4:	6983      	ldr	r3, [r0, #24]
        if (!isValid())
 80824f6:	b19b      	cbz	r3, 8082520 <_ZN18AppWatchdogWrapperD1Ev+0x34>
        return isValid() && os_thread_is_current(d_->handle);
 80824f8:	6858      	ldr	r0, [r3, #4]
 80824fa:	f002 fb39 	bl	8084b70 <os_thread_is_current>
 80824fe:	b978      	cbnz	r0, 8082520 <_ZN18AppWatchdogWrapperD1Ev+0x34>
 8082500:	69a3      	ldr	r3, [r4, #24]
        if (!d_->exited) {
 8082502:	7c5a      	ldrb	r2, [r3, #17]
 8082504:	b912      	cbnz	r2, 808250c <_ZN18AppWatchdogWrapperD1Ev+0x20>
        return isValid() && os_thread_join(d_->handle)==0;
 8082506:	6858      	ldr	r0, [r3, #4]
 8082508:	f002 fb42 	bl	8084b90 <os_thread_join>
        os_thread_cleanup(d_->handle);
 808250c:	69a3      	ldr	r3, [r4, #24]
 808250e:	6858      	ldr	r0, [r3, #4]
 8082510:	f002 fb46 	bl	8084ba0 <os_thread_cleanup>
	_M_ptr() = __p;
 8082514:	2300      	movs	r3, #0
	const pointer __old_p = _M_ptr();
 8082516:	69a0      	ldr	r0, [r4, #24]
	_M_ptr() = __p;
 8082518:	61a3      	str	r3, [r4, #24]
	if (__old_p)
 808251a:	b108      	cbz	r0, 8082520 <_ZN18AppWatchdogWrapperD1Ev+0x34>
      operator()(_Tp* __ptr) const
 808251c:	f7ff ffd4 	bl	80824c8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
	if (__ptr != nullptr)
 8082520:	69a0      	ldr	r0, [r4, #24]
 8082522:	b108      	cbz	r0, 8082528 <_ZN18AppWatchdogWrapperD1Ev+0x3c>
      operator()(_Tp* __ptr) const
 8082524:	f7ff ffd0 	bl	80824c8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
 8082528:	f104 0008 	add.w	r0, r4, #8
 808252c:	f7fe f966 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
}
 8082530:	4620      	mov	r0, r4
 8082532:	bd10      	pop	{r4, pc}
 8082534:	0808b7a8 	.word	0x0808b7a8

08082538 <_ZN18AppWatchdogWrapperD0Ev>:
AppWatchdogWrapper::~AppWatchdogWrapper() {
 8082538:	b510      	push	{r4, lr}
 808253a:	4604      	mov	r4, r0
}
 808253c:	f7ff ffd6 	bl	80824ec <_ZN18AppWatchdogWrapperD1Ev>
 8082540:	4620      	mov	r0, r4
 8082542:	211c      	movs	r1, #28
 8082544:	f005 ffdb 	bl	80884fe <_ZdlPvj>
 8082548:	4620      	mov	r0, r4
 808254a:	bd10      	pop	{r4, pc}

0808254c <_ZN6ThreadC1EPKcPFvPvES2_hj>:
    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
 808254c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8082550:	4604      	mov	r4, r0
 8082552:	460e      	mov	r6, r1
        : d_(new(std::nothrow) Data)
 8082554:	2014      	movs	r0, #20
 8082556:	4916      	ldr	r1, [pc, #88]	; (80825b0 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x64>)
    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
 8082558:	4690      	mov	r8, r2
 808255a:	461f      	mov	r7, r3
        : d_(new(std::nothrow) Data)
 808255c:	f005 ffd1 	bl	8088502 <_ZnwjRKSt9nothrow_t>
 8082560:	b130      	cbz	r0, 8082570 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x24>
      : _M_head_impl() { }
 8082562:	2500      	movs	r5, #0
            exited(false) {
 8082564:	e9c0 5500 	strd	r5, r5, [r0]
 8082568:	e9c0 5502 	strd	r5, r5, [r0, #8]
 808256c:	7405      	strb	r5, [r0, #16]
 808256e:	7445      	strb	r5, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8082570:	6020      	str	r0, [r4, #0]
        if (!d_) {
 8082572:	b198      	cbz	r0, 808259c <_ZN6ThreadC1EPKcPFvPvES2_hj+0x50>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 8082574:	9b09      	ldr	r3, [sp, #36]	; 0x24
        d_->func_param = function_param;
 8082576:	e9c0 8702 	strd	r8, r7, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 808257a:	4631      	mov	r1, r6
 808257c:	e9cd 0300 	strd	r0, r3, [sp]
 8082580:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8082584:	4b0b      	ldr	r3, [pc, #44]	; (80825b4 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x68>)
 8082586:	3004      	adds	r0, #4
 8082588:	f002 faea 	bl	8084b60 <os_thread_create>
 808258c:	b930      	cbnz	r0, 808259c <_ZN6ThreadC1EPKcPFvPvES2_hj+0x50>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 808258e:	6823      	ldr	r3, [r4, #0]
        while (!d_->started) {
 8082590:	7c1b      	ldrb	r3, [r3, #16]
 8082592:	b94b      	cbnz	r3, 80825a8 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x5c>
            HAL_Delay_Milliseconds(1);
 8082594:	2001      	movs	r0, #1
 8082596:	f002 faa3 	bl	8084ae0 <HAL_Delay_Milliseconds>
        while (!d_->started) {
 808259a:	e7f8      	b.n	808258e <_ZN6ThreadC1EPKcPFvPvES2_hj+0x42>
	_M_ptr() = __p;
 808259c:	2300      	movs	r3, #0
	const pointer __old_p = _M_ptr();
 808259e:	6820      	ldr	r0, [r4, #0]
	_M_ptr() = __p;
 80825a0:	6023      	str	r3, [r4, #0]
	if (__old_p)
 80825a2:	b108      	cbz	r0, 80825a8 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x5c>
      operator()(_Tp* __ptr) const
 80825a4:	f7ff ff90 	bl	80824c8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
    }
 80825a8:	4620      	mov	r0, r4
 80825aa:	b002      	add	sp, #8
 80825ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80825b0:	0808bded 	.word	0x0808bded
 80825b4:	0808247d 	.word	0x0808247d

080825b8 <_ZN18AppWatchdogWrapperC1Em>:
AppWatchdogWrapper::AppWatchdogWrapper(unsigned long timeoutMs) : wd(timeoutMs, watchdogCallback, 1800) {
 80825b8:	b530      	push	{r4, r5, lr}
 80825ba:	4b16      	ldr	r3, [pc, #88]	; (8082614 <_ZN18AppWatchdogWrapperC1Em+0x5c>)
 80825bc:	b087      	sub	sp, #28
 80825be:	6003      	str	r3, [r0, #0]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 80825c0:	4b15      	ldr	r3, [pc, #84]	; (8082618 <_ZN18AppWatchdogWrapperC1Em+0x60>)
 80825c2:	4604      	mov	r4, r0
 80825c4:	9302      	str	r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
 80825c6:	4b15      	ldr	r3, [pc, #84]	; (808261c <_ZN18AppWatchdogWrapperC1Em+0x64>)
    static const unsigned DEFAULT_STACK_SIZE = 512;

	ApplicationWatchdog(unsigned timeout_ms, std::function<void(void)> fn, unsigned stack_size=DEFAULT_STACK_SIZE) :
		timeout(timeout_ms),
		timeout_fn(fn),
		thread("appwdt", start, this, OS_THREAD_PRIORITY_CRITICAL, stack_size)
 80825c8:	6041      	str	r1, [r0, #4]
 80825ca:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 80825cc:	4b14      	ldr	r3, [pc, #80]	; (8082620 <_ZN18AppWatchdogWrapperC1Em+0x68>)
 80825ce:	1d05      	adds	r5, r0, #4
 80825d0:	9304      	str	r3, [sp, #16]
    _Function_base() : _M_manager(nullptr) { }
 80825d2:	2300      	movs	r3, #0
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80825d4:	a902      	add	r1, sp, #8
    _Function_base() : _M_manager(nullptr) { }
 80825d6:	6103      	str	r3, [r0, #16]
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80825d8:	2202      	movs	r2, #2
 80825da:	3008      	adds	r0, #8
 80825dc:	f7fd fe57 	bl	808028e <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>
	  _M_invoker = __x._M_invoker;
 80825e0:	9b05      	ldr	r3, [sp, #20]
 80825e2:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80825e6:	6163      	str	r3, [r4, #20]
	  _M_manager = __x._M_manager;
 80825e8:	9b04      	ldr	r3, [sp, #16]
 80825ea:	490e      	ldr	r1, [pc, #56]	; (8082624 <_ZN18AppWatchdogWrapperC1Em+0x6c>)
 80825ec:	6123      	str	r3, [r4, #16]
 80825ee:	2309      	movs	r3, #9
 80825f0:	f104 0018 	add.w	r0, r4, #24
 80825f4:	e9cd 3200 	strd	r3, r2, [sp]
 80825f8:	462b      	mov	r3, r5
 80825fa:	4a0b      	ldr	r2, [pc, #44]	; (8082628 <_ZN18AppWatchdogWrapperC1Em+0x70>)
 80825fc:	f7ff ffa6 	bl	808254c <_ZN6ThreadC1EPKcPFvPvES2_hj>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8082600:	f002 fa86 	bl	8084b10 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8082604:	4b09      	ldr	r3, [pc, #36]	; (808262c <_ZN18AppWatchdogWrapperC1Em+0x74>)
 8082606:	6018      	str	r0, [r3, #0]
    class function<_Res(_ArgTypes...)>
 8082608:	a802      	add	r0, sp, #8
 808260a:	f7fe f8f7 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
}
 808260e:	4620      	mov	r0, r4
 8082610:	b007      	add	sp, #28
 8082612:	bd30      	pop	{r4, r5, pc}
 8082614:	0808b7a8 	.word	0x0808b7a8
 8082618:	080824ad 	.word	0x080824ad
 808261c:	080802a3 	.word	0x080802a3
 8082620:	0808028f 	.word	0x0808028f
 8082624:	0808b798 	.word	0x0808b798
 8082628:	080883d1 	.word	0x080883d1
 808262c:	200009b8 	.word	0x200009b8

08082630 <_GLOBAL__sub_I__ZN18AppWatchdogWrapperC2Em>:
 8082630:	2201      	movs	r2, #1
 8082632:	4b01      	ldr	r3, [pc, #4]	; (8082638 <_GLOBAL__sub_I__ZN18AppWatchdogWrapperC2Em+0x8>)
 8082634:	601a      	str	r2, [r3, #0]
}
 8082636:	4770      	bx	lr
 8082638:	200002fc 	.word	0x200002fc

0808263c <_ZN12SessionCheck19subscriptionHandlerEPKcS1_>:
void SessionCheck::loop() {
	stateHandler(*this);
}

void SessionCheck::subscriptionHandler(const char *eventName, const char *data) {
	gotResponse = true;
 808263c:	2301      	movs	r3, #1
 808263e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 8082642:	4770      	bx	lr

08082644 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM12SessionCheckFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE9_M_invokeERKSt9_Any_dataOS1_SH_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8082644:	b470      	push	{r4, r5, r6}
	    return __source._M_access<_Functor*>();
 8082646:	6803      	ldr	r3, [r0, #0]
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 8082648:	6809      	ldr	r1, [r1, #0]
 808264a:	685c      	ldr	r4, [r3, #4]
 808264c:	689d      	ldr	r5, [r3, #8]
 808264e:	1066      	asrs	r6, r4, #1
 8082650:	eb05 0064 	add.w	r0, r5, r4, asr #1
 8082654:	07e4      	lsls	r4, r4, #31
 8082656:	bf48      	it	mi
 8082658:	59ac      	ldrmi	r4, [r5, r6]
 808265a:	681b      	ldr	r3, [r3, #0]
 808265c:	6812      	ldr	r2, [r2, #0]
 808265e:	bf48      	it	mi
 8082660:	58e3      	ldrmi	r3, [r4, r3]
      }
 8082662:	bc70      	pop	{r4, r5, r6}
 8082664:	4718      	bx	r3

08082666 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM12SessionCheckFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	switch (__op)
 8082666:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8082668:	b538      	push	{r3, r4, r5, lr}
 808266a:	4604      	mov	r4, r0
	switch (__op)
 808266c:	d102      	bne.n	8082674 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM12SessionCheckFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
 808266e:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
 8082670:	6023      	str	r3, [r4, #0]
	}
 8082672:	e003      	b.n	808267c <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM12SessionCheckFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
	  switch (__op)
 8082674:	2a02      	cmp	r2, #2
 8082676:	d003      	beq.n	8082680 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM12SessionCheckFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1a>
 8082678:	2a03      	cmp	r2, #3
 808267a:	d00d      	beq.n	8082698 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM12SessionCheckFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x32>
      }
 808267c:	2000      	movs	r0, #0
 808267e:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 8082680:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
 8082682:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 8082684:	f7fd fd19 	bl	80800ba <_Znwj>
 8082688:	4603      	mov	r3, r0
 808268a:	2800      	cmp	r0, #0
 808268c:	d0f0      	beq.n	8082670 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM12SessionCheckFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
 808268e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8082692:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8082696:	e7eb      	b.n	8082670 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM12SessionCheckFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
 8082698:	6800      	ldr	r0, [r0, #0]
 808269a:	2800      	cmp	r0, #0
 808269c:	d0ee      	beq.n	808267c <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM12SessionCheckFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
 808269e:	210c      	movs	r1, #12
 80826a0:	f005 ff2d 	bl	80884fe <_ZdlPvj>
 80826a4:	e7ea      	b.n	808267c <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM12SessionCheckFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>

080826a6 <_ZNSt17_Function_handlerIFvR12SessionCheckEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80826a6:	4603      	mov	r3, r0
 80826a8:	b410      	push	{r4}
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
 80826aa:	6842      	ldr	r2, [r0, #4]
 80826ac:	681b      	ldr	r3, [r3, #0]
 80826ae:	1054      	asrs	r4, r2, #1
 80826b0:	eb01 0062 	add.w	r0, r1, r2, asr #1
 80826b4:	07d2      	lsls	r2, r2, #31
 80826b6:	bf48      	it	mi
 80826b8:	590a      	ldrmi	r2, [r1, r4]
      }
 80826ba:	bc10      	pop	{r4}
 80826bc:	bf48      	it	mi
 80826be:	58d3      	ldrmi	r3, [r2, r3]
 80826c0:	4718      	bx	r3

080826c2 <_ZNSt17_Function_handlerIFvR12SessionCheckEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
 80826c2:	2a01      	cmp	r2, #1
 80826c4:	d102      	bne.n	80826cc <_ZNSt17_Function_handlerIFvR12SessionCheckEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80826c6:	6001      	str	r1, [r0, #0]
      }
 80826c8:	2000      	movs	r0, #0
 80826ca:	4770      	bx	lr
	  switch (__op)
 80826cc:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80826ce:	bf04      	itt	eq
 80826d0:	e9d1 2300 	ldrdeq	r2, r3, [r1]
 80826d4:	e9c0 2300 	strdeq	r2, r3, [r0]
	      break;
 80826d8:	e7f6      	b.n	80826c8 <_ZNSt17_Function_handlerIFvR12SessionCheckEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6>
	...

080826dc <_ZN12SessionCheckD1Ev>:
SessionCheck::~SessionCheck() {
 80826dc:	b510      	push	{r4, lr}
 80826de:	4604      	mov	r4, r0
 80826e0:	4b05      	ldr	r3, [pc, #20]	; (80826f8 <_ZN12SessionCheckD1Ev+0x1c>)
 80826e2:	f840 3b2c 	str.w	r3, [r0], #44
    class function<_Res(_ArgTypes...)>
 80826e6:	f7fe f889 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
 80826ea:	f104 0010 	add.w	r0, r4, #16
 80826ee:	f002 ff75 	bl	80855dc <_ZN6StringD1Ev>
}
 80826f2:	4620      	mov	r0, r4
 80826f4:	bd10      	pop	{r4, pc}
 80826f6:	bf00      	nop
 80826f8:	0808b7dc 	.word	0x0808b7dc

080826fc <_ZN12SessionCheckD0Ev>:
SessionCheck::~SessionCheck() {
 80826fc:	b510      	push	{r4, lr}
 80826fe:	4604      	mov	r4, r0
}
 8082700:	f7ff ffec 	bl	80826dc <_ZN12SessionCheckD1Ev>
 8082704:	4620      	mov	r0, r4
 8082706:	2140      	movs	r1, #64	; 0x40
 8082708:	f005 fef9 	bl	80884fe <_ZdlPvj>
 808270c:	4620      	mov	r0, r4
 808270e:	bd10      	pop	{r4, pc}

08082710 <_ZNSt8functionIFvR12SessionCheckEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>:
	operator=(_Functor&& __f)
 8082710:	b510      	push	{r4, lr}
 8082712:	4603      	mov	r3, r0
 8082714:	e9d1 0200 	ldrd	r0, r2, [r1]
    _Function_base() : _M_manager(nullptr) { }
 8082718:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
 808271a:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
 808271c:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
 808271e:	b908      	cbnz	r0, 8082724 <_ZNSt8functionIFvR12SessionCheckEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x14>
 8082720:	07d1      	lsls	r1, r2, #31
 8082722:	d505      	bpl.n	8082730 <_ZNSt8functionIFvR12SessionCheckEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8082724:	e9cd 0202 	strd	r0, r2, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
 8082728:	4a0f      	ldr	r2, [pc, #60]	; (8082768 <_ZNSt8functionIFvR12SessionCheckEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x58>)
 808272a:	9205      	str	r2, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 808272c:	4a0f      	ldr	r2, [pc, #60]	; (808276c <_ZNSt8functionIFvR12SessionCheckEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x5c>)
 808272e:	9204      	str	r2, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082730:	466c      	mov	r4, sp
 8082732:	aa02      	add	r2, sp, #8
 8082734:	e892 0003 	ldmia.w	r2, {r0, r1}
 8082738:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 808273c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8082740:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8082744:	e894 0003 	ldmia.w	r4, {r0, r1}
 8082748:	e883 0003 	stmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808274c:	9904      	ldr	r1, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 808274e:	6898      	ldr	r0, [r3, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8082750:	6099      	str	r1, [r3, #8]
      __a = _GLIBCXX_MOVE(__b);
 8082752:	9004      	str	r0, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082754:	9905      	ldr	r1, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8082756:	68d8      	ldr	r0, [r3, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8082758:	60d9      	str	r1, [r3, #12]
      __a = _GLIBCXX_MOVE(__b);
 808275a:	9005      	str	r0, [sp, #20]
    class function<_Res(_ArgTypes...)>
 808275c:	4610      	mov	r0, r2
 808275e:	f7fe f84d 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
	}
 8082762:	b006      	add	sp, #24
 8082764:	bd10      	pop	{r4, pc}
 8082766:	bf00      	nop
 8082768:	080826a7 	.word	0x080826a7
 808276c:	080826c3 	.word	0x080826c3

08082770 <_ZN12SessionCheckC1ExPKc>:
SessionCheck::SessionCheck(time_t checkPeriodSecs, const char *eventSuffix) : checkPeriodSecs(checkPeriodSecs) {
 8082770:	b530      	push	{r4, r5, lr}
 8082772:	4919      	ldr	r1, [pc, #100]	; (80827d8 <_ZN12SessionCheckC1ExPKc+0x68>)
 8082774:	f100 0510 	add.w	r5, r0, #16
 8082778:	b089      	sub	sp, #36	; 0x24
 808277a:	4604      	mov	r4, r0
 808277c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8082780:	6001      	str	r1, [r0, #0]
 8082782:	4916      	ldr	r1, [pc, #88]	; (80827dc <_ZN12SessionCheckC1ExPKc+0x6c>)
 8082784:	4628      	mov	r0, r5
 8082786:	f002 ff73 	bl	8085670 <_ZN6StringC1EPK19__FlashStringHelper>
 808278a:	2300      	movs	r3, #0
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 808278c:	4a14      	ldr	r2, [pc, #80]	; (80827e0 <_ZN12SessionCheckC1ExPKc+0x70>)
 808278e:	6223      	str	r3, [r4, #32]
 8082790:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
 8082794:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8082798:	62a3      	str	r3, [r4, #40]	; 0x28
	    _M_invoker = &_My_handler::_M_invoke;
 808279a:	4b12      	ldr	r3, [pc, #72]	; (80827e4 <_ZN12SessionCheckC1ExPKc+0x74>)
        return spark_deviceID();
 808279c:	a804      	add	r0, sp, #16
 808279e:	63a3      	str	r3, [r4, #56]	; 0x38
	    _M_manager = &_My_handler::_M_manager;
 80827a0:	4b11      	ldr	r3, [pc, #68]	; (80827e8 <_ZN12SessionCheckC1ExPKc+0x78>)
 80827a2:	6363      	str	r3, [r4, #52]	; 0x34
 80827a4:	f002 fcbc 	bl	8085120 <spark_deviceID>
	StringSumHelper(const String &s) : String(s) {}
 80827a8:	a904      	add	r1, sp, #16
 80827aa:	4668      	mov	r0, sp
 80827ac:	f002 ffaa 	bl	8085704 <_ZN6StringC1ERKS_>
	eventName = System.deviceID() + "/" + eventSuffix;
 80827b0:	4668      	mov	r0, sp
 80827b2:	490e      	ldr	r1, [pc, #56]	; (80827ec <_ZN12SessionCheckC1ExPKc+0x7c>)
 80827b4:	f002 ffed 	bl	8085792 <_ZplRK15StringSumHelperPKc>
 80827b8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80827ba:	f002 ffea 	bl	8085792 <_ZplRK15StringSumHelperPKc>
 80827be:	4601      	mov	r1, r0
 80827c0:	4628      	mov	r0, r5
 80827c2:	f002 ff90 	bl	80856e6 <_ZN6StringaSERKS_>
class StringSumHelper : public String
 80827c6:	4668      	mov	r0, sp
 80827c8:	f002 ff08 	bl	80855dc <_ZN6StringD1Ev>
 80827cc:	a804      	add	r0, sp, #16
 80827ce:	f002 ff05 	bl	80855dc <_ZN6StringD1Ev>
}
 80827d2:	4620      	mov	r0, r4
 80827d4:	b009      	add	sp, #36	; 0x24
 80827d6:	bd30      	pop	{r4, r5, pc}
 80827d8:	0808b7dc 	.word	0x0808b7dc
 80827dc:	0808b70c 	.word	0x0808b70c
 80827e0:	08082865 	.word	0x08082865
 80827e4:	080826a7 	.word	0x080826a7
 80827e8:	080826c3 	.word	0x080826c3
 80827ec:	0808b7b0 	.word	0x0808b7b0

080827f0 <_ZN12SessionCheck4loopEv>:
void SessionCheck::loop() {
 80827f0:	b510      	push	{r4, lr}
      if (_M_empty())
 80827f2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80827f4:	4601      	mov	r1, r0
 80827f6:	b90b      	cbnz	r3, 80827fc <_ZN12SessionCheck4loopEv+0xc>
	__throw_bad_function_call();
 80827f8:	f005 fe87 	bl	808850a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80827fc:	6b83      	ldr	r3, [r0, #56]	; 0x38
}
 80827fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8082802:	302c      	adds	r0, #44	; 0x2c
 8082804:	4718      	bx	r3
	...

08082808 <_ZN12SessionCheck9sendEventEv>:
	numFailures = 0;

	sendEvent();
}

void SessionCheck::sendEvent() {
 8082808:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	gotResponse = false;
 808280a:	2300      	movs	r3, #0
	stateHandler = &SessionCheck::waitForResponseState;
 808280c:	4a10      	ldr	r2, [pc, #64]	; (8082850 <_ZN12SessionCheck9sendEventEv+0x48>)
void SessionCheck::sendEvent() {
 808280e:	4604      	mov	r4, r0
	gotResponse = false;
 8082810:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
	stateHandler = &SessionCheck::waitForResponseState;
 8082814:	a902      	add	r1, sp, #8
 8082816:	302c      	adds	r0, #44	; 0x2c
 8082818:	e9cd 2302 	strd	r2, r3, [sp, #8]
 808281c:	f7ff ff78 	bl	8082710 <_ZNSt8functionIFvR12SessionCheckEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
 8082820:	f002 f976 	bl	8084b10 <HAL_Timer_Get_Milli_Seconds>
	stateTime = millis();

	Log.info("publishing session check event %s", eventName.c_str());
 8082824:	6922      	ldr	r2, [r4, #16]
	stateTime = millis();
 8082826:	6220      	str	r0, [r4, #32]
	Log.info("publishing session check event %s", eventName.c_str());
 8082828:	490a      	ldr	r1, [pc, #40]	; (8082854 <_ZN12SessionCheck9sendEventEv+0x4c>)
 808282a:	480b      	ldr	r0, [pc, #44]	; (8082858 <_ZN12SessionCheck9sendEventEv+0x50>)
 808282c:	f7ff fcdc 	bl	80821e8 <_ZNK5spark6Logger4infoEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 8082830:	4b0a      	ldr	r3, [pc, #40]	; (808285c <_ZN12SessionCheck9sendEventEv+0x54>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8082832:	4a0b      	ldr	r2, [pc, #44]	; (8082860 <_ZN12SessionCheck9sendEventEv+0x58>)
 8082834:	781b      	ldrb	r3, [r3, #0]
 8082836:	6921      	ldr	r1, [r4, #16]
 8082838:	f88d 3000 	strb.w	r3, [sp]
 808283c:	a802      	add	r0, sp, #8
 808283e:	233c      	movs	r3, #60	; 0x3c
 8082840:	f004 fdb6 	bl	80873b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      ~__shared_ptr() = default;
 8082844:	a803      	add	r0, sp, #12
 8082846:	f7fe f853 	bl	80808f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

	// Post our event
	Particle.publish(eventName, "", PRIVATE);
}
 808284a:	b004      	add	sp, #16
 808284c:	bd10      	pop	{r4, pc}
 808284e:	bf00      	nop
 8082850:	080828c1 	.word	0x080828c1
 8082854:	0808b7b2 	.word	0x0808b7b2
 8082858:	20000410 	.word	0x20000410
 808285c:	20000300 	.word	0x20000300
 8082860:	0808b70c 	.word	0x0808b70c

08082864 <_ZN12SessionCheck15waitToSendStateEv>:
void SessionCheck::waitToSendState() {
 8082864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082866:	4604      	mov	r4, r0
 8082868:	f002 f952 	bl	8084b10 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - stateTime < CHECK_PERIOD_MS) {
 808286c:	6a23      	ldr	r3, [r4, #32]
 808286e:	1ac0      	subs	r0, r0, r3
 8082870:	f247 532f 	movw	r3, #29999	; 0x752f
 8082874:	4298      	cmp	r0, r3
 8082876:	d920      	bls.n	80828ba <_ZN12SessionCheck15waitToSendStateEv+0x56>
 8082878:	f002 f94a 	bl	8084b10 <HAL_Timer_Get_Milli_Seconds>
	stateTime = millis();
 808287c:	6220      	str	r0, [r4, #32]
	if (!Time.isValid()) {
 808287e:	f004 fa49 	bl	8086d14 <_ZN9TimeClass7isValidEv>
 8082882:	b1d0      	cbz	r0, 80828ba <_ZN12SessionCheck15waitToSendStateEv+0x56>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8082884:	f002 fc44 	bl	8085110 <spark_cloud_flag_connected>
	if (!Particle.connected()) {
 8082888:	b1b8      	cbz	r0, 80828ba <_ZN12SessionCheck15waitToSendStateEv+0x56>
	time_t now = Time.now();
 808288a:	f004 fa60 	bl	8086d4e <_ZN9TimeClass3nowEv>
	if (now - sessionRetainedData.lastCheckSecs < checkPeriodSecs) {
 808288e:	e9d4 7602 	ldrd	r7, r6, [r4, #8]
 8082892:	4b0a      	ldr	r3, [pc, #40]	; (80828bc <_ZN12SessionCheck15waitToSendStateEv+0x58>)
	time_t now = Time.now();
 8082894:	17c5      	asrs	r5, r0, #31
	if (now - sessionRetainedData.lastCheckSecs < checkPeriodSecs) {
 8082896:	e9d3 2102 	ldrd	r2, r1, [r3, #8]
 808289a:	1a82      	subs	r2, r0, r2
 808289c:	eb65 0101 	sbc.w	r1, r5, r1
 80828a0:	42ba      	cmp	r2, r7
 80828a2:	eb71 0206 	sbcs.w	r2, r1, r6
 80828a6:	db08      	blt.n	80828ba <_ZN12SessionCheck15waitToSendStateEv+0x56>
	sessionRetainedData.lastCheckSecs = now;
 80828a8:	e9c3 0502 	strd	r0, r5, [r3, #8]
	numFailures = 0;
 80828ac:	2300      	movs	r3, #0
	sendEvent();
 80828ae:	4620      	mov	r0, r4
	numFailures = 0;
 80828b0:	62a3      	str	r3, [r4, #40]	; 0x28
}
 80828b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	sendEvent();
 80828b6:	f7ff bfa7 	b.w	8082808 <_ZN12SessionCheck9sendEventEv>
}
 80828ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80828bc:	40024008 	.word	0x40024008

080828c0 <_ZN12SessionCheck20waitForResponseStateEv>:

void SessionCheck::waitForResponseState() {
 80828c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (gotResponse) {
 80828c2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
void SessionCheck::waitForResponseState() {
 80828c6:	4604      	mov	r4, r0
	if (gotResponse) {
 80828c8:	b153      	cbz	r3, 80828e0 <_ZN12SessionCheck20waitForResponseStateEv+0x20>
		// Success
		stateHandler = &SessionCheck::waitToSendState;
 80828ca:	4b23      	ldr	r3, [pc, #140]	; (8082958 <_ZN12SessionCheck20waitForResponseStateEv+0x98>)
 80828cc:	a902      	add	r1, sp, #8
 80828ce:	9302      	str	r3, [sp, #8]
 80828d0:	2300      	movs	r3, #0
 80828d2:	302c      	adds	r0, #44	; 0x2c
 80828d4:	9303      	str	r3, [sp, #12]
 80828d6:	f7ff ff1b 	bl	8082710 <_ZNSt8functionIFvR12SessionCheckEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
 80828da:	f002 f919 	bl	8084b10 <HAL_Timer_Get_Milli_Seconds>
		stateTime = millis();
 80828de:	6220      	str	r0, [r4, #32]
 80828e0:	f002 f916 	bl	8084b10 <HAL_Timer_Get_Milli_Seconds>
	}

	if (millis() - stateTime < RECEIVE_TIMEOUT_MS) {
 80828e4:	6a23      	ldr	r3, [r4, #32]
 80828e6:	1ac0      	subs	r0, r0, r3
 80828e8:	f64a 73c7 	movw	r3, #44999	; 0xafc7
 80828ec:	4298      	cmp	r0, r3
 80828ee:	d930      	bls.n	8082952 <_ZN12SessionCheck20waitForResponseStateEv+0x92>
		// Waiting still
		return;
	}

	ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_SESSION_EVENT_LOST);
 80828f0:	2100      	movs	r1, #0
 80828f2:	200e      	movs	r0, #14
 80828f4:	f000 f9a0 	bl	8082c38 <_ZN16ConnectionEvents8addEventEii>

	// Failed to receive event
	if (++numFailures < NUM_FAILURES_BEFORE_RESET_SESSION) {
 80828f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80828fa:	3301      	adds	r3, #1
 80828fc:	2b01      	cmp	r3, #1
 80828fe:	62a3      	str	r3, [r4, #40]	; 0x28
 8082900:	dc05      	bgt.n	808290e <_ZN12SessionCheck20waitForResponseStateEv+0x4e>
		// Try sending again just in case
		sendEvent();
 8082902:	4620      	mov	r0, r4
		ConnectionCheck::getInstance()->fullModemReset();
	}
	else {
		System.reset();
	}
}
 8082904:	b004      	add	sp, #16
 8082906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		sendEvent();
 808290a:	f7ff bf7d 	b.w	8082808 <_ZN12SessionCheck9sendEventEv>
	ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_SESSION_RESET);
 808290e:	2100      	movs	r1, #0
 8082910:	200f      	movs	r0, #15
 8082912:	f000 f991 	bl	8082c38 <_ZN16ConnectionEvents8addEventEii>
 8082916:	4b11      	ldr	r3, [pc, #68]	; (808295c <_ZN12SessionCheck20waitForResponseStateEv+0x9c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8082918:	4a11      	ldr	r2, [pc, #68]	; (8082960 <_ZN12SessionCheck20waitForResponseStateEv+0xa0>)
 808291a:	781b      	ldrb	r3, [r3, #0]
 808291c:	4911      	ldr	r1, [pc, #68]	; (8082964 <_ZN12SessionCheck20waitForResponseStateEv+0xa4>)
 808291e:	f88d 3000 	strb.w	r3, [sp]
 8082922:	a802      	add	r0, sp, #8
 8082924:	233c      	movs	r3, #60	; 0x3c
 8082926:	f004 fd43 	bl	80873b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 808292a:	a803      	add	r0, sp, #12
 808292c:	f7fd ffe0 	bl	80808f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	delay(2000);
 8082930:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8082934:	f004 fa26 	bl	8086d84 <delay>
 8082938:	4b0b      	ldr	r3, [pc, #44]	; (8082968 <_ZN12SessionCheck20waitForResponseStateEv+0xa8>)
 808293a:	6818      	ldr	r0, [r3, #0]
	if (ConnectionCheck::getInstance()) {
 808293c:	b120      	cbz	r0, 8082948 <_ZN12SessionCheck20waitForResponseStateEv+0x88>
}
 808293e:	b004      	add	sp, #16
 8082940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ConnectionCheck::getInstance()->fullModemReset();
 8082944:	f7ff bcae 	b.w	80822a4 <_ZN15ConnectionCheck14fullModemResetEv>
}
 8082948:	b004      	add	sp, #16
 808294a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		System.reset();
 808294e:	f002 bda4 	b.w	808549a <_ZN11SystemClass5resetEv>
}
 8082952:	b004      	add	sp, #16
 8082954:	bd10      	pop	{r4, pc}
 8082956:	bf00      	nop
 8082958:	08082865 	.word	0x08082865
 808295c:	20000300 	.word	0x20000300
 8082960:	0808b70c 	.word	0x0808b70c
 8082964:	0808b682 	.word	0x0808b682
 8082968:	200002f8 	.word	0x200002f8

0808296c <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 808296c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 808296e:	2300      	movs	r3, #0
 8082970:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 8082972:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 8082974:	4604      	mov	r4, r0
 8082976:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 8082978:	b12b      	cbz	r3, 8082986 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 808297a:	2202      	movs	r2, #2
 808297c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 808297e:	68eb      	ldr	r3, [r5, #12]
 8082980:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8082982:	68ab      	ldr	r3, [r5, #8]
 8082984:	60a3      	str	r3, [r4, #8]
    }
 8082986:	4620      	mov	r0, r4
 8082988:	bd38      	pop	{r3, r4, r5, pc}
	...

0808298c <_ZN12SessionCheck5setupEv>:
void SessionCheck::setup() {
 808298c:	b570      	push	{r4, r5, r6, lr}
	if (sessionRetainedData.magic != SESSION_MAGIC) {
 808298e:	4b1d      	ldr	r3, [pc, #116]	; (8082a04 <_ZN12SessionCheck5setupEv+0x78>)
 8082990:	4a1d      	ldr	r2, [pc, #116]	; (8082a08 <_ZN12SessionCheck5setupEv+0x7c>)
 8082992:	6819      	ldr	r1, [r3, #0]
void SessionCheck::setup() {
 8082994:	4604      	mov	r4, r0
	if (sessionRetainedData.magic != SESSION_MAGIC) {
 8082996:	4291      	cmp	r1, r2
void SessionCheck::setup() {
 8082998:	b08a      	sub	sp, #40	; 0x28
	if (sessionRetainedData.magic != SESSION_MAGIC) {
 808299a:	d004      	beq.n	80829a6 <_ZN12SessionCheck5setupEv+0x1a>
		sessionRetainedData.lastCheckSecs = 0;
 808299c:	2000      	movs	r0, #0
 808299e:	2100      	movs	r1, #0
 80829a0:	e9c3 0102 	strd	r0, r1, [r3, #8]
		sessionRetainedData.magic = SESSION_MAGIC;
 80829a4:	601a      	str	r2, [r3, #0]
    _Function_base() : _M_manager(nullptr) { }
 80829a6:	2500      	movs	r5, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80829a8:	200c      	movs	r0, #12
	const char * c_str() const { return buffer; }
 80829aa:	6926      	ldr	r6, [r4, #16]
    _Function_base() : _M_manager(nullptr) { }
 80829ac:	9504      	str	r5, [sp, #16]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80829ae:	f7fd fb84 	bl	80800ba <_Znwj>
 80829b2:	b118      	cbz	r0, 80829bc <_ZN12SessionCheck5setupEv+0x30>
      _Bind(_Bind&&) = default;
 80829b4:	4b15      	ldr	r3, [pc, #84]	; (8082a0c <_ZN12SessionCheck5setupEv+0x80>)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80829b6:	6084      	str	r4, [r0, #8]
 80829b8:	e9c0 3500 	strd	r3, r5, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
 80829bc:	4b14      	ldr	r3, [pc, #80]	; (8082a10 <_ZN12SessionCheck5setupEv+0x84>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80829be:	9002      	str	r0, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
 80829c0:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 80829c2:	4b14      	ldr	r3, [pc, #80]	; (8082a14 <_ZN12SessionCheck5setupEv+0x88>)
        return subscribe_wiring(eventName, handler, scope);
 80829c4:	a902      	add	r1, sp, #8
 80829c6:	a806      	add	r0, sp, #24
 80829c8:	9304      	str	r3, [sp, #16]
 80829ca:	f7ff ffcf 	bl	808296c <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
        if (handler) // if the call-wrapper has wrapped a callable object
 80829ce:	9b08      	ldr	r3, [sp, #32]
 80829d0:	b17b      	cbz	r3, 80829f2 <_ZN12SessionCheck5setupEv+0x66>
            auto wrapper = new wiring_event_handler_t(handler);
 80829d2:	2010      	movs	r0, #16
 80829d4:	f7fd fb71 	bl	80800ba <_Znwj>
 80829d8:	4604      	mov	r4, r0
 80829da:	b150      	cbz	r0, 80829f2 <_ZN12SessionCheck5setupEv+0x66>
 80829dc:	a906      	add	r1, sp, #24
 80829de:	f7ff ffc5 	bl	808296c <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
                success = spark_subscribe(eventName, (EventHandler)call_wiring_event_handler, wrapper, scope, deviceID, NULL);
 80829e2:	2300      	movs	r3, #0
 80829e4:	4622      	mov	r2, r4
 80829e6:	4630      	mov	r0, r6
 80829e8:	e9cd 3300 	strd	r3, r3, [sp]
 80829ec:	490a      	ldr	r1, [pc, #40]	; (8082a18 <_ZN12SessionCheck5setupEv+0x8c>)
 80829ee:	f002 fba7 	bl	8085140 <spark_subscribe>
    class function<_Res(_ArgTypes...)>
 80829f2:	a806      	add	r0, sp, #24
 80829f4:	f7fd ff02 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
 80829f8:	a802      	add	r0, sp, #8
 80829fa:	f7fd feff 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
}
 80829fe:	b00a      	add	sp, #40	; 0x28
 8082a00:	bd70      	pop	{r4, r5, r6, pc}
 8082a02:	bf00      	nop
 8082a04:	40024008 	.word	0x40024008
 8082a08:	4a6849fe 	.word	0x4a6849fe
 8082a0c:	0808263d 	.word	0x0808263d
 8082a10:	08082645 	.word	0x08082645
 8082a14:	08082667 	.word	0x08082667
 8082a18:	08087173 	.word	0x08087173

08082a1c <_GLOBAL__sub_I__ZN12SessionCheck19sessionRetainedDataE>:
        val_(val) {
 8082a1c:	2201      	movs	r2, #1
 8082a1e:	4b01      	ldr	r3, [pc, #4]	; (8082a24 <_GLOBAL__sub_I__ZN12SessionCheck19sessionRetainedDataE+0x8>)
 8082a20:	701a      	strb	r2, [r3, #0]
}
 8082a22:	4770      	bx	lr
 8082a24:	20000300 	.word	0x20000300

08082a28 <_ZN16ConnectionEventsD1Ev>:
	instance = this;
}

ConnectionEvents::~ConnectionEvents() {

}
 8082a28:	4770      	bx	lr

08082a2a <_ZN16ConnectionEventsD0Ev>:
ConnectionEvents::~ConnectionEvents() {
 8082a2a:	b510      	push	{r4, lr}
 8082a2c:	4604      	mov	r4, r0
}
 8082a2e:	210c      	movs	r1, #12
 8082a30:	f005 fd65 	bl	80884fe <_ZdlPvj>
 8082a34:	4620      	mov	r0, r4
 8082a36:	bd10      	pop	{r4, pc}

08082a38 <_ZN16ConnectionEvents4loopEv.part.0>:
	}
}

// This should be called from loop()
// If there are queued events and there is a cloud connection they're published, oldest first.
void ConnectionEvents::loop() {
 8082a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	}

	// Send events
	char buf[256]; // 255 data bytes, plus null-terminator
	size_t numHandled;
	size_t offset = 0;
 8082a3c:	f04f 0800 	mov.w	r8, #0
 8082a40:	4d30      	ldr	r5, [pc, #192]	; (8082b04 <_ZN16ConnectionEvents4loopEv.part.0+0xcc>)
void ConnectionEvents::loop() {
 8082a42:	4607      	mov	r7, r0

	// Pack as many events as we have, up to what will fit in a 255 byte publish
	for(numHandled = 0; numHandled < connectionEventData.eventCount; numHandled++) {
 8082a44:	4646      	mov	r6, r8
 8082a46:	462c      	mov	r4, r5
		char entryBuf[64];

		ConnectionEventInfo *ev = &connectionEventData.events[numHandled];
		size_t len = snprintf(entryBuf, sizeof(entryBuf), "%lu,%lu,%d,%d;", ev->tsDate, ev->tsMillis, ev->eventCode, ev->data);
 8082a48:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8082b08 <_ZN16ConnectionEvents4loopEv.part.0+0xd0>
void ConnectionEvents::loop() {
 8082a4c:	b0d4      	sub	sp, #336	; 0x150
	for(numHandled = 0; numHandled < connectionEventData.eventCount; numHandled++) {
 8082a4e:	6863      	ldr	r3, [r4, #4]
 8082a50:	42b3      	cmp	r3, r6
 8082a52:	d91b      	bls.n	8082a8c <_ZN16ConnectionEvents4loopEv.part.0+0x54>
		size_t len = snprintf(entryBuf, sizeof(entryBuf), "%lu,%lu,%d,%d;", ev->tsDate, ev->tsMillis, ev->eventCode, ev->data);
 8082a54:	696b      	ldr	r3, [r5, #20]
 8082a56:	4652      	mov	r2, sl
 8082a58:	9302      	str	r3, [sp, #8]
 8082a5a:	692b      	ldr	r3, [r5, #16]
 8082a5c:	2140      	movs	r1, #64	; 0x40
 8082a5e:	9301      	str	r3, [sp, #4]
 8082a60:	68eb      	ldr	r3, [r5, #12]
 8082a62:	a804      	add	r0, sp, #16
 8082a64:	9300      	str	r3, [sp, #0]
 8082a66:	68ab      	ldr	r3, [r5, #8]
 8082a68:	f002 fbaa 	bl	80851c0 <snprintf>
		if ((offset + len) >= sizeof(buf)) {
 8082a6c:	eb00 0908 	add.w	r9, r0, r8
 8082a70:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8082a74:	f105 0510 	add.w	r5, r5, #16
 8082a78:	d808      	bhi.n	8082a8c <_ZN16ConnectionEvents4loopEv.part.0+0x54>
			// Not enough buffer space to send in this publish; try again later
			break;
		}
		strcpy(&buf[offset], entryBuf);
 8082a7a:	ab14      	add	r3, sp, #80	; 0x50
 8082a7c:	eb03 0008 	add.w	r0, r3, r8
 8082a80:	a904      	add	r1, sp, #16
 8082a82:	f008 f95e 	bl	808ad42 <strcpy>
	for(numHandled = 0; numHandled < connectionEventData.eventCount; numHandled++) {
 8082a86:	46c8      	mov	r8, r9
 8082a88:	3601      	adds	r6, #1
 8082a8a:	e7e0      	b.n	8082a4e <_ZN16ConnectionEvents4loopEv.part.0+0x16>
		offset += len;
	}
	connectionEventData.eventCount -= numHandled;
 8082a8c:	6862      	ldr	r2, [r4, #4]
 8082a8e:	1b92      	subs	r2, r2, r6
 8082a90:	6062      	str	r2, [r4, #4]
	if (connectionEventData.eventCount > 0) {
 8082a92:	2a00      	cmp	r2, #0
 8082a94:	d02f      	beq.n	8082af6 <_ZN16ConnectionEvents4loopEv.part.0+0xbe>
		Log.info("couldn't send all events, saving %d for later", connectionEventData.eventCount);
 8082a96:	491d      	ldr	r1, [pc, #116]	; (8082b0c <_ZN16ConnectionEvents4loopEv.part.0+0xd4>)
 8082a98:	481d      	ldr	r0, [pc, #116]	; (8082b10 <_ZN16ConnectionEvents4loopEv.part.0+0xd8>)
 8082a9a:	f7ff fba5 	bl	80821e8 <_ZNK5spark6Logger4infoEPKcz>
		memmove(&connectionEventData.events[0], &connectionEventData.events[numHandled], connectionEventData.eventCount * sizeof(ConnectionEventData));
 8082a9e:	f44f 7202 	mov.w	r2, #520	; 0x208
 8082aa2:	6863      	ldr	r3, [r4, #4]
 8082aa4:	eb04 1106 	add.w	r1, r4, r6, lsl #4
 8082aa8:	435a      	muls	r2, r3
 8082aaa:	481a      	ldr	r0, [pc, #104]	; (8082b14 <_ZN16ConnectionEvents4loopEv.part.0+0xdc>)
 8082aac:	3108      	adds	r1, #8
 8082aae:	f008 f8d7 	bl	808ac60 <memmove>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 8082ab2:	4b19      	ldr	r3, [pc, #100]	; (8082b18 <_ZN16ConnectionEvents4loopEv.part.0+0xe0>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8082ab4:	6879      	ldr	r1, [r7, #4]
 8082ab6:	781b      	ldrb	r3, [r3, #0]
 8082ab8:	aa14      	add	r2, sp, #80	; 0x50
 8082aba:	f88d 3000 	strb.w	r3, [sp]
 8082abe:	a804      	add	r0, sp, #16
 8082ac0:	233c      	movs	r3, #60	; 0x3c
 8082ac2:	f004 fc75 	bl	80873b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
 8082ac6:	9c05      	ldr	r4, [sp, #20]
 8082ac8:	b17c      	cbz	r4, 8082aea <_ZN16ConnectionEvents4loopEv.part.0+0xb2>
      if (--_M_use_count == 0)
 8082aca:	6863      	ldr	r3, [r4, #4]
 8082acc:	3b01      	subs	r3, #1
 8082ace:	6063      	str	r3, [r4, #4]
 8082ad0:	b95b      	cbnz	r3, 8082aea <_ZN16ConnectionEvents4loopEv.part.0+0xb2>
          _M_dispose();
 8082ad2:	6823      	ldr	r3, [r4, #0]
 8082ad4:	4620      	mov	r0, r4
 8082ad6:	689b      	ldr	r3, [r3, #8]
 8082ad8:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8082ada:	68a3      	ldr	r3, [r4, #8]
 8082adc:	3b01      	subs	r3, #1
 8082ade:	60a3      	str	r3, [r4, #8]
 8082ae0:	b91b      	cbnz	r3, 8082aea <_ZN16ConnectionEvents4loopEv.part.0+0xb2>
            _M_destroy();
 8082ae2:	6823      	ldr	r3, [r4, #0]
 8082ae4:	4620      	mov	r0, r4
 8082ae6:	68db      	ldr	r3, [r3, #12]
 8082ae8:	4798      	blx	r3
 8082aea:	f002 f811 	bl	8084b10 <HAL_Timer_Get_Milli_Seconds>
	else {
		Log.info("sent %d events", numHandled);
	}

	Particle.publish(connectionEventName, buf, PRIVATE);
	connectionEventLastSent = millis();
 8082aee:	60b8      	str	r0, [r7, #8]
}
 8082af0:	b054      	add	sp, #336	; 0x150
 8082af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		Log.info("sent %d events", numHandled);
 8082af6:	4632      	mov	r2, r6
 8082af8:	4908      	ldr	r1, [pc, #32]	; (8082b1c <_ZN16ConnectionEvents4loopEv.part.0+0xe4>)
 8082afa:	4805      	ldr	r0, [pc, #20]	; (8082b10 <_ZN16ConnectionEvents4loopEv.part.0+0xd8>)
 8082afc:	f7ff fb74 	bl	80821e8 <_ZNK5spark6Logger4infoEPKcz>
 8082b00:	e7d7      	b.n	8082ab2 <_ZN16ConnectionEvents4loopEv.part.0+0x7a>
 8082b02:	bf00      	nop
 8082b04:	40024018 	.word	0x40024018
 8082b08:	0808b7e4 	.word	0x0808b7e4
 8082b0c:	0808b7f3 	.word	0x0808b7f3
 8082b10:	20000410 	.word	0x20000410
 8082b14:	40024020 	.word	0x40024020
 8082b18:	20000301 	.word	0x20000301
 8082b1c:	0808b821 	.word	0x0808b821

08082b20 <_ZN16ConnectionEventsC1EPKc>:
ConnectionEvents::ConnectionEvents(const char *connectionEventName) : connectionEventName(connectionEventName) {
 8082b20:	4a03      	ldr	r2, [pc, #12]	; (8082b30 <_ZN16ConnectionEventsC1EPKc+0x10>)
 8082b22:	e9c0 2100 	strd	r2, r1, [r0]
 8082b26:	2200      	movs	r2, #0
 8082b28:	6082      	str	r2, [r0, #8]
	instance = this;
 8082b2a:	4a02      	ldr	r2, [pc, #8]	; (8082b34 <_ZN16ConnectionEventsC1EPKc+0x14>)
 8082b2c:	6010      	str	r0, [r2, #0]
}
 8082b2e:	4770      	bx	lr
 8082b30:	0808b89c 	.word	0x0808b89c
 8082b34:	20000304 	.word	0x20000304

08082b38 <_ZN16ConnectionEvents4loopEv>:
void ConnectionEvents::loop() {
 8082b38:	b510      	push	{r4, lr}
	if (connectionEventData.eventCount == 0) {
 8082b3a:	4b0a      	ldr	r3, [pc, #40]	; (8082b64 <_ZN16ConnectionEvents4loopEv+0x2c>)
void ConnectionEvents::loop() {
 8082b3c:	4604      	mov	r4, r0
	if (connectionEventData.eventCount == 0) {
 8082b3e:	685b      	ldr	r3, [r3, #4]
 8082b40:	b17b      	cbz	r3, 8082b62 <_ZN16ConnectionEvents4loopEv+0x2a>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8082b42:	f002 fae5 	bl	8085110 <spark_cloud_flag_connected>
	if (!Particle.connected()) {
 8082b46:	b160      	cbz	r0, 8082b62 <_ZN16ConnectionEvents4loopEv+0x2a>
 8082b48:	f001 ffe2 	bl	8084b10 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - connectionEventLastSent < PUBLISH_MIN_PERIOD_MS) {
 8082b4c:	68a3      	ldr	r3, [r4, #8]
 8082b4e:	1ac0      	subs	r0, r0, r3
 8082b50:	f240 33f1 	movw	r3, #1009	; 0x3f1
 8082b54:	4298      	cmp	r0, r3
 8082b56:	d904      	bls.n	8082b62 <_ZN16ConnectionEvents4loopEv+0x2a>
 8082b58:	4620      	mov	r0, r4
}
 8082b5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8082b5e:	f7ff bf6b 	b.w	8082a38 <_ZN16ConnectionEvents4loopEv.part.0>
 8082b62:	bd10      	pop	{r4, pc}
 8082b64:	40024018 	.word	0x40024018

08082b68 <_ZN16ConnectionEvents3addEii>:

// Add a new event. This should only be called from the main loop thread.
// Do not call from other threads like the system thread, software timer, or interrupt service routine.
void ConnectionEvents::add(int eventCode, int data /* = 0 */) {
 8082b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (connectionEventData.eventCount >= CONNECTION_EVENTS_MAX_EVENTS) {
 8082b6c:	4c17      	ldr	r4, [pc, #92]	; (8082bcc <_ZN16ConnectionEvents3addEii+0x64>)
void ConnectionEvents::add(int eventCode, int data /* = 0 */) {
 8082b6e:	460f      	mov	r7, r1
	if (connectionEventData.eventCount >= CONNECTION_EVENTS_MAX_EVENTS) {
 8082b70:	6863      	ldr	r3, [r4, #4]
void ConnectionEvents::add(int eventCode, int data /* = 0 */) {
 8082b72:	4690      	mov	r8, r2
	if (connectionEventData.eventCount >= CONNECTION_EVENTS_MAX_EVENTS) {
 8082b74:	2b1f      	cmp	r3, #31
 8082b76:	d90f      	bls.n	8082b98 <_ZN16ConnectionEvents3addEii+0x30>
		// Throw out oldest event
		Log.info("discarding old event");
 8082b78:	4915      	ldr	r1, [pc, #84]	; (8082bd0 <_ZN16ConnectionEvents3addEii+0x68>)
 8082b7a:	4816      	ldr	r0, [pc, #88]	; (8082bd4 <_ZN16ConnectionEvents3addEii+0x6c>)
 8082b7c:	f7ff fb34 	bl	80821e8 <_ZNK5spark6Logger4infoEPKcz>
		connectionEventData.eventCount--;
		memmove(&connectionEventData.events[0], &connectionEventData.events[1], connectionEventData.eventCount * sizeof(ConnectionEventData));
 8082b80:	f44f 7202 	mov.w	r2, #520	; 0x208
		connectionEventData.eventCount--;
 8082b84:	6863      	ldr	r3, [r4, #4]
		memmove(&connectionEventData.events[0], &connectionEventData.events[1], connectionEventData.eventCount * sizeof(ConnectionEventData));
 8082b86:	f104 0118 	add.w	r1, r4, #24
		connectionEventData.eventCount--;
 8082b8a:	3b01      	subs	r3, #1
		memmove(&connectionEventData.events[0], &connectionEventData.events[1], connectionEventData.eventCount * sizeof(ConnectionEventData));
 8082b8c:	435a      	muls	r2, r3
 8082b8e:	f104 0008 	add.w	r0, r4, #8
		connectionEventData.eventCount--;
 8082b92:	6063      	str	r3, [r4, #4]
		memmove(&connectionEventData.events[0], &connectionEventData.events[1], connectionEventData.eventCount * sizeof(ConnectionEventData));
 8082b94:	f008 f864 	bl	808ac60 <memmove>
	}

	// Add new event
	ConnectionEventInfo *ev = &connectionEventData.events[connectionEventData.eventCount++];
 8082b98:	6866      	ldr	r6, [r4, #4]
 8082b9a:	1c75      	adds	r5, r6, #1
 8082b9c:	6065      	str	r5, [r4, #4]
	ev->tsDate = Time.now();
 8082b9e:	f004 f8d6 	bl	8086d4e <_ZN9TimeClass3nowEv>
 8082ba2:	eb04 1606 	add.w	r6, r4, r6, lsl #4
 8082ba6:	60b0      	str	r0, [r6, #8]
 8082ba8:	f001 ffb2 	bl	8084b10 <HAL_Timer_Get_Milli_Seconds>
	ev->tsMillis = millis();
	ev->eventCode = eventCode;
 8082bac:	012b      	lsls	r3, r5, #4
 8082bae:	eb04 1505 	add.w	r5, r4, r5, lsl #4
	ev->tsMillis = millis();
 8082bb2:	60f0      	str	r0, [r6, #12]
	ev->eventCode = eventCode;
 8082bb4:	50e7      	str	r7, [r4, r3]
	ev->data = data;

	Log.info("connectionEvent event=%d data=%d", eventCode, data);
 8082bb6:	463a      	mov	r2, r7
 8082bb8:	4643      	mov	r3, r8
 8082bba:	4907      	ldr	r1, [pc, #28]	; (8082bd8 <_ZN16ConnectionEvents3addEii+0x70>)
 8082bbc:	4805      	ldr	r0, [pc, #20]	; (8082bd4 <_ZN16ConnectionEvents3addEii+0x6c>)
	ev->data = data;
 8082bbe:	f8c5 8004 	str.w	r8, [r5, #4]
	Log.info("connectionEvent event=%d data=%d", eventCode, data);
 8082bc2:	f7ff fb11 	bl	80821e8 <_ZNK5spark6Logger4infoEPKcz>
}
 8082bc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8082bca:	bf00      	nop
 8082bcc:	40024018 	.word	0x40024018
 8082bd0:	0808b830 	.word	0x0808b830
 8082bd4:	20000410 	.word	0x20000410
 8082bd8:	0808b845 	.word	0x0808b845

08082bdc <_ZN16ConnectionEvents5setupEv>:
void ConnectionEvents::setup() {
 8082bdc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (connectionEventData.eventMagic != CONNECTION_EVENT_MAGIC ||
 8082bde:	4d12      	ldr	r5, [pc, #72]	; (8082c28 <_ZN16ConnectionEvents5setupEv+0x4c>)
 8082be0:	4e12      	ldr	r6, [pc, #72]	; (8082c2c <_ZN16ConnectionEvents5setupEv+0x50>)
 8082be2:	682b      	ldr	r3, [r5, #0]
void ConnectionEvents::setup() {
 8082be4:	4604      	mov	r4, r0
	if (connectionEventData.eventMagic != CONNECTION_EVENT_MAGIC ||
 8082be6:	42b3      	cmp	r3, r6
 8082be8:	d102      	bne.n	8082bf0 <_ZN16ConnectionEvents5setupEv+0x14>
 8082bea:	686b      	ldr	r3, [r5, #4]
 8082bec:	2b20      	cmp	r3, #32
 8082bee:	d904      	bls.n	8082bfa <_ZN16ConnectionEvents5setupEv+0x1e>
		Log.info("initializing connection event retained memory");
 8082bf0:	490f      	ldr	r1, [pc, #60]	; (8082c30 <_ZN16ConnectionEvents5setupEv+0x54>)
 8082bf2:	4810      	ldr	r0, [pc, #64]	; (8082c34 <_ZN16ConnectionEvents5setupEv+0x58>)
 8082bf4:	f7ff faf8 	bl	80821e8 <_ZNK5spark6Logger4infoEPKcz>
		connectionEventData.eventMagic = CONNECTION_EVENT_MAGIC;
 8082bf8:	602e      	str	r6, [r5, #0]
	add(CONNECTION_EVENT_SETUP_STARTED);
 8082bfa:	2200      	movs	r2, #0
 8082bfc:	4620      	mov	r0, r4
 8082bfe:	4611      	mov	r1, r2
 8082c00:	f7ff ffb2 	bl	8082b68 <_ZN16ConnectionEvents3addEii>
        int reason = RESET_REASON_NONE;
 8082c04:	2200      	movs	r2, #0
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8082c06:	a801      	add	r0, sp, #4
 8082c08:	4611      	mov	r1, r2
        int reason = RESET_REASON_NONE;
 8082c0a:	9201      	str	r2, [sp, #4]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8082c0c:	f001 ffa0 	bl	8084b50 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 8082c10:	9a01      	ldr	r2, [sp, #4]
	if (resetReason != RESET_REASON_NONE) {
 8082c12:	b132      	cbz	r2, 8082c22 <_ZN16ConnectionEvents5setupEv+0x46>
		add(CONNECTION_EVENT_RESET_REASON, resetReason);
 8082c14:	2112      	movs	r1, #18
 8082c16:	4620      	mov	r0, r4
}
 8082c18:	b002      	add	sp, #8
 8082c1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		add(CONNECTION_EVENT_RESET_REASON, resetReason);
 8082c1e:	f7ff bfa3 	b.w	8082b68 <_ZN16ConnectionEvents3addEii>
}
 8082c22:	b002      	add	sp, #8
 8082c24:	bd70      	pop	{r4, r5, r6, pc}
 8082c26:	bf00      	nop
 8082c28:	40024018 	.word	0x40024018
 8082c2c:	5c39d416 	.word	0x5c39d416
 8082c30:	0808b866 	.word	0x0808b866
 8082c34:	20000410 	.word	0x20000410

08082c38 <_ZN16ConnectionEvents8addEventEii>:

// static
void ConnectionEvents::addEvent(int eventCode, int data) {
 8082c38:	460a      	mov	r2, r1
	if (instance) {
 8082c3a:	4904      	ldr	r1, [pc, #16]	; (8082c4c <_ZN16ConnectionEvents8addEventEii+0x14>)
void ConnectionEvents::addEvent(int eventCode, int data) {
 8082c3c:	4603      	mov	r3, r0
	if (instance) {
 8082c3e:	6808      	ldr	r0, [r1, #0]
 8082c40:	b110      	cbz	r0, 8082c48 <_ZN16ConnectionEvents8addEventEii+0x10>
		instance->add(eventCode, data);
 8082c42:	4619      	mov	r1, r3
 8082c44:	f7ff bf90 	b.w	8082b68 <_ZN16ConnectionEvents3addEii>
	}
}
 8082c48:	4770      	bx	lr
 8082c4a:	bf00      	nop
 8082c4c:	20000304 	.word	0x20000304

08082c50 <_GLOBAL__sub_I__ZN16ConnectionEvents19connectionEventDataE>:
        val_(val) {
 8082c50:	2201      	movs	r2, #1
 8082c52:	4b01      	ldr	r3, [pc, #4]	; (8082c58 <_GLOBAL__sub_I__ZN16ConnectionEvents19connectionEventDataE+0x8>)
 8082c54:	701a      	strb	r2, [r3, #0]
 8082c56:	4770      	bx	lr
 8082c58:	20000301 	.word	0x20000301

08082c5c <_ZN10PowerCheckD1Ev>:
#include "Particle.h"
#include "PowerCheck.h"
PowerCheck::PowerCheck() {
}

PowerCheck::~PowerCheck() {
 8082c5c:	b510      	push	{r4, lr}
 8082c5e:	4604      	mov	r4, r0
 8082c60:	4b03      	ldr	r3, [pc, #12]	; (8082c70 <_ZN10PowerCheckD1Ev+0x14>)
 8082c62:	f840 3b04 	str.w	r3, [r0], #4
 8082c66:	f002 faf9 	bl	808525c <_ZN4PMICD1Ev>
}
 8082c6a:	4620      	mov	r0, r4
 8082c6c:	bd10      	pop	{r4, pc}
 8082c6e:	bf00      	nop
 8082c70:	0808b8ac 	.word	0x0808b8ac

08082c74 <_ZN10PowerCheckD0Ev>:
PowerCheck::~PowerCheck() {
 8082c74:	b510      	push	{r4, lr}
 8082c76:	4604      	mov	r4, r0
}
 8082c78:	f7ff fff0 	bl	8082c5c <_ZN10PowerCheckD1Ev>
 8082c7c:	4620      	mov	r0, r4
 8082c7e:	210c      	movs	r1, #12
 8082c80:	f005 fc3d 	bl	80884fe <_ZdlPvj>
 8082c84:	4620      	mov	r0, r4
 8082c86:	bd10      	pop	{r4, pc}

08082c88 <_ZN10PowerCheck16interruptHandlerEv>:
		// between charging and done when there is no battery.
		return false;
	}
}

void PowerCheck::interruptHandler() {
 8082c88:	b510      	push	{r4, lr}
 8082c8a:	4604      	mov	r4, r0
 8082c8c:	f001 ff40 	bl	8084b10 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastChange < 100) {
 8082c90:	68a3      	ldr	r3, [r4, #8]
 8082c92:	1ac0      	subs	r0, r0, r3
 8082c94:	2863      	cmp	r0, #99	; 0x63
		// We very recently had a change; assume there is no battey and we're rapidly switching
		// between fast charge and charge done
		hasBattery = false;
 8082c96:	bf94      	ite	ls
 8082c98:	2300      	movls	r3, #0
	}
	else {
		// Note: It's quite possible that hasBattery will be false when there is a battery; the logic
		// in getHasBattery() takes this into account by checking lastChange as well.
		hasBattery = true;
 8082c9a:	2301      	movhi	r3, #1
 8082c9c:	7163      	strb	r3, [r4, #5]
 8082c9e:	f001 ff37 	bl	8084b10 <HAL_Timer_Get_Milli_Seconds>
	}
	lastChange = millis();
 8082ca2:	60a0      	str	r0, [r4, #8]
}
 8082ca4:	bd10      	pop	{r4, pc}

08082ca6 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PowerCheckFvvEPS2_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8082ca6:	b410      	push	{r4}
	    return __source._M_access<_Functor*>();
 8082ca8:	6803      	ldr	r3, [r0, #0]
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
 8082caa:	685a      	ldr	r2, [r3, #4]
 8082cac:	6899      	ldr	r1, [r3, #8]
 8082cae:	1054      	asrs	r4, r2, #1
 8082cb0:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8082cb4:	07d2      	lsls	r2, r2, #31
 8082cb6:	bf48      	it	mi
 8082cb8:	590a      	ldrmi	r2, [r1, r4]
 8082cba:	681b      	ldr	r3, [r3, #0]
      }
 8082cbc:	bc10      	pop	{r4}
 8082cbe:	bf48      	it	mi
 8082cc0:	58d3      	ldrmi	r3, [r2, r3]
 8082cc2:	4718      	bx	r3

08082cc4 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PowerCheckFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	switch (__op)
 8082cc4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8082cc6:	b538      	push	{r3, r4, r5, lr}
 8082cc8:	4604      	mov	r4, r0
	switch (__op)
 8082cca:	d102      	bne.n	8082cd2 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PowerCheckFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
 8082ccc:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
 8082cce:	6023      	str	r3, [r4, #0]
	}
 8082cd0:	e003      	b.n	8082cda <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PowerCheckFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
	  switch (__op)
 8082cd2:	2a02      	cmp	r2, #2
 8082cd4:	d003      	beq.n	8082cde <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PowerCheckFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x1a>
 8082cd6:	2a03      	cmp	r2, #3
 8082cd8:	d00d      	beq.n	8082cf6 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PowerCheckFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x32>
      }
 8082cda:	2000      	movs	r0, #0
 8082cdc:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 8082cde:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
 8082ce0:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 8082ce2:	f7fd f9ea 	bl	80800ba <_Znwj>
 8082ce6:	4603      	mov	r3, r0
 8082ce8:	2800      	cmp	r0, #0
 8082cea:	d0f0      	beq.n	8082cce <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PowerCheckFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
 8082cec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8082cf0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8082cf4:	e7eb      	b.n	8082cce <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PowerCheckFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
 8082cf6:	6800      	ldr	r0, [r0, #0]
 8082cf8:	2800      	cmp	r0, #0
 8082cfa:	d0ee      	beq.n	8082cda <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PowerCheckFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
 8082cfc:	210c      	movs	r1, #12
 8082cfe:	f005 fbfe 	bl	80884fe <_ZdlPvj>
 8082d02:	e7ea      	b.n	8082cda <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PowerCheckFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>

08082d04 <_ZN10PowerCheckC1Ev>:
PowerCheck::PowerCheck() {
 8082d04:	4b06      	ldr	r3, [pc, #24]	; (8082d20 <_ZN10PowerCheckC1Ev+0x1c>)
 8082d06:	b510      	push	{r4, lr}
 8082d08:	2100      	movs	r1, #0
 8082d0a:	4604      	mov	r4, r0
 8082d0c:	f840 3b04 	str.w	r3, [r0], #4
 8082d10:	f002 fa95 	bl	808523e <_ZN4PMICC1Eb>
 8082d14:	2301      	movs	r3, #1
 8082d16:	7163      	strb	r3, [r4, #5]
 8082d18:	2300      	movs	r3, #0
}
 8082d1a:	4620      	mov	r0, r4
PowerCheck::PowerCheck() {
 8082d1c:	60a3      	str	r3, [r4, #8]
}
 8082d1e:	bd10      	pop	{r4, pc}
 8082d20:	0808b8ac 	.word	0x0808b8ac

08082d24 <_ZN10PowerCheck5setupEv>:
void PowerCheck::setup() {
 8082d24:	b530      	push	{r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8082d26:	2500      	movs	r5, #0
 8082d28:	b087      	sub	sp, #28
 8082d2a:	4604      	mov	r4, r0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082d2c:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
 8082d2e:	9504      	str	r5, [sp, #16]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082d30:	f7fd f9c3 	bl	80800ba <_Znwj>
 8082d34:	b118      	cbz	r0, 8082d3e <_ZN10PowerCheck5setupEv+0x1a>
 8082d36:	4b0d      	ldr	r3, [pc, #52]	; (8082d6c <_ZN10PowerCheck5setupEv+0x48>)
 8082d38:	6084      	str	r4, [r0, #8]
 8082d3a:	e9c0 3500 	strd	r3, r5, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
 8082d3e:	4b0c      	ldr	r3, [pc, #48]	; (8082d70 <_ZN10PowerCheck5setupEv+0x4c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082d40:	9002      	str	r0, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
 8082d42:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 8082d44:	4b0b      	ldr	r3, [pc, #44]	; (8082d74 <_ZN10PowerCheck5setupEv+0x50>)
bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
template <typename T>
bool attachInterrupt(uint16_t pin, void (T::*handler)(), T *instance, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0) {
    using namespace std::placeholders;
    return attachInterrupt(pin, std::bind(handler, instance), mode, priority, subpriority);
 8082d46:	2202      	movs	r2, #2
 8082d48:	9304      	str	r3, [sp, #16]
 8082d4a:	2300      	movs	r3, #0
 8082d4c:	202e      	movs	r0, #46	; 0x2e
 8082d4e:	9300      	str	r3, [sp, #0]
 8082d50:	a902      	add	r1, sp, #8
 8082d52:	f04f 33ff 	mov.w	r3, #4294967295
 8082d56:	f004 fe0f 	bl	8087978 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>
      if (_M_manager)
 8082d5a:	9b04      	ldr	r3, [sp, #16]
 8082d5c:	b11b      	cbz	r3, 8082d66 <_ZN10PowerCheck5setupEv+0x42>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8082d5e:	a902      	add	r1, sp, #8
 8082d60:	2203      	movs	r2, #3
 8082d62:	4608      	mov	r0, r1
 8082d64:	4798      	blx	r3
}
 8082d66:	b007      	add	sp, #28
 8082d68:	bd30      	pop	{r4, r5, pc}
 8082d6a:	bf00      	nop
 8082d6c:	08082c89 	.word	0x08082c89
 8082d70:	08082ca7 	.word	0x08082ca7
 8082d74:	08082cc5 	.word	0x08082cc5

08082d78 <_ZN10PowerCheck11getHasPowerEv>:
bool PowerCheck::getHasPower() {
 8082d78:	b508      	push	{r3, lr}
	byte systemStatus = pmic.getSystemStatus();
 8082d7a:	3004      	adds	r0, #4
 8082d7c:	f002 fab4 	bl	80852e8 <_ZN4PMIC15getSystemStatusEv>
}
 8082d80:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8082d84:	bd08      	pop	{r3, pc}

08082d86 <_ZN15Adafruit_LIS3DHD1Ev>:
  LIS3DH_INT1_SRC_YL = 0x04,
  LIS3DH_INT1_SRC_XH = 0x02,
  LIS3DH_INT1_SRC_XL = 0x01
} list3dh_ctrl_int2_src_t;

class Adafruit_LIS3DH : public Adafruit_Sensor {
 8082d86:	4770      	bx	lr

08082d88 <_ZN13AssetTracker2C1Ev>:
uint8_t internalANT[]={0xB5,0x62,0x06,0x13,0x04,0x00,0x00,0x00,0xF0,0x7D,0x8A,0x2A};
uint8_t externalANT[]={0xB5,0x62,0x06,0x13,0x04,0x00,0x01,0x00,0xF0,0x7D,0x8B,0x2E};

AssetTracker2::AssetTracker2() {

}
 8082d88:	4770      	bx	lr
	...

08082d8c <_ZN13AssetTracker25beginEv>:

void AssetTracker2::begin() {
 8082d8c:	b510      	push	{r4, lr}
    accel.begin(LIS3DH_DEFAULT_ADDRESS);
 8082d8e:	4c07      	ldr	r4, [pc, #28]	; (8082dac <_ZN13AssetTracker25beginEv+0x20>)
 8082d90:	2118      	movs	r1, #24
 8082d92:	4620      	mov	r0, r4
 8082d94:	f000 fbaf 	bl	80834f6 <_ZN15Adafruit_LIS3DH5beginEh>

    // Default to 5kHz low-power sampling
    accel.setDataRate(LIS3DH_DATARATE_LOWPOWER_5KHZ);
 8082d98:	4620      	mov	r0, r4
 8082d9a:	2109      	movs	r1, #9
 8082d9c:	f000 fac0 	bl	8083320 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>

    // Default to 4 gravities range
    accel.setRange(LIS3DH_RANGE_4_G);
 8082da0:	4620      	mov	r0, r4

}
 8082da2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    accel.setRange(LIS3DH_RANGE_4_G);
 8082da6:	2101      	movs	r1, #1
 8082da8:	f000 baa2 	b.w	80832f0 <_ZN15Adafruit_LIS3DH8setRangeE14lis3dh_range_t>
 8082dac:	20000308 	.word	0x20000308

08082db0 <_ZN13AssetTracker27readLatEv>:

float AssetTracker2::readLat() {
    return gps.latitude;
}
 8082db0:	4b01      	ldr	r3, [pc, #4]	; (8082db8 <_ZN13AssetTracker27readLatEv+0x8>)
 8082db2:	6958      	ldr	r0, [r3, #20]
 8082db4:	4770      	bx	lr
 8082db6:	bf00      	nop
 8082db8:	20000334 	.word	0x20000334

08082dbc <_ZN13AssetTracker27readLonEv>:

float AssetTracker2::readLon() {
    return gps.longitude;
}
 8082dbc:	4b01      	ldr	r3, [pc, #4]	; (8082dc4 <_ZN13AssetTracker27readLonEv+0x8>)
 8082dbe:	6998      	ldr	r0, [r3, #24]
 8082dc0:	4770      	bx	lr
 8082dc2:	bf00      	nop
 8082dc4:	20000334 	.word	0x20000334

08082dc8 <_ZN13AssetTracker210readLatDegEv>:

float AssetTracker2::readLatDeg() {
    return gps.latitudeDegrees;
}
 8082dc8:	4b01      	ldr	r3, [pc, #4]	; (8082dd0 <_ZN13AssetTracker210readLatDegEv+0x8>)
 8082dca:	69d8      	ldr	r0, [r3, #28]
 8082dcc:	4770      	bx	lr
 8082dce:	bf00      	nop
 8082dd0:	20000334 	.word	0x20000334

08082dd4 <_ZN13AssetTracker210readLonDegEv>:

float AssetTracker2::readLonDeg() {
    return gps.longitudeDegrees;
}
 8082dd4:	4b01      	ldr	r3, [pc, #4]	; (8082ddc <_ZN13AssetTracker210readLonDegEv+0x8>)
 8082dd6:	6a18      	ldr	r0, [r3, #32]
 8082dd8:	4770      	bx	lr
 8082dda:	bf00      	nop
 8082ddc:	20000334 	.word	0x20000334

08082de0 <_ZN13AssetTracker214getGpsAccuracyEv>:

float AssetTracker2::getGpsAccuracy() {
 8082de0:	b508      	push	{r3, lr}
  return (float)gps.horzAcc;
 8082de2:	4b02      	ldr	r3, [pc, #8]	; (8082dec <_ZN13AssetTracker214getGpsAccuracyEv+0xc>)
 8082de4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8082de6:	f007 fc97 	bl	808a718 <__aeabi_ui2f>
}
 8082dea:	bd08      	pop	{r3, pc}
 8082dec:	20000334 	.word	0x20000334

08082df0 <_ZN13AssetTracker212getHaccuracyEv>:
  return gps.headVehValid;
}

uint32_t AssetTracker2::getHaccuracy() {
  return gps.horzAcc;
}
 8082df0:	4b01      	ldr	r3, [pc, #4]	; (8082df8 <_ZN13AssetTracker212getHaccuracyEv+0x8>)
 8082df2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8082df4:	4770      	bx	lr
 8082df6:	bf00      	nop
 8082df8:	20000334 	.word	0x20000334

08082dfc <_ZN13AssetTracker212getVaccuracyEv>:
uint32_t AssetTracker2::getVaccuracy() {
  return gps.vertAcc;
}
 8082dfc:	4b01      	ldr	r3, [pc, #4]	; (8082e04 <_ZN13AssetTracker212getVaccuracyEv+0x8>)
 8082dfe:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8082e00:	4770      	bx	lr
 8082e02:	bf00      	nop
 8082e04:	20000334 	.word	0x20000334

08082e08 <_ZN13AssetTracker27getVelNEv>:
int32_t AssetTracker2::getVelN() {
  return gps.velN;
}
 8082e08:	4b01      	ldr	r3, [pc, #4]	; (8082e10 <_ZN13AssetTracker27getVelNEv+0x8>)
 8082e0a:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8082e0c:	4770      	bx	lr
 8082e0e:	bf00      	nop
 8082e10:	20000334 	.word	0x20000334

08082e14 <_ZN13AssetTracker27getVelEEv>:
int32_t AssetTracker2::getVelE() {
  return gps.velE;
}
 8082e14:	4b01      	ldr	r3, [pc, #4]	; (8082e1c <_ZN13AssetTracker27getVelEEv+0x8>)
 8082e16:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8082e18:	4770      	bx	lr
 8082e1a:	bf00      	nop
 8082e1c:	20000334 	.word	0x20000334

08082e20 <_ZN13AssetTracker27getVelDEv>:
int32_t AssetTracker2::getVelD() {
  return gps.velD;
}
 8082e20:	4b01      	ldr	r3, [pc, #4]	; (8082e28 <_ZN13AssetTracker27getVelDEv+0x8>)
 8082e22:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8082e24:	4770      	bx	lr
 8082e26:	bf00      	nop
 8082e28:	20000334 	.word	0x20000334

08082e2c <_ZN13AssetTracker210getOdoTripEv>:
int32_t AssetTracker2::getOdoTrip() {
  return gps.odoTrip;
}
 8082e2c:	4b01      	ldr	r3, [pc, #4]	; (8082e34 <_ZN13AssetTracker210getOdoTripEv+0x8>)
 8082e2e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8082e30:	4770      	bx	lr
 8082e32:	bf00      	nop
 8082e34:	20000334 	.word	0x20000334

08082e38 <_ZN13AssetTracker211getOdoTotalEv>:
int32_t AssetTracker2::getOdoTotal() {
  return gps.odoTotal;
}
 8082e38:	4b01      	ldr	r3, [pc, #4]	; (8082e40 <_ZN13AssetTracker211getOdoTotalEv+0x8>)
 8082e3a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8082e3c:	4770      	bx	lr
 8082e3e:	bf00      	nop
 8082e40:	20000334 	.word	0x20000334

08082e44 <_ZN13AssetTracker29getGspeedEv>:
int32_t AssetTracker2::getGspeed() {
  return gps.gSpeed;
}
 8082e44:	4b01      	ldr	r3, [pc, #4]	; (8082e4c <_ZN13AssetTracker29getGspeedEv+0x8>)
 8082e46:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8082e48:	4770      	bx	lr
 8082e4a:	bf00      	nop
 8082e4c:	20000334 	.word	0x20000334

08082e50 <_ZN13AssetTracker27getHourEv>:

uint8_t AssetTracker2::getHour(){
  return gps.hour;
}
 8082e50:	4b01      	ldr	r3, [pc, #4]	; (8082e58 <_ZN13AssetTracker27getHourEv+0x8>)
 8082e52:	7858      	ldrb	r0, [r3, #1]
 8082e54:	4770      	bx	lr
 8082e56:	bf00      	nop
 8082e58:	20000334 	.word	0x20000334

08082e5c <_ZN13AssetTracker29getMinuteEv>:

uint8_t AssetTracker2::getMinute(){
  return gps.minute;
}
 8082e5c:	4b01      	ldr	r3, [pc, #4]	; (8082e64 <_ZN13AssetTracker29getMinuteEv+0x8>)
 8082e5e:	7898      	ldrb	r0, [r3, #2]
 8082e60:	4770      	bx	lr
 8082e62:	bf00      	nop
 8082e64:	20000334 	.word	0x20000334

08082e68 <_ZN13AssetTracker210getSecondsEv>:

uint8_t AssetTracker2::getSeconds(){
  return gps.seconds;
}
 8082e68:	4b01      	ldr	r3, [pc, #4]	; (8082e70 <_ZN13AssetTracker210getSecondsEv+0x8>)
 8082e6a:	78d8      	ldrb	r0, [r3, #3]
 8082e6c:	4770      	bx	lr
 8082e6e:	bf00      	nop
 8082e70:	20000334 	.word	0x20000334

08082e74 <_ZN13AssetTracker215getMillisecondsEv>:

int32_t AssetTracker2::getMilliseconds(){
  return gps.milliseconds;
}
 8082e74:	4b01      	ldr	r3, [pc, #4]	; (8082e7c <_ZN13AssetTracker215getMillisecondsEv+0x8>)
 8082e76:	6898      	ldr	r0, [r3, #8]
 8082e78:	4770      	bx	lr
 8082e7a:	bf00      	nop
 8082e7c:	20000334 	.word	0x20000334

08082e80 <_ZN13AssetTracker27getYearEv>:

uint16_t AssetTracker2::getYear(){
  return gps.year;
}
 8082e80:	4b01      	ldr	r3, [pc, #4]	; (8082e88 <_ZN13AssetTracker27getYearEv+0x8>)
 8082e82:	88d8      	ldrh	r0, [r3, #6]
 8082e84:	4770      	bx	lr
 8082e86:	bf00      	nop
 8082e88:	20000334 	.word	0x20000334

08082e8c <_ZN13AssetTracker28getMonthEv>:

uint8_t AssetTracker2::getMonth(){
  return gps.month;
}
 8082e8c:	4b01      	ldr	r3, [pc, #4]	; (8082e94 <_ZN13AssetTracker28getMonthEv+0x8>)
 8082e8e:	7918      	ldrb	r0, [r3, #4]
 8082e90:	4770      	bx	lr
 8082e92:	bf00      	nop
 8082e94:	20000334 	.word	0x20000334

08082e98 <_ZN13AssetTracker26getDayEv>:

uint8_t AssetTracker2::getDay(){
  return gps.day;
}
 8082e98:	4b01      	ldr	r3, [pc, #4]	; (8082ea0 <_ZN13AssetTracker26getDayEv+0x8>)
 8082e9a:	7958      	ldrb	r0, [r3, #5]
 8082e9c:	4770      	bx	lr
 8082e9e:	bf00      	nop
 8082ea0:	20000334 	.word	0x20000334

08082ea4 <_ZN13AssetTracker213getSatellitesEv>:

uint8_t AssetTracker2::getSatellites(){
  return gps.satellites;
}
 8082ea4:	4b01      	ldr	r3, [pc, #4]	; (8082eac <_ZN13AssetTracker213getSatellitesEv+0x8>)
 8082ea6:	f893 003b 	ldrb.w	r0, [r3, #59]	; 0x3b
 8082eaa:	4770      	bx	lr
 8082eac:	20000334 	.word	0x20000334

08082eb0 <_ZN13AssetTracker213getFixQualityEv>:

uint8_t AssetTracker2::getFixQuality(){
  return gps.fixquality;
}
 8082eb0:	4b01      	ldr	r3, [pc, #4]	; (8082eb8 <_ZN13AssetTracker213getFixQualityEv+0x8>)
 8082eb2:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
 8082eb6:	4770      	bx	lr
 8082eb8:	20000334 	.word	0x20000334

08082ebc <_ZN13AssetTracker28getSpeedEv>:

float AssetTracker2::getSpeed(){
  return gps.speed;
}
 8082ebc:	4b01      	ldr	r3, [pc, #4]	; (8082ec4 <_ZN13AssetTracker28getSpeedEv+0x8>)
 8082ebe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8082ec0:	4770      	bx	lr
 8082ec2:	bf00      	nop
 8082ec4:	20000334 	.word	0x20000334

08082ec8 <_ZN13AssetTracker214getGeoIdHeightEv>:

float AssetTracker2::getGeoIdHeight(){
  return gps.geoidheight;
}
 8082ec8:	4b01      	ldr	r3, [pc, #4]	; (8082ed0 <_ZN13AssetTracker214getGeoIdHeightEv+0x8>)
 8082eca:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8082ecc:	4770      	bx	lr
 8082ece:	bf00      	nop
 8082ed0:	20000334 	.word	0x20000334

08082ed4 <_ZN13AssetTracker211getAltitudeEv>:

float AssetTracker2::getAltitude(){
  return gps.altitude;
}
 8082ed4:	4b01      	ldr	r3, [pc, #4]	; (8082edc <_ZN13AssetTracker211getAltitudeEv+0x8>)
 8082ed6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8082ed8:	4770      	bx	lr
 8082eda:	bf00      	nop
 8082edc:	20000334 	.word	0x20000334

08082ee0 <_ZN13AssetTracker210readLatLonEv>:

String AssetTracker2::readLatLon() {
 8082ee0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    String latLon = String::format("%f,%f",gps.latitudeDegrees,gps.longitudeDegrees);
 8082ee2:	4d0a      	ldr	r5, [pc, #40]	; (8082f0c <_ZN13AssetTracker210readLatLonEv+0x2c>)
String AssetTracker2::readLatLon() {
 8082ee4:	4604      	mov	r4, r0
    String latLon = String::format("%f,%f",gps.latitudeDegrees,gps.longitudeDegrees);
 8082ee6:	69e8      	ldr	r0, [r5, #28]
 8082ee8:	f006 ffc0 	bl	8089e6c <__aeabi_f2d>
 8082eec:	4606      	mov	r6, r0
 8082eee:	6a28      	ldr	r0, [r5, #32]
 8082ef0:	460f      	mov	r7, r1
 8082ef2:	f006 ffbb 	bl	8089e6c <__aeabi_f2d>
 8082ef6:	4632      	mov	r2, r6
 8082ef8:	e9cd 0100 	strd	r0, r1, [sp]
 8082efc:	463b      	mov	r3, r7
 8082efe:	4620      	mov	r0, r4
 8082f00:	4903      	ldr	r1, [pc, #12]	; (8082f10 <_ZN13AssetTracker210readLatLonEv+0x30>)
 8082f02:	f002 fcd5 	bl	80858b0 <_ZN6String6formatEPKcz>
    return latLon;
}
 8082f06:	4620      	mov	r0, r4
 8082f08:	b003      	add	sp, #12
 8082f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8082f0c:	20000334 	.word	0x20000334
 8082f10:	0808b8b4 	.word	0x0808b8b4

08082f14 <_ZN13AssetTracker25gpsOnEv>:

void AssetTracker2::gpsOn() {
 8082f14:	b538      	push	{r3, r4, r5, lr}
    enum ubxReturn err;
    // Power to the GPS is controlled by a FET connected to D6
    pinMode(D6,OUTPUT);
 8082f16:	2101      	movs	r1, #1
 8082f18:	2006      	movs	r0, #6
 8082f1a:	f005 f9a3 	bl	8088264 <pinMode>
    digitalWrite(D6,LOW);
 8082f1e:	2100      	movs	r1, #0
 8082f20:	2006      	movs	r0, #6
 8082f22:	f005 f9b0 	bl	8088286 <digitalWrite>
    Serial1.begin(9600);
 8082f26:	f004 fe1f 	bl	8087b68 <_Z22__fetch_global_Serial1v>
 8082f2a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8082f2e:	f004 fe15 	bl	8087b5c <_ZN11USARTSerial5beginEm>
    delay(10);
 8082f32:	200a      	movs	r0, #10
 8082f34:	f003 ff26 	bl	8086d84 <delay>
	if (err != ubxPENDING ){
	    Serial.print("gps.begin failed: ");
	    Serial.println(err);
	    return;
	}
	err=gps.begin();
 8082f38:	4d0f      	ldr	r5, [pc, #60]	; (8082f78 <_ZN13AssetTracker25gpsOnEv+0x64>)
 8082f3a:	4628      	mov	r0, r5
 8082f3c:	f000 fffa 	bl	8083f34 <_ZN12UbloxM8Q_GPS5beginEv>
    while (err != ubxSUCCESS){
 8082f40:	4604      	mov	r4, r0
 8082f42:	b930      	cbnz	r0, 8082f52 <_ZN13AssetTracker25gpsOnEv+0x3e>
    }
    Serial.println("GPS started");
 8082f44:	f004 fc62 	bl	808780c <_Z16_fetch_usbserialv>
}
 8082f48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Serial.println("GPS started");
 8082f4c:	490b      	ldr	r1, [pc, #44]	; (8082f7c <_ZN13AssetTracker25gpsOnEv+0x68>)
 8082f4e:	f002 bd10 	b.w	8085972 <_ZN5Print7printlnEPKc>
	if (err != ubxPENDING ){
 8082f52:	2c01      	cmp	r4, #1
 8082f54:	d0f1      	beq.n	8082f3a <_ZN13AssetTracker25gpsOnEv+0x26>
	    Serial.print("gps.begin failed: ");
 8082f56:	f004 fc59 	bl	808780c <_Z16_fetch_usbserialv>
 8082f5a:	4909      	ldr	r1, [pc, #36]	; (8082f80 <_ZN13AssetTracker25gpsOnEv+0x6c>)
 8082f5c:	f002 fcf6 	bl	808594c <_ZN5Print5printEPKc>
	    Serial.println(err);
 8082f60:	f004 fc54 	bl	808780c <_Z16_fetch_usbserialv>
 8082f64:	4605      	mov	r5, r0
        return printNumber(val, base) + t;
 8082f66:	4621      	mov	r1, r4
 8082f68:	220a      	movs	r2, #10
 8082f6a:	f002 fd0c 	bl	8085986 <_ZN5Print11printNumberEmh>
        n += println();
 8082f6e:	4628      	mov	r0, r5
}
 8082f70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8082f74:	f002 bcf1 	b.w	808595a <_ZN5Print7printlnEv>
 8082f78:	20000334 	.word	0x20000334
 8082f7c:	0808b8cd 	.word	0x0808b8cd
 8082f80:	0808b8ba 	.word	0x0808b8ba

08082f84 <_ZN13AssetTracker215gpsInitCompleteEv>:
    digitalWrite(D6,HIGH);
}

bool AssetTracker2::gpsInitComplete() {
    return gps.initComplete;
}
 8082f84:	4b01      	ldr	r3, [pc, #4]	; (8082f8c <_ZN13AssetTracker215gpsInitCompleteEv+0x8>)
 8082f86:	7818      	ldrb	r0, [r3, #0]
 8082f88:	4770      	bx	lr
 8082f8a:	bf00      	nop
 8082f8c:	20000334 	.word	0x20000334

08082f90 <_ZN13AssetTracker26gpsFixEv>:

bool AssetTracker2::gpsFix() {
    return gps.fix;
}
 8082f90:	4b01      	ldr	r3, [pc, #4]	; (8082f98 <_ZN13AssetTracker26gpsFixEv+0x8>)
 8082f92:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 8082f96:	4770      	bx	lr
 8082f98:	20000334 	.word	0x20000334

08082f9c <_ZN13AssetTracker215antennaInternalEv>:

bool AssetTracker2::gpsTimeValid() {
    return gps.timeValid;
}

bool AssetTracker2::antennaInternal(){
 8082f9c:	b538      	push	{r3, r4, r5, lr}
 8082f9e:	240c      	movs	r4, #12
 8082fa0:	4d06      	ldr	r5, [pc, #24]	; (8082fbc <_ZN13AssetTracker215antennaInternalEv+0x20>)

  for(uint8_t i=0;i<12;i++)
    {
        Serial1.write(internalANT[i]); //send the command to gps modul
 8082fa2:	f004 fde1 	bl	8087b68 <_Z22__fetch_global_Serial1v>
 8082fa6:	6803      	ldr	r3, [r0, #0]
 8082fa8:	f815 1b01 	ldrb.w	r1, [r5], #1
 8082fac:	689b      	ldr	r3, [r3, #8]
  for(uint8_t i=0;i<12;i++)
 8082fae:	3c01      	subs	r4, #1
        Serial1.write(internalANT[i]); //send the command to gps modul
 8082fb0:	4798      	blx	r3
  for(uint8_t i=0;i<12;i++)
 8082fb2:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8082fb6:	d1f4      	bne.n	8082fa2 <_ZN13AssetTracker215antennaInternalEv+0x6>
    }
  return true;

}
 8082fb8:	2001      	movs	r0, #1
 8082fba:	bd38      	pop	{r3, r4, r5, pc}
 8082fbc:	20000024 	.word	0x20000024

08082fc0 <_ZN13AssetTracker215antennaExternalEv>:

bool AssetTracker2::antennaExternal(){
 8082fc0:	b538      	push	{r3, r4, r5, lr}
 8082fc2:	240c      	movs	r4, #12
 8082fc4:	4d06      	ldr	r5, [pc, #24]	; (8082fe0 <_ZN13AssetTracker215antennaExternalEv+0x20>)

  for(uint8_t i=0;i<12;i++)
    {
        Serial1.write(externalANT[i]); //send the command to gps modul
 8082fc6:	f004 fdcf 	bl	8087b68 <_Z22__fetch_global_Serial1v>
 8082fca:	6803      	ldr	r3, [r0, #0]
 8082fcc:	f815 1b01 	ldrb.w	r1, [r5], #1
 8082fd0:	689b      	ldr	r3, [r3, #8]
  for(uint8_t i=0;i<12;i++)
 8082fd2:	3c01      	subs	r4, #1
        Serial1.write(externalANT[i]); //send the command to gps modul
 8082fd4:	4798      	blx	r3
  for(uint8_t i=0;i<12;i++)
 8082fd6:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8082fda:	d1f4      	bne.n	8082fc6 <_ZN13AssetTracker215antennaExternalEv+0x6>
    }
  return true;

}
 8082fdc:	2001      	movs	r0, #1
 8082fde:	bd38      	pop	{r3, r4, r5, pc}
 8082fe0:	20000018 	.word	0x20000018

08082fe4 <_ZN13AssetTracker29updateGPSEv>:

void AssetTracker2::updateGPS() {
    gps.read();
 8082fe4:	4801      	ldr	r0, [pc, #4]	; (8082fec <_ZN13AssetTracker29updateGPSEv+0x8>)
 8082fe6:	f000 be6d 	b.w	8083cc4 <_ZN12UbloxM8Q_GPS4readEv>
 8082fea:	bf00      	nop
 8082fec:	20000334 	.word	0x20000334

08082ff0 <_ZN13AssetTracker27gpsRateEti>:
}

void AssetTracker2::gpsRate(uint16_t measurement, int navigation) {
    gps.setRate(measurement, navigation);
 8082ff0:	4801      	ldr	r0, [pc, #4]	; (8082ff8 <_ZN13AssetTracker27gpsRateEti+0x8>)
 8082ff2:	f000 bf33 	b.w	8083e5c <_ZN12UbloxM8Q_GPS7setRateEti>
 8082ff6:	bf00      	nop
 8082ff8:	20000334 	.word	0x20000334

08082ffc <_ZN13AssetTracker211gpsResetODOEv>:
}

void AssetTracker2::gpsResetODO(void) {
    gps.resetODO();
 8082ffc:	4801      	ldr	r0, [pc, #4]	; (8083004 <_ZN13AssetTracker211gpsResetODOEv+0x8>)
 8082ffe:	f000 bf27 	b.w	8083e50 <_ZN12UbloxM8Q_GPS8resetODOEv>
 8083002:	bf00      	nop
 8083004:	20000334 	.word	0x20000334

08083008 <_ZN13AssetTracker25readXEv>:

void AssetTracker2::gpsHoldThresh(int speed, uint16_t distance) {
    gps.setThresh(speed, distance);
}

int AssetTracker2::readX() {
 8083008:	b510      	push	{r4, lr}
    accel.read();
 808300a:	4c03      	ldr	r4, [pc, #12]	; (8083018 <_ZN13AssetTracker25readXEv+0x10>)
 808300c:	4620      	mov	r0, r4
 808300e:	f000 f999 	bl	8083344 <_ZN15Adafruit_LIS3DH4readEv>
    return accel.x;
}
 8083012:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 8083016:	bd10      	pop	{r4, pc}
 8083018:	20000308 	.word	0x20000308

0808301c <_ZN13AssetTracker25readYEv>:

int AssetTracker2::readY() {
 808301c:	b510      	push	{r4, lr}
    accel.read();
 808301e:	4c03      	ldr	r4, [pc, #12]	; (808302c <_ZN13AssetTracker25readYEv+0x10>)
 8083020:	4620      	mov	r0, r4
 8083022:	f000 f98f 	bl	8083344 <_ZN15Adafruit_LIS3DH4readEv>
    return accel.y;
}
 8083026:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 808302a:	bd10      	pop	{r4, pc}
 808302c:	20000308 	.word	0x20000308

08083030 <_ZN13AssetTracker25readZEv>:

int AssetTracker2::readZ() {
 8083030:	b510      	push	{r4, lr}
    accel.read();
 8083032:	4c03      	ldr	r4, [pc, #12]	; (8083040 <_ZN13AssetTracker25readZEv+0x10>)
 8083034:	4620      	mov	r0, r4
 8083036:	f000 f985 	bl	8083344 <_ZN15Adafruit_LIS3DH4readEv>
    return accel.z;
}
 808303a:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
 808303e:	bd10      	pop	{r4, pc}
 8083040:	20000308 	.word	0x20000308

08083044 <_ZN13AssetTracker216readXYZmagnitudeEv>:
    *y = accel.y;
    *z = accel.z;
}


int AssetTracker2::readXYZmagnitude() {
 8083044:	b510      	push	{r4, lr}
    accel.read();
 8083046:	4c0b      	ldr	r4, [pc, #44]	; (8083074 <_ZN13AssetTracker216readXYZmagnitudeEv+0x30>)
 8083048:	4620      	mov	r0, r4
 808304a:	f000 f97b 	bl	8083344 <_ZN15Adafruit_LIS3DH4readEv>
    int magnitude = sqrt((accel.x*accel.x)+(accel.y*accel.y)+(accel.z*accel.z));
 808304e:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8083052:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8083056:	4352      	muls	r2, r2
 8083058:	fb03 2303 	mla	r3, r3, r3, r2
 808305c:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    sqrt(_Tp __x)
    { return __builtin_sqrt(__x); }
 8083060:	fb00 3000 	mla	r0, r0, r0, r3
 8083064:	f006 fef0 	bl	8089e48 <__aeabi_i2d>
 8083068:	f005 fb86 	bl	8088778 <sqrt>
 808306c:	f007 fa06 	bl	808a47c <__aeabi_d2iz>
    return magnitude;
}
 8083070:	bd10      	pop	{r4, pc}
 8083072:	bf00      	nop
 8083074:	20000308 	.word	0x20000308

08083078 <_ZN15Adafruit_LIS3DHD0Ev>:
 8083078:	b510      	push	{r4, lr}
 808307a:	4604      	mov	r4, r0
 808307c:	212c      	movs	r1, #44	; 0x2c
 808307e:	f005 fa3e 	bl	80884fe <_ZdlPvj>
 8083082:	4620      	mov	r0, r4
 8083084:	bd10      	pop	{r4, pc}
	...

08083088 <_GLOBAL__sub_I_gps>:
	return accel.setupLowPowerWakeMode(movementThreshold);
}

uint8_t AssetTracker2::clearAccelInterrupt() {
	return accel.clearInterrupt();
}
 8083088:	b510      	push	{r4, lr}
Adafruit_LIS3DH accel = Adafruit_LIS3DH(A2);
 808308a:	4c07      	ldr	r4, [pc, #28]	; (80830a8 <_GLOBAL__sub_I_gps+0x20>)
UbloxM8Q_GPS gps = UbloxM8Q_GPS();
 808308c:	4807      	ldr	r0, [pc, #28]	; (80830ac <_GLOBAL__sub_I_gps+0x24>)
 808308e:	f000 fac6 	bl	808361e <_ZN12UbloxM8Q_GPSC1Ev>
Adafruit_LIS3DH accel = Adafruit_LIS3DH(A2);
 8083092:	210c      	movs	r1, #12
 8083094:	4620      	mov	r0, r4
 8083096:	f000 f82f 	bl	80830f8 <_ZN15Adafruit_LIS3DHC1Ea>
 808309a:	4620      	mov	r0, r4
}
 808309c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
Adafruit_LIS3DH accel = Adafruit_LIS3DH(A2);
 80830a0:	4a03      	ldr	r2, [pc, #12]	; (80830b0 <_GLOBAL__sub_I_gps+0x28>)
 80830a2:	4904      	ldr	r1, [pc, #16]	; (80830b4 <_GLOBAL__sub_I_gps+0x2c>)
 80830a4:	f005 ba26 	b.w	80884f4 <__aeabi_atexit>
 80830a8:	20000308 	.word	0x20000308
 80830ac:	20000334 	.word	0x20000334
 80830b0:	20000130 	.word	0x20000130
 80830b4:	08082d87 	.word	0x08082d87

080830b8 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
 80830b8:	4770      	bx	lr

080830ba <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80830ba:	b510      	push	{r4, lr}
 80830bc:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80830be:	6880      	ldr	r0, [r0, #8]
 80830c0:	b108      	cbz	r0, 80830c6 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80830c2:	f001 fda5 	bl	8084c10 <os_mutex_recursive_destroy>
 80830c6:	4620      	mov	r0, r4
 80830c8:	bd10      	pop	{r4, pc}
	...

080830cc <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data
*/
/**************************************************************************/
void Adafruit_LIS3DH::getSensor(sensor_t *sensor) {
 80830cc:	b538      	push	{r3, r4, r5, lr}
 80830ce:	460c      	mov	r4, r1
 80830d0:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
 80830d2:	2220      	movs	r2, #32
 80830d4:	2100      	movs	r1, #0
 80830d6:	f104 0008 	add.w	r0, r4, #8
 80830da:	f007 fddb 	bl	808ac94 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
 80830de:	220b      	movs	r2, #11
 80830e0:	4620      	mov	r0, r4
 80830e2:	4904      	ldr	r1, [pc, #16]	; (80830f4 <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t+0x28>)
 80830e4:	f007 fe6d 	bl	808adc2 <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
  sensor->version     = 1;
 80830e8:	2301      	movs	r3, #1
 80830ea:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id   = _sensorID;
 80830ec:	69aa      	ldr	r2, [r5, #24]
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
 80830ee:	e9c4 2304 	strd	r2, r3, [r4, #16]
  sensor->min_delay   = 0;
  sensor->max_value   = 0;
  sensor->min_value   = 0;
  sensor->resolution  = 0;
}
 80830f2:	bd38      	pop	{r3, r4, r5, pc}
 80830f4:	0808b8d9 	.word	0x0808b8d9

080830f8 <_ZN15Adafruit_LIS3DHC1Ea>:
  : _sensorID(-1), _cs(cspin), _mosi(-1), _miso(-1), _sck(-1)
 80830f8:	4a06      	ldr	r2, [pc, #24]	; (8083114 <_ZN15Adafruit_LIS3DHC1Ea+0x1c>)
 80830fa:	7741      	strb	r1, [r0, #29]
 80830fc:	6002      	str	r2, [r0, #0]
 80830fe:	f04f 32ff 	mov.w	r2, #4294967295
 8083102:	6182      	str	r2, [r0, #24]
 8083104:	83c2      	strh	r2, [r0, #30]
 8083106:	f64f 72ff 	movw	r2, #65535	; 0xffff
 808310a:	f880 2020 	strb.w	r2, [r0, #32]
 808310e:	2211      	movs	r2, #17
 8083110:	6242      	str	r2, [r0, #36]	; 0x24
{ }
 8083112:	4770      	bx	lr
 8083114:	0808b8e8 	.word	0x0808b8e8

08083118 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
 8083118:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
 808311a:	4d0c      	ldr	r5, [pc, #48]	; (808314c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
 808311c:	7829      	ldrb	r1, [r5, #0]
 808311e:	f3bf 8f5b 	dmb	ish
 8083122:	f011 0401 	ands.w	r4, r1, #1
 8083126:	d10f      	bne.n	8083148 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>
 8083128:	4628      	mov	r0, r5
 808312a:	f7fc ffd7 	bl	80800dc <__cxa_guard_acquire>
 808312e:	b158      	cbz	r0, 8083148 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>
 8083130:	4621      	mov	r1, r4
 8083132:	4807      	ldr	r0, [pc, #28]	; (8083150 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x38>)
 8083134:	f002 f8df 	bl	80852f6 <_ZN8SPIClassC1E19hal_spi_interface_t>
 8083138:	4628      	mov	r0, r5
 808313a:	f7fc ffd4 	bl	80800e6 <__cxa_guard_release>
 808313e:	4a05      	ldr	r2, [pc, #20]	; (8083154 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x3c>)
 8083140:	4905      	ldr	r1, [pc, #20]	; (8083158 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x40>)
 8083142:	4803      	ldr	r0, [pc, #12]	; (8083150 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x38>)
 8083144:	f005 f9d6 	bl	80884f4 <__aeabi_atexit>
        return instance;
    }
 8083148:	4801      	ldr	r0, [pc, #4]	; (8083150 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x38>)
 808314a:	bd38      	pop	{r3, r4, r5, pc}
 808314c:	20000398 	.word	0x20000398
 8083150:	2000039c 	.word	0x2000039c
 8083154:	20000130 	.word	0x20000130
 8083158:	080830bb 	.word	0x080830bb

0808315c <_ZN15Adafruit_LIS3DH16beginTransactionEv>:
  #endif
  return value;
}


void Adafruit_LIS3DH::beginTransaction() {
 808315c:	b508      	push	{r3, lr}
    }
    void end() {
        instance().end();
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
 808315e:	f7ff ffdb 	bl	8083118 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 8083162:	2101      	movs	r1, #1
 8083164:	f002 f8e5 	bl	8085332 <_ZN8SPIClass11setBitOrderEh>
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
    }
    unsigned setClockSpeed(unsigned value, unsigned scale=HZ) {
        return instance().setClockSpeed(value, scale);
 8083168:	f7ff ffd6 	bl	8083118 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 808316c:	4905      	ldr	r1, [pc, #20]	; (8083184 <_ZN15Adafruit_LIS3DH16beginTransactionEv+0x28>)
 808316e:	2201      	movs	r2, #1
 8083170:	f002 f914 	bl	808539c <_ZN8SPIClass13setClockSpeedEjj>
        instance().setDataMode(mode);
 8083174:	f7ff ffd0 	bl	8083118 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    SPI.setClockSpeed(500000);
    SPI.setDataMode(SPI_MODE0);
#else
  SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
#endif
}
 8083178:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 808317c:	2100      	movs	r1, #0
 808317e:	f002 b8e7 	b.w	8085350 <_ZN8SPIClass11setDataModeEh>
 8083182:	bf00      	nop
 8083184:	0007a120 	.word	0x0007a120

08083188 <_ZN15Adafruit_LIS3DH7spixferEh>:
uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
 8083188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (_sck == -1)
 808318c:	f990 3020 	ldrsb.w	r3, [r0, #32]
uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
 8083190:	4605      	mov	r5, r0
  if (_sck == -1)
 8083192:	3301      	adds	r3, #1
uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
 8083194:	460f      	mov	r7, r1
  if (_sck == -1)
 8083196:	d106      	bne.n	80831a6 <_ZN15Adafruit_LIS3DH7spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
 8083198:	f7ff ffbe 	bl	8083118 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 808319c:	4639      	mov	r1, r7
}
 808319e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80831a2:	f002 b927 	b.w	80853f4 <_ZN8SPIClass8transferEh>
  uint8_t reply = 0;
 80831a6:	2400      	movs	r4, #0
  for (int i=7; i>=0; i--) {
 80831a8:	2607      	movs	r6, #7
    digitalWrite(_mosi, x & (1<<i));
 80831aa:	f04f 0801 	mov.w	r8, #1
    digitalWrite(_sck, LOW);
 80831ae:	f995 0020 	ldrsb.w	r0, [r5, #32]
 80831b2:	2100      	movs	r1, #0
 80831b4:	b280      	uxth	r0, r0
 80831b6:	f005 f866 	bl	8088286 <digitalWrite>
    digitalWrite(_mosi, x & (1<<i));
 80831ba:	f995 001e 	ldrsb.w	r0, [r5, #30]
 80831be:	fa08 f106 	lsl.w	r1, r8, r6
 80831c2:	4039      	ands	r1, r7
 80831c4:	b280      	uxth	r0, r0
 80831c6:	f005 f85e 	bl	8088286 <digitalWrite>
    digitalWrite(_sck, HIGH);
 80831ca:	f995 0020 	ldrsb.w	r0, [r5, #32]
 80831ce:	2101      	movs	r1, #1
 80831d0:	b280      	uxth	r0, r0
 80831d2:	f005 f858 	bl	8088286 <digitalWrite>
    if (digitalRead(_miso))
 80831d6:	f995 001f 	ldrsb.w	r0, [r5, #31]
    reply <<= 1;
 80831da:	0064      	lsls	r4, r4, #1
    if (digitalRead(_miso))
 80831dc:	b280      	uxth	r0, r0
    reply <<= 1;
 80831de:	b2e4      	uxtb	r4, r4
    if (digitalRead(_miso))
 80831e0:	f005 f86a 	bl	80882b8 <digitalRead>
 80831e4:	b108      	cbz	r0, 80831ea <_ZN15Adafruit_LIS3DH7spixferEh+0x62>
      reply |= 1;
 80831e6:	f044 0401 	orr.w	r4, r4, #1
  for (int i=7; i>=0; i--) {
 80831ea:	3e01      	subs	r6, #1
 80831ec:	d2df      	bcs.n	80831ae <_ZN15Adafruit_LIS3DH7spixferEh+0x26>
}
 80831ee:	4620      	mov	r0, r4
 80831f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080831f4 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>:
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
 80831f4:	b570      	push	{r4, r5, r6, lr}
  if (_cs == -1) {
 80831f6:	f990 301d 	ldrsb.w	r3, [r0, #29]
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
 80831fa:	4604      	mov	r4, r0
  if (_cs == -1) {
 80831fc:	3301      	adds	r3, #1
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
 80831fe:	460e      	mov	r6, r1
 8083200:	4615      	mov	r5, r2
  if (_cs == -1) {
 8083202:	d116      	bne.n	8083232 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x3e>
    Wire.beginTransmission((uint8_t)_i2caddr);
 8083204:	f005 f926 	bl	8088454 <_Z19__fetch_global_Wirev>
 8083208:	7f21      	ldrb	r1, [r4, #28]
 808320a:	f004 fd59 	bl	8087cc0 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
 808320e:	f005 f921 	bl	8088454 <_Z19__fetch_global_Wirev>
 8083212:	6803      	ldr	r3, [r0, #0]
 8083214:	4631      	mov	r1, r6
 8083216:	689b      	ldr	r3, [r3, #8]
 8083218:	4798      	blx	r3
    Wire.write((uint8_t)value);
 808321a:	f005 f91b 	bl	8088454 <_Z19__fetch_global_Wirev>
 808321e:	6803      	ldr	r3, [r0, #0]
 8083220:	4629      	mov	r1, r5
 8083222:	689b      	ldr	r3, [r3, #8]
 8083224:	4798      	blx	r3
    Wire.endTransmission();
 8083226:	f005 f915 	bl	8088454 <_Z19__fetch_global_Wirev>
}
 808322a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Wire.endTransmission();
 808322e:	f004 bd6a 	b.w	8087d06 <_ZN7TwoWire15endTransmissionEv>
	if (_sck == -1)
 8083232:	f990 3020 	ldrsb.w	r3, [r0, #32]
 8083236:	3301      	adds	r3, #1
 8083238:	d101      	bne.n	808323e <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x4a>
	  beginTransaction();
 808323a:	f7ff ff8f 	bl	808315c <_ZN15Adafruit_LIS3DH16beginTransactionEv>
    digitalWrite(_cs, LOW);
 808323e:	f994 001d 	ldrsb.w	r0, [r4, #29]
 8083242:	2100      	movs	r1, #0
 8083244:	b280      	uxth	r0, r0
 8083246:	f005 f81e 	bl	8088286 <digitalWrite>
    spixfer(reg & ~0x80); // write, bit 7 low
 808324a:	f006 017f 	and.w	r1, r6, #127	; 0x7f
 808324e:	4620      	mov	r0, r4
 8083250:	f7ff ff9a 	bl	8083188 <_ZN15Adafruit_LIS3DH7spixferEh>
    spixfer(value);
 8083254:	4629      	mov	r1, r5
 8083256:	4620      	mov	r0, r4
 8083258:	f7ff ff96 	bl	8083188 <_ZN15Adafruit_LIS3DH7spixferEh>
    digitalWrite(_cs, HIGH);
 808325c:	f994 001d 	ldrsb.w	r0, [r4, #29]
 8083260:	2101      	movs	r1, #1
}
 8083262:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    digitalWrite(_cs, HIGH);
 8083266:	b280      	uxth	r0, r0
 8083268:	f005 b80d 	b.w	8088286 <digitalWrite>

0808326c <_ZN15Adafruit_LIS3DH13readRegister8Eh>:
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
 808326c:	b538      	push	{r3, r4, r5, lr}
  if (_cs == -1) {
 808326e:	f990 301d 	ldrsb.w	r3, [r0, #29]
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
 8083272:	4604      	mov	r4, r0
  if (_cs == -1) {
 8083274:	3301      	adds	r3, #1
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
 8083276:	460d      	mov	r5, r1
  if (_cs == -1) {
 8083278:	d11d      	bne.n	80832b6 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x4a>
    Wire.beginTransmission(_i2caddr);
 808327a:	f005 f8eb 	bl	8088454 <_Z19__fetch_global_Wirev>
 808327e:	f994 101c 	ldrsb.w	r1, [r4, #28]
 8083282:	f004 fd21 	bl	8087cc8 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((uint8_t)reg);
 8083286:	f005 f8e5 	bl	8088454 <_Z19__fetch_global_Wirev>
 808328a:	6803      	ldr	r3, [r0, #0]
 808328c:	4629      	mov	r1, r5
 808328e:	689b      	ldr	r3, [r3, #8]
 8083290:	4798      	blx	r3
    Wire.endTransmission();
 8083292:	f005 f8df 	bl	8088454 <_Z19__fetch_global_Wirev>
 8083296:	f004 fd36 	bl	8087d06 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(_i2caddr, 1);
 808329a:	f005 f8db 	bl	8088454 <_Z19__fetch_global_Wirev>
 808329e:	2201      	movs	r2, #1
 80832a0:	7f21      	ldrb	r1, [r4, #28]
 80832a2:	f004 fd0a 	bl	8087cba <_ZN7TwoWire11requestFromEhj>
    value = Wire.read();
 80832a6:	f005 f8d5 	bl	8088454 <_Z19__fetch_global_Wirev>
 80832aa:	6803      	ldr	r3, [r0, #0]
 80832ac:	695b      	ldr	r3, [r3, #20]
 80832ae:	4798      	blx	r3
 80832b0:	b2c5      	uxtb	r5, r0
}
 80832b2:	4628      	mov	r0, r5
 80832b4:	bd38      	pop	{r3, r4, r5, pc}
	if (_sck == -1)
 80832b6:	f990 3020 	ldrsb.w	r3, [r0, #32]
 80832ba:	3301      	adds	r3, #1
 80832bc:	d101      	bne.n	80832c2 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x56>
	  beginTransaction();
 80832be:	f7ff ff4d 	bl	808315c <_ZN15Adafruit_LIS3DH16beginTransactionEv>
	digitalWrite(_cs, LOW);
 80832c2:	f994 001d 	ldrsb.w	r0, [r4, #29]
 80832c6:	2100      	movs	r1, #0
 80832c8:	b280      	uxth	r0, r0
 80832ca:	f004 ffdc 	bl	8088286 <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
 80832ce:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 80832d2:	4620      	mov	r0, r4
 80832d4:	f7ff ff58 	bl	8083188 <_ZN15Adafruit_LIS3DH7spixferEh>
    value = spixfer(0);
 80832d8:	2100      	movs	r1, #0
 80832da:	4620      	mov	r0, r4
 80832dc:	f7ff ff54 	bl	8083188 <_ZN15Adafruit_LIS3DH7spixferEh>
 80832e0:	4605      	mov	r5, r0
    digitalWrite(_cs, HIGH);
 80832e2:	f994 001d 	ldrsb.w	r0, [r4, #29]
 80832e6:	2101      	movs	r1, #1
 80832e8:	b280      	uxth	r0, r0
 80832ea:	f004 ffcc 	bl	8088286 <digitalWrite>
    if (_sck == -1)
 80832ee:	e7e0      	b.n	80832b2 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x46>

080832f0 <_ZN15Adafruit_LIS3DH8setRangeE14lis3dh_range_t>:
{
 80832f0:	b538      	push	{r3, r4, r5, lr}
 80832f2:	460d      	mov	r5, r1
  uint8_t r = readRegister8(LIS3DH_REG_CTRL4);
 80832f4:	2123      	movs	r1, #35	; 0x23
{
 80832f6:	4604      	mov	r4, r0
  uint8_t r = readRegister8(LIS3DH_REG_CTRL4);
 80832f8:	f7ff ffb8 	bl	808326c <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  r &= ~(0x30);
 80832fc:	f020 0230 	bic.w	r2, r0, #48	; 0x30
  r |= range << 4;
 8083300:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL4, r);
 8083304:	4620      	mov	r0, r4
}
 8083306:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeRegister8(LIS3DH_REG_CTRL4, r);
 808330a:	2123      	movs	r1, #35	; 0x23
 808330c:	b2d2      	uxtb	r2, r2
 808330e:	f7ff bf71 	b.w	80831f4 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

08083312 <_ZN15Adafruit_LIS3DH8getRangeEv>:
  return (lis3dh_range_t)((readRegister8(LIS3DH_REG_CTRL4) >> 4) & 0x03);
 8083312:	2123      	movs	r1, #35	; 0x23
{
 8083314:	b508      	push	{r3, lr}
  return (lis3dh_range_t)((readRegister8(LIS3DH_REG_CTRL4) >> 4) & 0x03);
 8083316:	f7ff ffa9 	bl	808326c <_ZN15Adafruit_LIS3DH13readRegister8Eh>
}
 808331a:	f3c0 1001 	ubfx	r0, r0, #4, #2
 808331e:	bd08      	pop	{r3, pc}

08083320 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>:
{
 8083320:	b538      	push	{r3, r4, r5, lr}
 8083322:	460d      	mov	r5, r1
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
 8083324:	2120      	movs	r1, #32
{
 8083326:	4604      	mov	r4, r0
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
 8083328:	f7ff ffa0 	bl	808326c <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  ctl1 &= ~(0xF0); // mask off bits
 808332c:	f000 020f 	and.w	r2, r0, #15
  ctl1 |= (dataRate << 4);
 8083330:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
 8083334:	4620      	mov	r0, r4
}
 8083336:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
 808333a:	2120      	movs	r1, #32
 808333c:	b2d2      	uxtb	r2, r2
 808333e:	f7ff bf59 	b.w	80831f4 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
	...

08083344 <_ZN15Adafruit_LIS3DH4readEv>:
void Adafruit_LIS3DH::read(void) {
 8083344:	b538      	push	{r3, r4, r5, lr}
  if (_cs == -1) {
 8083346:	f990 301d 	ldrsb.w	r3, [r0, #29]
void Adafruit_LIS3DH::read(void) {
 808334a:	4604      	mov	r4, r0
  if (_cs == -1) {
 808334c:	3301      	adds	r3, #1
 808334e:	d170      	bne.n	8083432 <_ZN15Adafruit_LIS3DH4readEv+0xee>
    Wire.beginTransmission(_i2caddr);
 8083350:	f005 f880 	bl	8088454 <_Z19__fetch_global_Wirev>
 8083354:	f994 101c 	ldrsb.w	r1, [r4, #28]
 8083358:	f004 fcb6 	bl	8087cc8 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(LIS3DH_REG_OUT_X_L | 0x80); // 0x80 for autoincrement
 808335c:	f005 f87a 	bl	8088454 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 8083360:	6803      	ldr	r3, [r0, #0]
 8083362:	21a8      	movs	r1, #168	; 0xa8
 8083364:	689b      	ldr	r3, [r3, #8]
 8083366:	4798      	blx	r3
    Wire.endTransmission();
 8083368:	f005 f874 	bl	8088454 <_Z19__fetch_global_Wirev>
 808336c:	f004 fccb 	bl	8087d06 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(_i2caddr, 6);
 8083370:	f005 f870 	bl	8088454 <_Z19__fetch_global_Wirev>
 8083374:	2206      	movs	r2, #6
 8083376:	7f21      	ldrb	r1, [r4, #28]
 8083378:	f004 fc9f 	bl	8087cba <_ZN7TwoWire11requestFromEhj>
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
 808337c:	f005 f86a 	bl	8088454 <_Z19__fetch_global_Wirev>
 8083380:	6803      	ldr	r3, [r0, #0]
 8083382:	4d4f      	ldr	r5, [pc, #316]	; (80834c0 <_ZN15Adafruit_LIS3DH4readEv+0x17c>)
 8083384:	695b      	ldr	r3, [r3, #20]
 8083386:	4798      	blx	r3
 8083388:	80e0      	strh	r0, [r4, #6]
 808338a:	f005 f863 	bl	8088454 <_Z19__fetch_global_Wirev>
 808338e:	6803      	ldr	r3, [r0, #0]
 8083390:	695b      	ldr	r3, [r3, #20]
 8083392:	4798      	blx	r3
 8083394:	88e3      	ldrh	r3, [r4, #6]
 8083396:	ea05 2000 	and.w	r0, r5, r0, lsl #8
 808339a:	4318      	orrs	r0, r3
 808339c:	80e0      	strh	r0, [r4, #6]
    y = Wire.read(); y |= ((uint16_t)Wire.read()) << 8;
 808339e:	f005 f859 	bl	8088454 <_Z19__fetch_global_Wirev>
 80833a2:	6803      	ldr	r3, [r0, #0]
 80833a4:	695b      	ldr	r3, [r3, #20]
 80833a6:	4798      	blx	r3
 80833a8:	8120      	strh	r0, [r4, #8]
 80833aa:	f005 f853 	bl	8088454 <_Z19__fetch_global_Wirev>
 80833ae:	6803      	ldr	r3, [r0, #0]
 80833b0:	695b      	ldr	r3, [r3, #20]
 80833b2:	4798      	blx	r3
 80833b4:	8923      	ldrh	r3, [r4, #8]
 80833b6:	ea05 2000 	and.w	r0, r5, r0, lsl #8
 80833ba:	4318      	orrs	r0, r3
 80833bc:	8120      	strh	r0, [r4, #8]
    z = Wire.read(); z |= ((uint16_t)Wire.read()) << 8;
 80833be:	f005 f849 	bl	8088454 <_Z19__fetch_global_Wirev>
 80833c2:	6803      	ldr	r3, [r0, #0]
 80833c4:	695b      	ldr	r3, [r3, #20]
 80833c6:	4798      	blx	r3
 80833c8:	8160      	strh	r0, [r4, #10]
 80833ca:	f005 f843 	bl	8088454 <_Z19__fetch_global_Wirev>
 80833ce:	6803      	ldr	r3, [r0, #0]
 80833d0:	695b      	ldr	r3, [r3, #20]
 80833d2:	4798      	blx	r3
 80833d4:	ea05 2500 	and.w	r5, r5, r0, lsl #8
 80833d8:	8960      	ldrh	r0, [r4, #10]
 80833da:	4305      	orrs	r5, r0
 80833dc:	8165      	strh	r5, [r4, #10]
  uint8_t range = getRange();
 80833de:	4620      	mov	r0, r4
 80833e0:	f7ff ff97 	bl	8083312 <_ZN15Adafruit_LIS3DH8getRangeEv>
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
 80833e4:	2803      	cmp	r0, #3
 80833e6:	d062      	beq.n	80834ae <_ZN15Adafruit_LIS3DH4readEv+0x16a>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
 80833e8:	2802      	cmp	r0, #2
 80833ea:	d063      	beq.n	80834b4 <_ZN15Adafruit_LIS3DH4readEv+0x170>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
 80833ec:	2801      	cmp	r0, #1
 80833ee:	d064      	beq.n	80834ba <_ZN15Adafruit_LIS3DH4readEv+0x176>
  if (range == LIS3DH_RANGE_2_G) divider = 16380;
 80833f0:	2800      	cmp	r0, #0
 80833f2:	f643 70fc 	movw	r0, #16380	; 0x3ffc
 80833f6:	bf18      	it	ne
 80833f8:	2001      	movne	r0, #1
  x_g = (float)x / divider;
 80833fa:	f007 f991 	bl	808a720 <__aeabi_i2f>
 80833fe:	4605      	mov	r5, r0
 8083400:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 8083404:	f007 f98c 	bl	808a720 <__aeabi_i2f>
 8083408:	4629      	mov	r1, r5
 808340a:	f007 fa91 	bl	808a930 <__aeabi_fdiv>
 808340e:	60e0      	str	r0, [r4, #12]
  y_g = (float)y / divider;
 8083410:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8083414:	f007 f984 	bl	808a720 <__aeabi_i2f>
 8083418:	4629      	mov	r1, r5
 808341a:	f007 fa89 	bl	808a930 <__aeabi_fdiv>
 808341e:	6120      	str	r0, [r4, #16]
  z_g = (float)z / divider;
 8083420:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
 8083424:	f007 f97c 	bl	808a720 <__aeabi_i2f>
 8083428:	4629      	mov	r1, r5
 808342a:	f007 fa81 	bl	808a930 <__aeabi_fdiv>
 808342e:	6160      	str	r0, [r4, #20]
}
 8083430:	bd38      	pop	{r3, r4, r5, pc}
    if (_sck == -1)
 8083432:	f990 3020 	ldrsb.w	r3, [r0, #32]
 8083436:	3301      	adds	r3, #1
 8083438:	d101      	bne.n	808343e <_ZN15Adafruit_LIS3DH4readEv+0xfa>
      beginTransaction();
 808343a:	f7ff fe8f 	bl	808315c <_ZN15Adafruit_LIS3DH16beginTransactionEv>
    digitalWrite(_cs, LOW);
 808343e:	f994 001d 	ldrsb.w	r0, [r4, #29]
 8083442:	2100      	movs	r1, #0
 8083444:	b280      	uxth	r0, r0
 8083446:	f004 ff1e 	bl	8088286 <digitalWrite>
    spixfer(LIS3DH_REG_OUT_X_L | 0x80 | 0x40); // read multiple, bit 7&6 high
 808344a:	21e8      	movs	r1, #232	; 0xe8
 808344c:	4620      	mov	r0, r4
 808344e:	f7ff fe9b 	bl	8083188 <_ZN15Adafruit_LIS3DH7spixferEh>
    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
 8083452:	21ff      	movs	r1, #255	; 0xff
 8083454:	4620      	mov	r0, r4
 8083456:	f7ff fe97 	bl	8083188 <_ZN15Adafruit_LIS3DH7spixferEh>
 808345a:	21ff      	movs	r1, #255	; 0xff
 808345c:	80e0      	strh	r0, [r4, #6]
 808345e:	4620      	mov	r0, r4
 8083460:	f7ff fe92 	bl	8083188 <_ZN15Adafruit_LIS3DH7spixferEh>
 8083464:	88e3      	ldrh	r3, [r4, #6]
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
 8083466:	21ff      	movs	r1, #255	; 0xff
    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
 8083468:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 808346c:	80e3      	strh	r3, [r4, #6]
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
 808346e:	4620      	mov	r0, r4
 8083470:	f7ff fe8a 	bl	8083188 <_ZN15Adafruit_LIS3DH7spixferEh>
 8083474:	21ff      	movs	r1, #255	; 0xff
 8083476:	8120      	strh	r0, [r4, #8]
 8083478:	4620      	mov	r0, r4
 808347a:	f7ff fe85 	bl	8083188 <_ZN15Adafruit_LIS3DH7spixferEh>
 808347e:	8923      	ldrh	r3, [r4, #8]
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
 8083480:	21ff      	movs	r1, #255	; 0xff
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
 8083482:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8083486:	8123      	strh	r3, [r4, #8]
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
 8083488:	4620      	mov	r0, r4
 808348a:	f7ff fe7d 	bl	8083188 <_ZN15Adafruit_LIS3DH7spixferEh>
 808348e:	21ff      	movs	r1, #255	; 0xff
 8083490:	8160      	strh	r0, [r4, #10]
 8083492:	4620      	mov	r0, r4
 8083494:	f7ff fe78 	bl	8083188 <_ZN15Adafruit_LIS3DH7spixferEh>
 8083498:	8963      	ldrh	r3, [r4, #10]
    digitalWrite(_cs, HIGH);
 808349a:	2101      	movs	r1, #1
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
 808349c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    digitalWrite(_cs, HIGH);
 80834a0:	f994 001d 	ldrsb.w	r0, [r4, #29]
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
 80834a4:	8163      	strh	r3, [r4, #10]
    digitalWrite(_cs, HIGH);
 80834a6:	b280      	uxth	r0, r0
 80834a8:	f004 feed 	bl	8088286 <digitalWrite>
    if (_sck == -1)
 80834ac:	e797      	b.n	80833de <_ZN15Adafruit_LIS3DH4readEv+0x9a>
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
 80834ae:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80834b2:	e7a2      	b.n	80833fa <_ZN15Adafruit_LIS3DH4readEv+0xb6>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
 80834b4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80834b8:	e79f      	b.n	80833fa <_ZN15Adafruit_LIS3DH4readEv+0xb6>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
 80834ba:	f641 70fe 	movw	r0, #8190	; 0x1ffe
 80834be:	e79c      	b.n	80833fa <_ZN15Adafruit_LIS3DH4readEv+0xb6>
 80834c0:	00ffff00 	.word	0x00ffff00

080834c4 <_ZN15Adafruit_LIS3DH8getEventEP15sensors_event_t>:
bool Adafruit_LIS3DH::getEvent(sensors_event_t *event) {
 80834c4:	b570      	push	{r4, r5, r6, lr}
 80834c6:	460c      	mov	r4, r1
 80834c8:	4605      	mov	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
 80834ca:	2220      	movs	r2, #32
 80834cc:	2100      	movs	r1, #0
 80834ce:	1d20      	adds	r0, r4, #4
 80834d0:	f007 fbe0 	bl	808ac94 <memset>
  event->version   = sizeof(sensors_event_t);
 80834d4:	2324      	movs	r3, #36	; 0x24
  event->type      = SENSOR_TYPE_ACCELEROMETER;
 80834d6:	2601      	movs	r6, #1
  event->version   = sizeof(sensors_event_t);
 80834d8:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
 80834da:	69ab      	ldr	r3, [r5, #24]
  read();
 80834dc:	4628      	mov	r0, r5
  event->sensor_id = _sensorID;
 80834de:	6063      	str	r3, [r4, #4]
  event->type      = SENSOR_TYPE_ACCELEROMETER;
 80834e0:	60a6      	str	r6, [r4, #8]
  read();
 80834e2:	f7ff ff2f 	bl	8083344 <_ZN15Adafruit_LIS3DH4readEv>
  event->acceleration.x = x_g;
 80834e6:	68eb      	ldr	r3, [r5, #12]
}
 80834e8:	4630      	mov	r0, r6
  event->acceleration.x = x_g;
 80834ea:	6163      	str	r3, [r4, #20]
  event->acceleration.y = y_g;
 80834ec:	692b      	ldr	r3, [r5, #16]
 80834ee:	61a3      	str	r3, [r4, #24]
  event->acceleration.z = z_g;
 80834f0:	696b      	ldr	r3, [r5, #20]
 80834f2:	61e3      	str	r3, [r4, #28]
}
 80834f4:	bd70      	pop	{r4, r5, r6, pc}

080834f6 <_ZN15Adafruit_LIS3DH5beginEh>:
bool Adafruit_LIS3DH::begin(uint8_t i2caddr) {
 80834f6:	b510      	push	{r4, lr}
 80834f8:	4604      	mov	r4, r0
  _i2caddr = i2caddr;
 80834fa:	7701      	strb	r1, [r0, #28]
  if (_cs == -1) {
 80834fc:	f990 001d 	ldrsb.w	r0, [r0, #29]
 8083500:	1c42      	adds	r2, r0, #1
 8083502:	d123      	bne.n	808354c <_ZN15Adafruit_LIS3DH5beginEh+0x56>
    Wire.begin();
 8083504:	f004 ffa6 	bl	8088454 <_Z19__fetch_global_Wirev>
 8083508:	f004 fba8 	bl	8087c5c <_ZN7TwoWire5beginEv>
  uint8_t deviceid = readRegister8(LIS3DH_REG_WHOAMI);
 808350c:	210f      	movs	r1, #15
 808350e:	4620      	mov	r0, r4
 8083510:	f7ff feac 	bl	808326c <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  if (deviceid != 0x33)
 8083514:	2833      	cmp	r0, #51	; 0x33
 8083516:	d13d      	bne.n	8083594 <_ZN15Adafruit_LIS3DH5beginEh+0x9e>
  writeRegister8(LIS3DH_REG_CTRL1, 0x07);
 8083518:	2207      	movs	r2, #7
 808351a:	2120      	movs	r1, #32
 808351c:	4620      	mov	r0, r4
 808351e:	f7ff fe69 	bl	80831f4 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  setDataRate(LIS3DH_DATARATE_400_HZ);
 8083522:	2107      	movs	r1, #7
 8083524:	4620      	mov	r0, r4
 8083526:	f7ff fefb 	bl	8083320 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>
  writeRegister8(LIS3DH_REG_CTRL4, 0x88);
 808352a:	2288      	movs	r2, #136	; 0x88
 808352c:	2123      	movs	r1, #35	; 0x23
 808352e:	4620      	mov	r0, r4
 8083530:	f7ff fe60 	bl	80831f4 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_CTRL3, 0x10);
 8083534:	2210      	movs	r2, #16
 8083536:	2122      	movs	r1, #34	; 0x22
 8083538:	4620      	mov	r0, r4
 808353a:	f7ff fe5b 	bl	80831f4 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_TEMPCFG, 0x80);
 808353e:	4620      	mov	r0, r4
 8083540:	2280      	movs	r2, #128	; 0x80
 8083542:	211f      	movs	r1, #31
 8083544:	f7ff fe56 	bl	80831f4 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  return true;
 8083548:	2001      	movs	r0, #1
}
 808354a:	bd10      	pop	{r4, pc}
    digitalWrite(_cs, HIGH);
 808354c:	2101      	movs	r1, #1
 808354e:	b280      	uxth	r0, r0
 8083550:	f004 fe99 	bl	8088286 <digitalWrite>
    pinMode(_cs, OUTPUT);
 8083554:	f994 001d 	ldrsb.w	r0, [r4, #29]
 8083558:	2101      	movs	r1, #1
 808355a:	b280      	uxth	r0, r0
 808355c:	f004 fe82 	bl	8088264 <pinMode>
    if (_sck == -1) {
 8083560:	f994 0020 	ldrsb.w	r0, [r4, #32]
 8083564:	1c43      	adds	r3, r0, #1
 8083566:	d104      	bne.n	8083572 <_ZN15Adafruit_LIS3DH5beginEh+0x7c>
        instance().begin();
 8083568:	f7ff fdd6 	bl	8083118 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 808356c:	f001 fed2 	bl	8085314 <_ZN8SPIClass5beginEv>
    }
 8083570:	e7cc      	b.n	808350c <_ZN15Adafruit_LIS3DH5beginEh+0x16>
      pinMode(_sck, OUTPUT);
 8083572:	2101      	movs	r1, #1
 8083574:	b280      	uxth	r0, r0
 8083576:	f004 fe75 	bl	8088264 <pinMode>
      pinMode(_mosi, OUTPUT);
 808357a:	f994 001e 	ldrsb.w	r0, [r4, #30]
 808357e:	2101      	movs	r1, #1
 8083580:	b280      	uxth	r0, r0
 8083582:	f004 fe6f 	bl	8088264 <pinMode>
      pinMode(_miso, INPUT);
 8083586:	f994 001f 	ldrsb.w	r0, [r4, #31]
 808358a:	2100      	movs	r1, #0
 808358c:	b280      	uxth	r0, r0
 808358e:	f004 fe69 	bl	8088264 <pinMode>
 8083592:	e7bb      	b.n	808350c <_ZN15Adafruit_LIS3DH5beginEh+0x16>
    return false;
 8083594:	2000      	movs	r0, #0
 8083596:	e7d8      	b.n	808354a <_ZN15Adafruit_LIS3DH5beginEh+0x54>

08083598 <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>:
    return((m[1]*256)+(m[0]));
}
int32_t
UbloxM8Q_GPS::getLong(uint8_t *m)
{
    return((m[3]*(0xFFFFFF+1))+(m[2]*(0xFFFF+1))+(m[1]*(0xFF+1))+(m[0]));
 8083598:	7883      	ldrb	r3, [r0, #2]
 808359a:	78c2      	ldrb	r2, [r0, #3]
 808359c:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 80835a0:	7843      	ldrb	r3, [r0, #1]
 80835a2:	7800      	ldrb	r0, [r0, #0]
 80835a4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
}
 80835a8:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 80835ac:	4770      	bx	lr

080835ae <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>:
    size_t println(T b, int base = DEC) {
 80835ae:	b570      	push	{r4, r5, r6, lr}
 80835b0:	4605      	mov	r5, r0
 80835b2:	460c      	mov	r4, r1
    if (base == 0) {
 80835b4:	4616      	mov	r6, r2
 80835b6:	b942      	cbnz	r2, 80835ca <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x1c>
        return write(n);
 80835b8:	6803      	ldr	r3, [r0, #0]
 80835ba:	b2c9      	uxtb	r1, r1
 80835bc:	689b      	ldr	r3, [r3, #8]
 80835be:	4798      	blx	r3
        n += println();
 80835c0:	4628      	mov	r0, r5
    }
 80835c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        n += println();
 80835c6:	f002 b9c8 	b.w	808595a <_ZN5Print7printlnEv>
        if (n < 0 && base == 10) {
 80835ca:	2900      	cmp	r1, #0
 80835cc:	da0a      	bge.n	80835e4 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x36>
 80835ce:	2a0a      	cmp	r2, #10
 80835d0:	d108      	bne.n	80835e4 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x36>
            t = print('-');
 80835d2:	212d      	movs	r1, #45	; 0x2d
 80835d4:	f002 f9be 	bl	8085954 <_ZN5Print5printEc>
            val = -n;
 80835d8:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
 80835da:	4628      	mov	r0, r5
 80835dc:	b2f2      	uxtb	r2, r6
 80835de:	f002 f9d2 	bl	8085986 <_ZN5Print11printNumberEmh>
 80835e2:	e7ed      	b.n	80835c0 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x12>
            val = n;
 80835e4:	4621      	mov	r1, r4
 80835e6:	e7f8      	b.n	80835da <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x2c>

080835e8 <_ZN12UbloxM8Q_GPS11common_initEv>:
  latitude = longitude = 0.0;
 80835e8:	2200      	movs	r2, #0
  initComplete = false;
 80835ea:	2300      	movs	r3, #0
  latitude = longitude = 0.0;
 80835ec:	6142      	str	r2, [r0, #20]
  hour = minute = seconds = month = day = 0;
 80835ee:	e9c0 3300 	strd	r3, r3, [r0]
  milliseconds = tow = 0;
 80835f2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  horzAcc = vertAcc = 0; // mm
 80835f6:	e9c0 330e 	strd	r3, r3, [r0, #56]	; 0x38
  velN = velE = velD = 0; // north, east, down velocity, mm/s
 80835fa:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
 80835fe:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
  odoTrip = 0; // odometer since last time commanded reset, m
 8083602:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
  odoAcc = 0; // odometer accuracy, m (1-sigma)
 8083606:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
  dateValid = false;
 808360a:	8203      	strh	r3, [r0, #16]
  latitude = longitude = 0.0;
 808360c:	6182      	str	r2, [r0, #24]
  latitudeDegrees = longitudeDegrees = 0.0;
 808360e:	61c2      	str	r2, [r0, #28]
 8083610:	6202      	str	r2, [r0, #32]
  geoidheight = altitude = 0.0;
 8083612:	6242      	str	r2, [r0, #36]	; 0x24
 8083614:	6282      	str	r2, [r0, #40]	; 0x28
  speed = 0.0; // m/s - its just gSpeed/1000.0
 8083616:	62c2      	str	r2, [r0, #44]	; 0x2c
  headingMot = headingVeh = 0.0; // degrees
 8083618:	6302      	str	r2, [r0, #48]	; 0x30
 808361a:	6342      	str	r2, [r0, #52]	; 0x34
}
 808361c:	4770      	bx	lr

0808361e <_ZN12UbloxM8Q_GPSC1Ev>:
UbloxM8Q_GPS::UbloxM8Q_GPS()
 808361e:	b508      	push	{r3, lr}
    common_init();
 8083620:	f7ff ffe2 	bl	80835e8 <_ZN12UbloxM8Q_GPS11common_initEv>
}
 8083624:	bd08      	pop	{r3, pc}

08083626 <_ZN12UbloxM8Q_GPS5ubxCSEPhS0_S0_>:
    *ck_a = 0, *ck_b = 0;
 8083626:	2000      	movs	r0, #0
{
 8083628:	b530      	push	{r4, r5, lr}
    *ck_a = 0, *ck_b = 0;
 808362a:	7010      	strb	r0, [r2, #0]
 808362c:	7018      	strb	r0, [r3, #0]

  // set when receiver enabled
  bool gpsOn;
  // length is 2 bytes, little endian
  int ubx_length(uint8_t *m) {
        return( ((m[LENGTH_IDX])+(m[LENGTH_IDX+1]*256)));}
 808362e:	794d      	ldrb	r5, [r1, #5]
 8083630:	7908      	ldrb	r0, [r1, #4]
 8083632:	1c4c      	adds	r4, r1, #1
 8083634:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 8083638:	3105      	adds	r1, #5
 808363a:	4408      	add	r0, r1
	*ck_a = *ck_a + msg[i + 2]; // skip the 2 byte header
 808363c:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8083640:	7811      	ldrb	r1, [r2, #0]
    for(i=0;i < length + 4;i++)
 8083642:	42a0      	cmp	r0, r4
	*ck_a = *ck_a + msg[i + 2]; // skip the 2 byte header
 8083644:	4429      	add	r1, r5
 8083646:	b2c9      	uxtb	r1, r1
 8083648:	7011      	strb	r1, [r2, #0]
	*ck_b = *ck_b + *ck_a;
 808364a:	781d      	ldrb	r5, [r3, #0]
 808364c:	4429      	add	r1, r5
 808364e:	7019      	strb	r1, [r3, #0]
    for(i=0;i < length + 4;i++)
 8083650:	d1f4      	bne.n	808363c <_ZN12UbloxM8Q_GPS5ubxCSEPhS0_S0_+0x16>
}
 8083652:	bd30      	pop	{r4, r5, pc}

08083654 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_>:
{
 8083654:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    switch (state){
 8083658:	4e6f      	ldr	r6, [pc, #444]	; (8083818 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1c4>)
{
 808365a:	4681      	mov	r9, r0
    switch (state){
 808365c:	7835      	ldrb	r5, [r6, #0]
{
 808365e:	460c      	mov	r4, r1
 8083660:	4690      	mov	r8, r2
 8083662:	461f      	mov	r7, r3
 8083664:	2d03      	cmp	r5, #3
 8083666:	d824      	bhi.n	80836b2 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x5e>
 8083668:	e8df f005 	tbb	[pc, r5]
 808366c:	9b834b02 	.word	0x9b834b02
	if (firstTime){
 8083670:	4d6a      	ldr	r5, [pc, #424]	; (808381c <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1c8>)
 8083672:	782b      	ldrb	r3, [r5, #0]
 8083674:	b12b      	cbz	r3, 8083682 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x2e>
 8083676:	f001 fa4b 	bl	8084b10 <HAL_Timer_Get_Milli_Seconds>
	    startTime = millis();
 808367a:	4b69      	ldr	r3, [pc, #420]	; (8083820 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1cc>)
 808367c:	6018      	str	r0, [r3, #0]
	    firstTime = false;
 808367e:	2300      	movs	r3, #0
 8083680:	702b      	strb	r3, [r5, #0]
	if(Serial1.available()){
 8083682:	f004 fa71 	bl	8087b68 <_Z22__fetch_global_Serial1v>
 8083686:	6803      	ldr	r3, [r0, #0]
 8083688:	691b      	ldr	r3, [r3, #16]
 808368a:	4798      	blx	r3
 808368c:	b168      	cbz	r0, 80836aa <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x56>
	    msg[0] = Serial1.read();
 808368e:	f004 fa6b 	bl	8087b68 <_Z22__fetch_global_Serial1v>
 8083692:	6803      	ldr	r3, [r0, #0]
 8083694:	695b      	ldr	r3, [r3, #20]
 8083696:	4798      	blx	r3
 8083698:	b2c0      	uxtb	r0, r0
	    if (msg[0] == 0xb5){
 808369a:	28b5      	cmp	r0, #181	; 0xb5
	    msg[0] = Serial1.read();
 808369c:	7020      	strb	r0, [r4, #0]
	    if (msg[0] == 0xb5){
 808369e:	d10a      	bne.n	80836b6 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x62>
		i = 1;
 80836a0:	2301      	movs	r3, #1
 80836a2:	4a60      	ldr	r2, [pc, #384]	; (8083824 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1d0>)
		state = ubxLength;
 80836a4:	7033      	strb	r3, [r6, #0]
		i = 1;
 80836a6:	6013      	str	r3, [r2, #0]
		firstTime = true;
 80836a8:	702b      	strb	r3, [r5, #0]
 80836aa:	f001 fa31 	bl	8084b10 <HAL_Timer_Get_Milli_Seconds>
	if ((state == waitB5) && ((cur - startTime)> ubxWatchdog)){
 80836ae:	7834      	ldrb	r4, [r6, #0]
 80836b0:	b16c      	cbz	r4, 80836ce <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x7a>
    switch (state){
 80836b2:	2501      	movs	r5, #1
 80836b4:	e051      	b.n	808375a <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x106>
		Serial.print(">");
 80836b6:	f004 f8a9 	bl	808780c <_Z16_fetch_usbserialv>
 80836ba:	495b      	ldr	r1, [pc, #364]	; (8083828 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1d4>)
 80836bc:	f002 f946 	bl	808594c <_ZN5Print5printEPKc>
		Serial.print(msg[0], HEX);
 80836c0:	f004 f8a4 	bl	808780c <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
 80836c4:	2210      	movs	r2, #16
 80836c6:	7821      	ldrb	r1, [r4, #0]
 80836c8:	f002 f95d 	bl	8085986 <_ZN5Print11printNumberEmh>
 80836cc:	e7ed      	b.n	80836aa <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x56>
	if ((state == waitB5) && ((cur - startTime)> ubxWatchdog)){
 80836ce:	4b54      	ldr	r3, [pc, #336]	; (8083820 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1cc>)
 80836d0:	681b      	ldr	r3, [r3, #0]
 80836d2:	1ac0      	subs	r0, r0, r3
 80836d4:	4b55      	ldr	r3, [pc, #340]	; (808382c <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1d8>)
 80836d6:	681b      	ldr	r3, [r3, #0]
 80836d8:	4298      	cmp	r0, r3
 80836da:	d9ea      	bls.n	80836b2 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x5e>
	    Serial.println("Tired of waiting for the GPS. I'm going shut it off and reboot.");
 80836dc:	f004 f896 	bl	808780c <_Z16_fetch_usbserialv>
 80836e0:	4953      	ldr	r1, [pc, #332]	; (8083830 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1dc>)
 80836e2:	f002 f946 	bl	8085972 <_ZN5Print7printlnEPKc>
	    delay(2000);
 80836e6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80836ea:	f003 fb4b 	bl	8086d84 <delay>
	    digitalWrite(D6,HIGH);
 80836ee:	2101      	movs	r1, #1
 80836f0:	2006      	movs	r0, #6
 80836f2:	f004 fdc8 	bl	8088286 <digitalWrite>
	    delay(2000);
 80836f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80836fa:	f003 fb43 	bl	8086d84 <delay>
	    resetFunc();
 80836fe:	47a0      	blx	r4
 8083700:	e7d7      	b.n	80836b2 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x5e>
	if(Serial1.available()){
 8083702:	f004 fa31 	bl	8087b68 <_Z22__fetch_global_Serial1v>
 8083706:	6803      	ldr	r3, [r0, #0]
 8083708:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8083824 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1d0>
 808370c:	691b      	ldr	r3, [r3, #16]
 808370e:	4798      	blx	r3
 8083710:	b150      	cbz	r0, 8083728 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0xd4>
	    msg[i] = Serial1.read();
 8083712:	f004 fa29 	bl	8087b68 <_Z22__fetch_global_Serial1v>
 8083716:	6803      	ldr	r3, [r0, #0]
 8083718:	695b      	ldr	r3, [r3, #20]
 808371a:	4798      	blx	r3
 808371c:	f8d9 3000 	ldr.w	r3, [r9]
 8083720:	54e0      	strb	r0, [r4, r3]
	    i++;
 8083722:	3301      	adds	r3, #1
 8083724:	f8c9 3000 	str.w	r3, [r9]
	if (i == 6){ // read all the header
 8083728:	f8d9 3000 	ldr.w	r3, [r9]
 808372c:	2b06      	cmp	r3, #6
 808372e:	d1c0      	bne.n	80836b2 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x5e>
 8083730:	7962      	ldrb	r2, [r4, #5]
 8083732:	7923      	ldrb	r3, [r4, #4]
 8083734:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	    if ( *length > (256 - 8) ){
 8083738:	2bf8      	cmp	r3, #248	; 0xf8
	    *length = ubx_length(msg);
 808373a:	603b      	str	r3, [r7, #0]
	    if ( *length > (256 - 8) ){
 808373c:	dd11      	ble.n	8083762 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x10e>
		Serial.print("readUBXmsg bad length: ");
 808373e:	f004 f865 	bl	808780c <_Z16_fetch_usbserialv>
 8083742:	493c      	ldr	r1, [pc, #240]	; (8083834 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1e0>)
 8083744:	f002 f902 	bl	808594c <_ZN5Print5printEPKc>
		Serial.println(*length);
 8083748:	f004 f860 	bl	808780c <_Z16_fetch_usbserialv>
 808374c:	220a      	movs	r2, #10
 808374e:	6839      	ldr	r1, [r7, #0]
 8083750:	f7ff ff2d 	bl	80835ae <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
		state = waitB5;
 8083754:	2300      	movs	r3, #0
		return ubxBAD_LENGTH;
 8083756:	2502      	movs	r5, #2
		state = waitB5;
 8083758:	7033      	strb	r3, [r6, #0]
}
 808375a:	4628      	mov	r0, r5
 808375c:	b003      	add	sp, #12
 808375e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*type = ubxMsgType(msg);
 8083762:	8863      	ldrh	r3, [r4, #2]
 8083764:	ba5b      	rev16	r3, r3
 8083766:	b29b      	uxth	r3, r3
 8083768:	f8c8 3000 	str.w	r3, [r8]
		state = payload;
 808376c:	2302      	movs	r3, #2
 808376e:	7033      	strb	r3, [r6, #0]
 8083770:	e7f3      	b.n	808375a <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x106>
	if(Serial1.available()){
 8083772:	f004 f9f9 	bl	8087b68 <_Z22__fetch_global_Serial1v>
 8083776:	6803      	ldr	r3, [r0, #0]
 8083778:	4d2a      	ldr	r5, [pc, #168]	; (8083824 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1d0>)
 808377a:	691b      	ldr	r3, [r3, #16]
 808377c:	4798      	blx	r3
 808377e:	b140      	cbz	r0, 8083792 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x13e>
	    msg[i] = Serial1.read();
 8083780:	f004 f9f2 	bl	8087b68 <_Z22__fetch_global_Serial1v>
 8083784:	6803      	ldr	r3, [r0, #0]
 8083786:	695b      	ldr	r3, [r3, #20]
 8083788:	4798      	blx	r3
 808378a:	682b      	ldr	r3, [r5, #0]
 808378c:	54e0      	strb	r0, [r4, r3]
	    i++;
 808378e:	3301      	adds	r3, #1
 8083790:	602b      	str	r3, [r5, #0]
	if ( i == (6 + *length)){
 8083792:	683b      	ldr	r3, [r7, #0]
 8083794:	682a      	ldr	r2, [r5, #0]
 8083796:	3306      	adds	r3, #6
 8083798:	4293      	cmp	r3, r2
 808379a:	d18a      	bne.n	80836b2 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x5e>
	    state = checksum;
 808379c:	2303      	movs	r3, #3
 808379e:	7033      	strb	r3, [r6, #0]
 80837a0:	e787      	b.n	80836b2 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x5e>
	if(Serial1.available()){
 80837a2:	f004 f9e1 	bl	8087b68 <_Z22__fetch_global_Serial1v>
 80837a6:	6803      	ldr	r3, [r0, #0]
 80837a8:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8083824 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1d0>
 80837ac:	691b      	ldr	r3, [r3, #16]
 80837ae:	4798      	blx	r3
 80837b0:	b150      	cbz	r0, 80837c8 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x174>
	    msg[i] = Serial1.read();
 80837b2:	f004 f9d9 	bl	8087b68 <_Z22__fetch_global_Serial1v>
 80837b6:	6803      	ldr	r3, [r0, #0]
 80837b8:	695b      	ldr	r3, [r3, #20]
 80837ba:	4798      	blx	r3
 80837bc:	f8d8 3000 	ldr.w	r3, [r8]
 80837c0:	54e0      	strb	r0, [r4, r3]
	    i++;
 80837c2:	3301      	adds	r3, #1
 80837c4:	f8c8 3000 	str.w	r3, [r8]
	if ( i == (8 + *length)){
 80837c8:	683f      	ldr	r7, [r7, #0]
 80837ca:	f8d8 3000 	ldr.w	r3, [r8]
 80837ce:	3708      	adds	r7, #8
 80837d0:	429f      	cmp	r7, r3
 80837d2:	f47f af6e 	bne.w	80836b2 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x5e>
	    state = waitB5; // going to start over error or not
 80837d6:	f04f 0800 	mov.w	r8, #0
	    ubxCS(msg, &ck_a, &ck_b);
 80837da:	4621      	mov	r1, r4
 80837dc:	f10d 0307 	add.w	r3, sp, #7
 80837e0:	f10d 0206 	add.w	r2, sp, #6
 80837e4:	4648      	mov	r0, r9
	    if ( (msg[i-2] != ck_a) || (msg[i-1] != ck_b)){
 80837e6:	443c      	add	r4, r7
	    state = waitB5; // going to start over error or not
 80837e8:	f886 8000 	strb.w	r8, [r6]
	    ubxCS(msg, &ck_a, &ck_b);
 80837ec:	f7ff ff1b 	bl	8083626 <_ZN12UbloxM8Q_GPS5ubxCSEPhS0_S0_>
	    if ( (msg[i-2] != ck_a) || (msg[i-1] != ck_b)){
 80837f0:	f814 2c02 	ldrb.w	r2, [r4, #-2]
 80837f4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80837f8:	429a      	cmp	r2, r3
 80837fa:	d105      	bne.n	8083808 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1b4>
 80837fc:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8083800:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8083804:	429a      	cmp	r2, r3
 8083806:	d005      	beq.n	8083814 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1c0>
		Serial.println("readUBXmsg bad check sum ");
 8083808:	f004 f800 	bl	808780c <_Z16_fetch_usbserialv>
 808380c:	490a      	ldr	r1, [pc, #40]	; (8083838 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1e4>)
 808380e:	f002 f8b0 	bl	8085972 <_ZN5Print7printlnEPKc>
		return ubxBAD_CHECK_SUM;
 8083812:	e7a2      	b.n	808375a <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x106>
	    return ubxSUCCESS;
 8083814:	4645      	mov	r5, r8
 8083816:	e7a0      	b.n	808375a <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x106>
 8083818:	200003ac 	.word	0x200003ac
 808381c:	20000030 	.word	0x20000030
 8083820:	200003b0 	.word	0x200003b0
 8083824:	200003a8 	.word	0x200003a8
 8083828:	0808b8fc 	.word	0x0808b8fc
 808382c:	200000b4 	.word	0x200000b4
 8083830:	0808b8fe 	.word	0x0808b8fe
 8083834:	0808b93e 	.word	0x0808b93e
 8083838:	0808b956 	.word	0x0808b956

0808383c <_ZN12UbloxM8Q_GPS8ubxAddCSEPh>:
{
 808383c:	460a      	mov	r2, r1
 808383e:	b410      	push	{r4}
 8083840:	794b      	ldrb	r3, [r1, #5]
 8083842:	790c      	ldrb	r4, [r1, #4]
 8083844:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    ubxCS(msg, &msg[length+6], &msg[length+7]);
 8083848:	1de3      	adds	r3, r4, #7
 808384a:	3406      	adds	r4, #6
 808384c:	4422      	add	r2, r4
 808384e:	440b      	add	r3, r1
}
 8083850:	bc10      	pop	{r4}
    ubxCS(msg, &msg[length+6], &msg[length+7]);
 8083852:	f7ff bee8 	b.w	8083626 <_ZN12UbloxM8Q_GPS5ubxCSEPhS0_S0_>
	...

08083858 <_ZN12UbloxM8Q_GPS7showUbxEPh>:
{
 8083858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808385a:	460d      	mov	r5, r1
    for (i = 0; i < length + 8; i++){
 808385c:	2600      	movs	r6, #0
 808385e:	794b      	ldrb	r3, [r1, #5]
 8083860:	790c      	ldrb	r4, [r1, #4]
	Serial.print(msg[i], HEX); Serial.print(",");
 8083862:	4f0c      	ldr	r7, [pc, #48]	; (8083894 <_ZN12UbloxM8Q_GPS7showUbxEPh+0x3c>)
 8083864:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    for (i = 0; i < length + 8; i++){
 8083868:	3407      	adds	r4, #7
	Serial.print(msg[i], HEX); Serial.print(",");
 808386a:	f003 ffcf 	bl	808780c <_Z16_fetch_usbserialv>
 808386e:	5da9      	ldrb	r1, [r5, r6]
 8083870:	2210      	movs	r2, #16
 8083872:	f002 f888 	bl	8085986 <_ZN5Print11printNumberEmh>
    for (i = 0; i < length + 8; i++){
 8083876:	3601      	adds	r6, #1
	Serial.print(msg[i], HEX); Serial.print(",");
 8083878:	f003 ffc8 	bl	808780c <_Z16_fetch_usbserialv>
 808387c:	4639      	mov	r1, r7
 808387e:	f002 f865 	bl	808594c <_ZN5Print5printEPKc>
    for (i = 0; i < length + 8; i++){
 8083882:	42b4      	cmp	r4, r6
 8083884:	daf1      	bge.n	808386a <_ZN12UbloxM8Q_GPS7showUbxEPh+0x12>
    Serial.println(" ");
 8083886:	f003 ffc1 	bl	808780c <_Z16_fetch_usbserialv>
}
 808388a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Serial.println(" ");
 808388e:	4902      	ldr	r1, [pc, #8]	; (8083898 <_ZN12UbloxM8Q_GPS7showUbxEPh+0x40>)
 8083890:	f002 b86f 	b.w	8085972 <_ZN5Print7printlnEPKc>
 8083894:	0808b970 	.word	0x0808b970
 8083898:	0808bbde 	.word	0x0808bbde

0808389c <_ZN12UbloxM8Q_GPS8getULongEPh>:
uint32_t 
UbloxM8Q_GPS::getULong(uint8_t *m)
{
    return((m[3]*(0xFFFFFF+1))+(m[2]*(0xFFFF+1))+(m[1]*(0xFF+1))+(m[0]));
 808389c:	78cb      	ldrb	r3, [r1, #3]
 808389e:	7888      	ldrb	r0, [r1, #2]
 80838a0:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 80838a4:	784b      	ldrb	r3, [r1, #1]
 80838a6:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 80838aa:	7808      	ldrb	r0, [r1, #0]
}
 80838ac:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 80838b0:	4770      	bx	lr
 80838b2:	0000      	movs	r0, r0
 80838b4:	0000      	movs	r0, r0
	...

080838b8 <_ZN12UbloxM8Q_GPS11parsePOSLLHEPh>:
{
 80838b8:	b538      	push	{r3, r4, r5, lr}
 80838ba:	4604      	mov	r4, r0
       ((float) getLong(&data[4])) * 0.0000001;
 80838bc:	f101 000a 	add.w	r0, r1, #10
 80838c0:	f7ff fe6a 	bl	8083598 <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
{
 80838c4:	460d      	mov	r5, r1
       ((float) getLong(&data[4])) * 0.0000001;
 80838c6:	f006 ff2b 	bl	808a720 <__aeabi_i2f>
 80838ca:	f006 facf 	bl	8089e6c <__aeabi_f2d>
 80838ce:	a31c      	add	r3, pc, #112	; (adr r3, 8083940 <_ZN12UbloxM8Q_GPS11parsePOSLLHEPh+0x88>)
 80838d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80838d4:	f006 fb22 	bl	8089f1c <__aeabi_dmul>
 80838d8:	f006 fe18 	bl	808a50c <__aeabi_d2f>
    longitudeDegrees =
 80838dc:	6220      	str	r0, [r4, #32]
    longitude =              // Longitude, deg
 80838de:	61a0      	str	r0, [r4, #24]
       ((float) getLong(&data[8])) * 0.0000001;
 80838e0:	f105 000e 	add.w	r0, r5, #14
 80838e4:	f7ff fe58 	bl	8083598 <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
 80838e8:	f006 ff1a 	bl	808a720 <__aeabi_i2f>
 80838ec:	f006 fabe 	bl	8089e6c <__aeabi_f2d>
 80838f0:	a313      	add	r3, pc, #76	; (adr r3, 8083940 <_ZN12UbloxM8Q_GPS11parsePOSLLHEPh+0x88>)
 80838f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80838f6:	f006 fb11 	bl	8089f1c <__aeabi_dmul>
 80838fa:	f006 fe07 	bl	808a50c <__aeabi_d2f>
    latitudeDegrees =
 80838fe:	61e0      	str	r0, [r4, #28]
    latitude =              // Latitude, deg
 8083900:	6160      	str	r0, [r4, #20]
       (float)getLong(&data[12]);  // WGS84 unless user altered. See ublox spec.
 8083902:	f105 0012 	add.w	r0, r5, #18
 8083906:	f7ff fe47 	bl	8083598 <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
 808390a:	f006 ff09 	bl	808a720 <__aeabi_i2f>
       (float)getULong(&data[16]);
 808390e:	f105 0116 	add.w	r1, r5, #22
       (float)getLong(&data[12]);  // WGS84 unless user altered. See ublox spec.
 8083912:	6260      	str	r0, [r4, #36]	; 0x24
       (float)getULong(&data[16]);
 8083914:	4620      	mov	r0, r4
 8083916:	f7ff ffc1 	bl	808389c <_ZN12UbloxM8Q_GPS8getULongEPh>
 808391a:	f006 fefd 	bl	808a718 <__aeabi_ui2f>
       getULong(&data[20]);
 808391e:	f105 011a 	add.w	r1, r5, #26
       (float)getULong(&data[16]);
 8083922:	62a0      	str	r0, [r4, #40]	; 0x28
       getULong(&data[20]);
 8083924:	4620      	mov	r0, r4
 8083926:	f7ff ffb9 	bl	808389c <_ZN12UbloxM8Q_GPS8getULongEPh>
       getULong(&data[24]);
 808392a:	f105 011e 	add.w	r1, r5, #30
    horzAcc =                // Horizontal Accuracy estimate, mm
 808392e:	63e0      	str	r0, [r4, #60]	; 0x3c
       getULong(&data[24]);
 8083930:	4620      	mov	r0, r4
 8083932:	f7ff ffb3 	bl	808389c <_ZN12UbloxM8Q_GPS8getULongEPh>
    vertAcc =                // Vertical Accuracy extimate, mm
 8083936:	6420      	str	r0, [r4, #64]	; 0x40
}
 8083938:	bd38      	pop	{r3, r4, r5, pc}
 808393a:	bf00      	nop
 808393c:	f3af 8000 	nop.w
 8083940:	9abcaf48 	.word	0x9abcaf48
 8083944:	3e7ad7f2 	.word	0x3e7ad7f2

08083948 <_ZN12UbloxM8Q_GPS8parsePVTEPh>:
{
 8083948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808394a:	460d      	mov	r5, r1
    tow = getULong(&data[0]);
 808394c:	3106      	adds	r1, #6
{
 808394e:	4604      	mov	r4, r0
    tow = getULong(&data[0]);
 8083950:	f7ff ffa4 	bl	808389c <_ZN12UbloxM8Q_GPS8getULongEPh>
 8083954:	60e0      	str	r0, [r4, #12]
    if ((data[21] & 0x01) == 0){
 8083956:	7eeb      	ldrb	r3, [r5, #27]
 8083958:	07db      	lsls	r3, r3, #31
 808395a:	f140 80af 	bpl.w	8083abc <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x174>
    uint8_t flags = data[11];
 808395e:	7c6b      	ldrb	r3, [r5, #17]
    if ( flags & 0x01){
 8083960:	f013 0201 	ands.w	r2, r3, #1
 8083964:	f000 80ab 	beq.w	8083abe <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x176>
	dateValid = true;
 8083968:	2201      	movs	r2, #1
 808396a:	7422      	strb	r2, [r4, #16]
    return((m[1]*256)+(m[0]));
 808396c:	7ae9      	ldrb	r1, [r5, #11]
 808396e:	7aaa      	ldrb	r2, [r5, #10]
 8083970:	eb02 2201 	add.w	r2, r2, r1, lsl #8
	year = getUInt(&data[4]);  // UTC
 8083974:	80e2      	strh	r2, [r4, #6]
	month = data[6];
 8083976:	7b2a      	ldrb	r2, [r5, #12]
 8083978:	7122      	strb	r2, [r4, #4]
	day = data[7];
 808397a:	7b6a      	ldrb	r2, [r5, #13]
 808397c:	7162      	strb	r2, [r4, #5]
    if ( flags & 0x02){
 808397e:	f013 0302 	ands.w	r3, r3, #2
 8083982:	f000 809e 	beq.w	8083ac2 <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x17a>
	timeValid = true;
 8083986:	2301      	movs	r3, #1
 8083988:	7463      	strb	r3, [r4, #17]
	hour = data[8];
 808398a:	7bab      	ldrb	r3, [r5, #14]
 808398c:	7063      	strb	r3, [r4, #1]
	minute = data[9];
 808398e:	7beb      	ldrb	r3, [r5, #15]
 8083990:	70a3      	strb	r3, [r4, #2]
	seconds = data[10];
 8083992:	7c2b      	ldrb	r3, [r5, #16]
 8083994:	70e3      	strb	r3, [r4, #3]
    int32_t nanoseconds = getLong(&data[16]);
 8083996:	f105 0016 	add.w	r0, r5, #22
 808399a:	f7ff fdfd 	bl	8083598 <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
    if (nanoseconds > 0){
 808399e:	2800      	cmp	r0, #0
        milliseconds = nanoseconds/1000;
 80839a0:	bfca      	itet	gt
 80839a2:	f44f 737a 	movgt.w	r3, #1000	; 0x3e8
        milliseconds = 0;
 80839a6:	2000      	movle	r0, #0
        milliseconds = nanoseconds/1000;
 80839a8:	fb90 f0f3 	sdivgt	r0, r0, r3
 80839ac:	60a0      	str	r0, [r4, #8]
    fixquality = data[20];
 80839ae:	7eab      	ldrb	r3, [r5, #26]
          ((float) getLong(&data[24]))*0.0000001;
 80839b0:	f105 001e 	add.w	r0, r5, #30
    fixquality = data[20];
 80839b4:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    fix =  ((fixquality == 3) || (fixquality == 2));
 80839b8:	3b02      	subs	r3, #2
 80839ba:	2b01      	cmp	r3, #1
 80839bc:	bf8c      	ite	hi
 80839be:	2300      	movhi	r3, #0
 80839c0:	2301      	movls	r3, #1
 80839c2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    satellites = data[23];
 80839c6:	7f6b      	ldrb	r3, [r5, #29]
        (float) (getLong(&data[64])/100000.0);
 80839c8:	f105 0746 	add.w	r7, r5, #70	; 0x46
    satellites = data[23];
 80839cc:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
          ((float) getLong(&data[24]))*0.0000001;
 80839d0:	f7ff fde2 	bl	8083598 <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
 80839d4:	f006 fea4 	bl	808a720 <__aeabi_i2f>
 80839d8:	f006 fa48 	bl	8089e6c <__aeabi_f2d>
 80839dc:	a33a      	add	r3, pc, #232	; (adr r3, 8083ac8 <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x180>)
 80839de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80839e2:	f006 fa9b 	bl	8089f1c <__aeabi_dmul>
 80839e6:	f006 fd91 	bl	808a50c <__aeabi_d2f>
    longitudeDegrees =
 80839ea:	6220      	str	r0, [r4, #32]
    longitude =              // Longitude, deg
 80839ec:	61a0      	str	r0, [r4, #24]
       ((float) getLong(&data[28]))*0.0000001;
 80839ee:	f105 0022 	add.w	r0, r5, #34	; 0x22
 80839f2:	f7ff fdd1 	bl	8083598 <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
 80839f6:	f006 fe93 	bl	808a720 <__aeabi_i2f>
 80839fa:	f006 fa37 	bl	8089e6c <__aeabi_f2d>
 80839fe:	a332      	add	r3, pc, #200	; (adr r3, 8083ac8 <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x180>)
 8083a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8083a04:	f006 fa8a 	bl	8089f1c <__aeabi_dmul>
 8083a08:	f006 fd80 	bl	808a50c <__aeabi_d2f>
    latitudeDegrees =
 8083a0c:	61e0      	str	r0, [r4, #28]
    latitude =              // Latitude, deg
 8083a0e:	6160      	str	r0, [r4, #20]
       (float)getLong(&data[32]); // WGS84 unless user altered. See ublox spec.
 8083a10:	f105 0026 	add.w	r0, r5, #38	; 0x26
 8083a14:	f7ff fdc0 	bl	8083598 <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
 8083a18:	f006 fe82 	bl	808a720 <__aeabi_i2f>
       (float)getULong(&data[36]);
 8083a1c:	f105 012a 	add.w	r1, r5, #42	; 0x2a
       (float)getLong(&data[32]); // WGS84 unless user altered. See ublox spec.
 8083a20:	6260      	str	r0, [r4, #36]	; 0x24
       (float)getULong(&data[36]);
 8083a22:	4620      	mov	r0, r4
 8083a24:	f7ff ff3a 	bl	808389c <_ZN12UbloxM8Q_GPS8getULongEPh>
 8083a28:	f006 fe76 	bl	808a718 <__aeabi_ui2f>
       getULong(&data[40]);
 8083a2c:	f105 012e 	add.w	r1, r5, #46	; 0x2e
       (float)getULong(&data[36]);
 8083a30:	62a0      	str	r0, [r4, #40]	; 0x28
       getULong(&data[40]);
 8083a32:	4620      	mov	r0, r4
 8083a34:	f7ff ff32 	bl	808389c <_ZN12UbloxM8Q_GPS8getULongEPh>
       getULong(&data[44]);
 8083a38:	f105 0132 	add.w	r1, r5, #50	; 0x32
    horzAcc =                // Horizontal Accuracy estimate, mm
 8083a3c:	63e0      	str	r0, [r4, #60]	; 0x3c
       getULong(&data[44]);
 8083a3e:	4620      	mov	r0, r4
 8083a40:	f7ff ff2c 	bl	808389c <_ZN12UbloxM8Q_GPS8getULongEPh>
    vertAcc =                // Vertical Accuracy extimate, mm
 8083a44:	6420      	str	r0, [r4, #64]	; 0x40
        getLong(&data[48]);
 8083a46:	f105 0036 	add.w	r0, r5, #54	; 0x36
 8083a4a:	f7ff fda5 	bl	8083598 <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
    velN =                   // North velocity, mm/s
 8083a4e:	6460      	str	r0, [r4, #68]	; 0x44
        getLong(&data[52]);
 8083a50:	f105 003a 	add.w	r0, r5, #58	; 0x3a
 8083a54:	f7ff fda0 	bl	8083598 <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
    velE =                   // East velocity, mm/s
 8083a58:	64a0      	str	r0, [r4, #72]	; 0x48
        getLong(&data[56]);
 8083a5a:	f105 003e 	add.w	r0, r5, #62	; 0x3e
 8083a5e:	f7ff fd9b 	bl	8083598 <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
    velD =                   // Down velocity, mm/s
 8083a62:	64e0      	str	r0, [r4, #76]	; 0x4c
        getLong(&data[60]);
 8083a64:	f105 0042 	add.w	r0, r5, #66	; 0x42
 8083a68:	f7ff fd96 	bl	8083598 <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
 8083a6c:	4606      	mov	r6, r0
    gSpeed =                   // Ground speed, mm/s
 8083a6e:	6520      	str	r0, [r4, #80]	; 0x50
        (float) (getLong(&data[64])/100000.0);
 8083a70:	4638      	mov	r0, r7
 8083a72:	f7ff fd91 	bl	8083598 <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
 8083a76:	f006 f9e7 	bl	8089e48 <__aeabi_i2d>
 8083a7a:	a315      	add	r3, pc, #84	; (adr r3, 8083ad0 <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x188>)
 8083a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8083a80:	f006 fb76 	bl	808a170 <__aeabi_ddiv>
 8083a84:	f006 fd42 	bl	808a50c <__aeabi_d2f>
 8083a88:	6320      	str	r0, [r4, #48]	; 0x30
        (float) (getLong(&data[64])/100000.0);
 8083a8a:	4638      	mov	r0, r7
 8083a8c:	f7ff fd84 	bl	8083598 <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
 8083a90:	f006 f9da 	bl	8089e48 <__aeabi_i2d>
 8083a94:	a30e      	add	r3, pc, #56	; (adr r3, 8083ad0 <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x188>)
 8083a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8083a9a:	f006 fb69 	bl	808a170 <__aeabi_ddiv>
 8083a9e:	f006 fd35 	bl	808a50c <__aeabi_d2f>
 8083aa2:	6360      	str	r0, [r4, #52]	; 0x34
    if (data[21] & 0x20){
 8083aa4:	7eeb      	ldrb	r3, [r5, #27]
    speed = ((float)gSpeed/1000.0); // from integer mm/s to float m/s
 8083aa6:	4630      	mov	r0, r6
    if (data[21] & 0x20){
 8083aa8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8083aac:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    speed = ((float)gSpeed/1000.0); // from integer mm/s to float m/s
 8083ab0:	f006 fe36 	bl	808a720 <__aeabi_i2f>
 8083ab4:	4908      	ldr	r1, [pc, #32]	; (8083ad8 <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x190>)
 8083ab6:	f006 ff3b 	bl	808a930 <__aeabi_fdiv>
 8083aba:	62e0      	str	r0, [r4, #44]	; 0x2c
}
 8083abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	dateValid = false;
 8083abe:	7422      	strb	r2, [r4, #16]
 8083ac0:	e75d      	b.n	808397e <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x36>
	timeValid = false;
 8083ac2:	7463      	strb	r3, [r4, #17]
 8083ac4:	e767      	b.n	8083996 <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x4e>
 8083ac6:	bf00      	nop
 8083ac8:	9abcaf48 	.word	0x9abcaf48
 8083acc:	3e7ad7f2 	.word	0x3e7ad7f2
 8083ad0:	00000000 	.word	0x00000000
 8083ad4:	40f86a00 	.word	0x40f86a00
 8083ad8:	447a0000 	.word	0x447a0000

08083adc <_ZN12UbloxM8Q_GPS8parseODOEPh>:
{
 8083adc:	b510      	push	{r4, lr}
 8083ade:	460c      	mov	r4, r1
    odoTrip = getULong(&data[8]); // since reset, m
 8083ae0:	310e      	adds	r1, #14
{
 8083ae2:	4602      	mov	r2, r0
    odoTrip = getULong(&data[8]); // since reset, m
 8083ae4:	f7ff feda 	bl	808389c <_ZN12UbloxM8Q_GPS8getULongEPh>
    odoTotal = getULong(&data[12]); // since power up, m
 8083ae8:	f104 0112 	add.w	r1, r4, #18
    odoTrip = getULong(&data[8]); // since reset, m
 8083aec:	6550      	str	r0, [r2, #84]	; 0x54
    odoTotal = getULong(&data[12]); // since power up, m
 8083aee:	4610      	mov	r0, r2
 8083af0:	f7ff fed4 	bl	808389c <_ZN12UbloxM8Q_GPS8getULongEPh>
    odoAcc = getULong(&data[16]); // m 1-sigma
 8083af4:	f104 0116 	add.w	r1, r4, #22
    odoTotal = getULong(&data[12]); // since power up, m
 8083af8:	6590      	str	r0, [r2, #88]	; 0x58
    odoAcc = getULong(&data[16]); // m 1-sigma
 8083afa:	4610      	mov	r0, r2
 8083afc:	f7ff fece 	bl	808389c <_ZN12UbloxM8Q_GPS8getULongEPh>
 8083b00:	65d0      	str	r0, [r2, #92]	; 0x5c
}
 8083b02:	bd10      	pop	{r4, pc}

08083b04 <_ZN12UbloxM8Q_GPS7readVerEv>:
// Used only by UbloxM8Q_GPS.begin() to read the initial report of version
// information from the receiver, write it to Serial, and then turn off
// the NMEA ascii messages.
void
UbloxM8Q_GPS::readVer()
{
 8083b04:	b538      	push	{r3, r4, r5, lr}
    int linecnt = 0;
 8083b06:	2500      	movs	r5, #0
    char c;
    while (linecnt < 10){
	while (Serial1.available()){
 8083b08:	f004 f82e 	bl	8087b68 <_Z22__fetch_global_Serial1v>
 8083b0c:	6803      	ldr	r3, [r0, #0]
 8083b0e:	691b      	ldr	r3, [r3, #16]
 8083b10:	4798      	blx	r3
 8083b12:	b960      	cbnz	r0, 8083b2e <_ZN12UbloxM8Q_GPS7readVerEv+0x2a>
    while (linecnt < 10){
 8083b14:	2d09      	cmp	r5, #9
 8083b16:	ddf7      	ble.n	8083b08 <_ZN12UbloxM8Q_GPS7readVerEv+0x4>
		linecnt++;
	    }
	    Serial.print(c);
	} 
    }
    Serial1.print("$PUBX,41,1,3,1,9600,0*16\r\n");  // Turn off nmea
 8083b18:	f004 f826 	bl	8087b68 <_Z22__fetch_global_Serial1v>
 8083b1c:	490b      	ldr	r1, [pc, #44]	; (8083b4c <_ZN12UbloxM8Q_GPS7readVerEv+0x48>)
 8083b1e:	f001 ff15 	bl	808594c <_ZN5Print5printEPKc>
    // Must wait for nmea data to rattle out or it gets confused
    // with ubx data.
    delay(2000);
}
 8083b22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    delay(2000);
 8083b26:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8083b2a:	f003 b92b 	b.w	8086d84 <delay>
	    c = Serial1.read();
 8083b2e:	f004 f81b 	bl	8087b68 <_Z22__fetch_global_Serial1v>
 8083b32:	6803      	ldr	r3, [r0, #0]
 8083b34:	695b      	ldr	r3, [r3, #20]
 8083b36:	4798      	blx	r3
 8083b38:	b2c4      	uxtb	r4, r0
	    if ( c == '\n'){
 8083b3a:	2c0a      	cmp	r4, #10
		linecnt++;
 8083b3c:	bf08      	it	eq
 8083b3e:	3501      	addeq	r5, #1
	    Serial.print(c);
 8083b40:	f003 fe64 	bl	808780c <_Z16_fetch_usbserialv>
 8083b44:	4621      	mov	r1, r4
 8083b46:	f001 ff05 	bl	8085954 <_ZN5Print5printEc>
	while (Serial1.available()){
 8083b4a:	e7dd      	b.n	8083b08 <_ZN12UbloxM8Q_GPS7readVerEv+0x4>
 8083b4c:	0808b972 	.word	0x0808b972

08083b50 <_ZN12UbloxM8Q_GPS11reportErrorEi9ubxReturn>:

// report error from begin()
void
UbloxM8Q_GPS::reportError(int state, enum ubxReturn ret)
{
 8083b50:	b570      	push	{r4, r5, r6, lr}
 8083b52:	460c      	mov	r4, r1
 8083b54:	4615      	mov	r5, r2
    Serial.print("begin failed, state: ");
 8083b56:	f003 fe59 	bl	808780c <_Z16_fetch_usbserialv>
 8083b5a:	4911      	ldr	r1, [pc, #68]	; (8083ba0 <_ZN12UbloxM8Q_GPS11reportErrorEi9ubxReturn+0x50>)
 8083b5c:	f001 fef6 	bl	808594c <_ZN5Print5printEPKc>
    Serial.print(state);
 8083b60:	f003 fe54 	bl	808780c <_Z16_fetch_usbserialv>
        if (n < 0 && base == 10) {
 8083b64:	2c00      	cmp	r4, #0
 8083b66:	4606      	mov	r6, r0
 8083b68:	da18      	bge.n	8083b9c <_ZN12UbloxM8Q_GPS11reportErrorEi9ubxReturn+0x4c>
            t = print('-');
 8083b6a:	212d      	movs	r1, #45	; 0x2d
 8083b6c:	f001 fef2 	bl	8085954 <_ZN5Print5printEc>
            val = -n;
 8083b70:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
 8083b72:	220a      	movs	r2, #10
 8083b74:	4630      	mov	r0, r6
 8083b76:	f001 ff06 	bl	8085986 <_ZN5Print11printNumberEmh>
    Serial.print(" error: ");
 8083b7a:	f003 fe47 	bl	808780c <_Z16_fetch_usbserialv>
 8083b7e:	4909      	ldr	r1, [pc, #36]	; (8083ba4 <_ZN12UbloxM8Q_GPS11reportErrorEi9ubxReturn+0x54>)
 8083b80:	f001 fee4 	bl	808594c <_ZN5Print5printEPKc>
    Serial.println(ret);
 8083b84:	f003 fe42 	bl	808780c <_Z16_fetch_usbserialv>
 8083b88:	4604      	mov	r4, r0
 8083b8a:	4629      	mov	r1, r5
 8083b8c:	220a      	movs	r2, #10
 8083b8e:	f001 fefa 	bl	8085986 <_ZN5Print11printNumberEmh>
        n += println();
 8083b92:	4620      	mov	r0, r4
}
 8083b94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8083b98:	f001 bedf 	b.w	808595a <_ZN5Print7printlnEv>
            val = n;
 8083b9c:	4621      	mov	r1, r4
 8083b9e:	e7e8      	b.n	8083b72 <_ZN12UbloxM8Q_GPS11reportErrorEi9ubxReturn+0x22>
 8083ba0:	0808b98d 	.word	0x0808b98d
 8083ba4:	0808b9a3 	.word	0x0808b9a3

08083ba8 <_ZN8AckedMsgC1Ev>:


// AckedMsg methods
AckedMsg::AckedMsg()
 8083ba8:	b510      	push	{r4, lr}
 8083baa:	4604      	mov	r4, r0
{
    for(uint16_t i=0;i<sizeof(ackList)/sizeof(int);i++) {
	ackList[i] = 0;
 8083bac:	2228      	movs	r2, #40	; 0x28
 8083bae:	2100      	movs	r1, #0
 8083bb0:	f007 f870 	bl	808ac94 <memset>
    }
}
 8083bb4:	4620      	mov	r0, r4
 8083bb6:	bd10      	pop	{r4, pc}

08083bb8 <_ZN8AckedMsg6setAckEi>:
int 
AckedMsg::setAck(int msgType)
{
 8083bb8:	4602      	mov	r2, r0
 8083bba:	2300      	movs	r3, #0
    for(uint16_t i=0;i<sizeof(ackList)/sizeof(int);i++) {
	if (!ackList[i]){
 8083bbc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8083bc0:	b910      	cbnz	r0, 8083bc8 <_ZN8AckedMsg6setAckEi+0x10>
	    ackList[i] = msgType;
 8083bc2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    return 0;
 8083bc6:	4770      	bx	lr
    for(uint16_t i=0;i<sizeof(ackList)/sizeof(int);i++) {
 8083bc8:	3301      	adds	r3, #1
 8083bca:	2b0a      	cmp	r3, #10
 8083bcc:	d1f6      	bne.n	8083bbc <_ZN8AckedMsg6setAckEi+0x4>
	}
    }
    return -1;
 8083bce:	f04f 30ff 	mov.w	r0, #4294967295
}
 8083bd2:	4770      	bx	lr

08083bd4 <_ZN8AckedMsg8clearAckEi>:
void
AckedMsg::clearAck(int msgType)
{
    for(uint16_t i=0;i<sizeof(ackList)/sizeof(int);i++) {
	if (ackList[i] == msgType){
	    ackList[i] = 0;
 8083bd4:	2200      	movs	r2, #0
{
 8083bd6:	b510      	push	{r4, lr}
 8083bd8:	1f03      	subs	r3, r0, #4
 8083bda:	3024      	adds	r0, #36	; 0x24
	if (ackList[i] == msgType){
 8083bdc:	f853 4f04 	ldr.w	r4, [r3, #4]!
 8083be0:	428c      	cmp	r4, r1
	    ackList[i] = 0;
 8083be2:	bf08      	it	eq
 8083be4:	601a      	streq	r2, [r3, #0]
    for(uint16_t i=0;i<sizeof(ackList)/sizeof(int);i++) {
 8083be6:	4283      	cmp	r3, r0
 8083be8:	d1f8      	bne.n	8083bdc <_ZN8AckedMsg8clearAckEi+0x8>
	}
    }
}
 8083bea:	bd10      	pop	{r4, pc}

08083bec <_ZN12UbloxM8Q_GPS5parseEPhii>:
    switch(type) {
 8083bec:	f240 1309 	movw	r3, #265	; 0x109
 8083bf0:	429a      	cmp	r2, r3
{
 8083bf2:	b570      	push	{r4, r5, r6, lr}
 8083bf4:	4606      	mov	r6, r0
 8083bf6:	460d      	mov	r5, r1
 8083bf8:	4614      	mov	r4, r2
    switch(type) {
 8083bfa:	d052      	beq.n	8083ca2 <_ZN12UbloxM8Q_GPS5parseEPhii+0xb6>
 8083bfc:	f5b2 7f85 	cmp.w	r2, #266	; 0x10a
 8083c00:	da17      	bge.n	8083c32 <_ZN12UbloxM8Q_GPS5parseEPhii+0x46>
 8083c02:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 8083c06:	d044      	beq.n	8083c92 <_ZN12UbloxM8Q_GPS5parseEPhii+0xa6>
 8083c08:	f240 1307 	movw	r3, #263	; 0x107
 8083c0c:	429a      	cmp	r2, r3
 8083c0e:	d044      	beq.n	8083c9a <_ZN12UbloxM8Q_GPS5parseEPhii+0xae>
	Serial.print("parse: Unknown type: ");
 8083c10:	f003 fdfc 	bl	808780c <_Z16_fetch_usbserialv>
 8083c14:	4925      	ldr	r1, [pc, #148]	; (8083cac <_ZN12UbloxM8Q_GPS5parseEPhii+0xc0>)
 8083c16:	f001 fe99 	bl	808594c <_ZN5Print5printEPKc>
	Serial.println(type, HEX);
 8083c1a:	f003 fdf7 	bl	808780c <_Z16_fetch_usbserialv>
 8083c1e:	4621      	mov	r1, r4
 8083c20:	2210      	movs	r2, #16
 8083c22:	f7ff fcc4 	bl	80835ae <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
	showUbx(msg);
 8083c26:	4629      	mov	r1, r5
 8083c28:	4630      	mov	r0, r6
}
 8083c2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	showUbx(msg);
 8083c2e:	f7ff be13 	b.w	8083858 <_ZN12UbloxM8Q_GPS7showUbxEPh>
    switch(type) {
 8083c32:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8083c36:	d01c      	beq.n	8083c72 <_ZN12UbloxM8Q_GPS5parseEPhii+0x86>
 8083c38:	f240 5301 	movw	r3, #1281	; 0x501
 8083c3c:	429a      	cmp	r2, r3
 8083c3e:	d1e7      	bne.n	8083c10 <_ZN12UbloxM8Q_GPS5parseEPhii+0x24>
  // type is the class and id combined
  int ubxMsgType(uint8_t *m) { return((m[CLASS_IDX]<<8)|(m[ID_IDX]));}
  // For extracting type from the payload of msg, parameter points into payload
  int ubxMsgParm(uint8_t *m) { return((m[0]<<8)|(m[1]));}
 8083c40:	88cc      	ldrh	r4, [r1, #6]
	ackedMsg.setAck(typeAcked);
 8083c42:	481b      	ldr	r0, [pc, #108]	; (8083cb0 <_ZN12UbloxM8Q_GPS5parseEPhii+0xc4>)
 8083c44:	ba64      	rev16	r4, r4
 8083c46:	b2a4      	uxth	r4, r4
 8083c48:	4621      	mov	r1, r4
 8083c4a:	f7ff ffb5 	bl	8083bb8 <_ZN8AckedMsg6setAckEi>
	Serial.print("parse: ACK_TYPE: ");
 8083c4e:	f003 fddd 	bl	808780c <_Z16_fetch_usbserialv>
 8083c52:	4918      	ldr	r1, [pc, #96]	; (8083cb4 <_ZN12UbloxM8Q_GPS5parseEPhii+0xc8>)
 8083c54:	f001 fe7a 	bl	808594c <_ZN5Print5printEPKc>
	Serial.print("message acked: ");
 8083c58:	f003 fdd8 	bl	808780c <_Z16_fetch_usbserialv>
 8083c5c:	4916      	ldr	r1, [pc, #88]	; (8083cb8 <_ZN12UbloxM8Q_GPS5parseEPhii+0xcc>)
	Serial.print("message NAKed: ");
 8083c5e:	f001 fe75 	bl	808594c <_ZN5Print5printEPKc>
	Serial.println(typeAcked, HEX);
 8083c62:	f003 fdd3 	bl	808780c <_Z16_fetch_usbserialv>
 8083c66:	4621      	mov	r1, r4
}
 8083c68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	Serial.println(typeAcked, HEX);
 8083c6c:	2210      	movs	r2, #16
 8083c6e:	f7ff bc9e 	b.w	80835ae <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
 8083c72:	88cc      	ldrh	r4, [r1, #6]
	ackedMsg.clearAck(typeAcked);
 8083c74:	480e      	ldr	r0, [pc, #56]	; (8083cb0 <_ZN12UbloxM8Q_GPS5parseEPhii+0xc4>)
 8083c76:	ba64      	rev16	r4, r4
 8083c78:	b2a4      	uxth	r4, r4
 8083c7a:	4621      	mov	r1, r4
 8083c7c:	f7ff ffaa 	bl	8083bd4 <_ZN8AckedMsg8clearAckEi>
	Serial.print("parse: NAK_TYPE: ");
 8083c80:	f003 fdc4 	bl	808780c <_Z16_fetch_usbserialv>
 8083c84:	490d      	ldr	r1, [pc, #52]	; (8083cbc <_ZN12UbloxM8Q_GPS5parseEPhii+0xd0>)
 8083c86:	f001 fe61 	bl	808594c <_ZN5Print5printEPKc>
	Serial.print("message NAKed: ");
 8083c8a:	f003 fdbf 	bl	808780c <_Z16_fetch_usbserialv>
 8083c8e:	490c      	ldr	r1, [pc, #48]	; (8083cc0 <_ZN12UbloxM8Q_GPS5parseEPhii+0xd4>)
 8083c90:	e7e5      	b.n	8083c5e <_ZN12UbloxM8Q_GPS5parseEPhii+0x72>
}
 8083c92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	parsePOSLLH(msg);
 8083c96:	f7ff be0f 	b.w	80838b8 <_ZN12UbloxM8Q_GPS11parsePOSLLHEPh>
}
 8083c9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	parsePVT(msg);
 8083c9e:	f7ff be53 	b.w	8083948 <_ZN12UbloxM8Q_GPS8parsePVTEPh>
}
 8083ca2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	parseODO(msg);
 8083ca6:	f7ff bf19 	b.w	8083adc <_ZN12UbloxM8Q_GPS8parseODOEPh>
 8083caa:	bf00      	nop
 8083cac:	0808b9f0 	.word	0x0808b9f0
 8083cb0:	200003cc 	.word	0x200003cc
 8083cb4:	0808b9ac 	.word	0x0808b9ac
 8083cb8:	0808b9be 	.word	0x0808b9be
 8083cbc:	0808b9ce 	.word	0x0808b9ce
 8083cc0:	0808b9e0 	.word	0x0808b9e0

08083cc4 <_ZN12UbloxM8Q_GPS4readEv>:
{
 8083cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (gpsOn){
 8083cc6:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
{
 8083cca:	4604      	mov	r4, r0
 8083ccc:	b0c1      	sub	sp, #260	; 0x104
    if (gpsOn){
 8083cce:	b32b      	cbz	r3, 8083d1c <_ZN12UbloxM8Q_GPS4readEv+0x58>
	    r = readUBXmsg(msg, &type, &length);
 8083cd0:	4d13      	ldr	r5, [pc, #76]	; (8083d20 <_ZN12UbloxM8Q_GPS4readEv+0x5c>)
 8083cd2:	4e14      	ldr	r6, [pc, #80]	; (8083d24 <_ZN12UbloxM8Q_GPS4readEv+0x60>)
		Serial.println("gps.read got ubxBAD_CHECK_SUM");
 8083cd4:	4f14      	ldr	r7, [pc, #80]	; (8083d28 <_ZN12UbloxM8Q_GPS4readEv+0x64>)
	while(Serial1.available()){
 8083cd6:	f003 ff47 	bl	8087b68 <_Z22__fetch_global_Serial1v>
 8083cda:	6803      	ldr	r3, [r0, #0]
 8083cdc:	691b      	ldr	r3, [r3, #16]
 8083cde:	4798      	blx	r3
 8083ce0:	b1e0      	cbz	r0, 8083d1c <_ZN12UbloxM8Q_GPS4readEv+0x58>
	    r = readUBXmsg(msg, &type, &length);
 8083ce2:	462b      	mov	r3, r5
 8083ce4:	4669      	mov	r1, sp
 8083ce6:	4620      	mov	r0, r4
 8083ce8:	4a0e      	ldr	r2, [pc, #56]	; (8083d24 <_ZN12UbloxM8Q_GPS4readEv+0x60>)
 8083cea:	f7ff fcb3 	bl	8083654 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_>
	    if (r == ubxBAD_LENGTH){
 8083cee:	2802      	cmp	r0, #2
 8083cf0:	d105      	bne.n	8083cfe <_ZN12UbloxM8Q_GPS4readEv+0x3a>
		Serial.println("gps.read got ubxBAD_LENGTH");
 8083cf2:	f003 fd8b 	bl	808780c <_Z16_fetch_usbserialv>
 8083cf6:	490d      	ldr	r1, [pc, #52]	; (8083d2c <_ZN12UbloxM8Q_GPS4readEv+0x68>)
		Serial.println("gps.read got ubxBAD_CHECK_SUM");
 8083cf8:	f001 fe3b 	bl	8085972 <_ZN5Print7printlnEPKc>
	    if (r == ubxSUCCESS){
 8083cfc:	e7eb      	b.n	8083cd6 <_ZN12UbloxM8Q_GPS4readEv+0x12>
	    if (r == ubxBAD_CHECK_SUM){
 8083cfe:	2803      	cmp	r0, #3
 8083d00:	d008      	beq.n	8083d14 <_ZN12UbloxM8Q_GPS4readEv+0x50>
	    if (r == ubxSUCCESS){
 8083d02:	2800      	cmp	r0, #0
 8083d04:	d1e7      	bne.n	8083cd6 <_ZN12UbloxM8Q_GPS4readEv+0x12>
		parse(msg, type, length);
 8083d06:	4669      	mov	r1, sp
 8083d08:	4620      	mov	r0, r4
 8083d0a:	682b      	ldr	r3, [r5, #0]
 8083d0c:	6832      	ldr	r2, [r6, #0]
 8083d0e:	f7ff ff6d 	bl	8083bec <_ZN12UbloxM8Q_GPS5parseEPhii>
 8083d12:	e7df      	b.n	8083cd4 <_ZN12UbloxM8Q_GPS4readEv+0x10>
		Serial.println("gps.read got ubxBAD_CHECK_SUM");
 8083d14:	f003 fd7a 	bl	808780c <_Z16_fetch_usbserialv>
 8083d18:	4639      	mov	r1, r7
 8083d1a:	e7ed      	b.n	8083cf8 <_ZN12UbloxM8Q_GPS4readEv+0x34>
}
 8083d1c:	b041      	add	sp, #260	; 0x104
 8083d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8083d20:	200003b8 	.word	0x200003b8
 8083d24:	200003b4 	.word	0x200003b4
 8083d28:	0808ba21 	.word	0x0808ba21
 8083d2c:	0808ba06 	.word	0x0808ba06

08083d30 <_ZN8AckedMsg7isAckedEi>:
bool
AckedMsg::isAcked(int msgType)
{
    for(uint16_t i=0;i<sizeof(ackList)/sizeof(int);i++) {
 8083d30:	1f03      	subs	r3, r0, #4
 8083d32:	3024      	adds	r0, #36	; 0x24
	if (ackList[i] == msgType){
 8083d34:	f853 2f04 	ldr.w	r2, [r3, #4]!
 8083d38:	428a      	cmp	r2, r1
 8083d3a:	d003      	beq.n	8083d44 <_ZN8AckedMsg7isAckedEi+0x14>
    for(uint16_t i=0;i<sizeof(ackList)/sizeof(int);i++) {
 8083d3c:	4283      	cmp	r3, r0
 8083d3e:	d1f9      	bne.n	8083d34 <_ZN8AckedMsg7isAckedEi+0x4>
	    return true;
	}
    }
    return false;
 8083d40:	2000      	movs	r0, #0
 8083d42:	4770      	bx	lr
	    return true;
 8083d44:	2001      	movs	r0, #1
}
 8083d46:	4770      	bx	lr

08083d48 <_ZN12UbloxM8Q_GPS8writeUBXEPh>:
{
 8083d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (!sent){
 8083d4c:	4e28      	ldr	r6, [pc, #160]	; (8083df0 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0xa8>)
{
 8083d4e:	4607      	mov	r7, r0
    if (!sent){
 8083d50:	7835      	ldrb	r5, [r6, #0]
{
 8083d52:	460c      	mov	r4, r1
 8083d54:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8083df4 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0xac>
    if (!sent){
 8083d58:	bb85      	cbnz	r5, 8083dbc <_ZN12UbloxM8Q_GPS8writeUBXEPh+0x74>
  int ubxMsgType(uint8_t *m) { return((m[CLASS_IDX]<<8)|(m[ID_IDX]));}
 8083d5a:	8849      	ldrh	r1, [r1, #2]
	ackedMsg.clearAck(msgType);
 8083d5c:	4826      	ldr	r0, [pc, #152]	; (8083df8 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0xb0>)
 8083d5e:	ba49      	rev16	r1, r1
 8083d60:	b289      	uxth	r1, r1
	msgType = ubxMsgType(msg);
 8083d62:	f8c8 1000 	str.w	r1, [r8]
	ackedMsg.clearAck(msgType);
 8083d66:	f7ff ff35 	bl	8083bd4 <_ZN8AckedMsg8clearAckEi>
	ubxAddCS(msg);
 8083d6a:	4621      	mov	r1, r4
 8083d6c:	4638      	mov	r0, r7
 8083d6e:	f7ff fd65 	bl	808383c <_ZN12UbloxM8Q_GPS8ubxAddCSEPh>
	Serial.print("writeUBX: type: "); Serial.println(msgType,HEX);
 8083d72:	f003 fd4b 	bl	808780c <_Z16_fetch_usbserialv>
 8083d76:	4921      	ldr	r1, [pc, #132]	; (8083dfc <_ZN12UbloxM8Q_GPS8writeUBXEPh+0xb4>)
 8083d78:	f001 fde8 	bl	808594c <_ZN5Print5printEPKc>
 8083d7c:	f003 fd46 	bl	808780c <_Z16_fetch_usbserialv>
 8083d80:	2210      	movs	r2, #16
 8083d82:	f8d8 1000 	ldr.w	r1, [r8]
 8083d86:	f7ff fc12 	bl	80835ae <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
	showUbx(msg);
 8083d8a:	4638      	mov	r0, r7
 8083d8c:	4621      	mov	r1, r4
 8083d8e:	f7ff fd63 	bl	8083858 <_ZN12UbloxM8Q_GPS7showUbxEPh>
        return( ((m[LENGTH_IDX])+(m[LENGTH_IDX+1]*256)));}
 8083d92:	7963      	ldrb	r3, [r4, #5]
 8083d94:	7927      	ldrb	r7, [r4, #4]
 8083d96:	eb07 2703 	add.w	r7, r7, r3, lsl #8
	for (i = 0; i < length + 8; i++ ){
 8083d9a:	3707      	adds	r7, #7
	    Serial1.write(msg[i]);
 8083d9c:	f003 fee4 	bl	8087b68 <_Z22__fetch_global_Serial1v>
 8083da0:	6803      	ldr	r3, [r0, #0]
 8083da2:	5d61      	ldrb	r1, [r4, r5]
 8083da4:	689b      	ldr	r3, [r3, #8]
	for (i = 0; i < length + 8; i++ ){
 8083da6:	3501      	adds	r5, #1
	    Serial1.write(msg[i]);
 8083da8:	4798      	blx	r3
	for (i = 0; i < length + 8; i++ ){
 8083daa:	42af      	cmp	r7, r5
 8083dac:	daf6      	bge.n	8083d9c <_ZN12UbloxM8Q_GPS8writeUBXEPh+0x54>
 8083dae:	f000 feaf 	bl	8084b10 <HAL_Timer_Get_Milli_Seconds>
	prev = millis();
 8083db2:	4b13      	ldr	r3, [pc, #76]	; (8083e00 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0xb8>)
 8083db4:	6018      	str	r0, [r3, #0]
	sent = true;
 8083db6:	2001      	movs	r0, #1
	    sent = false;
 8083db8:	7030      	strb	r0, [r6, #0]
	    return ubxSUCCESS;
 8083dba:	e012      	b.n	8083de2 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0x9a>
	read();
 8083dbc:	f7ff ff82 	bl	8083cc4 <_ZN12UbloxM8Q_GPS4readEv>
	if (!ackedMsg.isAcked(msgType)){
 8083dc0:	f8d8 1000 	ldr.w	r1, [r8]
 8083dc4:	480c      	ldr	r0, [pc, #48]	; (8083df8 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0xb0>)
 8083dc6:	f7ff ffb3 	bl	8083d30 <_ZN8AckedMsg7isAckedEi>
 8083dca:	4604      	mov	r4, r0
 8083dcc:	b958      	cbnz	r0, 8083de6 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0x9e>
 8083dce:	f000 fe9f 	bl	8084b10 <HAL_Timer_Get_Milli_Seconds>
	    if (cur - prev > 2000){
 8083dd2:	4b0b      	ldr	r3, [pc, #44]	; (8083e00 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0xb8>)
 8083dd4:	681b      	ldr	r3, [r3, #0]
 8083dd6:	1ac0      	subs	r0, r0, r3
 8083dd8:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8083ddc:	d905      	bls.n	8083dea <_ZN12UbloxM8Q_GPS8writeUBXEPh+0xa2>
		return ubxNO_ACK;
 8083dde:	2004      	movs	r0, #4
		sent = false;
 8083de0:	7034      	strb	r4, [r6, #0]
}
 8083de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    sent = false;
 8083de6:	2000      	movs	r0, #0
 8083de8:	e7e6      	b.n	8083db8 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0x70>
    return ubxPENDING;
 8083dea:	2001      	movs	r0, #1
 8083dec:	e7f9      	b.n	8083de2 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0x9a>
 8083dee:	bf00      	nop
 8083df0:	200003c4 	.word	0x200003c4
 8083df4:	200003c8 	.word	0x200003c8
 8083df8:	200003cc 	.word	0x200003cc
 8083dfc:	0808ba3f 	.word	0x0808ba3f
 8083e00:	200003c0 	.word	0x200003c0

08083e04 <_ZN12UbloxM8Q_GPS11sendCommandEPh>:
{
 8083e04:	b538      	push	{r3, r4, r5, lr}
 8083e06:	4604      	mov	r4, r0
 8083e08:	460d      	mov	r5, r1
	r = writeUBX(msg);
 8083e0a:	4629      	mov	r1, r5
 8083e0c:	4620      	mov	r0, r4
 8083e0e:	f7ff ff9b 	bl	8083d48 <_ZN12UbloxM8Q_GPS8writeUBXEPh>
    while( r == ubxPENDING ){
 8083e12:	2801      	cmp	r0, #1
 8083e14:	d0f9      	beq.n	8083e0a <_ZN12UbloxM8Q_GPS11sendCommandEPh+0x6>
    if (r == ubxBAD_LENGTH){
 8083e16:	2802      	cmp	r0, #2
 8083e18:	d106      	bne.n	8083e28 <_ZN12UbloxM8Q_GPS11sendCommandEPh+0x24>
	Serial.println("gps.sendCommand got ubxBAD_LENGTH");
 8083e1a:	f003 fcf7 	bl	808780c <_Z16_fetch_usbserialv>
 8083e1e:	4909      	ldr	r1, [pc, #36]	; (8083e44 <_ZN12UbloxM8Q_GPS11sendCommandEPh+0x40>)
}
 8083e20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Serial.println("gps.sendCommand got ubxNO_ACK");
 8083e24:	f001 bda5 	b.w	8085972 <_ZN5Print7printlnEPKc>
    if (r == ubxBAD_CHECK_SUM){
 8083e28:	2803      	cmp	r0, #3
 8083e2a:	d005      	beq.n	8083e38 <_ZN12UbloxM8Q_GPS11sendCommandEPh+0x34>
    if (r == ubxNO_ACK){
 8083e2c:	2804      	cmp	r0, #4
 8083e2e:	d107      	bne.n	8083e40 <_ZN12UbloxM8Q_GPS11sendCommandEPh+0x3c>
	Serial.println("gps.sendCommand got ubxNO_ACK");
 8083e30:	f003 fcec 	bl	808780c <_Z16_fetch_usbserialv>
 8083e34:	4904      	ldr	r1, [pc, #16]	; (8083e48 <_ZN12UbloxM8Q_GPS11sendCommandEPh+0x44>)
 8083e36:	e7f3      	b.n	8083e20 <_ZN12UbloxM8Q_GPS11sendCommandEPh+0x1c>
	Serial.println("gps.sendCommand got ubxBAD_CHECK_SUM");
 8083e38:	f003 fce8 	bl	808780c <_Z16_fetch_usbserialv>
 8083e3c:	4903      	ldr	r1, [pc, #12]	; (8083e4c <_ZN12UbloxM8Q_GPS11sendCommandEPh+0x48>)
 8083e3e:	e7ef      	b.n	8083e20 <_ZN12UbloxM8Q_GPS11sendCommandEPh+0x1c>
}
 8083e40:	bd38      	pop	{r3, r4, r5, pc}
 8083e42:	bf00      	nop
 8083e44:	0808ba50 	.word	0x0808ba50
 8083e48:	0808ba97 	.word	0x0808ba97
 8083e4c:	0808ba72 	.word	0x0808ba72

08083e50 <_ZN12UbloxM8Q_GPS8resetODOEv>:
    sendCommand(resetODOmsg);
 8083e50:	4901      	ldr	r1, [pc, #4]	; (8083e58 <_ZN12UbloxM8Q_GPS8resetODOEv+0x8>)
 8083e52:	f7ff bfd7 	b.w	8083e04 <_ZN12UbloxM8Q_GPS11sendCommandEPh>
 8083e56:	bf00      	nop
 8083e58:	200000ab 	.word	0x200000ab

08083e5c <_ZN12UbloxM8Q_GPS7setRateEti>:
    if (measurement < 10){ // I don't know what the real minimum is
 8083e5c:	2909      	cmp	r1, #9
{
 8083e5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8083e62:	4606      	mov	r6, r0
 8083e64:	460c      	mov	r4, r1
 8083e66:	4615      	mov	r5, r2
    if (measurement < 10){ // I don't know what the real minimum is
 8083e68:	d805      	bhi.n	8083e76 <_ZN12UbloxM8Q_GPS7setRateEti+0x1a>
	Serial.println("setRate: changed measurement to minimum 10 ms");
 8083e6a:	f003 fccf 	bl	808780c <_Z16_fetch_usbserialv>
 8083e6e:	4929      	ldr	r1, [pc, #164]	; (8083f14 <_ZN12UbloxM8Q_GPS7setRateEti+0xb8>)
 8083e70:	f001 fd7f 	bl	8085972 <_ZN5Print7printlnEPKc>
	measurement = 10;
 8083e74:	240a      	movs	r4, #10
    if ( navigationSol < 1 ){ 
 8083e76:	2d00      	cmp	r5, #0
 8083e78:	dc43      	bgt.n	8083f02 <_ZN12UbloxM8Q_GPS7setRateEti+0xa6>
	Serial.println("setRate: changed navigationSol to minimum 1");
 8083e7a:	f003 fcc7 	bl	808780c <_Z16_fetch_usbserialv>
 8083e7e:	4926      	ldr	r1, [pc, #152]	; (8083f18 <_ZN12UbloxM8Q_GPS7setRateEti+0xbc>)
 8083e80:	f001 fd77 	bl	8085972 <_ZN5Print7printlnEPKc>
	navigationSol = 1;
 8083e84:	2501      	movs	r5, #1
    ubxWatchdog = measurement * navigationSol * 5;
 8083e86:	fb05 f304 	mul.w	r3, r5, r4
 8083e8a:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8083f1c <_ZN12UbloxM8Q_GPS7setRateEti+0xc0>
 8083e8e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8083e92:	f8c8 3000 	str.w	r3, [r8]
    Serial.print("setRate: measurement: ");
 8083e96:	f003 fcb9 	bl	808780c <_Z16_fetch_usbserialv>
 8083e9a:	4921      	ldr	r1, [pc, #132]	; (8083f20 <_ZN12UbloxM8Q_GPS7setRateEti+0xc4>)
 8083e9c:	f001 fd56 	bl	808594c <_ZN5Print5printEPKc>
    Serial.println(measurement);
 8083ea0:	f003 fcb4 	bl	808780c <_Z16_fetch_usbserialv>
 8083ea4:	4607      	mov	r7, r0
        return printNumber(val, base) + t;
 8083ea6:	220a      	movs	r2, #10
 8083ea8:	4621      	mov	r1, r4
 8083eaa:	f001 fd6c 	bl	8085986 <_ZN5Print11printNumberEmh>
        n += println();
 8083eae:	4638      	mov	r0, r7
 8083eb0:	f001 fd53 	bl	808595a <_ZN5Print7printlnEv>
    Serial.print("setRate: navigationSol: ");
 8083eb4:	f003 fcaa 	bl	808780c <_Z16_fetch_usbserialv>
 8083eb8:	491a      	ldr	r1, [pc, #104]	; (8083f24 <_ZN12UbloxM8Q_GPS7setRateEti+0xc8>)
 8083eba:	f001 fd47 	bl	808594c <_ZN5Print5printEPKc>
    Serial.println(navigationSol);
 8083ebe:	f003 fca5 	bl	808780c <_Z16_fetch_usbserialv>
 8083ec2:	220a      	movs	r2, #10
 8083ec4:	4629      	mov	r1, r5
 8083ec6:	f7ff fb72 	bl	80835ae <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
    Serial.print("setRate: ubxWatchdog: ");
 8083eca:	f003 fc9f 	bl	808780c <_Z16_fetch_usbserialv>
 8083ece:	4916      	ldr	r1, [pc, #88]	; (8083f28 <_ZN12UbloxM8Q_GPS7setRateEti+0xcc>)
 8083ed0:	f001 fd3c 	bl	808594c <_ZN5Print5printEPKc>
    Serial.println(ubxWatchdog);
 8083ed4:	f003 fc9a 	bl	808780c <_Z16_fetch_usbserialv>
 8083ed8:	4607      	mov	r7, r0
        return printNumber(val, base) + t;
 8083eda:	f8d8 1000 	ldr.w	r1, [r8]
 8083ede:	220a      	movs	r2, #10
 8083ee0:	f001 fd51 	bl	8085986 <_ZN5Print11printNumberEmh>
        n += println();
 8083ee4:	4638      	mov	r0, r7
 8083ee6:	f001 fd38 	bl	808595a <_ZN5Print7printlnEv>
    rateMsg[PAYLOAD_IDX + 3] = 0;
 8083eea:	2300      	movs	r3, #0
    rateMsg[PAYLOAD_IDX] = (measurement & 0xFF); // little endian
 8083eec:	490f      	ldr	r1, [pc, #60]	; (8083f2c <_ZN12UbloxM8Q_GPS7setRateEti+0xd0>)
    sendCommand(rateMsg);
 8083eee:	4630      	mov	r0, r6
    rateMsg[PAYLOAD_IDX] = (measurement & 0xFF); // little endian
 8083ef0:	718c      	strb	r4, [r1, #6]
    rateMsg[PAYLOAD_IDX + 1] = ((measurement/256) & 0xFF);
 8083ef2:	0a24      	lsrs	r4, r4, #8
 8083ef4:	71cc      	strb	r4, [r1, #7]
    rateMsg[PAYLOAD_IDX + 2] = (navigationSol & 0xFF);
 8083ef6:	720d      	strb	r5, [r1, #8]
    rateMsg[PAYLOAD_IDX + 3] = 0;
 8083ef8:	724b      	strb	r3, [r1, #9]
}
 8083efa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    sendCommand(rateMsg);
 8083efe:	f7ff bf81 	b.w	8083e04 <_ZN12UbloxM8Q_GPS11sendCommandEPh>
    if ( navigationSol > 127 ){ 
 8083f02:	2d7f      	cmp	r5, #127	; 0x7f
 8083f04:	ddbf      	ble.n	8083e86 <_ZN12UbloxM8Q_GPS7setRateEti+0x2a>
	Serial.println("setRate: changed navigationSol to maximum 127");
 8083f06:	f003 fc81 	bl	808780c <_Z16_fetch_usbserialv>
 8083f0a:	4909      	ldr	r1, [pc, #36]	; (8083f30 <_ZN12UbloxM8Q_GPS7setRateEti+0xd4>)
 8083f0c:	f001 fd31 	bl	8085972 <_ZN5Print7printlnEPKc>
	navigationSol = 127;
 8083f10:	257f      	movs	r5, #127	; 0x7f
 8083f12:	e7b8      	b.n	8083e86 <_ZN12UbloxM8Q_GPS7setRateEti+0x2a>
 8083f14:	0808bab5 	.word	0x0808bab5
 8083f18:	0808bae3 	.word	0x0808bae3
 8083f1c:	200000b4 	.word	0x200000b4
 8083f20:	0808bb3d 	.word	0x0808bb3d
 8083f24:	0808bb54 	.word	0x0808bb54
 8083f28:	0808bb6d 	.word	0x0808bb6d
 8083f2c:	2000009d 	.word	0x2000009d
 8083f30:	0808bb0f 	.word	0x0808bb0f

08083f34 <_ZN12UbloxM8Q_GPS5beginEv>:
{
 8083f34:	b570      	push	{r4, r5, r6, lr}
    switch (state){
 8083f36:	4d1a      	ldr	r5, [pc, #104]	; (8083fa0 <_ZN12UbloxM8Q_GPS5beginEv+0x6c>)
{
 8083f38:	4606      	mov	r6, r0
 8083f3a:	682b      	ldr	r3, [r5, #0]
 8083f3c:	2b05      	cmp	r3, #5
 8083f3e:	d829      	bhi.n	8083f94 <_ZN12UbloxM8Q_GPS5beginEv+0x60>
 8083f40:	e8df f003 	tbb	[pc, r3]
 8083f44:	1b190b03 	.word	0x1b190b03
 8083f48:	1f1d      	.short	0x1f1d
	    readVer();
 8083f4a:	f7ff fddb 	bl	8083b04 <_ZN12UbloxM8Q_GPS7readVerEv>
	    gpsOn = true;
 8083f4e:	2301      	movs	r3, #1
 8083f50:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60
	    state++;
 8083f54:	682b      	ldr	r3, [r5, #0]
 8083f56:	3301      	adds	r3, #1
 8083f58:	602b      	str	r3, [r5, #0]
	    ret = writeUBX(cfgRate) ;
 8083f5a:	4912      	ldr	r1, [pc, #72]	; (8083fa4 <_ZN12UbloxM8Q_GPS5beginEv+0x70>)
	    ret = writeUBX(cfgNav5) ;
 8083f5c:	4630      	mov	r0, r6
 8083f5e:	f7ff fef3 	bl	8083d48 <_ZN12UbloxM8Q_GPS8writeUBXEPh>
	    if ( ret == ubxPENDING){
 8083f62:	2801      	cmp	r0, #1
	    ret = writeUBX(cfgNav5) ;
 8083f64:	4604      	mov	r4, r0
	    if ( ret == ubxPENDING){
 8083f66:	d003      	beq.n	8083f70 <_ZN12UbloxM8Q_GPS5beginEv+0x3c>
		state++;
 8083f68:	6829      	ldr	r1, [r5, #0]
	    if ( ret == ubxSUCCESS){
 8083f6a:	b960      	cbnz	r0, 8083f86 <_ZN12UbloxM8Q_GPS5beginEv+0x52>
		state++;
 8083f6c:	3101      	adds	r1, #1
 8083f6e:	6029      	str	r1, [r5, #0]
		return ubxPENDING;
 8083f70:	2401      	movs	r4, #1
}
 8083f72:	4620      	mov	r0, r4
 8083f74:	bd70      	pop	{r4, r5, r6, pc}
	    ret = writeUBX(enablePVT) ;
 8083f76:	490c      	ldr	r1, [pc, #48]	; (8083fa8 <_ZN12UbloxM8Q_GPS5beginEv+0x74>)
 8083f78:	e7f0      	b.n	8083f5c <_ZN12UbloxM8Q_GPS5beginEv+0x28>
	    ret = writeUBX(cfgNav5) ;
 8083f7a:	490c      	ldr	r1, [pc, #48]	; (8083fac <_ZN12UbloxM8Q_GPS5beginEv+0x78>)
 8083f7c:	e7ee      	b.n	8083f5c <_ZN12UbloxM8Q_GPS5beginEv+0x28>
	    ret = writeUBX(cfgODOmsg) ;
 8083f7e:	490c      	ldr	r1, [pc, #48]	; (8083fb0 <_ZN12UbloxM8Q_GPS5beginEv+0x7c>)
 8083f80:	e7ec      	b.n	8083f5c <_ZN12UbloxM8Q_GPS5beginEv+0x28>
	    ret = writeUBX(enableODO) ;
 8083f82:	490c      	ldr	r1, [pc, #48]	; (8083fb4 <_ZN12UbloxM8Q_GPS5beginEv+0x80>)
 8083f84:	e7ea      	b.n	8083f5c <_ZN12UbloxM8Q_GPS5beginEv+0x28>
		reportError(state, ret);
 8083f86:	4602      	mov	r2, r0
 8083f88:	4630      	mov	r0, r6
 8083f8a:	f7ff fde1 	bl	8083b50 <_ZN12UbloxM8Q_GPS11reportErrorEi9ubxReturn>
		state = 0;
 8083f8e:	2300      	movs	r3, #0
 8083f90:	602b      	str	r3, [r5, #0]
		return ret;
 8083f92:	e7ee      	b.n	8083f72 <_ZN12UbloxM8Q_GPS5beginEv+0x3e>
	    initComplete = true;
 8083f94:	2301      	movs	r3, #1
	    state = 0;
 8083f96:	2400      	movs	r4, #0
	    initComplete = true;
 8083f98:	7003      	strb	r3, [r0, #0]
	    state = 0;
 8083f9a:	602c      	str	r4, [r5, #0]
	    return ubxSUCCESS;
 8083f9c:	e7e9      	b.n	8083f72 <_ZN12UbloxM8Q_GPS5beginEv+0x3e>
 8083f9e:	bf00      	nop
 8083fa0:	200003bc 	.word	0x200003bc
 8083fa4:	20000079 	.word	0x20000079
 8083fa8:	20000092 	.word	0x20000092
 8083fac:	20000031 	.word	0x20000031
 8083fb0:	2000005d 	.word	0x2000005d
 8083fb4:	20000087 	.word	0x20000087

08083fb8 <_GLOBAL__sub_I_enablePOSLLH>:
AckedMsg ackedMsg = AckedMsg();
 8083fb8:	4801      	ldr	r0, [pc, #4]	; (8083fc0 <_GLOBAL__sub_I_enablePOSLLH+0x8>)
 8083fba:	f7ff bdf5 	b.w	8083ba8 <_ZN8AckedMsgC1Ev>
 8083fbe:	bf00      	nop
 8083fc0:	200003cc 	.word	0x200003cc

08083fc4 <_Z17tinkerDigitalRead6String>:
 * Output         : None.
 * Return         : Value of the pin (0 or 1) in INT type
                    Returns a negative number on failure
 *******************************************************************************/
int tinkerDigitalRead(String pin)
{
 8083fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
	//convert ascii to integer
	int pinNumber = pin.charAt(1) - '0';
 8083fc6:	2101      	movs	r1, #1
{
 8083fc8:	b085      	sub	sp, #20
 8083fca:	4606      	mov	r6, r0
	int pinNumber = pin.charAt(1) - '0';
 8083fcc:	f001 fc2f 	bl	808582e <_ZNK6String6charAtEj>
 8083fd0:	f1a0 0530 	sub.w	r5, r0, #48	; 0x30
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 8083fd4:	2d07      	cmp	r5, #7
	int pinNumber = pin.charAt(1) - '0';
 8083fd6:	4604      	mov	r4, r0
	if (pinNumber< 0 || pinNumber >7) return -1;
 8083fd8:	d82c      	bhi.n	8084034 <_Z17tinkerDigitalRead6String+0x70>

	if(pin.startsWith("D"))
 8083fda:	491a      	ldr	r1, [pc, #104]	; (8084044 <_Z17tinkerDigitalRead6String+0x80>)
 8083fdc:	4668      	mov	r0, sp
 8083fde:	f001 fb47 	bl	8085670 <_ZN6StringC1EPK19__FlashStringHelper>
 8083fe2:	4669      	mov	r1, sp
 8083fe4:	4630      	mov	r0, r6
 8083fe6:	f001 fc10 	bl	808580a <_ZNK6String10startsWithERKS_>
 8083fea:	4607      	mov	r7, r0
 8083fec:	4668      	mov	r0, sp
 8083fee:	f001 faf5 	bl	80855dc <_ZN6StringD1Ev>
 8083ff2:	b157      	cbz	r7, 808400a <_Z17tinkerDigitalRead6String+0x46>
	{
		pinMode(pinNumber, INPUT_PULLDOWN);
 8083ff4:	b2ad      	uxth	r5, r5
 8083ff6:	4628      	mov	r0, r5
 8083ff8:	2103      	movs	r1, #3
 8083ffa:	f004 f933 	bl	8088264 <pinMode>
		return digitalRead(pinNumber);
 8083ffe:	4628      	mov	r0, r5
	{
		pinMode(pinNumber+10, INPUT_PULLDOWN);
		return digitalRead(pinNumber+10);
	}
	return -2;
}
 8084000:	b005      	add	sp, #20
 8084002:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return digitalRead(pinNumber+10);
 8084006:	f004 b957 	b.w	80882b8 <digitalRead>
	else if (pin.startsWith("A"))
 808400a:	490f      	ldr	r1, [pc, #60]	; (8084048 <_Z17tinkerDigitalRead6String+0x84>)
 808400c:	4668      	mov	r0, sp
 808400e:	f001 fb2f 	bl	8085670 <_ZN6StringC1EPK19__FlashStringHelper>
 8084012:	4669      	mov	r1, sp
 8084014:	4630      	mov	r0, r6
 8084016:	f001 fbf8 	bl	808580a <_ZNK6String10startsWithERKS_>
 808401a:	4605      	mov	r5, r0
 808401c:	4668      	mov	r0, sp
 808401e:	f001 fadd 	bl	80855dc <_ZN6StringD1Ev>
 8084022:	b15d      	cbz	r5, 808403c <_Z17tinkerDigitalRead6String+0x78>
		pinMode(pinNumber+10, INPUT_PULLDOWN);
 8084024:	3c26      	subs	r4, #38	; 0x26
 8084026:	b2a4      	uxth	r4, r4
 8084028:	4620      	mov	r0, r4
 808402a:	2103      	movs	r1, #3
 808402c:	f004 f91a 	bl	8088264 <pinMode>
		return digitalRead(pinNumber+10);
 8084030:	4620      	mov	r0, r4
 8084032:	e7e5      	b.n	8084000 <_Z17tinkerDigitalRead6String+0x3c>
	if (pinNumber< 0 || pinNumber >7) return -1;
 8084034:	f04f 30ff 	mov.w	r0, #4294967295
}
 8084038:	b005      	add	sp, #20
 808403a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return -2;
 808403c:	f06f 0001 	mvn.w	r0, #1
 8084040:	e7fa      	b.n	8084038 <_Z17tinkerDigitalRead6String+0x74>
 8084042:	bf00      	nop
 8084044:	0808b48a 	.word	0x0808b48a
 8084048:	0808bb84 	.word	0x0808bb84

0808404c <_Z18tinkerDigitalWrite6String>:
 * Input          : Pin and value
 * Output         : None.
 * Return         : 1 on success and a negative number on failure
 *******************************************************************************/
int tinkerDigitalWrite(String command)
{
 808404c:	b5f0      	push	{r4, r5, r6, r7, lr}
	bool value = 0;
	//convert ascii to integer
	int pinNumber = command.charAt(1) - '0';
 808404e:	2101      	movs	r1, #1
{
 8084050:	b085      	sub	sp, #20
 8084052:	4606      	mov	r6, r0
	int pinNumber = command.charAt(1) - '0';
 8084054:	f001 fbeb 	bl	808582e <_ZNK6String6charAtEj>
 8084058:	f1a0 0430 	sub.w	r4, r0, #48	; 0x30
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 808405c:	2c07      	cmp	r4, #7
 808405e:	d847      	bhi.n	80840f0 <_Z18tinkerDigitalWrite6String+0xa4>

	if(command.substring(3,7) == "HIGH") value = 1;
 8084060:	2307      	movs	r3, #7
 8084062:	2203      	movs	r2, #3
 8084064:	4631      	mov	r1, r6
 8084066:	4668      	mov	r0, sp
 8084068:	f001 fbf4 	bl	8085854 <_ZNK6String9substringEjj>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 808406c:	4668      	mov	r0, sp
 808406e:	4925      	ldr	r1, [pc, #148]	; (8084104 <_Z18tinkerDigitalWrite6String+0xb8>)
 8084070:	f001 fba3 	bl	80857ba <_ZNK6String6equalsEPKc>
 8084074:	4605      	mov	r5, r0
 8084076:	4668      	mov	r0, sp
 8084078:	f001 fab0 	bl	80855dc <_ZN6StringD1Ev>
 808407c:	bb3d      	cbnz	r5, 80840ce <_Z18tinkerDigitalWrite6String+0x82>
	else if(command.substring(3,6) == "LOW") value = 0;
 808407e:	2306      	movs	r3, #6
 8084080:	2203      	movs	r2, #3
 8084082:	4631      	mov	r1, r6
 8084084:	4668      	mov	r0, sp
 8084086:	f001 fbe5 	bl	8085854 <_ZNK6String9substringEjj>
 808408a:	4668      	mov	r0, sp
 808408c:	491e      	ldr	r1, [pc, #120]	; (8084108 <_Z18tinkerDigitalWrite6String+0xbc>)
 808408e:	f001 fb94 	bl	80857ba <_ZNK6String6equalsEPKc>
 8084092:	4607      	mov	r7, r0
 8084094:	4668      	mov	r0, sp
 8084096:	f001 faa1 	bl	80855dc <_ZN6StringD1Ev>
 808409a:	b367      	cbz	r7, 80840f6 <_Z18tinkerDigitalWrite6String+0xaa>
	else return -2;

	if(command.startsWith("D"))
 808409c:	491b      	ldr	r1, [pc, #108]	; (808410c <_Z18tinkerDigitalWrite6String+0xc0>)
 808409e:	4668      	mov	r0, sp
 80840a0:	f001 fae6 	bl	8085670 <_ZN6StringC1EPK19__FlashStringHelper>
 80840a4:	4669      	mov	r1, sp
 80840a6:	4630      	mov	r0, r6
 80840a8:	f001 fbaf 	bl	808580a <_ZNK6String10startsWithERKS_>
 80840ac:	4607      	mov	r7, r0
 80840ae:	4668      	mov	r0, sp
 80840b0:	f001 fa94 	bl	80855dc <_ZN6StringD1Ev>
 80840b4:	b16f      	cbz	r7, 80840d2 <_Z18tinkerDigitalWrite6String+0x86>
		digitalWrite(pinNumber, value);
		return 1;
	}
	else if(command.startsWith("A"))
	{
		pinMode(pinNumber+10, OUTPUT);
 80840b6:	b2a4      	uxth	r4, r4
 80840b8:	2101      	movs	r1, #1
 80840ba:	4620      	mov	r0, r4
 80840bc:	f004 f8d2 	bl	8088264 <pinMode>
		digitalWrite(pinNumber+10, value);
 80840c0:	4620      	mov	r0, r4
 80840c2:	4629      	mov	r1, r5
 80840c4:	f004 f8df 	bl	8088286 <digitalWrite>
		return 1;
 80840c8:	2001      	movs	r0, #1
	}
	else return -3;
}
 80840ca:	b005      	add	sp, #20
 80840cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(command.substring(3,7) == "HIGH") value = 1;
 80840ce:	2501      	movs	r5, #1
 80840d0:	e7e4      	b.n	808409c <_Z18tinkerDigitalWrite6String+0x50>
	else if(command.startsWith("A"))
 80840d2:	490f      	ldr	r1, [pc, #60]	; (8084110 <_Z18tinkerDigitalWrite6String+0xc4>)
 80840d4:	4668      	mov	r0, sp
 80840d6:	f001 facb 	bl	8085670 <_ZN6StringC1EPK19__FlashStringHelper>
 80840da:	4630      	mov	r0, r6
 80840dc:	4669      	mov	r1, sp
 80840de:	f001 fb94 	bl	808580a <_ZNK6String10startsWithERKS_>
 80840e2:	4606      	mov	r6, r0
 80840e4:	4668      	mov	r0, sp
 80840e6:	f001 fa79 	bl	80855dc <_ZN6StringD1Ev>
 80840ea:	b13e      	cbz	r6, 80840fc <_Z18tinkerDigitalWrite6String+0xb0>
		pinMode(pinNumber+10, OUTPUT);
 80840ec:	340a      	adds	r4, #10
 80840ee:	e7e2      	b.n	80840b6 <_Z18tinkerDigitalWrite6String+0x6a>
	if (pinNumber< 0 || pinNumber >7) return -1;
 80840f0:	f04f 30ff 	mov.w	r0, #4294967295
 80840f4:	e7e9      	b.n	80840ca <_Z18tinkerDigitalWrite6String+0x7e>
	else return -2;
 80840f6:	f06f 0001 	mvn.w	r0, #1
 80840fa:	e7e6      	b.n	80840ca <_Z18tinkerDigitalWrite6String+0x7e>
	else return -3;
 80840fc:	f06f 0002 	mvn.w	r0, #2
 8084100:	e7e3      	b.n	80840ca <_Z18tinkerDigitalWrite6String+0x7e>
 8084102:	bf00      	nop
 8084104:	0808bb86 	.word	0x0808bb86
 8084108:	0808bb8b 	.word	0x0808bb8b
 808410c:	0808b48a 	.word	0x0808b48a
 8084110:	0808bb84 	.word	0x0808bb84

08084114 <_Z16tinkerAnalogRead6String>:
 * Output         : None.
 * Return         : Returns the analog value in INT type (0 to 4095)
                    Returns a negative number on failure
 *******************************************************************************/
int tinkerAnalogRead(String pin)
{
 8084114:	b5f0      	push	{r4, r5, r6, r7, lr}
	//convert ascii to integer
	int pinNumber = pin.charAt(1) - '0';
 8084116:	2101      	movs	r1, #1
{
 8084118:	b085      	sub	sp, #20
 808411a:	4607      	mov	r7, r0
	int pinNumber = pin.charAt(1) - '0';
 808411c:	f001 fb87 	bl	808582e <_ZNK6String6charAtEj>
 8084120:	f1a0 0530 	sub.w	r5, r0, #48	; 0x30
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 8084124:	2d07      	cmp	r5, #7
	int pinNumber = pin.charAt(1) - '0';
 8084126:	4604      	mov	r4, r0
	if (pinNumber< 0 || pinNumber >7) return -1;
 8084128:	d82c      	bhi.n	8084184 <_Z16tinkerAnalogRead6String+0x70>

	if(pin.startsWith("D"))
 808412a:	491a      	ldr	r1, [pc, #104]	; (8084194 <_Z16tinkerAnalogRead6String+0x80>)
 808412c:	4668      	mov	r0, sp
 808412e:	f001 fa9f 	bl	8085670 <_ZN6StringC1EPK19__FlashStringHelper>
 8084132:	4669      	mov	r1, sp
 8084134:	4638      	mov	r0, r7
 8084136:	f001 fb68 	bl	808580a <_ZNK6String10startsWithERKS_>
 808413a:	4606      	mov	r6, r0
 808413c:	4668      	mov	r0, sp
 808413e:	f001 fa4d 	bl	80855dc <_ZN6StringD1Ev>
 8084142:	b156      	cbz	r6, 808415a <_Z16tinkerAnalogRead6String+0x46>
	{
		pinMode(pinNumber, INPUT);
 8084144:	b2ad      	uxth	r5, r5
 8084146:	4628      	mov	r0, r5
 8084148:	2100      	movs	r1, #0
 808414a:	f004 f88b 	bl	8088264 <pinMode>
		return analogRead(pinNumber);
 808414e:	4628      	mov	r0, r5
	{
		pinMode(pinNumber+10, INPUT);
		return analogRead(pinNumber+10);
	}
	return -2;
}
 8084150:	b005      	add	sp, #20
 8084152:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return analogRead(pinNumber+10);
 8084156:	f004 b8c2 	b.w	80882de <analogRead>
	else if (pin.startsWith("A"))
 808415a:	490f      	ldr	r1, [pc, #60]	; (8084198 <_Z16tinkerAnalogRead6String+0x84>)
 808415c:	4668      	mov	r0, sp
 808415e:	f001 fa87 	bl	8085670 <_ZN6StringC1EPK19__FlashStringHelper>
 8084162:	4669      	mov	r1, sp
 8084164:	4638      	mov	r0, r7
 8084166:	f001 fb50 	bl	808580a <_ZNK6String10startsWithERKS_>
 808416a:	4605      	mov	r5, r0
 808416c:	4668      	mov	r0, sp
 808416e:	f001 fa35 	bl	80855dc <_ZN6StringD1Ev>
 8084172:	b15d      	cbz	r5, 808418c <_Z16tinkerAnalogRead6String+0x78>
		pinMode(pinNumber+10, INPUT);
 8084174:	3c26      	subs	r4, #38	; 0x26
 8084176:	b2a4      	uxth	r4, r4
 8084178:	4620      	mov	r0, r4
 808417a:	4631      	mov	r1, r6
 808417c:	f004 f872 	bl	8088264 <pinMode>
		return analogRead(pinNumber+10);
 8084180:	4620      	mov	r0, r4
 8084182:	e7e5      	b.n	8084150 <_Z16tinkerAnalogRead6String+0x3c>
	if (pinNumber< 0 || pinNumber >7) return -1;
 8084184:	f04f 30ff 	mov.w	r0, #4294967295
}
 8084188:	b005      	add	sp, #20
 808418a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return -2;
 808418c:	f06f 0001 	mvn.w	r0, #1
 8084190:	e7fa      	b.n	8084188 <_Z16tinkerAnalogRead6String+0x74>
 8084192:	bf00      	nop
 8084194:	0808b48a 	.word	0x0808b48a
 8084198:	0808bb84 	.word	0x0808bb84

0808419c <_Z17tinkerAnalogWrite6String>:
 * Input          : Pin and Value (0 to 255)
 * Output         : None.
 * Return         : 1 on success and a negative number on failure
 *******************************************************************************/
int tinkerAnalogWrite(String command)
{
 808419c:	b5f0      	push	{r4, r5, r6, r7, lr}
	//convert ascii to integer
	int pinNumber = command.charAt(1) - '0';
 808419e:	2101      	movs	r1, #1
{
 80841a0:	b089      	sub	sp, #36	; 0x24
 80841a2:	4605      	mov	r5, r0
	int pinNumber = command.charAt(1) - '0';
 80841a4:	f001 fb43 	bl	808582e <_ZNK6String6charAtEj>
 80841a8:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 80841ac:	2e07      	cmp	r6, #7
	int pinNumber = command.charAt(1) - '0';
 80841ae:	4604      	mov	r4, r0
	if (pinNumber< 0 || pinNumber >7) return -1;
 80841b0:	d840      	bhi.n	8084234 <_Z17tinkerAnalogWrite6String+0x98>

	String value = command.substring(3);
 80841b2:	2203      	movs	r2, #3
 80841b4:	4629      	mov	r1, r5
 80841b6:	4668      	mov	r0, sp
 80841b8:	f001 fb6e 	bl	8085898 <_ZNK6String9substringEj>

	if(command.startsWith("D"))
 80841bc:	491f      	ldr	r1, [pc, #124]	; (808423c <_Z17tinkerAnalogWrite6String+0xa0>)
 80841be:	a804      	add	r0, sp, #16
 80841c0:	f001 fa56 	bl	8085670 <_ZN6StringC1EPK19__FlashStringHelper>
 80841c4:	4628      	mov	r0, r5
 80841c6:	a904      	add	r1, sp, #16
 80841c8:	f001 fb1f 	bl	808580a <_ZNK6String10startsWithERKS_>
 80841cc:	4607      	mov	r7, r0
 80841ce:	a804      	add	r0, sp, #16
 80841d0:	f001 fa04 	bl	80855dc <_ZN6StringD1Ev>
 80841d4:	b197      	cbz	r7, 80841fc <_Z17tinkerAnalogWrite6String+0x60>
	{
		pinMode(pinNumber, OUTPUT);
 80841d6:	b2b6      	uxth	r6, r6
 80841d8:	2101      	movs	r1, #1
 80841da:	4630      	mov	r0, r6
 80841dc:	f004 f842 	bl	8088264 <pinMode>
		analogWrite(pinNumber, value.toInt());
 80841e0:	4668      	mov	r0, sp
 80841e2:	f001 fb60 	bl	80858a6 <_ZNK6String5toIntEv>
 80841e6:	4601      	mov	r1, r0
 80841e8:	4630      	mov	r0, r6
		return 1;
	}
	else if(command.startsWith("A"))
	{
		pinMode(pinNumber+10, OUTPUT);
		analogWrite(pinNumber+10, value.toInt());
 80841ea:	f004 f88f 	bl	808830c <_Z11analogWritetm>
		return 1;
 80841ee:	2401      	movs	r4, #1
	String value = command.substring(3);
 80841f0:	4668      	mov	r0, sp
 80841f2:	f001 f9f3 	bl	80855dc <_ZN6StringD1Ev>
	}
	else return -2;
}
 80841f6:	4620      	mov	r0, r4
 80841f8:	b009      	add	sp, #36	; 0x24
 80841fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(command.startsWith("A"))
 80841fc:	4910      	ldr	r1, [pc, #64]	; (8084240 <_Z17tinkerAnalogWrite6String+0xa4>)
 80841fe:	a804      	add	r0, sp, #16
 8084200:	f001 fa36 	bl	8085670 <_ZN6StringC1EPK19__FlashStringHelper>
 8084204:	4628      	mov	r0, r5
 8084206:	a904      	add	r1, sp, #16
 8084208:	f001 faff 	bl	808580a <_ZNK6String10startsWithERKS_>
 808420c:	4605      	mov	r5, r0
 808420e:	a804      	add	r0, sp, #16
 8084210:	f001 f9e4 	bl	80855dc <_ZN6StringD1Ev>
 8084214:	b15d      	cbz	r5, 808422e <_Z17tinkerAnalogWrite6String+0x92>
		pinMode(pinNumber+10, OUTPUT);
 8084216:	3c26      	subs	r4, #38	; 0x26
 8084218:	b2a4      	uxth	r4, r4
 808421a:	2101      	movs	r1, #1
 808421c:	4620      	mov	r0, r4
 808421e:	f004 f821 	bl	8088264 <pinMode>
		analogWrite(pinNumber+10, value.toInt());
 8084222:	4668      	mov	r0, sp
 8084224:	f001 fb3f 	bl	80858a6 <_ZNK6String5toIntEv>
 8084228:	4601      	mov	r1, r0
 808422a:	4620      	mov	r0, r4
 808422c:	e7dd      	b.n	80841ea <_Z17tinkerAnalogWrite6String+0x4e>
	else return -2;
 808422e:	f06f 0401 	mvn.w	r4, #1
 8084232:	e7dd      	b.n	80841f0 <_Z17tinkerAnalogWrite6String+0x54>
	if (pinNumber< 0 || pinNumber >7) return -1;
 8084234:	f04f 34ff 	mov.w	r4, #4294967295
 8084238:	e7dd      	b.n	80841f6 <_Z17tinkerAnalogWrite6String+0x5a>
 808423a:	bf00      	nop
 808423c:	0808b48a 	.word	0x0808b48a
 8084240:	0808bb84 	.word	0x0808bb84

08084244 <_ZN14PietteTech_DHT12_isrCallbackEv>:
// NOTE:  isrCallback is only here for backwards compatibility with v0.3 and earlier
//        it is no longer used or needed
// 
void PietteTech_DHT::isrCallback() { }

void PietteTech_DHT::_isrCallback() {
 8084244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // so we'll set _detachISR inside the ISR when we're done
  // and count on code on the main thread to detach it via detachISRIfRequested().
  // Getting another interrupt after we've already requested a detach is benign
  // so we'll just ignore this interrupt and return.

  if (_detachISR) return;
 8084246:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
void PietteTech_DHT::_isrCallback() {
 808424a:	4604      	mov	r4, r0
  if (_detachISR) return;
 808424c:	b98b      	cbnz	r3, 8084272 <_ZN14PietteTech_DHT12_isrCallbackEv+0x2e>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 808424e:	f000 fc57 	bl	8084b00 <HAL_Timer_Get_Micro_Seconds>

  unsigned long newUs = micros();
  unsigned long delta = (newUs - _us);
  _us = newUs;

  if (delta > 6000) {
 8084252:	f241 7170 	movw	r1, #6000	; 0x1770
  unsigned long delta = (newUs - _us);
 8084256:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  _us = newUs;
 8084258:	63a0      	str	r0, [r4, #56]	; 0x38
  unsigned long delta = (newUs - _us);
 808425a:	1a83      	subs	r3, r0, r2
  if (delta > 6000) {
 808425c:	428b      	cmp	r3, r1
 808425e:	d909      	bls.n	8084274 <_ZN14PietteTech_DHT12_isrCallbackEv+0x30>
    _status = DHTLIB_ERROR_ISR_TIMEOUT;
 8084260:	f06f 0301 	mvn.w	r3, #1
 8084264:	62e3      	str	r3, [r4, #44]	; 0x2c
    _state = STOPPED;
 8084266:	2303      	movs	r3, #3
 8084268:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
#if (SYSTEM_VERSION < SYSTEM_VERSION_v121RC3)
    detachInterrupt(_sigPin);
#else
    _detachISR = true;
 808426c:	2301      	movs	r3, #1
 808426e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    }
    break;
  default:
    break;
  }
}
 8084272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (_state) {
 8084274:	f894 502a 	ldrb.w	r5, [r4, #42]	; 0x2a
 8084278:	f005 01ff 	and.w	r1, r5, #255	; 0xff
 808427c:	2d00      	cmp	r5, #0
 808427e:	d048      	beq.n	8084312 <_ZN14PietteTech_DHT12_isrCallbackEv+0xce>
 8084280:	2901      	cmp	r1, #1
 8084282:	d1f6      	bne.n	8084272 <_ZN14PietteTech_DHT12_isrCallbackEv+0x2e>
    if (60 < delta && delta < 155) { //valid in timing
 8084284:	f1a3 023d 	sub.w	r2, r3, #61	; 0x3d
 8084288:	2a5d      	cmp	r2, #93	; 0x5d
 808428a:	d870      	bhi.n	808436e <_ZN14PietteTech_DHT12_isrCallbackEv+0x12a>
      _bits[_idx] <<= 1; // shift the data
 808428c:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
      if (delta > 110) //is a one
 8084290:	2b6e      	cmp	r3, #110	; 0x6e
      _bits[_idx] <<= 1; // shift the data
 8084292:	4421      	add	r1, r4
 8084294:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
 8084298:	ea4f 0242 	mov.w	r2, r2, lsl #1
 808429c:	b2d2      	uxtb	r2, r2
 808429e:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
      if (delta > 110) //is a one
 80842a2:	d908      	bls.n	80842b6 <_ZN14PietteTech_DHT12_isrCallbackEv+0x72>
        _bits[_idx] |= 1;
 80842a4:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
 80842a8:	4422      	add	r2, r4
 80842aa:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
 80842ae:	f041 0101 	orr.w	r1, r1, #1
 80842b2:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
      *_e++ = delta;  // record the edge -> edge time
 80842b6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80842b8:	b2db      	uxtb	r3, r3
 80842ba:	1c51      	adds	r1, r2, #1
 80842bc:	6421      	str	r1, [r4, #64]	; 0x40
 80842be:	7013      	strb	r3, [r2, #0]
      if (_cnt == 0) { // we have completed the byte, go to next
 80842c0:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80842c4:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80842c8:	2b00      	cmp	r3, #0
 80842ca:	d149      	bne.n	8084360 <_ZN14PietteTech_DHT12_isrCallbackEv+0x11c>
        _cnt = 7; // restart at MSB
 80842cc:	2307      	movs	r3, #7
 80842ce:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if (++_idx == 5) { // go to next byte, if we have got 5 bytes stop.
 80842d2:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80842d6:	3301      	adds	r3, #1
 80842d8:	b2db      	uxtb	r3, r3
 80842da:	2b05      	cmp	r3, #5
 80842dc:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
 80842e0:	d1c7      	bne.n	8084272 <_ZN14PietteTech_DHT12_isrCallbackEv+0x2e>
          _detachISR = true;
 80842e2:	2001      	movs	r0, #1
 80842e4:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
          uint8_t sum = _bits[0] + _bits[1] + _bits[2] + _bits[3];
 80842e8:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 80842ec:	f894 7031 	ldrb.w	r7, [r4, #49]	; 0x31
 80842f0:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 80842f4:	4439      	add	r1, r7
 80842f6:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 80842fa:	440a      	add	r2, r1
          if (_bits[4] != sum) {
 80842fc:	f894 6034 	ldrb.w	r6, [r4, #52]	; 0x34
          uint8_t sum = _bits[0] + _bits[1] + _bits[2] + _bits[3];
 8084300:	4413      	add	r3, r2
          if (_bits[4] != sum) {
 8084302:	b2db      	uxtb	r3, r3
 8084304:	42b3      	cmp	r3, r6
 8084306:	d024      	beq.n	8084352 <_ZN14PietteTech_DHT12_isrCallbackEv+0x10e>
            _status = DHTLIB_ERROR_CHECKSUM;
 8084308:	f04f 33ff 	mov.w	r3, #4294967295
 808430c:	62e3      	str	r3, [r4, #44]	; 0x2c
            _state = STOPPED;
 808430e:	2303      	movs	r3, #3
 8084310:	e011      	b.n	8084336 <_ZN14PietteTech_DHT12_isrCallbackEv+0xf2>
    if (delta < 65) {       // Spec: 20-200us to first falling edge of response
 8084312:	2b40      	cmp	r3, #64	; 0x40
 8084314:	d804      	bhi.n	8084320 <_ZN14PietteTech_DHT12_isrCallbackEv+0xdc>
      _us -= delta;
 8084316:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8084318:	441a      	add	r2, r3
 808431a:	1a12      	subs	r2, r2, r0
 808431c:	63a2      	str	r2, [r4, #56]	; 0x38
      break; //do nothing, it started the response signal
 808431e:	e7a8      	b.n	8084272 <_ZN14PietteTech_DHT12_isrCallbackEv+0x2e>
      *_e++ = delta;  // record the edge -> edge time
 8084320:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8084322:	b2d9      	uxtb	r1, r3
    } if (125 < delta && delta < 220) {   // account for timing offset with Particle Mesh devices
 8084324:	3b7e      	subs	r3, #126	; 0x7e
 8084326:	2b5d      	cmp	r3, #93	; 0x5d
      *_e++ = delta;  // record the edge -> edge time
 8084328:	f102 0001 	add.w	r0, r2, #1
 808432c:	f04f 0301 	mov.w	r3, #1
    } if (125 < delta && delta < 220) {   // account for timing offset with Particle Mesh devices
 8084330:	d804      	bhi.n	808433c <_ZN14PietteTech_DHT12_isrCallbackEv+0xf8>
      *_e++ = delta;  // record the edge -> edge time
 8084332:	6420      	str	r0, [r4, #64]	; 0x40
 8084334:	7011      	strb	r1, [r2, #0]
      _state = STOPPED;
 8084336:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
 808433a:	e79a      	b.n	8084272 <_ZN14PietteTech_DHT12_isrCallbackEv+0x2e>
      _detachISR = true;
 808433c:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
      _status = DHTLIB_ERROR_RESPONSE_TIMEOUT;
 8084340:	f06f 0302 	mvn.w	r3, #2
 8084344:	62e3      	str	r3, [r4, #44]	; 0x2c
      _state = STOPPED;
 8084346:	2303      	movs	r3, #3
      *_e++ = delta;  // record the edge -> edge time
 8084348:	6420      	str	r0, [r4, #64]	; 0x40
      _state = STOPPED;
 808434a:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
      *_e++ = delta;  // record the edge -> edge time
 808434e:	7011      	strb	r1, [r2, #0]
 8084350:	e78f      	b.n	8084272 <_ZN14PietteTech_DHT12_isrCallbackEv+0x2e>
            _state = ACQUIRED;
 8084352:	2302      	movs	r3, #2
            _status = DHTLIB_OK;
 8084354:	62e5      	str	r5, [r4, #44]	; 0x2c
            _state = ACQUIRED;
 8084356:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
            _convert = true;
 808435a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 808435e:	e788      	b.n	8084272 <_ZN14PietteTech_DHT12_isrCallbackEv+0x2e>
      else _cnt--;
 8084360:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8084364:	3b01      	subs	r3, #1
 8084366:	b2db      	uxtb	r3, r3
 8084368:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 808436c:	e781      	b.n	8084272 <_ZN14PietteTech_DHT12_isrCallbackEv+0x2e>
    else if (delta < 10) {
 808436e:	2b09      	cmp	r3, #9
      _status = DHTLIB_ERROR_DELTA;
 8084370:	bf94      	ite	ls
 8084372:	f06f 0205 	mvnls.w	r2, #5
      _status = DHTLIB_ERROR_DATA_TIMEOUT;
 8084376:	f06f 0203 	mvnhi.w	r2, #3
      _detachISR = true;
 808437a:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
 808437e:	2303      	movs	r3, #3
      _status = DHTLIB_ERROR_DATA_TIMEOUT;
 8084380:	62e2      	str	r2, [r4, #44]	; 0x2c
 8084382:	e7d8      	b.n	8084336 <_ZN14PietteTech_DHT12_isrCallbackEv+0xf2>

08084384 <_ZNSt17_Function_handlerIFvvESt5_BindIFM14PietteTech_DHTFvvEPS2_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8084384:	b410      	push	{r4}
	    return __source._M_access<_Functor*>();
 8084386:	6803      	ldr	r3, [r0, #0]
 8084388:	685a      	ldr	r2, [r3, #4]
 808438a:	6899      	ldr	r1, [r3, #8]
 808438c:	1054      	asrs	r4, r2, #1
 808438e:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8084392:	07d2      	lsls	r2, r2, #31
 8084394:	bf48      	it	mi
 8084396:	590a      	ldrmi	r2, [r1, r4]
 8084398:	681b      	ldr	r3, [r3, #0]
      }
 808439a:	bc10      	pop	{r4}
 808439c:	bf48      	it	mi
 808439e:	58d3      	ldrmi	r3, [r2, r3]
 80843a0:	4718      	bx	r3

080843a2 <_ZNSt17_Function_handlerIFvvESt5_BindIFM14PietteTech_DHTFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	switch (__op)
 80843a2:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80843a4:	b538      	push	{r3, r4, r5, lr}
 80843a6:	4604      	mov	r4, r0
	switch (__op)
 80843a8:	d102      	bne.n	80843b0 <_ZNSt17_Function_handlerIFvvESt5_BindIFM14PietteTech_DHTFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
 80843aa:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
 80843ac:	6023      	str	r3, [r4, #0]
	}
 80843ae:	e003      	b.n	80843b8 <_ZNSt17_Function_handlerIFvvESt5_BindIFM14PietteTech_DHTFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
	  switch (__op)
 80843b0:	2a02      	cmp	r2, #2
 80843b2:	d003      	beq.n	80843bc <_ZNSt17_Function_handlerIFvvESt5_BindIFM14PietteTech_DHTFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x1a>
 80843b4:	2a03      	cmp	r2, #3
 80843b6:	d00d      	beq.n	80843d4 <_ZNSt17_Function_handlerIFvvESt5_BindIFM14PietteTech_DHTFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x32>
      }
 80843b8:	2000      	movs	r0, #0
 80843ba:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80843bc:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
 80843be:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80843c0:	f7fb fe7b 	bl	80800ba <_Znwj>
 80843c4:	4603      	mov	r3, r0
 80843c6:	2800      	cmp	r0, #0
 80843c8:	d0f0      	beq.n	80843ac <_ZNSt17_Function_handlerIFvvESt5_BindIFM14PietteTech_DHTFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
 80843ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80843ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80843d2:	e7eb      	b.n	80843ac <_ZNSt17_Function_handlerIFvvESt5_BindIFM14PietteTech_DHTFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
 80843d4:	6800      	ldr	r0, [r0, #0]
 80843d6:	2800      	cmp	r0, #0
 80843d8:	d0ee      	beq.n	80843b8 <_ZNSt17_Function_handlerIFvvESt5_BindIFM14PietteTech_DHTFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
 80843da:	210c      	movs	r1, #12
 80843dc:	f004 f88f 	bl	80884fe <_ZdlPvj>
 80843e0:	e7ea      	b.n	80843b8 <_ZNSt17_Function_handlerIFvvESt5_BindIFM14PietteTech_DHTFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>

080843e2 <_ZN14PietteTech_DHTC1EhhPFvvE>:
  _type = dht_type;
 80843e2:	e9c0 1211 	strd	r1, r2, [r0, #68]	; 0x44
}
 80843e6:	4770      	bx	lr

080843e8 <_ZN14PietteTech_DHT5beginEv>:
  _state = STOPPED;
 80843e8:	2203      	movs	r2, #3
void PietteTech_DHT::begin() {
 80843ea:	b538      	push	{r3, r4, r5, lr}
  _lastreadtime = 0;
 80843ec:	2300      	movs	r3, #0
  _state = STOPPED;
 80843ee:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
  _firstreading = true;
 80843f2:	2501      	movs	r5, #1
  _status = DHTLIB_ERROR_NOTSTARTED;
 80843f4:	f06f 0206 	mvn.w	r2, #6
void PietteTech_DHT::begin() {
 80843f8:	4604      	mov	r4, r0
  _lastreadtime = 0;
 80843fa:	64c3      	str	r3, [r0, #76]	; 0x4c
  _status = DHTLIB_ERROR_NOTSTARTED;
 80843fc:	62c2      	str	r2, [r0, #44]	; 0x2c
  pinMode(_sigPin, OUTPUT);
 80843fe:	4629      	mov	r1, r5
  _detachISR = false;
 8084400:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
  _firstreading = true;
 8084404:	f880 5050 	strb.w	r5, [r0, #80]	; 0x50
  pinMode(_sigPin, OUTPUT);
 8084408:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
 808440c:	f003 ff2a 	bl	8088264 <pinMode>
  digitalWrite(_sigPin, HIGH);
 8084410:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
 8084414:	4629      	mov	r1, r5
 8084416:	f003 ff36 	bl	8088286 <digitalWrite>
}
 808441a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  delay(1000); // allow for sensor to settle after startup
 808441e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8084422:	f002 bcaf 	b.w	8086d84 <delay>
	...

08084428 <_ZN14PietteTech_DHT7acquireEv>:
int PietteTech_DHT::acquire() {
 8084428:	b570      	push	{r4, r5, r6, lr}
 808442a:	4604      	mov	r4, r0
 808442c:	b086      	sub	sp, #24
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 808442e:	f000 fb6f 	bl	8084b10 <HAL_Timer_Get_Milli_Seconds>
  if (!_firstreading && ((currenttime - _lastreadtime) < 2000)) {
 8084432:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8084436:	b923      	cbnz	r3, 8084442 <_ZN14PietteTech_DHT7acquireEv+0x1a>
 8084438:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 808443a:	1ac3      	subs	r3, r0, r3
 808443c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8084440:	d367      	bcc.n	8084512 <_ZN14PietteTech_DHT7acquireEv+0xea>
  if (_state == STOPPED || _state == ACQUIRED) {
 8084442:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8084446:	2b03      	cmp	r3, #3
 8084448:	d003      	beq.n	8084452 <_ZN14PietteTech_DHT7acquireEv+0x2a>
 808444a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 808444e:	2b02      	cmp	r3, #2
 8084450:	d161      	bne.n	8084516 <_ZN14PietteTech_DHT7acquireEv+0xee>
    _firstreading = false;
 8084452:	2300      	movs	r3, #0
    for (int i = 0; i < 41; i++) _edges[i] = 0;
 8084454:	461a      	mov	r2, r3
    _firstreading = false;
 8084456:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    _lastreadtime = currenttime;
 808445a:	64e0      	str	r0, [r4, #76]	; 0x4c
    _state = RESPONSE;
 808445c:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
    for (int i = 0; i < 41; i++) _edges[i] = 0;
 8084460:	54e2      	strb	r2, [r4, r3]
 8084462:	3301      	adds	r3, #1
 8084464:	2b29      	cmp	r3, #41	; 0x29
 8084466:	d1fb      	bne.n	8084460 <_ZN14PietteTech_DHT7acquireEv+0x38>
    _cnt = 7;
 8084468:	2307      	movs	r3, #7
    for (int i = 0; i < 5; i++) _bits[i] = 0;
 808446a:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
 808446e:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
 8084472:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
 8084476:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
 808447a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    _cnt = 7;
 808447e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    _hum = 0;
 8084482:	2300      	movs	r3, #0
    pinMode(_sigPin, OUTPUT);
 8084484:	2101      	movs	r1, #1
    _hum = 0;
 8084486:	6563      	str	r3, [r4, #84]	; 0x54
    _temp = 0;
 8084488:	65a3      	str	r3, [r4, #88]	; 0x58
    pinMode(_sigPin, OUTPUT);
 808448a:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
    _idx = 0;
 808448e:	f884 2036 	strb.w	r2, [r4, #54]	; 0x36
    _e = &_edges[0];
 8084492:	6424      	str	r4, [r4, #64]	; 0x40
    pinMode(_sigPin, OUTPUT);
 8084494:	f003 fee6 	bl	8088264 <pinMode>
    digitalWrite(_sigPin, LOW);
 8084498:	2100      	movs	r1, #0
 808449a:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
 808449e:	f003 fef2 	bl	8088286 <digitalWrite>
    if (_type == DHT11)
 80844a2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80844a4:	2b0b      	cmp	r3, #11
 80844a6:	d12f      	bne.n	8084508 <_ZN14PietteTech_DHT7acquireEv+0xe0>
      delay(18);                  // DHT11 Spec: 18ms min
 80844a8:	2012      	movs	r0, #18
 80844aa:	f002 fc6b 	bl	8086d84 <delay>
    pinMode(_sigPin, INPUT);        // Note Hi-Z mode with pullup resistor
 80844ae:	2100      	movs	r1, #0
 80844b0:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
    _detachISR = false;
 80844b4:	2500      	movs	r5, #0
    pinMode(_sigPin, INPUT);        // Note Hi-Z mode with pullup resistor
 80844b6:	f003 fed5 	bl	8088264 <pinMode>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80844ba:	f000 fb21 	bl	8084b00 <HAL_Timer_Get_Micro_Seconds>
    _us = micros();
 80844be:	63a0      	str	r0, [r4, #56]	; 0x38
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80844c0:	200c      	movs	r0, #12
    _detachISR = false;
 80844c2:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
    attachInterrupt(_sigPin, &PietteTech_DHT::_isrCallback, this, FALLING);
 80844c6:	f8b4 6044 	ldrh.w	r6, [r4, #68]	; 0x44
    _Function_base() : _M_manager(nullptr) { }
 80844ca:	9504      	str	r5, [sp, #16]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80844cc:	f7fb fdf5 	bl	80800ba <_Znwj>
 80844d0:	b118      	cbz	r0, 80844da <_ZN14PietteTech_DHT7acquireEv+0xb2>
 80844d2:	4b12      	ldr	r3, [pc, #72]	; (808451c <_ZN14PietteTech_DHT7acquireEv+0xf4>)
 80844d4:	6084      	str	r4, [r0, #8]
 80844d6:	e9c0 3500 	strd	r3, r5, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
 80844da:	4b11      	ldr	r3, [pc, #68]	; (8084520 <_ZN14PietteTech_DHT7acquireEv+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80844dc:	9002      	str	r0, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
 80844de:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 80844e0:	4b10      	ldr	r3, [pc, #64]	; (8084524 <_ZN14PietteTech_DHT7acquireEv+0xfc>)
 80844e2:	2202      	movs	r2, #2
 80844e4:	9304      	str	r3, [sp, #16]
 80844e6:	2300      	movs	r3, #0
 80844e8:	4630      	mov	r0, r6
 80844ea:	9300      	str	r3, [sp, #0]
 80844ec:	a902      	add	r1, sp, #8
 80844ee:	f04f 33ff 	mov.w	r3, #4294967295
 80844f2:	f003 fa41 	bl	8087978 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>
      if (_M_manager)
 80844f6:	9b04      	ldr	r3, [sp, #16]
 80844f8:	b11b      	cbz	r3, 8084502 <_ZN14PietteTech_DHT7acquireEv+0xda>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80844fa:	a902      	add	r1, sp, #8
 80844fc:	2203      	movs	r2, #3
 80844fe:	4608      	mov	r0, r1
 8084500:	4798      	blx	r3
 8084502:	2001      	movs	r0, #1
}
 8084504:	b006      	add	sp, #24
 8084506:	bd70      	pop	{r4, r5, r6, pc}
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 8084508:	f240 50dc 	movw	r0, #1500	; 0x5dc
 808450c:	f000 faf0 	bl	8084af0 <HAL_Delay_Microseconds>
 8084510:	e7cd      	b.n	80844ae <_ZN14PietteTech_DHT7acquireEv+0x86>
    return DHTLIB_ACQUIRED;
 8084512:	2002      	movs	r0, #2
 8084514:	e7f6      	b.n	8084504 <_ZN14PietteTech_DHT7acquireEv+0xdc>
    return DHTLIB_ERROR_ACQUIRING;
 8084516:	f06f 0004 	mvn.w	r0, #4
 808451a:	e7f3      	b.n	8084504 <_ZN14PietteTech_DHT7acquireEv+0xdc>
 808451c:	08084245 	.word	0x08084245
 8084520:	08084385 	.word	0x08084385
 8084524:	080843a3 	.word	0x080843a3

08084528 <_ZN14PietteTech_DHT7convertEv>:

void PietteTech_DHT::convert() {
 8084528:	b510      	push	{r4, lr}
  // Calculate the temperature and humidity based on the sensor type
  switch (_type) {
 808452a:	6c83      	ldr	r3, [r0, #72]	; 0x48
void PietteTech_DHT::convert() {
 808452c:	4604      	mov	r4, r0
  switch (_type) {
 808452e:	2b0b      	cmp	r3, #11
 8084530:	d02a      	beq.n	8084588 <_ZN14PietteTech_DHT7convertEv+0x60>
 8084532:	3b15      	subs	r3, #21
 8084534:	2b01      	cmp	r3, #1
 8084536:	d831      	bhi.n	808459c <_ZN14PietteTech_DHT7convertEv+0x74>
    _hum = _bits[0];
    _temp = _bits[2];
    break;
  case DHT22:
  case DHT21:
    _hum = word(_bits[0], _bits[1]) * 0.1;
 8084538:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 808453c:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
  ret_val += (high << 8);
 8084540:	eb00 2003 	add.w	r0, r0, r3, lsl #8
    _hum = word(_bits[0], _bits[1]) * 0.1;
 8084544:	b280      	uxth	r0, r0
 8084546:	f005 fc7f 	bl	8089e48 <__aeabi_i2d>
 808454a:	a31b      	add	r3, pc, #108	; (adr r3, 80845b8 <_ZN14PietteTech_DHT7convertEv+0x90>)
 808454c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084550:	f005 fce4 	bl	8089f1c <__aeabi_dmul>
 8084554:	f005 ffda 	bl	808a50c <__aeabi_d2f>
    _temp = (_bits[2] & 0x80 ?
 8084558:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    _hum = word(_bits[0], _bits[1]) * 0.1;
 808455c:	6560      	str	r0, [r4, #84]	; 0x54
      -word(_bits[2] & 0x7F, _bits[3]) :
      word(_bits[2], _bits[3])) * 0.1;
 808455e:	061b      	lsls	r3, r3, #24
 8084560:	d520      	bpl.n	80845a4 <_ZN14PietteTech_DHT7convertEv+0x7c>
      -word(_bits[2] & 0x7F, _bits[3]) :
 8084562:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8084566:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
  ret_val += (high << 8);
 808456a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      -word(_bits[2] & 0x7F, _bits[3]) :
 808456e:	eb00 2003 	add.w	r0, r0, r3, lsl #8
      word(_bits[2], _bits[3])) * 0.1;
 8084572:	4240      	negs	r0, r0
 8084574:	f005 fc68 	bl	8089e48 <__aeabi_i2d>
 8084578:	a30f      	add	r3, pc, #60	; (adr r3, 80845b8 <_ZN14PietteTech_DHT7convertEv+0x90>)
 808457a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808457e:	f005 fccd 	bl	8089f1c <__aeabi_dmul>
 8084582:	f005 ffc3 	bl	808a50c <__aeabi_d2f>
 8084586:	e008      	b.n	808459a <_ZN14PietteTech_DHT7convertEv+0x72>
    _hum = _bits[0];
 8084588:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
 808458c:	f006 f8c4 	bl	808a718 <__aeabi_ui2f>
 8084590:	6560      	str	r0, [r4, #84]	; 0x54
    _temp = _bits[2];
 8084592:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 8084596:	f006 f8bf 	bl	808a718 <__aeabi_ui2f>
      word(_bits[2], _bits[3])) * 0.1;
 808459a:	65a0      	str	r0, [r4, #88]	; 0x58
    break;
  }
  _convert = false;
 808459c:	2300      	movs	r3, #0
 808459e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80845a2:	bd10      	pop	{r4, pc}
      word(_bits[2], _bits[3])) * 0.1;
 80845a4:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 80845a8:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
  ret_val += (high << 8);
 80845ac:	eb00 2003 	add.w	r0, r0, r3, lsl #8
      word(_bits[2], _bits[3])) * 0.1;
 80845b0:	b280      	uxth	r0, r0
 80845b2:	e7df      	b.n	8084574 <_ZN14PietteTech_DHT7convertEv+0x4c>
 80845b4:	f3af 8000 	nop.w
 80845b8:	9999999a 	.word	0x9999999a
 80845bc:	3fb99999 	.word	0x3fb99999

080845c0 <_ZN14PietteTech_DHT9acquiringEv>:

bool PietteTech_DHT::acquiring() {
  if (_state != ACQUIRED && _state != STOPPED)
 80845c0:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 80845c4:	2b02      	cmp	r3, #2
 80845c6:	d005      	beq.n	80845d4 <_ZN14PietteTech_DHT9acquiringEv+0x14>
 80845c8:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
 80845cc:	3803      	subs	r0, #3
 80845ce:	bf18      	it	ne
 80845d0:	2001      	movne	r0, #1
 80845d2:	4770      	bx	lr
    return true;
  return false;
 80845d4:	2000      	movs	r0, #0
}
 80845d6:	4770      	bx	lr

080845d8 <_ZN14PietteTech_DHT20detachISRIfRequestedEv>:
}

#if (SYSTEM_VERSION < SYSTEM_VERSION_v121RC3)
// no extra steps required
#else
void PietteTech_DHT::detachISRIfRequested() {
 80845d8:	b510      	push	{r4, lr}
  if (_detachISR) {
 80845da:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
void PietteTech_DHT::detachISRIfRequested() {
 80845de:	4604      	mov	r4, r0
  if (_detachISR) {
 80845e0:	b133      	cbz	r3, 80845f0 <_ZN14PietteTech_DHT20detachISRIfRequestedEv+0x18>
    detachInterrupt(_sigPin);
 80845e2:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
 80845e6:	f003 f981 	bl	80878ec <_Z15detachInterruptt>
    _detachISR = false;
 80845ea:	2300      	movs	r3, #0
 80845ec:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  }
}
 80845f0:	bd10      	pop	{r4, pc}

080845f2 <_ZN14PietteTech_DHT9getStatusEv>:
int PietteTech_DHT::getStatus() {
 80845f2:	b510      	push	{r4, lr}
 80845f4:	4604      	mov	r4, r0
  detachISRIfRequested();
 80845f6:	f7ff ffef 	bl	80845d8 <_ZN14PietteTech_DHT20detachISRIfRequestedEv>
  return _status;
 80845fa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
}
 80845fc:	bd10      	pop	{r4, pc}
	...

08084600 <_ZN14PietteTech_DHT10getCelsiusEv>:
float PietteTech_DHT::getCelsius() {
 8084600:	b510      	push	{r4, lr}
 8084602:	4604      	mov	r4, r0
  DHT_CHECK_STATE;
 8084604:	f7ff ffe8 	bl	80845d8 <_ZN14PietteTech_DHT20detachISRIfRequestedEv>
 8084608:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 808460c:	2b03      	cmp	r3, #3
 808460e:	d103      	bne.n	8084618 <_ZN14PietteTech_DHT10getCelsiusEv+0x18>
 8084610:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8084612:	f006 f885 	bl	808a720 <__aeabi_i2f>
}
 8084616:	bd10      	pop	{r4, pc}
  DHT_CHECK_STATE;
 8084618:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 808461c:	2b02      	cmp	r3, #2
 808461e:	d107      	bne.n	8084630 <_ZN14PietteTech_DHT10getCelsiusEv+0x30>
 8084620:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8084624:	b113      	cbz	r3, 808462c <_ZN14PietteTech_DHT10getCelsiusEv+0x2c>
 8084626:	4620      	mov	r0, r4
 8084628:	f7ff ff7e 	bl	8084528 <_ZN14PietteTech_DHT7convertEv>
  return _temp;
 808462c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 808462e:	e7f2      	b.n	8084616 <_ZN14PietteTech_DHT10getCelsiusEv+0x16>
  DHT_CHECK_STATE;
 8084630:	4800      	ldr	r0, [pc, #0]	; (8084634 <_ZN14PietteTech_DHT10getCelsiusEv+0x34>)
 8084632:	e7f0      	b.n	8084616 <_ZN14PietteTech_DHT10getCelsiusEv+0x16>
 8084634:	c0a00000 	.word	0xc0a00000

08084638 <_ZN14PietteTech_DHT11getHumidityEv>:
float PietteTech_DHT::getHumidity() {
 8084638:	b510      	push	{r4, lr}
 808463a:	4604      	mov	r4, r0
  DHT_CHECK_STATE;
 808463c:	f7ff ffcc 	bl	80845d8 <_ZN14PietteTech_DHT20detachISRIfRequestedEv>
 8084640:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8084644:	2b03      	cmp	r3, #3
 8084646:	d103      	bne.n	8084650 <_ZN14PietteTech_DHT11getHumidityEv+0x18>
 8084648:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 808464a:	f006 f869 	bl	808a720 <__aeabi_i2f>
}
 808464e:	bd10      	pop	{r4, pc}
  DHT_CHECK_STATE;
 8084650:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8084654:	2b02      	cmp	r3, #2
 8084656:	d107      	bne.n	8084668 <_ZN14PietteTech_DHT11getHumidityEv+0x30>
 8084658:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 808465c:	b113      	cbz	r3, 8084664 <_ZN14PietteTech_DHT11getHumidityEv+0x2c>
 808465e:	4620      	mov	r0, r4
 8084660:	f7ff ff62 	bl	8084528 <_ZN14PietteTech_DHT7convertEv>
  return _hum;
 8084664:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8084666:	e7f2      	b.n	808464e <_ZN14PietteTech_DHT11getHumidityEv+0x16>
  DHT_CHECK_STATE;
 8084668:	4800      	ldr	r0, [pc, #0]	; (808466c <_ZN14PietteTech_DHT11getHumidityEv+0x34>)
 808466a:	e7f0      	b.n	808464e <_ZN14PietteTech_DHT11getHumidityEv+0x16>
 808466c:	c0a00000 	.word	0xc0a00000

08084670 <_ZN14PietteTech_DHT13getFahrenheitEv>:
float PietteTech_DHT::getFahrenheit() {
 8084670:	b510      	push	{r4, lr}
 8084672:	4604      	mov	r4, r0
  DHT_CHECK_STATE;
 8084674:	f7ff ffb0 	bl	80845d8 <_ZN14PietteTech_DHT20detachISRIfRequestedEv>
 8084678:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 808467c:	2b03      	cmp	r3, #3
 808467e:	d103      	bne.n	8084688 <_ZN14PietteTech_DHT13getFahrenheitEv+0x18>
 8084680:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8084682:	f006 f84d 	bl	808a720 <__aeabi_i2f>
}
 8084686:	bd10      	pop	{r4, pc}
  DHT_CHECK_STATE;
 8084688:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 808468c:	2b02      	cmp	r3, #2
 808468e:	d111      	bne.n	80846b4 <_ZN14PietteTech_DHT13getFahrenheitEv+0x44>
 8084690:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8084694:	b113      	cbz	r3, 808469c <_ZN14PietteTech_DHT13getFahrenheitEv+0x2c>
 8084696:	4620      	mov	r0, r4
 8084698:	f7ff ff46 	bl	8084528 <_ZN14PietteTech_DHT7convertEv>
  return _temp * 9 / 5 + 32;
 808469c:	4906      	ldr	r1, [pc, #24]	; (80846b8 <_ZN14PietteTech_DHT13getFahrenheitEv+0x48>)
 808469e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80846a0:	f006 f892 	bl	808a7c8 <__aeabi_fmul>
 80846a4:	4905      	ldr	r1, [pc, #20]	; (80846bc <_ZN14PietteTech_DHT13getFahrenheitEv+0x4c>)
 80846a6:	f006 f943 	bl	808a930 <__aeabi_fdiv>
 80846aa:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 80846ae:	f005 ff83 	bl	808a5b8 <__addsf3>
 80846b2:	e7e8      	b.n	8084686 <_ZN14PietteTech_DHT13getFahrenheitEv+0x16>
  DHT_CHECK_STATE;
 80846b4:	4802      	ldr	r0, [pc, #8]	; (80846c0 <_ZN14PietteTech_DHT13getFahrenheitEv+0x50>)
 80846b6:	e7e6      	b.n	8084686 <_ZN14PietteTech_DHT13getFahrenheitEv+0x16>
 80846b8:	41100000 	.word	0x41100000
 80846bc:	40a00000 	.word	0x40a00000
 80846c0:	c0a00000 	.word	0xc0a00000
 80846c4:	00000000 	.word	0x00000000

080846c8 <_ZN14PietteTech_DHT9getKelvinEv>:
float PietteTech_DHT::getKelvin() {
 80846c8:	b510      	push	{r4, lr}
 80846ca:	4604      	mov	r4, r0
  DHT_CHECK_STATE;
 80846cc:	f7ff ff84 	bl	80845d8 <_ZN14PietteTech_DHT20detachISRIfRequestedEv>
 80846d0:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80846d4:	2b03      	cmp	r3, #3
 80846d6:	d103      	bne.n	80846e0 <_ZN14PietteTech_DHT9getKelvinEv+0x18>
 80846d8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80846da:	f006 f821 	bl	808a720 <__aeabi_i2f>
}
 80846de:	bd10      	pop	{r4, pc}
  DHT_CHECK_STATE;
 80846e0:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80846e4:	2b02      	cmp	r3, #2
 80846e6:	d110      	bne.n	808470a <_ZN14PietteTech_DHT9getKelvinEv+0x42>
 80846e8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80846ec:	b113      	cbz	r3, 80846f4 <_ZN14PietteTech_DHT9getKelvinEv+0x2c>
 80846ee:	4620      	mov	r0, r4
 80846f0:	f7ff ff1a 	bl	8084528 <_ZN14PietteTech_DHT7convertEv>
  return _temp + 273.15;
 80846f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80846f6:	f005 fbb9 	bl	8089e6c <__aeabi_f2d>
 80846fa:	a305      	add	r3, pc, #20	; (adr r3, 8084710 <_ZN14PietteTech_DHT9getKelvinEv+0x48>)
 80846fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084700:	f005 fa56 	bl	8089bb0 <__adddf3>
 8084704:	f005 ff02 	bl	808a50c <__aeabi_d2f>
 8084708:	e7e9      	b.n	80846de <_ZN14PietteTech_DHT9getKelvinEv+0x16>
  DHT_CHECK_STATE;
 808470a:	4803      	ldr	r0, [pc, #12]	; (8084718 <_ZN14PietteTech_DHT9getKelvinEv+0x50>)
 808470c:	e7e7      	b.n	80846de <_ZN14PietteTech_DHT9getKelvinEv+0x16>
 808470e:	bf00      	nop
 8084710:	66666666 	.word	0x66666666
 8084714:	40711266 	.word	0x40711266
 8084718:	c0a00000 	.word	0xc0a00000
 808471c:	00000000 	.word	0x00000000

08084720 <_ZN14PietteTech_DHT11getDewPointEv>:
double PietteTech_DHT::getDewPoint() {
 8084720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8084724:	4604      	mov	r4, r0
  DHT_CHECK_STATE;
 8084726:	f7ff ff57 	bl	80845d8 <_ZN14PietteTech_DHT20detachISRIfRequestedEv>
 808472a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 808472e:	2b03      	cmp	r3, #3
 8084730:	d104      	bne.n	808473c <_ZN14PietteTech_DHT11getDewPointEv+0x1c>
 8084732:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8084734:	f005 fb88 	bl	8089e48 <__aeabi_i2d>
}
 8084738:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  DHT_CHECK_STATE;
 808473c:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8084740:	2b02      	cmp	r3, #2
 8084742:	d146      	bne.n	80847d2 <_ZN14PietteTech_DHT11getDewPointEv+0xb2>
 8084744:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8084748:	b113      	cbz	r3, 8084750 <_ZN14PietteTech_DHT11getDewPointEv+0x30>
 808474a:	4620      	mov	r0, r4
 808474c:	f7ff feec 	bl	8084528 <_ZN14PietteTech_DHT7convertEv>
  double temp_ = (a * (double)_temp) / (b + (double)_temp) + log((double)_hum / 100);
 8084750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8084752:	f005 fb8b 	bl	8089e6c <__aeabi_f2d>
 8084756:	4606      	mov	r6, r0
 8084758:	6d60      	ldr	r0, [r4, #84]	; 0x54
 808475a:	460f      	mov	r7, r1
 808475c:	f005 fb86 	bl	8089e6c <__aeabi_f2d>
 8084760:	2200      	movs	r2, #0
 8084762:	4b21      	ldr	r3, [pc, #132]	; (80847e8 <_ZN14PietteTech_DHT11getDewPointEv+0xc8>)
 8084764:	f005 fd04 	bl	808a170 <__aeabi_ddiv>
 8084768:	f003 fed2 	bl	8088510 <log>
 808476c:	a31a      	add	r3, pc, #104	; (adr r3, 80847d8 <_ZN14PietteTech_DHT11getDewPointEv+0xb8>)
 808476e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084772:	4604      	mov	r4, r0
 8084774:	460d      	mov	r5, r1
 8084776:	4630      	mov	r0, r6
 8084778:	4639      	mov	r1, r7
 808477a:	f005 fbcf 	bl	8089f1c <__aeabi_dmul>
 808477e:	a318      	add	r3, pc, #96	; (adr r3, 80847e0 <_ZN14PietteTech_DHT11getDewPointEv+0xc0>)
 8084780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084784:	4680      	mov	r8, r0
 8084786:	4689      	mov	r9, r1
 8084788:	4630      	mov	r0, r6
 808478a:	4639      	mov	r1, r7
 808478c:	f005 fa10 	bl	8089bb0 <__adddf3>
 8084790:	4602      	mov	r2, r0
 8084792:	460b      	mov	r3, r1
 8084794:	4640      	mov	r0, r8
 8084796:	4649      	mov	r1, r9
 8084798:	f005 fcea 	bl	808a170 <__aeabi_ddiv>
 808479c:	4622      	mov	r2, r4
 808479e:	462b      	mov	r3, r5
 80847a0:	f005 fa06 	bl	8089bb0 <__adddf3>
  double Td = (b * temp_) / (a - temp_);
 80847a4:	a30e      	add	r3, pc, #56	; (adr r3, 80847e0 <_ZN14PietteTech_DHT11getDewPointEv+0xc0>)
 80847a6:	e9d3 2300 	ldrd	r2, r3, [r3]
  double temp_ = (a * (double)_temp) / (b + (double)_temp) + log((double)_hum / 100);
 80847aa:	4606      	mov	r6, r0
 80847ac:	460f      	mov	r7, r1
  double Td = (b * temp_) / (a - temp_);
 80847ae:	f005 fbb5 	bl	8089f1c <__aeabi_dmul>
 80847b2:	4632      	mov	r2, r6
 80847b4:	4604      	mov	r4, r0
 80847b6:	460d      	mov	r5, r1
 80847b8:	a107      	add	r1, pc, #28	; (adr r1, 80847d8 <_ZN14PietteTech_DHT11getDewPointEv+0xb8>)
 80847ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80847be:	463b      	mov	r3, r7
 80847c0:	f005 f9f4 	bl	8089bac <__aeabi_dsub>
 80847c4:	4602      	mov	r2, r0
 80847c6:	460b      	mov	r3, r1
 80847c8:	4620      	mov	r0, r4
 80847ca:	4629      	mov	r1, r5
 80847cc:	f005 fcd0 	bl	808a170 <__aeabi_ddiv>
  return Td;
 80847d0:	e7b2      	b.n	8084738 <_ZN14PietteTech_DHT11getDewPointEv+0x18>
  DHT_CHECK_STATE;
 80847d2:	2000      	movs	r0, #0
 80847d4:	4905      	ldr	r1, [pc, #20]	; (80847ec <_ZN14PietteTech_DHT11getDewPointEv+0xcc>)
 80847d6:	e7af      	b.n	8084738 <_ZN14PietteTech_DHT11getDewPointEv+0x18>
 80847d8:	4189374c 	.word	0x4189374c
 80847dc:	40314560 	.word	0x40314560
 80847e0:	66666666 	.word	0x66666666
 80847e4:	406db666 	.word	0x406db666
 80847e8:	40590000 	.word	0x40590000
 80847ec:	c0140000 	.word	0xc0140000

080847f0 <_ZN14PietteTech_DHT15getDewPointSlowEv>:
double PietteTech_DHT::getDewPointSlow() {
 80847f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80847f4:	4604      	mov	r4, r0
  DHT_CHECK_STATE;
 80847f6:	f7ff feef 	bl	80845d8 <_ZN14PietteTech_DHT20detachISRIfRequestedEv>
 80847fa:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80847fe:	2b03      	cmp	r3, #3
 8084800:	d104      	bne.n	808480c <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1c>
 8084802:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8084804:	f005 fb20 	bl	8089e48 <__aeabi_i2d>
}
 8084808:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  DHT_CHECK_STATE;
 808480c:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8084810:	2b02      	cmp	r3, #2
 8084812:	f040 80a9 	bne.w	8084968 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x178>
 8084816:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 808481a:	b113      	cbz	r3, 8084822 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x32>
 808481c:	4620      	mov	r0, r4
 808481e:	f7ff fe83 	bl	8084528 <_ZN14PietteTech_DHT7convertEv>
  double a0 = (double) 373.15 / (273.15 + (double)_temp);
 8084822:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8084824:	f005 fb22 	bl	8089e6c <__aeabi_f2d>
 8084828:	a351      	add	r3, pc, #324	; (adr r3, 8084970 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x180>)
 808482a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808482e:	f005 f9bf 	bl	8089bb0 <__adddf3>
 8084832:	4602      	mov	r2, r0
 8084834:	460b      	mov	r3, r1
 8084836:	a150      	add	r1, pc, #320	; (adr r1, 8084978 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x188>)
 8084838:	e9d1 0100 	ldrd	r0, r1, [r1]
 808483c:	f005 fc98 	bl	808a170 <__aeabi_ddiv>
  double SUM = (double)-7.90298 * (a0 - 1.0);
 8084840:	2200      	movs	r2, #0
 8084842:	4b63      	ldr	r3, [pc, #396]	; (80849d0 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e0>)
  double a0 = (double) 373.15 / (273.15 + (double)_temp);
 8084844:	4606      	mov	r6, r0
 8084846:	460f      	mov	r7, r1
  double SUM = (double)-7.90298 * (a0 - 1.0);
 8084848:	f005 f9b0 	bl	8089bac <__aeabi_dsub>
 808484c:	a34c      	add	r3, pc, #304	; (adr r3, 8084980 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x190>)
 808484e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084852:	4682      	mov	sl, r0
 8084854:	468b      	mov	fp, r1
 8084856:	f005 fb61 	bl	8089f1c <__aeabi_dmul>
 808485a:	4680      	mov	r8, r0
 808485c:	4689      	mov	r9, r1
  SUM += 5.02808 * log10(a0);
 808485e:	4630      	mov	r0, r6
 8084860:	4639      	mov	r1, r7
 8084862:	f003 fe8f 	bl	8088584 <log10>
 8084866:	a348      	add	r3, pc, #288	; (adr r3, 8084988 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x198>)
 8084868:	e9d3 2300 	ldrd	r2, r3, [r3]
 808486c:	f005 fb56 	bl	8089f1c <__aeabi_dmul>
 8084870:	4642      	mov	r2, r8
 8084872:	464b      	mov	r3, r9
 8084874:	f005 f99c 	bl	8089bb0 <__adddf3>
  SUM += -1.3816e-7 * (pow(10, (11.344*(1 - 1 / a0))) - 1);
 8084878:	4632      	mov	r2, r6
  SUM += 5.02808 * log10(a0);
 808487a:	4680      	mov	r8, r0
 808487c:	4689      	mov	r9, r1
  SUM += -1.3816e-7 * (pow(10, (11.344*(1 - 1 / a0))) - 1);
 808487e:	463b      	mov	r3, r7
 8084880:	2000      	movs	r0, #0
 8084882:	4953      	ldr	r1, [pc, #332]	; (80849d0 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e0>)
 8084884:	f005 fc74 	bl	808a170 <__aeabi_ddiv>
 8084888:	4602      	mov	r2, r0
 808488a:	460b      	mov	r3, r1
 808488c:	2000      	movs	r0, #0
 808488e:	4950      	ldr	r1, [pc, #320]	; (80849d0 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e0>)
 8084890:	f005 f98c 	bl	8089bac <__aeabi_dsub>
 8084894:	a33e      	add	r3, pc, #248	; (adr r3, 8084990 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1a0>)
 8084896:	e9d3 2300 	ldrd	r2, r3, [r3]
 808489a:	f005 fb3f 	bl	8089f1c <__aeabi_dmul>
 808489e:	4602      	mov	r2, r0
 80848a0:	460b      	mov	r3, r1
      return pow(__type(__x), __type(__y));
 80848a2:	2000      	movs	r0, #0
 80848a4:	494b      	ldr	r1, [pc, #300]	; (80849d4 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e4>)
 80848a6:	f003 fea7 	bl	80885f8 <pow>
 80848aa:	2200      	movs	r2, #0
 80848ac:	4b48      	ldr	r3, [pc, #288]	; (80849d0 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e0>)
 80848ae:	f005 f97d 	bl	8089bac <__aeabi_dsub>
 80848b2:	a339      	add	r3, pc, #228	; (adr r3, 8084998 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1a8>)
 80848b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80848b8:	f005 fb30 	bl	8089f1c <__aeabi_dmul>
 80848bc:	4642      	mov	r2, r8
 80848be:	464b      	mov	r3, r9
 80848c0:	f005 f976 	bl	8089bb0 <__adddf3>
  SUM += 8.1328e-3 * (pow(10, (-3.49149*(a0 - 1))) - 1);
 80848c4:	a336      	add	r3, pc, #216	; (adr r3, 80849a0 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1b0>)
 80848c6:	e9d3 2300 	ldrd	r2, r3, [r3]
  SUM += -1.3816e-7 * (pow(10, (11.344*(1 - 1 / a0))) - 1);
 80848ca:	4606      	mov	r6, r0
 80848cc:	460f      	mov	r7, r1
  SUM += 8.1328e-3 * (pow(10, (-3.49149*(a0 - 1))) - 1);
 80848ce:	4650      	mov	r0, sl
 80848d0:	4659      	mov	r1, fp
 80848d2:	f005 fb23 	bl	8089f1c <__aeabi_dmul>
 80848d6:	4602      	mov	r2, r0
 80848d8:	460b      	mov	r3, r1
 80848da:	2000      	movs	r0, #0
 80848dc:	493d      	ldr	r1, [pc, #244]	; (80849d4 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e4>)
 80848de:	f003 fe8b 	bl	80885f8 <pow>
 80848e2:	2200      	movs	r2, #0
 80848e4:	4b3a      	ldr	r3, [pc, #232]	; (80849d0 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e0>)
 80848e6:	f005 f961 	bl	8089bac <__aeabi_dsub>
 80848ea:	a32f      	add	r3, pc, #188	; (adr r3, 80849a8 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1b8>)
 80848ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80848f0:	f005 fb14 	bl	8089f1c <__aeabi_dmul>
 80848f4:	4632      	mov	r2, r6
 80848f6:	463b      	mov	r3, r7
 80848f8:	f005 f95a 	bl	8089bb0 <__adddf3>
  SUM += log10(1013.246);
 80848fc:	a32c      	add	r3, pc, #176	; (adr r3, 80849b0 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1c0>)
 80848fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084902:	f005 f955 	bl	8089bb0 <__adddf3>
  double VP = pow(10, SUM - 3) * (double)_hum;
 8084906:	2200      	movs	r2, #0
 8084908:	4b33      	ldr	r3, [pc, #204]	; (80849d8 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e8>)
 808490a:	f005 f94f 	bl	8089bac <__aeabi_dsub>
 808490e:	4602      	mov	r2, r0
 8084910:	460b      	mov	r3, r1
 8084912:	2000      	movs	r0, #0
 8084914:	492f      	ldr	r1, [pc, #188]	; (80849d4 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e4>)
 8084916:	f003 fe6f 	bl	80885f8 <pow>
 808491a:	4606      	mov	r6, r0
 808491c:	460f      	mov	r7, r1
 808491e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8084920:	f005 faa4 	bl	8089e6c <__aeabi_f2d>
 8084924:	4632      	mov	r2, r6
 8084926:	463b      	mov	r3, r7
 8084928:	f005 faf8 	bl	8089f1c <__aeabi_dmul>
  double T = log(VP / 0.61078); // temp var
 808492c:	a322      	add	r3, pc, #136	; (adr r3, 80849b8 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1c8>)
 808492e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084932:	f005 fc1d 	bl	808a170 <__aeabi_ddiv>
 8084936:	f003 fdeb 	bl	8088510 <log>
  return (241.88 * T) / (17.558 - T);
 808493a:	a321      	add	r3, pc, #132	; (adr r3, 80849c0 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1d0>)
 808493c:	e9d3 2300 	ldrd	r2, r3, [r3]
  double T = log(VP / 0.61078); // temp var
 8084940:	4606      	mov	r6, r0
 8084942:	460f      	mov	r7, r1
  return (241.88 * T) / (17.558 - T);
 8084944:	f005 faea 	bl	8089f1c <__aeabi_dmul>
 8084948:	4632      	mov	r2, r6
 808494a:	4604      	mov	r4, r0
 808494c:	460d      	mov	r5, r1
 808494e:	a11e      	add	r1, pc, #120	; (adr r1, 80849c8 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1d8>)
 8084950:	e9d1 0100 	ldrd	r0, r1, [r1]
 8084954:	463b      	mov	r3, r7
 8084956:	f005 f929 	bl	8089bac <__aeabi_dsub>
 808495a:	4602      	mov	r2, r0
 808495c:	460b      	mov	r3, r1
 808495e:	4620      	mov	r0, r4
 8084960:	4629      	mov	r1, r5
 8084962:	f005 fc05 	bl	808a170 <__aeabi_ddiv>
 8084966:	e74f      	b.n	8084808 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x18>
  DHT_CHECK_STATE;
 8084968:	2000      	movs	r0, #0
 808496a:	491c      	ldr	r1, [pc, #112]	; (80849dc <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1ec>)
 808496c:	e74c      	b.n	8084808 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x18>
 808496e:	bf00      	nop
 8084970:	66666666 	.word	0x66666666
 8084974:	40711266 	.word	0x40711266
 8084978:	66666666 	.word	0x66666666
 808497c:	40775266 	.word	0x40775266
 8084980:	ca03c4b1 	.word	0xca03c4b1
 8084984:	c01f9ca6 	.word	0xc01f9ca6
 8084988:	00e6afcd 	.word	0x00e6afcd
 808498c:	40141cc1 	.word	0x40141cc1
 8084990:	c49ba5e3 	.word	0xc49ba5e3
 8084994:	4026b020 	.word	0x4026b020
 8084998:	36423db1 	.word	0x36423db1
 808499c:	be828b24 	.word	0xbe828b24
 80849a0:	4f227d03 	.word	0x4f227d03
 80849a4:	c00bee92 	.word	0xc00bee92
 80849a8:	f0330363 	.word	0xf0330363
 80849ac:	3f80a7ed 	.word	0x3f80a7ed
 80849b0:	409e541b 	.word	0x409e541b
 80849b4:	40080bb4 	.word	0x40080bb4
 80849b8:	7fa1a0cf 	.word	0x7fa1a0cf
 80849bc:	3fe38b82 	.word	0x3fe38b82
 80849c0:	f5c28f5c 	.word	0xf5c28f5c
 80849c4:	406e3c28 	.word	0x406e3c28
 80849c8:	16872b02 	.word	0x16872b02
 80849cc:	40318ed9 	.word	0x40318ed9
 80849d0:	3ff00000 	.word	0x3ff00000
 80849d4:	40240000 	.word	0x40240000
 80849d8:	40080000 	.word	0x40080000
 80849dc:	c0140000 	.word	0xc0140000

080849e0 <_ZN14PietteTech_DHT14acquireAndWaitEm>:
int PietteTech_DHT::acquireAndWait(uint32_t timeout) {
 80849e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80849e2:	460d      	mov	r5, r1
 80849e4:	4604      	mov	r4, r0
  acquire();
 80849e6:	f7ff fd1f 	bl	8084428 <_ZN14PietteTech_DHT7acquireEv>
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80849ea:	f000 f891 	bl	8084b10 <HAL_Timer_Get_Milli_Seconds>
 80849ee:	4606      	mov	r6, r0
 80849f0:	4f0e      	ldr	r7, [pc, #56]	; (8084a2c <_ZN14PietteTech_DHT14acquireAndWaitEm+0x4c>)
  while (acquiring() && (timeout == 0 || ((millis() - start) < timeout))) Particle.process();
 80849f2:	4620      	mov	r0, r4
 80849f4:	f7ff fde4 	bl	80845c0 <_ZN14PietteTech_DHT9acquiringEv>
 80849f8:	b158      	cbz	r0, 8084a12 <_ZN14PietteTech_DHT14acquireAndWaitEm+0x32>
 80849fa:	b92d      	cbnz	r5, 8084a08 <_ZN14PietteTech_DHT14acquireAndWaitEm+0x28>
		return HAL_Timer_Get_Milli_Seconds();
 80849fc:	f000 f888 	bl	8084b10 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
 8084a00:	6038      	str	r0, [r7, #0]
    		spark_process();
 8084a02:	f000 fb75 	bl	80850f0 <spark_process>
    }
 8084a06:	e7f4      	b.n	80849f2 <_ZN14PietteTech_DHT14acquireAndWaitEm+0x12>
 8084a08:	f000 f882 	bl	8084b10 <HAL_Timer_Get_Milli_Seconds>
 8084a0c:	1b83      	subs	r3, r0, r6
 8084a0e:	42ab      	cmp	r3, r5
 8084a10:	d3f4      	bcc.n	80849fc <_ZN14PietteTech_DHT14acquireAndWaitEm+0x1c>
  if (acquiring())
 8084a12:	4620      	mov	r0, r4
 8084a14:	f7ff fdd4 	bl	80845c0 <_ZN14PietteTech_DHT9acquiringEv>
 8084a18:	b110      	cbz	r0, 8084a20 <_ZN14PietteTech_DHT14acquireAndWaitEm+0x40>
    _status = DHTLIB_ERROR_RESPONSE_TIMEOUT;
 8084a1a:	f06f 0302 	mvn.w	r3, #2
 8084a1e:	62e3      	str	r3, [r4, #44]	; 0x2c
  detachISRIfRequested();
 8084a20:	4620      	mov	r0, r4
 8084a22:	f7ff fdd9 	bl	80845d8 <_ZN14PietteTech_DHT20detachISRIfRequestedEv>
  return _status;
 8084a26:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
}
 8084a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8084a2a:	bf00      	nop
 8084a2c:	200009b8 	.word	0x200009b8

08084a30 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 8084a30:	b508      	push	{r3, lr}
 8084a32:	4b02      	ldr	r3, [pc, #8]	; (8084a3c <HAL_Validate_Pin_Function+0xc>)
 8084a34:	681b      	ldr	r3, [r3, #0]
 8084a36:	685b      	ldr	r3, [r3, #4]
 8084a38:	9301      	str	r3, [sp, #4]
 8084a3a:	bd08      	pop	{r3, pc}
 8084a3c:	080401b0 	.word	0x080401b0

08084a40 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8084a40:	b508      	push	{r3, lr}
 8084a42:	4b02      	ldr	r3, [pc, #8]	; (8084a4c <HAL_Pin_Mode+0xc>)
 8084a44:	681b      	ldr	r3, [r3, #0]
 8084a46:	689b      	ldr	r3, [r3, #8]
 8084a48:	9301      	str	r3, [sp, #4]
 8084a4a:	bd08      	pop	{r3, pc}
 8084a4c:	080401b0 	.word	0x080401b0

08084a50 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8084a50:	b508      	push	{r3, lr}
 8084a52:	4b02      	ldr	r3, [pc, #8]	; (8084a5c <HAL_Get_Pin_Mode+0xc>)
 8084a54:	681b      	ldr	r3, [r3, #0]
 8084a56:	68db      	ldr	r3, [r3, #12]
 8084a58:	9301      	str	r3, [sp, #4]
 8084a5a:	bd08      	pop	{r3, pc}
 8084a5c:	080401b0 	.word	0x080401b0

08084a60 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8084a60:	b508      	push	{r3, lr}
 8084a62:	4b02      	ldr	r3, [pc, #8]	; (8084a6c <HAL_GPIO_Write+0xc>)
 8084a64:	681b      	ldr	r3, [r3, #0]
 8084a66:	691b      	ldr	r3, [r3, #16]
 8084a68:	9301      	str	r3, [sp, #4]
 8084a6a:	bd08      	pop	{r3, pc}
 8084a6c:	080401b0 	.word	0x080401b0

08084a70 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 8084a70:	b508      	push	{r3, lr}
 8084a72:	4b02      	ldr	r3, [pc, #8]	; (8084a7c <HAL_GPIO_Read+0xc>)
 8084a74:	681b      	ldr	r3, [r3, #0]
 8084a76:	695b      	ldr	r3, [r3, #20]
 8084a78:	9301      	str	r3, [sp, #4]
 8084a7a:	bd08      	pop	{r3, pc}
 8084a7c:	080401b0 	.word	0x080401b0

08084a80 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 8084a80:	b508      	push	{r3, lr}
 8084a82:	4b02      	ldr	r3, [pc, #8]	; (8084a8c <HAL_Interrupts_Attach+0xc>)
 8084a84:	681b      	ldr	r3, [r3, #0]
 8084a86:	699b      	ldr	r3, [r3, #24]
 8084a88:	9301      	str	r3, [sp, #4]
 8084a8a:	bd08      	pop	{r3, pc}
 8084a8c:	080401b0 	.word	0x080401b0

08084a90 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
 8084a90:	b508      	push	{r3, lr}
 8084a92:	4b02      	ldr	r3, [pc, #8]	; (8084a9c <HAL_Interrupts_Detach+0xc>)
 8084a94:	681b      	ldr	r3, [r3, #0]
 8084a96:	69db      	ldr	r3, [r3, #28]
 8084a98:	9301      	str	r3, [sp, #4]
 8084a9a:	bd08      	pop	{r3, pc}
 8084a9c:	080401b0 	.word	0x080401b0

08084aa0 <HAL_DAC_Write>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
 8084aa0:	b508      	push	{r3, lr}
 8084aa2:	4b02      	ldr	r3, [pc, #8]	; (8084aac <HAL_DAC_Write+0xc>)
 8084aa4:	681b      	ldr	r3, [r3, #0]
 8084aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8084aa8:	9301      	str	r3, [sp, #4]
 8084aaa:	bd08      	pop	{r3, pc}
 8084aac:	080401b0 	.word	0x080401b0

08084ab0 <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 8084ab0:	b508      	push	{r3, lr}
 8084ab2:	4b02      	ldr	r3, [pc, #8]	; (8084abc <hal_adc_read+0xc>)
 8084ab4:	681b      	ldr	r3, [r3, #0]
 8084ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8084ab8:	9301      	str	r3, [sp, #4]
 8084aba:	bd08      	pop	{r3, pc}
 8084abc:	080401b0 	.word	0x080401b0

08084ac0 <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
 8084ac0:	b508      	push	{r3, lr}
 8084ac2:	4b02      	ldr	r3, [pc, #8]	; (8084acc <hal_pwm_write_ext+0xc>)
 8084ac4:	681b      	ldr	r3, [r3, #0]
 8084ac6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8084ac8:	9301      	str	r3, [sp, #4]
 8084aca:	bd08      	pop	{r3, pc}
 8084acc:	080401b0 	.word	0x080401b0

08084ad0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8084ad0:	b508      	push	{r3, lr}
 8084ad2:	4b02      	ldr	r3, [pc, #8]	; (8084adc <HAL_RNG_GetRandomNumber+0xc>)
 8084ad4:	681b      	ldr	r3, [r3, #0]
 8084ad6:	685b      	ldr	r3, [r3, #4]
 8084ad8:	9301      	str	r3, [sp, #4]
 8084ada:	bd08      	pop	{r3, pc}
 8084adc:	0804019c 	.word	0x0804019c

08084ae0 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
 8084ae0:	b508      	push	{r3, lr}
 8084ae2:	4b02      	ldr	r3, [pc, #8]	; (8084aec <HAL_Delay_Milliseconds+0xc>)
 8084ae4:	681b      	ldr	r3, [r3, #0]
 8084ae6:	689b      	ldr	r3, [r3, #8]
 8084ae8:	9301      	str	r3, [sp, #4]
 8084aea:	bd08      	pop	{r3, pc}
 8084aec:	0804019c 	.word	0x0804019c

08084af0 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 8084af0:	b508      	push	{r3, lr}
 8084af2:	4b02      	ldr	r3, [pc, #8]	; (8084afc <HAL_Delay_Microseconds+0xc>)
 8084af4:	681b      	ldr	r3, [r3, #0]
 8084af6:	68db      	ldr	r3, [r3, #12]
 8084af8:	9301      	str	r3, [sp, #4]
 8084afa:	bd08      	pop	{r3, pc}
 8084afc:	0804019c 	.word	0x0804019c

08084b00 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 8084b00:	b508      	push	{r3, lr}
 8084b02:	4b02      	ldr	r3, [pc, #8]	; (8084b0c <HAL_Timer_Get_Micro_Seconds+0xc>)
 8084b04:	681b      	ldr	r3, [r3, #0]
 8084b06:	691b      	ldr	r3, [r3, #16]
 8084b08:	9301      	str	r3, [sp, #4]
 8084b0a:	bd08      	pop	{r3, pc}
 8084b0c:	0804019c 	.word	0x0804019c

08084b10 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8084b10:	b508      	push	{r3, lr}
 8084b12:	4b02      	ldr	r3, [pc, #8]	; (8084b1c <HAL_Timer_Get_Milli_Seconds+0xc>)
 8084b14:	681b      	ldr	r3, [r3, #0]
 8084b16:	695b      	ldr	r3, [r3, #20]
 8084b18:	9301      	str	r3, [sp, #4]
 8084b1a:	bd08      	pop	{r3, pc}
 8084b1c:	0804019c 	.word	0x0804019c

08084b20 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 8084b20:	b508      	push	{r3, lr}
 8084b22:	4b02      	ldr	r3, [pc, #8]	; (8084b2c <hal_rtc_time_is_valid+0xc>)
 8084b24:	681b      	ldr	r3, [r3, #0]
 8084b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8084b28:	9301      	str	r3, [sp, #4]
 8084b2a:	bd08      	pop	{r3, pc}
 8084b2c:	0804019c 	.word	0x0804019c

08084b30 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 8084b30:	b508      	push	{r3, lr}
 8084b32:	4b02      	ldr	r3, [pc, #8]	; (8084b3c <hal_rtc_get_time+0xc>)
 8084b34:	681b      	ldr	r3, [r3, #0]
 8084b36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8084b38:	9301      	str	r3, [sp, #4]
 8084b3a:	bd08      	pop	{r3, pc}
 8084b3c:	0804019c 	.word	0x0804019c

08084b40 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
 8084b40:	b508      	push	{r3, lr}
 8084b42:	4b02      	ldr	r3, [pc, #8]	; (8084b4c <HAL_Feature_Set+0xc>)
 8084b44:	681b      	ldr	r3, [r3, #0]
 8084b46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8084b48:	9301      	str	r3, [sp, #4]
 8084b4a:	bd08      	pop	{r3, pc}
 8084b4c:	080401b8 	.word	0x080401b8

08084b50 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 8084b50:	b508      	push	{r3, lr}
 8084b52:	4b02      	ldr	r3, [pc, #8]	; (8084b5c <HAL_Core_Get_Last_Reset_Info+0xc>)
 8084b54:	681b      	ldr	r3, [r3, #0]
 8084b56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8084b58:	9301      	str	r3, [sp, #4]
 8084b5a:	bd08      	pop	{r3, pc}
 8084b5c:	080401b8 	.word	0x080401b8

08084b60 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
 8084b60:	b508      	push	{r3, lr}
 8084b62:	4b02      	ldr	r3, [pc, #8]	; (8084b6c <os_thread_create+0xc>)
 8084b64:	681b      	ldr	r3, [r3, #0]
 8084b66:	685b      	ldr	r3, [r3, #4]
 8084b68:	9301      	str	r3, [sp, #4]
 8084b6a:	bd08      	pop	{r3, pc}
 8084b6c:	080401d0 	.word	0x080401d0

08084b70 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
 8084b70:	b508      	push	{r3, lr}
 8084b72:	4b02      	ldr	r3, [pc, #8]	; (8084b7c <os_thread_is_current+0xc>)
 8084b74:	681b      	ldr	r3, [r3, #0]
 8084b76:	689b      	ldr	r3, [r3, #8]
 8084b78:	9301      	str	r3, [sp, #4]
 8084b7a:	bd08      	pop	{r3, pc}
 8084b7c:	080401d0 	.word	0x080401d0

08084b80 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
 8084b80:	b508      	push	{r3, lr}
 8084b82:	4b02      	ldr	r3, [pc, #8]	; (8084b8c <os_thread_yield+0xc>)
 8084b84:	681b      	ldr	r3, [r3, #0]
 8084b86:	68db      	ldr	r3, [r3, #12]
 8084b88:	9301      	str	r3, [sp, #4]
 8084b8a:	bd08      	pop	{r3, pc}
 8084b8c:	080401d0 	.word	0x080401d0

08084b90 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
 8084b90:	b508      	push	{r3, lr}
 8084b92:	4b02      	ldr	r3, [pc, #8]	; (8084b9c <os_thread_join+0xc>)
 8084b94:	681b      	ldr	r3, [r3, #0]
 8084b96:	691b      	ldr	r3, [r3, #16]
 8084b98:	9301      	str	r3, [sp, #4]
 8084b9a:	bd08      	pop	{r3, pc}
 8084b9c:	080401d0 	.word	0x080401d0

08084ba0 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
 8084ba0:	b508      	push	{r3, lr}
 8084ba2:	4b02      	ldr	r3, [pc, #8]	; (8084bac <os_thread_cleanup+0xc>)
 8084ba4:	681b      	ldr	r3, [r3, #0]
 8084ba6:	695b      	ldr	r3, [r3, #20]
 8084ba8:	9301      	str	r3, [sp, #4]
 8084baa:	bd08      	pop	{r3, pc}
 8084bac:	080401d0 	.word	0x080401d0

08084bb0 <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
 8084bb0:	b508      	push	{r3, lr}
 8084bb2:	4b02      	ldr	r3, [pc, #8]	; (8084bbc <os_thread_scheduling+0xc>)
 8084bb4:	681b      	ldr	r3, [r3, #0]
 8084bb6:	69db      	ldr	r3, [r3, #28]
 8084bb8:	9301      	str	r3, [sp, #4]
 8084bba:	bd08      	pop	{r3, pc}
 8084bbc:	080401d0 	.word	0x080401d0

08084bc0 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
 8084bc0:	b508      	push	{r3, lr}
 8084bc2:	4b02      	ldr	r3, [pc, #8]	; (8084bcc <os_timer_create+0xc>)
 8084bc4:	681b      	ldr	r3, [r3, #0]
 8084bc6:	6a1b      	ldr	r3, [r3, #32]
 8084bc8:	9301      	str	r3, [sp, #4]
 8084bca:	bd08      	pop	{r3, pc}
 8084bcc:	080401d0 	.word	0x080401d0

08084bd0 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
 8084bd0:	b508      	push	{r3, lr}
 8084bd2:	4b02      	ldr	r3, [pc, #8]	; (8084bdc <os_timer_destroy+0xc>)
 8084bd4:	681b      	ldr	r3, [r3, #0]
 8084bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8084bd8:	9301      	str	r3, [sp, #4]
 8084bda:	bd08      	pop	{r3, pc}
 8084bdc:	080401d0 	.word	0x080401d0

08084be0 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
 8084be0:	b508      	push	{r3, lr}
 8084be2:	4b02      	ldr	r3, [pc, #8]	; (8084bec <os_timer_get_id+0xc>)
 8084be4:	681b      	ldr	r3, [r3, #0]
 8084be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8084be8:	9301      	str	r3, [sp, #4]
 8084bea:	bd08      	pop	{r3, pc}
 8084bec:	080401d0 	.word	0x080401d0

08084bf0 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
 8084bf0:	b508      	push	{r3, lr}
 8084bf2:	4b02      	ldr	r3, [pc, #8]	; (8084bfc <os_timer_change+0xc>)
 8084bf4:	681b      	ldr	r3, [r3, #0]
 8084bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8084bf8:	9301      	str	r3, [sp, #4]
 8084bfa:	bd08      	pop	{r3, pc}
 8084bfc:	080401d0 	.word	0x080401d0

08084c00 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 8084c00:	b508      	push	{r3, lr}
 8084c02:	4b02      	ldr	r3, [pc, #8]	; (8084c0c <os_mutex_recursive_create+0xc>)
 8084c04:	681b      	ldr	r3, [r3, #0]
 8084c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8084c08:	9301      	str	r3, [sp, #4]
 8084c0a:	bd08      	pop	{r3, pc}
 8084c0c:	080401d0 	.word	0x080401d0

08084c10 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 8084c10:	b508      	push	{r3, lr}
 8084c12:	4b02      	ldr	r3, [pc, #8]	; (8084c1c <os_mutex_recursive_destroy+0xc>)
 8084c14:	681b      	ldr	r3, [r3, #0]
 8084c16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8084c18:	9301      	str	r3, [sp, #4]
 8084c1a:	bd08      	pop	{r3, pc}
 8084c1c:	080401d0 	.word	0x080401d0

08084c20 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 8084c20:	b508      	push	{r3, lr}
 8084c22:	4b02      	ldr	r3, [pc, #8]	; (8084c2c <os_mutex_recursive_lock+0xc>)
 8084c24:	681b      	ldr	r3, [r3, #0]
 8084c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8084c28:	9301      	str	r3, [sp, #4]
 8084c2a:	bd08      	pop	{r3, pc}
 8084c2c:	080401d0 	.word	0x080401d0

08084c30 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 8084c30:	b508      	push	{r3, lr}
 8084c32:	4b02      	ldr	r3, [pc, #8]	; (8084c3c <os_mutex_recursive_unlock+0xc>)
 8084c34:	681b      	ldr	r3, [r3, #0]
 8084c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8084c38:	9301      	str	r3, [sp, #4]
 8084c3a:	bd08      	pop	{r3, pc}
 8084c3c:	080401d0 	.word	0x080401d0

08084c40 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
 8084c40:	b508      	push	{r3, lr}
 8084c42:	4b02      	ldr	r3, [pc, #8]	; (8084c4c <os_thread_exit+0xc>)
 8084c44:	681b      	ldr	r3, [r3, #0]
 8084c46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8084c48:	9301      	str	r3, [sp, #4]
 8084c4a:	bd08      	pop	{r3, pc}
 8084c4c:	080401d0 	.word	0x080401d0

08084c50 <os_timer_set_id>:

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
 8084c50:	b508      	push	{r3, lr}
 8084c52:	4b02      	ldr	r3, [pc, #8]	; (8084c5c <os_timer_set_id+0xc>)
 8084c54:	681b      	ldr	r3, [r3, #0]
 8084c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8084c58:	9301      	str	r3, [sp, #4]
 8084c5a:	bd08      	pop	{r3, pc}
 8084c5c:	080401d0 	.word	0x080401d0

08084c60 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 8084c60:	b508      	push	{r3, lr}
 8084c62:	4b02      	ldr	r3, [pc, #8]	; (8084c6c <hal_usart_init+0xc>)
 8084c64:	681b      	ldr	r3, [r3, #0]
 8084c66:	699b      	ldr	r3, [r3, #24]
 8084c68:	9301      	str	r3, [sp, #4]
 8084c6a:	bd08      	pop	{r3, pc}
 8084c6c:	080401c4 	.word	0x080401c4

08084c70 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 8084c70:	b508      	push	{r3, lr}
 8084c72:	4b02      	ldr	r3, [pc, #8]	; (8084c7c <hal_usart_end+0xc>)
 8084c74:	681b      	ldr	r3, [r3, #0]
 8084c76:	6a1b      	ldr	r3, [r3, #32]
 8084c78:	9301      	str	r3, [sp, #4]
 8084c7a:	bd08      	pop	{r3, pc}
 8084c7c:	080401c4 	.word	0x080401c4

08084c80 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 8084c80:	b508      	push	{r3, lr}
 8084c82:	4b02      	ldr	r3, [pc, #8]	; (8084c8c <hal_usart_write+0xc>)
 8084c84:	681b      	ldr	r3, [r3, #0]
 8084c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8084c88:	9301      	str	r3, [sp, #4]
 8084c8a:	bd08      	pop	{r3, pc}
 8084c8c:	080401c4 	.word	0x080401c4

08084c90 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 8084c90:	b508      	push	{r3, lr}
 8084c92:	4b02      	ldr	r3, [pc, #8]	; (8084c9c <hal_usart_available+0xc>)
 8084c94:	681b      	ldr	r3, [r3, #0]
 8084c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8084c98:	9301      	str	r3, [sp, #4]
 8084c9a:	bd08      	pop	{r3, pc}
 8084c9c:	080401c4 	.word	0x080401c4

08084ca0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 8084ca0:	b508      	push	{r3, lr}
 8084ca2:	4b02      	ldr	r3, [pc, #8]	; (8084cac <hal_usart_read+0xc>)
 8084ca4:	681b      	ldr	r3, [r3, #0]
 8084ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8084ca8:	9301      	str	r3, [sp, #4]
 8084caa:	bd08      	pop	{r3, pc}
 8084cac:	080401c4 	.word	0x080401c4

08084cb0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 8084cb0:	b508      	push	{r3, lr}
 8084cb2:	4b02      	ldr	r3, [pc, #8]	; (8084cbc <hal_usart_peek+0xc>)
 8084cb4:	681b      	ldr	r3, [r3, #0]
 8084cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8084cb8:	9301      	str	r3, [sp, #4]
 8084cba:	bd08      	pop	{r3, pc}
 8084cbc:	080401c4 	.word	0x080401c4

08084cc0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 8084cc0:	b508      	push	{r3, lr}
 8084cc2:	4b02      	ldr	r3, [pc, #8]	; (8084ccc <hal_usart_flush+0xc>)
 8084cc4:	681b      	ldr	r3, [r3, #0]
 8084cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8084cc8:	9301      	str	r3, [sp, #4]
 8084cca:	bd08      	pop	{r3, pc}
 8084ccc:	080401c4 	.word	0x080401c4

08084cd0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 8084cd0:	b508      	push	{r3, lr}
 8084cd2:	4b02      	ldr	r3, [pc, #8]	; (8084cdc <hal_usart_is_enabled+0xc>)
 8084cd4:	681b      	ldr	r3, [r3, #0]
 8084cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8084cd8:	9301      	str	r3, [sp, #4]
 8084cda:	bd08      	pop	{r3, pc}
 8084cdc:	080401c4 	.word	0x080401c4

08084ce0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 8084ce0:	b508      	push	{r3, lr}
 8084ce2:	4b02      	ldr	r3, [pc, #8]	; (8084cec <hal_usart_available_data_for_write+0xc>)
 8084ce4:	681b      	ldr	r3, [r3, #0]
 8084ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8084ce8:	9301      	str	r3, [sp, #4]
 8084cea:	bd08      	pop	{r3, pc}
 8084cec:	080401c4 	.word	0x080401c4

08084cf0 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 8084cf0:	b508      	push	{r3, lr}
 8084cf2:	4b02      	ldr	r3, [pc, #8]	; (8084cfc <hal_usart_begin_config+0xc>)
 8084cf4:	681b      	ldr	r3, [r3, #0]
 8084cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8084cf8:	9301      	str	r3, [sp, #4]
 8084cfa:	bd08      	pop	{r3, pc}
 8084cfc:	080401c4 	.word	0x080401c4

08084d00 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 8084d00:	b508      	push	{r3, lr}
 8084d02:	4b02      	ldr	r3, [pc, #8]	; (8084d0c <hal_i2c_begin+0xc>)
 8084d04:	681b      	ldr	r3, [r3, #0]
 8084d06:	68db      	ldr	r3, [r3, #12]
 8084d08:	9301      	str	r3, [sp, #4]
 8084d0a:	bd08      	pop	{r3, pc}
 8084d0c:	080401ac 	.word	0x080401ac

08084d10 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 8084d10:	b508      	push	{r3, lr}
 8084d12:	4b02      	ldr	r3, [pc, #8]	; (8084d1c <hal_i2c_begin_transmission+0xc>)
 8084d14:	681b      	ldr	r3, [r3, #0]
 8084d16:	699b      	ldr	r3, [r3, #24]
 8084d18:	9301      	str	r3, [sp, #4]
 8084d1a:	bd08      	pop	{r3, pc}
 8084d1c:	080401ac 	.word	0x080401ac

08084d20 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 8084d20:	b508      	push	{r3, lr}
 8084d22:	4b02      	ldr	r3, [pc, #8]	; (8084d2c <hal_i2c_end_transmission+0xc>)
 8084d24:	681b      	ldr	r3, [r3, #0]
 8084d26:	69db      	ldr	r3, [r3, #28]
 8084d28:	9301      	str	r3, [sp, #4]
 8084d2a:	bd08      	pop	{r3, pc}
 8084d2c:	080401ac 	.word	0x080401ac

08084d30 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 8084d30:	b508      	push	{r3, lr}
 8084d32:	4b02      	ldr	r3, [pc, #8]	; (8084d3c <hal_i2c_write+0xc>)
 8084d34:	681b      	ldr	r3, [r3, #0]
 8084d36:	6a1b      	ldr	r3, [r3, #32]
 8084d38:	9301      	str	r3, [sp, #4]
 8084d3a:	bd08      	pop	{r3, pc}
 8084d3c:	080401ac 	.word	0x080401ac

08084d40 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 8084d40:	b508      	push	{r3, lr}
 8084d42:	4b02      	ldr	r3, [pc, #8]	; (8084d4c <hal_i2c_available+0xc>)
 8084d44:	681b      	ldr	r3, [r3, #0]
 8084d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8084d48:	9301      	str	r3, [sp, #4]
 8084d4a:	bd08      	pop	{r3, pc}
 8084d4c:	080401ac 	.word	0x080401ac

08084d50 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 8084d50:	b508      	push	{r3, lr}
 8084d52:	4b02      	ldr	r3, [pc, #8]	; (8084d5c <hal_i2c_read+0xc>)
 8084d54:	681b      	ldr	r3, [r3, #0]
 8084d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8084d58:	9301      	str	r3, [sp, #4]
 8084d5a:	bd08      	pop	{r3, pc}
 8084d5c:	080401ac 	.word	0x080401ac

08084d60 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 8084d60:	b508      	push	{r3, lr}
 8084d62:	4b02      	ldr	r3, [pc, #8]	; (8084d6c <hal_i2c_peek+0xc>)
 8084d64:	681b      	ldr	r3, [r3, #0]
 8084d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8084d68:	9301      	str	r3, [sp, #4]
 8084d6a:	bd08      	pop	{r3, pc}
 8084d6c:	080401ac 	.word	0x080401ac

08084d70 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 8084d70:	b508      	push	{r3, lr}
 8084d72:	4b02      	ldr	r3, [pc, #8]	; (8084d7c <hal_i2c_flush+0xc>)
 8084d74:	681b      	ldr	r3, [r3, #0]
 8084d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8084d78:	9301      	str	r3, [sp, #4]
 8084d7a:	bd08      	pop	{r3, pc}
 8084d7c:	080401ac 	.word	0x080401ac

08084d80 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 8084d80:	b508      	push	{r3, lr}
 8084d82:	4b02      	ldr	r3, [pc, #8]	; (8084d8c <hal_i2c_is_enabled+0xc>)
 8084d84:	681b      	ldr	r3, [r3, #0]
 8084d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8084d88:	9301      	str	r3, [sp, #4]
 8084d8a:	bd08      	pop	{r3, pc}
 8084d8c:	080401ac 	.word	0x080401ac

08084d90 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 8084d90:	b508      	push	{r3, lr}
 8084d92:	4b02      	ldr	r3, [pc, #8]	; (8084d9c <hal_i2c_init+0xc>)
 8084d94:	681b      	ldr	r3, [r3, #0]
 8084d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8084d98:	9301      	str	r3, [sp, #4]
 8084d9a:	bd08      	pop	{r3, pc}
 8084d9c:	080401ac 	.word	0x080401ac

08084da0 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
 8084da0:	b508      	push	{r3, lr}
 8084da2:	4b02      	ldr	r3, [pc, #8]	; (8084dac <hal_i2c_lock+0xc>)
 8084da4:	681b      	ldr	r3, [r3, #0]
 8084da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8084da8:	9301      	str	r3, [sp, #4]
 8084daa:	bd08      	pop	{r3, pc}
 8084dac:	080401ac 	.word	0x080401ac

08084db0 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
 8084db0:	b508      	push	{r3, lr}
 8084db2:	4b02      	ldr	r3, [pc, #8]	; (8084dbc <hal_i2c_unlock+0xc>)
 8084db4:	681b      	ldr	r3, [r3, #0]
 8084db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8084db8:	9301      	str	r3, [sp, #4]
 8084dba:	bd08      	pop	{r3, pc}
 8084dbc:	080401ac 	.word	0x080401ac

08084dc0 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 8084dc0:	b508      	push	{r3, lr}
 8084dc2:	4b02      	ldr	r3, [pc, #8]	; (8084dcc <hal_i2c_request_ex+0xc>)
 8084dc4:	681b      	ldr	r3, [r3, #0]
 8084dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8084dc8:	9301      	str	r3, [sp, #4]
 8084dca:	bd08      	pop	{r3, pc}
 8084dcc:	080401ac 	.word	0x080401ac

08084dd0 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 8084dd0:	b508      	push	{r3, lr}
 8084dd2:	4b02      	ldr	r3, [pc, #8]	; (8084ddc <hal_spi_begin+0xc>)
 8084dd4:	681b      	ldr	r3, [r3, #0]
 8084dd6:	681b      	ldr	r3, [r3, #0]
 8084dd8:	9301      	str	r3, [sp, #4]
 8084dda:	bd08      	pop	{r3, pc}
 8084ddc:	080401b4 	.word	0x080401b4

08084de0 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
 8084de0:	b508      	push	{r3, lr}
 8084de2:	4b02      	ldr	r3, [pc, #8]	; (8084dec <hal_spi_set_bit_order+0xc>)
 8084de4:	681b      	ldr	r3, [r3, #0]
 8084de6:	689b      	ldr	r3, [r3, #8]
 8084de8:	9301      	str	r3, [sp, #4]
 8084dea:	bd08      	pop	{r3, pc}
 8084dec:	080401b4 	.word	0x080401b4

08084df0 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
 8084df0:	b508      	push	{r3, lr}
 8084df2:	4b02      	ldr	r3, [pc, #8]	; (8084dfc <hal_spi_set_data_mode+0xc>)
 8084df4:	681b      	ldr	r3, [r3, #0]
 8084df6:	68db      	ldr	r3, [r3, #12]
 8084df8:	9301      	str	r3, [sp, #4]
 8084dfa:	bd08      	pop	{r3, pc}
 8084dfc:	080401b4 	.word	0x080401b4

08084e00 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
 8084e00:	b508      	push	{r3, lr}
 8084e02:	4b02      	ldr	r3, [pc, #8]	; (8084e0c <hal_spi_set_clock_divider+0xc>)
 8084e04:	681b      	ldr	r3, [r3, #0]
 8084e06:	691b      	ldr	r3, [r3, #16]
 8084e08:	9301      	str	r3, [sp, #4]
 8084e0a:	bd08      	pop	{r3, pc}
 8084e0c:	080401b4 	.word	0x080401b4

08084e10 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 8084e10:	b508      	push	{r3, lr}
 8084e12:	4b02      	ldr	r3, [pc, #8]	; (8084e1c <hal_spi_transfer+0xc>)
 8084e14:	681b      	ldr	r3, [r3, #0]
 8084e16:	695b      	ldr	r3, [r3, #20]
 8084e18:	9301      	str	r3, [sp, #4]
 8084e1a:	bd08      	pop	{r3, pc}
 8084e1c:	080401b4 	.word	0x080401b4

08084e20 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 8084e20:	b508      	push	{r3, lr}
 8084e22:	4b02      	ldr	r3, [pc, #8]	; (8084e2c <hal_spi_init+0xc>)
 8084e24:	681b      	ldr	r3, [r3, #0]
 8084e26:	69db      	ldr	r3, [r3, #28]
 8084e28:	9301      	str	r3, [sp, #4]
 8084e2a:	bd08      	pop	{r3, pc}
 8084e2c:	080401b4 	.word	0x080401b4

08084e30 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 8084e30:	b508      	push	{r3, lr}
 8084e32:	4b02      	ldr	r3, [pc, #8]	; (8084e3c <hal_spi_is_enabled+0xc>)
 8084e34:	681b      	ldr	r3, [r3, #0]
 8084e36:	6a1b      	ldr	r3, [r3, #32]
 8084e38:	9301      	str	r3, [sp, #4]
 8084e3a:	bd08      	pop	{r3, pc}
 8084e3c:	080401b4 	.word	0x080401b4

08084e40 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 8084e40:	b508      	push	{r3, lr}
 8084e42:	4b02      	ldr	r3, [pc, #8]	; (8084e4c <hal_spi_info+0xc>)
 8084e44:	681b      	ldr	r3, [r3, #0]
 8084e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8084e48:	9301      	str	r3, [sp, #4]
 8084e4a:	bd08      	pop	{r3, pc}
 8084e4c:	080401b4 	.word	0x080401b4

08084e50 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 8084e50:	b508      	push	{r3, lr}
 8084e52:	4b02      	ldr	r3, [pc, #8]	; (8084e5c <inet_gethostbyname+0xc>)
 8084e54:	681b      	ldr	r3, [r3, #0]
 8084e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8084e58:	9301      	str	r3, [sp, #4]
 8084e5a:	bd08      	pop	{r3, pc}
 8084e5c:	08060020 	.word	0x08060020

08084e60 <cellular_command>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
 8084e60:	b508      	push	{r3, lr}
 8084e62:	4b02      	ldr	r3, [pc, #8]	; (8084e6c <cellular_command+0xc>)
 8084e64:	681b      	ldr	r3, [r3, #0]
 8084e66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8084e68:	9301      	str	r3, [sp, #4]
 8084e6a:	bd08      	pop	{r3, pc}
 8084e6c:	08060020 	.word	0x08060020

08084e70 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8084e70:	b508      	push	{r3, lr}
 8084e72:	4b02      	ldr	r3, [pc, #8]	; (8084e7c <HAL_USB_USART_Init+0xc>)
 8084e74:	681b      	ldr	r3, [r3, #0]
 8084e76:	681b      	ldr	r3, [r3, #0]
 8084e78:	9301      	str	r3, [sp, #4]
 8084e7a:	bd08      	pop	{r3, pc}
 8084e7c:	0806001c 	.word	0x0806001c

08084e80 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 8084e80:	b508      	push	{r3, lr}
 8084e82:	4b02      	ldr	r3, [pc, #8]	; (8084e8c <HAL_USB_USART_Begin+0xc>)
 8084e84:	681b      	ldr	r3, [r3, #0]
 8084e86:	685b      	ldr	r3, [r3, #4]
 8084e88:	9301      	str	r3, [sp, #4]
 8084e8a:	bd08      	pop	{r3, pc}
 8084e8c:	0806001c 	.word	0x0806001c

08084e90 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 8084e90:	b508      	push	{r3, lr}
 8084e92:	4b02      	ldr	r3, [pc, #8]	; (8084e9c <HAL_USB_USART_End+0xc>)
 8084e94:	681b      	ldr	r3, [r3, #0]
 8084e96:	689b      	ldr	r3, [r3, #8]
 8084e98:	9301      	str	r3, [sp, #4]
 8084e9a:	bd08      	pop	{r3, pc}
 8084e9c:	0806001c 	.word	0x0806001c

08084ea0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8084ea0:	b508      	push	{r3, lr}
 8084ea2:	4b02      	ldr	r3, [pc, #8]	; (8084eac <HAL_USB_USART_Available_Data+0xc>)
 8084ea4:	681b      	ldr	r3, [r3, #0]
 8084ea6:	691b      	ldr	r3, [r3, #16]
 8084ea8:	9301      	str	r3, [sp, #4]
 8084eaa:	bd08      	pop	{r3, pc}
 8084eac:	0806001c 	.word	0x0806001c

08084eb0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8084eb0:	b508      	push	{r3, lr}
 8084eb2:	4b02      	ldr	r3, [pc, #8]	; (8084ebc <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8084eb4:	681b      	ldr	r3, [r3, #0]
 8084eb6:	695b      	ldr	r3, [r3, #20]
 8084eb8:	9301      	str	r3, [sp, #4]
 8084eba:	bd08      	pop	{r3, pc}
 8084ebc:	0806001c 	.word	0x0806001c

08084ec0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8084ec0:	b508      	push	{r3, lr}
 8084ec2:	4b02      	ldr	r3, [pc, #8]	; (8084ecc <HAL_USB_USART_Receive_Data+0xc>)
 8084ec4:	681b      	ldr	r3, [r3, #0]
 8084ec6:	699b      	ldr	r3, [r3, #24]
 8084ec8:	9301      	str	r3, [sp, #4]
 8084eca:	bd08      	pop	{r3, pc}
 8084ecc:	0806001c 	.word	0x0806001c

08084ed0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8084ed0:	b508      	push	{r3, lr}
 8084ed2:	4b02      	ldr	r3, [pc, #8]	; (8084edc <HAL_USB_USART_Send_Data+0xc>)
 8084ed4:	681b      	ldr	r3, [r3, #0]
 8084ed6:	69db      	ldr	r3, [r3, #28]
 8084ed8:	9301      	str	r3, [sp, #4]
 8084eda:	bd08      	pop	{r3, pc}
 8084edc:	0806001c 	.word	0x0806001c

08084ee0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8084ee0:	b508      	push	{r3, lr}
 8084ee2:	4b02      	ldr	r3, [pc, #8]	; (8084eec <HAL_USB_USART_Flush_Data+0xc>)
 8084ee4:	681b      	ldr	r3, [r3, #0]
 8084ee6:	6a1b      	ldr	r3, [r3, #32]
 8084ee8:	9301      	str	r3, [sp, #4]
 8084eea:	bd08      	pop	{r3, pc}
 8084eec:	0806001c 	.word	0x0806001c

08084ef0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 8084ef0:	b508      	push	{r3, lr}
 8084ef2:	4b02      	ldr	r3, [pc, #8]	; (8084efc <panic_+0xc>)
 8084ef4:	681b      	ldr	r3, [r3, #0]
 8084ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8084ef8:	9301      	str	r3, [sp, #4]
 8084efa:	bd08      	pop	{r3, pc}
 8084efc:	080201a0 	.word	0x080201a0

08084f00 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 8084f00:	b508      	push	{r3, lr}
 8084f02:	4b02      	ldr	r3, [pc, #8]	; (8084f0c <log_message_v+0xc>)
 8084f04:	681b      	ldr	r3, [r3, #0]
 8084f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8084f08:	9301      	str	r3, [sp, #4]
 8084f0a:	bd08      	pop	{r3, pc}
 8084f0c:	080201a0 	.word	0x080201a0

08084f10 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 8084f10:	b508      	push	{r3, lr}
 8084f12:	4b02      	ldr	r3, [pc, #8]	; (8084f1c <log_level_name+0xc>)
 8084f14:	681b      	ldr	r3, [r3, #0]
 8084f16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8084f18:	9301      	str	r3, [sp, #4]
 8084f1a:	bd08      	pop	{r3, pc}
 8084f1c:	080201a0 	.word	0x080201a0

08084f20 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 8084f20:	b508      	push	{r3, lr}
 8084f22:	4b02      	ldr	r3, [pc, #8]	; (8084f2c <log_set_callbacks+0xc>)
 8084f24:	681b      	ldr	r3, [r3, #0]
 8084f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8084f28:	9301      	str	r3, [sp, #4]
 8084f2a:	bd08      	pop	{r3, pc}
 8084f2c:	080201a0 	.word	0x080201a0

08084f30 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 8084f30:	b508      	push	{r3, lr}
 8084f32:	4b02      	ldr	r3, [pc, #8]	; (8084f3c <system_mode+0xc>)
 8084f34:	681b      	ldr	r3, [r3, #0]
 8084f36:	681b      	ldr	r3, [r3, #0]
 8084f38:	9301      	str	r3, [sp, #4]
 8084f3a:	bd08      	pop	{r3, pc}
 8084f3c:	080401a4 	.word	0x080401a4

08084f40 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8084f40:	b508      	push	{r3, lr}
 8084f42:	4b02      	ldr	r3, [pc, #8]	; (8084f4c <set_system_mode+0xc>)
 8084f44:	681b      	ldr	r3, [r3, #0]
 8084f46:	685b      	ldr	r3, [r3, #4]
 8084f48:	9301      	str	r3, [sp, #4]
 8084f4a:	bd08      	pop	{r3, pc}
 8084f4c:	080401a4 	.word	0x080401a4

08084f50 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 8084f50:	b508      	push	{r3, lr}
 8084f52:	4b02      	ldr	r3, [pc, #8]	; (8084f5c <system_delay_ms+0xc>)
 8084f54:	681b      	ldr	r3, [r3, #0]
 8084f56:	695b      	ldr	r3, [r3, #20]
 8084f58:	9301      	str	r3, [sp, #4]
 8084f5a:	bd08      	pop	{r3, pc}
 8084f5c:	080401a4 	.word	0x080401a4

08084f60 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
 8084f60:	b508      	push	{r3, lr}
 8084f62:	4b02      	ldr	r3, [pc, #8]	; (8084f6c <system_sleep+0xc>)
 8084f64:	681b      	ldr	r3, [r3, #0]
 8084f66:	699b      	ldr	r3, [r3, #24]
 8084f68:	9301      	str	r3, [sp, #4]
 8084f6a:	bd08      	pop	{r3, pc}
 8084f6c:	080401a4 	.word	0x080401a4

08084f70 <system_subscribe_event>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
 8084f70:	b508      	push	{r3, lr}
 8084f72:	4b02      	ldr	r3, [pc, #8]	; (8084f7c <system_subscribe_event+0xc>)
 8084f74:	681b      	ldr	r3, [r3, #0]
 8084f76:	6a1b      	ldr	r3, [r3, #32]
 8084f78:	9301      	str	r3, [sp, #4]
 8084f7a:	bd08      	pop	{r3, pc}
 8084f7c:	080401a4 	.word	0x080401a4

08084f80 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 8084f80:	b508      	push	{r3, lr}
 8084f82:	4b02      	ldr	r3, [pc, #8]	; (8084f8c <system_thread_set_state+0xc>)
 8084f84:	681b      	ldr	r3, [r3, #0]
 8084f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8084f88:	9301      	str	r3, [sp, #4]
 8084f8a:	bd08      	pop	{r3, pc}
 8084f8c:	080401a4 	.word	0x080401a4

08084f90 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 8084f90:	b508      	push	{r3, lr}
 8084f92:	4b02      	ldr	r3, [pc, #8]	; (8084f9c <application_thread_current+0xc>)
 8084f94:	681b      	ldr	r3, [r3, #0]
 8084f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8084f98:	9301      	str	r3, [sp, #4]
 8084f9a:	bd08      	pop	{r3, pc}
 8084f9c:	080401a4 	.word	0x080401a4

08084fa0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 8084fa0:	b508      	push	{r3, lr}
 8084fa2:	4b02      	ldr	r3, [pc, #8]	; (8084fac <application_thread_invoke+0xc>)
 8084fa4:	681b      	ldr	r3, [r3, #0]
 8084fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8084fa8:	9301      	str	r3, [sp, #4]
 8084faa:	bd08      	pop	{r3, pc}
 8084fac:	080401a4 	.word	0x080401a4

08084fb0 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 8084fb0:	b508      	push	{r3, lr}
 8084fb2:	4b02      	ldr	r3, [pc, #8]	; (8084fbc <system_thread_get_state+0xc>)
 8084fb4:	681b      	ldr	r3, [r3, #0]
 8084fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8084fb8:	9301      	str	r3, [sp, #4]
 8084fba:	bd08      	pop	{r3, pc}
 8084fbc:	080401a4 	.word	0x080401a4

08084fc0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 8084fc0:	b508      	push	{r3, lr}
 8084fc2:	4b03      	ldr	r3, [pc, #12]	; (8084fd0 <system_ctrl_set_app_request_handler+0x10>)
 8084fc4:	681b      	ldr	r3, [r3, #0]
 8084fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8084fca:	9301      	str	r3, [sp, #4]
 8084fcc:	bd08      	pop	{r3, pc}
 8084fce:	0000      	.short	0x0000
 8084fd0:	080401a4 	.word	0x080401a4

08084fd4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8084fd4:	b508      	push	{r3, lr}
 8084fd6:	4b03      	ldr	r3, [pc, #12]	; (8084fe4 <system_ctrl_set_result+0x10>)
 8084fd8:	681b      	ldr	r3, [r3, #0]
 8084fda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8084fde:	9301      	str	r3, [sp, #4]
 8084fe0:	bd08      	pop	{r3, pc}
 8084fe2:	0000      	.short	0x0000
 8084fe4:	080401a4 	.word	0x080401a4

08084fe8 <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
 8084fe8:	b508      	push	{r3, lr}
 8084fea:	4b03      	ldr	r3, [pc, #12]	; (8084ff8 <system_sleep_pins+0x10>)
 8084fec:	681b      	ldr	r3, [r3, #0]
 8084fee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8084ff2:	9301      	str	r3, [sp, #4]
 8084ff4:	bd08      	pop	{r3, pc}
 8084ff6:	0000      	.short	0x0000
 8084ff8:	080401a4 	.word	0x080401a4

08084ffc <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
 8084ffc:	b508      	push	{r3, lr}
 8084ffe:	4b03      	ldr	r3, [pc, #12]	; (808500c <system_reset+0x10>)
 8085000:	681b      	ldr	r3, [r3, #0]
 8085002:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8085006:	9301      	str	r3, [sp, #4]
 8085008:	bd08      	pop	{r3, pc}
 808500a:	0000      	.short	0x0000
 808500c:	080401a4 	.word	0x080401a4

08085010 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 8085010:	b508      	push	{r3, lr}
 8085012:	4b02      	ldr	r3, [pc, #8]	; (808501c <network_connect+0xc>)
 8085014:	681b      	ldr	r3, [r3, #0]
 8085016:	685b      	ldr	r3, [r3, #4]
 8085018:	9301      	str	r3, [sp, #4]
 808501a:	bd08      	pop	{r3, pc}
 808501c:	080401c8 	.word	0x080401c8

08085020 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 8085020:	b508      	push	{r3, lr}
 8085022:	4b02      	ldr	r3, [pc, #8]	; (808502c <network_connecting+0xc>)
 8085024:	681b      	ldr	r3, [r3, #0]
 8085026:	689b      	ldr	r3, [r3, #8]
 8085028:	9301      	str	r3, [sp, #4]
 808502a:	bd08      	pop	{r3, pc}
 808502c:	080401c8 	.word	0x080401c8

08085030 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 8085030:	b508      	push	{r3, lr}
 8085032:	4b02      	ldr	r3, [pc, #8]	; (808503c <network_disconnect+0xc>)
 8085034:	681b      	ldr	r3, [r3, #0]
 8085036:	68db      	ldr	r3, [r3, #12]
 8085038:	9301      	str	r3, [sp, #4]
 808503a:	bd08      	pop	{r3, pc}
 808503c:	080401c8 	.word	0x080401c8

08085040 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8085040:	b508      	push	{r3, lr}
 8085042:	4b02      	ldr	r3, [pc, #8]	; (808504c <network_ready+0xc>)
 8085044:	681b      	ldr	r3, [r3, #0]
 8085046:	691b      	ldr	r3, [r3, #16]
 8085048:	9301      	str	r3, [sp, #4]
 808504a:	bd08      	pop	{r3, pc}
 808504c:	080401c8 	.word	0x080401c8

08085050 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 8085050:	b508      	push	{r3, lr}
 8085052:	4b02      	ldr	r3, [pc, #8]	; (808505c <network_on+0xc>)
 8085054:	681b      	ldr	r3, [r3, #0]
 8085056:	695b      	ldr	r3, [r3, #20]
 8085058:	9301      	str	r3, [sp, #4]
 808505a:	bd08      	pop	{r3, pc}
 808505c:	080401c8 	.word	0x080401c8

08085060 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 8085060:	b508      	push	{r3, lr}
 8085062:	4b02      	ldr	r3, [pc, #8]	; (808506c <network_off+0xc>)
 8085064:	681b      	ldr	r3, [r3, #0]
 8085066:	699b      	ldr	r3, [r3, #24]
 8085068:	9301      	str	r3, [sp, #4]
 808506a:	bd08      	pop	{r3, pc}
 808506c:	080401c8 	.word	0x080401c8

08085070 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 8085070:	b508      	push	{r3, lr}
 8085072:	4b02      	ldr	r3, [pc, #8]	; (808507c <network_listen+0xc>)
 8085074:	681b      	ldr	r3, [r3, #0]
 8085076:	69db      	ldr	r3, [r3, #28]
 8085078:	9301      	str	r3, [sp, #4]
 808507a:	bd08      	pop	{r3, pc}
 808507c:	080401c8 	.word	0x080401c8

08085080 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 8085080:	b508      	push	{r3, lr}
 8085082:	4b02      	ldr	r3, [pc, #8]	; (808508c <network_listening+0xc>)
 8085084:	681b      	ldr	r3, [r3, #0]
 8085086:	6a1b      	ldr	r3, [r3, #32]
 8085088:	9301      	str	r3, [sp, #4]
 808508a:	bd08      	pop	{r3, pc}
 808508c:	080401c8 	.word	0x080401c8

08085090 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 8085090:	b508      	push	{r3, lr}
 8085092:	4b02      	ldr	r3, [pc, #8]	; (808509c <network_set_listen_timeout+0xc>)
 8085094:	681b      	ldr	r3, [r3, #0]
 8085096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8085098:	9301      	str	r3, [sp, #4]
 808509a:	bd08      	pop	{r3, pc}
 808509c:	080401c8 	.word	0x080401c8

080850a0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80850a0:	b508      	push	{r3, lr}
 80850a2:	4b02      	ldr	r3, [pc, #8]	; (80850ac <network_get_listen_timeout+0xc>)
 80850a4:	681b      	ldr	r3, [r3, #0]
 80850a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80850a8:	9301      	str	r3, [sp, #4]
 80850aa:	bd08      	pop	{r3, pc}
 80850ac:	080401c8 	.word	0x080401c8

080850b0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80850b0:	b508      	push	{r3, lr}
 80850b2:	4b02      	ldr	r3, [pc, #8]	; (80850bc <network_is_on+0xc>)
 80850b4:	681b      	ldr	r3, [r3, #0]
 80850b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80850b8:	9301      	str	r3, [sp, #4]
 80850ba:	bd08      	pop	{r3, pc}
 80850bc:	080401c8 	.word	0x080401c8

080850c0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80850c0:	b508      	push	{r3, lr}
 80850c2:	4b02      	ldr	r3, [pc, #8]	; (80850cc <network_is_off+0xc>)
 80850c4:	681b      	ldr	r3, [r3, #0]
 80850c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80850c8:	9301      	str	r3, [sp, #4]
 80850ca:	bd08      	pop	{r3, pc}
 80850cc:	080401c8 	.word	0x080401c8

080850d0 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80850d0:	b508      	push	{r3, lr}
 80850d2:	4b02      	ldr	r3, [pc, #8]	; (80850dc <spark_variable+0xc>)
 80850d4:	681b      	ldr	r3, [r3, #0]
 80850d6:	681b      	ldr	r3, [r3, #0]
 80850d8:	9301      	str	r3, [sp, #4]
 80850da:	bd08      	pop	{r3, pc}
 80850dc:	080401cc 	.word	0x080401cc

080850e0 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80850e0:	b508      	push	{r3, lr}
 80850e2:	4b02      	ldr	r3, [pc, #8]	; (80850ec <spark_function+0xc>)
 80850e4:	681b      	ldr	r3, [r3, #0]
 80850e6:	685b      	ldr	r3, [r3, #4]
 80850e8:	9301      	str	r3, [sp, #4]
 80850ea:	bd08      	pop	{r3, pc}
 80850ec:	080401cc 	.word	0x080401cc

080850f0 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80850f0:	b508      	push	{r3, lr}
 80850f2:	4b02      	ldr	r3, [pc, #8]	; (80850fc <spark_process+0xc>)
 80850f4:	681b      	ldr	r3, [r3, #0]
 80850f6:	689b      	ldr	r3, [r3, #8]
 80850f8:	9301      	str	r3, [sp, #4]
 80850fa:	bd08      	pop	{r3, pc}
 80850fc:	080401cc 	.word	0x080401cc

08085100 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 8085100:	b508      	push	{r3, lr}
 8085102:	4b02      	ldr	r3, [pc, #8]	; (808510c <spark_cloud_flag_connect+0xc>)
 8085104:	681b      	ldr	r3, [r3, #0]
 8085106:	68db      	ldr	r3, [r3, #12]
 8085108:	9301      	str	r3, [sp, #4]
 808510a:	bd08      	pop	{r3, pc}
 808510c:	080401cc 	.word	0x080401cc

08085110 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 8085110:	b508      	push	{r3, lr}
 8085112:	4b02      	ldr	r3, [pc, #8]	; (808511c <spark_cloud_flag_connected+0xc>)
 8085114:	681b      	ldr	r3, [r3, #0]
 8085116:	695b      	ldr	r3, [r3, #20]
 8085118:	9301      	str	r3, [sp, #4]
 808511a:	bd08      	pop	{r3, pc}
 808511c:	080401cc 	.word	0x080401cc

08085120 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 8085120:	b508      	push	{r3, lr}
 8085122:	4b02      	ldr	r3, [pc, #8]	; (808512c <spark_deviceID+0xc>)
 8085124:	681b      	ldr	r3, [r3, #0]
 8085126:	69db      	ldr	r3, [r3, #28]
 8085128:	9301      	str	r3, [sp, #4]
 808512a:	bd08      	pop	{r3, pc}
 808512c:	080401cc 	.word	0x080401cc

08085130 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 8085130:	b508      	push	{r3, lr}
 8085132:	4b02      	ldr	r3, [pc, #8]	; (808513c <spark_send_event+0xc>)
 8085134:	681b      	ldr	r3, [r3, #0]
 8085136:	6a1b      	ldr	r3, [r3, #32]
 8085138:	9301      	str	r3, [sp, #4]
 808513a:	bd08      	pop	{r3, pc}
 808513c:	080401cc 	.word	0x080401cc

08085140 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 8085140:	b508      	push	{r3, lr}
 8085142:	4b02      	ldr	r3, [pc, #8]	; (808514c <spark_subscribe+0xc>)
 8085144:	681b      	ldr	r3, [r3, #0]
 8085146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8085148:	9301      	str	r3, [sp, #4]
 808514a:	bd08      	pop	{r3, pc}
 808514c:	080401cc 	.word	0x080401cc

08085150 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 8085150:	b508      	push	{r3, lr}
 8085152:	4b02      	ldr	r3, [pc, #8]	; (808515c <spark_sync_time_pending+0xc>)
 8085154:	681b      	ldr	r3, [r3, #0]
 8085156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8085158:	9301      	str	r3, [sp, #4]
 808515a:	bd08      	pop	{r3, pc}
 808515c:	080401cc 	.word	0x080401cc

08085160 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8085160:	b508      	push	{r3, lr}
 8085162:	4b02      	ldr	r3, [pc, #8]	; (808516c <spark_set_random_seed_from_cloud_handler+0xc>)
 8085164:	681b      	ldr	r3, [r3, #0]
 8085166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8085168:	9301      	str	r3, [sp, #4]
 808516a:	bd08      	pop	{r3, pc}
 808516c:	080401cc 	.word	0x080401cc

08085170 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
 8085170:	b508      	push	{r3, lr}
 8085172:	4b02      	ldr	r3, [pc, #8]	; (808517c <spark_cloud_disconnect+0xc>)
 8085174:	681b      	ldr	r3, [r3, #0]
 8085176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8085178:	9301      	str	r3, [sp, #4]
 808517a:	bd08      	pop	{r3, pc}
 808517c:	080401cc 	.word	0x080401cc

08085180 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8085180:	b508      	push	{r3, lr}
 8085182:	4b02      	ldr	r3, [pc, #8]	; (808518c <malloc+0xc>)
 8085184:	681b      	ldr	r3, [r3, #0]
 8085186:	681b      	ldr	r3, [r3, #0]
 8085188:	9301      	str	r3, [sp, #4]
 808518a:	bd08      	pop	{r3, pc}
 808518c:	080401a0 	.word	0x080401a0

08085190 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8085190:	b508      	push	{r3, lr}
 8085192:	4b02      	ldr	r3, [pc, #8]	; (808519c <free+0xc>)
 8085194:	681b      	ldr	r3, [r3, #0]
 8085196:	685b      	ldr	r3, [r3, #4]
 8085198:	9301      	str	r3, [sp, #4]
 808519a:	bd08      	pop	{r3, pc}
 808519c:	080401a0 	.word	0x080401a0

080851a0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80851a0:	b508      	push	{r3, lr}
 80851a2:	4b02      	ldr	r3, [pc, #8]	; (80851ac <realloc+0xc>)
 80851a4:	681b      	ldr	r3, [r3, #0]
 80851a6:	689b      	ldr	r3, [r3, #8]
 80851a8:	9301      	str	r3, [sp, #4]
 80851aa:	bd08      	pop	{r3, pc}
 80851ac:	080401a0 	.word	0x080401a0

080851b0 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 80851b0:	b508      	push	{r3, lr}
 80851b2:	4b02      	ldr	r3, [pc, #8]	; (80851bc <siprintf+0xc>)
 80851b4:	681b      	ldr	r3, [r3, #0]
 80851b6:	691b      	ldr	r3, [r3, #16]
 80851b8:	9301      	str	r3, [sp, #4]
 80851ba:	bd08      	pop	{r3, pc}
 80851bc:	080401a0 	.word	0x080401a0

080851c0 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80851c0:	b508      	push	{r3, lr}
 80851c2:	4b02      	ldr	r3, [pc, #8]	; (80851cc <snprintf+0xc>)
 80851c4:	681b      	ldr	r3, [r3, #0]
 80851c6:	69db      	ldr	r3, [r3, #28]
 80851c8:	9301      	str	r3, [sp, #4]
 80851ca:	bd08      	pop	{r3, pc}
 80851cc:	080401a0 	.word	0x080401a0

080851d0 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80851d0:	b508      	push	{r3, lr}
 80851d2:	4b02      	ldr	r3, [pc, #8]	; (80851dc <vsnprintf+0xc>)
 80851d4:	681b      	ldr	r3, [r3, #0]
 80851d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80851d8:	9301      	str	r3, [sp, #4]
 80851da:	bd08      	pop	{r3, pc}
 80851dc:	080401a0 	.word	0x080401a0

080851e0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80851e0:	b508      	push	{r3, lr}
 80851e2:	4b02      	ldr	r3, [pc, #8]	; (80851ec <abort+0xc>)
 80851e4:	681b      	ldr	r3, [r3, #0]
 80851e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80851e8:	9301      	str	r3, [sp, #4]
 80851ea:	bd08      	pop	{r3, pc}
 80851ec:	080401a0 	.word	0x080401a0

080851f0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80851f0:	b508      	push	{r3, lr}
 80851f2:	4b02      	ldr	r3, [pc, #8]	; (80851fc <_malloc_r+0xc>)
 80851f4:	681b      	ldr	r3, [r3, #0]
 80851f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80851f8:	9301      	str	r3, [sp, #4]
 80851fa:	bd08      	pop	{r3, pc}
 80851fc:	080401a0 	.word	0x080401a0

08085200 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 8085200:	b508      	push	{r3, lr}
 8085202:	4b02      	ldr	r3, [pc, #8]	; (808520c <__errno+0xc>)
 8085204:	681b      	ldr	r3, [r3, #0]
 8085206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8085208:	9301      	str	r3, [sp, #4]
 808520a:	bd08      	pop	{r3, pc}
 808520c:	080401a0 	.word	0x080401a0

08085210 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 8085210:	b508      	push	{r3, lr}
 8085212:	4b02      	ldr	r3, [pc, #8]	; (808521c <__assert_func+0xc>)
 8085214:	681b      	ldr	r3, [r3, #0]
 8085216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8085218:	9301      	str	r3, [sp, #4]
 808521a:	bd08      	pop	{r3, pc}
 808521c:	080401a0 	.word	0x080401a0

08085220 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 8085220:	b508      	push	{r3, lr}
 8085222:	4b02      	ldr	r3, [pc, #8]	; (808522c <newlib_impure_ptr_callback+0xc>)
 8085224:	681b      	ldr	r3, [r3, #0]
 8085226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8085228:	9301      	str	r3, [sp, #4]
 808522a:	bd08      	pop	{r3, pc}
 808522c:	080401a0 	.word	0x080401a0

08085230 <_ZN4PMIC4lockEv.constprop.0.isra.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
 8085230:	b508      	push	{r3, lr}
            return &Wire3;
 8085232:	f003 f937 	bl	80884a4 <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->lock();
}
 8085236:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
 808523a:	f002 bd67 	b.w	8087d0c <_ZN7TwoWire4lockEv>

0808523e <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
 808523e:	b510      	push	{r4, lr}
 8085240:	4604      	mov	r4, r0
    lock_(_lock)
 8085242:	7001      	strb	r1, [r0, #0]
    if (lock_) {
 8085244:	b109      	cbz	r1, 808524a <_ZN4PMICC1Eb+0xc>
        lock();
 8085246:	f7ff fff3 	bl	8085230 <_ZN4PMIC4lockEv.constprop.0.isra.0>
}
 808524a:	4620      	mov	r0, r4
 808524c:	bd10      	pop	{r4, pc}

0808524e <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
 808524e:	b508      	push	{r3, lr}
            return &Wire3;
 8085250:	f003 f928 	bl	80884a4 <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->unlock();
}
 8085254:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
 8085258:	f002 bd61 	b.w	8087d1e <_ZN7TwoWire6unlockEv>

0808525c <_ZN4PMICD1Ev>:
PMIC::~PMIC()
 808525c:	b510      	push	{r4, lr}
    if (lock_) {
 808525e:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
 8085260:	4604      	mov	r4, r0
    if (lock_) {
 8085262:	b10b      	cbz	r3, 8085268 <_ZN4PMICD1Ev+0xc>
        unlock();
 8085264:	f7ff fff3 	bl	808524e <_ZN4PMIC6unlockEv>
}
 8085268:	4620      	mov	r0, r4
 808526a:	bd10      	pop	{r4, pc}

0808526c <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 808526c:	b510      	push	{r4, lr}
 808526e:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 8085270:	6800      	ldr	r0, [r0, #0]
 8085272:	f7ff ffec 	bl	808524e <_ZN4PMIC6unlockEv>
 8085276:	4620      	mov	r0, r4
 8085278:	bd10      	pop	{r4, pc}

0808527a <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
 808527a:	b530      	push	{r4, r5, lr}
 808527c:	b087      	sub	sp, #28
 808527e:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8085280:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8085282:	f7ff ffd5 	bl	8085230 <_ZN4PMIC4lockEv.constprop.0.isra.0>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8085286:	226b      	movs	r2, #107	; 0x6b
 8085288:	2300      	movs	r3, #0
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
 808528a:	2401      	movs	r4, #1
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 808528c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
 8085290:	230a      	movs	r3, #10
 8085292:	e9cd 4304 	strd	r4, r3, [sp, #16]
            return &Wire3;
 8085296:	f003 f905 	bl	80884a4 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->beginTransmission(config);
 808529a:	a902      	add	r1, sp, #8
 808529c:	f002 fd17 	bl	8087cce <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire3;
 80852a0:	f003 f900 	bl	80884a4 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->write(startAddress);
 80852a4:	6803      	ldr	r3, [r0, #0]
 80852a6:	4629      	mov	r1, r5
 80852a8:	689b      	ldr	r3, [r3, #8]
 80852aa:	4798      	blx	r3
            return &Wire3;
 80852ac:	f003 f8fa 	bl	80884a4 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->endTransmission(true);
 80852b0:	4621      	mov	r1, r4
 80852b2:	f002 fd24 	bl	8087cfe <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
 80852b6:	9403      	str	r4, [sp, #12]
            return &Wire3;
 80852b8:	f003 f8f4 	bl	80884a4 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->requestFrom(config);
 80852bc:	a902      	add	r1, sp, #8
 80852be:	f002 fcd3 	bl	8087c68 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire3;
 80852c2:	f003 f8ef 	bl	80884a4 <_Z20__fetch_global_Wire3v>
    DATA = pmicWireInstance()->read();
 80852c6:	6803      	ldr	r3, [r0, #0]
 80852c8:	695b      	ldr	r3, [r3, #20]
 80852ca:	4798      	blx	r3
 80852cc:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
 80852ce:	a801      	add	r0, sp, #4
 80852d0:	f7ff ffcc 	bl	808526c <_ZNSt10lock_guardI4PMICED1Ev>
}
 80852d4:	b2e0      	uxtb	r0, r4
 80852d6:	b007      	add	sp, #28
 80852d8:	bd30      	pop	{r4, r5, pc}

080852da <_ZN4PMIC11isPowerGoodEv>:
    DATA = readRegister(SYSTEM_STATUS_REGISTER);
 80852da:	2108      	movs	r1, #8
bool PMIC::isPowerGood(void) {
 80852dc:	b508      	push	{r3, lr}
    DATA = readRegister(SYSTEM_STATUS_REGISTER);
 80852de:	f7ff ffcc 	bl	808527a <_ZN4PMIC12readRegisterEh>
}
 80852e2:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80852e6:	bd08      	pop	{r3, pc}

080852e8 <_ZN4PMIC15getSystemStatusEv>:
    DATA = readRegister(SYSTEM_STATUS_REGISTER);
 80852e8:	2108      	movs	r1, #8
 80852ea:	f7ff bfc6 	b.w	808527a <_ZN4PMIC12readRegisterEh>

080852ee <_ZN14RecursiveMutex6unlockEv.isra.0>:
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 80852ee:	f7ff bc9f 	b.w	8084c30 <os_mutex_recursive_unlock>

080852f2 <_ZN14RecursiveMutex4lockEv.isra.0>:
    void lock() { os_mutex_recursive_lock(handle_); }
 80852f2:	f7ff bc95 	b.w	8084c20 <os_mutex_recursive_lock>

080852f6 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80852f6:	b570      	push	{r4, r5, r6, lr}
    RecursiveMutex() : handle_(nullptr)
 80852f8:	2600      	movs	r6, #0
 80852fa:	4604      	mov	r4, r0
 80852fc:	460d      	mov	r5, r1
 80852fe:	f840 6f08 	str.w	r6, [r0, #8]!
        os_mutex_recursive_create(&handle_);
 8085302:	f7ff fc7d 	bl	8084c00 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 8085306:	4628      	mov	r0, r5
    _spi = spi;
 8085308:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 808530a:	f7ff fd89 	bl	8084e20 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 808530e:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 8085310:	6066      	str	r6, [r4, #4]
}
 8085312:	bd70      	pop	{r4, r5, r6, pc}

08085314 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 8085314:	b510      	push	{r4, lr}
 8085316:	4604      	mov	r4, r0
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 8085318:	6880      	ldr	r0, [r0, #8]
 808531a:	f7ff ffea 	bl	80852f2 <_ZN14RecursiveMutex4lockEv.isra.0>
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
 808531e:	7820      	ldrb	r0, [r4, #0]
 8085320:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8085324:	f7ff fd54 	bl	8084dd0 <hal_spi_begin>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 8085328:	68a0      	ldr	r0, [r4, #8]
        unlock();
    }
}
 808532a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808532e:	f7ff bfde 	b.w	80852ee <_ZN14RecursiveMutex6unlockEv.isra.0>

08085332 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
 8085332:	b538      	push	{r3, r4, r5, lr}
 8085334:	4604      	mov	r4, r0
 8085336:	460d      	mov	r5, r1
    _mutex.lock();
 8085338:	6880      	ldr	r0, [r0, #8]
 808533a:	f7ff ffda 	bl	80852f2 <_ZN14RecursiveMutex4lockEv.isra.0>
    if (!lock())
    {
        hal_spi_set_bit_order(_spi, bitOrder);
 808533e:	7820      	ldrb	r0, [r4, #0]
 8085340:	4629      	mov	r1, r5
 8085342:	f7ff fd4d 	bl	8084de0 <hal_spi_set_bit_order>
    _mutex.unlock();
 8085346:	68a0      	ldr	r0, [r4, #8]
        unlock();
    }
}
 8085348:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 808534c:	f7ff bfcf 	b.w	80852ee <_ZN14RecursiveMutex6unlockEv.isra.0>

08085350 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
 8085350:	b538      	push	{r3, r4, r5, lr}
 8085352:	4604      	mov	r4, r0
 8085354:	460d      	mov	r5, r1
    _mutex.lock();
 8085356:	6880      	ldr	r0, [r0, #8]
 8085358:	f7ff ffcb 	bl	80852f2 <_ZN14RecursiveMutex4lockEv.isra.0>
    if (!lock())
    {
        hal_spi_set_data_mode(_spi, mode);
 808535c:	7820      	ldrb	r0, [r4, #0]
 808535e:	4629      	mov	r1, r5
 8085360:	f7ff fd46 	bl	8084df0 <hal_spi_set_data_mode>
    _mutex.unlock();
 8085364:	68a0      	ldr	r0, [r4, #8]
        unlock();
    }
}
 8085366:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 808536a:	f7ff bfc0 	b.w	80852ee <_ZN14RecursiveMutex6unlockEv.isra.0>
	...

08085370 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 8085370:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 8085372:	2400      	movs	r4, #0
 8085374:	0840      	lsrs	r0, r0, #1
 8085376:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 8085378:	6818      	ldr	r0, [r3, #0]
 808537a:	b2e5      	uxtb	r5, r4
 808537c:	4288      	cmp	r0, r1
 808537e:	d906      	bls.n	808538e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 8085380:	3401      	adds	r4, #1
 8085382:	2c08      	cmp	r4, #8
 8085384:	d002      	beq.n	808538c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 8085386:	0840      	lsrs	r0, r0, #1
 8085388:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 808538a:	e7f5      	b.n	8085378 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 808538c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 808538e:	4b02      	ldr	r3, [pc, #8]	; (8085398 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 8085390:	5d5b      	ldrb	r3, [r3, r5]
 8085392:	7013      	strb	r3, [r2, #0]
}
 8085394:	bd30      	pop	{r4, r5, pc}
 8085396:	bf00      	nop
 8085398:	0808bb8f 	.word	0x0808bb8f

0808539c <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 808539c:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned clock = 0;
 808539e:	2500      	movs	r5, #0
{
 80853a0:	4604      	mov	r4, r0
 80853a2:	b089      	sub	sp, #36	; 0x24
    _mutex.lock();
 80853a4:	6880      	ldr	r0, [r0, #8]

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;
 80853a6:	fb02 f601 	mul.w	r6, r2, r1
    unsigned clock = 0;
 80853aa:	9502      	str	r5, [sp, #8]
 80853ac:	f7ff ffa1 	bl	80852f2 <_ZN14RecursiveMutex4lockEv.isra.0>
    memset(info, 0, sizeof(hal_spi_info_t));
 80853b0:	4629      	mov	r1, r5
 80853b2:	2214      	movs	r2, #20
 80853b4:	a803      	add	r0, sp, #12

    if (!lock())
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
 80853b6:	7827      	ldrb	r7, [r4, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
 80853b8:	f005 fc6c 	bl	808ac94 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 80853bc:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 80853be:	462a      	mov	r2, r5
 80853c0:	4638      	mov	r0, r7
 80853c2:	a903      	add	r1, sp, #12
    info->version = HAL_SPI_INFO_VERSION_1;
 80853c4:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
 80853c8:	f7ff fd3a 	bl	8084e40 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 80853cc:	ab02      	add	r3, sp, #8
 80853ce:	f10d 0207 	add.w	r2, sp, #7
 80853d2:	4631      	mov	r1, r6
 80853d4:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
 80853d6:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 80853da:	f7ff ffc9 	bl	8085370 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
 80853de:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80853e2:	7820      	ldrb	r0, [r4, #0]
 80853e4:	f7ff fd0c 	bl	8084e00 <hal_spi_set_clock_divider>
    _mutex.unlock();
 80853e8:	68a0      	ldr	r0, [r4, #8]
 80853ea:	f7ff ff80 	bl	80852ee <_ZN14RecursiveMutex6unlockEv.isra.0>
        unlock();
    }

    return clock;
}
 80853ee:	9802      	ldr	r0, [sp, #8]
 80853f0:	b009      	add	sp, #36	; 0x24
 80853f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080853f4 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
 80853f4:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 80853f6:	7800      	ldrb	r0, [r0, #0]
 80853f8:	f7ff fd0a 	bl	8084e10 <hal_spi_transfer>
}
 80853fc:	b2c0      	uxtb	r0, r0
 80853fe:	bd08      	pop	{r3, pc}

08085400 <_ZN17SystemSleepResult13toSleepResultEv>:
    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
 8085400:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SleepResult toSleepResult() {
 8085404:	b510      	push	{r4, lr}
        if (error_ || wakeupSource_) {
 8085406:	680a      	ldr	r2, [r1, #0]
 8085408:	b933      	cbnz	r3, 8085418 <_ZN17SystemSleepResult13toSleepResultEv+0x18>
 808540a:	b932      	cbnz	r2, 808541a <_ZN17SystemSleepResult13toSleepResultEv+0x1a>
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
                    break;
                }
            }
        }
        return compatResult_;
 808540c:	f8d1 3006 	ldr.w	r3, [r1, #6]
 8085410:	6003      	str	r3, [r0, #0]
 8085412:	894b      	ldrh	r3, [r1, #10]
 8085414:	8083      	strh	r3, [r0, #4]
    }
 8085416:	bd10      	pop	{r4, pc}
        if (wakeupSource_) {
 8085418:	b122      	cbz	r2, 8085424 <_ZN17SystemSleepResult13toSleepResultEv+0x24>
            return static_cast<SystemSleepWakeupReason>(wakeupSource_->type);
 808541a:	8894      	ldrh	r4, [r2, #4]
            switch (wakeupReason()) {
 808541c:	2c01      	cmp	r4, #1
 808541e:	d003      	beq.n	8085428 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
 8085420:	2c04      	cmp	r4, #4
 8085422:	d006      	beq.n	8085432 <_ZN17SystemSleepResult13toSleepResultEv+0x32>
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 8085424:	2204      	movs	r2, #4
 8085426:	e005      	b.n	8085434 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
 8085428:	8992      	ldrh	r2, [r2, #12]
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
 808542a:	718c      	strb	r4, [r1, #6]
 808542c:	810b      	strh	r3, [r1, #8]
 808542e:	814a      	strh	r2, [r1, #10]
                    break;
 8085430:	e7ec      	b.n	808540c <_ZN17SystemSleepResult13toSleepResultEv+0xc>
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
 8085432:	2202      	movs	r2, #2
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 8085434:	810b      	strh	r3, [r1, #8]
 8085436:	f64f 73ff 	movw	r3, #65535	; 0xffff
 808543a:	718a      	strb	r2, [r1, #6]
 808543c:	814b      	strh	r3, [r1, #10]
                    break;
 808543e:	e7e5      	b.n	808540c <_ZN17SystemSleepResult13toSleepResultEv+0xc>

08085440 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 8085440:	b510      	push	{r4, lr}
 8085442:	4604      	mov	r4, r0
        if (wakeupSource_) {
 8085444:	6800      	ldr	r0, [r0, #0]
 8085446:	b118      	cbz	r0, 8085450 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
 8085448:	f7ff fea2 	bl	8085190 <free>
            wakeupSource_ = nullptr;
 808544c:	2300      	movs	r3, #0
 808544e:	6023      	str	r3, [r4, #0]
        }
    }
 8085450:	bd10      	pop	{r4, pc}

08085452 <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8085452:	b538      	push	{r3, r4, r5, lr}
 8085454:	460c      	mov	r4, r1
        error_ = result.error_;
 8085456:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 808545a:	4605      	mov	r5, r0
        error_ = result.error_;
 808545c:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
 808545e:	f8d1 3006 	ldr.w	r3, [r1, #6]
 8085462:	f8c0 3006 	str.w	r3, [r0, #6]
 8085466:	894b      	ldrh	r3, [r1, #10]
 8085468:	8143      	strh	r3, [r0, #10]
        freeWakeupSourceMemory();
 808546a:	f7ff ffe9 	bl	8085440 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
 808546e:	6823      	ldr	r3, [r4, #0]
 8085470:	b113      	cbz	r3, 8085478 <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
 8085472:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
 8085474:	2300      	movs	r3, #0
 8085476:	6023      	str	r3, [r4, #0]
    }
 8085478:	bd38      	pop	{r3, r4, r5, pc}

0808547a <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
 808547a:	b507      	push	{r0, r1, r2, lr}
 808547c:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 808547e:	2100      	movs	r1, #0
{
 8085480:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 8085482:	9100      	str	r1, [sp, #0]
 8085484:	2001      	movs	r0, #1
 8085486:	218c      	movs	r1, #140	; 0x8c
 8085488:	f7ff fdb8 	bl	8084ffc <system_reset>
}
 808548c:	b003      	add	sp, #12
 808548e:	f85d fb04 	ldr.w	pc, [sp], #4

08085492 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
 8085492:	4601      	mov	r1, r0
    reset(0, flags);
 8085494:	2000      	movs	r0, #0
 8085496:	f7ff bff0 	b.w	808547a <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

0808549a <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
 808549a:	2000      	movs	r0, #0
 808549c:	f7ff bff9 	b.w	8085492 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

080854a0 <_ZN11SystemClass13enterSafeModeEN8particle5FlagsI19SystemResetFlagTypemEE>:

void SystemClass::enterSafeMode(SystemResetFlags flags)
{
 80854a0:	b507      	push	{r0, r1, r2, lr}
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
 80854a2:	2200      	movs	r2, #0
{
 80854a4:	4603      	mov	r3, r0
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
 80854a6:	4611      	mov	r1, r2
 80854a8:	9200      	str	r2, [sp, #0]
 80854aa:	2003      	movs	r0, #3
 80854ac:	f7ff fda6 	bl	8084ffc <system_reset>
}
 80854b0:	b003      	add	sp, #12
 80854b2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080854b8 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
    }
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
 80854b8:	b530      	push	{r4, r5, lr}
 80854ba:	4604      	mov	r4, r0
 80854bc:	b085      	sub	sp, #20
 80854be:	4608      	mov	r0, r1
 80854c0:	4611      	mov	r1, r2
 80854c2:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
 80854c4:	2300      	movs	r3, #0
 80854c6:	f7ff fd4b 	bl	8084f60 <system_sleep>
              compatResult_(r) {
 80854ca:	2300      	movs	r3, #0
            : wakeupSource_(nullptr),
 80854cc:	e9cd 3301 	strd	r3, r3, [sp, #4]
              compatResult_(r) {
 80854d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
 80854d4:	4d09      	ldr	r5, [pc, #36]	; (80854fc <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x44>)
 80854d6:	a901      	add	r1, sp, #4
 80854d8:	f8ad 000c 	strh.w	r0, [sp, #12]
 80854dc:	4628      	mov	r0, r5
 80854de:	f8ad 300e 	strh.w	r3, [sp, #14]
 80854e2:	f7ff ffb6 	bl	8085452 <_ZN17SystemSleepResultaSEOS_.isra.0>
        freeWakeupSourceMemory();
 80854e6:	a801      	add	r0, sp, #4
 80854e8:	f7ff ffaa 	bl	8085440 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        return toSleepResult();
 80854ec:	4620      	mov	r0, r4
 80854ee:	4629      	mov	r1, r5
 80854f0:	f7ff ff86 	bl	8085400 <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
 80854f4:	4620      	mov	r0, r4
 80854f6:	b005      	add	sp, #20
 80854f8:	bd30      	pop	{r4, r5, pc}
 80854fa:	bf00      	nop
 80854fc:	200003f4 	.word	0x200003f4

08085500 <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
 8085500:	b510      	push	{r4, lr}
 8085502:	2400      	movs	r4, #0
 8085504:	7004      	strb	r4, [r0, #0]
 8085506:	8044      	strh	r4, [r0, #2]
 8085508:	f64f 74ff 	movw	r4, #65535	; 0xffff
    if (ret > 0) {
 808550c:	2900      	cmp	r1, #0
SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
 808550e:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
 8085510:	dd08      	ble.n	8085524 <_ZN11SleepResultC1EiPKtj+0x24>
        // pin
        --ret;
 8085512:	3901      	subs	r1, #1
        if ((size_t)ret < pinsSize) {
 8085514:	428b      	cmp	r3, r1
 8085516:	d904      	bls.n	8085522 <_ZN11SleepResultC1EiPKtj+0x22>
            pin_ = pins[ret];
 8085518:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
 808551c:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
 808551e:	2301      	movs	r3, #1
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
        reason_ = WAKEUP_REASON_RTC;
 8085520:	7003      	strb	r3, [r0, #0]
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
    }
}
 8085522:	bd10      	pop	{r4, pc}
    } else if (ret == 0) {
 8085524:	d101      	bne.n	808552a <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
 8085526:	2302      	movs	r3, #2
 8085528:	e7fa      	b.n	8085520 <_ZN11SleepResultC1EiPKtj+0x20>
        err_ = static_cast<system_error_t>(ret);
 808552a:	8041      	strh	r1, [r0, #2]
 808552c:	e7f9      	b.n	8085522 <_ZN11SleepResultC1EiPKtj+0x22>
	...

08085530 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 8085530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8085532:	460d      	mov	r5, r1
 8085534:	4616      	mov	r6, r2
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 8085536:	2700      	movs	r7, #0
SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 8085538:	b08b      	sub	sp, #44	; 0x2c
 808553a:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 808553c:	9b12      	ldr	r3, [sp, #72]	; 0x48
SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 808553e:	4604      	mov	r4, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 8085540:	9301      	str	r3, [sp, #4]
 8085542:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8085544:	4631      	mov	r1, r6
 8085546:	9300      	str	r3, [sp, #0]
 8085548:	4628      	mov	r0, r5
 808554a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 808554c:	9702      	str	r7, [sp, #8]
 808554e:	f7ff fd4b 	bl	8084fe8 <system_sleep_pins>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
 8085552:	4633      	mov	r3, r6
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 8085554:	4601      	mov	r1, r0
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
 8085556:	462a      	mov	r2, r5
 8085558:	a805      	add	r0, sp, #20
 808555a:	f7ff ffd1 	bl	8085500 <_ZN11SleepResultC1EiPKtj>
 808555e:	4d0f      	ldr	r5, [pc, #60]	; (808559c <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x6c>)
 8085560:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8085564:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 8085568:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 808556c:	4628      	mov	r0, r5
              compatResult_(r) {
 808556e:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
 8085572:	a907      	add	r1, sp, #28
 8085574:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8085578:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 808557c:	9707      	str	r7, [sp, #28]
 808557e:	f8ad 7020 	strh.w	r7, [sp, #32]
 8085582:	f7ff ff66 	bl	8085452 <_ZN17SystemSleepResultaSEOS_.isra.0>
        freeWakeupSourceMemory();
 8085586:	a807      	add	r0, sp, #28
 8085588:	f7ff ff5a 	bl	8085440 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        return toSleepResult();
 808558c:	4620      	mov	r0, r4
 808558e:	4629      	mov	r1, r5
 8085590:	f7ff ff36 	bl	8085400 <_ZN17SystemSleepResult13toSleepResultEv>
}
 8085594:	4620      	mov	r0, r4
 8085596:	b00b      	add	sp, #44	; 0x2c
 8085598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808559a:	bf00      	nop
 808559c:	200003f4 	.word	0x200003f4

080855a0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80855a0:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 80855a2:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80855a4:	b510      	push	{r4, lr}
 80855a6:	4b08      	ldr	r3, [pc, #32]	; (80855c8 <_GLOBAL__sub_I_System+0x28>)
 80855a8:	4c08      	ldr	r4, [pc, #32]	; (80855cc <_GLOBAL__sub_I_System+0x2c>)
 80855aa:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80855ac:	4b08      	ldr	r3, [pc, #32]	; (80855d0 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80855ae:	e9c4 0000 	strd	r0, r0, [r4]
    SleepResult() {}
 80855b2:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80855b4:	f7ff fcc4 	bl	8084f40 <set_system_mode>
SystemClass System;
 80855b8:	4620      	mov	r0, r4
 80855ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80855be:	4a05      	ldr	r2, [pc, #20]	; (80855d4 <_GLOBAL__sub_I_System+0x34>)
 80855c0:	4905      	ldr	r1, [pc, #20]	; (80855d8 <_GLOBAL__sub_I_System+0x38>)
 80855c2:	f002 bf97 	b.w	80884f4 <__aeabi_atexit>
 80855c6:	bf00      	nop
 80855c8:	20000400 	.word	0x20000400
 80855cc:	200003f4 	.word	0x200003f4
 80855d0:	ffff0000 	.word	0xffff0000
 80855d4:	20000130 	.word	0x20000130
 80855d8:	080801ad 	.word	0x080801ad

080855dc <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80855dc:	b510      	push	{r4, lr}
 80855de:	4604      	mov	r4, r0
{
	free(buffer);
 80855e0:	6800      	ldr	r0, [r0, #0]
 80855e2:	f7ff fdd5 	bl	8085190 <free>
}
 80855e6:	4620      	mov	r0, r4
 80855e8:	bd10      	pop	{r4, pc}

080855ea <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80855ea:	b510      	push	{r4, lr}
 80855ec:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80855ee:	6800      	ldr	r0, [r0, #0]
 80855f0:	b108      	cbz	r0, 80855f6 <_ZN6String10invalidateEv+0xc>
 80855f2:	f7ff fdcd 	bl	8085190 <free>
	buffer = NULL;
 80855f6:	2300      	movs	r3, #0
	capacity = len = 0;
 80855f8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80855fc:	6023      	str	r3, [r4, #0]
}
 80855fe:	bd10      	pop	{r4, pc}

08085600 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 8085600:	b538      	push	{r3, r4, r5, lr}
 8085602:	4604      	mov	r4, r0
 8085604:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 8085606:	6800      	ldr	r0, [r0, #0]
 8085608:	3101      	adds	r1, #1
 808560a:	f7ff fdc9 	bl	80851a0 <realloc>
	if (newbuffer) {
 808560e:	b110      	cbz	r0, 8085616 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 8085610:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 8085614:	2001      	movs	r0, #1
	}
	return 0;
}
 8085616:	bd38      	pop	{r3, r4, r5, pc}

08085618 <_ZN6String7reserveEj>:
{
 8085618:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 808561a:	6803      	ldr	r3, [r0, #0]
{
 808561c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 808561e:	b123      	cbz	r3, 808562a <_ZN6String7reserveEj+0x12>
 8085620:	6843      	ldr	r3, [r0, #4]
 8085622:	428b      	cmp	r3, r1
 8085624:	d301      	bcc.n	808562a <_ZN6String7reserveEj+0x12>
 8085626:	2001      	movs	r0, #1
}
 8085628:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 808562a:	4620      	mov	r0, r4
 808562c:	f7ff ffe8 	bl	8085600 <_ZN6String12changeBufferEj>
 8085630:	2800      	cmp	r0, #0
 8085632:	d0f9      	beq.n	8085628 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 8085634:	68a3      	ldr	r3, [r4, #8]
 8085636:	2b00      	cmp	r3, #0
 8085638:	d1f5      	bne.n	8085626 <_ZN6String7reserveEj+0xe>
 808563a:	6822      	ldr	r2, [r4, #0]
 808563c:	7013      	strb	r3, [r2, #0]
 808563e:	e7f2      	b.n	8085626 <_ZN6String7reserveEj+0xe>

08085640 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8085640:	b570      	push	{r4, r5, r6, lr}
 8085642:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8085644:	4611      	mov	r1, r2
{
 8085646:	4604      	mov	r4, r0
 8085648:	4615      	mov	r5, r2
	if (!reserve(length)) {
 808564a:	f7ff ffe5 	bl	8085618 <_ZN6String7reserveEj>
 808564e:	b920      	cbnz	r0, 808565a <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 8085650:	4620      	mov	r0, r4
 8085652:	f7ff ffca 	bl	80855ea <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 8085656:	4620      	mov	r0, r4
 8085658:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 808565a:	462a      	mov	r2, r5
 808565c:	4631      	mov	r1, r6
 808565e:	6820      	ldr	r0, [r4, #0]
	len = length;
 8085660:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 8085662:	f005 faef 	bl	808ac44 <memcpy>
	buffer[len] = 0;
 8085666:	2100      	movs	r1, #0
 8085668:	6822      	ldr	r2, [r4, #0]
 808566a:	68a3      	ldr	r3, [r4, #8]
 808566c:	54d1      	strb	r1, [r2, r3]
	return *this;
 808566e:	e7f2      	b.n	8085656 <_ZN6String4copyEPKcj+0x16>

08085670 <_ZN6StringC1EPK19__FlashStringHelper>:
String::String(const __FlashStringHelper *pstr)
 8085670:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 8085672:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 8085674:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 8085676:	460d      	mov	r5, r1
	capacity = 0;
 8085678:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 808567c:	6083      	str	r3, [r0, #8]
	flags = 0;
 808567e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 8085680:	b139      	cbz	r1, 8085692 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
 8085682:	4608      	mov	r0, r1
 8085684:	f005 fb81 	bl	808ad8a <strlen>
 8085688:	4629      	mov	r1, r5
 808568a:	4602      	mov	r2, r0
 808568c:	4620      	mov	r0, r4
 808568e:	f7ff ffd7 	bl	8085640 <_ZN6String4copyEPKcj>
}
 8085692:	4620      	mov	r0, r4
 8085694:	bd38      	pop	{r3, r4, r5, pc}

08085696 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 8085696:	b538      	push	{r3, r4, r5, lr}
 8085698:	4605      	mov	r5, r0
	if (buffer) {
 808569a:	6800      	ldr	r0, [r0, #0]
{
 808569c:	460c      	mov	r4, r1
	if (buffer) {
 808569e:	b168      	cbz	r0, 80856bc <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 80856a0:	686a      	ldr	r2, [r5, #4]
 80856a2:	688b      	ldr	r3, [r1, #8]
 80856a4:	429a      	cmp	r2, r3
 80856a6:	d307      	bcc.n	80856b8 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 80856a8:	6809      	ldr	r1, [r1, #0]
 80856aa:	f005 fb4a 	bl	808ad42 <strcpy>
			len = rhs.len;
 80856ae:	68a3      	ldr	r3, [r4, #8]
 80856b0:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 80856b2:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 80856b4:	60a3      	str	r3, [r4, #8]
}
 80856b6:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 80856b8:	f7ff fd6a 	bl	8085190 <free>
	buffer = rhs.buffer;
 80856bc:	6823      	ldr	r3, [r4, #0]
 80856be:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 80856c0:	6863      	ldr	r3, [r4, #4]
 80856c2:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 80856c4:	68a3      	ldr	r3, [r4, #8]
 80856c6:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 80856c8:	2300      	movs	r3, #0
	rhs.capacity = 0;
 80856ca:	e9c4 3300 	strd	r3, r3, [r4]
 80856ce:	e7f1      	b.n	80856b4 <_ZN6String4moveERS_+0x1e>

080856d0 <_ZN6StringC1EOS_>:
	buffer = NULL;
 80856d0:	2300      	movs	r3, #0
String::String(String &&rval)
 80856d2:	b510      	push	{r4, lr}
 80856d4:	4604      	mov	r4, r0
	capacity = 0;
 80856d6:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80856da:	6083      	str	r3, [r0, #8]
	flags = 0;
 80856dc:	7303      	strb	r3, [r0, #12]
	move(rval);
 80856de:	f7ff ffda 	bl	8085696 <_ZN6String4moveERS_>
}
 80856e2:	4620      	mov	r0, r4
 80856e4:	bd10      	pop	{r4, pc}

080856e6 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80856e6:	4288      	cmp	r0, r1
{
 80856e8:	b510      	push	{r4, lr}
 80856ea:	460b      	mov	r3, r1
 80856ec:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80856ee:	d004      	beq.n	80856fa <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80856f0:	6809      	ldr	r1, [r1, #0]
 80856f2:	b121      	cbz	r1, 80856fe <_ZN6StringaSERKS_+0x18>
 80856f4:	689a      	ldr	r2, [r3, #8]
 80856f6:	f7ff ffa3 	bl	8085640 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80856fa:	4620      	mov	r0, r4
 80856fc:	bd10      	pop	{r4, pc}
	else invalidate();
 80856fe:	f7ff ff74 	bl	80855ea <_ZN6String10invalidateEv>
 8085702:	e7fa      	b.n	80856fa <_ZN6StringaSERKS_+0x14>

08085704 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 8085704:	2300      	movs	r3, #0
String::String(const String &value)
 8085706:	b510      	push	{r4, lr}
 8085708:	4604      	mov	r4, r0
	capacity = 0;
 808570a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 808570e:	6083      	str	r3, [r0, #8]
	flags = 0;
 8085710:	7303      	strb	r3, [r0, #12]
	*this = value;
 8085712:	f7ff ffe8 	bl	80856e6 <_ZN6StringaSERKS_>
}
 8085716:	4620      	mov	r0, r4
 8085718:	bd10      	pop	{r4, pc}

0808571a <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 808571a:	4288      	cmp	r0, r1
{
 808571c:	b510      	push	{r4, lr}
 808571e:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 8085720:	d001      	beq.n	8085726 <_ZN6StringaSEOS_+0xc>
 8085722:	f7ff ffb8 	bl	8085696 <_ZN6String4moveERS_>
	return *this;
}
 8085726:	4620      	mov	r0, r4
 8085728:	bd10      	pop	{r4, pc}

0808572a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 808572a:	b538      	push	{r3, r4, r5, lr}
 808572c:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 808572e:	460c      	mov	r4, r1
 8085730:	b149      	cbz	r1, 8085746 <_ZN6StringaSEPKc+0x1c>
 8085732:	4608      	mov	r0, r1
 8085734:	f005 fb29 	bl	808ad8a <strlen>
 8085738:	4621      	mov	r1, r4
 808573a:	4602      	mov	r2, r0
 808573c:	4628      	mov	r0, r5
 808573e:	f7ff ff7f 	bl	8085640 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 8085742:	4628      	mov	r0, r5
 8085744:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 8085746:	f7ff ff50 	bl	80855ea <_ZN6String10invalidateEv>
 808574a:	e7fa      	b.n	8085742 <_ZN6StringaSEPKc+0x18>

0808574c <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 808574c:	b570      	push	{r4, r5, r6, lr}
 808574e:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 8085750:	460e      	mov	r6, r1
 8085752:	b909      	cbnz	r1, 8085758 <_ZN6String6concatEPKcj+0xc>
 8085754:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 8085756:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 8085758:	b16a      	cbz	r2, 8085776 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 808575a:	6884      	ldr	r4, [r0, #8]
 808575c:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 808575e:	4621      	mov	r1, r4
 8085760:	f7ff ff5a 	bl	8085618 <_ZN6String7reserveEj>
 8085764:	2800      	cmp	r0, #0
 8085766:	d0f5      	beq.n	8085754 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 8085768:	6828      	ldr	r0, [r5, #0]
 808576a:	68ab      	ldr	r3, [r5, #8]
 808576c:	4631      	mov	r1, r6
 808576e:	4418      	add	r0, r3
 8085770:	f005 fae7 	bl	808ad42 <strcpy>
	len = newlen;
 8085774:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 8085776:	2001      	movs	r0, #1
 8085778:	e7ed      	b.n	8085756 <_ZN6String6concatEPKcj+0xa>

0808577a <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 808577a:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 808577c:	688a      	ldr	r2, [r1, #8]
 808577e:	6809      	ldr	r1, [r1, #0]
{
 8085780:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 8085782:	f7ff ffe3 	bl	808574c <_ZN6String6concatEPKcj>
 8085786:	b910      	cbnz	r0, 808578e <_ZplRK15StringSumHelperRK6String+0x14>
 8085788:	4620      	mov	r0, r4
 808578a:	f7ff ff2e 	bl	80855ea <_ZN6String10invalidateEv>
	return a;
}
 808578e:	4620      	mov	r0, r4
 8085790:	bd10      	pop	{r4, pc}

08085792 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 8085792:	b538      	push	{r3, r4, r5, lr}
 8085794:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 8085796:	460d      	mov	r5, r1
 8085798:	b921      	cbnz	r1, 80857a4 <_ZplRK15StringSumHelperPKc+0x12>
 808579a:	4620      	mov	r0, r4
 808579c:	f7ff ff25 	bl	80855ea <_ZN6String10invalidateEv>
	return a;
}
 80857a0:	4620      	mov	r0, r4
 80857a2:	bd38      	pop	{r3, r4, r5, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80857a4:	4608      	mov	r0, r1
 80857a6:	f005 faf0 	bl	808ad8a <strlen>
 80857aa:	4629      	mov	r1, r5
 80857ac:	4602      	mov	r2, r0
 80857ae:	4620      	mov	r0, r4
 80857b0:	f7ff ffcc 	bl	808574c <_ZN6String6concatEPKcj>
 80857b4:	2800      	cmp	r0, #0
 80857b6:	d0f0      	beq.n	808579a <_ZplRK15StringSumHelperPKc+0x8>
 80857b8:	e7f2      	b.n	80857a0 <_ZplRK15StringSumHelperPKc+0xe>

080857ba <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80857ba:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80857bc:	6882      	ldr	r2, [r0, #8]
 80857be:	b93a      	cbnz	r2, 80857d0 <_ZNK6String6equalsEPKc+0x16>
 80857c0:	b121      	cbz	r1, 80857cc <_ZNK6String6equalsEPKc+0x12>
 80857c2:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
 80857c4:	fab0 f080 	clz	r0, r0
 80857c8:	0940      	lsrs	r0, r0, #5
 80857ca:	e000      	b.n	80857ce <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80857cc:	2001      	movs	r0, #1
}
 80857ce:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80857d0:	6800      	ldr	r0, [r0, #0]
 80857d2:	b909      	cbnz	r1, 80857d8 <_ZNK6String6equalsEPKc+0x1e>
 80857d4:	7800      	ldrb	r0, [r0, #0]
 80857d6:	e7f5      	b.n	80857c4 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
 80857d8:	f005 faa9 	bl	808ad2e <strcmp>
 80857dc:	e7f2      	b.n	80857c4 <_ZNK6String6equalsEPKc+0xa>

080857de <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
 80857de:	4613      	mov	r3, r2
 80857e0:	b510      	push	{r4, lr}
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
 80857e2:	688a      	ldr	r2, [r1, #8]
 80857e4:	6884      	ldr	r4, [r0, #8]
 80857e6:	1aa4      	subs	r4, r4, r2
 80857e8:	429c      	cmp	r4, r3
 80857ea:	d30a      	bcc.n	8085802 <_ZNK6String10startsWithERKS_j+0x24>
 80857ec:	6800      	ldr	r0, [r0, #0]
 80857ee:	b138      	cbz	r0, 8085800 <_ZNK6String10startsWithERKS_j+0x22>
 80857f0:	6809      	ldr	r1, [r1, #0]
 80857f2:	b141      	cbz	r1, 8085806 <_ZNK6String10startsWithERKS_j+0x28>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
 80857f4:	4418      	add	r0, r3
 80857f6:	f005 fad0 	bl	808ad9a <strncmp>
 80857fa:	fab0 f080 	clz	r0, r0
 80857fe:	0940      	lsrs	r0, r0, #5
}
 8085800:	bd10      	pop	{r4, pc}
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
 8085802:	2000      	movs	r0, #0
 8085804:	e7fc      	b.n	8085800 <_ZNK6String10startsWithERKS_j+0x22>
 8085806:	4608      	mov	r0, r1
 8085808:	e7fa      	b.n	8085800 <_ZNK6String10startsWithERKS_j+0x22>

0808580a <_ZNK6String10startsWithERKS_>:
	if (len < s2.len) return 0;
 808580a:	6882      	ldr	r2, [r0, #8]
 808580c:	688b      	ldr	r3, [r1, #8]
 808580e:	429a      	cmp	r2, r3
 8085810:	d302      	bcc.n	8085818 <_ZNK6String10startsWithERKS_+0xe>
	return startsWith(s2, 0);
 8085812:	2200      	movs	r2, #0
 8085814:	f7ff bfe3 	b.w	80857de <_ZNK6String10startsWithERKS_j>
}
 8085818:	2000      	movs	r0, #0
 808581a:	4770      	bx	lr

0808581c <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
 808581c:	6883      	ldr	r3, [r0, #8]
 808581e:	428b      	cmp	r3, r1
 8085820:	d903      	bls.n	808582a <_ZNK6StringixEj+0xe>
 8085822:	6800      	ldr	r0, [r0, #0]
 8085824:	b110      	cbz	r0, 808582c <_ZNK6StringixEj+0x10>
	return buffer[index];
 8085826:	5c40      	ldrb	r0, [r0, r1]
 8085828:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
 808582a:	2000      	movs	r0, #0
}
 808582c:	4770      	bx	lr

0808582e <_ZNK6String6charAtEj>:
	return operator[](loc);
 808582e:	f7ff bff5 	b.w	808581c <_ZNK6StringixEj>

08085832 <_ZNK6String7indexOfEcj>:
{
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
 8085832:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
 8085834:	6883      	ldr	r3, [r0, #8]
 8085836:	4293      	cmp	r3, r2
 8085838:	d906      	bls.n	8085848 <_ZNK6String7indexOfEcj+0x16>
	const char* temp = strchr(buffer + fromIndex, ch);
 808583a:	6804      	ldr	r4, [r0, #0]
 808583c:	18a0      	adds	r0, r4, r2
 808583e:	f005 fa5f 	bl	808ad00 <strchr>
	if (temp == NULL) return -1;
 8085842:	b108      	cbz	r0, 8085848 <_ZNK6String7indexOfEcj+0x16>
	return temp - buffer;
 8085844:	1b00      	subs	r0, r0, r4
}
 8085846:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
 8085848:	f04f 30ff 	mov.w	r0, #4294967295
 808584c:	e7fb      	b.n	8085846 <_ZNK6String7indexOfEcj+0x14>

0808584e <_ZNK6String7indexOfEc>:
	return indexOf(c, 0);
 808584e:	2200      	movs	r2, #0
 8085850:	f7ff bfef 	b.w	8085832 <_ZNK6String7indexOfEcj>

08085854 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 8085854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8085856:	461d      	mov	r5, r3
	if (left > right) {
 8085858:	429a      	cmp	r2, r3
 808585a:	bf88      	it	hi
 808585c:	4613      	movhi	r3, r2
{
 808585e:	460f      	mov	r7, r1
 8085860:	4614      	mov	r4, r2
	if (left > right) {
 8085862:	bf88      	it	hi
 8085864:	462c      	movhi	r4, r5
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 8085866:	490b      	ldr	r1, [pc, #44]	; (8085894 <_ZNK6String9substringEjj+0x40>)
	if (left > right) {
 8085868:	bf88      	it	hi
 808586a:	461d      	movhi	r5, r3
{
 808586c:	4606      	mov	r6, r0
	String out;
 808586e:	f7ff feff 	bl	8085670 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
 8085872:	68bb      	ldr	r3, [r7, #8]
 8085874:	42a3      	cmp	r3, r4
 8085876:	d30a      	bcc.n	808588e <_ZNK6String9substringEjj+0x3a>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
 8085878:	6839      	ldr	r1, [r7, #0]
 808587a:	42ab      	cmp	r3, r5
 808587c:	bf94      	ite	ls
 808587e:	ebc4 0203 	rsbls	r2, r4, r3
 8085882:	ebc4 0205 	rsbhi	r2, r4, r5
 8085886:	4630      	mov	r0, r6
 8085888:	4421      	add	r1, r4
 808588a:	f7ff fed9 	bl	8085640 <_ZN6String4copyEPKcj>
	return out;
}
 808588e:	4630      	mov	r0, r6
 8085890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8085892:	bf00      	nop
 8085894:	0808b70c 	.word	0x0808b70c

08085898 <_ZNK6String9substringEj>:
{
 8085898:	b510      	push	{r4, lr}
 808589a:	4604      	mov	r4, r0
	return substring(left, len);
 808589c:	688b      	ldr	r3, [r1, #8]
 808589e:	f7ff ffd9 	bl	8085854 <_ZNK6String9substringEjj>
}
 80858a2:	4620      	mov	r0, r4
 80858a4:	bd10      	pop	{r4, pc}

080858a6 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 80858a6:	6800      	ldr	r0, [r0, #0]
 80858a8:	b108      	cbz	r0, 80858ae <_ZNK6String5toIntEv+0x8>
 80858aa:	f005 b9b9 	b.w	808ac20 <atol>
	return 0;
}
 80858ae:	4770      	bx	lr

080858b0 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
 80858b0:	b40e      	push	{r1, r2, r3}
 80858b2:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
 80858b4:	ad09      	add	r5, sp, #36	; 0x24
 80858b6:	f855 7b04 	ldr.w	r7, [r5], #4
 80858ba:	4604      	mov	r4, r0
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 80858bc:	462b      	mov	r3, r5
 80858be:	463a      	mov	r2, r7
 80858c0:	2105      	movs	r1, #5
 80858c2:	a802      	add	r0, sp, #8
    va_start(marker, fmt);
 80858c4:	9501      	str	r5, [sp, #4]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 80858c6:	f7ff fc83 	bl	80851d0 <vsnprintf>
 80858ca:	4606      	mov	r6, r0
    va_end(marker);

    String result;
 80858cc:	490b      	ldr	r1, [pc, #44]	; (80858fc <_ZN6String6formatEPKcz+0x4c>)
 80858ce:	4620      	mov	r0, r4
 80858d0:	f7ff fece 	bl	8085670 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
 80858d4:	4631      	mov	r1, r6
 80858d6:	4620      	mov	r0, r4
 80858d8:	f7ff fe9e 	bl	8085618 <_ZN6String7reserveEj>
    if (result.buffer) {
 80858dc:	6820      	ldr	r0, [r4, #0]
 80858de:	b130      	cbz	r0, 80858ee <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80858e0:	462b      	mov	r3, r5
 80858e2:	463a      	mov	r2, r7
 80858e4:	1c71      	adds	r1, r6, #1
        va_start(marker, fmt);
 80858e6:	9501      	str	r5, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80858e8:	f7ff fc72 	bl	80851d0 <vsnprintf>
        va_end(marker);
        result.len = n;
 80858ec:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
 80858ee:	4620      	mov	r0, r4
 80858f0:	b004      	add	sp, #16
 80858f2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80858f6:	b003      	add	sp, #12
 80858f8:	4770      	bx	lr
 80858fa:	bf00      	nop
 80858fc:	0808b70c 	.word	0x0808b70c

08085900 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8085900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8085902:	4606      	mov	r6, r0
 8085904:	460d      	mov	r5, r1
  size_t n = 0;
 8085906:	2400      	movs	r4, #0
 8085908:	188f      	adds	r7, r1, r2
  while (size--) {
 808590a:	42bd      	cmp	r5, r7
 808590c:	d00c      	beq.n	8085928 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 808590e:	6833      	ldr	r3, [r6, #0]
 8085910:	4630      	mov	r0, r6
 8085912:	689b      	ldr	r3, [r3, #8]
 8085914:	f815 1b01 	ldrb.w	r1, [r5], #1
 8085918:	4798      	blx	r3
     if (chunk>=0)
 808591a:	1e03      	subs	r3, r0, #0
 808591c:	db01      	blt.n	8085922 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 808591e:	441c      	add	r4, r3
  while (size--) {
 8085920:	e7f3      	b.n	808590a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 8085922:	2c00      	cmp	r4, #0
 8085924:	bf08      	it	eq
 8085926:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 8085928:	4620      	mov	r0, r4
 808592a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808592c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 808592c:	b570      	push	{r4, r5, r6, lr}
 808592e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8085930:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 8085932:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 8085934:	b149      	cbz	r1, 808594a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8085936:	f005 fa28 	bl	808ad8a <strlen>
 808593a:	682b      	ldr	r3, [r5, #0]
 808593c:	4602      	mov	r2, r0
 808593e:	4621      	mov	r1, r4
 8085940:	4628      	mov	r0, r5
    }
 8085942:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 8085946:	68db      	ldr	r3, [r3, #12]
 8085948:	4718      	bx	r3
    }
 808594a:	bd70      	pop	{r4, r5, r6, pc}

0808594c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 808594c:	b508      	push	{r3, lr}
  return write(str);
 808594e:	f7ff ffed 	bl	808592c <_ZN5Print5writeEPKc>
}
 8085952:	bd08      	pop	{r3, pc}

08085954 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 8085954:	6803      	ldr	r3, [r0, #0]
 8085956:	689b      	ldr	r3, [r3, #8]
 8085958:	4718      	bx	r3

0808595a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 808595a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 808595c:	210d      	movs	r1, #13
{
 808595e:	4605      	mov	r5, r0
  size_t n = print('\r');
 8085960:	f7ff fff8 	bl	8085954 <_ZN5Print5printEc>
  n += print('\n');
 8085964:	210a      	movs	r1, #10
  size_t n = print('\r');
 8085966:	4604      	mov	r4, r0
  n += print('\n');
 8085968:	4628      	mov	r0, r5
 808596a:	f7ff fff3 	bl	8085954 <_ZN5Print5printEc>
  return n;
}
 808596e:	4420      	add	r0, r4
 8085970:	bd38      	pop	{r3, r4, r5, pc}

08085972 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 8085972:	b538      	push	{r3, r4, r5, lr}
 8085974:	4605      	mov	r5, r0
  return write(str);
 8085976:	f7ff ffd9 	bl	808592c <_ZN5Print5writeEPKc>
 808597a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 808597c:	4628      	mov	r0, r5
 808597e:	f7ff ffec 	bl	808595a <_ZN5Print7printlnEv>
  return n;
}
 8085982:	4420      	add	r0, r4
 8085984:	bd38      	pop	{r3, r4, r5, pc}

08085986 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8085986:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8085988:	2a01      	cmp	r2, #1
 808598a:	bf98      	it	ls
 808598c:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 808598e:	b530      	push	{r4, r5, lr}
 8085990:	b08b      	sub	sp, #44	; 0x2c
 8085992:	460c      	mov	r4, r1
  *str = '\0';
 8085994:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 8085998:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 808599a:	4625      	mov	r5, r4
 808599c:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80859a0:	fb04 5312 	mls	r3, r4, r2, r5
 80859a4:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80859a6:	2b09      	cmp	r3, #9
 80859a8:	bf94      	ite	ls
 80859aa:	3330      	addls	r3, #48	; 0x30
 80859ac:	3337      	addhi	r3, #55	; 0x37
 80859ae:	b2db      	uxtb	r3, r3
  } while(n);
 80859b0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80859b2:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80859b6:	d9f0      	bls.n	808599a <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80859b8:	f7ff ffb8 	bl	808592c <_ZN5Print5writeEPKc>
}
 80859bc:	b00b      	add	sp, #44	; 0x2c
 80859be:	bd30      	pop	{r4, r5, pc}

080859c0 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80859c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80859c4:	4605      	mov	r5, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80859c6:	4619      	mov	r1, r3
 80859c8:	4610      	mov	r0, r2
{
 80859ca:	4692      	mov	sl, r2
 80859cc:	461f      	mov	r7, r3
 80859ce:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
  if (isnan(number)) return print("nan");
 80859d2:	f004 fd3d 	bl	808a450 <__aeabi_dcmpun>
 80859d6:	b140      	cbz	r0, 80859ea <_ZN5Print10printFloatEdh+0x2a>
  return write(str);
 80859d8:	4951      	ldr	r1, [pc, #324]	; (8085b20 <_ZN5Print10printFloatEdh+0x160>)
 80859da:	4628      	mov	r0, r5
 80859dc:	f7ff ffa6 	bl	808592c <_ZN5Print5writeEPKc>
 80859e0:	4604      	mov	r4, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
 80859e2:	4620      	mov	r0, r4
 80859e4:	b003      	add	sp, #12
 80859e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 80859ea:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
 80859ee:	f04f 32ff 	mov.w	r2, #4294967295
 80859f2:	4650      	mov	r0, sl
 80859f4:	4621      	mov	r1, r4
 80859f6:	4b4b      	ldr	r3, [pc, #300]	; (8085b24 <_ZN5Print10printFloatEdh+0x164>)
 80859f8:	f004 fd2a 	bl	808a450 <__aeabi_dcmpun>
 80859fc:	b948      	cbnz	r0, 8085a12 <_ZN5Print10printFloatEdh+0x52>
 80859fe:	f04f 32ff 	mov.w	r2, #4294967295
 8085a02:	4650      	mov	r0, sl
 8085a04:	4621      	mov	r1, r4
 8085a06:	4b47      	ldr	r3, [pc, #284]	; (8085b24 <_ZN5Print10printFloatEdh+0x164>)
 8085a08:	f004 fd04 	bl	808a414 <__aeabi_dcmple>
 8085a0c:	b908      	cbnz	r0, 8085a12 <_ZN5Print10printFloatEdh+0x52>
  return write(str);
 8085a0e:	4946      	ldr	r1, [pc, #280]	; (8085b28 <_ZN5Print10printFloatEdh+0x168>)
 8085a10:	e7e3      	b.n	80859da <_ZN5Print10printFloatEdh+0x1a>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 8085a12:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8085a16:	4650      	mov	r0, sl
 8085a18:	4639      	mov	r1, r7
 8085a1a:	4b44      	ldr	r3, [pc, #272]	; (8085b2c <_ZN5Print10printFloatEdh+0x16c>)
 8085a1c:	f004 fd0e 	bl	808a43c <__aeabi_dcmpgt>
 8085a20:	b108      	cbz	r0, 8085a26 <_ZN5Print10printFloatEdh+0x66>
  return write(str);
 8085a22:	4943      	ldr	r1, [pc, #268]	; (8085b30 <_ZN5Print10printFloatEdh+0x170>)
 8085a24:	e7d9      	b.n	80859da <_ZN5Print10printFloatEdh+0x1a>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 8085a26:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8085a2a:	4650      	mov	r0, sl
 8085a2c:	4639      	mov	r1, r7
 8085a2e:	4b41      	ldr	r3, [pc, #260]	; (8085b34 <_ZN5Print10printFloatEdh+0x174>)
 8085a30:	f004 fce6 	bl	808a400 <__aeabi_dcmplt>
 8085a34:	2800      	cmp	r0, #0
 8085a36:	d1f4      	bne.n	8085a22 <_ZN5Print10printFloatEdh+0x62>
  if (number < 0.0)
 8085a38:	2200      	movs	r2, #0
 8085a3a:	2300      	movs	r3, #0
 8085a3c:	4650      	mov	r0, sl
 8085a3e:	4639      	mov	r1, r7
 8085a40:	f004 fcde 	bl	808a400 <__aeabi_dcmplt>
 8085a44:	4604      	mov	r4, r0
 8085a46:	b130      	cbz	r0, 8085a56 <_ZN5Print10printFloatEdh+0x96>
     n += print('-');
 8085a48:	212d      	movs	r1, #45	; 0x2d
 8085a4a:	4628      	mov	r0, r5
 8085a4c:	f7ff ff82 	bl	8085954 <_ZN5Print5printEc>
 8085a50:	4604      	mov	r4, r0
     number = -number;
 8085a52:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
  size_t n = 0;
 8085a56:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
 8085a5a:	2000      	movs	r0, #0
    rounding /= 10.0;
 8085a5c:	f04f 0800 	mov.w	r8, #0
  double rounding = 0.5;
 8085a60:	4935      	ldr	r1, [pc, #212]	; (8085b38 <_ZN5Print10printFloatEdh+0x178>)
    rounding /= 10.0;
 8085a62:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8085b3c <_ZN5Print10printFloatEdh+0x17c>
  for (uint8_t i=0; i<digits; ++i)
 8085a66:	fa5f f38b 	uxtb.w	r3, fp
 8085a6a:	429e      	cmp	r6, r3
 8085a6c:	d906      	bls.n	8085a7c <_ZN5Print10printFloatEdh+0xbc>
    rounding /= 10.0;
 8085a6e:	4642      	mov	r2, r8
 8085a70:	464b      	mov	r3, r9
 8085a72:	f004 fb7d 	bl	808a170 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
 8085a76:	f10b 0b01 	add.w	fp, fp, #1
 8085a7a:	e7f4      	b.n	8085a66 <_ZN5Print10printFloatEdh+0xa6>
  number += rounding;
 8085a7c:	463b      	mov	r3, r7
 8085a7e:	4652      	mov	r2, sl
 8085a80:	f004 f896 	bl	8089bb0 <__adddf3>
 8085a84:	4689      	mov	r9, r1
 8085a86:	4680      	mov	r8, r0
  unsigned long int_part = (unsigned long)number;
 8085a88:	f004 fd20 	bl	808a4cc <__aeabi_d2uiz>
 8085a8c:	4607      	mov	r7, r0
  double remainder = number - (double)int_part;
 8085a8e:	f004 f9cb 	bl	8089e28 <__aeabi_ui2d>
 8085a92:	4602      	mov	r2, r0
 8085a94:	460b      	mov	r3, r1
 8085a96:	4640      	mov	r0, r8
 8085a98:	4649      	mov	r1, r9
 8085a9a:	f004 f887 	bl	8089bac <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 8085a9e:	220a      	movs	r2, #10
 8085aa0:	4680      	mov	r8, r0
 8085aa2:	4689      	mov	r9, r1
 8085aa4:	4628      	mov	r0, r5
 8085aa6:	4639      	mov	r1, r7
 8085aa8:	f7ff ff6d 	bl	8085986 <_ZN5Print11printNumberEmh>
  n += print(int_part);
 8085aac:	4404      	add	r4, r0
  if (digits > 0) {
 8085aae:	2e00      	cmp	r6, #0
 8085ab0:	d097      	beq.n	80859e2 <_ZN5Print10printFloatEdh+0x22>
  return write(str);
 8085ab2:	4628      	mov	r0, r5
 8085ab4:	4922      	ldr	r1, [pc, #136]	; (8085b40 <_ZN5Print10printFloatEdh+0x180>)
 8085ab6:	f7ff ff39 	bl	808592c <_ZN5Print5writeEPKc>
    remainder *= 10.0;
 8085aba:	f04f 0a00 	mov.w	sl, #0
 8085abe:	f8df b07c 	ldr.w	fp, [pc, #124]	; 8085b3c <_ZN5Print10printFloatEdh+0x17c>
    n += print(".");
 8085ac2:	4404      	add	r4, r0
  while (digits-- > 0)
 8085ac4:	2e00      	cmp	r6, #0
 8085ac6:	d08c      	beq.n	80859e2 <_ZN5Print10printFloatEdh+0x22>
    remainder *= 10.0;
 8085ac8:	4652      	mov	r2, sl
 8085aca:	465b      	mov	r3, fp
 8085acc:	4640      	mov	r0, r8
 8085ace:	4649      	mov	r1, r9
 8085ad0:	f004 fa24 	bl	8089f1c <__aeabi_dmul>
 8085ad4:	4680      	mov	r8, r0
 8085ad6:	4689      	mov	r9, r1
    int toPrint = int(remainder);
 8085ad8:	f004 fcd0 	bl	808a47c <__aeabi_d2iz>
        if (n < 0 && base == 10) {
 8085adc:	1e07      	subs	r7, r0, #0
 8085ade:	da1b      	bge.n	8085b18 <_ZN5Print10printFloatEdh+0x158>
            t = print('-');
 8085ae0:	212d      	movs	r1, #45	; 0x2d
 8085ae2:	4628      	mov	r0, r5
 8085ae4:	f7ff ff36 	bl	8085954 <_ZN5Print5printEc>
 8085ae8:	4603      	mov	r3, r0
            val = -n;
 8085aea:	4279      	negs	r1, r7
        return printNumber(val, base) + t;
 8085aec:	220a      	movs	r2, #10
 8085aee:	4628      	mov	r0, r5
 8085af0:	9301      	str	r3, [sp, #4]
 8085af2:	f7ff ff48 	bl	8085986 <_ZN5Print11printNumberEmh>
 8085af6:	9b01      	ldr	r3, [sp, #4]
 8085af8:	3e01      	subs	r6, #1
 8085afa:	4403      	add	r3, r0
    remainder -= toPrint;
 8085afc:	4638      	mov	r0, r7
    n += print(toPrint);
 8085afe:	441c      	add	r4, r3
    remainder -= toPrint;
 8085b00:	f004 f9a2 	bl	8089e48 <__aeabi_i2d>
 8085b04:	4602      	mov	r2, r0
 8085b06:	460b      	mov	r3, r1
 8085b08:	4640      	mov	r0, r8
 8085b0a:	4649      	mov	r1, r9
 8085b0c:	f004 f84e 	bl	8089bac <__aeabi_dsub>
 8085b10:	b2f6      	uxtb	r6, r6
 8085b12:	4680      	mov	r8, r0
 8085b14:	4689      	mov	r9, r1
  while (digits-- > 0)
 8085b16:	e7d5      	b.n	8085ac4 <_ZN5Print10printFloatEdh+0x104>
            val = n;
 8085b18:	4639      	mov	r1, r7
        size_t t = 0;
 8085b1a:	2300      	movs	r3, #0
 8085b1c:	e7e6      	b.n	8085aec <_ZN5Print10printFloatEdh+0x12c>
 8085b1e:	bf00      	nop
 8085b20:	0808bb97 	.word	0x0808bb97
 8085b24:	7fefffff 	.word	0x7fefffff
 8085b28:	0808bb9b 	.word	0x0808bb9b
 8085b2c:	41efffff 	.word	0x41efffff
 8085b30:	0808bb9f 	.word	0x0808bb9f
 8085b34:	c1efffff 	.word	0xc1efffff
 8085b38:	3fe00000 	.word	0x3fe00000
 8085b3c:	40240000 	.word	0x40240000
 8085b40:	0808b4c7 	.word	0x0808b4c7

08085b44 <_ZN5Print7printlnEdi>:
{
 8085b44:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return printFloat(n, digits);
 8085b46:	f89d 1018 	ldrb.w	r1, [sp, #24]
{
 8085b4a:	4605      	mov	r5, r0
  return printFloat(n, digits);
 8085b4c:	9100      	str	r1, [sp, #0]
 8085b4e:	f7ff ff37 	bl	80859c0 <_ZN5Print10printFloatEdh>
 8085b52:	4604      	mov	r4, r0
  n += println();
 8085b54:	4628      	mov	r0, r5
 8085b56:	f7ff ff00 	bl	808595a <_ZN5Print7printlnEv>
}
 8085b5a:	4420      	add	r0, r4
 8085b5c:	b003      	add	sp, #12
 8085b5e:	bd30      	pop	{r4, r5, pc}

08085b60 <_ZN5Print7printlnEfi>:
{
 8085b60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8085b62:	4604      	mov	r4, r0
    return println((double)num, digits);
 8085b64:	4608      	mov	r0, r1
{
 8085b66:	4615      	mov	r5, r2
    return println((double)num, digits);
 8085b68:	f004 f980 	bl	8089e6c <__aeabi_f2d>
 8085b6c:	9500      	str	r5, [sp, #0]
 8085b6e:	4602      	mov	r2, r0
 8085b70:	460b      	mov	r3, r1
 8085b72:	4620      	mov	r0, r4
 8085b74:	f7ff ffe6 	bl	8085b44 <_ZN5Print7printlnEdi>
}
 8085b78:	b003      	add	sp, #12
 8085b7a:	bd30      	pop	{r4, r5, pc}

08085b7c <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 8085b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8085b80:	b086      	sub	sp, #24
 8085b82:	af00      	add	r7, sp, #0
 8085b84:	4605      	mov	r5, r0
 8085b86:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 8085b88:	1d38      	adds	r0, r7, #4
 8085b8a:	2114      	movs	r1, #20
{
 8085b8c:	4614      	mov	r4, r2
    va_copy(args2, args);
 8085b8e:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 8085b90:	f7ff fb1e 	bl	80851d0 <vsnprintf>

    if (n<bufsize)
 8085b94:	2813      	cmp	r0, #19
 8085b96:	d80e      	bhi.n	8085bb6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 8085b98:	4628      	mov	r0, r5
 8085b9a:	1d39      	adds	r1, r7, #4
 8085b9c:	f7ff fec6 	bl	808592c <_ZN5Print5writeEPKc>
 8085ba0:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 8085ba2:	b11e      	cbz	r6, 8085bac <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 8085ba4:	4628      	mov	r0, r5
 8085ba6:	f7ff fed8 	bl	808595a <_ZN5Print7printlnEv>
 8085baa:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 8085bac:	4620      	mov	r0, r4
 8085bae:	3718      	adds	r7, #24
 8085bb0:	46bd      	mov	sp, r7
 8085bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 8085bb6:	f100 0308 	add.w	r3, r0, #8
 8085bba:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 8085bbe:	46e8      	mov	r8, sp
        char bigger[n+1];
 8085bc0:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 8085bc4:	4622      	mov	r2, r4
 8085bc6:	1c41      	adds	r1, r0, #1
 8085bc8:	683b      	ldr	r3, [r7, #0]
 8085bca:	4668      	mov	r0, sp
 8085bcc:	f7ff fb00 	bl	80851d0 <vsnprintf>
  return write(str);
 8085bd0:	4669      	mov	r1, sp
 8085bd2:	4628      	mov	r0, r5
 8085bd4:	f7ff feaa 	bl	808592c <_ZN5Print5writeEPKc>
 8085bd8:	4604      	mov	r4, r0
 8085bda:	46c5      	mov	sp, r8
 8085bdc:	e7e1      	b.n	8085ba2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

08085bde <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 8085bde:	6880      	ldr	r0, [r0, #8]
 8085be0:	6803      	ldr	r3, [r0, #0]
 8085be2:	68db      	ldr	r3, [r3, #12]
 8085be4:	4718      	bx	r3

08085be6 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 8085be6:	4770      	bx	lr

08085be8 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 8085be8:	4608      	mov	r0, r1
 8085bea:	b111      	cbz	r1, 8085bf2 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 8085bec:	680b      	ldr	r3, [r1, #0]
 8085bee:	685b      	ldr	r3, [r3, #4]
 8085bf0:	4718      	bx	r3
}
 8085bf2:	4770      	bx	lr

08085bf4 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 8085bf4:	4770      	bx	lr

08085bf6 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 8085bf6:	4770      	bx	lr

08085bf8 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 8085bf8:	4770      	bx	lr

08085bfa <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
 8085bfa:	b538      	push	{r3, r4, r5, lr}
 8085bfc:	4604      	mov	r4, r0
 8085bfe:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 8085c00:	6800      	ldr	r0, [r0, #0]
 8085c02:	212e      	movs	r1, #46	; 0x2e
 8085c04:	f005 f889 	bl	808ad1a <strchrnul>
    size = s - category;
 8085c08:	6823      	ldr	r3, [r4, #0]
    const char *s = strchrnul(category, '.');
 8085c0a:	4602      	mov	r2, r0
    size = s - category;
 8085c0c:	1ac0      	subs	r0, r0, r3
 8085c0e:	6028      	str	r0, [r5, #0]
    if (size) {
 8085c10:	b120      	cbz	r0, 8085c1c <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x22>
        if (*s) {
 8085c12:	7813      	ldrb	r3, [r2, #0]
 8085c14:	b103      	cbz	r3, 8085c18 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1e>
            ++s;
 8085c16:	3201      	adds	r2, #1
 8085c18:	6820      	ldr	r0, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8085c1a:	6022      	str	r2, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
}
 8085c1c:	bd38      	pop	{r3, r4, r5, pc}

08085c1e <_ZN5spark16JSONStreamWriterD0Ev>:
 8085c1e:	b510      	push	{r4, lr}
 8085c20:	4604      	mov	r4, r0
 8085c22:	210c      	movs	r1, #12
 8085c24:	f002 fc6b 	bl	80884fe <_ZdlPvj>
 8085c28:	4620      	mov	r0, r4
 8085c2a:	bd10      	pop	{r4, pc}

08085c2c <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 8085c2c:	b510      	push	{r4, lr}
 8085c2e:	4604      	mov	r4, r0
 8085c30:	2104      	movs	r1, #4
 8085c32:	f002 fc64 	bl	80884fe <_ZdlPvj>
 8085c36:	4620      	mov	r0, r4
 8085c38:	bd10      	pop	{r4, pc}

08085c3a <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 8085c3a:	b510      	push	{r4, lr}
 8085c3c:	4604      	mov	r4, r0
 8085c3e:	2104      	movs	r1, #4
 8085c40:	f002 fc5d 	bl	80884fe <_ZdlPvj>
 8085c44:	4620      	mov	r0, r4
 8085c46:	bd10      	pop	{r4, pc}

08085c48 <_ZN14RecursiveMutex4lockEv.isra.0>:
    void lock() { os_mutex_recursive_lock(handle_); }
 8085c48:	f7fe bfea 	b.w	8084c20 <os_mutex_recursive_lock>

08085c4c <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 8085c4c:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 8085c4e:	f005 f86e 	bl	808ad2e <strcmp>
}
 8085c52:	fab0 f080 	clz	r0, r0
 8085c56:	0940      	lsrs	r0, r0, #5
 8085c58:	bd08      	pop	{r3, pc}

08085c5a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 8085c5a:	b510      	push	{r4, lr}
 8085c5c:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
 8085c5e:	f001 fdd5 	bl	808780c <_Z16_fetch_usbserialv>
 8085c62:	4284      	cmp	r4, r0
 8085c64:	d105      	bne.n	8085c72 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 8085c66:	f001 fdd1 	bl	808780c <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
 8085c6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        USBSerial1.end();
 8085c6e:	f001 bdb3 	b.w	80877d8 <_ZN9USBSerial3endEv>
    if (stream == &USBSerial1) {
 8085c72:	f001 fe09 	bl	8087888 <_Z17_fetch_usbserial1v>
 8085c76:	4284      	cmp	r4, r0
 8085c78:	d102      	bne.n	8085c80 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x26>
        USBSerial1.end();
 8085c7a:	f001 fe05 	bl	8087888 <_Z17_fetch_usbserial1v>
 8085c7e:	e7f4      	b.n	8085c6a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x10>
    if (stream == &Serial1) {
 8085c80:	f001 ff72 	bl	8087b68 <_Z22__fetch_global_Serial1v>
 8085c84:	4284      	cmp	r4, r0
 8085c86:	d105      	bne.n	8085c94 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
        Serial1.end();
 8085c88:	f001 ff6e 	bl	8087b68 <_Z22__fetch_global_Serial1v>
}
 8085c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 8085c90:	f001 bf67 	b.w	8087b62 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 8085c94:	b12c      	cbz	r4, 8085ca2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x48>
 8085c96:	6823      	ldr	r3, [r4, #0]
 8085c98:	4620      	mov	r0, r4
}
 8085c9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8085c9e:	685b      	ldr	r3, [r3, #4]
 8085ca0:	4718      	bx	r3
 8085ca2:	bd10      	pop	{r4, pc}

08085ca4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8085ca4:	680b      	ldr	r3, [r1, #0]
 8085ca6:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 8085ca8:	684b      	ldr	r3, [r1, #4]
 8085caa:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 8085cac:	b113      	cbz	r3, 8085cb4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
 8085cae:	685a      	ldr	r2, [r3, #4]
 8085cb0:	3201      	adds	r2, #1
 8085cb2:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8085cb4:	4770      	bx	lr

08085cb6 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 8085cb6:	b538      	push	{r3, r4, r5, lr}
 8085cb8:	4605      	mov	r5, r0
    return value(val, strlen(val));
 8085cba:	4608      	mov	r0, r1
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 8085cbc:	460c      	mov	r4, r1
    return value(val, strlen(val));
 8085cbe:	f005 f864 	bl	808ad8a <strlen>
 8085cc2:	4621      	mov	r1, r4
 8085cc4:	4602      	mov	r2, r0
 8085cc6:	4628      	mov	r0, r5
}
 8085cc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return value(val, strlen(val));
 8085ccc:	f002 ba75 	b.w	80881ba <_ZN5spark10JSONWriter5valueEPKcj>

08085cd0 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 8085cd0:	b570      	push	{r4, r5, r6, lr}
 8085cd2:	4604      	mov	r4, r0
    write(str, strlen(str));
 8085cd4:	4608      	mov	r0, r1
inline void spark::StreamLogHandler::write(const char *str) {
 8085cd6:	460d      	mov	r5, r1
    write(str, strlen(str));
 8085cd8:	f005 f857 	bl	808ad8a <strlen>
 8085cdc:	6823      	ldr	r3, [r4, #0]
 8085cde:	4602      	mov	r2, r0
 8085ce0:	4629      	mov	r1, r5
 8085ce2:	4620      	mov	r0, r4
}
 8085ce4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    write(str, strlen(str));
 8085ce8:	68db      	ldr	r3, [r3, #12]
 8085cea:	4718      	bx	r3

08085cec <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 8085cec:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 8085cee:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 8085cf0:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 8085cf4:	2201      	movs	r2, #1
 8085cf6:	68db      	ldr	r3, [r3, #12]
 8085cf8:	f10d 0107 	add.w	r1, sp, #7
 8085cfc:	4798      	blx	r3
}
 8085cfe:	b003      	add	sp, #12
 8085d00:	f85d fb04 	ldr.w	pc, [sp], #4

08085d04 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
 8085d04:	b40e      	push	{r1, r2, r3}
 8085d06:	b503      	push	{r0, r1, lr}
 8085d08:	ab03      	add	r3, sp, #12
 8085d0a:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
 8085d0e:	2100      	movs	r1, #0
 8085d10:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
 8085d12:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
 8085d14:	f7ff ff32 	bl	8085b7c <_ZN5Print7vprintfEbPKcSt9__va_list>
}
 8085d18:	b002      	add	sp, #8
 8085d1a:	f85d eb04 	ldr.w	lr, [sp], #4
 8085d1e:	b003      	add	sp, #12
 8085d20:	4770      	bx	lr

08085d22 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
 8085d22:	680a      	ldr	r2, [r1, #0]
 8085d24:	b510      	push	{r4, lr}
 8085d26:	6002      	str	r2, [r0, #0]
 8085d28:	684a      	ldr	r2, [r1, #4]
 8085d2a:	6042      	str	r2, [r0, #4]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 8085d2c:	2200      	movs	r2, #0
 8085d2e:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8085d32:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
 8085d34:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8085d36:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 8085d38:	6084      	str	r4, [r0, #8]
 8085d3a:	68cc      	ldr	r4, [r1, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8085d3c:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
 8085d3e:	60c4      	str	r4, [r0, #12]
 8085d40:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 8085d42:	610a      	str	r2, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
 8085d44:	6104      	str	r4, [r0, #16]
 8085d46:	bd10      	pop	{r4, pc}

08085d48 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 8085d48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 8085d4c:	f04f 0a14 	mov.w	sl, #20
 8085d50:	e9d0 8400 	ldrd	r8, r4, [r0]
 8085d54:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 8085d56:	4645      	mov	r5, r8
 8085d58:	fb0a f404 	mul.w	r4, sl, r4
 8085d5c:	9300      	str	r3, [sp, #0]
 8085d5e:	4b17      	ldr	r3, [pc, #92]	; (8085dbc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 8085d60:	10a4      	asrs	r4, r4, #2
 8085d62:	435c      	muls	r4, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 8085d64:	2c00      	cmp	r4, #0
 8085d66:	dd21      	ble.n	8085dac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
 8085d68:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 8085d6a:	fb0a f006 	mul.w	r0, sl, r6
 8085d6e:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 8085d72:	f8b9 b004 	ldrh.w	fp, [r9, #4]
 8085d76:	463a      	mov	r2, r7
 8085d78:	455f      	cmp	r7, fp
 8085d7a:	bf28      	it	cs
 8085d7c:	465a      	movcs	r2, fp
 8085d7e:	5828      	ldr	r0, [r5, r0]
 8085d80:	9101      	str	r1, [sp, #4]
 8085d82:	f005 f80a 	bl	808ad9a <strncmp>
                if (cmp == 0) {
 8085d86:	2800      	cmp	r0, #0
 8085d88:	f04f 0301 	mov.w	r3, #1
 8085d8c:	9901      	ldr	r1, [sp, #4]
 8085d8e:	d10b      	bne.n	8085da8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
 8085d90:	455f      	cmp	r7, fp
 8085d92:	d103      	bne.n	8085d9c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 8085d94:	9a00      	ldr	r2, [sp, #0]
 8085d96:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 8085d98:	4634      	mov	r4, r6
 8085d9a:	e7e3      	b.n	8085d64 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 8085d9c:	d9fc      	bls.n	8085d98 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 8085d9e:	1ba6      	subs	r6, r4, r6
	      ++__first;
 8085da0:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
 8085da4:	3e01      	subs	r6, #1
 8085da6:	e7f7      	b.n	8085d98 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
 8085da8:	dbf9      	blt.n	8085d9e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
 8085daa:	e7f5      	b.n	8085d98 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
 8085dac:	eba5 0508 	sub.w	r5, r5, r8
}
 8085db0:	4802      	ldr	r0, [pc, #8]	; (8085dbc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 8085db2:	10ad      	asrs	r5, r5, #2
 8085db4:	4368      	muls	r0, r5
 8085db6:	b003      	add	sp, #12
 8085db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8085dbc:	cccccccd 	.word	0xcccccccd

08085dc0 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 8085dc0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 8085dc2:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 8085dc4:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 8085dc6:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 8085dc8:	b303      	cbz	r3, 8085e0c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 8085dca:	b1f9      	cbz	r1, 8085e0c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 8085dcc:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 8085dce:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 8085dd2:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 8085dd4:	a903      	add	r1, sp, #12
 8085dd6:	a801      	add	r0, sp, #4
 8085dd8:	f7ff ff0f 	bl	8085bfa <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 8085ddc:	4601      	mov	r1, r0
 8085dde:	b1a8      	cbz	r0, 8085e0c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 8085de0:	f10d 030b 	add.w	r3, sp, #11
 8085de4:	4620      	mov	r0, r4
 8085de6:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 8085de8:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 8085dec:	f7ff ffac 	bl	8085d48 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 8085df0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8085df4:	b153      	cbz	r3, 8085e0c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 8085df6:	2314      	movs	r3, #20
 8085df8:	6824      	ldr	r4, [r4, #0]
 8085dfa:	fb03 4400 	mla	r4, r3, r0, r4
            if (node.level >= 0) {
 8085dfe:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 8085e02:	3408      	adds	r4, #8
            if (node.level >= 0) {
 8085e04:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 8085e06:	bfa8      	it	ge
 8085e08:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
 8085e0a:	e7e3      	b.n	8085dd4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 8085e0c:	4628      	mov	r0, r5
 8085e0e:	b004      	add	sp, #16
 8085e10:	bd70      	pop	{r4, r5, r6, pc}
	...

08085e14 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 8085e14:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 8085e16:	4c0a      	ldr	r4, [pc, #40]	; (8085e40 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 8085e18:	7823      	ldrb	r3, [r4, #0]
 8085e1a:	f3bf 8f5b 	dmb	ish
 8085e1e:	07db      	lsls	r3, r3, #31
 8085e20:	d40b      	bmi.n	8085e3a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
 8085e22:	4620      	mov	r0, r4
 8085e24:	f7fa f95a 	bl	80800dc <__cxa_guard_acquire>
 8085e28:	b138      	cbz	r0, 8085e3a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
 8085e2a:	4620      	mov	r0, r4
 8085e2c:	f7fa f95b 	bl	80800e6 <__cxa_guard_release>
 8085e30:	4a04      	ldr	r2, [pc, #16]	; (8085e44 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
 8085e32:	4905      	ldr	r1, [pc, #20]	; (8085e48 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
 8085e34:	4805      	ldr	r0, [pc, #20]	; (8085e4c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
 8085e36:	f002 fb5d 	bl	80884f4 <__aeabi_atexit>
}
 8085e3a:	4804      	ldr	r0, [pc, #16]	; (8085e4c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
 8085e3c:	bd10      	pop	{r4, pc}
 8085e3e:	bf00      	nop
 8085e40:	20000408 	.word	0x20000408
 8085e44:	20000130 	.word	0x20000130
 8085e48:	08085bf7 	.word	0x08085bf7
 8085e4c:	200000b8 	.word	0x200000b8

08085e50 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 8085e50:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 8085e52:	4c0a      	ldr	r4, [pc, #40]	; (8085e7c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 8085e54:	7823      	ldrb	r3, [r4, #0]
 8085e56:	f3bf 8f5b 	dmb	ish
 8085e5a:	07db      	lsls	r3, r3, #31
 8085e5c:	d40b      	bmi.n	8085e76 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
 8085e5e:	4620      	mov	r0, r4
 8085e60:	f7fa f93c 	bl	80800dc <__cxa_guard_acquire>
 8085e64:	b138      	cbz	r0, 8085e76 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
 8085e66:	4620      	mov	r0, r4
 8085e68:	f7fa f93d 	bl	80800e6 <__cxa_guard_release>
 8085e6c:	4a04      	ldr	r2, [pc, #16]	; (8085e80 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
 8085e6e:	4905      	ldr	r1, [pc, #20]	; (8085e84 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
 8085e70:	4805      	ldr	r0, [pc, #20]	; (8085e88 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
 8085e72:	f002 fb3f 	bl	80884f4 <__aeabi_atexit>
    return &factory;
}
 8085e76:	4804      	ldr	r0, [pc, #16]	; (8085e88 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
 8085e78:	bd10      	pop	{r4, pc}
 8085e7a:	bf00      	nop
 8085e7c:	2000040c 	.word	0x2000040c
 8085e80:	20000130 	.word	0x20000130
 8085e84:	08085bf5 	.word	0x08085bf5
 8085e88:	200000bc 	.word	0x200000bc

08085e8c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 8085e8c:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 8085e8e:	2500      	movs	r5, #0
 8085e90:	4604      	mov	r4, r0
 8085e92:	e9c0 5500 	strd	r5, r5, [r0]
 8085e96:	e9c0 5504 	strd	r5, r5, [r0, #16]
 8085e9a:	6085      	str	r5, [r0, #8]
 8085e9c:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
 8085e9e:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
 8085ea2:	f7fe fead 	bl	8084c00 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 8085ea6:	f7ff ffb5 	bl	8085e14 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 8085eaa:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 8085eac:	f7ff ffd0 	bl	8085e50 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 8085eb0:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 8085eb2:	6220      	str	r0, [r4, #32]
}
 8085eb4:	4620      	mov	r0, r4
 8085eb6:	bd38      	pop	{r3, r4, r5, pc}

08085eb8 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 8085eb8:	b510      	push	{r4, lr}
    static LogManager mgr;
 8085eba:	4c0b      	ldr	r4, [pc, #44]	; (8085ee8 <_ZN5spark10LogManager8instanceEv+0x30>)
 8085ebc:	7823      	ldrb	r3, [r4, #0]
 8085ebe:	f3bf 8f5b 	dmb	ish
 8085ec2:	07db      	lsls	r3, r3, #31
 8085ec4:	d40e      	bmi.n	8085ee4 <_ZN5spark10LogManager8instanceEv+0x2c>
 8085ec6:	4620      	mov	r0, r4
 8085ec8:	f7fa f908 	bl	80800dc <__cxa_guard_acquire>
 8085ecc:	b150      	cbz	r0, 8085ee4 <_ZN5spark10LogManager8instanceEv+0x2c>
 8085ece:	4807      	ldr	r0, [pc, #28]	; (8085eec <_ZN5spark10LogManager8instanceEv+0x34>)
 8085ed0:	f7ff ffdc 	bl	8085e8c <_ZN5spark10LogManagerC1Ev>
 8085ed4:	4620      	mov	r0, r4
 8085ed6:	f7fa f906 	bl	80800e6 <__cxa_guard_release>
 8085eda:	4a05      	ldr	r2, [pc, #20]	; (8085ef0 <_ZN5spark10LogManager8instanceEv+0x38>)
 8085edc:	4905      	ldr	r1, [pc, #20]	; (8085ef4 <_ZN5spark10LogManager8instanceEv+0x3c>)
 8085ede:	4803      	ldr	r0, [pc, #12]	; (8085eec <_ZN5spark10LogManager8instanceEv+0x34>)
 8085ee0:	f002 fb08 	bl	80884f4 <__aeabi_atexit>
    return &mgr;
}
 8085ee4:	4801      	ldr	r0, [pc, #4]	; (8085eec <_ZN5spark10LogManager8instanceEv+0x34>)
 8085ee6:	bd10      	pop	{r4, pc}
 8085ee8:	20000404 	.word	0x20000404
 8085eec:	20000414 	.word	0x20000414
 8085ef0:	20000130 	.word	0x20000130
 8085ef4:	08086405 	.word	0x08086405

08085ef8 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 8085ef8:	2300      	movs	r3, #0
 8085efa:	4a02      	ldr	r2, [pc, #8]	; (8085f04 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 8085efc:	4902      	ldr	r1, [pc, #8]	; (8085f08 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 8085efe:	4803      	ldr	r0, [pc, #12]	; (8085f0c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 8085f00:	f7ff b80e 	b.w	8084f20 <log_set_callbacks>
 8085f04:	08086241 	.word	0x08086241
 8085f08:	080861cd 	.word	0x080861cd
 8085f0c:	0808614d 	.word	0x0808614d

08085f10 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 8085f10:	2300      	movs	r3, #0
 8085f12:	461a      	mov	r2, r3
 8085f14:	4619      	mov	r1, r3
 8085f16:	4618      	mov	r0, r3
 8085f18:	f7ff b802 	b.w	8084f20 <log_set_callbacks>

08085f1c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 8085f1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8085f1e:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 8085f20:	688d      	ldr	r5, [r1, #8]
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 8085f22:	4668      	mov	r0, sp
 8085f24:	f7ff febe 	bl	8085ca4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 8085f28:	466a      	mov	r2, sp
 8085f2a:	4629      	mov	r1, r5
 8085f2c:	4620      	mov	r0, r4
 8085f2e:	f002 f869 	bl	8088004 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 8085f32:	a801      	add	r0, sp, #4
 8085f34:	f7fa fcdc 	bl	80808f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 8085f38:	4620      	mov	r0, r4
 8085f3a:	b003      	add	sp, #12
 8085f3c:	bd30      	pop	{r4, r5, pc}

08085f3e <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 8085f3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8085f40:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 8085f42:	68cd      	ldr	r5, [r1, #12]
 8085f44:	4668      	mov	r0, sp
 8085f46:	f7ff fead 	bl	8085ca4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 8085f4a:	466a      	mov	r2, sp
 8085f4c:	4629      	mov	r1, r5
 8085f4e:	4620      	mov	r0, r4
 8085f50:	f002 f834 	bl	8087fbc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 8085f54:	a801      	add	r0, sp, #4
 8085f56:	f7fa fccb 	bl	80808f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 8085f5a:	4620      	mov	r0, r4
 8085f5c:	b003      	add	sp, #12
 8085f5e:	bd30      	pop	{r4, r5, pc}

08085f60 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 8085f60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8085f62:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 8085f64:	690d      	ldr	r5, [r1, #16]
 8085f66:	4668      	mov	r0, sp
 8085f68:	f7ff fe9c 	bl	8085ca4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 8085f6c:	466a      	mov	r2, sp
 8085f6e:	4629      	mov	r1, r5
 8085f70:	4620      	mov	r0, r4
 8085f72:	f001 ffca 	bl	8087f0a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 8085f76:	a801      	add	r0, sp, #4
 8085f78:	f7fa fcba 	bl	80808f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 8085f7c:	4620      	mov	r0, r4
 8085f7e:	b003      	add	sp, #12
 8085f80:	bd30      	pop	{r4, r5, pc}
	...

08085f84 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 8085f84:	b570      	push	{r4, r5, r6, lr}
 8085f86:	b08a      	sub	sp, #40	; 0x28
 8085f88:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 8085f8a:	4601      	mov	r1, r0
 8085f8c:	a804      	add	r0, sp, #16
 8085f8e:	f7ff ffc5 	bl	8085f1c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 8085f92:	4e14      	ldr	r6, [pc, #80]	; (8085fe4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 8085f94:	a804      	add	r0, sp, #16
 8085f96:	f002 f84d 	bl	8088034 <_ZN5spark18JSONObjectIterator4nextEv>
 8085f9a:	b1e8      	cbz	r0, 8085fd8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 8085f9c:	4668      	mov	r0, sp
 8085f9e:	a904      	add	r1, sp, #16
 8085fa0:	f7ff ffcd 	bl	8085f3e <_ZNK5spark18JSONObjectIterator4nameEv>
 8085fa4:	4631      	mov	r1, r6
 8085fa6:	9802      	ldr	r0, [sp, #8]
 8085fa8:	f7ff fe50 	bl	8085c4c <_ZNK5spark10JSONStringeqEPKc.isra.0>
 8085fac:	4604      	mov	r4, r0
 8085fae:	b110      	cbz	r0, 8085fb6 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 8085fb0:	1e2c      	subs	r4, r5, #0
 8085fb2:	bf18      	it	ne
 8085fb4:	2401      	movne	r4, #1
 8085fb6:	a801      	add	r0, sp, #4
 8085fb8:	f7fa fc9a 	bl	80808f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8085fbc:	2c00      	cmp	r4, #0
 8085fbe:	d0e9      	beq.n	8085f94 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 8085fc0:	4668      	mov	r0, sp
 8085fc2:	a904      	add	r1, sp, #16
 8085fc4:	f7ff ffcc 	bl	8085f60 <_ZNK5spark18JSONObjectIterator5valueEv>
 8085fc8:	4668      	mov	r0, sp
 8085fca:	f001 ffd5 	bl	8087f78 <_ZNK5spark9JSONValue5toIntEv>
 8085fce:	6028      	str	r0, [r5, #0]
 8085fd0:	a801      	add	r0, sp, #4
 8085fd2:	f7fa fc8d 	bl	80808f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8085fd6:	e7dd      	b.n	8085f94 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 8085fd8:	a805      	add	r0, sp, #20
 8085fda:	f7fa fc89 	bl	80808f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 8085fde:	b00a      	add	sp, #40	; 0x28
 8085fe0:	bd70      	pop	{r4, r5, r6, pc}
 8085fe2:	bf00      	nop
 8085fe4:	0808bba3 	.word	0x0808bba3

08085fe8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 8085fe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8085fea:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 8085fec:	491b      	ldr	r1, [pc, #108]	; (808605c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x74>)
 8085fee:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 8085ff0:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 8085ff2:	f004 fe9c 	bl	808ad2e <strcmp>
 8085ff6:	b950      	cbnz	r0, 808600e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
 8085ff8:	f001 fc08 	bl	808780c <_Z16_fetch_usbserialv>
 8085ffc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8086000:	f001 fbe6 	bl	80877d0 <_ZN9USBSerial5beginEl>
}
 8086004:	b003      	add	sp, #12
 8086006:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
 808600a:	f001 bbff 	b.w	808780c <_Z16_fetch_usbserialv>
    if (strcmp(type, "USBSerial1") == 0) {
 808600e:	4620      	mov	r0, r4
 8086010:	4913      	ldr	r1, [pc, #76]	; (8086060 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x78>)
 8086012:	f004 fe8c 	bl	808ad2e <strcmp>
 8086016:	b950      	cbnz	r0, 808602e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x46>
        USBSerial1.begin();
 8086018:	f001 fc36 	bl	8087888 <_Z17_fetch_usbserial1v>
 808601c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8086020:	f001 fbd6 	bl	80877d0 <_ZN9USBSerial5beginEl>
}
 8086024:	b003      	add	sp, #12
 8086026:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &USBSerial1;
 808602a:	f001 bc2d 	b.w	8087888 <_Z17_fetch_usbserial1v>
    if (strcmp(type, "Serial1") == 0) {
 808602e:	4620      	mov	r0, r4
 8086030:	490c      	ldr	r1, [pc, #48]	; (8086064 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x7c>)
 8086032:	f004 fe7c 	bl	808ad2e <strcmp>
 8086036:	b978      	cbnz	r0, 8086058 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x70>
        int baud = 9600;
 8086038:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 808603c:	a901      	add	r1, sp, #4
 808603e:	4628      	mov	r0, r5
        int baud = 9600;
 8086040:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 8086042:	f7ff ff9f 	bl	8085f84 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 8086046:	f001 fd8f 	bl	8087b68 <_Z22__fetch_global_Serial1v>
 808604a:	9901      	ldr	r1, [sp, #4]
 808604c:	f001 fd86 	bl	8087b5c <_ZN11USARTSerial5beginEm>
        return &Serial1;
 8086050:	f001 fd8a 	bl	8087b68 <_Z22__fetch_global_Serial1v>
}
 8086054:	b003      	add	sp, #12
 8086056:	bd30      	pop	{r4, r5, pc}
    return nullptr;
 8086058:	2000      	movs	r0, #0
 808605a:	e7fb      	b.n	8086054 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x6c>
 808605c:	0808bba8 	.word	0x0808bba8
 8086060:	0808bbaf 	.word	0x0808bbaf
 8086064:	0808bbb2 	.word	0x0808bbb2

08086068 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 8086068:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 808606a:	2614      	movs	r6, #20
 808606c:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 8086070:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 8086072:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 8086076:	42ae      	cmp	r6, r5
 8086078:	d005      	beq.n	8086086 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 808607a:	f105 0008 	add.w	r0, r5, #8
 808607e:	f7ff fff3 	bl	8086068 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 8086082:	3514      	adds	r5, #20
 8086084:	e7f7      	b.n	8086076 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 8086086:	6820      	ldr	r0, [r4, #0]
 8086088:	f7ff f882 	bl	8085190 <free>
}
 808608c:	4620      	mov	r0, r4
 808608e:	bd70      	pop	{r4, r5, r6, pc}

08086090 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 8086090:	b570      	push	{r4, r5, r6, lr}
 8086092:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 8086094:	e9d0 5300 	ldrd	r5, r3, [r0]
 8086098:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 808609c:	42ae      	cmp	r6, r5
 808609e:	d004      	beq.n	80860aa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 80860a0:	4628      	mov	r0, r5
 80860a2:	f7ff fa9b 	bl	80855dc <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 80860a6:	3510      	adds	r5, #16
 80860a8:	e7f8      	b.n	808609c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 80860aa:	6820      	ldr	r0, [r4, #0]
 80860ac:	f7ff f870 	bl	8085190 <free>
}
 80860b0:	4620      	mov	r0, r4
 80860b2:	bd70      	pop	{r4, r5, r6, pc}

080860b4 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 80860b4:	b510      	push	{r4, lr}
 80860b6:	4604      	mov	r4, r0
 80860b8:	300c      	adds	r0, #12
 80860ba:	f7ff ffd5 	bl	8086068 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80860be:	4620      	mov	r0, r4
 80860c0:	f7ff ffe6 	bl	8086090 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 80860c4:	4620      	mov	r0, r4
 80860c6:	bd10      	pop	{r4, pc}

080860c8 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 80860c8:	b510      	push	{r4, lr}
 80860ca:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 80860cc:	4b03      	ldr	r3, [pc, #12]	; (80860dc <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 80860ce:	f840 3b04 	str.w	r3, [r0], #4
 80860d2:	f7ff ffef 	bl	80860b4 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 80860d6:	4620      	mov	r0, r4
 80860d8:	bd10      	pop	{r4, pc}
 80860da:	bf00      	nop
 80860dc:	0808b62c 	.word	0x0808b62c

080860e0 <_ZN5spark16StreamLogHandlerD0Ev>:
 80860e0:	b510      	push	{r4, lr}
 80860e2:	4604      	mov	r4, r0
 80860e4:	f7ff fff0 	bl	80860c8 <_ZN5spark16StreamLogHandlerD1Ev>
 80860e8:	4620      	mov	r0, r4
 80860ea:	2124      	movs	r1, #36	; 0x24
 80860ec:	f002 fa07 	bl	80884fe <_ZdlPvj>
 80860f0:	4620      	mov	r0, r4
 80860f2:	bd10      	pop	{r4, pc}

080860f4 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 80860f4:	b510      	push	{r4, lr}
 80860f6:	4604      	mov	r4, r0
 80860f8:	4b02      	ldr	r3, [pc, #8]	; (8086104 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 80860fa:	6003      	str	r3, [r0, #0]
 80860fc:	f7ff ffe4 	bl	80860c8 <_ZN5spark16StreamLogHandlerD1Ev>
 8086100:	4620      	mov	r0, r4
 8086102:	bd10      	pop	{r4, pc}
 8086104:	0808bc48 	.word	0x0808bc48

08086108 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 8086108:	b510      	push	{r4, lr}
 808610a:	4604      	mov	r4, r0
 808610c:	f7ff fff2 	bl	80860f4 <_ZN5spark20JSONStreamLogHandlerD1Ev>
 8086110:	4620      	mov	r0, r4
 8086112:	2124      	movs	r1, #36	; 0x24
 8086114:	f002 f9f3 	bl	80884fe <_ZdlPvj>
 8086118:	4620      	mov	r0, r4
 808611a:	bd10      	pop	{r4, pc}

0808611c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 808611c:	2200      	movs	r2, #0
 808611e:	e9c0 2200 	strd	r2, r2, [r0]
 8086122:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 8086124:	b510      	push	{r4, lr}
 8086126:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8086128:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 808612a:	6004      	str	r4, [r0, #0]
 808612c:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 808612e:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 8086130:	6044      	str	r4, [r0, #4]
 8086132:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8086134:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 8086136:	6084      	str	r4, [r0, #8]
}
 8086138:	bd10      	pop	{r4, pc}

0808613a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
 808613a:	b510      	push	{r4, lr}
 808613c:	4604      	mov	r4, r0
    void unlock() { os_mutex_recursive_unlock(handle_); }
 808613e:	6803      	ldr	r3, [r0, #0]
 8086140:	6818      	ldr	r0, [r3, #0]
 8086142:	f7fe fd75 	bl	8084c30 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 8086146:	4620      	mov	r0, r4
 8086148:	bd10      	pop	{r4, pc}
	...

0808614c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 808614c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8086150:	b087      	sub	sp, #28
 8086152:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 8086154:	4b1c      	ldr	r3, [pc, #112]	; (80861c8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 8086156:	4680      	mov	r8, r0
 8086158:	685b      	ldr	r3, [r3, #4]
 808615a:	4689      	mov	r9, r1
 808615c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8086160:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 8086162:	b96b      	cbnz	r3, 8086180 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 8086164:	f7ff fea8 	bl	8085eb8 <_ZN5spark10LogManager8instanceEv>
 8086168:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 808616a:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
 808616e:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8086170:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
 8086172:	f7ff fd69 	bl	8085c48 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
 8086176:	7b23      	ldrb	r3, [r4, #12]
 8086178:	b12b      	cbz	r3, 8086186 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 808617a:	a805      	add	r0, sp, #20
 808617c:	f7ff ffdd 	bl	808613a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 8086180:	b007      	add	sp, #28
 8086182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 8086186:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 8086188:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 808618c:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 808618e:	e9d4 5300 	ldrd	r5, r3, [r4]
 8086192:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 8086196:	45aa      	cmp	sl, r5
 8086198:	d012      	beq.n	80861c0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 808619a:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 808619e:	4631      	mov	r1, r6
 80861a0:	1d38      	adds	r0, r7, #4
 80861a2:	f7ff fe0d 	bl	8085dc0 <_ZNK5spark6detail9LogFilter5levelEPKc>
 80861a6:	4581      	cmp	r9, r0
 80861a8:	d3f5      	bcc.n	8086196 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 80861aa:	9a03      	ldr	r2, [sp, #12]
 80861ac:	683b      	ldr	r3, [r7, #0]
 80861ae:	9200      	str	r2, [sp, #0]
 80861b0:	f8d3 b008 	ldr.w	fp, [r3, #8]
 80861b4:	464a      	mov	r2, r9
 80861b6:	4633      	mov	r3, r6
 80861b8:	4641      	mov	r1, r8
 80861ba:	4638      	mov	r0, r7
 80861bc:	47d8      	blx	fp
 80861be:	e7ea      	b.n	8086196 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 80861c0:	2300      	movs	r3, #0
 80861c2:	7323      	strb	r3, [r4, #12]
 80861c4:	e7d9      	b.n	808617a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 80861c6:	bf00      	nop
 80861c8:	e000ed00 	.word	0xe000ed00

080861cc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 80861cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80861d0:	469b      	mov	fp, r3
 80861d2:	4b1a      	ldr	r3, [pc, #104]	; (808623c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 80861d4:	4680      	mov	r8, r0
 80861d6:	685b      	ldr	r3, [r3, #4]
 80861d8:	4689      	mov	r9, r1
 80861da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80861de:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
 80861e0:	b96b      	cbnz	r3, 80861fe <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 80861e2:	f7ff fe69 	bl	8085eb8 <_ZN5spark10LogManager8instanceEv>
 80861e6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 80861e8:	f100 0324 	add.w	r3, r0, #36	; 0x24
 80861ec:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80861ee:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 80861f0:	f7ff fd2a 	bl	8085c48 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
 80861f4:	7b23      	ldrb	r3, [r4, #12]
 80861f6:	b12b      	cbz	r3, 8086204 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 80861f8:	a801      	add	r0, sp, #4
 80861fa:	f7ff ff9e 	bl	808613a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 80861fe:	b003      	add	sp, #12
 8086200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 8086204:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 8086206:	b2f6      	uxtb	r6, r6
 8086208:	7323      	strb	r3, [r4, #12]
 808620a:	e9d4 5300 	ldrd	r5, r3, [r4]
 808620e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 8086212:	4555      	cmp	r5, sl
 8086214:	d00e      	beq.n	8086234 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 8086216:	f855 7b04 	ldr.w	r7, [r5], #4
 808621a:	4659      	mov	r1, fp
 808621c:	1d38      	adds	r0, r7, #4
 808621e:	f7ff fdcf 	bl	8085dc0 <_ZNK5spark6detail9LogFilter5levelEPKc>
 8086222:	4286      	cmp	r6, r0
 8086224:	d3f5      	bcc.n	8086212 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 8086226:	683b      	ldr	r3, [r7, #0]
 8086228:	464a      	mov	r2, r9
 808622a:	4641      	mov	r1, r8
 808622c:	4638      	mov	r0, r7
 808622e:	68db      	ldr	r3, [r3, #12]
 8086230:	4798      	blx	r3
 8086232:	e7ee      	b.n	8086212 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 8086234:	2300      	movs	r3, #0
 8086236:	7323      	strb	r3, [r4, #12]
 8086238:	e7de      	b.n	80861f8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 808623a:	bf00      	nop
 808623c:	e000ed00 	.word	0xe000ed00

08086240 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 8086240:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8086244:	4b16      	ldr	r3, [pc, #88]	; (80862a0 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 8086246:	4605      	mov	r5, r0
 8086248:	685b      	ldr	r3, [r3, #4]
 808624a:	460f      	mov	r7, r1
 808624c:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (HAL_IsISR()) {
 8086250:	bb1b      	cbnz	r3, 808629a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 8086252:	f7ff fe31 	bl	8085eb8 <_ZN5spark10LogManager8instanceEv>
 8086256:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 8086258:	f100 0324 	add.w	r3, r0, #36	; 0x24
 808625c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808625e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 8086260:	f7ff fcf2 	bl	8085c48 <_ZN14RecursiveMutex4lockEv.isra.0>
 8086264:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 8086268:	2446      	movs	r4, #70	; 0x46
 808626a:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 808626e:	45b0      	cmp	r8, r6
 8086270:	d109      	bne.n	8086286 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 8086272:	a801      	add	r0, sp, #4
 8086274:	f7ff ff61 	bl	808613a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 8086278:	42a5      	cmp	r5, r4
 808627a:	bfb4      	ite	lt
 808627c:	2000      	movlt	r0, #0
 808627e:	2001      	movge	r0, #1
}
 8086280:	b002      	add	sp, #8
 8086282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 8086286:	f856 0b04 	ldr.w	r0, [r6], #4
 808628a:	4639      	mov	r1, r7
 808628c:	3004      	adds	r0, #4
 808628e:	f7ff fd97 	bl	8085dc0 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 8086292:	4284      	cmp	r4, r0
 8086294:	bfa8      	it	ge
 8086296:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 8086298:	e7e9      	b.n	808626e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 808629a:	2000      	movs	r0, #0
 808629c:	e7f0      	b.n	8086280 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 808629e:	bf00      	nop
 80862a0:	e000ed00 	.word	0xe000ed00

080862a4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 80862a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80862a6:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 80862aa:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 80862ac:	4604      	mov	r4, r0
 80862ae:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80862b0:	db0d      	blt.n	80862ce <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
 80862b2:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
 80862b4:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 80862b6:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 80862b8:	dd04      	ble.n	80862c4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
 80862ba:	00b9      	lsls	r1, r7, #2
 80862bc:	f7fe ff70 	bl	80851a0 <realloc>
            if (!d) {
 80862c0:	b918      	cbnz	r0, 80862ca <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
 80862c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 80862c4:	f7fe ff64 	bl	8085190 <free>
        T* d = nullptr;
 80862c8:	2000      	movs	r0, #0
        data_ = d;
 80862ca:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 80862cc:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 80862ce:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
 80862d0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 80862d2:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
 80862d6:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 80862d8:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
 80862dc:	1d08      	adds	r0, r1, #4
 80862de:	f004 fcbf 	bl	808ac60 <memmove>
    new(p) T(std::move(value));
 80862e2:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
 80862e6:	6863      	ldr	r3, [r4, #4]
    return true;
 80862e8:	2001      	movs	r0, #1
    ++size_;
 80862ea:	3301      	adds	r3, #1
 80862ec:	6063      	str	r3, [r4, #4]
    return true;
 80862ee:	e7e8      	b.n	80862c2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

080862f0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 80862f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80862f2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 80862f4:	f100 0324 	add.w	r3, r0, #36	; 0x24
 80862f8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80862fa:	9301      	str	r3, [sp, #4]
bool spark::LogManager::addHandler(LogHandler *handler) {
 80862fc:	460d      	mov	r5, r1
      { _M_device.lock(); }
 80862fe:	f7ff fca3 	bl	8085c48 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
 8086302:	e9d4 3200 	ldrd	r3, r2, [r4]
 8086306:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
 808630a:	4293      	cmp	r3, r2
 808630c:	4619      	mov	r1, r3
 808630e:	d00a      	beq.n	8086326 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 8086310:	6809      	ldr	r1, [r1, #0]
 8086312:	3304      	adds	r3, #4
 8086314:	42a9      	cmp	r1, r5
 8086316:	d1f8      	bne.n	808630a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
 8086318:	a801      	add	r0, sp, #4
 808631a:	f7ff ff0e 	bl	808613a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 808631e:	2500      	movs	r5, #0
}
 8086320:	4628      	mov	r0, r5
 8086322:	b003      	add	sp, #12
 8086324:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 8086326:	4629      	mov	r1, r5
 8086328:	4620      	mov	r0, r4
 808632a:	f7ff ffbb 	bl	80862a4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
 808632e:	4605      	mov	r5, r0
 8086330:	2800      	cmp	r0, #0
 8086332:	d0f1      	beq.n	8086318 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 8086334:	6863      	ldr	r3, [r4, #4]
 8086336:	2b01      	cmp	r3, #1
 8086338:	d101      	bne.n	808633e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 808633a:	f7ff fddd 	bl	8085ef8 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 808633e:	a801      	add	r0, sp, #4
 8086340:	f7ff fefb 	bl	808613a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 8086344:	e7ec      	b.n	8086320 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

08086346 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 8086346:	460b      	mov	r3, r1
 8086348:	b570      	push	{r4, r5, r6, lr}
 808634a:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 808634c:	c805      	ldmia	r0, {r0, r2}
 808634e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 8086352:	4282      	cmp	r2, r0
 8086354:	d00f      	beq.n	8086376 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x30>
    move(p, p + 1, data_ + size_);
 8086356:	4601      	mov	r1, r0
            if (*p == value) {
 8086358:	681d      	ldr	r5, [r3, #0]
 808635a:	f851 6b04 	ldr.w	r6, [r1], #4
 808635e:	42ae      	cmp	r6, r5
 8086360:	d107      	bne.n	8086372 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>
        ::memmove(dest, p, (end - p) * sizeof(T));
 8086362:	1a52      	subs	r2, r2, r1
 8086364:	f004 fc7c 	bl	808ac60 <memmove>
    return true;
 8086368:	2001      	movs	r0, #1
    --size_;
 808636a:	6863      	ldr	r3, [r4, #4]
 808636c:	3b01      	subs	r3, #1
 808636e:	6063      	str	r3, [r4, #4]
}
 8086370:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
 8086372:	4608      	mov	r0, r1
 8086374:	e7ed      	b.n	8086352 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
        return false;
 8086376:	2000      	movs	r0, #0
 8086378:	e7fa      	b.n	8086370 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2a>

0808637a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 808637a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 808637c:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 808637e:	f100 0324 	add.w	r3, r0, #36	; 0x24
 8086382:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 8086384:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8086386:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
 8086388:	f7ff fc5e 	bl	8085c48 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 808638c:	4620      	mov	r0, r4
 808638e:	a901      	add	r1, sp, #4
 8086390:	f7ff ffd9 	bl	8086346 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 8086394:	b118      	cbz	r0, 808639e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 8086396:	6863      	ldr	r3, [r4, #4]
 8086398:	b90b      	cbnz	r3, 808639e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 808639a:	f7ff fdb9 	bl	8085f10 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 808639e:	a803      	add	r0, sp, #12
 80863a0:	f7ff fecb 	bl	808613a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 80863a4:	b004      	add	sp, #16
 80863a6:	bd10      	pop	{r4, pc}

080863a8 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 80863a8:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 80863aa:	b570      	push	{r4, r5, r6, lr}
 80863ac:	4604      	mov	r4, r0
 80863ae:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 80863b2:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 80863b6:	42ae      	cmp	r6, r5
 80863b8:	d015      	beq.n	80863e6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 80863ba:	4620      	mov	r0, r4
 80863bc:	f105 0110 	add.w	r1, r5, #16
 80863c0:	f7ff ffc1 	bl	8086346 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 80863c4:	6863      	ldr	r3, [r4, #4]
 80863c6:	b90b      	cbnz	r3, 80863cc <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 80863c8:	f7ff fda2 	bl	8085f10 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 80863cc:	69e0      	ldr	r0, [r4, #28]
 80863ce:	6929      	ldr	r1, [r5, #16]
 80863d0:	6803      	ldr	r3, [r0, #0]
 80863d2:	68db      	ldr	r3, [r3, #12]
 80863d4:	4798      	blx	r3
        if (h.stream) {
 80863d6:	6969      	ldr	r1, [r5, #20]
 80863d8:	b119      	cbz	r1, 80863e2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 80863da:	6a20      	ldr	r0, [r4, #32]
 80863dc:	6803      	ldr	r3, [r0, #0]
 80863de:	68db      	ldr	r3, [r3, #12]
 80863e0:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 80863e2:	3518      	adds	r5, #24
 80863e4:	e7e7      	b.n	80863b6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 80863e6:	2618      	movs	r6, #24
 80863e8:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 80863ec:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80863f0:	42ae      	cmp	r6, r5
 80863f2:	d004      	beq.n	80863fe <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 80863f4:	4628      	mov	r0, r5
 80863f6:	f7ff f8f1 	bl	80855dc <_ZN6StringD1Ev>
 80863fa:	3518      	adds	r5, #24
 80863fc:	e7f8      	b.n	80863f0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 80863fe:	2300      	movs	r3, #0
 8086400:	6163      	str	r3, [r4, #20]
}
 8086402:	bd70      	pop	{r4, r5, r6, pc}

08086404 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 8086404:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8086406:	4604      	mov	r4, r0
    resetSystemCallbacks();
 8086408:	f7ff fd82 	bl	8085f10 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 808640c:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8086410:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8086412:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 8086414:	f7ff fc18 	bl	8085c48 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
 8086418:	4620      	mov	r0, r4
 808641a:	f7ff ffc5 	bl	80863a8 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 808641e:	a801      	add	r0, sp, #4
 8086420:	f7ff fe8b 	bl	808613a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 8086424:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8086426:	b108      	cbz	r0, 808642c <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 8086428:	f7fe fbf2 	bl	8084c10 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 808642c:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 8086430:	2618      	movs	r6, #24
 8086432:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 8086436:	42ae      	cmp	r6, r5
 8086438:	d004      	beq.n	8086444 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 808643a:	4628      	mov	r0, r5
 808643c:	f7ff f8ce 	bl	80855dc <_ZN6StringD1Ev>
 8086440:	3518      	adds	r5, #24
 8086442:	e7f8      	b.n	8086436 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 8086444:	6920      	ldr	r0, [r4, #16]
 8086446:	f7fe fea3 	bl	8085190 <free>
 808644a:	6820      	ldr	r0, [r4, #0]
 808644c:	f7fe fea0 	bl	8085190 <free>
}
 8086450:	4620      	mov	r0, r4
 8086452:	b002      	add	sp, #8
 8086454:	bd70      	pop	{r4, r5, r6, pc}

08086456 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 8086456:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 8086458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808645a:	4604      	mov	r4, r0
 808645c:	460d      	mov	r5, r1
 808645e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 8086460:	d915      	bls.n	808648e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
 8086462:	4290      	cmp	r0, r2
 8086464:	d214      	bcs.n	8086490 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
 8086466:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 808646a:	1a75      	subs	r5, r6, r1
 808646c:	f1a1 0714 	sub.w	r7, r1, #20
 8086470:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 8086472:	42b7      	cmp	r7, r6
 8086474:	d01a      	beq.n	80864ac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
 8086476:	b11c      	cbz	r4, 8086480 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
 8086478:	4631      	mov	r1, r6
 808647a:	4620      	mov	r0, r4
 808647c:	f7ff fc51 	bl	8085d22 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
 8086480:	f106 0008 	add.w	r0, r6, #8
 8086484:	f7ff fdf0 	bl	8086068 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 8086488:	3e14      	subs	r6, #20
 808648a:	3c14      	subs	r4, #20
 808648c:	e7f1      	b.n	8086472 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
 808648e:	d00d      	beq.n	80864ac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
 8086490:	42b5      	cmp	r5, r6
 8086492:	d00b      	beq.n	80864ac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
 8086494:	b11c      	cbz	r4, 808649e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
 8086496:	4629      	mov	r1, r5
 8086498:	4620      	mov	r0, r4
 808649a:	f7ff fc42 	bl	8085d22 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
 808649e:	f105 0008 	add.w	r0, r5, #8
 80864a2:	f7ff fde1 	bl	8086068 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 80864a6:	3514      	adds	r5, #20
 80864a8:	3414      	adds	r4, #20
 80864aa:	e7f1      	b.n	8086490 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
 80864ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080864ae <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 80864ae:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 80864b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80864b2:	4604      	mov	r4, r0
 80864b4:	460d      	mov	r5, r1
 80864b6:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 80864b8:	d914      	bls.n	80864e4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 80864ba:	4290      	cmp	r0, r2
 80864bc:	d213      	bcs.n	80864e6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 80864be:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 80864c2:	1a75      	subs	r5, r6, r1
 80864c4:	f1a1 0710 	sub.w	r7, r1, #16
 80864c8:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 80864ca:	42b7      	cmp	r7, r6
 80864cc:	d018      	beq.n	8086500 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 80864ce:	b11c      	cbz	r4, 80864d8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 80864d0:	4631      	mov	r1, r6
 80864d2:	4620      	mov	r0, r4
 80864d4:	f7ff f8fc 	bl	80856d0 <_ZN6StringC1EOS_>
                end->~T();
 80864d8:	4630      	mov	r0, r6
 80864da:	f7ff f87f 	bl	80855dc <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 80864de:	3e10      	subs	r6, #16
 80864e0:	3c10      	subs	r4, #16
 80864e2:	e7f2      	b.n	80864ca <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 80864e4:	d00c      	beq.n	8086500 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 80864e6:	42b5      	cmp	r5, r6
 80864e8:	d00a      	beq.n	8086500 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 80864ea:	b11c      	cbz	r4, 80864f4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 80864ec:	4629      	mov	r1, r5
 80864ee:	4620      	mov	r0, r4
 80864f0:	f7ff f8ee 	bl	80856d0 <_ZN6StringC1EOS_>
                p->~T();
 80864f4:	4628      	mov	r0, r5
 80864f6:	f7ff f871 	bl	80855dc <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 80864fa:	3510      	adds	r5, #16
 80864fc:	3410      	adds	r4, #16
 80864fe:	e7f2      	b.n	80864e6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 8086500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08086502 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 8086502:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 8086504:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 8086506:	4605      	mov	r5, r0
        if (n > 0) {
 8086508:	dd11      	ble.n	808652e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 808650a:	0130      	lsls	r0, r6, #4
 808650c:	f7fe fe38 	bl	8085180 <malloc>
            if (!d) {
 8086510:	4604      	mov	r4, r0
 8086512:	b158      	cbz	r0, 808652c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 8086514:	e9d5 1200 	ldrd	r1, r2, [r5]
 8086518:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 808651c:	f7ff ffc7 	bl	80864ae <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 8086520:	6828      	ldr	r0, [r5, #0]
 8086522:	f7fe fe35 	bl	8085190 <free>
        return true;
 8086526:	2001      	movs	r0, #1
        data_ = d;
 8086528:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 808652a:	60ae      	str	r6, [r5, #8]
    }
 808652c:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 808652e:	2400      	movs	r4, #0
 8086530:	e7f6      	b.n	8086520 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

08086532 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 8086532:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8086536:	4690      	mov	r8, r2
        capacity_(0) {
 8086538:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 808653a:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 808653c:	b095      	sub	sp, #84	; 0x54
 808653e:	9103      	str	r1, [sp, #12]
    return size_;
 8086540:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8086544:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 8086546:	4299      	cmp	r1, r3
        capacity_(0) {
 8086548:	e9c0 3300 	strd	r3, r3, [r0]
 808654c:	e9c0 3302 	strd	r3, r3, [r0, #8]
 8086550:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8086554:	e9cd 3308 	strd	r3, r3, [sp, #32]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 8086558:	7602      	strb	r2, [r0, #24]
 808655a:	930a      	str	r3, [sp, #40]	; 0x28
    if (n > capacity_ && !realloc(n)) {
 808655c:	dc23      	bgt.n	80865a6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 808655e:	e9d8 5700 	ldrd	r5, r7, [r8]
 8086562:	2314      	movs	r3, #20
 8086564:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 8086568:	42af      	cmp	r7, r5
 808656a:	d03b      	beq.n	80865e4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 808656c:	4629      	mov	r1, r5
 808656e:	a80b      	add	r0, sp, #44	; 0x2c
 8086570:	f7ff f8ae 	bl	80856d0 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 8086574:	a90b      	add	r1, sp, #44	; 0x2c
 8086576:	a80f      	add	r0, sp, #60	; 0x3c
 8086578:	9e09      	ldr	r6, [sp, #36]	; 0x24
 808657a:	f7ff f8a9 	bl	80856d0 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 808657e:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
 8086582:	4299      	cmp	r1, r3
 8086584:	da1b      	bge.n	80865be <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 8086586:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 8086588:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
 808658a:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 808658e:	4631      	mov	r1, r6
 8086590:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8086594:	f106 0010 	add.w	r0, r6, #16
 8086598:	f7ff ff89 	bl	80864ae <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 808659c:	b9ee      	cbnz	r6, 80865da <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 808659e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80865a0:	3301      	adds	r3, #1
 80865a2:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
 80865a4:	e011      	b.n	80865ca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 80865a6:	a808      	add	r0, sp, #32
 80865a8:	f7ff ffab 	bl	8086502 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 80865ac:	2800      	cmp	r0, #0
 80865ae:	d1d6      	bne.n	808655e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
 80865b0:	a808      	add	r0, sp, #32
 80865b2:	f7ff fd6d 	bl	8086090 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 80865b6:	4620      	mov	r0, r4
 80865b8:	b015      	add	sp, #84	; 0x54
 80865ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80865be:	3101      	adds	r1, #1
 80865c0:	a808      	add	r0, sp, #32
 80865c2:	f7ff ff9e 	bl	8086502 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 80865c6:	2800      	cmp	r0, #0
 80865c8:	d1dd      	bne.n	8086586 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 80865ca:	a80f      	add	r0, sp, #60	; 0x3c
 80865cc:	f7ff f806 	bl	80855dc <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 80865d0:	a80b      	add	r0, sp, #44	; 0x2c
 80865d2:	f7ff f803 	bl	80855dc <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 80865d6:	3514      	adds	r5, #20
 80865d8:	e7c6      	b.n	8086568 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 80865da:	4630      	mov	r0, r6
 80865dc:	a90f      	add	r1, sp, #60	; 0x3c
 80865de:	f7ff f877 	bl	80856d0 <_ZN6StringC1EOS_>
 80865e2:	e7dc      	b.n	808659e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 80865e4:	2600      	movs	r6, #0
 80865e6:	f04f 0914 	mov.w	r9, #20
 80865ea:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
 80865ee:	960d      	str	r6, [sp, #52]	; 0x34
    return data_[i];
 80865f0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    for (int i = 0; i < cats.size(); ++i) {
 80865f4:	429e      	cmp	r6, r3
 80865f6:	da7c      	bge.n	80866f2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
 80865f8:	0133      	lsls	r3, r6, #4
 80865fa:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 80865fc:	9306      	str	r3, [sp, #24]
        if (!category) {
 80865fe:	b90b      	cbnz	r3, 8086604 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
 8086600:	3601      	adds	r6, #1
 8086602:	e7f5      	b.n	80865f0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
 8086604:	2300      	movs	r3, #0
 8086606:	9307      	str	r3, [sp, #28]
 8086608:	fb09 f306 	mul.w	r3, r9, r6
        Vector<Node> *pNodes = &nodes; // Root nodes
 808660c:	ad0b      	add	r5, sp, #44	; 0x2c
 808660e:	9302      	str	r3, [sp, #8]
        while ((name = nextSubcategoryName(category, size))) {
 8086610:	a907      	add	r1, sp, #28
 8086612:	a806      	add	r0, sp, #24
 8086614:	f7ff faf1 	bl	8085bfa <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 8086618:	4682      	mov	sl, r0
 808661a:	2800      	cmp	r0, #0
 808661c:	d0f0      	beq.n	8086600 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
 808661e:	f04f 0300 	mov.w	r3, #0
            const int index = nodeIndex(*pNodes, name, size, found);
 8086622:	4601      	mov	r1, r0
            bool found = false;
 8086624:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 8086628:	4628      	mov	r0, r5
 808662a:	9a07      	ldr	r2, [sp, #28]
 808662c:	f10d 0317 	add.w	r3, sp, #23
 8086630:	f7ff fb8a 	bl	8085d48 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 8086634:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 8086638:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 808663a:	2f00      	cmp	r7, #0
 808663c:	d14a      	bne.n	80866d4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
 808663e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        capacity_(0) {
 8086642:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
            level(-1) {
 8086646:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 808664a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 808664e:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 8086652:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8086656:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 8086658:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 808665c:	4293      	cmp	r3, r2
 808665e:	db17      	blt.n	8086690 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
 8086660:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
 8086664:	f1ba 0f00 	cmp.w	sl, #0
 8086668:	dd30      	ble.n	80866cc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
 808666a:	fb09 f00a 	mul.w	r0, r9, sl
 808666e:	f7fe fd87 	bl	8085180 <malloc>
            if (!d) {
 8086672:	4683      	mov	fp, r0
 8086674:	b360      	cbz	r0, 80866d0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
 8086676:	e9d5 1200 	ldrd	r1, r2, [r5]
 808667a:	fb09 1202 	mla	r2, r9, r2, r1
 808667e:	f7ff feea 	bl	8086456 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
 8086682:	6828      	ldr	r0, [r5, #0]
 8086684:	f7fe fd84 	bl	8085190 <free>
        data_ = d;
 8086688:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
 808668c:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
 8086690:	682b      	ldr	r3, [r5, #0]
 8086692:	9a01      	ldr	r2, [sp, #4]
 8086694:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
 8086698:	686a      	ldr	r2, [r5, #4]
 808669a:	4651      	mov	r1, sl
 808669c:	fb09 3202 	mla	r2, r9, r2, r3
 80866a0:	f10a 0014 	add.w	r0, sl, #20
 80866a4:	f7ff fed7 	bl	8086456 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 80866a8:	f1ba 0f00 	cmp.w	sl, #0
 80866ac:	d003      	beq.n	80866b6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
 80866ae:	4650      	mov	r0, sl
 80866b0:	a90f      	add	r1, sp, #60	; 0x3c
 80866b2:	f7ff fb36 	bl	8085d22 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
 80866b6:	686b      	ldr	r3, [r5, #4]
 80866b8:	3301      	adds	r3, #1
 80866ba:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
 80866bc:	a811      	add	r0, sp, #68	; 0x44
 80866be:	f7ff fcd3 	bl	8086068 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80866c2:	b13f      	cbz	r7, 80866d4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
 80866c4:	a80b      	add	r0, sp, #44	; 0x2c
 80866c6:	f7ff fccf 	bl	8086068 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80866ca:	e771      	b.n	80865b0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 80866cc:	46bb      	mov	fp, r7
 80866ce:	e7d8      	b.n	8086682 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80866d0:	2701      	movs	r7, #1
 80866d2:	e7f3      	b.n	80866bc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
 80866d4:	9b01      	ldr	r3, [sp, #4]
 80866d6:	682d      	ldr	r5, [r5, #0]
 80866d8:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
 80866dc:	9b06      	ldr	r3, [sp, #24]
 80866de:	781b      	ldrb	r3, [r3, #0]
 80866e0:	b92b      	cbnz	r3, 80866ee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
 80866e2:	f8d8 3000 	ldr.w	r3, [r8]
 80866e6:	9a02      	ldr	r2, [sp, #8]
 80866e8:	4413      	add	r3, r2
 80866ea:	7c1b      	ldrb	r3, [r3, #16]
 80866ec:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 80866ee:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 80866f0:	e78e      	b.n	8086610 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80866f2:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 80866f4:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80866f6:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 80866f8:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80866fa:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80866fc:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 80866fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
 8086700:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8086702:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 8086704:	60a2      	str	r2, [r4, #8]
 8086706:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
 8086708:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808670a:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 808670c:	60e2      	str	r2, [r4, #12]
 808670e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 8086710:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8086712:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 8086714:	6122      	str	r2, [r4, #16]
 8086716:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 8086718:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
 808671a:	9b03      	ldr	r3, [sp, #12]
 808671c:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 808671e:	6162      	str	r2, [r4, #20]
 8086720:	7623      	strb	r3, [r4, #24]
 8086722:	e7cf      	b.n	80866c4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>

08086724 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 8086724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8086726:	4604      	mov	r4, r0
        filter_(level, filters) {
 8086728:	4626      	mov	r6, r4
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 808672a:	4617      	mov	r7, r2
 808672c:	b087      	sub	sp, #28
 808672e:	460d      	mov	r5, r1
        stream_(&stream) {
 8086730:	4668      	mov	r0, sp
 8086732:	4619      	mov	r1, r3
 8086734:	f7fb f948 	bl	80819c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 8086738:	4b0b      	ldr	r3, [pc, #44]	; (8086768 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
 808673a:	4669      	mov	r1, sp
 808673c:	f846 3b04 	str.w	r3, [r6], #4
 8086740:	a803      	add	r0, sp, #12
 8086742:	f7fb f941 	bl	80819c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 8086746:	4639      	mov	r1, r7
 8086748:	aa03      	add	r2, sp, #12
 808674a:	4630      	mov	r0, r6
 808674c:	f7ff fef1 	bl	8086532 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 8086750:	a803      	add	r0, sp, #12
 8086752:	f7fa ff23 	bl	808159c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 8086756:	4668      	mov	r0, sp
 8086758:	f7fa ff20 	bl	808159c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 808675c:	4620      	mov	r0, r4
        stream_(&stream) {
 808675e:	4b03      	ldr	r3, [pc, #12]	; (808676c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
 8086760:	6225      	str	r5, [r4, #32]
 8086762:	6023      	str	r3, [r4, #0]
}
 8086764:	b007      	add	sp, #28
 8086766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8086768:	0808b62c 	.word	0x0808b62c
 808676c:	0808bc30 	.word	0x0808bc30

08086770 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 8086770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8086772:	460f      	mov	r7, r1
 8086774:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 8086776:	4638      	mov	r0, r7
 8086778:	491c      	ldr	r1, [pc, #112]	; (80867ec <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
 808677a:	4616      	mov	r6, r2
 808677c:	461d      	mov	r5, r3
 808677e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 8086780:	f004 fad5 	bl	808ad2e <strcmp>
 8086784:	b9c0      	cbnz	r0, 80867b8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
 8086786:	b1a4      	cbz	r4, 80867b2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 8086788:	4629      	mov	r1, r5
 808678a:	a801      	add	r0, sp, #4
 808678c:	f7ff fcc6 	bl	808611c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 8086790:	2024      	movs	r0, #36	; 0x24
 8086792:	4917      	ldr	r1, [pc, #92]	; (80867f0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 8086794:	f001 feb5 	bl	8088502 <_ZnwjRKSt9nothrow_t>
 8086798:	4605      	mov	r5, r0
 808679a:	b130      	cbz	r0, 80867aa <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
 808679c:	ab01      	add	r3, sp, #4
 808679e:	4632      	mov	r2, r6
 80867a0:	4621      	mov	r1, r4
 80867a2:	f7ff ffbf 	bl	8086724 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80867a6:	4b13      	ldr	r3, [pc, #76]	; (80867f4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
 80867a8:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 80867aa:	a801      	add	r0, sp, #4
 80867ac:	f7fa fef6 	bl	808159c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80867b0:	462c      	mov	r4, r5
}
 80867b2:	4620      	mov	r0, r4
 80867b4:	b005      	add	sp, #20
 80867b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 80867b8:	4638      	mov	r0, r7
 80867ba:	490f      	ldr	r1, [pc, #60]	; (80867f8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
 80867bc:	f004 fab7 	bl	808ad2e <strcmp>
 80867c0:	b990      	cbnz	r0, 80867e8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
 80867c2:	2c00      	cmp	r4, #0
 80867c4:	d0f5      	beq.n	80867b2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 80867c6:	4629      	mov	r1, r5
 80867c8:	a801      	add	r0, sp, #4
 80867ca:	f7ff fca7 	bl	808611c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 80867ce:	2024      	movs	r0, #36	; 0x24
 80867d0:	4907      	ldr	r1, [pc, #28]	; (80867f0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 80867d2:	f001 fe96 	bl	8088502 <_ZnwjRKSt9nothrow_t>
 80867d6:	4605      	mov	r5, r0
 80867d8:	2800      	cmp	r0, #0
 80867da:	d0e6      	beq.n	80867aa <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
 80867dc:	4632      	mov	r2, r6
 80867de:	4621      	mov	r1, r4
 80867e0:	ab01      	add	r3, sp, #4
 80867e2:	f7ff ff9f 	bl	8086724 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80867e6:	e7e0      	b.n	80867aa <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
 80867e8:	2400      	movs	r4, #0
 80867ea:	e7e2      	b.n	80867b2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
 80867ec:	0808bbba 	.word	0x0808bbba
 80867f0:	0808bded 	.word	0x0808bded
 80867f4:	0808bc48 	.word	0x0808bc48
 80867f8:	0808bbbe 	.word	0x0808bbbe

080867fc <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 80867fc:	4b01      	ldr	r3, [pc, #4]	; (8086804 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80867fe:	4a02      	ldr	r2, [pc, #8]	; (8086808 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8086800:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 8086802:	4770      	bx	lr
 8086804:	20000410 	.word	0x20000410
 8086808:	0808bbcf 	.word	0x0808bbcf

0808680c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 808680c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8086810:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 8086812:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 8086816:	4604      	mov	r4, r0
 8086818:	460e      	mov	r6, r1
 808681a:	4617      	mov	r7, r2
 808681c:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 808681e:	f000 fff5 	bl	808780c <_Z16_fetch_usbserialv>
 8086822:	4581      	cmp	r9, r0
 8086824:	d04d      	beq.n	80868c2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 8086826:	792b      	ldrb	r3, [r5, #4]
 8086828:	0719      	lsls	r1, r3, #28
 808682a:	d504      	bpl.n	8086836 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 808682c:	4620      	mov	r0, r4
 808682e:	696a      	ldr	r2, [r5, #20]
 8086830:	4954      	ldr	r1, [pc, #336]	; (8086984 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 8086832:	f7ff fa67 	bl	8085d04 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 8086836:	f1b8 0f00 	cmp.w	r8, #0
 808683a:	d00d      	beq.n	8086858 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 808683c:	215b      	movs	r1, #91	; 0x5b
 808683e:	4620      	mov	r0, r4
 8086840:	f7ff fa54 	bl	8085cec <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 8086844:	4641      	mov	r1, r8
 8086846:	4620      	mov	r0, r4
 8086848:	f7ff fa42 	bl	8085cd0 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 808684c:	6823      	ldr	r3, [r4, #0]
 808684e:	2202      	movs	r2, #2
 8086850:	4620      	mov	r0, r4
 8086852:	68db      	ldr	r3, [r3, #12]
 8086854:	494c      	ldr	r1, [pc, #304]	; (8086988 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 8086856:	4798      	blx	r3
    if (attr.has_file) {
 8086858:	792b      	ldrb	r3, [r5, #4]
 808685a:	07da      	lsls	r2, r3, #31
 808685c:	d524      	bpl.n	80868a8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 808685e:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 8086862:	212f      	movs	r1, #47	; 0x2f
 8086864:	4640      	mov	r0, r8
 8086866:	f004 fabf 	bl	808ade8 <strrchr>
    if (s1) {
 808686a:	b108      	cbz	r0, 8086870 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 808686c:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 8086870:	4641      	mov	r1, r8
 8086872:	4620      	mov	r0, r4
 8086874:	f7ff fa2c 	bl	8085cd0 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 8086878:	792b      	ldrb	r3, [r5, #4]
 808687a:	079b      	lsls	r3, r3, #30
 808687c:	d508      	bpl.n	8086890 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 808687e:	213a      	movs	r1, #58	; 0x3a
 8086880:	4620      	mov	r0, r4
 8086882:	f7ff fa33 	bl	8085cec <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 8086886:	4620      	mov	r0, r4
 8086888:	68ea      	ldr	r2, [r5, #12]
 808688a:	4940      	ldr	r1, [pc, #256]	; (808698c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 808688c:	f7ff fa3a 	bl	8085d04 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 8086890:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
 8086892:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
 8086894:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 8086898:	4620      	mov	r0, r4
            write(", ", 2);
 808689a:	f04f 0202 	mov.w	r2, #2
 808689e:	68db      	ldr	r3, [r3, #12]
 80868a0:	bf14      	ite	ne
 80868a2:	493b      	ldrne	r1, [pc, #236]	; (8086990 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 80868a4:	493b      	ldreq	r1, [pc, #236]	; (8086994 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 80868a6:	4798      	blx	r3
    if (attr.has_function) {
 80868a8:	792b      	ldrb	r3, [r5, #4]
 80868aa:	0758      	lsls	r0, r3, #29
 80868ac:	d51d      	bpl.n	80868ea <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 80868ae:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 80868b0:	460b      	mov	r3, r1
 80868b2:	461a      	mov	r2, r3
    for (; *s; ++s) {
 80868b4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80868b8:	b160      	cbz	r0, 80868d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 80868ba:	2820      	cmp	r0, #32
 80868bc:	d108      	bne.n	80868d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 80868be:	4619      	mov	r1, r3
 80868c0:	e7f7      	b.n	80868b2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 80868c2:	4835      	ldr	r0, [pc, #212]	; (8086998 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 80868c4:	f001 fa7f 	bl	8087dc6 <_ZN5spark12NetworkClass9listeningEv>
 80868c8:	2800      	cmp	r0, #0
 80868ca:	d0ac      	beq.n	8086826 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 80868cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 80868d0:	2828      	cmp	r0, #40	; 0x28
 80868d2:	d1ee      	bne.n	80868b2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 80868d4:	6823      	ldr	r3, [r4, #0]
 80868d6:	1a52      	subs	r2, r2, r1
 80868d8:	4620      	mov	r0, r4
 80868da:	68db      	ldr	r3, [r3, #12]
 80868dc:	4798      	blx	r3
        write("(): ", 4);
 80868de:	6823      	ldr	r3, [r4, #0]
 80868e0:	2204      	movs	r2, #4
 80868e2:	4620      	mov	r0, r4
 80868e4:	68db      	ldr	r3, [r3, #12]
 80868e6:	492d      	ldr	r1, [pc, #180]	; (808699c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 80868e8:	4798      	blx	r3
    return log_level_name(level, nullptr);
 80868ea:	2100      	movs	r1, #0
 80868ec:	4638      	mov	r0, r7
 80868ee:	f7fe fb0f 	bl	8084f10 <log_level_name>
 80868f2:	4601      	mov	r1, r0
    write(s);
 80868f4:	4620      	mov	r0, r4
 80868f6:	f7ff f9eb 	bl	8085cd0 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 80868fa:	6823      	ldr	r3, [r4, #0]
 80868fc:	2202      	movs	r2, #2
 80868fe:	4620      	mov	r0, r4
 8086900:	68db      	ldr	r3, [r3, #12]
 8086902:	4924      	ldr	r1, [pc, #144]	; (8086994 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 8086904:	4798      	blx	r3
    if (msg) {
 8086906:	b11e      	cbz	r6, 8086910 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 8086908:	4631      	mov	r1, r6
 808690a:	4620      	mov	r0, r4
 808690c:	f7ff f9e0 	bl	8085cd0 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 8086910:	792b      	ldrb	r3, [r5, #4]
 8086912:	f013 0f30 	tst.w	r3, #48	; 0x30
 8086916:	d02c      	beq.n	8086972 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 8086918:	6823      	ldr	r3, [r4, #0]
 808691a:	4921      	ldr	r1, [pc, #132]	; (80869a0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 808691c:	68db      	ldr	r3, [r3, #12]
 808691e:	2202      	movs	r2, #2
 8086920:	4620      	mov	r0, r4
 8086922:	4798      	blx	r3
        if (attr.has_code) {
 8086924:	792b      	ldrb	r3, [r5, #4]
 8086926:	06d9      	lsls	r1, r3, #27
 8086928:	d50a      	bpl.n	8086940 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 808692a:	6823      	ldr	r3, [r4, #0]
 808692c:	2207      	movs	r2, #7
 808692e:	4620      	mov	r0, r4
 8086930:	491c      	ldr	r1, [pc, #112]	; (80869a4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 8086932:	68db      	ldr	r3, [r3, #12]
 8086934:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 8086936:	4620      	mov	r0, r4
 8086938:	69aa      	ldr	r2, [r5, #24]
 808693a:	491b      	ldr	r1, [pc, #108]	; (80869a8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 808693c:	f7ff f9e2 	bl	8085d04 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 8086940:	792b      	ldrb	r3, [r5, #4]
 8086942:	069a      	lsls	r2, r3, #26
 8086944:	d511      	bpl.n	808696a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 8086946:	06db      	lsls	r3, r3, #27
 8086948:	d505      	bpl.n	8086956 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 808694a:	6823      	ldr	r3, [r4, #0]
 808694c:	2202      	movs	r2, #2
 808694e:	4620      	mov	r0, r4
 8086950:	68db      	ldr	r3, [r3, #12]
 8086952:	490f      	ldr	r1, [pc, #60]	; (8086990 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 8086954:	4798      	blx	r3
            write("details = ", 10);
 8086956:	6823      	ldr	r3, [r4, #0]
 8086958:	4620      	mov	r0, r4
 808695a:	4914      	ldr	r1, [pc, #80]	; (80869ac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 808695c:	220a      	movs	r2, #10
 808695e:	68db      	ldr	r3, [r3, #12]
 8086960:	4798      	blx	r3
            write(attr.details);
 8086962:	4620      	mov	r0, r4
 8086964:	69e9      	ldr	r1, [r5, #28]
 8086966:	f7ff f9b3 	bl	8085cd0 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 808696a:	215d      	movs	r1, #93	; 0x5d
 808696c:	4620      	mov	r0, r4
 808696e:	f7ff f9bd 	bl	8085cec <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 8086972:	6823      	ldr	r3, [r4, #0]
 8086974:	4620      	mov	r0, r4
}
 8086976:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 808697a:	2202      	movs	r2, #2
 808697c:	68db      	ldr	r3, [r3, #12]
 808697e:	490c      	ldr	r1, [pc, #48]	; (80869b0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 8086980:	4718      	bx	r3
 8086982:	bf00      	nop
 8086984:	0808bbd3 	.word	0x0808bbd3
 8086988:	0808bbda 	.word	0x0808bbda
 808698c:	0808b863 	.word	0x0808b863
 8086990:	0808bbdd 	.word	0x0808bbdd
 8086994:	0808bbe2 	.word	0x0808bbe2
 8086998:	200009b0 	.word	0x200009b0
 808699c:	0808bbe0 	.word	0x0808bbe0
 80869a0:	0808bbe5 	.word	0x0808bbe5
 80869a4:	0808bbe8 	.word	0x0808bbe8
 80869a8:	0808bbf0 	.word	0x0808bbf0
 80869ac:	0808bbf3 	.word	0x0808bbf3
 80869b0:	0808b70a 	.word	0x0808b70a

080869b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80869b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80869b8:	b085      	sub	sp, #20
    return stream_;
 80869ba:	f8d0 9020 	ldr.w	r9, [r0, #32]
 80869be:	4605      	mov	r5, r0
 80869c0:	460f      	mov	r7, r1
 80869c2:	4690      	mov	r8, r2
 80869c4:	461e      	mov	r6, r3
 80869c6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 80869c8:	f000 ff20 	bl	808780c <_Z16_fetch_usbserialv>
 80869cc:	4581      	cmp	r9, r0
 80869ce:	d105      	bne.n	80869dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 80869d0:	4849      	ldr	r0, [pc, #292]	; (8086af8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 80869d2:	f001 f9f8 	bl	8087dc6 <_ZN5spark12NetworkClass9listeningEv>
 80869d6:	2800      	cmp	r0, #0
 80869d8:	f040 808a 	bne.w	8086af0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 80869dc:	f04f 0900 	mov.w	r9, #0
 80869e0:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 80869e2:	4a46      	ldr	r2, [pc, #280]	; (8086afc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 80869e4:	a801      	add	r0, sp, #4
 80869e6:	9201      	str	r2, [sp, #4]
 80869e8:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 80869ea:	f88d 9008 	strb.w	r9, [sp, #8]
 80869ee:	f001 fb4a 	bl	8088086 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
 80869f2:	4649      	mov	r1, r9
 80869f4:	4640      	mov	r0, r8
 80869f6:	f7fe fa8b 	bl	8084f10 <log_level_name>
 80869fa:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 80869fc:	4940      	ldr	r1, [pc, #256]	; (8086b00 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 80869fe:	2201      	movs	r2, #1
 8086a00:	a801      	add	r0, sp, #4
 8086a02:	f001 fbcb 	bl	808819c <_ZN5spark10JSONWriter4nameEPKcj>
 8086a06:	4641      	mov	r1, r8
 8086a08:	f7ff f955 	bl	8085cb6 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 8086a0c:	b13f      	cbz	r7, 8086a1e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 8086a0e:	493d      	ldr	r1, [pc, #244]	; (8086b04 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 8086a10:	2201      	movs	r2, #1
 8086a12:	a801      	add	r0, sp, #4
 8086a14:	f001 fbc2 	bl	808819c <_ZN5spark10JSONWriter4nameEPKcj>
 8086a18:	4639      	mov	r1, r7
 8086a1a:	f7ff f94c 	bl	8085cb6 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 8086a1e:	b13e      	cbz	r6, 8086a30 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 8086a20:	4939      	ldr	r1, [pc, #228]	; (8086b08 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 8086a22:	2201      	movs	r2, #1
 8086a24:	a801      	add	r0, sp, #4
 8086a26:	f001 fbb9 	bl	808819c <_ZN5spark10JSONWriter4nameEPKcj>
 8086a2a:	4631      	mov	r1, r6
 8086a2c:	f7ff f943 	bl	8085cb6 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 8086a30:	7923      	ldrb	r3, [r4, #4]
 8086a32:	07df      	lsls	r7, r3, #31
 8086a34:	d50e      	bpl.n	8086a54 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 8086a36:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 8086a38:	212f      	movs	r1, #47	; 0x2f
 8086a3a:	4630      	mov	r0, r6
 8086a3c:	f004 f9d4 	bl	808ade8 <strrchr>
    if (s1) {
 8086a40:	b100      	cbz	r0, 8086a44 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 8086a42:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 8086a44:	4931      	ldr	r1, [pc, #196]	; (8086b0c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 8086a46:	2201      	movs	r2, #1
 8086a48:	a801      	add	r0, sp, #4
 8086a4a:	f001 fba7 	bl	808819c <_ZN5spark10JSONWriter4nameEPKcj>
 8086a4e:	4631      	mov	r1, r6
 8086a50:	f7ff f931 	bl	8085cb6 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 8086a54:	7923      	ldrb	r3, [r4, #4]
 8086a56:	079e      	lsls	r6, r3, #30
 8086a58:	d507      	bpl.n	8086a6a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 8086a5a:	492d      	ldr	r1, [pc, #180]	; (8086b10 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 8086a5c:	2202      	movs	r2, #2
 8086a5e:	a801      	add	r0, sp, #4
 8086a60:	f001 fb9c 	bl	808819c <_ZN5spark10JSONWriter4nameEPKcj>
 8086a64:	68e1      	ldr	r1, [r4, #12]
 8086a66:	f001 fb1b 	bl	80880a0 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 8086a6a:	7923      	ldrb	r3, [r4, #4]
 8086a6c:	0758      	lsls	r0, r3, #29
 8086a6e:	d514      	bpl.n	8086a9a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 8086a70:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 8086a72:	4633      	mov	r3, r6
 8086a74:	461f      	mov	r7, r3
    for (; *s; ++s) {
 8086a76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8086a7a:	b12a      	cbz	r2, 8086a88 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 8086a7c:	2a20      	cmp	r2, #32
 8086a7e:	d101      	bne.n	8086a84 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 8086a80:	461e      	mov	r6, r3
 8086a82:	e7f7      	b.n	8086a74 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 8086a84:	2a28      	cmp	r2, #40	; 0x28
 8086a86:	d1f5      	bne.n	8086a74 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 8086a88:	2202      	movs	r2, #2
 8086a8a:	4922      	ldr	r1, [pc, #136]	; (8086b14 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 8086a8c:	a801      	add	r0, sp, #4
 8086a8e:	f001 fb85 	bl	808819c <_ZN5spark10JSONWriter4nameEPKcj>
 8086a92:	4631      	mov	r1, r6
 8086a94:	1bba      	subs	r2, r7, r6
 8086a96:	f001 fb90 	bl	80881ba <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 8086a9a:	7923      	ldrb	r3, [r4, #4]
 8086a9c:	0719      	lsls	r1, r3, #28
 8086a9e:	d507      	bpl.n	8086ab0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 8086aa0:	491d      	ldr	r1, [pc, #116]	; (8086b18 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 8086aa2:	2201      	movs	r2, #1
 8086aa4:	a801      	add	r0, sp, #4
 8086aa6:	f001 fb79 	bl	808819c <_ZN5spark10JSONWriter4nameEPKcj>
 8086aaa:	6961      	ldr	r1, [r4, #20]
 8086aac:	f001 fb0a 	bl	80880c4 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 8086ab0:	7923      	ldrb	r3, [r4, #4]
 8086ab2:	06da      	lsls	r2, r3, #27
 8086ab4:	d508      	bpl.n	8086ac8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 8086ab6:	2204      	movs	r2, #4
 8086ab8:	4918      	ldr	r1, [pc, #96]	; (8086b1c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 8086aba:	eb0d 0002 	add.w	r0, sp, r2
 8086abe:	f001 fb6d 	bl	808819c <_ZN5spark10JSONWriter4nameEPKcj>
 8086ac2:	69a1      	ldr	r1, [r4, #24]
 8086ac4:	f001 faec 	bl	80880a0 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 8086ac8:	7923      	ldrb	r3, [r4, #4]
 8086aca:	069b      	lsls	r3, r3, #26
 8086acc:	d507      	bpl.n	8086ade <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 8086ace:	4914      	ldr	r1, [pc, #80]	; (8086b20 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 8086ad0:	2206      	movs	r2, #6
 8086ad2:	a801      	add	r0, sp, #4
 8086ad4:	f001 fb62 	bl	808819c <_ZN5spark10JSONWriter4nameEPKcj>
 8086ad8:	69e1      	ldr	r1, [r4, #28]
 8086ada:	f7ff f8ec 	bl	8085cb6 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 8086ade:	a801      	add	r0, sp, #4
 8086ae0:	f001 fabb 	bl	808805a <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
 8086ae4:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 8086ae6:	2202      	movs	r2, #2
 8086ae8:	6803      	ldr	r3, [r0, #0]
 8086aea:	490e      	ldr	r1, [pc, #56]	; (8086b24 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 8086aec:	68db      	ldr	r3, [r3, #12]
 8086aee:	4798      	blx	r3
}
 8086af0:	b005      	add	sp, #20
 8086af2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8086af6:	bf00      	nop
 8086af8:	200009b0 	.word	0x200009b0
 8086afc:	0808bc18 	.word	0x0808bc18
 8086b00:	0808b4d7 	.word	0x0808b4d7
 8086b04:	0808b738 	.word	0x0808b738
 8086b08:	0808bef3 	.word	0x0808bef3
 8086b0c:	0808b8b8 	.word	0x0808b8b8
 8086b10:	0808bbfe 	.word	0x0808bbfe
 8086b14:	0808bc01 	.word	0x0808bc01
 8086b18:	0808b79d 	.word	0x0808b79d
 8086b1c:	0808bc04 	.word	0x0808bc04
 8086b20:	0808bc09 	.word	0x0808bc09
 8086b24:	0808b70a 	.word	0x0808b70a

08086b28 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 8086b28:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 8086b2a:	2000      	movs	r0, #0
 8086b2c:	f7fe fb10 	bl	8085150 <spark_sync_time_pending>
 8086b30:	b128      	cbz	r0, 8086b3e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8086b32:	f7fe faed 	bl	8085110 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 8086b36:	f080 0001 	eor.w	r0, r0, #1
 8086b3a:	b2c0      	uxtb	r0, r0
    }
 8086b3c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 8086b3e:	2001      	movs	r0, #1
 8086b40:	e7fc      	b.n	8086b3c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

08086b44 <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 8086b44:	b530      	push	{r4, r5, lr}
 8086b46:	b093      	sub	sp, #76	; 0x4c
 8086b48:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
 8086b4c:	4b19      	ldr	r3, [pc, #100]	; (8086bb4 <_ZN9TimeClass7timeStrEx+0x70>)
{
 8086b4e:	4604      	mov	r4, r0
    t += time_zone_cache;
 8086b50:	e9d3 1000 	ldrd	r1, r0, [r3]
 8086b54:	9b01      	ldr	r3, [sp, #4]
 8086b56:	1852      	adds	r2, r2, r1
 8086b58:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
 8086b5c:	4816      	ldr	r0, [pc, #88]	; (8086bb8 <_ZN9TimeClass7timeStrEx+0x74>)
    struct tm calendar_time = {};
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
 8086b5e:	2500      	movs	r5, #0
    t += dst_current_cache;
 8086b60:	e9d0 1000 	ldrd	r1, r0, [r0]
 8086b64:	1852      	adds	r2, r2, r1
 8086b66:	eb43 0300 	adc.w	r3, r3, r0
 8086b6a:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
 8086b6e:	2224      	movs	r2, #36	; 0x24
 8086b70:	2100      	movs	r1, #0
 8086b72:	eb0d 0002 	add.w	r0, sp, r2
 8086b76:	f004 f88d 	bl	808ac94 <memset>
    localtime_r(&t, &calendar_time);
 8086b7a:	a909      	add	r1, sp, #36	; 0x24
 8086b7c:	4668      	mov	r0, sp
 8086b7e:	f7f9 fa4f 	bl	8080020 <localtime_r>
    char ascstr[26] = {};
 8086b82:	2216      	movs	r2, #22
 8086b84:	4629      	mov	r1, r5
 8086b86:	a803      	add	r0, sp, #12
 8086b88:	9502      	str	r5, [sp, #8]
 8086b8a:	f004 f883 	bl	808ac94 <memset>
    asctime_r(&calendar_time, ascstr);
 8086b8e:	a902      	add	r1, sp, #8
 8086b90:	a809      	add	r0, sp, #36	; 0x24
 8086b92:	f004 f81b 	bl	808abcc <asctime_r>
    int len = strlen(ascstr);
 8086b96:	a802      	add	r0, sp, #8
 8086b98:	f004 f8f7 	bl	808ad8a <strlen>
    ascstr[len-1] = 0; // remove final newline
 8086b9c:	ab12      	add	r3, sp, #72	; 0x48
 8086b9e:	4418      	add	r0, r3
 8086ba0:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
 8086ba4:	a902      	add	r1, sp, #8
 8086ba6:	4620      	mov	r0, r4
 8086ba8:	f7fe fd62 	bl	8085670 <_ZN6StringC1EPK19__FlashStringHelper>
}
 8086bac:	4620      	mov	r0, r4
 8086bae:	b013      	add	sp, #76	; 0x4c
 8086bb0:	bd30      	pop	{r4, r5, pc}
 8086bb2:	bf00      	nop
 8086bb4:	20000450 	.word	0x20000450
 8086bb8:	20000448 	.word	0x20000448

08086bbc <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 8086bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8086bc0:	b0a4      	sub	sp, #144	; 0x90
 8086bc2:	4607      	mov	r7, r0
 8086bc4:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 8086bc6:	a814      	add	r0, sp, #80	; 0x50
{
 8086bc8:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 8086bca:	223f      	movs	r2, #63	; 0x3f
{
 8086bcc:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 8086bce:	f004 f8f8 	bl	808adc2 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 8086bd2:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 8086bd4:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 8086bd6:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 8086bda:	f004 f8d6 	bl	808ad8a <strlen>
 8086bde:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 8086be0:	bb4c      	cbnz	r4, 8086c36 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
 8086be2:	4929      	ldr	r1, [pc, #164]	; (8086c88 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
 8086be4:	a803      	add	r0, sp, #12
 8086be6:	f004 f8ac 	bl	808ad42 <strcpy>
{
 8086bea:	2600      	movs	r6, #0
 8086bec:	ac14      	add	r4, sp, #80	; 0x50
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 8086bee:	f105 39ff 	add.w	r9, r5, #4294967295
 8086bf2:	45b1      	cmp	r9, r6
 8086bf4:	d934      	bls.n	8086c60 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 8086bf6:	7823      	ldrb	r3, [r4, #0]
 8086bf8:	f106 0a01 	add.w	sl, r6, #1
 8086bfc:	2b25      	cmp	r3, #37	; 0x25
 8086bfe:	d117      	bne.n	8086c30 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
 8086c00:	7863      	ldrb	r3, [r4, #1]
 8086c02:	2b7a      	cmp	r3, #122	; 0x7a
 8086c04:	d114      	bne.n	8086c30 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
 8086c06:	a803      	add	r0, sp, #12
 8086c08:	f004 f8bf 	bl	808ad8a <strlen>
 8086c0c:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 8086c0e:	ab14      	add	r3, sp, #80	; 0x50
 8086c10:	1830      	adds	r0, r6, r0
 8086c12:	4418      	add	r0, r3
 8086c14:	eba9 0206 	sub.w	r2, r9, r6
 8086c18:	1ca1      	adds	r1, r4, #2
 8086c1a:	f004 f813 	bl	808ac44 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 8086c1e:	462a      	mov	r2, r5
 8086c20:	a903      	add	r1, sp, #12
 8086c22:	4620      	mov	r0, r4
 8086c24:	f004 f80e 	bl	808ac44 <memcpy>
            len = strlen(format_str);
 8086c28:	a814      	add	r0, sp, #80	; 0x50
 8086c2a:	f004 f8ae 	bl	808ad8a <strlen>
 8086c2e:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
 8086c30:	4656      	mov	r6, sl
 8086c32:	3401      	adds	r4, #1
 8086c34:	e7db      	b.n	8086bee <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 8086c36:	233c      	movs	r3, #60	; 0x3c
 8086c38:	fb94 f2f3 	sdiv	r2, r4, r3
 8086c3c:	2a00      	cmp	r2, #0
 8086c3e:	bfb8      	it	lt
 8086c40:	4252      	neglt	r2, r2
 8086c42:	fbb2 f1f3 	udiv	r1, r2, r3
 8086c46:	fb03 2211 	mls	r2, r3, r1, r2
 8086c4a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8086c4e:	9200      	str	r2, [sp, #0]
 8086c50:	fb94 f3f3 	sdiv	r3, r4, r3
 8086c54:	2110      	movs	r1, #16
 8086c56:	4a0d      	ldr	r2, [pc, #52]	; (8086c8c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
 8086c58:	a803      	add	r0, sp, #12
 8086c5a:	f7fe fab1 	bl	80851c0 <snprintf>
 8086c5e:	e7c4      	b.n	8086bea <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
 8086c60:	2100      	movs	r1, #0
 8086c62:	222e      	movs	r2, #46	; 0x2e
 8086c64:	a808      	add	r0, sp, #32
 8086c66:	9107      	str	r1, [sp, #28]
 8086c68:	f004 f814 	bl	808ac94 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
 8086c6c:	4643      	mov	r3, r8
 8086c6e:	aa14      	add	r2, sp, #80	; 0x50
 8086c70:	2132      	movs	r1, #50	; 0x32
 8086c72:	a807      	add	r0, sp, #28
 8086c74:	f7f9 f9dc 	bl	8080030 <strftime>
    return String(buf);
 8086c78:	4638      	mov	r0, r7
 8086c7a:	a907      	add	r1, sp, #28
 8086c7c:	f7fe fcf8 	bl	8085670 <_ZN6StringC1EPK19__FlashStringHelper>
}
 8086c80:	4638      	mov	r0, r7
 8086c82:	b024      	add	sp, #144	; 0x90
 8086c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8086c88:	0808bc88 	.word	0x0808bc88
 8086c8c:	0808bc8a 	.word	0x0808bc8a

08086c90 <_ZN9TimeClass6formatExPKc>:
{
 8086c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8086c92:	b08d      	sub	sp, #52	; 0x34
 8086c94:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8086c96:	4604      	mov	r4, r0
 8086c98:	e9cd 2300 	strd	r2, r3, [sp]
    if (format_spec == nullptr)
 8086c9c:	b915      	cbnz	r5, 8086ca4 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
 8086c9e:	4b19      	ldr	r3, [pc, #100]	; (8086d04 <_ZN9TimeClass6formatExPKc+0x74>)
 8086ca0:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
 8086ca2:	b12d      	cbz	r5, 8086cb0 <_ZN9TimeClass6formatExPKc+0x20>
 8086ca4:	4b18      	ldr	r3, [pc, #96]	; (8086d08 <_ZN9TimeClass6formatExPKc+0x78>)
 8086ca6:	4628      	mov	r0, r5
 8086ca8:	6819      	ldr	r1, [r3, #0]
 8086caa:	f004 f840 	bl	808ad2e <strcmp>
 8086cae:	b938      	cbnz	r0, 8086cc0 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
 8086cb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8086cb4:	4620      	mov	r0, r4
 8086cb6:	f7ff ff45 	bl	8086b44 <_ZN9TimeClass7timeStrEx>
}
 8086cba:	4620      	mov	r0, r4
 8086cbc:	b00d      	add	sp, #52	; 0x34
 8086cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
 8086cc0:	9900      	ldr	r1, [sp, #0]
 8086cc2:	4e12      	ldr	r6, [pc, #72]	; (8086d0c <_ZN9TimeClass6formatExPKc+0x7c>)
    t += dst_current_cache;
 8086cc4:	4f12      	ldr	r7, [pc, #72]	; (8086d10 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
 8086cc6:	e9d6 3200 	ldrd	r3, r2, [r6]
 8086cca:	185b      	adds	r3, r3, r1
 8086ccc:	9901      	ldr	r1, [sp, #4]
 8086cce:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
 8086cd2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8086cd6:	181b      	adds	r3, r3, r0
 8086cd8:	eb42 0201 	adc.w	r2, r2, r1
 8086cdc:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
 8086ce0:	2100      	movs	r1, #0
 8086ce2:	2224      	movs	r2, #36	; 0x24
 8086ce4:	a803      	add	r0, sp, #12
 8086ce6:	f003 ffd5 	bl	808ac94 <memset>
    localtime_r(&t, &calendar_time);
 8086cea:	a903      	add	r1, sp, #12
 8086cec:	4668      	mov	r0, sp
 8086cee:	f7f9 f997 	bl	8080020 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
 8086cf2:	6832      	ldr	r2, [r6, #0]
 8086cf4:	683b      	ldr	r3, [r7, #0]
 8086cf6:	4620      	mov	r0, r4
 8086cf8:	4413      	add	r3, r2
 8086cfa:	a903      	add	r1, sp, #12
 8086cfc:	462a      	mov	r2, r5
 8086cfe:	f7ff ff5d 	bl	8086bbc <_ZN9TimeClass14timeFormatImplEP2tmPKci>
 8086d02:	e7da      	b.n	8086cba <_ZN9TimeClass6formatExPKc+0x2a>
 8086d04:	20000440 	.word	0x20000440
 8086d08:	200000c0 	.word	0x200000c0
 8086d0c:	20000450 	.word	0x20000450
 8086d10:	20000448 	.word	0x20000448

08086d14 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
 8086d14:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 8086d16:	2000      	movs	r0, #0
 8086d18:	f7fd ff02 	bl	8084b20 <hal_rtc_time_is_valid>
    if (rtcstate)
 8086d1c:	4604      	mov	r4, r0
 8086d1e:	b9a0      	cbnz	r0, 8086d4a <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 8086d20:	f7fe f906 	bl	8084f30 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 8086d24:	2801      	cmp	r0, #1
 8086d26:	d110      	bne.n	8086d4a <_ZN9TimeClass7isValidEv+0x36>
 8086d28:	4620      	mov	r0, r4
 8086d2a:	f7fe f941 	bl	8084fb0 <system_thread_get_state>
 8086d2e:	b960      	cbnz	r0, 8086d4a <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 8086d30:	f7ff fefa 	bl	8086b28 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8086d34:	b910      	cbnz	r0, 8086d3c <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 8086d36:	f7fe f9db 	bl	80850f0 <spark_process>
        while (_while() && !_condition()) {
 8086d3a:	e7f9      	b.n	8086d30 <_ZN9TimeClass7isValidEv+0x1c>
 8086d3c:	f7ff fef4 	bl	8086b28 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 8086d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 8086d44:	2000      	movs	r0, #0
 8086d46:	f7fd beeb 	b.w	8084b20 <hal_rtc_time_is_valid>
}
 8086d4a:	4620      	mov	r0, r4
 8086d4c:	bd10      	pop	{r4, pc}

08086d4e <_ZN9TimeClass3nowEv>:
{
 8086d4e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 8086d50:	f7ff ffe0 	bl	8086d14 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 8086d54:	2210      	movs	r2, #16
 8086d56:	2100      	movs	r1, #0
 8086d58:	4668      	mov	r0, sp
 8086d5a:	f003 ff9b 	bl	808ac94 <memset>
    hal_rtc_get_time(&tv, nullptr);
 8086d5e:	2100      	movs	r1, #0
 8086d60:	4668      	mov	r0, sp
 8086d62:	f7fd fee5 	bl	8084b30 <hal_rtc_get_time>
}
 8086d66:	9800      	ldr	r0, [sp, #0]
 8086d68:	b005      	add	sp, #20
 8086d6a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08086d70 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8086d70:	4b02      	ldr	r3, [pc, #8]	; (8086d7c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8086d72:	681a      	ldr	r2, [r3, #0]
 8086d74:	4b02      	ldr	r3, [pc, #8]	; (8086d80 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8086d76:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 8086d78:	4770      	bx	lr
 8086d7a:	bf00      	nop
 8086d7c:	200000c0 	.word	0x200000c0
 8086d80:	20000440 	.word	0x20000440

08086d84 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8086d84:	2100      	movs	r1, #0
 8086d86:	f7fe b8e3 	b.w	8084f50 <system_delay_ms>

08086d8a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8086d8a:	b510      	push	{r4, lr}
 8086d8c:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
 8086d8e:	f7f9 fd35 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
 8086d92:	4620      	mov	r0, r4
 8086d94:	bd10      	pop	{r4, pc}
	...

08086d98 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 8086d98:	2300      	movs	r3, #0
 8086d9a:	4803      	ldr	r0, [pc, #12]	; (8086da8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8086d9c:	4a03      	ldr	r2, [pc, #12]	; (8086dac <_GLOBAL__sub_I_RGB+0x14>)
 8086d9e:	4904      	ldr	r1, [pc, #16]	; (8086db0 <_GLOBAL__sub_I_RGB+0x18>)
 8086da0:	6083      	str	r3, [r0, #8]
 8086da2:	f001 bba7 	b.w	80884f4 <__aeabi_atexit>
 8086da6:	bf00      	nop
 8086da8:	20000458 	.word	0x20000458
 8086dac:	20000130 	.word	0x20000130
 8086db0:	08086d8b 	.word	0x08086d8b

08086db4 <_ZN8particle6detail9_getVCellEhh>:
    return i2c_.isEnabled();
}

namespace particle { namespace detail {
    // Converts VCELL_REGISTER reading to Battery Voltage
    float _getVCell(byte MSB, byte LSB) {
 8086db4:	b508      	push	{r3, lr}
        // VCELL = 12-bit value, 1.25mV (1V/800) per bit
        float value = (float)((MSB << 4) | (LSB >> 4));
 8086db6:	0909      	lsrs	r1, r1, #4
 8086db8:	ea41 1000 	orr.w	r0, r1, r0, lsl #4
 8086dbc:	f003 fcb0 	bl	808a720 <__aeabi_i2f>
        return value / 800.0;
 8086dc0:	4901      	ldr	r1, [pc, #4]	; (8086dc8 <_ZN8particle6detail9_getVCellEhh+0x14>)
 8086dc2:	f003 fdb5 	bl	808a930 <__aeabi_fdiv>
    }
 8086dc6:	bd08      	pop	{r3, pc}
 8086dc8:	44480000 	.word	0x44480000

08086dcc <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
 8086dcc:	6800      	ldr	r0, [r0, #0]
 8086dce:	f000 bf9d 	b.w	8087d0c <_ZN7TwoWire4lockEv>

08086dd2 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 8086dd2:	b510      	push	{r4, lr}
 8086dd4:	4604      	mov	r4, r0
      lock_(_lock) {
 8086dd6:	6001      	str	r1, [r0, #0]
 8086dd8:	7102      	strb	r2, [r0, #4]
    if (lock_) {
 8086dda:	b10a      	cbz	r2, 8086de0 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 8086ddc:	f7ff fff6 	bl	8086dcc <_ZN9FuelGauge4lockEv>
}
 8086de0:	4620      	mov	r0, r4
 8086de2:	bd10      	pop	{r4, pc}

08086de4 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
 8086de4:	b538      	push	{r3, r4, r5, lr}
 8086de6:	4604      	mov	r4, r0
 8086de8:	460d      	mov	r5, r1
            return &Wire3;
 8086dea:	f001 fb5b 	bl	80884a4 <_Z20__fetch_global_Wire3v>
        : FuelGauge(*fuelWireInstance(), _lock)
 8086dee:	462a      	mov	r2, r5
            return &Wire3;
 8086df0:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
 8086df2:	4620      	mov	r0, r4
 8086df4:	f7ff ffed 	bl	8086dd2 <_ZN9FuelGaugeC1ER7TwoWireb>
}
 8086df8:	4620      	mov	r0, r4
 8086dfa:	bd38      	pop	{r3, r4, r5, pc}

08086dfc <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
 8086dfc:	6800      	ldr	r0, [r0, #0]
 8086dfe:	f000 bf8e 	b.w	8087d1e <_ZN7TwoWire6unlockEv>

08086e02 <_ZN9FuelGaugeD1Ev>:
FuelGauge::~FuelGauge()
 8086e02:	b510      	push	{r4, lr}
    if (lock_) {
 8086e04:	7903      	ldrb	r3, [r0, #4]
FuelGauge::~FuelGauge()
 8086e06:	4604      	mov	r4, r0
    if (lock_) {
 8086e08:	b10b      	cbz	r3, 8086e0e <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
 8086e0a:	f7ff fff7 	bl	8086dfc <_ZN9FuelGauge6unlockEv>
}
 8086e0e:	4620      	mov	r0, r4
 8086e10:	bd10      	pop	{r4, pc}

08086e12 <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
 8086e12:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8086e16:	4604      	mov	r4, r0
 8086e18:	460d      	mov	r5, r1
 8086e1a:	4617      	mov	r7, r2
 8086e1c:	461e      	mov	r6, r3
 8086e1e:	f7ff ffd5 	bl	8086dcc <_ZN9FuelGauge4lockEv>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8086e22:	2236      	movs	r2, #54	; 0x36
 8086e24:	2300      	movs	r3, #0
    timeout_ = ms;
 8086e26:	f04f 0801 	mov.w	r8, #1
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8086e2a:	e9cd 2300 	strd	r2, r3, [sp]
    timeout_ = ms;
 8086e2e:	230a      	movs	r3, #10
    i2c_.beginTransmission(config);
 8086e30:	4669      	mov	r1, sp
 8086e32:	6820      	ldr	r0, [r4, #0]
 8086e34:	e9cd 8302 	strd	r8, r3, [sp, #8]
 8086e38:	f000 ff49 	bl	8087cce <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
 8086e3c:	6820      	ldr	r0, [r4, #0]
 8086e3e:	4629      	mov	r1, r5
 8086e40:	6803      	ldr	r3, [r0, #0]
 8086e42:	689b      	ldr	r3, [r3, #8]
 8086e44:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
 8086e46:	4641      	mov	r1, r8
 8086e48:	6820      	ldr	r0, [r4, #0]
 8086e4a:	f000 ff58 	bl	8087cfe <_ZN7TwoWire15endTransmissionEh>
 8086e4e:	4605      	mov	r5, r0
 8086e50:	b140      	cbz	r0, 8086e64 <_ZN9FuelGauge12readRegisterEhRhS0_+0x52>
 8086e52:	f06f 059f 	mvn.w	r5, #159	; 0x9f
      { _M_device.unlock(); }
 8086e56:	4620      	mov	r0, r4
 8086e58:	f7ff ffd0 	bl	8086dfc <_ZN9FuelGauge6unlockEv>
}
 8086e5c:	4628      	mov	r0, r5
 8086e5e:	b004      	add	sp, #16
 8086e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
 8086e64:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
 8086e66:	4669      	mov	r1, sp
 8086e68:	6820      	ldr	r0, [r4, #0]
 8086e6a:	9301      	str	r3, [sp, #4]
 8086e6c:	f000 fefc 	bl	8087c68 <_ZN7TwoWire11requestFromERK16WireTransmission>
 8086e70:	2802      	cmp	r0, #2
 8086e72:	d1ee      	bne.n	8086e52 <_ZN9FuelGauge12readRegisterEhRhS0_+0x40>
    MSB = i2c_.read();
 8086e74:	6820      	ldr	r0, [r4, #0]
 8086e76:	6803      	ldr	r3, [r0, #0]
 8086e78:	695b      	ldr	r3, [r3, #20]
 8086e7a:	4798      	blx	r3
 8086e7c:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
 8086e7e:	6820      	ldr	r0, [r4, #0]
 8086e80:	6803      	ldr	r3, [r0, #0]
 8086e82:	695b      	ldr	r3, [r3, #20]
 8086e84:	4798      	blx	r3
 8086e86:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
 8086e88:	e7e5      	b.n	8086e56 <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>
	...

08086e8c <_ZN9FuelGauge8getVCellEv>:
    byte MSB = 0;
 8086e8c:	2300      	movs	r3, #0
float FuelGauge::getVCell() {
 8086e8e:	b507      	push	{r0, r1, r2, lr}
    if (readRegister(VCELL_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
 8086e90:	2102      	movs	r1, #2
    byte MSB = 0;
 8086e92:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
 8086e96:	f88d 3007 	strb.w	r3, [sp, #7]
    if (readRegister(VCELL_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
 8086e9a:	f10d 0206 	add.w	r2, sp, #6
 8086e9e:	f10d 0307 	add.w	r3, sp, #7
 8086ea2:	f7ff ffb6 	bl	8086e12 <_ZN9FuelGauge12readRegisterEhRhS0_>
 8086ea6:	b940      	cbnz	r0, 8086eba <_ZN9FuelGauge8getVCellEv+0x2e>
    return particle::detail::_getVCell(MSB, LSB);
 8086ea8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8086eac:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
 8086eb0:	b003      	add	sp, #12
 8086eb2:	f85d eb04 	ldr.w	lr, [sp], #4
    return particle::detail::_getVCell(MSB, LSB);
 8086eb6:	f7ff bf7d 	b.w	8086db4 <_ZN8particle6detail9_getVCellEhh>
}
 8086eba:	4802      	ldr	r0, [pc, #8]	; (8086ec4 <_ZN9FuelGauge8getVCellEv+0x38>)
 8086ebc:	b003      	add	sp, #12
 8086ebe:	f85d fb04 	ldr.w	pc, [sp], #4
 8086ec2:	bf00      	nop
 8086ec4:	bf800000 	.word	0xbf800000

08086ec8 <_ZN9FuelGauge6getSoCEv>:
    byte MSB = 0;
 8086ec8:	2300      	movs	r3, #0
float FuelGauge::getSoC() {
 8086eca:	b513      	push	{r0, r1, r4, lr}
    if(readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
 8086ecc:	2104      	movs	r1, #4
    byte MSB = 0;
 8086ece:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
 8086ed2:	f88d 3007 	strb.w	r3, [sp, #7]
    if(readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
 8086ed6:	f10d 0206 	add.w	r2, sp, #6
 8086eda:	f10d 0307 	add.w	r3, sp, #7
 8086ede:	f7ff ff98 	bl	8086e12 <_ZN9FuelGauge12readRegisterEhRhS0_>
 8086ee2:	b9a0      	cbnz	r0, 8086f0e <_ZN9FuelGauge6getSoCEv+0x46>
        float decimal = LSB / 256.0;
 8086ee4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8086ee8:	f002 ffae 	bl	8089e48 <__aeabi_i2d>
 8086eec:	2200      	movs	r2, #0
 8086eee:	4b09      	ldr	r3, [pc, #36]	; (8086f14 <_ZN9FuelGauge6getSoCEv+0x4c>)
 8086ef0:	f003 f814 	bl	8089f1c <__aeabi_dmul>
 8086ef4:	f003 fb0a 	bl	808a50c <__aeabi_d2f>
 8086ef8:	4604      	mov	r4, r0
        return MSB + decimal;
 8086efa:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8086efe:	f003 fc0f 	bl	808a720 <__aeabi_i2f>
 8086f02:	4601      	mov	r1, r0
 8086f04:	4620      	mov	r0, r4
 8086f06:	f003 fb57 	bl	808a5b8 <__addsf3>
}
 8086f0a:	b002      	add	sp, #8
 8086f0c:	bd10      	pop	{r4, pc}
        return -1.0f;
 8086f0e:	4802      	ldr	r0, [pc, #8]	; (8086f18 <_ZN9FuelGauge6getSoCEv+0x50>)
 8086f10:	e7fb      	b.n	8086f0a <_ZN9FuelGauge6getSoCEv+0x42>
 8086f12:	bf00      	nop
 8086f14:	3f700000 	.word	0x3f700000
 8086f18:	bf800000 	.word	0xbf800000

08086f1c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 8086f1c:	4b01      	ldr	r3, [pc, #4]	; (8086f24 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 8086f1e:	6018      	str	r0, [r3, #0]
    }, nullptr);
 8086f20:	4770      	bx	lr
 8086f22:	bf00      	nop
 8086f24:	200000cc 	.word	0x200000cc

08086f28 <serialEventRun>:
{
 8086f28:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8086f2a:	4b17      	ldr	r3, [pc, #92]	; (8086f88 <serialEventRun+0x60>)
 8086f2c:	b143      	cbz	r3, 8086f40 <serialEventRun+0x18>
 8086f2e:	f000 fc6d 	bl	808780c <_Z16_fetch_usbserialv>
 8086f32:	6803      	ldr	r3, [r0, #0]
 8086f34:	691b      	ldr	r3, [r3, #16]
 8086f36:	4798      	blx	r3
 8086f38:	2800      	cmp	r0, #0
 8086f3a:	dd01      	ble.n	8086f40 <serialEventRun+0x18>
        serialEvent();
 8086f3c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 8086f40:	4b12      	ldr	r3, [pc, #72]	; (8086f8c <serialEventRun+0x64>)
 8086f42:	b143      	cbz	r3, 8086f56 <serialEventRun+0x2e>
 8086f44:	f000 fe10 	bl	8087b68 <_Z22__fetch_global_Serial1v>
 8086f48:	6803      	ldr	r3, [r0, #0]
 8086f4a:	691b      	ldr	r3, [r3, #16]
 8086f4c:	4798      	blx	r3
 8086f4e:	2800      	cmp	r0, #0
 8086f50:	dd01      	ble.n	8086f56 <serialEventRun+0x2e>
        serialEvent1();
 8086f52:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 8086f56:	4b0e      	ldr	r3, [pc, #56]	; (8086f90 <serialEventRun+0x68>)
 8086f58:	b10b      	cbz	r3, 8086f5e <serialEventRun+0x36>
 8086f5a:	f3af 8000 	nop.w
    if (serialEventRun4) serialEventRun4();
 8086f5e:	4b0d      	ldr	r3, [pc, #52]	; (8086f94 <serialEventRun+0x6c>)
 8086f60:	b10b      	cbz	r3, 8086f66 <serialEventRun+0x3e>
 8086f62:	f3af 8000 	nop.w
    if (serialEventRun5) serialEventRun5();
 8086f66:	4b0c      	ldr	r3, [pc, #48]	; (8086f98 <serialEventRun+0x70>)
 8086f68:	b10b      	cbz	r3, 8086f6e <serialEventRun+0x46>
 8086f6a:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8086f6e:	4b0b      	ldr	r3, [pc, #44]	; (8086f9c <serialEventRun+0x74>)
 8086f70:	b143      	cbz	r3, 8086f84 <serialEventRun+0x5c>
 8086f72:	f000 fc89 	bl	8087888 <_Z17_fetch_usbserial1v>
 8086f76:	6803      	ldr	r3, [r0, #0]
 8086f78:	691b      	ldr	r3, [r3, #16]
 8086f7a:	4798      	blx	r3
 8086f7c:	2800      	cmp	r0, #0
 8086f7e:	dd01      	ble.n	8086f84 <serialEventRun+0x5c>
        usbSerialEvent1();
 8086f80:	f3af 8000 	nop.w
}
 8086f84:	bd08      	pop	{r3, pc}
 8086f86:	bf00      	nop
	...

08086fa0 <_post_loop>:
{
 8086fa0:	b508      	push	{r3, lr}
	serialEventRun();
 8086fa2:	f7ff ffc1 	bl	8086f28 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8086fa6:	f7fd fdb3 	bl	8084b10 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8086faa:	4b01      	ldr	r3, [pc, #4]	; (8086fb0 <_post_loop+0x10>)
 8086fac:	6018      	str	r0, [r3, #0]
}
 8086fae:	bd08      	pop	{r3, pc}
 8086fb0:	200009b8 	.word	0x200009b8

08086fb4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8086fb4:	4805      	ldr	r0, [pc, #20]	; (8086fcc <_Z33system_initialize_user_backup_ramv+0x18>)
 8086fb6:	4a06      	ldr	r2, [pc, #24]	; (8086fd0 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 8086fb8:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8086fba:	1a12      	subs	r2, r2, r0
 8086fbc:	4905      	ldr	r1, [pc, #20]	; (8086fd4 <_Z33system_initialize_user_backup_ramv+0x20>)
 8086fbe:	f003 fe41 	bl	808ac44 <memcpy>
    __backup_sram_signature = signature;
 8086fc2:	4b05      	ldr	r3, [pc, #20]	; (8086fd8 <_Z33system_initialize_user_backup_ramv+0x24>)
 8086fc4:	4a05      	ldr	r2, [pc, #20]	; (8086fdc <_Z33system_initialize_user_backup_ramv+0x28>)
 8086fc6:	601a      	str	r2, [r3, #0]
}
 8086fc8:	bd08      	pop	{r3, pc}
 8086fca:	bf00      	nop
 8086fcc:	40024000 	.word	0x40024000
 8086fd0:	40024224 	.word	0x40024224
 8086fd4:	0808c0c0 	.word	0x0808c0c0
 8086fd8:	40024220 	.word	0x40024220
 8086fdc:	9a271c1e 	.word	0x9a271c1e

08086fe0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8086fe0:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8086fe2:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8086fe4:	461a      	mov	r2, r3
 8086fe6:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8086fea:	9300      	str	r3, [sp, #0]
 8086fec:	f7fd fff2 	bl	8084fd4 <system_ctrl_set_result>
}
 8086ff0:	b003      	add	sp, #12
 8086ff2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08086ff8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 8086ff8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8086ffa:	8843      	ldrh	r3, [r0, #2]
 8086ffc:	2b0a      	cmp	r3, #10
 8086ffe:	d008      	beq.n	8087012 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8087000:	2b50      	cmp	r3, #80	; 0x50
 8087002:	d10b      	bne.n	808701c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 8087004:	4b09      	ldr	r3, [pc, #36]	; (808702c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 8087006:	681b      	ldr	r3, [r3, #0]
 8087008:	b14b      	cbz	r3, 808701e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 808700a:	b003      	add	sp, #12
 808700c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 8087010:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 8087012:	f7ff ffe5 	bl	8086fe0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 8087016:	b003      	add	sp, #12
 8087018:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 808701c:	2300      	movs	r3, #0
 808701e:	461a      	mov	r2, r3
 8087020:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8087024:	9300      	str	r3, [sp, #0]
 8087026:	f7fd ffd5 	bl	8084fd4 <system_ctrl_set_result>
}
 808702a:	e7f4      	b.n	8087016 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 808702c:	2000046c 	.word	0x2000046c

08087030 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 8087030:	2100      	movs	r1, #0
{
 8087032:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 8087034:	4811      	ldr	r0, [pc, #68]	; (808707c <module_user_init_hook+0x4c>)
 8087036:	f7fe f8f3 	bl	8085220 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 808703a:	4b11      	ldr	r3, [pc, #68]	; (8087080 <module_user_init_hook+0x50>)
 808703c:	681a      	ldr	r2, [r3, #0]
 808703e:	4b11      	ldr	r3, [pc, #68]	; (8087084 <module_user_init_hook+0x54>)
 8087040:	429a      	cmp	r2, r3
 8087042:	bf0c      	ite	eq
 8087044:	2201      	moveq	r2, #1
 8087046:	2200      	movne	r2, #0
 8087048:	4b0f      	ldr	r3, [pc, #60]	; (8087088 <module_user_init_hook+0x58>)
 808704a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 808704c:	d001      	beq.n	8087052 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 808704e:	f7ff ffb1 	bl	8086fb4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8087052:	f7fd fd3d 	bl	8084ad0 <HAL_RNG_GetRandomNumber>
 8087056:	4604      	mov	r4, r0
    srand(seed);
 8087058:	f003 fe24 	bl	808aca4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 808705c:	4b0b      	ldr	r3, [pc, #44]	; (808708c <module_user_init_hook+0x5c>)
 808705e:	b113      	cbz	r3, 8087066 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 8087060:	4620      	mov	r0, r4
 8087062:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8087066:	2100      	movs	r1, #0
 8087068:	4808      	ldr	r0, [pc, #32]	; (808708c <module_user_init_hook+0x5c>)
 808706a:	f7fe f879 	bl	8085160 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 808706e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8087072:	2100      	movs	r1, #0
 8087074:	4806      	ldr	r0, [pc, #24]	; (8087090 <module_user_init_hook+0x60>)
 8087076:	f7fd bfa3 	b.w	8084fc0 <system_ctrl_set_app_request_handler>
 808707a:	bf00      	nop
 808707c:	08086f1d 	.word	0x08086f1d
 8087080:	40024220 	.word	0x40024220
 8087084:	9a271c1e 	.word	0x9a271c1e
 8087088:	20000468 	.word	0x20000468
 808708c:	00000000 	.word	0x00000000
 8087090:	08086ff9 	.word	0x08086ff9

08087094 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8087094:	4770      	bx	lr

08087096 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 8087096:	2000      	movs	r0, #0
 8087098:	4770      	bx	lr

0808709a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 808709a:	b510      	push	{r4, lr}
 808709c:	4604      	mov	r4, r0
 808709e:	2110      	movs	r1, #16
 80870a0:	f001 fa2d 	bl	80884fe <_ZdlPvj>
 80870a4:	4620      	mov	r0, r4
 80870a6:	bd10      	pop	{r4, pc}

080870a8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80870a8:	b508      	push	{r3, lr}
      { delete this; }
 80870aa:	f7ff fff6 	bl	808709a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80870ae:	bd08      	pop	{r3, pc}

080870b0 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80870b0:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80870b2:	b530      	push	{r4, r5, lr}
        type_(type) {
 80870b4:	f64f 749c 	movw	r4, #65436	; 0xff9c
 80870b8:	6002      	str	r2, [r0, #0]
 80870ba:	8084      	strh	r4, [r0, #4]
 80870bc:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80870be:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80870c0:	680c      	ldr	r4, [r1, #0]
 80870c2:	8085      	strh	r5, [r0, #4]
 80870c4:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80870c6:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80870c8:	bd30      	pop	{r4, r5, pc}

080870ca <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80870ca:	b510      	push	{r4, lr}
 80870cc:	4604      	mov	r4, r0
    free((void*)msg_);
 80870ce:	6800      	ldr	r0, [r0, #0]
 80870d0:	f7fe f85e 	bl	8085190 <free>
}
 80870d4:	4620      	mov	r0, r4
 80870d6:	bd10      	pop	{r4, pc}

080870d8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80870d8:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80870da:	68c4      	ldr	r4, [r0, #12]
 80870dc:	b1f4      	cbz	r4, 808711c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80870de:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80870e0:	2b02      	cmp	r3, #2
 80870e2:	d103      	bne.n	80870ec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80870e4:	f104 000c 	add.w	r0, r4, #12
 80870e8:	f7ff ffef 	bl	80870ca <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80870ec:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80870ee:	b135      	cbz	r5, 80870fe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 80870f0:	4628      	mov	r0, r5
 80870f2:	f7f9 fb83 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
 80870f6:	2110      	movs	r1, #16
 80870f8:	4628      	mov	r0, r5
 80870fa:	f001 fa00 	bl	80884fe <_ZdlPvj>
 80870fe:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 8087100:	b135      	cbz	r5, 8087110 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 8087102:	4628      	mov	r0, r5
 8087104:	f7f9 fb7a 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
 8087108:	2110      	movs	r1, #16
 808710a:	4628      	mov	r0, r5
 808710c:	f001 f9f7 	bl	80884fe <_ZdlPvj>
 8087110:	4620      	mov	r0, r4
 8087112:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8087116:	2114      	movs	r1, #20
 8087118:	f001 b9f1 	b.w	80884fe <_ZdlPvj>
 808711c:	bd38      	pop	{r3, r4, r5, pc}

0808711e <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 808711e:	b510      	push	{r4, lr}
 8087120:	b088      	sub	sp, #32
 8087122:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 8087124:	4668      	mov	r0, sp
 8087126:	f7fe faa3 	bl	8085670 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 808712a:	4669      	mov	r1, sp
 808712c:	a804      	add	r0, sp, #16
 808712e:	f7fe fae9 	bl	8085704 <_ZN6StringC1ERKS_>
 8087132:	a804      	add	r0, sp, #16
 8087134:	47a0      	blx	r4
 8087136:	4604      	mov	r4, r0
 8087138:	a804      	add	r0, sp, #16
 808713a:	f7fe fa4f 	bl	80855dc <_ZN6StringD1Ev>
    String p(param);
 808713e:	4668      	mov	r0, sp
 8087140:	f7fe fa4c 	bl	80855dc <_ZN6StringD1Ev>
}
 8087144:	4620      	mov	r0, r4
 8087146:	b008      	add	sp, #32
 8087148:	bd10      	pop	{r4, pc}

0808714a <_ZN10CloudClass22call_std_user_functionEPvPKcS0_>:

int CloudClass::call_std_user_function(void* data, const char* param, void* reserved)
{
 808714a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 808714c:	4604      	mov	r4, r0
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
 808714e:	4668      	mov	r0, sp
 8087150:	f7fe fa8e 	bl	8085670 <_ZN6StringC1EPK19__FlashStringHelper>
      if (_M_empty())
 8087154:	68a3      	ldr	r3, [r4, #8]
 8087156:	b90b      	cbnz	r3, 808715c <_ZN10CloudClass22call_std_user_functionEPvPKcS0_+0x12>
	__throw_bad_function_call();
 8087158:	f001 f9d7 	bl	808850a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808715c:	68e3      	ldr	r3, [r4, #12]
 808715e:	4669      	mov	r1, sp
 8087160:	4620      	mov	r0, r4
 8087162:	4798      	blx	r3
 8087164:	4604      	mov	r4, r0
 8087166:	4668      	mov	r0, sp
 8087168:	f7fe fa38 	bl	80855dc <_ZN6StringD1Ev>
}
 808716c:	4620      	mov	r0, r4
 808716e:	b004      	add	sp, #16
 8087170:	bd10      	pop	{r4, pc}

08087172 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_>:

void CloudClass::call_wiring_event_handler(const void* handler_data, const char *event_name, const char *data)
{
 8087172:	b507      	push	{r0, r1, r2, lr}
 8087174:	e9cd 1200 	strd	r1, r2, [sp]
      if (_M_empty())
 8087178:	6882      	ldr	r2, [r0, #8]
 808717a:	b90a      	cbnz	r2, 8087180 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_+0xe>
	__throw_bad_function_call();
 808717c:	f001 f9c5 	bl	808850a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8087180:	4669      	mov	r1, sp
 8087182:	68c3      	ldr	r3, [r0, #12]
 8087184:	aa01      	add	r2, sp, #4
 8087186:	4798      	blx	r3
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}
 8087188:	b003      	add	sp, #12
 808718a:	f85d fb04 	ldr.w	pc, [sp], #4

0808718e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 808718e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 8087190:	2300      	movs	r3, #0
         size = sizeof(*this);
 8087192:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 8087194:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 8087198:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 808719a:	4669      	mov	r1, sp
 808719c:	461a      	mov	r2, r3
 808719e:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 80871a0:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 80871a4:	f8ad 4000 	strh.w	r4, [sp]
 80871a8:	f7fd ff9a 	bl	80850e0 <spark_function>
}
 80871ac:	b004      	add	sp, #16
 80871ae:	bd10      	pop	{r4, pc}

080871b0 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
 80871b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
 80871b2:	230c      	movs	r3, #12
    spark_cloud_disconnect_options opts = {};
 80871b4:	2100      	movs	r1, #0
    opts.size = sizeof(opts);
 80871b6:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
 80871ba:	6803      	ldr	r3, [r0, #0]
    spark_cloud_disconnect_options opts = {};
 80871bc:	f8ad 100d 	strh.w	r1, [sp, #13]
    opts.flags = flags_;
 80871c0:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
 80871c4:	7a03      	ldrb	r3, [r0, #8]
    spark_cloud_disconnect_options opts = {};
 80871c6:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.graceful = graceful_;
 80871ca:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
 80871ce:	6843      	ldr	r3, [r0, #4]
 80871d0:	9302      	str	r3, [sp, #8]
    opts.clear_session = clearSession_;
 80871d2:	7a43      	ldrb	r3, [r0, #9]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 80871d4:	a801      	add	r0, sp, #4
    opts.clear_session = clearSession_;
 80871d6:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 80871da:	f7fd ffc9 	bl	8085170 <spark_cloud_disconnect>
}
 80871de:	b005      	add	sp, #20
 80871e0:	f85d fb04 	ldr.w	pc, [sp], #4

080871e4 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80871e4:	680b      	ldr	r3, [r1, #0]
 80871e6:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 80871e8:	684b      	ldr	r3, [r1, #4]
 80871ea:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 80871ec:	b113      	cbz	r3, 80871f4 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
 80871ee:	685a      	ldr	r2, [r3, #4]
 80871f0:	3201      	adds	r2, #1
 80871f2:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80871f4:	4770      	bx	lr

080871f6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80871f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80871f8:	4604      	mov	r4, r0
 80871fa:	4668      	mov	r0, sp
 80871fc:	460d      	mov	r5, r1
 80871fe:	f7ff fff1 	bl	80871e4 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 8087202:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8087204:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8087206:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 8087208:	2300      	movs	r3, #0
	_M_pi = __tmp;
 808720a:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 808720c:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 808720e:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8087210:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 8087212:	f7f9 fb6d 	bl	80808f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 8087216:	b135      	cbz	r5, 8087226 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
 8087218:	1d28      	adds	r0, r5, #4
 808721a:	f7f9 fb69 	bl	80808f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808721e:	2108      	movs	r1, #8
 8087220:	4628      	mov	r0, r5
 8087222:	f001 f96c 	bl	80884fe <_ZdlPvj>
        return p;
    }
 8087226:	4620      	mov	r0, r4
 8087228:	b003      	add	sp, #12
 808722a:	bd30      	pop	{r4, r5, pc}

0808722c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 808722c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 808722e:	b510      	push	{r4, lr}
      if (_M_empty())
 8087230:	b90a      	cbnz	r2, 8087236 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 8087232:	f001 f96a 	bl	808850a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8087236:	68c3      	ldr	r3, [r0, #12]
    }
 8087238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808723c:	4718      	bx	r3

0808723e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 808723e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 8087240:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8087242:	f100 0110 	add.w	r1, r0, #16
 8087246:	f7ff fff1 	bl	808722c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 808724a:	bd08      	pop	{r3, pc}

0808724c <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 808724c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 808724e:	b510      	push	{r4, lr}
      if (_M_empty())
 8087250:	b90a      	cbnz	r2, 8087256 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 8087252:	f001 f95a 	bl	808850a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8087256:	68c3      	ldr	r3, [r0, #12]
    }
 8087258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808725c:	4718      	bx	r3

0808725e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 808725e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 8087260:	6800      	ldr	r0, [r0, #0]
 8087262:	f100 0110 	add.w	r1, r0, #16
 8087266:	f7ff fff1 	bl	808724c <_ZNKSt8functionIFvRKbEEclES1_>
      }
 808726a:	bd08      	pop	{r3, pc}

0808726c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 808726c:	b538      	push	{r3, r4, r5, lr}
 808726e:	2300      	movs	r3, #0
 8087270:	4604      	mov	r4, r0
 8087272:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8087274:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 8087276:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8087278:	f7f8 ff1f 	bl	80800ba <_Znwj>
 808727c:	b128      	cbz	r0, 808728a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 808727e:	2301      	movs	r3, #1
 8087280:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 8087284:	4b02      	ldr	r3, [pc, #8]	; (8087290 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 8087286:	60c5      	str	r5, [r0, #12]
 8087288:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 808728a:	6020      	str	r0, [r4, #0]
	}
 808728c:	4620      	mov	r0, r4
 808728e:	bd38      	pop	{r3, r4, r5, pc}
 8087290:	0808bcbc 	.word	0x0808bcbc

08087294 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 8087294:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8087296:	2300      	movs	r3, #0
 8087298:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 808729a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 808729c:	4604      	mov	r4, r0
 808729e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80872a0:	b12b      	cbz	r3, 80872ae <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80872a2:	2202      	movs	r2, #2
 80872a4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80872a6:	68eb      	ldr	r3, [r5, #12]
 80872a8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80872aa:	68ab      	ldr	r3, [r5, #8]
 80872ac:	60a3      	str	r3, [r4, #8]
    }
 80872ae:	4620      	mov	r0, r4
 80872b0:	bd38      	pop	{r3, r4, r5, pc}
	...

080872b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 80872b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80872b6:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
 80872b8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80872ba:	4668      	mov	r0, sp
 80872bc:	f7ff fef8 	bl	80870b0 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80872c0:	f04f 0302 	mov.w	r3, #2
 80872c4:	e8d4 2f4f 	ldrexb	r2, [r4]
 80872c8:	2a00      	cmp	r2, #0
 80872ca:	d103      	bne.n	80872d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80872cc:	e8c4 3f41 	strexb	r1, r3, [r4]
 80872d0:	2900      	cmp	r1, #0
 80872d2:	d1f7      	bne.n	80872c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 80872d4:	d125      	bne.n	8087322 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 80872d6:	f104 050c 	add.w	r5, r4, #12
 80872da:	4669      	mov	r1, sp
 80872dc:	4628      	mov	r0, r5
 80872de:	f7ff fee7 	bl	80870b0 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 80872e2:	2301      	movs	r3, #1
 80872e4:	f3bf 8f5b 	dmb	ish
 80872e8:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80872ea:	2000      	movs	r0, #0
 80872ec:	f3bf 8f5b 	dmb	ish
 80872f0:	f104 0308 	add.w	r3, r4, #8
 80872f4:	e853 6f00 	ldrex	r6, [r3]
 80872f8:	e843 0200 	strex	r2, r0, [r3]
 80872fc:	2a00      	cmp	r2, #0
 80872fe:	d1f9      	bne.n	80872f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 8087300:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 8087304:	b16e      	cbz	r6, 8087322 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 8087306:	f7fd fe43 	bl	8084f90 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 808730a:	b178      	cbz	r0, 808732c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 808730c:	4629      	mov	r1, r5
 808730e:	4630      	mov	r0, r6
 8087310:	f7ff ff8c 	bl	808722c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 8087314:	4630      	mov	r0, r6
 8087316:	f7f9 fa71 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 808731a:	2110      	movs	r1, #16
 808731c:	4630      	mov	r0, r6
 808731e:	f001 f8ee 	bl	80884fe <_ZdlPvj>
        p_->setError(std::move(error));
 8087322:	4668      	mov	r0, sp
 8087324:	f7ff fed1 	bl	80870ca <_ZN8particle5ErrorD1Ev>
    }
 8087328:	b009      	add	sp, #36	; 0x24
 808732a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 808732c:	4631      	mov	r1, r6
 808732e:	a802      	add	r0, sp, #8
 8087330:	f7ff ffb0 	bl	8087294 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 8087334:	68e0      	ldr	r0, [r4, #12]
 8087336:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 808733a:	b108      	cbz	r0, 8087340 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 808733c:	f003 fd0a 	bl	808ad54 <strdup>
        type_(type) {
 8087340:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8087342:	2010      	movs	r0, #16
 8087344:	f8ad 501c 	strh.w	r5, [sp, #28]
 8087348:	f7f8 feb7 	bl	80800ba <_Znwj>
 808734c:	4605      	mov	r5, r0
 808734e:	b1e8      	cbz	r0, 808738c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 8087350:	2700      	movs	r7, #0
 8087352:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8087354:	2018      	movs	r0, #24
 8087356:	f7f8 feb0 	bl	80800ba <_Znwj>
 808735a:	4604      	mov	r4, r0
 808735c:	b188      	cbz	r0, 8087382 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 808735e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 8087360:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 8087362:	a802      	add	r0, sp, #8
 8087364:	f7fa f92d 	bl	80815c2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8087368:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 808736a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808736c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808736e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8087370:	9204      	str	r2, [sp, #16]
 8087372:	68e2      	ldr	r2, [r4, #12]
 8087374:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 8087376:	60e3      	str	r3, [r4, #12]
 8087378:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 808737c:	9205      	str	r2, [sp, #20]
 808737e:	f7ff fe97 	bl	80870b0 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 8087382:	4b08      	ldr	r3, [pc, #32]	; (80873a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8087384:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 8087386:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8087388:	4b07      	ldr	r3, [pc, #28]	; (80873a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 808738a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 808738c:	a806      	add	r0, sp, #24
 808738e:	f7ff fe9c 	bl	80870ca <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 8087392:	a802      	add	r0, sp, #8
 8087394:	f7f9 fa32 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8087398:	2200      	movs	r2, #0
 808739a:	4629      	mov	r1, r5
 808739c:	4803      	ldr	r0, [pc, #12]	; (80873ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 808739e:	f7fd fdff 	bl	8084fa0 <application_thread_invoke>
 80873a2:	e7b7      	b.n	8087314 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 80873a4:	0808723f 	.word	0x0808723f
 80873a8:	080874c9 	.word	0x080874c9
 80873ac:	08087bb9 	.word	0x08087bb9

080873b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80873b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80873b4:	b08a      	sub	sp, #40	; 0x28
 80873b6:	4605      	mov	r5, r0
 80873b8:	460c      	mov	r4, r1
 80873ba:	4617      	mov	r7, r2
 80873bc:	4698      	mov	r8, r3
 80873be:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80873c2:	f7fd fea5 	bl	8085110 <spark_cloud_flag_connected>
 80873c6:	ae07      	add	r6, sp, #28
    if (!connected()) {
 80873c8:	4682      	mov	sl, r0
 80873ca:	bb38      	cbnz	r0, 808741c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 80873cc:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80873d0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80873d2:	a905      	add	r1, sp, #20
 80873d4:	4630      	mov	r0, r6
 80873d6:	f8ad 3018 	strh.w	r3, [sp, #24]
 80873da:	f7ff fe69 	bl	80870b0 <_ZN8particle5ErrorC1EOS0_>
 80873de:	2014      	movs	r0, #20
 80873e0:	f7f8 fe6b 	bl	80800ba <_Znwj>
 80873e4:	4604      	mov	r4, r0
 80873e6:	b148      	cbz	r0, 80873fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80873e8:	2302      	movs	r3, #2
 80873ea:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80873ec:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80873ee:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80873f2:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80873f4:	4631      	mov	r1, r6
 80873f6:	300c      	adds	r0, #12
 80873f8:	f7ff fe5a 	bl	80870b0 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80873fc:	4628      	mov	r0, r5
	: __shared_count(__p)
 80873fe:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8087400:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 8087404:	f7ff ff32 	bl	808726c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8087408:	4630      	mov	r0, r6
 808740a:	f7ff fe5e 	bl	80870ca <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 808740e:	a805      	add	r0, sp, #20
 8087410:	f7ff fe5b 	bl	80870ca <_ZN8particle5ErrorD1Ev>
}
 8087414:	4628      	mov	r0, r5
 8087416:	b00a      	add	sp, #40	; 0x28
 8087418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 808741c:	230c      	movs	r3, #12
 808741e:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 8087422:	2014      	movs	r0, #20
 8087424:	e9cd aa08 	strd	sl, sl, [sp, #32]
 8087428:	9307      	str	r3, [sp, #28]
 808742a:	f7f8 fe46 	bl	80800ba <_Znwj>
 808742e:	4601      	mov	r1, r0
 8087430:	b128      	cbz	r0, 808743e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8087432:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 8087436:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 808743a:	f880 a001 	strb.w	sl, [r0, #1]
 808743e:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8087440:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 8087442:	f7ff ff13 	bl	808726c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 8087446:	4b1f      	ldr	r3, [pc, #124]	; (80874c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x114>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 8087448:	2008      	movs	r0, #8
 808744a:	9308      	str	r3, [sp, #32]
 808744c:	f7f8 fe35 	bl	80800ba <_Znwj>
 8087450:	4682      	mov	sl, r0
 8087452:	b110      	cbz	r0, 808745a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xaa>
 8087454:	a903      	add	r1, sp, #12
 8087456:	f7ff fec5 	bl	80871e4 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 808745a:	4642      	mov	r2, r8
 808745c:	4639      	mov	r1, r7
 808745e:	4620      	mov	r0, r4
 8087460:	9600      	str	r6, [sp, #0]
 8087462:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 8087466:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 808746a:	f7fd fe61 	bl	8085130 <spark_send_event>
 808746e:	b9b8      	cbnz	r0, 80874a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf0>
	return __atomic_load_n(&_M_i, int(__m));
 8087470:	9b03      	ldr	r3, [sp, #12]
 8087472:	785b      	ldrb	r3, [r3, #1]
 8087474:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8087478:	b993      	cbnz	r3, 80874a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf0>
 808747a:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 808747e:	a905      	add	r1, sp, #20
 8087480:	a803      	add	r0, sp, #12
 8087482:	9205      	str	r2, [sp, #20]
 8087484:	f8ad 3018 	strh.w	r3, [sp, #24]
 8087488:	f7ff ff14 	bl	80872b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 808748c:	a805      	add	r0, sp, #20
 808748e:	f7ff fe1c 	bl	80870ca <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 8087492:	a805      	add	r0, sp, #20
 8087494:	9909      	ldr	r1, [sp, #36]	; 0x24
 8087496:	f7ff feae 	bl	80871f6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 808749a:	a806      	add	r0, sp, #24
 808749c:	f7f9 fa28 	bl	80808f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80874a0:	a903      	add	r1, sp, #12
 80874a2:	a805      	add	r0, sp, #20
 80874a4:	f7ff fe9e 	bl	80871e4 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80874a8:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80874aa:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80874ac:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80874ae:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80874b0:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80874b2:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80874b4:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80874b6:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80874b8:	f7f9 fa1a 	bl	80808f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80874bc:	a804      	add	r0, sp, #16
 80874be:	f7f9 fa17 	bl	80808f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80874c2:	e7a7      	b.n	8087414 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80874c4:	08087545 	.word	0x08087545

080874c8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
 80874c8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80874ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80874cc:	4605      	mov	r5, r0
	switch (__op)
 80874ce:	d103      	bne.n	80874d8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 80874d0:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80874d2:	6003      	str	r3, [r0, #0]
      }
 80874d4:	2000      	movs	r0, #0
 80874d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
 80874d8:	2a02      	cmp	r2, #2
 80874da:	d010      	beq.n	80874fe <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80874dc:	2a03      	cmp	r2, #3
 80874de:	d1f9      	bne.n	80874d4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 80874e0:	6804      	ldr	r4, [r0, #0]
 80874e2:	2c00      	cmp	r4, #0
 80874e4:	d0f6      	beq.n	80874d4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
 80874e6:	f104 0010 	add.w	r0, r4, #16
 80874ea:	f7ff fdee 	bl	80870ca <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80874ee:	4620      	mov	r0, r4
 80874f0:	f7f9 f984 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80874f4:	2118      	movs	r1, #24
 80874f6:	4620      	mov	r0, r4
 80874f8:	f001 f801 	bl	80884fe <_ZdlPvj>
 80874fc:	e7ea      	b.n	80874d4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 80874fe:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 8087500:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 8087502:	f7f8 fdda 	bl	80800ba <_Znwj>
 8087506:	4604      	mov	r4, r0
 8087508:	b150      	cbz	r0, 8087520 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
 808750a:	4631      	mov	r1, r6
 808750c:	f7ff fec2 	bl	8087294 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 8087510:	6930      	ldr	r0, [r6, #16]
 8087512:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 8087516:	b108      	cbz	r0, 808751c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
 8087518:	f003 fc1c 	bl	808ad54 <strdup>
        type_(type) {
 808751c:	6120      	str	r0, [r4, #16]
 808751e:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 8087520:	602c      	str	r4, [r5, #0]
	}
 8087522:	e7d7      	b.n	80874d4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

08087524 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 8087524:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8087526:	2300      	movs	r3, #0
 8087528:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 808752a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 808752c:	4604      	mov	r4, r0
 808752e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 8087530:	b12b      	cbz	r3, 808753e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8087532:	2202      	movs	r2, #2
 8087534:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8087536:	68eb      	ldr	r3, [r5, #12]
 8087538:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 808753a:	68ab      	ldr	r3, [r5, #8]
 808753c:	60a3      	str	r3, [r4, #8]
    }
 808753e:	4620      	mov	r0, r4
 8087540:	bd38      	pop	{r3, r4, r5, pc}
	...

08087544 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 8087544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8087546:	4604      	mov	r4, r0
 8087548:	b089      	sub	sp, #36	; 0x24
 808754a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 808754c:	a801      	add	r0, sp, #4
 808754e:	4611      	mov	r1, r2
 8087550:	f7ff fe51 	bl	80871f6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 8087554:	b1a4      	cbz	r4, 8087580 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 8087556:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 8087558:	b11d      	cbz	r5, 8087562 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 808755a:	4628      	mov	r0, r5
 808755c:	f003 fbfa 	bl	808ad54 <strdup>
 8087560:	4605      	mov	r5, r0
 8087562:	a801      	add	r0, sp, #4
 8087564:	a903      	add	r1, sp, #12
        type_(type) {
 8087566:	9503      	str	r5, [sp, #12]
 8087568:	f8ad 4010 	strh.w	r4, [sp, #16]
 808756c:	f7ff fea2 	bl	80872b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8087570:	a803      	add	r0, sp, #12
 8087572:	f7ff fdaa 	bl	80870ca <_ZN8particle5ErrorD1Ev>
 8087576:	a802      	add	r0, sp, #8
 8087578:	f7f9 f9ba 	bl	80808f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 808757c:	b009      	add	sp, #36	; 0x24
 808757e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 8087580:	2301      	movs	r3, #1
      { return _M_ptr; }
 8087582:	9d01      	ldr	r5, [sp, #4]
 8087584:	e8d5 2f4f 	ldrexb	r2, [r5]
 8087588:	2a00      	cmp	r2, #0
 808758a:	d103      	bne.n	8087594 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 808758c:	e8c5 3f41 	strexb	r1, r3, [r5]
 8087590:	2900      	cmp	r1, #0
 8087592:	d1f7      	bne.n	8087584 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 8087594:	d1ef      	bne.n	8087576 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 8087596:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 8087598:	f3bf 8f5b 	dmb	ish
 808759c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 808759e:	f3bf 8f5b 	dmb	ish
 80875a2:	1d2b      	adds	r3, r5, #4
 80875a4:	e853 6f00 	ldrex	r6, [r3]
 80875a8:	e843 4200 	strex	r2, r4, [r3]
 80875ac:	2a00      	cmp	r2, #0
 80875ae:	d1f9      	bne.n	80875a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80875b0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80875b4:	2e00      	cmp	r6, #0
 80875b6:	d0de      	beq.n	8087576 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80875b8:	4620      	mov	r0, r4
 80875ba:	f7fd fce9 	bl	8084f90 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80875be:	4607      	mov	r7, r0
 80875c0:	b160      	cbz	r0, 80875dc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80875c2:	4630      	mov	r0, r6
 80875c4:	f105 010c 	add.w	r1, r5, #12
 80875c8:	f7ff fe40 	bl	808724c <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80875cc:	4630      	mov	r0, r6
 80875ce:	f7f9 f915 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80875d2:	2110      	movs	r1, #16
 80875d4:	4630      	mov	r0, r6
 80875d6:	f000 ff92 	bl	80884fe <_ZdlPvj>
 80875da:	e7cc      	b.n	8087576 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80875dc:	4631      	mov	r1, r6
 80875de:	a803      	add	r0, sp, #12
 80875e0:	f7ff ffa0 	bl	8087524 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80875e4:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80875e6:	2010      	movs	r0, #16
 80875e8:	f88d 301c 	strb.w	r3, [sp, #28]
 80875ec:	f7f8 fd65 	bl	80800ba <_Znwj>
 80875f0:	4605      	mov	r5, r0
 80875f2:	b1d0      	cbz	r0, 808762a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80875f4:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80875f6:	2014      	movs	r0, #20
 80875f8:	f7f8 fd5f 	bl	80800ba <_Znwj>
 80875fc:	4604      	mov	r4, r0
 80875fe:	b178      	cbz	r0, 8087620 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 8087600:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 8087602:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 8087604:	a803      	add	r0, sp, #12
 8087606:	f7f9 ffdc 	bl	80815c2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808760a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 808760c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808760e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8087610:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 8087612:	9205      	str	r2, [sp, #20]
 8087614:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8087616:	60e3      	str	r3, [r4, #12]
 8087618:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 808761c:	9206      	str	r2, [sp, #24]
 808761e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 8087620:	4b06      	ldr	r3, [pc, #24]	; (808763c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8087622:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 8087624:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8087626:	4b06      	ldr	r3, [pc, #24]	; (8087640 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 8087628:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 808762a:	a803      	add	r0, sp, #12
 808762c:	f7f9 f8e6 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8087630:	2200      	movs	r2, #0
 8087632:	4629      	mov	r1, r5
 8087634:	4803      	ldr	r0, [pc, #12]	; (8087644 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 8087636:	f7fd fcb3 	bl	8084fa0 <application_thread_invoke>
 808763a:	e7c7      	b.n	80875cc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 808763c:	0808725f 	.word	0x0808725f
 8087640:	08087649 	.word	0x08087649
 8087644:	08087bb9 	.word	0x08087bb9

08087648 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
 8087648:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 808764a:	b570      	push	{r4, r5, r6, lr}
 808764c:	4604      	mov	r4, r0
	switch (__op)
 808764e:	d103      	bne.n	8087658 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 8087650:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8087652:	6003      	str	r3, [r0, #0]
      }
 8087654:	2000      	movs	r0, #0
 8087656:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
 8087658:	2a02      	cmp	r2, #2
 808765a:	d00c      	beq.n	8087676 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 808765c:	2a03      	cmp	r2, #3
 808765e:	d1f9      	bne.n	8087654 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 8087660:	6804      	ldr	r4, [r0, #0]
 8087662:	2c00      	cmp	r4, #0
 8087664:	d0f6      	beq.n	8087654 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
 8087666:	4620      	mov	r0, r4
 8087668:	f7f9 f8c8 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 808766c:	2114      	movs	r1, #20
 808766e:	4620      	mov	r0, r4
 8087670:	f000 ff45 	bl	80884fe <_ZdlPvj>
 8087674:	e7ee      	b.n	8087654 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 8087676:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 8087678:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 808767a:	f7f8 fd1e 	bl	80800ba <_Znwj>
 808767e:	4605      	mov	r5, r0
 8087680:	b120      	cbz	r0, 808768c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
 8087682:	4631      	mov	r1, r6
 8087684:	f7ff ff4e 	bl	8087524 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 8087688:	7c33      	ldrb	r3, [r6, #16]
 808768a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 808768c:	6025      	str	r5, [r4, #0]
	}
 808768e:	e7e1      	b.n	8087654 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

08087690 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8087690:	4770      	bx	lr

08087692 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8087692:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8087694:	460e      	mov	r6, r1
 8087696:	2400      	movs	r4, #0
 8087698:	f100 0708 	add.w	r7, r0, #8
 808769c:	1d05      	adds	r5, r0, #4
        return printNumber(val, base) + t;
 808769e:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80876a2:	220a      	movs	r2, #10
 80876a4:	4630      	mov	r0, r6
 80876a6:	f7fe f96e 	bl	8085986 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80876aa:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80876ac:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80876ae:	d101      	bne.n	80876b4 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80876b0:	4620      	mov	r0, r4
 80876b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80876b4:	2c00      	cmp	r4, #0
 80876b6:	d0f2      	beq.n	808769e <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80876b8:	212e      	movs	r1, #46	; 0x2e
 80876ba:	4630      	mov	r0, r6
 80876bc:	f7fe f94a 	bl	8085954 <_ZN5Print5printEc>
 80876c0:	4404      	add	r4, r0
 80876c2:	e7ec      	b.n	808769e <_ZNK9IPAddress7printToER5Print+0xc>

080876c4 <_ZN9IPAddressD0Ev>:
 80876c4:	b510      	push	{r4, lr}
 80876c6:	4604      	mov	r4, r0
 80876c8:	2108      	movs	r1, #8
 80876ca:	f000 ff18 	bl	80884fe <_ZdlPvj>
 80876ce:	4620      	mov	r0, r4
 80876d0:	bd10      	pop	{r4, pc}
	...

080876d4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80876d4:	4a02      	ldr	r2, [pc, #8]	; (80876e0 <_ZN9IPAddressC1Ev+0xc>)
 80876d6:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80876d8:	2200      	movs	r2, #0
 80876da:	6042      	str	r2, [r0, #4]
}
 80876dc:	4770      	bx	lr
 80876de:	bf00      	nop
 80876e0:	0808bcd8 	.word	0x0808bcd8

080876e4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80876e4:	4a02      	ldr	r2, [pc, #8]	; (80876f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 80876e6:	6002      	str	r2, [r0, #0]
    memcpy(&this->address, &address, sizeof(address));
 80876e8:	680a      	ldr	r2, [r1, #0]
 80876ea:	6042      	str	r2, [r0, #4]
}
 80876ec:	4770      	bx	lr
 80876ee:	bf00      	nop
 80876f0:	0808bcd8 	.word	0x0808bcd8

080876f4 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
 80876f4:	4a01      	ldr	r2, [pc, #4]	; (80876fc <_ZN9IPAddressC1Em+0x8>)
    address.ipv4 = addr;
 80876f6:	e9c0 2100 	strd	r2, r1, [r0]
}
 80876fa:	4770      	bx	lr
 80876fc:	0808bcd8 	.word	0x0808bcd8

08087700 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 8087700:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8087702:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8087706:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 808770a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 808770e:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 8087712:	6044      	str	r4, [r0, #4]
}
 8087714:	bd10      	pop	{r4, pc}
	...

08087718 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8087718:	b513      	push	{r0, r1, r4, lr}
 808771a:	4c04      	ldr	r4, [pc, #16]	; (808772c <_ZN9IPAddressC1Ehhhh+0x14>)
 808771c:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 808771e:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8087722:	9400      	str	r4, [sp, #0]
 8087724:	f7ff ffec 	bl	8087700 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8087728:	b002      	add	sp, #8
 808772a:	bd10      	pop	{r4, pc}
 808772c:	0808bcd8 	.word	0x0808bcd8

08087730 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8087730:	7441      	strb	r1, [r0, #17]
}
 8087732:	4770      	bx	lr

08087734 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 8087734:	4770      	bx	lr

08087736 <_ZN9USBSerial4readEv>:
{
 8087736:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 8087738:	2100      	movs	r1, #0
 808773a:	7c00      	ldrb	r0, [r0, #16]
 808773c:	f7fd fbc0 	bl	8084ec0 <HAL_USB_USART_Receive_Data>
}
 8087740:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8087744:	bd08      	pop	{r3, pc}

08087746 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 8087746:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 8087748:	2101      	movs	r1, #1
 808774a:	7c00      	ldrb	r0, [r0, #16]
 808774c:	f7fd fbb8 	bl	8084ec0 <HAL_USB_USART_Receive_Data>
}
 8087750:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8087754:	bd08      	pop	{r3, pc}

08087756 <_ZN9USBSerial17availableForWriteEv>:
{
 8087756:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 8087758:	7c00      	ldrb	r0, [r0, #16]
 808775a:	f7fd fba9 	bl	8084eb0 <HAL_USB_USART_Available_Data_For_Write>
}
 808775e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8087762:	bd08      	pop	{r3, pc}

08087764 <_ZN9USBSerial9availableEv>:
{
 8087764:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 8087766:	7c00      	ldrb	r0, [r0, #16]
 8087768:	f7fd fb9a 	bl	8084ea0 <HAL_USB_USART_Available_Data>
}
 808776c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8087770:	bd08      	pop	{r3, pc}

08087772 <_ZN9USBSerial5writeEh>:
{
 8087772:	b538      	push	{r3, r4, r5, lr}
 8087774:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8087776:	7c00      	ldrb	r0, [r0, #16]
{
 8087778:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808777a:	f7fd fb99 	bl	8084eb0 <HAL_USB_USART_Available_Data_For_Write>
 808777e:	2800      	cmp	r0, #0
 8087780:	dc01      	bgt.n	8087786 <_ZN9USBSerial5writeEh+0x14>
 8087782:	7c60      	ldrb	r0, [r4, #17]
 8087784:	b128      	cbz	r0, 8087792 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 8087786:	4629      	mov	r1, r5
 8087788:	7c20      	ldrb	r0, [r4, #16]
 808778a:	f7fd fba1 	bl	8084ed0 <HAL_USB_USART_Send_Data>
 808778e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 8087792:	bd38      	pop	{r3, r4, r5, pc}

08087794 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 8087794:	7c00      	ldrb	r0, [r0, #16]
 8087796:	f7fd bba3 	b.w	8084ee0 <HAL_USB_USART_Flush_Data>

0808779a <_ZN9USBSerialD0Ev>:
 808779a:	b510      	push	{r4, lr}
 808779c:	4604      	mov	r4, r0
 808779e:	2114      	movs	r1, #20
 80877a0:	f000 fead 	bl	80884fe <_ZdlPvj>
 80877a4:	4620      	mov	r0, r4
 80877a6:	bd10      	pop	{r4, pc}

080877a8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80877a8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80877aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80877ae:	4604      	mov	r4, r0
 80877b0:	4608      	mov	r0, r1
 80877b2:	2100      	movs	r1, #0
 80877b4:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80877b8:	4b04      	ldr	r3, [pc, #16]	; (80877cc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80877ba:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80877bc:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80877be:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80877c0:	4611      	mov	r1, r2
  _blocking = true;
 80877c2:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80877c4:	f7fd fb54 	bl	8084e70 <HAL_USB_USART_Init>
}
 80877c8:	4620      	mov	r0, r4
 80877ca:	bd10      	pop	{r4, pc}
 80877cc:	0808bcec 	.word	0x0808bcec

080877d0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80877d0:	2200      	movs	r2, #0
 80877d2:	7c00      	ldrb	r0, [r0, #16]
 80877d4:	f7fd bb54 	b.w	8084e80 <HAL_USB_USART_Begin>

080877d8 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 80877d8:	7c00      	ldrb	r0, [r0, #16]
 80877da:	f7fd bb59 	b.w	8084e90 <HAL_USB_USART_End>
	...

080877e0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80877e0:	b510      	push	{r4, lr}
 80877e2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80877e4:	2214      	movs	r2, #20
 80877e6:	2100      	movs	r1, #0
 80877e8:	f003 fa54 	bl	808ac94 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80877ec:	4b05      	ldr	r3, [pc, #20]	; (8087804 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80877ee:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80877f0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80877f2:	4b05      	ldr	r3, [pc, #20]	; (8087808 <_Z19acquireSerialBufferv+0x28>)
 80877f4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80877f6:	f240 1301 	movw	r3, #257	; 0x101
 80877fa:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80877fc:	2381      	movs	r3, #129	; 0x81
 80877fe:	8223      	strh	r3, [r4, #16]
}
 8087800:	bd10      	pop	{r4, pc}
 8087802:	bf00      	nop
 8087804:	200004a0 	.word	0x200004a0
 8087808:	200005a1 	.word	0x200005a1

0808780c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 808780c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 808780e:	4d0f      	ldr	r5, [pc, #60]	; (808784c <_Z16_fetch_usbserialv+0x40>)
{
 8087810:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 8087812:	a801      	add	r0, sp, #4
 8087814:	f7ff ffe4 	bl	80877e0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8087818:	7829      	ldrb	r1, [r5, #0]
 808781a:	f3bf 8f5b 	dmb	ish
 808781e:	f011 0401 	ands.w	r4, r1, #1
 8087822:	d110      	bne.n	8087846 <_Z16_fetch_usbserialv+0x3a>
 8087824:	4628      	mov	r0, r5
 8087826:	f7f8 fc59 	bl	80800dc <__cxa_guard_acquire>
 808782a:	b160      	cbz	r0, 8087846 <_Z16_fetch_usbserialv+0x3a>
 808782c:	4621      	mov	r1, r4
 808782e:	aa01      	add	r2, sp, #4
 8087830:	4807      	ldr	r0, [pc, #28]	; (8087850 <_Z16_fetch_usbserialv+0x44>)
 8087832:	f7ff ffb9 	bl	80877a8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8087836:	4628      	mov	r0, r5
 8087838:	f7f8 fc55 	bl	80800e6 <__cxa_guard_release>
 808783c:	4a05      	ldr	r2, [pc, #20]	; (8087854 <_Z16_fetch_usbserialv+0x48>)
 808783e:	4906      	ldr	r1, [pc, #24]	; (8087858 <_Z16_fetch_usbserialv+0x4c>)
 8087840:	4803      	ldr	r0, [pc, #12]	; (8087850 <_Z16_fetch_usbserialv+0x44>)
 8087842:	f000 fe57 	bl	80884f4 <__aeabi_atexit>
	return _usbserial;
}
 8087846:	4802      	ldr	r0, [pc, #8]	; (8087850 <_Z16_fetch_usbserialv+0x44>)
 8087848:	b007      	add	sp, #28
 808784a:	bd30      	pop	{r4, r5, pc}
 808784c:	20000470 	.word	0x20000470
 8087850:	20000478 	.word	0x20000478
 8087854:	20000130 	.word	0x20000130
 8087858:	08087735 	.word	0x08087735

0808785c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 808785c:	b510      	push	{r4, lr}
 808785e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8087860:	2214      	movs	r2, #20
 8087862:	2100      	movs	r1, #0
 8087864:	f003 fa16 	bl	808ac94 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8087868:	4b05      	ldr	r3, [pc, #20]	; (8087880 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 808786a:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 808786c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 808786e:	4b05      	ldr	r3, [pc, #20]	; (8087884 <_Z23acquireUSBSerial1Bufferv+0x28>)
 8087870:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8087872:	f240 1301 	movw	r3, #257	; 0x101
 8087876:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8087878:	2381      	movs	r3, #129	; 0x81
 808787a:	8223      	strh	r3, [r4, #16]
}
 808787c:	bd10      	pop	{r4, pc}
 808787e:	bf00      	nop
 8087880:	20000622 	.word	0x20000622
 8087884:	20000723 	.word	0x20000723

08087888 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8087888:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 808788a:	4c0f      	ldr	r4, [pc, #60]	; (80878c8 <_Z17_fetch_usbserial1v+0x40>)
{
 808788c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 808788e:	a801      	add	r0, sp, #4
 8087890:	f7ff ffe4 	bl	808785c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8087894:	7823      	ldrb	r3, [r4, #0]
 8087896:	f3bf 8f5b 	dmb	ish
 808789a:	07db      	lsls	r3, r3, #31
 808789c:	d410      	bmi.n	80878c0 <_Z17_fetch_usbserial1v+0x38>
 808789e:	4620      	mov	r0, r4
 80878a0:	f7f8 fc1c 	bl	80800dc <__cxa_guard_acquire>
 80878a4:	b160      	cbz	r0, 80878c0 <_Z17_fetch_usbserial1v+0x38>
 80878a6:	2101      	movs	r1, #1
 80878a8:	aa01      	add	r2, sp, #4
 80878aa:	4808      	ldr	r0, [pc, #32]	; (80878cc <_Z17_fetch_usbserial1v+0x44>)
 80878ac:	f7ff ff7c 	bl	80877a8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80878b0:	4620      	mov	r0, r4
 80878b2:	f7f8 fc18 	bl	80800e6 <__cxa_guard_release>
 80878b6:	4a06      	ldr	r2, [pc, #24]	; (80878d0 <_Z17_fetch_usbserial1v+0x48>)
 80878b8:	4906      	ldr	r1, [pc, #24]	; (80878d4 <_Z17_fetch_usbserial1v+0x4c>)
 80878ba:	4804      	ldr	r0, [pc, #16]	; (80878cc <_Z17_fetch_usbserial1v+0x44>)
 80878bc:	f000 fe1a 	bl	80884f4 <__aeabi_atexit>
  return _usbserial1;
}
 80878c0:	4802      	ldr	r0, [pc, #8]	; (80878cc <_Z17_fetch_usbserial1v+0x44>)
 80878c2:	b006      	add	sp, #24
 80878c4:	bd10      	pop	{r4, pc}
 80878c6:	bf00      	nop
 80878c8:	20000474 	.word	0x20000474
 80878cc:	2000048c 	.word	0x2000048c
 80878d0:	20000130 	.word	0x20000130
 80878d4:	08087735 	.word	0x08087735

080878d8 <_Z29call_wiring_interrupt_handlerPv>:
      if (_M_empty())
 80878d8:	6882      	ldr	r2, [r0, #8]
    delete handlers[pin];
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
}

void call_wiring_interrupt_handler(void* data)
{
 80878da:	b510      	push	{r4, lr}
 80878dc:	b90a      	cbnz	r2, 80878e2 <_Z29call_wiring_interrupt_handlerPv+0xa>
	__throw_bad_function_call();
 80878de:	f000 fe14 	bl	808850a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80878e2:	68c3      	ldr	r3, [r0, #12]
    wiring_interrupt_handler_t* handler = (wiring_interrupt_handler_t*)data;
    (*handler)();
}
 80878e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80878e8:	4718      	bx	r3
	...

080878ec <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
 80878ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80878ee:	4604      	mov	r4, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
 80878f0:	f7fd f8ce 	bl	8084a90 <HAL_Interrupts_Detach>
 80878f4:	4605      	mov	r5, r0
 80878f6:	b970      	cbnz	r0, 8087916 <_Z15detachInterruptt+0x2a>
        return false;
    }
    if (handlers[pin]) {
 80878f8:	4f08      	ldr	r7, [pc, #32]	; (808791c <_Z15detachInterruptt+0x30>)
 80878fa:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
 80878fe:	b146      	cbz	r6, 8087912 <_Z15detachInterruptt+0x26>
    class function<_Res(_ArgTypes...)>
 8087900:	4630      	mov	r0, r6
 8087902:	f7f8 ff7b 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
 8087906:	2110      	movs	r1, #16
 8087908:	4630      	mov	r0, r6
 808790a:	f000 fdf8 	bl	80884fe <_ZdlPvj>
        handlers[pin] = nullptr;
 808790e:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
 8087912:	2001      	movs	r0, #1
 8087914:	e000      	b.n	8087918 <_Z15detachInterruptt+0x2c>
        return false;
 8087916:	2000      	movs	r0, #0
    }
    return true;
}
 8087918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808791a:	bf00      	nop
 808791c:	200007a4 	.word	0x200007a4

08087920 <_ZNSt8functionIFvvEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 8087920:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8087922:	2300      	movs	r3, #0
 8087924:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 8087926:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 8087928:	4604      	mov	r4, r0
 808792a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 808792c:	b12b      	cbz	r3, 808793a <_ZNSt8functionIFvvEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 808792e:	2202      	movs	r2, #2
 8087930:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8087932:	68eb      	ldr	r3, [r5, #12]
 8087934:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8087936:	68ab      	ldr	r3, [r5, #8]
 8087938:	60a3      	str	r3, [r4, #8]
    }
 808793a:	4620      	mov	r0, r4
 808793c:	bd38      	pop	{r3, r4, r5, pc}
	...

08087940 <_Z16allocate_handlertRSt8functionIFvvEE>:
{
 8087940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    delete handlers[pin];
 8087942:	4f0c      	ldr	r7, [pc, #48]	; (8087974 <_Z16allocate_handlertRSt8functionIFvvEE+0x34>)
{
 8087944:	4605      	mov	r5, r0
    delete handlers[pin];
 8087946:	f857 4020 	ldr.w	r4, [r7, r0, lsl #2]
{
 808794a:	460e      	mov	r6, r1
    delete handlers[pin];
 808794c:	b134      	cbz	r4, 808795c <_Z16allocate_handlertRSt8functionIFvvEE+0x1c>
    class function<_Res(_ArgTypes...)>
 808794e:	4620      	mov	r0, r4
 8087950:	f7f8 ff54 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
 8087954:	2110      	movs	r1, #16
 8087956:	4620      	mov	r0, r4
 8087958:	f000 fdd1 	bl	80884fe <_ZdlPvj>
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
 808795c:	2010      	movs	r0, #16
 808795e:	f7f8 fbac 	bl	80800ba <_Znwj>
 8087962:	4604      	mov	r4, r0
 8087964:	b110      	cbz	r0, 808796c <_Z16allocate_handlertRSt8functionIFvvEE+0x2c>
 8087966:	4631      	mov	r1, r6
 8087968:	f7ff ffda 	bl	8087920 <_ZNSt8functionIFvvEEC1ERKS1_>
}
 808796c:	4620      	mov	r0, r4
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
 808796e:	f847 4025 	str.w	r4, [r7, r5, lsl #2]
}
 8087972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8087974:	200007a4 	.word	0x200007a4

08087978 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>:
{
 8087978:	b5f0      	push	{r4, r5, r6, r7, lr}
 808797a:	460c      	mov	r4, r1
 808797c:	4605      	mov	r5, r0
 808797e:	b085      	sub	sp, #20
 8087980:	4617      	mov	r7, r2
 8087982:	461e      	mov	r6, r3
    HAL_Interrupts_Detach(pin);
 8087984:	f7fd f884 	bl	8084a90 <HAL_Interrupts_Detach>
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
 8087988:	4621      	mov	r1, r4
 808798a:	4628      	mov	r0, r5
 808798c:	f7ff ffd8 	bl	8087940 <_Z16allocate_handlertRSt8functionIFvvEE>
    if (handler) {
 8087990:	4604      	mov	r4, r0
 8087992:	b1e8      	cbz	r0, 80879d0 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x58>
        HAL_InterruptExtraConfiguration extra = {0};
 8087994:	2100      	movs	r1, #0
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 8087996:	2304      	movs	r3, #4
  if (priority >= 0) {
 8087998:	428e      	cmp	r6, r1
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 808799a:	f88d 300c 	strb.w	r3, [sp, #12]
    extra.IRQChannelSubPriority = subpriority;
 808799e:	bfa8      	it	ge
 80879a0:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
        HAL_InterruptExtraConfiguration extra = {0};
 80879a4:	f8ad 100d 	strh.w	r1, [sp, #13]
 80879a8:	f88d 100f 	strb.w	r1, [sp, #15]
    return &extra;
 80879ac:	bfa4      	itt	ge
 80879ae:	a903      	addge	r1, sp, #12
    extra.IRQChannelSubPriority = subpriority;
 80879b0:	f88d 300e 	strbge.w	r3, [sp, #14]
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
 80879b4:	4602      	mov	r2, r0
 80879b6:	9100      	str	r1, [sp, #0]
 80879b8:	463b      	mov	r3, r7
 80879ba:	4628      	mov	r0, r5
 80879bc:	4906      	ldr	r1, [pc, #24]	; (80879d8 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x60>)
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 80879be:	bfa8      	it	ge
 80879c0:	f88d 600d 	strbge.w	r6, [sp, #13]
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
 80879c4:	f7fd f85c 	bl	8084a80 <HAL_Interrupts_Attach>
 80879c8:	b110      	cbz	r0, 80879d0 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x58>
            return false;
 80879ca:	2000      	movs	r0, #0
}
 80879cc:	b005      	add	sp, #20
 80879ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return handler!=NULL;
 80879d0:	1e20      	subs	r0, r4, #0
 80879d2:	bf18      	it	ne
 80879d4:	2001      	movne	r0, #1
 80879d6:	e7f9      	b.n	80879cc <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x54>
 80879d8:	080878d9 	.word	0x080878d9

080879dc <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 80879dc:	2200      	movs	r2, #0
 80879de:	6840      	ldr	r0, [r0, #4]
 80879e0:	4611      	mov	r1, r2
 80879e2:	f7fd bb2d 	b.w	8085040 <network_ready>

080879e6 <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80879e6:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        HAL_IPAddress ip = {0};
 80879e8:	2600      	movs	r6, #0
    IPAddress resolve(const char* name)
 80879ea:	b085      	sub	sp, #20
 80879ec:	4604      	mov	r4, r0
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80879ee:	4610      	mov	r0, r2
    IPAddress resolve(const char* name)
 80879f0:	460f      	mov	r7, r1
 80879f2:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 80879f4:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80879f6:	f003 f9c8 	bl	808ad8a <strlen>
 80879fa:	687b      	ldr	r3, [r7, #4]
 80879fc:	b281      	uxth	r1, r0
 80879fe:	9600      	str	r6, [sp, #0]
 8087a00:	4628      	mov	r0, r5
 8087a02:	aa03      	add	r2, sp, #12
 8087a04:	f7fd fa24 	bl	8084e50 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8087a08:	b130      	cbz	r0, 8087a18 <_ZN5spark13CellularClass7resolveEPKc+0x32>
 8087a0a:	4631      	mov	r1, r6
 8087a0c:	4620      	mov	r0, r4
 8087a0e:	f7ff fe71 	bl	80876f4 <_ZN9IPAddressC1Em>
    }
 8087a12:	4620      	mov	r0, r4
 8087a14:	b005      	add	sp, #20
 8087a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8087a18:	4620      	mov	r0, r4
 8087a1a:	a903      	add	r1, sp, #12
 8087a1c:	f7ff fe62 	bl	80876e4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 8087a20:	e7f7      	b.n	8087a12 <_ZN5spark13CellularClass7resolveEPKc+0x2c>

08087a22 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 8087a22:	2200      	movs	r2, #0
 8087a24:	6840      	ldr	r0, [r0, #4]
 8087a26:	4611      	mov	r1, r2
 8087a28:	f7fd bb2a 	b.w	8085080 <network_listening>

08087a2c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 8087a2c:	2200      	movs	r2, #0
 8087a2e:	6840      	ldr	r0, [r0, #4]
 8087a30:	4611      	mov	r1, r2
 8087a32:	f7fd bb35 	b.w	80850a0 <network_get_listen_timeout>

08087a36 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 8087a36:	2200      	movs	r2, #0
 8087a38:	6840      	ldr	r0, [r0, #4]
 8087a3a:	f7fd bb29 	b.w	8085090 <network_set_listen_timeout>

08087a3e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 8087a3e:	2200      	movs	r2, #0
 8087a40:	6840      	ldr	r0, [r0, #4]
 8087a42:	f081 0101 	eor.w	r1, r1, #1
 8087a46:	f7fd bb13 	b.w	8085070 <network_listen>

08087a4a <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
 8087a4a:	2300      	movs	r3, #0
 8087a4c:	6840      	ldr	r0, [r0, #4]
 8087a4e:	461a      	mov	r2, r3
 8087a50:	4619      	mov	r1, r3
 8087a52:	f7fd bb05 	b.w	8085060 <network_off>

08087a56 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
 8087a56:	2300      	movs	r3, #0
 8087a58:	6840      	ldr	r0, [r0, #4]
 8087a5a:	461a      	mov	r2, r3
 8087a5c:	4619      	mov	r1, r3
 8087a5e:	f7fd baf7 	b.w	8085050 <network_on>

08087a62 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 8087a62:	2200      	movs	r2, #0
 8087a64:	6840      	ldr	r0, [r0, #4]
 8087a66:	4611      	mov	r1, r2
 8087a68:	f7fd bada 	b.w	8085020 <network_connecting>

08087a6c <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 8087a6c:	2200      	movs	r2, #0
 8087a6e:	2102      	movs	r1, #2
 8087a70:	6840      	ldr	r0, [r0, #4]
 8087a72:	f7fd badd 	b.w	8085030 <network_disconnect>

08087a76 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 8087a76:	2300      	movs	r3, #0
 8087a78:	6840      	ldr	r0, [r0, #4]
 8087a7a:	461a      	mov	r2, r3
 8087a7c:	f7fd bac8 	b.w	8085010 <network_connect>

08087a80 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 8087a80:	b510      	push	{r4, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 8087a82:	2428      	movs	r4, #40	; 0x28
 8087a84:	4b07      	ldr	r3, [pc, #28]	; (8087aa4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 8087a86:	4622      	mov	r2, r4
 8087a88:	4618      	mov	r0, r3
 8087a8a:	2100      	movs	r1, #0
 8087a8c:	f003 f902 	bl	808ac94 <memset>
        cid = -1;
 8087a90:	f04f 32ff 	mov.w	r2, #4294967295
 8087a94:	6042      	str	r2, [r0, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 8087a96:	2204      	movs	r2, #4
 8087a98:	4b03      	ldr	r3, [pc, #12]	; (8087aa8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
 8087a9a:	8004      	strh	r4, [r0, #0]
 8087a9c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 8087a9e:	4a03      	ldr	r2, [pc, #12]	; (8087aac <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
 8087aa0:	601a      	str	r2, [r3, #0]
 8087aa2:	bd10      	pop	{r4, pc}
 8087aa4:	20000868 	.word	0x20000868
 8087aa8:	20000860 	.word	0x20000860
 8087aac:	0808bd1c 	.word	0x0808bd1c

08087ab0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 8087ab0:	4770      	bx	lr

08087ab2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8087ab2:	7441      	strb	r1, [r0, #17]
}
 8087ab4:	4770      	bx	lr

08087ab6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 8087ab6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 8087ab8:	7c00      	ldrb	r0, [r0, #16]
 8087aba:	f7fd f911 	bl	8084ce0 <hal_usart_available_data_for_write>
}
 8087abe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8087ac2:	bd08      	pop	{r3, pc}

08087ac4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 8087ac4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 8087ac6:	7c00      	ldrb	r0, [r0, #16]
 8087ac8:	f7fd f8e2 	bl	8084c90 <hal_usart_available>
}
 8087acc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8087ad0:	bd08      	pop	{r3, pc}

08087ad2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 8087ad2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 8087ad4:	7c00      	ldrb	r0, [r0, #16]
 8087ad6:	f7fd f8eb 	bl	8084cb0 <hal_usart_peek>
}
 8087ada:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8087ade:	bd08      	pop	{r3, pc}

08087ae0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 8087ae0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 8087ae2:	7c00      	ldrb	r0, [r0, #16]
 8087ae4:	f7fd f8dc 	bl	8084ca0 <hal_usart_read>
}
 8087ae8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8087aec:	bd08      	pop	{r3, pc}

08087aee <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 8087aee:	7c00      	ldrb	r0, [r0, #16]
 8087af0:	f7fd b8e6 	b.w	8084cc0 <hal_usart_flush>

08087af4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 8087af4:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8087af6:	7c46      	ldrb	r6, [r0, #17]
{
 8087af8:	4604      	mov	r4, r0
 8087afa:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8087afc:	b12e      	cbz	r6, 8087b0a <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 8087afe:	4629      	mov	r1, r5
 8087b00:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 8087b02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 8087b06:	f7fd b8bb 	b.w	8084c80 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8087b0a:	7c00      	ldrb	r0, [r0, #16]
 8087b0c:	f7fd f8e8 	bl	8084ce0 <hal_usart_available_data_for_write>
 8087b10:	2800      	cmp	r0, #0
 8087b12:	dcf4      	bgt.n	8087afe <_ZN11USARTSerial5writeEh+0xa>
}
 8087b14:	4630      	mov	r0, r6
 8087b16:	bd70      	pop	{r4, r5, r6, pc}

08087b18 <_ZN11USARTSerialD0Ev>:
 8087b18:	b510      	push	{r4, lr}
 8087b1a:	4604      	mov	r4, r0
 8087b1c:	2114      	movs	r1, #20
 8087b1e:	f000 fcee 	bl	80884fe <_ZdlPvj>
 8087b22:	4620      	mov	r0, r4
 8087b24:	bd10      	pop	{r4, pc}
	...

08087b28 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 8087b28:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 8087b2c:	b510      	push	{r4, lr}
 8087b2e:	4604      	mov	r4, r0
 8087b30:	4608      	mov	r0, r1
 8087b32:	4611      	mov	r1, r2
 8087b34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8087b38:	e9c4 c201 	strd	ip, r2, [r4, #4]
 8087b3c:	4a04      	ldr	r2, [pc, #16]	; (8087b50 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 8087b3e:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 8087b40:	6022      	str	r2, [r4, #0]
  _blocking = true;
 8087b42:	2201      	movs	r2, #1
 8087b44:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 8087b46:	461a      	mov	r2, r3
 8087b48:	f7fd f88a 	bl	8084c60 <hal_usart_init>
}
 8087b4c:	4620      	mov	r0, r4
 8087b4e:	bd10      	pop	{r4, pc}
 8087b50:	0808bd58 	.word	0x0808bd58

08087b54 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 8087b54:	2300      	movs	r3, #0
 8087b56:	7c00      	ldrb	r0, [r0, #16]
 8087b58:	f7fd b8ca 	b.w	8084cf0 <hal_usart_begin_config>

08087b5c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 8087b5c:	2200      	movs	r2, #0
 8087b5e:	f7ff bff9 	b.w	8087b54 <_ZN11USARTSerial5beginEmm>

08087b62 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 8087b62:	7c00      	ldrb	r0, [r0, #16]
 8087b64:	f7fd b884 	b.w	8084c70 <hal_usart_end>

08087b68 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 8087b68:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 8087b6a:	4d0d      	ldr	r5, [pc, #52]	; (8087ba0 <_Z22__fetch_global_Serial1v+0x38>)
 8087b6c:	7829      	ldrb	r1, [r5, #0]
 8087b6e:	f3bf 8f5b 	dmb	ish
 8087b72:	f011 0401 	ands.w	r4, r1, #1
 8087b76:	d111      	bne.n	8087b9c <_Z22__fetch_global_Serial1v+0x34>
 8087b78:	4628      	mov	r0, r5
 8087b7a:	f7f8 faaf 	bl	80800dc <__cxa_guard_acquire>
 8087b7e:	b168      	cbz	r0, 8087b9c <_Z22__fetch_global_Serial1v+0x34>
 8087b80:	4621      	mov	r1, r4
 8087b82:	4a08      	ldr	r2, [pc, #32]	; (8087ba4 <_Z22__fetch_global_Serial1v+0x3c>)
 8087b84:	4b08      	ldr	r3, [pc, #32]	; (8087ba8 <_Z22__fetch_global_Serial1v+0x40>)
 8087b86:	4809      	ldr	r0, [pc, #36]	; (8087bac <_Z22__fetch_global_Serial1v+0x44>)
 8087b88:	f7ff ffce 	bl	8087b28 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 8087b8c:	4628      	mov	r0, r5
 8087b8e:	f7f8 faaa 	bl	80800e6 <__cxa_guard_release>
 8087b92:	4a07      	ldr	r2, [pc, #28]	; (8087bb0 <_Z22__fetch_global_Serial1v+0x48>)
 8087b94:	4907      	ldr	r1, [pc, #28]	; (8087bb4 <_Z22__fetch_global_Serial1v+0x4c>)
 8087b96:	4805      	ldr	r0, [pc, #20]	; (8087bac <_Z22__fetch_global_Serial1v+0x44>)
 8087b98:	f000 fcac 	bl	80884f4 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 8087b9c:	4803      	ldr	r0, [pc, #12]	; (8087bac <_Z22__fetch_global_Serial1v+0x44>)
 8087b9e:	bd38      	pop	{r3, r4, r5, pc}
 8087ba0:	20000890 	.word	0x20000890
 8087ba4:	20000894 	.word	0x20000894
 8087ba8:	20000918 	.word	0x20000918
 8087bac:	2000099c 	.word	0x2000099c
 8087bb0:	20000130 	.word	0x20000130
 8087bb4:	08087ab1 	.word	0x08087ab1

08087bb8 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 8087bb8:	b510      	push	{r4, lr}
      if (_M_empty())
 8087bba:	6883      	ldr	r3, [r0, #8]
 8087bbc:	4604      	mov	r4, r0
 8087bbe:	b90b      	cbnz	r3, 8087bc4 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 8087bc0:	f000 fca3 	bl	808850a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8087bc4:	68c3      	ldr	r3, [r0, #12]
 8087bc6:	4798      	blx	r3
      if (_M_manager)
 8087bc8:	68a3      	ldr	r3, [r4, #8]
 8087bca:	b11b      	cbz	r3, 8087bd4 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8087bcc:	2203      	movs	r2, #3
 8087bce:	4621      	mov	r1, r4
 8087bd0:	4620      	mov	r0, r4
 8087bd2:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8087bd4:	4620      	mov	r0, r4
}
 8087bd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 8087bda:	2110      	movs	r1, #16
 8087bdc:	f000 bc8f 	b.w	80884fe <_ZdlPvj>

08087be0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 8087be0:	4770      	bx	lr

08087be2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8087be2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8087be4:	4606      	mov	r6, r0
 8087be6:	4615      	mov	r5, r2
 8087be8:	460c      	mov	r4, r1
 8087bea:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8087bec:	42bc      	cmp	r4, r7
 8087bee:	d006      	beq.n	8087bfe <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 8087bf0:	6833      	ldr	r3, [r6, #0]
 8087bf2:	4630      	mov	r0, r6
 8087bf4:	689b      	ldr	r3, [r3, #8]
 8087bf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8087bfa:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 8087bfc:	e7f6      	b.n	8087bec <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 8087bfe:	4628      	mov	r0, r5
 8087c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08087c02 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 8087c02:	2200      	movs	r2, #0
 8087c04:	7c00      	ldrb	r0, [r0, #16]
 8087c06:	f7fd b893 	b.w	8084d30 <hal_i2c_write>

08087c0a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 8087c0a:	2100      	movs	r1, #0
 8087c0c:	7c00      	ldrb	r0, [r0, #16]
 8087c0e:	f7fd b897 	b.w	8084d40 <hal_i2c_available>

08087c12 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 8087c12:	2100      	movs	r1, #0
 8087c14:	7c00      	ldrb	r0, [r0, #16]
 8087c16:	f7fd b89b 	b.w	8084d50 <hal_i2c_read>

08087c1a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 8087c1a:	2100      	movs	r1, #0
 8087c1c:	7c00      	ldrb	r0, [r0, #16]
 8087c1e:	f7fd b89f 	b.w	8084d60 <hal_i2c_peek>

08087c22 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 8087c22:	2100      	movs	r1, #0
 8087c24:	7c00      	ldrb	r0, [r0, #16]
 8087c26:	f7fd b8a3 	b.w	8084d70 <hal_i2c_flush>

08087c2a <_ZN7TwoWireD0Ev>:
 8087c2a:	b510      	push	{r4, lr}
 8087c2c:	4604      	mov	r4, r0
 8087c2e:	2114      	movs	r1, #20
 8087c30:	f000 fc65 	bl	80884fe <_ZdlPvj>
 8087c34:	4620      	mov	r0, r4
 8087c36:	bd10      	pop	{r4, pc}

08087c38 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 8087c38:	b510      	push	{r4, lr}
 8087c3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8087c3e:	4604      	mov	r4, r0
 8087c40:	4608      	mov	r0, r1
 8087c42:	2100      	movs	r1, #0
 8087c44:	e9c4 1301 	strd	r1, r3, [r4, #4]
 8087c48:	4b03      	ldr	r3, [pc, #12]	; (8087c58 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 8087c4a:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 8087c4c:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 8087c4e:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 8087c50:	f7fd f89e 	bl	8084d90 <hal_i2c_init>
}
 8087c54:	4620      	mov	r0, r4
 8087c56:	bd10      	pop	{r4, pc}
 8087c58:	0808bd88 	.word	0x0808bd88

08087c5c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 8087c5c:	2300      	movs	r3, #0
 8087c5e:	7c00      	ldrb	r0, [r0, #16]
 8087c60:	461a      	mov	r2, r3
 8087c62:	4619      	mov	r1, r3
 8087c64:	f7fd b84c 	b.w	8084d00 <hal_i2c_begin>

08087c68 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 8087c68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 8087c6a:	2200      	movs	r2, #0
 8087c6c:	2314      	movs	r3, #20
 8087c6e:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8087c72:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 8087c76:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 8087c78:	7c00      	ldrb	r0, [r0, #16]
 8087c7a:	f88d 3008 	strb.w	r3, [sp, #8]
 8087c7e:	684b      	ldr	r3, [r1, #4]
 8087c80:	9303      	str	r3, [sp, #12]
 8087c82:	68cb      	ldr	r3, [r1, #12]
 8087c84:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 8087c86:	7a0b      	ldrb	r3, [r1, #8]
 8087c88:	a901      	add	r1, sp, #4
 8087c8a:	9305      	str	r3, [sp, #20]
 8087c8c:	f7fd f898 	bl	8084dc0 <hal_i2c_request_ex>
}
 8087c90:	b007      	add	sp, #28
 8087c92:	f85d fb04 	ldr.w	pc, [sp], #4

08087c96 <_ZN7TwoWire11requestFromEhjh>:
{
 8087c96:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 8087c98:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8087c9a:	f88d 1000 	strb.w	r1, [sp]
 8087c9e:	f04f 0164 	mov.w	r1, #100	; 0x64
 8087ca2:	bf18      	it	ne
 8087ca4:	2301      	movne	r3, #1
 8087ca6:	9103      	str	r1, [sp, #12]
 8087ca8:	4669      	mov	r1, sp
    size_ = size;
 8087caa:	9201      	str	r2, [sp, #4]
 8087cac:	f88d 3008 	strb.w	r3, [sp, #8]
 8087cb0:	f7ff ffda 	bl	8087c68 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 8087cb4:	b005      	add	sp, #20
 8087cb6:	f85d fb04 	ldr.w	pc, [sp], #4

08087cba <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 8087cba:	2301      	movs	r3, #1
 8087cbc:	f7ff bfeb 	b.w	8087c96 <_ZN7TwoWire11requestFromEhjh>

08087cc0 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 8087cc0:	2200      	movs	r2, #0
 8087cc2:	7c00      	ldrb	r0, [r0, #16]
 8087cc4:	f7fd b824 	b.w	8084d10 <hal_i2c_begin_transmission>

08087cc8 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 8087cc8:	b2c9      	uxtb	r1, r1
 8087cca:	f7ff bff9 	b.w	8087cc0 <_ZN7TwoWire17beginTransmissionEh>

08087cce <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
 8087cce:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 8087cd0:	2200      	movs	r2, #0
 8087cd2:	460b      	mov	r3, r1
 8087cd4:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8087cd8:	2214      	movs	r2, #20
 8087cda:	f8ad 2004 	strh.w	r2, [sp, #4]
    };
 8087cde:	685a      	ldr	r2, [r3, #4]
      .address = address_,
 8087ce0:	7809      	ldrb	r1, [r1, #0]
    };
 8087ce2:	9203      	str	r2, [sp, #12]
 8087ce4:	68da      	ldr	r2, [r3, #12]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 8087ce6:	7a1b      	ldrb	r3, [r3, #8]
    };
 8087ce8:	9204      	str	r2, [sp, #16]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
 8087cea:	7c00      	ldrb	r0, [r0, #16]
 8087cec:	aa01      	add	r2, sp, #4
 8087cee:	f88d 1008 	strb.w	r1, [sp, #8]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 8087cf2:	9305      	str	r3, [sp, #20]
 8087cf4:	f7fd f80c 	bl	8084d10 <hal_i2c_begin_transmission>
}
 8087cf8:	b007      	add	sp, #28
 8087cfa:	f85d fb04 	ldr.w	pc, [sp], #4

08087cfe <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 8087cfe:	2200      	movs	r2, #0
 8087d00:	7c00      	ldrb	r0, [r0, #16]
 8087d02:	f7fd b80d 	b.w	8084d20 <hal_i2c_end_transmission>

08087d06 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 8087d06:	2101      	movs	r1, #1
 8087d08:	f7ff bff9 	b.w	8087cfe <_ZN7TwoWire15endTransmissionEh>

08087d0c <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 8087d0c:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
 8087d0e:	2100      	movs	r1, #0
 8087d10:	7c00      	ldrb	r0, [r0, #16]
 8087d12:	f7fd f845 	bl	8084da0 <hal_i2c_lock>
}
 8087d16:	fab0 f080 	clz	r0, r0
 8087d1a:	0940      	lsrs	r0, r0, #5
 8087d1c:	bd08      	pop	{r3, pc}

08087d1e <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 8087d1e:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
 8087d20:	2100      	movs	r1, #0
 8087d22:	7c00      	ldrb	r0, [r0, #16]
 8087d24:	f7fd f844 	bl	8084db0 <hal_i2c_unlock>
}
 8087d28:	fab0 f080 	clz	r0, r0
 8087d2c:	0940      	lsrs	r0, r0, #5
 8087d2e:	bd08      	pop	{r3, pc}

08087d30 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
 8087d30:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
 8087d32:	6843      	ldr	r3, [r0, #4]
    {
 8087d34:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
 8087d36:	3b01      	subs	r3, #1
 8087d38:	6043      	str	r3, [r0, #4]
 8087d3a:	b963      	cbnz	r3, 8087d56 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
 8087d3c:	6803      	ldr	r3, [r0, #0]
 8087d3e:	689b      	ldr	r3, [r3, #8]
 8087d40:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8087d42:	68a3      	ldr	r3, [r4, #8]
 8087d44:	3b01      	subs	r3, #1
 8087d46:	60a3      	str	r3, [r4, #8]
 8087d48:	b92b      	cbnz	r3, 8087d56 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
 8087d4a:	6823      	ldr	r3, [r4, #0]
 8087d4c:	4620      	mov	r0, r4
    }
 8087d4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 8087d52:	68db      	ldr	r3, [r3, #12]
 8087d54:	4718      	bx	r3
    }
 8087d56:	bd10      	pop	{r4, pc}

08087d58 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 8087d58:	2300      	movs	r3, #0
 8087d5a:	6840      	ldr	r0, [r0, #4]
 8087d5c:	461a      	mov	r2, r3
 8087d5e:	f7fd b957 	b.w	8085010 <network_connect>

08087d62 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 8087d62:	2200      	movs	r2, #0
 8087d64:	2102      	movs	r1, #2
 8087d66:	6840      	ldr	r0, [r0, #4]
 8087d68:	f7fd b962 	b.w	8085030 <network_disconnect>

08087d6c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 8087d6c:	2200      	movs	r2, #0
 8087d6e:	6840      	ldr	r0, [r0, #4]
 8087d70:	4611      	mov	r1, r2
 8087d72:	f7fd b955 	b.w	8085020 <network_connecting>

08087d76 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 8087d76:	2200      	movs	r2, #0
 8087d78:	6840      	ldr	r0, [r0, #4]
 8087d7a:	4611      	mov	r1, r2
 8087d7c:	f7fd b960 	b.w	8085040 <network_ready>

08087d80 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 8087d80:	2300      	movs	r3, #0
 8087d82:	6840      	ldr	r0, [r0, #4]
 8087d84:	461a      	mov	r2, r3
 8087d86:	4619      	mov	r1, r3
 8087d88:	f7fd b962 	b.w	8085050 <network_on>

08087d8c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 8087d8c:	2300      	movs	r3, #0
 8087d8e:	6840      	ldr	r0, [r0, #4]
 8087d90:	461a      	mov	r2, r3
 8087d92:	4619      	mov	r1, r3
 8087d94:	f7fd b964 	b.w	8085060 <network_off>

08087d98 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 8087d98:	2100      	movs	r1, #0
 8087d9a:	6840      	ldr	r0, [r0, #4]
 8087d9c:	f7fd b988 	b.w	80850b0 <network_is_on>

08087da0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 8087da0:	2100      	movs	r1, #0
 8087da2:	6840      	ldr	r0, [r0, #4]
 8087da4:	f7fd b98c 	b.w	80850c0 <network_is_off>

08087da8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 8087da8:	2200      	movs	r2, #0
 8087daa:	6840      	ldr	r0, [r0, #4]
 8087dac:	f081 0101 	eor.w	r1, r1, #1
 8087db0:	f7fd b95e 	b.w	8085070 <network_listen>

08087db4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 8087db4:	2200      	movs	r2, #0
 8087db6:	6840      	ldr	r0, [r0, #4]
 8087db8:	f7fd b96a 	b.w	8085090 <network_set_listen_timeout>

08087dbc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 8087dbc:	2200      	movs	r2, #0
 8087dbe:	6840      	ldr	r0, [r0, #4]
 8087dc0:	4611      	mov	r1, r2
 8087dc2:	f7fd b96d 	b.w	80850a0 <network_get_listen_timeout>

08087dc6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 8087dc6:	2200      	movs	r2, #0
 8087dc8:	6840      	ldr	r0, [r0, #4]
 8087dca:	4611      	mov	r1, r2
 8087dcc:	f7fd b958 	b.w	8085080 <network_listening>

08087dd0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 8087dd0:	b570      	push	{r4, r5, r6, lr}
 8087dd2:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 8087dd4:	2600      	movs	r6, #0
 8087dd6:	b086      	sub	sp, #24
 8087dd8:	4604      	mov	r4, r0
    IPAddress addr;
 8087dda:	a804      	add	r0, sp, #16
 8087ddc:	f7ff fc7a 	bl	80876d4 <_ZN9IPAddressC1Ev>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8087de0:	4628      	mov	r0, r5
        HAL_IPAddress ip = {0};
 8087de2:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8087de4:	f002 ffd1 	bl	808ad8a <strlen>
 8087de8:	4b0a      	ldr	r3, [pc, #40]	; (8087e14 <_ZN5spark12NetworkClass7resolveEPKc+0x44>)
 8087dea:	9600      	str	r6, [sp, #0]
 8087dec:	b281      	uxth	r1, r0
 8087dee:	685b      	ldr	r3, [r3, #4]
 8087df0:	4628      	mov	r0, r5
 8087df2:	aa03      	add	r2, sp, #12
 8087df4:	f7fd f82c 	bl	8084e50 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8087df8:	b130      	cbz	r0, 8087e08 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 8087dfa:	4631      	mov	r1, r6
 8087dfc:	4620      	mov	r0, r4
 8087dfe:	f7ff fc79 	bl	80876f4 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 8087e02:	4620      	mov	r0, r4
 8087e04:	b006      	add	sp, #24
 8087e06:	bd70      	pop	{r4, r5, r6, pc}
 8087e08:	4620      	mov	r0, r4
 8087e0a:	a903      	add	r1, sp, #12
 8087e0c:	f7ff fc6a 	bl	80876e4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 8087e10:	e7f7      	b.n	8087e02 <_ZN5spark12NetworkClass7resolveEPKc+0x32>
 8087e12:	bf00      	nop
 8087e14:	20000860 	.word	0x20000860

08087e18 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 8087e18:	4b02      	ldr	r3, [pc, #8]	; (8087e24 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 8087e1a:	4a03      	ldr	r2, [pc, #12]	; (8087e28 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 8087e1c:	601a      	str	r2, [r3, #0]
 8087e1e:	2200      	movs	r2, #0
 8087e20:	605a      	str	r2, [r3, #4]

} // spark
 8087e22:	4770      	bx	lr
 8087e24:	200009b0 	.word	0x200009b0
 8087e28:	0808bdb0 	.word	0x0808bdb0

08087e2c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 8087e2c:	2201      	movs	r2, #1
 8087e2e:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 8087e32:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 8087e36:	4618      	mov	r0, r3
 8087e38:	2901      	cmp	r1, #1
 8087e3a:	d108      	bne.n	8087e4e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 8087e3c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8087e40:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 8087e44:	3a01      	subs	r2, #1
 8087e46:	f103 0310 	add.w	r3, r3, #16
 8087e4a:	d1f2      	bne.n	8087e32 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 8087e4c:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 8087e4e:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 8087e50:	bf04      	itt	eq
 8087e52:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 8087e56:	1852      	addeq	r2, r2, r1
 8087e58:	e7f4      	b.n	8087e44 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

08087e5a <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 8087e5a:	b40e      	push	{r1, r2, r3}
 8087e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8087e60:	b087      	sub	sp, #28
 8087e62:	af00      	add	r7, sp, #0
 8087e64:	f107 0534 	add.w	r5, r7, #52	; 0x34
 8087e68:	f855 8b04 	ldr.w	r8, [r5], #4
 8087e6c:	4604      	mov	r4, r0
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 8087e6e:	462b      	mov	r3, r5
 8087e70:	4642      	mov	r2, r8
 8087e72:	2110      	movs	r1, #16
 8087e74:	f107 0008 	add.w	r0, r7, #8
    va_start(args, fmt);
 8087e78:	607d      	str	r5, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 8087e7a:	f7fd f9a9 	bl	80851d0 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 8087e7e:	280f      	cmp	r0, #15
 8087e80:	d91b      	bls.n	8087eba <_ZN5spark10JSONWriter6printfEPKcz+0x60>
        char buf[n + 1]; // Use larger buffer
 8087e82:	f100 0308 	add.w	r3, r0, #8
 8087e86:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 8087e8a:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 8087e8c:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 8087e90:	4642      	mov	r2, r8
 8087e92:	1c41      	adds	r1, r0, #1
 8087e94:	462b      	mov	r3, r5
 8087e96:	4668      	mov	r0, sp
        va_start(args, fmt);
 8087e98:	607d      	str	r5, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 8087e9a:	f7fd f999 	bl	80851d0 <vsnprintf>
        if (n > 0) {
 8087e9e:	1e02      	subs	r2, r0, #0
 8087ea0:	dd04      	ble.n	8087eac <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
 8087ea2:	6823      	ldr	r3, [r4, #0]
 8087ea4:	4669      	mov	r1, sp
 8087ea6:	4620      	mov	r0, r4
 8087ea8:	689b      	ldr	r3, [r3, #8]
 8087eaa:	4798      	blx	r3
 8087eac:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 8087eae:	371c      	adds	r7, #28
 8087eb0:	46bd      	mov	sp, r7
 8087eb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8087eb6:	b003      	add	sp, #12
 8087eb8:	4770      	bx	lr
    } else if (n > 0) {
 8087eba:	2800      	cmp	r0, #0
 8087ebc:	d0f7      	beq.n	8087eae <_ZN5spark10JSONWriter6printfEPKcz+0x54>
        write(buf, n);
 8087ebe:	6823      	ldr	r3, [r4, #0]
 8087ec0:	4602      	mov	r2, r0
 8087ec2:	689b      	ldr	r3, [r3, #8]
 8087ec4:	4620      	mov	r0, r4
 8087ec6:	f107 0108 	add.w	r1, r7, #8
 8087eca:	4798      	blx	r3
}
 8087ecc:	e7ef      	b.n	8087eae <_ZN5spark10JSONWriter6printfEPKcz+0x54>

08087ece <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 8087ece:	b538      	push	{r3, r4, r5, lr}
 8087ed0:	680b      	ldr	r3, [r1, #0]
 8087ed2:	4604      	mov	r4, r0
 8087ed4:	6003      	str	r3, [r0, #0]
 8087ed6:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 8087ed8:	6843      	ldr	r3, [r0, #4]
 8087eda:	429d      	cmp	r5, r3
 8087edc:	d008      	beq.n	8087ef0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
 8087ede:	b115      	cbz	r5, 8087ee6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
 8087ee0:	686b      	ldr	r3, [r5, #4]
 8087ee2:	3301      	adds	r3, #1
 8087ee4:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 8087ee6:	6860      	ldr	r0, [r4, #4]
 8087ee8:	b108      	cbz	r0, 8087eee <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
 8087eea:	f7ff ff21 	bl	8087d30 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 8087eee:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 8087ef0:	bd38      	pop	{r3, r4, r5, pc}

08087ef2 <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
 8087ef2:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 8087ef4:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 8087ef6:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 8087efa:	2201      	movs	r2, #1
 8087efc:	689b      	ldr	r3, [r3, #8]
 8087efe:	f10d 0107 	add.w	r1, sp, #7
 8087f02:	4798      	blx	r3
}
 8087f04:	b003      	add	sp, #12
 8087f06:	f85d fb04 	ldr.w	pc, [sp], #4

08087f0a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 8087f0a:	460b      	mov	r3, r1
 8087f0c:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 8087f0e:	2200      	movs	r2, #0
 8087f10:	b510      	push	{r4, lr}
 8087f12:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 8087f14:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 8087f18:	6083      	str	r3, [r0, #8]
    if (t) {
 8087f1a:	b90b      	cbnz	r3, 8087f20 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 8087f1c:	4620      	mov	r0, r4
 8087f1e:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
 8087f20:	f7ff ffd5 	bl	8087ece <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
 8087f24:	e7fa      	b.n	8087f1c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

08087f26 <_ZNK5spark9JSONValue4typeEv>:
spark::JSONType spark::JSONValue::type() const {
 8087f26:	4603      	mov	r3, r0
    if (!t_) {
 8087f28:	6880      	ldr	r0, [r0, #8]
 8087f2a:	b320      	cbz	r0, 8087f76 <_ZNK5spark9JSONValue4typeEv+0x50>
    switch (t_->type) {
 8087f2c:	7802      	ldrb	r2, [r0, #0]
 8087f2e:	2a03      	cmp	r2, #3
 8087f30:	d81a      	bhi.n	8087f68 <_ZNK5spark9JSONValue4typeEv+0x42>
 8087f32:	e8df f002 	tbb	[pc, r2]
 8087f36:	1704      	.short	0x1704
 8087f38:	1b02      	.short	0x1b02
 8087f3a:	2005      	movs	r0, #5
 8087f3c:	4770      	bx	lr
        const char c = d_->json[t_->start];
 8087f3e:	681b      	ldr	r3, [r3, #0]
 8087f40:	685a      	ldr	r2, [r3, #4]
 8087f42:	6843      	ldr	r3, [r0, #4]
 8087f44:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 8087f46:	282d      	cmp	r0, #45	; 0x2d
 8087f48:	d012      	beq.n	8087f70 <_ZNK5spark9JSONValue4typeEv+0x4a>
 8087f4a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8087f4e:	2b09      	cmp	r3, #9
 8087f50:	d90e      	bls.n	8087f70 <_ZNK5spark9JSONValue4typeEv+0x4a>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 8087f52:	2874      	cmp	r0, #116	; 0x74
 8087f54:	d00e      	beq.n	8087f74 <_ZNK5spark9JSONValue4typeEv+0x4e>
 8087f56:	2866      	cmp	r0, #102	; 0x66
 8087f58:	d00c      	beq.n	8087f74 <_ZNK5spark9JSONValue4typeEv+0x4e>
        return JSON_TYPE_INVALID;
 8087f5a:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 8087f5e:	4258      	negs	r0, r3
 8087f60:	4158      	adcs	r0, r3
 8087f62:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 8087f64:	2006      	movs	r0, #6
 8087f66:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 8087f68:	2000      	movs	r0, #0
 8087f6a:	4770      	bx	lr
        return JSON_TYPE_STRING;
 8087f6c:	2004      	movs	r0, #4
 8087f6e:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 8087f70:	2003      	movs	r0, #3
 8087f72:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 8087f74:	2002      	movs	r0, #2
}
 8087f76:	4770      	bx	lr

08087f78 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 8087f78:	b510      	push	{r4, lr}
 8087f7a:	4604      	mov	r4, r0
    switch (type()) {
 8087f7c:	f7ff ffd3 	bl	8087f26 <_ZNK5spark9JSONValue4typeEv>
 8087f80:	2802      	cmp	r0, #2
 8087f82:	d00e      	beq.n	8087fa2 <_ZNK5spark9JSONValue5toIntEv+0x2a>
 8087f84:	1ec3      	subs	r3, r0, #3
 8087f86:	b2db      	uxtb	r3, r3
 8087f88:	2b01      	cmp	r3, #1
 8087f8a:	d814      	bhi.n	8087fb6 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 8087f8c:	6822      	ldr	r2, [r4, #0]
 8087f8e:	68a3      	ldr	r3, [r4, #8]
 8087f90:	6850      	ldr	r0, [r2, #4]
 8087f92:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 8087f94:	220a      	movs	r2, #10
}
 8087f96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 8087f9a:	2100      	movs	r1, #0
 8087f9c:	4418      	add	r0, r3
 8087f9e:	f003 b80f 	b.w	808afc0 <strtol>
        const char* const s = d_->json + t_->start;
 8087fa2:	6822      	ldr	r2, [r4, #0]
 8087fa4:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 8087fa6:	6852      	ldr	r2, [r2, #4]
 8087fa8:	685b      	ldr	r3, [r3, #4]
 8087faa:	5cd0      	ldrb	r0, [r2, r3]
 8087fac:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 8087fb0:	4258      	negs	r0, r3
 8087fb2:	4158      	adcs	r0, r3
}
 8087fb4:	bd10      	pop	{r4, pc}
    switch (type()) {
 8087fb6:	2000      	movs	r0, #0
 8087fb8:	e7fc      	b.n	8087fb4 <_ZNK5spark9JSONValue5toIntEv+0x3c>
	...

08087fbc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 8087fbc:	460b      	mov	r3, r1
 8087fbe:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 8087fc0:	2200      	movs	r2, #0
 8087fc2:	b510      	push	{r4, lr}
 8087fc4:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 8087fc6:	e9c0 2200 	strd	r2, r2, [r0]
        n_(0) {
 8087fca:	480d      	ldr	r0, [pc, #52]	; (8088000 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 8087fcc:	e9c4 0202 	strd	r0, r2, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 8087fd0:	b1a3      	cbz	r3, 8087ffc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x40>
 8087fd2:	781a      	ldrb	r2, [r3, #0]
 8087fd4:	2a03      	cmp	r2, #3
 8087fd6:	d006      	beq.n	8087fe6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2a>
 8087fd8:	b982      	cbnz	r2, 8087ffc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x40>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 8087fda:	680a      	ldr	r2, [r1, #0]
 8087fdc:	6850      	ldr	r0, [r2, #4]
 8087fde:	685a      	ldr	r2, [r3, #4]
 8087fe0:	5c82      	ldrb	r2, [r0, r2]
 8087fe2:	2a6e      	cmp	r2, #110	; 0x6e
 8087fe4:	d007      	beq.n	8087ff6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3a>
            s_ = d->json + t->start;
 8087fe6:	680a      	ldr	r2, [r1, #0]
 8087fe8:	6858      	ldr	r0, [r3, #4]
 8087fea:	6852      	ldr	r2, [r2, #4]
            n_ = t->end - t->start;
 8087fec:	689b      	ldr	r3, [r3, #8]
            s_ = d->json + t->start;
 8087fee:	4402      	add	r2, r0
            n_ = t->end - t->start;
 8087ff0:	1a1b      	subs	r3, r3, r0
            s_ = d->json + t->start;
 8087ff2:	60a2      	str	r2, [r4, #8]
            n_ = t->end - t->start;
 8087ff4:	60e3      	str	r3, [r4, #12]
 8087ff6:	4620      	mov	r0, r4
 8087ff8:	f7ff ff69 	bl	8087ece <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 8087ffc:	4620      	mov	r0, r4
 8087ffe:	bd10      	pop	{r4, pc}
 8088000:	0808b70c 	.word	0x0808b70c

08088004 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 8088004:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 8088006:	2500      	movs	r5, #0
 8088008:	460b      	mov	r3, r1
 808800a:	4604      	mov	r4, r0
 808800c:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 808800e:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 8088012:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8088016:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 808801a:	b14b      	cbz	r3, 8088030 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 808801c:	781a      	ldrb	r2, [r3, #0]
 808801e:	2a01      	cmp	r2, #1
 8088020:	d106      	bne.n	8088030 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 8088022:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 8088026:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 8088028:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 808802a:	6143      	str	r3, [r0, #20]
 808802c:	f7ff ff4f 	bl	8087ece <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 8088030:	4620      	mov	r0, r4
 8088032:	bd38      	pop	{r3, r4, r5, pc}

08088034 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 8088034:	b510      	push	{r4, lr}
    if (!n_) {
 8088036:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 8088038:	4604      	mov	r4, r0
    if (!n_) {
 808803a:	b163      	cbz	r3, 8088056 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 808803c:	6880      	ldr	r0, [r0, #8]
    --n_;
 808803e:	3b01      	subs	r3, #1
    k_ = t_; // Name
 8088040:	60e0      	str	r0, [r4, #12]
    ++t_;
 8088042:	3010      	adds	r0, #16
 8088044:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 8088046:	6120      	str	r0, [r4, #16]
    --n_;
 8088048:	6163      	str	r3, [r4, #20]
    if (n_) {
 808804a:	b113      	cbz	r3, 8088052 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 808804c:	f7ff feee 	bl	8087e2c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 8088050:	60a0      	str	r0, [r4, #8]
    return true;
 8088052:	2001      	movs	r0, #1
 8088054:	e000      	b.n	8088058 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 8088056:	4618      	mov	r0, r3
}
 8088058:	bd10      	pop	{r4, pc}

0808805a <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 808805a:	b510      	push	{r4, lr}
    write('}');
 808805c:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 808805e:	4604      	mov	r4, r0
    write('}');
 8088060:	f7ff ff47 	bl	8087ef2 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 8088064:	2301      	movs	r3, #1
}
 8088066:	4620      	mov	r0, r4
    state_ = NEXT;
 8088068:	7123      	strb	r3, [r4, #4]
}
 808806a:	bd10      	pop	{r4, pc}

0808806c <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 808806c:	b508      	push	{r3, lr}
    switch (state_) {
 808806e:	7903      	ldrb	r3, [r0, #4]
 8088070:	2b01      	cmp	r3, #1
 8088072:	d002      	beq.n	808807a <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 8088074:	2b02      	cmp	r3, #2
 8088076:	d004      	beq.n	8088082 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 8088078:	bd08      	pop	{r3, pc}
        write(',');
 808807a:	212c      	movs	r1, #44	; 0x2c
        write(':');
 808807c:	f7ff ff39 	bl	8087ef2 <_ZN5spark10JSONWriter5writeEc>
}
 8088080:	e7fa      	b.n	8088078 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 8088082:	213a      	movs	r1, #58	; 0x3a
 8088084:	e7fa      	b.n	808807c <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

08088086 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 8088086:	b510      	push	{r4, lr}
 8088088:	4604      	mov	r4, r0
    writeSeparator();
 808808a:	f7ff ffef 	bl	808806c <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 808808e:	4620      	mov	r0, r4
 8088090:	217b      	movs	r1, #123	; 0x7b
 8088092:	f7ff ff2e 	bl	8087ef2 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 8088096:	2300      	movs	r3, #0
}
 8088098:	4620      	mov	r0, r4
    state_ = BEGIN;
 808809a:	7123      	strb	r3, [r4, #4]
}
 808809c:	bd10      	pop	{r4, pc}
	...

080880a0 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 80880a0:	b538      	push	{r3, r4, r5, lr}
 80880a2:	4604      	mov	r4, r0
 80880a4:	460d      	mov	r5, r1
    writeSeparator();
 80880a6:	f7ff ffe1 	bl	808806c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 80880aa:	6823      	ldr	r3, [r4, #0]
 80880ac:	4620      	mov	r0, r4
 80880ae:	462a      	mov	r2, r5
 80880b0:	68db      	ldr	r3, [r3, #12]
 80880b2:	4903      	ldr	r1, [pc, #12]	; (80880c0 <_ZN5spark10JSONWriter5valueEi+0x20>)
 80880b4:	4798      	blx	r3
    state_ = NEXT;
 80880b6:	2301      	movs	r3, #1
}
 80880b8:	4620      	mov	r0, r4
    state_ = NEXT;
 80880ba:	7123      	strb	r3, [r4, #4]
}
 80880bc:	bd38      	pop	{r3, r4, r5, pc}
 80880be:	bf00      	nop
 80880c0:	0808b863 	.word	0x0808b863

080880c4 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 80880c4:	b538      	push	{r3, r4, r5, lr}
 80880c6:	4604      	mov	r4, r0
 80880c8:	460d      	mov	r5, r1
    writeSeparator();
 80880ca:	f7ff ffcf 	bl	808806c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 80880ce:	6823      	ldr	r3, [r4, #0]
 80880d0:	4620      	mov	r0, r4
 80880d2:	462a      	mov	r2, r5
 80880d4:	68db      	ldr	r3, [r3, #12]
 80880d6:	4903      	ldr	r1, [pc, #12]	; (80880e4 <_ZN5spark10JSONWriter5valueEj+0x20>)
 80880d8:	4798      	blx	r3
    state_ = NEXT;
 80880da:	2301      	movs	r3, #1
}
 80880dc:	4620      	mov	r0, r4
    state_ = NEXT;
 80880de:	7123      	strb	r3, [r4, #4]
}
 80880e0:	bd38      	pop	{r3, r4, r5, pc}
 80880e2:	bf00      	nop
 80880e4:	0808bde4 	.word	0x0808bde4

080880e8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 80880e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80880ec:	460d      	mov	r5, r1
 80880ee:	4690      	mov	r8, r2
    write('"');
 80880f0:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 80880f2:	4604      	mov	r4, r0
 80880f4:	462f      	mov	r7, r5
    write('"');
 80880f6:	f7ff fefc 	bl	8087ef2 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 80880fa:	f8df 909c 	ldr.w	r9, [pc, #156]	; 8088198 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb0>
    const char* const end = str + size;
 80880fe:	44a8      	add	r8, r5
    while (s != end) {
 8088100:	4547      	cmp	r7, r8
 8088102:	463a      	mov	r2, r7
 8088104:	d039      	beq.n	808817a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x92>
        const char c = *s;
 8088106:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
 808810a:	2e22      	cmp	r6, #34	; 0x22
 808810c:	d003      	beq.n	8088116 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
 808810e:	2e5c      	cmp	r6, #92	; 0x5c
 8088110:	d001      	beq.n	8088116 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
 8088112:	2e1f      	cmp	r6, #31
 8088114:	d8f4      	bhi.n	8088100 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 8088116:	6823      	ldr	r3, [r4, #0]
 8088118:	4629      	mov	r1, r5
 808811a:	4620      	mov	r0, r4
 808811c:	689b      	ldr	r3, [r3, #8]
 808811e:	1b52      	subs	r2, r2, r5
 8088120:	4798      	blx	r3
            write('\\');
 8088122:	215c      	movs	r1, #92	; 0x5c
 8088124:	4620      	mov	r0, r4
 8088126:	f7ff fee4 	bl	8087ef2 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 808812a:	2e0d      	cmp	r6, #13
 808812c:	d80a      	bhi.n	8088144 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5c>
 808812e:	2e07      	cmp	r6, #7
 8088130:	d91c      	bls.n	808816c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
 8088132:	f1a6 0308 	sub.w	r3, r6, #8
 8088136:	2b05      	cmp	r3, #5
 8088138:	d818      	bhi.n	808816c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
 808813a:	e8df f003 	tbb	[pc, r3]
 808813e:	0f0d      	.short	0x0f0d
 8088140:	15131711 	.word	0x15131711
 8088144:	2e22      	cmp	r6, #34	; 0x22
 8088146:	d001      	beq.n	808814c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
 8088148:	2e5c      	cmp	r6, #92	; 0x5c
 808814a:	d10f      	bne.n	808816c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
                write(c);
 808814c:	4631      	mov	r1, r6
                write('b');
 808814e:	4620      	mov	r0, r4
 8088150:	f7ff fecf 	bl	8087ef2 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 8088154:	463d      	mov	r5, r7
    while (s != end) {
 8088156:	e7d3      	b.n	8088100 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 8088158:	2162      	movs	r1, #98	; 0x62
 808815a:	e7f8      	b.n	808814e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
                write('t');
 808815c:	2174      	movs	r1, #116	; 0x74
 808815e:	e7f6      	b.n	808814e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
                write('n');
 8088160:	216e      	movs	r1, #110	; 0x6e
 8088162:	e7f4      	b.n	808814e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
                write('f');
 8088164:	2166      	movs	r1, #102	; 0x66
 8088166:	e7f2      	b.n	808814e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
                write('r');
 8088168:	2172      	movs	r1, #114	; 0x72
 808816a:	e7f0      	b.n	808814e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
                printf("u%04x", (unsigned)c);
 808816c:	6823      	ldr	r3, [r4, #0]
 808816e:	4632      	mov	r2, r6
 8088170:	4649      	mov	r1, r9
 8088172:	4620      	mov	r0, r4
 8088174:	68db      	ldr	r3, [r3, #12]
 8088176:	4798      	blx	r3
                break;
 8088178:	e7ec      	b.n	8088154 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
        }
        ++s;
    }
    if (s != str) {
 808817a:	42bd      	cmp	r5, r7
 808817c:	d005      	beq.n	808818a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xa2>
        write(str, s - str); // Write remaining characters
 808817e:	6823      	ldr	r3, [r4, #0]
 8088180:	4629      	mov	r1, r5
 8088182:	4620      	mov	r0, r4
 8088184:	689b      	ldr	r3, [r3, #8]
 8088186:	1b7a      	subs	r2, r7, r5
 8088188:	4798      	blx	r3
    }
    write('"');
 808818a:	2122      	movs	r1, #34	; 0x22
 808818c:	4620      	mov	r0, r4
 808818e:	f7ff feb0 	bl	8087ef2 <_ZN5spark10JSONWriter5writeEc>
}
 8088192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8088196:	bf00      	nop
 8088198:	0808bde7 	.word	0x0808bde7

0808819c <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 808819c:	b570      	push	{r4, r5, r6, lr}
 808819e:	4604      	mov	r4, r0
 80881a0:	460d      	mov	r5, r1
 80881a2:	4616      	mov	r6, r2
    writeSeparator();
 80881a4:	f7ff ff62 	bl	808806c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 80881a8:	4620      	mov	r0, r4
 80881aa:	4632      	mov	r2, r6
 80881ac:	4629      	mov	r1, r5
 80881ae:	f7ff ff9b 	bl	80880e8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 80881b2:	2302      	movs	r3, #2
}
 80881b4:	4620      	mov	r0, r4
    state_ = VALUE;
 80881b6:	7123      	strb	r3, [r4, #4]
}
 80881b8:	bd70      	pop	{r4, r5, r6, pc}

080881ba <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 80881ba:	b570      	push	{r4, r5, r6, lr}
 80881bc:	4604      	mov	r4, r0
 80881be:	460d      	mov	r5, r1
 80881c0:	4616      	mov	r6, r2
    writeSeparator();
 80881c2:	f7ff ff53 	bl	808806c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 80881c6:	4620      	mov	r0, r4
 80881c8:	4632      	mov	r2, r6
 80881ca:	4629      	mov	r1, r5
 80881cc:	f7ff ff8c 	bl	80880e8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 80881d0:	2301      	movs	r3, #1
}
 80881d2:	4620      	mov	r0, r4
    state_ = NEXT;
 80881d4:	7123      	strb	r3, [r4, #4]
}
 80881d6:	bd70      	pop	{r4, r5, r6, pc}

080881d8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80881d8:	282e      	cmp	r0, #46	; 0x2e
bool pinAvailable(uint16_t pin) {
 80881da:	b570      	push	{r4, r5, r6, lr}
 80881dc:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80881de:	d901      	bls.n	80881e4 <pinAvailable+0xc>
    return false;
 80881e0:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80881e2:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80881e4:	f1a0 030d 	sub.w	r3, r0, #13
 80881e8:	2b02      	cmp	r3, #2
 80881ea:	d90b      	bls.n	8088204 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80881ec:	2801      	cmp	r0, #1
 80881ee:	d826      	bhi.n	808823e <pinAvailable+0x66>
 80881f0:	f000 f930 	bl	8088454 <_Z19__fetch_global_Wirev>
 80881f4:	2100      	movs	r1, #0
 80881f6:	7c00      	ldrb	r0, [r0, #16]
 80881f8:	f7fc fdc2 	bl	8084d80 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80881fc:	f080 0001 	eor.w	r0, r0, #1
 8088200:	b2c0      	uxtb	r0, r0
 8088202:	e7ee      	b.n	80881e2 <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 8088204:	4e13      	ldr	r6, [pc, #76]	; (8088254 <pinAvailable+0x7c>)
 8088206:	7831      	ldrb	r1, [r6, #0]
 8088208:	f3bf 8f5b 	dmb	ish
 808820c:	f011 0501 	ands.w	r5, r1, #1
 8088210:	d10f      	bne.n	8088232 <pinAvailable+0x5a>
 8088212:	4630      	mov	r0, r6
 8088214:	f7f7 ff62 	bl	80800dc <__cxa_guard_acquire>
 8088218:	b158      	cbz	r0, 8088232 <pinAvailable+0x5a>
 808821a:	4629      	mov	r1, r5
 808821c:	480e      	ldr	r0, [pc, #56]	; (8088258 <pinAvailable+0x80>)
 808821e:	f7fd f86a 	bl	80852f6 <_ZN8SPIClassC1E19hal_spi_interface_t>
 8088222:	4630      	mov	r0, r6
 8088224:	f7f7 ff5f 	bl	80800e6 <__cxa_guard_release>
 8088228:	4a0c      	ldr	r2, [pc, #48]	; (808825c <pinAvailable+0x84>)
 808822a:	490d      	ldr	r1, [pc, #52]	; (8088260 <pinAvailable+0x88>)
 808822c:	480a      	ldr	r0, [pc, #40]	; (8088258 <pinAvailable+0x80>)
 808822e:	f000 f961 	bl	80884f4 <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 8088232:	4b09      	ldr	r3, [pc, #36]	; (8088258 <pinAvailable+0x80>)
 8088234:	7818      	ldrb	r0, [r3, #0]
 8088236:	f7fc fdfb 	bl	8084e30 <hal_spi_is_enabled>
 808823a:	2800      	cmp	r0, #0
 808823c:	d1d0      	bne.n	80881e0 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 808823e:	3c12      	subs	r4, #18
 8088240:	2c01      	cmp	r4, #1
 8088242:	d805      	bhi.n	8088250 <pinAvailable+0x78>
 8088244:	f7ff fc90 	bl	8087b68 <_Z22__fetch_global_Serial1v>
 8088248:	7c00      	ldrb	r0, [r0, #16]
 808824a:	f7fc fd41 	bl	8084cd0 <hal_usart_is_enabled>
 808824e:	e7d5      	b.n	80881fc <pinAvailable+0x24>
  return true; // 'pin' is available
 8088250:	2001      	movs	r0, #1
 8088252:	e7c6      	b.n	80881e2 <pinAvailable+0xa>
 8088254:	20000398 	.word	0x20000398
 8088258:	2000039c 	.word	0x2000039c
 808825c:	20000130 	.word	0x20000130
 8088260:	080830bb 	.word	0x080830bb

08088264 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8088264:	282e      	cmp	r0, #46	; 0x2e
{
 8088266:	b538      	push	{r3, r4, r5, lr}
 8088268:	4604      	mov	r4, r0
 808826a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 808826c:	d80a      	bhi.n	8088284 <pinMode+0x20>
 808826e:	29ff      	cmp	r1, #255	; 0xff
 8088270:	d008      	beq.n	8088284 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 8088272:	f7ff ffb1 	bl	80881d8 <pinAvailable>
 8088276:	b128      	cbz	r0, 8088284 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 8088278:	4629      	mov	r1, r5
 808827a:	4620      	mov	r0, r4
}
 808827c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 8088280:	f7fc bbde 	b.w	8084a40 <HAL_Pin_Mode>
}
 8088284:	bd38      	pop	{r3, r4, r5, pc}

08088286 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 8088286:	b538      	push	{r3, r4, r5, lr}
 8088288:	4604      	mov	r4, r0
 808828a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 808828c:	f7fc fbe0 	bl	8084a50 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 8088290:	28ff      	cmp	r0, #255	; 0xff
 8088292:	d010      	beq.n	80882b6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 8088294:	2806      	cmp	r0, #6
 8088296:	d804      	bhi.n	80882a2 <digitalWrite+0x1c>
 8088298:	234d      	movs	r3, #77	; 0x4d
 808829a:	fa23 f000 	lsr.w	r0, r3, r0
 808829e:	07c3      	lsls	r3, r0, #31
 80882a0:	d409      	bmi.n	80882b6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80882a2:	4620      	mov	r0, r4
 80882a4:	f7ff ff98 	bl	80881d8 <pinAvailable>
 80882a8:	b128      	cbz	r0, 80882b6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80882aa:	4629      	mov	r1, r5
 80882ac:	4620      	mov	r0, r4
}
 80882ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80882b2:	f7fc bbd5 	b.w	8084a60 <HAL_GPIO_Write>
}
 80882b6:	bd38      	pop	{r3, r4, r5, pc}

080882b8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80882b8:	b510      	push	{r4, lr}
 80882ba:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80882bc:	f7fc fbc8 	bl	8084a50 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 80882c0:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 80882c2:	b2db      	uxtb	r3, r3
 80882c4:	2b01      	cmp	r3, #1
 80882c6:	d908      	bls.n	80882da <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80882c8:	4620      	mov	r0, r4
 80882ca:	f7ff ff85 	bl	80881d8 <pinAvailable>
 80882ce:	b120      	cbz	r0, 80882da <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80882d0:	4620      	mov	r0, r4
}
 80882d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
 80882d6:	f7fc bbcb 	b.w	8084a70 <HAL_GPIO_Read>
}
 80882da:	2000      	movs	r0, #0
 80882dc:	bd10      	pop	{r4, pc}

080882de <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80882de:	b510      	push	{r4, lr}
 80882e0:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80882e2:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80882e4:	bf9c      	itt	ls
 80882e6:	340a      	addls	r4, #10
 80882e8:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80882ea:	4620      	mov	r0, r4
 80882ec:	f7ff ff74 	bl	80881d8 <pinAvailable>
 80882f0:	b150      	cbz	r0, 8088308 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80882f2:	2103      	movs	r1, #3
 80882f4:	4620      	mov	r0, r4
 80882f6:	f7fc fb9b 	bl	8084a30 <HAL_Validate_Pin_Function>
 80882fa:	2803      	cmp	r0, #3
 80882fc:	d104      	bne.n	8088308 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 80882fe:	4620      	mov	r0, r4
}
 8088300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 8088304:	f7fc bbd4 	b.w	8084ab0 <hal_adc_read>
}
 8088308:	2000      	movs	r0, #0
 808830a:	bd10      	pop	{r4, pc}

0808830c <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
 808830c:	b538      	push	{r3, r4, r5, lr}
 808830e:	4604      	mov	r4, r0
 8088310:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
 8088312:	f7ff ff61 	bl	80881d8 <pinAvailable>
 8088316:	b1f0      	cbz	r0, 8088356 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
 8088318:	2104      	movs	r1, #4
 808831a:	4620      	mov	r0, r4
 808831c:	f7fc fb88 	bl	8084a30 <HAL_Validate_Pin_Function>
 8088320:	2804      	cmp	r0, #4
 8088322:	d105      	bne.n	8088330 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
 8088324:	4620      	mov	r0, r4
 8088326:	b2a9      	uxth	r1, r5
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
 8088328:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
 808832c:	f7fc bbb8 	b.w	8084aa0 <HAL_DAC_Write>
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
 8088330:	2102      	movs	r1, #2
 8088332:	4620      	mov	r0, r4
 8088334:	f7fc fb7c 	bl	8084a30 <HAL_Validate_Pin_Function>
 8088338:	2802      	cmp	r0, #2
 808833a:	d10c      	bne.n	8088356 <_Z11analogWritetm+0x4a>
        PinMode mode = HAL_Get_Pin_Mode(pin);
 808833c:	4620      	mov	r0, r4
 808833e:	f7fc fb87 	bl	8084a50 <HAL_Get_Pin_Mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
 8088342:	2801      	cmp	r0, #1
 8088344:	d001      	beq.n	808834a <_Z11analogWritetm+0x3e>
 8088346:	2804      	cmp	r0, #4
 8088348:	d105      	bne.n	8088356 <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
 808834a:	4629      	mov	r1, r5
 808834c:	4620      	mov	r0, r4
}
 808834e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
 8088352:	f7fc bbb5 	b.w	8084ac0 <hal_pwm_write_ext>
}
 8088356:	bd38      	pop	{r3, r4, r5, pc}

08088358 <_ZN19ApplicationWatchdog4loopEv>:
	wd.loop();
	os_thread_cleanup(nullptr);
}

void ApplicationWatchdog::loop()
{
 8088358:	b530      	push	{r4, r5, lr}
 808835a:	4604      	mov	r4, r0
	bool done = false;
	system_tick_t now;
	while (!done) {
		HAL_Delay_Milliseconds(timeout);
		now = current_time();
		done = (now-last_checkin)>=timeout;
 808835c:	4d1b      	ldr	r5, [pc, #108]	; (80883cc <_ZN19ApplicationWatchdog4loopEv+0x74>)
{
 808835e:	b089      	sub	sp, #36	; 0x24
		HAL_Delay_Milliseconds(timeout);
 8088360:	6820      	ldr	r0, [r4, #0]
 8088362:	f7fc fbbd 	bl	8084ae0 <HAL_Delay_Milliseconds>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8088366:	f7fc fbd3 	bl	8084b10 <HAL_Timer_Get_Milli_Seconds>
		done = (now-last_checkin)>=timeout;
 808836a:	682a      	ldr	r2, [r5, #0]
 808836c:	6823      	ldr	r3, [r4, #0]
 808836e:	1a80      	subs	r0, r0, r2
	while (!done) {
 8088370:	4298      	cmp	r0, r3
 8088372:	d3f5      	bcc.n	8088360 <_ZN19ApplicationWatchdog4loopEv+0x8>
	}

	if (timeout>0 && timeout_fn) {
 8088374:	6823      	ldr	r3, [r4, #0]
 8088376:	b333      	cbz	r3, 80883c6 <_ZN19ApplicationWatchdog4loopEv+0x6e>
 8088378:	68e3      	ldr	r3, [r4, #12]
 808837a:	b323      	cbz	r3, 80883c6 <_ZN19ApplicationWatchdog4loopEv+0x6e>
		timeout_fn();
 808837c:	1d25      	adds	r5, r4, #4
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808837e:	4628      	mov	r0, r5
 8088380:	6923      	ldr	r3, [r4, #16]
 8088382:	4798      	blx	r3
    _Function_base() : _M_manager(nullptr) { }
 8088384:	2300      	movs	r3, #0
	std::swap(_M_functor, __x._M_functor);
 8088386:	4668      	mov	r0, sp
 8088388:	a904      	add	r1, sp, #16
    _Function_base() : _M_manager(nullptr) { }
 808838a:	9302      	str	r3, [sp, #8]
 808838c:	9306      	str	r3, [sp, #24]
	std::swap(_M_functor, __x._M_functor);
 808838e:	f7f9 f918 	bl	80815c2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8088392:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 8088394:	9a06      	ldr	r2, [sp, #24]
      __b = _GLIBCXX_MOVE(__tmp);
 8088396:	9306      	str	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 8088398:	9202      	str	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808839a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 808839c:	9a07      	ldr	r2, [sp, #28]
 808839e:	4629      	mov	r1, r5
 80883a0:	a804      	add	r0, sp, #16
 80883a2:	9203      	str	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80883a4:	9307      	str	r3, [sp, #28]
 80883a6:	f7f9 f90c 	bl	80815c2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80883aa:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80883ac:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80883ae:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80883b0:	9b07      	ldr	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80883b2:	9206      	str	r2, [sp, #24]
 80883b4:	6922      	ldr	r2, [r4, #16]
    class function<_Res(_ArgTypes...)>
 80883b6:	a804      	add	r0, sp, #16
      __b = _GLIBCXX_MOVE(__tmp);
 80883b8:	6123      	str	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 80883ba:	9207      	str	r2, [sp, #28]
 80883bc:	f7f8 fa1e 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
 80883c0:	4668      	mov	r0, sp
 80883c2:	f7f8 fa1b 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
		timeout_fn = std::function<void(void)>();
	}
}
 80883c6:	b009      	add	sp, #36	; 0x24
 80883c8:	bd30      	pop	{r4, r5, pc}
 80883ca:	bf00      	nop
 80883cc:	200009b8 	.word	0x200009b8

080883d0 <_ZN19ApplicationWatchdog5startEPv>:
{
 80883d0:	b508      	push	{r3, lr}
	wd.loop();
 80883d2:	f7ff ffc1 	bl	8088358 <_ZN19ApplicationWatchdog4loopEv>
}
 80883d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	os_thread_cleanup(nullptr);
 80883da:	2000      	movs	r0, #0
 80883dc:	f7fc bbe0 	b.w	8084ba0 <os_thread_cleanup>

080883e0 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80883e0:	2300      	movs	r3, #0
 80883e2:	b513      	push	{r0, r1, r4, lr}
 80883e4:	4c07      	ldr	r4, [pc, #28]	; (8088404 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80883e6:	461a      	mov	r2, r3
 80883e8:	4619      	mov	r1, r3
 80883ea:	4620      	mov	r0, r4
 80883ec:	9300      	str	r3, [sp, #0]
 80883ee:	f7ff f993 	bl	8087718 <_ZN9IPAddressC1Ehhhh>
 80883f2:	4620      	mov	r0, r4
 80883f4:	4a04      	ldr	r2, [pc, #16]	; (8088408 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80883f6:	4905      	ldr	r1, [pc, #20]	; (808840c <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80883f8:	b002      	add	sp, #8
 80883fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80883fe:	f000 b879 	b.w	80884f4 <__aeabi_atexit>
 8088402:	bf00      	nop
 8088404:	200009bc 	.word	0x200009bc
 8088408:	20000130 	.word	0x20000130
 808840c:	08087691 	.word	0x08087691

08088410 <_ZN12_GLOBAL__N_117defaultWireConfigEv>:

#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
 8088410:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 8088412:	2314      	movs	r3, #20
 8088414:	2520      	movs	r5, #32
		.size = sizeof(hal_i2c_config_t),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8088416:	4e08      	ldr	r6, [pc, #32]	; (8088438 <_ZN12_GLOBAL__N_117defaultWireConfigEv+0x28>)
hal_i2c_config_t defaultWireConfig() {
 8088418:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 808841a:	6003      	str	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808841c:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 808841e:	6085      	str	r5, [r0, #8]
 8088420:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8088422:	4628      	mov	r0, r5
 8088424:	f000 f86f 	bl	8088506 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8088428:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 808842a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808842c:	4628      	mov	r0, r5
 808842e:	f000 f86a 	bl	8088506 <_ZnajRKSt9nothrow_t>
	};
 8088432:	60e0      	str	r0, [r4, #12]

	return config;
}
 8088434:	4620      	mov	r0, r4
 8088436:	bd70      	pop	{r4, r5, r6, pc}
 8088438:	0808bded 	.word	0x0808bded

0808843c <_Z17acquireWireBufferv>:

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 808843c:	b510      	push	{r4, lr}
 808843e:	4604      	mov	r4, r0
	return defaultWireConfig();
 8088440:	f7ff ffe6 	bl	8088410 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
}
 8088444:	4620      	mov	r0, r4
 8088446:	bd10      	pop	{r4, pc}

08088448 <_Z18acquireWire3Bufferv>:
 8088448:	b510      	push	{r4, lr}
 808844a:	4604      	mov	r4, r0
 808844c:	f7ff ffe0 	bl	8088410 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
 8088450:	4620      	mov	r0, r4
 8088452:	bd10      	pop	{r4, pc}

08088454 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 8088454:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 8088456:	4d0f      	ldr	r5, [pc, #60]	; (8088494 <_Z19__fetch_global_Wirev+0x40>)
{
 8088458:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 808845a:	7829      	ldrb	r1, [r5, #0]
 808845c:	f3bf 8f5b 	dmb	ish
 8088460:	f011 0401 	ands.w	r4, r1, #1
 8088464:	d113      	bne.n	808848e <_Z19__fetch_global_Wirev+0x3a>
 8088466:	4628      	mov	r0, r5
 8088468:	f7f7 fe38 	bl	80800dc <__cxa_guard_acquire>
 808846c:	b178      	cbz	r0, 808848e <_Z19__fetch_global_Wirev+0x3a>
 808846e:	a801      	add	r0, sp, #4
 8088470:	f7ff ffe4 	bl	808843c <_Z17acquireWireBufferv>
 8088474:	4621      	mov	r1, r4
 8088476:	aa01      	add	r2, sp, #4
 8088478:	4807      	ldr	r0, [pc, #28]	; (8088498 <_Z19__fetch_global_Wirev+0x44>)
 808847a:	f7ff fbdd 	bl	8087c38 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 808847e:	4628      	mov	r0, r5
 8088480:	f7f7 fe31 	bl	80800e6 <__cxa_guard_release>
 8088484:	4a05      	ldr	r2, [pc, #20]	; (808849c <_Z19__fetch_global_Wirev+0x48>)
 8088486:	4906      	ldr	r1, [pc, #24]	; (80884a0 <_Z19__fetch_global_Wirev+0x4c>)
 8088488:	4803      	ldr	r0, [pc, #12]	; (8088498 <_Z19__fetch_global_Wirev+0x44>)
 808848a:	f000 f833 	bl	80884f4 <__aeabi_atexit>
	return wire;
}
 808848e:	4802      	ldr	r0, [pc, #8]	; (8088498 <_Z19__fetch_global_Wirev+0x44>)
 8088490:	b007      	add	sp, #28
 8088492:	bd30      	pop	{r4, r5, pc}
 8088494:	200009c4 	.word	0x200009c4
 8088498:	200009cc 	.word	0x200009cc
 808849c:	20000130 	.word	0x20000130
 80884a0:	08087be1 	.word	0x08087be1

080884a4 <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 80884a4:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 80884a6:	4c0f      	ldr	r4, [pc, #60]	; (80884e4 <_Z20__fetch_global_Wire3v+0x40>)
{
 80884a8:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 80884aa:	7823      	ldrb	r3, [r4, #0]
 80884ac:	f3bf 8f5b 	dmb	ish
 80884b0:	07db      	lsls	r3, r3, #31
 80884b2:	d413      	bmi.n	80884dc <_Z20__fetch_global_Wire3v+0x38>
 80884b4:	4620      	mov	r0, r4
 80884b6:	f7f7 fe11 	bl	80800dc <__cxa_guard_acquire>
 80884ba:	b178      	cbz	r0, 80884dc <_Z20__fetch_global_Wire3v+0x38>
 80884bc:	a801      	add	r0, sp, #4
 80884be:	f7ff ffc3 	bl	8088448 <_Z18acquireWire3Bufferv>
 80884c2:	2102      	movs	r1, #2
 80884c4:	aa01      	add	r2, sp, #4
 80884c6:	4808      	ldr	r0, [pc, #32]	; (80884e8 <_Z20__fetch_global_Wire3v+0x44>)
 80884c8:	f7ff fbb6 	bl	8087c38 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80884cc:	4620      	mov	r0, r4
 80884ce:	f7f7 fe0a 	bl	80800e6 <__cxa_guard_release>
 80884d2:	4a06      	ldr	r2, [pc, #24]	; (80884ec <_Z20__fetch_global_Wire3v+0x48>)
 80884d4:	4906      	ldr	r1, [pc, #24]	; (80884f0 <_Z20__fetch_global_Wire3v+0x4c>)
 80884d6:	4804      	ldr	r0, [pc, #16]	; (80884e8 <_Z20__fetch_global_Wire3v+0x44>)
 80884d8:	f000 f80c 	bl	80884f4 <__aeabi_atexit>
	return wire;
}
 80884dc:	4802      	ldr	r0, [pc, #8]	; (80884e8 <_Z20__fetch_global_Wire3v+0x44>)
 80884de:	b006      	add	sp, #24
 80884e0:	bd10      	pop	{r4, pc}
 80884e2:	bf00      	nop
 80884e4:	200009c8 	.word	0x200009c8
 80884e8:	200009e0 	.word	0x200009e0
 80884ec:	20000130 	.word	0x20000130
 80884f0:	08087be1 	.word	0x08087be1

080884f4 <__aeabi_atexit>:
 80884f4:	460b      	mov	r3, r1
 80884f6:	4601      	mov	r1, r0
 80884f8:	4618      	mov	r0, r3
 80884fa:	f002 bb95 	b.w	808ac28 <__cxa_atexit>

080884fe <_ZdlPvj>:
 80884fe:	f7f7 bde0 	b.w	80800c2 <_ZdlPv>

08088502 <_ZnwjRKSt9nothrow_t>:
 8088502:	f7f7 bdda 	b.w	80800ba <_Znwj>

08088506 <_ZnajRKSt9nothrow_t>:
 8088506:	f7f7 bdda 	b.w	80800be <_Znaj>

0808850a <_ZSt25__throw_bad_function_callv>:
 808850a:	b508      	push	{r3, lr}
 808850c:	f7fc fe68 	bl	80851e0 <abort>

08088510 <log>:
 8088510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8088512:	4604      	mov	r4, r0
 8088514:	460d      	mov	r5, r1
 8088516:	f000 f95f 	bl	80887d8 <__ieee754_log>
 808851a:	4b17      	ldr	r3, [pc, #92]	; (8088578 <log+0x68>)
 808851c:	4606      	mov	r6, r0
 808851e:	f993 3000 	ldrsb.w	r3, [r3]
 8088522:	460f      	mov	r7, r1
 8088524:	3301      	adds	r3, #1
 8088526:	d01a      	beq.n	808855e <log+0x4e>
 8088528:	4622      	mov	r2, r4
 808852a:	462b      	mov	r3, r5
 808852c:	4620      	mov	r0, r4
 808852e:	4629      	mov	r1, r5
 8088530:	f001 ff8e 	bl	808a450 <__aeabi_dcmpun>
 8088534:	b998      	cbnz	r0, 808855e <log+0x4e>
 8088536:	2200      	movs	r2, #0
 8088538:	2300      	movs	r3, #0
 808853a:	4620      	mov	r0, r4
 808853c:	4629      	mov	r1, r5
 808853e:	f001 ff7d 	bl	808a43c <__aeabi_dcmpgt>
 8088542:	b960      	cbnz	r0, 808855e <log+0x4e>
 8088544:	2200      	movs	r2, #0
 8088546:	2300      	movs	r3, #0
 8088548:	4620      	mov	r0, r4
 808854a:	4629      	mov	r1, r5
 808854c:	f001 ff4e 	bl	808a3ec <__aeabi_dcmpeq>
 8088550:	b140      	cbz	r0, 8088564 <log+0x54>
 8088552:	f7fc fe55 	bl	8085200 <__errno>
 8088556:	2322      	movs	r3, #34	; 0x22
 8088558:	2600      	movs	r6, #0
 808855a:	4f08      	ldr	r7, [pc, #32]	; (808857c <log+0x6c>)
 808855c:	6003      	str	r3, [r0, #0]
 808855e:	4630      	mov	r0, r6
 8088560:	4639      	mov	r1, r7
 8088562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8088564:	f7fc fe4c 	bl	8085200 <__errno>
 8088568:	2221      	movs	r2, #33	; 0x21
 808856a:	4603      	mov	r3, r0
 808856c:	4804      	ldr	r0, [pc, #16]	; (8088580 <log+0x70>)
 808856e:	601a      	str	r2, [r3, #0]
 8088570:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8088574:	f001 b9f4 	b.w	8089960 <nan>
 8088578:	200000c8 	.word	0x200000c8
 808857c:	fff00000 	.word	0xfff00000
 8088580:	0808bdf0 	.word	0x0808bdf0

08088584 <log10>:
 8088584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8088586:	4604      	mov	r4, r0
 8088588:	460d      	mov	r5, r1
 808858a:	f000 fb25 	bl	8088bd8 <__ieee754_log10>
 808858e:	4b17      	ldr	r3, [pc, #92]	; (80885ec <log10+0x68>)
 8088590:	4606      	mov	r6, r0
 8088592:	f993 3000 	ldrsb.w	r3, [r3]
 8088596:	460f      	mov	r7, r1
 8088598:	3301      	adds	r3, #1
 808859a:	d01a      	beq.n	80885d2 <log10+0x4e>
 808859c:	4622      	mov	r2, r4
 808859e:	462b      	mov	r3, r5
 80885a0:	4620      	mov	r0, r4
 80885a2:	4629      	mov	r1, r5
 80885a4:	f001 ff54 	bl	808a450 <__aeabi_dcmpun>
 80885a8:	b998      	cbnz	r0, 80885d2 <log10+0x4e>
 80885aa:	2200      	movs	r2, #0
 80885ac:	2300      	movs	r3, #0
 80885ae:	4620      	mov	r0, r4
 80885b0:	4629      	mov	r1, r5
 80885b2:	f001 ff2f 	bl	808a414 <__aeabi_dcmple>
 80885b6:	b160      	cbz	r0, 80885d2 <log10+0x4e>
 80885b8:	2200      	movs	r2, #0
 80885ba:	2300      	movs	r3, #0
 80885bc:	4620      	mov	r0, r4
 80885be:	4629      	mov	r1, r5
 80885c0:	f001 ff14 	bl	808a3ec <__aeabi_dcmpeq>
 80885c4:	b140      	cbz	r0, 80885d8 <log10+0x54>
 80885c6:	f7fc fe1b 	bl	8085200 <__errno>
 80885ca:	2322      	movs	r3, #34	; 0x22
 80885cc:	2600      	movs	r6, #0
 80885ce:	4f08      	ldr	r7, [pc, #32]	; (80885f0 <log10+0x6c>)
 80885d0:	6003      	str	r3, [r0, #0]
 80885d2:	4630      	mov	r0, r6
 80885d4:	4639      	mov	r1, r7
 80885d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80885d8:	f7fc fe12 	bl	8085200 <__errno>
 80885dc:	2221      	movs	r2, #33	; 0x21
 80885de:	4603      	mov	r3, r0
 80885e0:	4804      	ldr	r0, [pc, #16]	; (80885f4 <log10+0x70>)
 80885e2:	601a      	str	r2, [r3, #0]
 80885e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80885e8:	f001 b9ba 	b.w	8089960 <nan>
 80885ec:	200000c8 	.word	0x200000c8
 80885f0:	fff00000 	.word	0xfff00000
 80885f4:	0808bdf0 	.word	0x0808bdf0

080885f8 <pow>:
 80885f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80885fc:	461d      	mov	r5, r3
 80885fe:	4606      	mov	r6, r0
 8088600:	460f      	mov	r7, r1
 8088602:	4614      	mov	r4, r2
 8088604:	f000 fb74 	bl	8088cf0 <__ieee754_pow>
 8088608:	4b57      	ldr	r3, [pc, #348]	; (8088768 <pow+0x170>)
 808860a:	4680      	mov	r8, r0
 808860c:	f993 3000 	ldrsb.w	r3, [r3]
 8088610:	4689      	mov	r9, r1
 8088612:	3301      	adds	r3, #1
 8088614:	d02a      	beq.n	808866c <pow+0x74>
 8088616:	4622      	mov	r2, r4
 8088618:	462b      	mov	r3, r5
 808861a:	4620      	mov	r0, r4
 808861c:	4629      	mov	r1, r5
 808861e:	f001 ff17 	bl	808a450 <__aeabi_dcmpun>
 8088622:	bb18      	cbnz	r0, 808866c <pow+0x74>
 8088624:	4632      	mov	r2, r6
 8088626:	463b      	mov	r3, r7
 8088628:	4630      	mov	r0, r6
 808862a:	4639      	mov	r1, r7
 808862c:	f001 ff10 	bl	808a450 <__aeabi_dcmpun>
 8088630:	2800      	cmp	r0, #0
 8088632:	d141      	bne.n	80886b8 <pow+0xc0>
 8088634:	2200      	movs	r2, #0
 8088636:	2300      	movs	r3, #0
 8088638:	4630      	mov	r0, r6
 808863a:	4639      	mov	r1, r7
 808863c:	f001 fed6 	bl	808a3ec <__aeabi_dcmpeq>
 8088640:	b1c0      	cbz	r0, 8088674 <pow+0x7c>
 8088642:	2200      	movs	r2, #0
 8088644:	2300      	movs	r3, #0
 8088646:	4620      	mov	r0, r4
 8088648:	4629      	mov	r1, r5
 808864a:	f001 fecf 	bl	808a3ec <__aeabi_dcmpeq>
 808864e:	2800      	cmp	r0, #0
 8088650:	d13a      	bne.n	80886c8 <pow+0xd0>
 8088652:	4620      	mov	r0, r4
 8088654:	4629      	mov	r1, r5
 8088656:	f001 f97d 	bl	8089954 <finite>
 808865a:	b138      	cbz	r0, 808866c <pow+0x74>
 808865c:	4620      	mov	r0, r4
 808865e:	4629      	mov	r1, r5
 8088660:	2200      	movs	r2, #0
 8088662:	2300      	movs	r3, #0
 8088664:	f001 fecc 	bl	808a400 <__aeabi_dcmplt>
 8088668:	2800      	cmp	r0, #0
 808866a:	d159      	bne.n	8088720 <pow+0x128>
 808866c:	4640      	mov	r0, r8
 808866e:	4649      	mov	r1, r9
 8088670:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8088674:	4640      	mov	r0, r8
 8088676:	4649      	mov	r1, r9
 8088678:	f001 f96c 	bl	8089954 <finite>
 808867c:	b360      	cbz	r0, 80886d8 <pow+0xe0>
 808867e:	2200      	movs	r2, #0
 8088680:	2300      	movs	r3, #0
 8088682:	4640      	mov	r0, r8
 8088684:	4649      	mov	r1, r9
 8088686:	f001 feb1 	bl	808a3ec <__aeabi_dcmpeq>
 808868a:	2800      	cmp	r0, #0
 808868c:	d0ee      	beq.n	808866c <pow+0x74>
 808868e:	4630      	mov	r0, r6
 8088690:	4639      	mov	r1, r7
 8088692:	f001 f95f 	bl	8089954 <finite>
 8088696:	2800      	cmp	r0, #0
 8088698:	d0e8      	beq.n	808866c <pow+0x74>
 808869a:	4620      	mov	r0, r4
 808869c:	4629      	mov	r1, r5
 808869e:	f001 f959 	bl	8089954 <finite>
 80886a2:	2800      	cmp	r0, #0
 80886a4:	d0e2      	beq.n	808866c <pow+0x74>
 80886a6:	f7fc fdab 	bl	8085200 <__errno>
 80886aa:	2322      	movs	r3, #34	; 0x22
 80886ac:	f04f 0800 	mov.w	r8, #0
 80886b0:	f04f 0900 	mov.w	r9, #0
 80886b4:	6003      	str	r3, [r0, #0]
 80886b6:	e7d9      	b.n	808866c <pow+0x74>
 80886b8:	4620      	mov	r0, r4
 80886ba:	4629      	mov	r1, r5
 80886bc:	2200      	movs	r2, #0
 80886be:	2300      	movs	r3, #0
 80886c0:	f001 fe94 	bl	808a3ec <__aeabi_dcmpeq>
 80886c4:	2800      	cmp	r0, #0
 80886c6:	d0d1      	beq.n	808866c <pow+0x74>
 80886c8:	f04f 0800 	mov.w	r8, #0
 80886cc:	f8df 909c 	ldr.w	r9, [pc, #156]	; 808876c <pow+0x174>
 80886d0:	4640      	mov	r0, r8
 80886d2:	4649      	mov	r1, r9
 80886d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80886d8:	4630      	mov	r0, r6
 80886da:	4639      	mov	r1, r7
 80886dc:	f001 f93a 	bl	8089954 <finite>
 80886e0:	2800      	cmp	r0, #0
 80886e2:	d0cc      	beq.n	808867e <pow+0x86>
 80886e4:	4620      	mov	r0, r4
 80886e6:	4629      	mov	r1, r5
 80886e8:	f001 f934 	bl	8089954 <finite>
 80886ec:	2800      	cmp	r0, #0
 80886ee:	d0c6      	beq.n	808867e <pow+0x86>
 80886f0:	4642      	mov	r2, r8
 80886f2:	464b      	mov	r3, r9
 80886f4:	4640      	mov	r0, r8
 80886f6:	4649      	mov	r1, r9
 80886f8:	f001 feaa 	bl	808a450 <__aeabi_dcmpun>
 80886fc:	bb30      	cbnz	r0, 808874c <pow+0x154>
 80886fe:	f7fc fd7f 	bl	8085200 <__errno>
 8088702:	2222      	movs	r2, #34	; 0x22
 8088704:	4603      	mov	r3, r0
 8088706:	4639      	mov	r1, r7
 8088708:	601a      	str	r2, [r3, #0]
 808870a:	4630      	mov	r0, r6
 808870c:	2200      	movs	r2, #0
 808870e:	2300      	movs	r3, #0
 8088710:	f001 fe76 	bl	808a400 <__aeabi_dcmplt>
 8088714:	f04f 0800 	mov.w	r8, #0
 8088718:	b958      	cbnz	r0, 8088732 <pow+0x13a>
 808871a:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8088770 <pow+0x178>
 808871e:	e7a5      	b.n	808866c <pow+0x74>
 8088720:	f7fc fd6e 	bl	8085200 <__errno>
 8088724:	2321      	movs	r3, #33	; 0x21
 8088726:	f04f 0800 	mov.w	r8, #0
 808872a:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8088774 <pow+0x17c>
 808872e:	6003      	str	r3, [r0, #0]
 8088730:	e79c      	b.n	808866c <pow+0x74>
 8088732:	4620      	mov	r0, r4
 8088734:	4629      	mov	r1, r5
 8088736:	f001 f919 	bl	808996c <rint>
 808873a:	4622      	mov	r2, r4
 808873c:	462b      	mov	r3, r5
 808873e:	f001 fe55 	bl	808a3ec <__aeabi_dcmpeq>
 8088742:	2800      	cmp	r0, #0
 8088744:	d1e9      	bne.n	808871a <pow+0x122>
 8088746:	f8df 902c 	ldr.w	r9, [pc, #44]	; 8088774 <pow+0x17c>
 808874a:	e78f      	b.n	808866c <pow+0x74>
 808874c:	f7fc fd58 	bl	8085200 <__errno>
 8088750:	2200      	movs	r2, #0
 8088752:	2300      	movs	r3, #0
 8088754:	2121      	movs	r1, #33	; 0x21
 8088756:	6001      	str	r1, [r0, #0]
 8088758:	4610      	mov	r0, r2
 808875a:	4619      	mov	r1, r3
 808875c:	f001 fd08 	bl	808a170 <__aeabi_ddiv>
 8088760:	4680      	mov	r8, r0
 8088762:	4689      	mov	r9, r1
 8088764:	e782      	b.n	808866c <pow+0x74>
 8088766:	bf00      	nop
 8088768:	200000c8 	.word	0x200000c8
 808876c:	3ff00000 	.word	0x3ff00000
 8088770:	7ff00000 	.word	0x7ff00000
 8088774:	fff00000 	.word	0xfff00000

08088778 <sqrt>:
 8088778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808877a:	4604      	mov	r4, r0
 808877c:	460d      	mov	r5, r1
 808877e:	f001 f81f 	bl	80897c0 <__ieee754_sqrt>
 8088782:	4b13      	ldr	r3, [pc, #76]	; (80887d0 <sqrt+0x58>)
 8088784:	4606      	mov	r6, r0
 8088786:	f993 3000 	ldrsb.w	r3, [r3]
 808878a:	460f      	mov	r7, r1
 808878c:	3301      	adds	r3, #1
 808878e:	d00d      	beq.n	80887ac <sqrt+0x34>
 8088790:	4622      	mov	r2, r4
 8088792:	462b      	mov	r3, r5
 8088794:	4620      	mov	r0, r4
 8088796:	4629      	mov	r1, r5
 8088798:	f001 fe5a 	bl	808a450 <__aeabi_dcmpun>
 808879c:	b930      	cbnz	r0, 80887ac <sqrt+0x34>
 808879e:	4620      	mov	r0, r4
 80887a0:	4629      	mov	r1, r5
 80887a2:	2200      	movs	r2, #0
 80887a4:	2300      	movs	r3, #0
 80887a6:	f001 fe2b 	bl	808a400 <__aeabi_dcmplt>
 80887aa:	b910      	cbnz	r0, 80887b2 <sqrt+0x3a>
 80887ac:	4630      	mov	r0, r6
 80887ae:	4639      	mov	r1, r7
 80887b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80887b2:	f7fc fd25 	bl	8085200 <__errno>
 80887b6:	2200      	movs	r2, #0
 80887b8:	2300      	movs	r3, #0
 80887ba:	2121      	movs	r1, #33	; 0x21
 80887bc:	6001      	str	r1, [r0, #0]
 80887be:	4610      	mov	r0, r2
 80887c0:	4619      	mov	r1, r3
 80887c2:	f001 fcd5 	bl	808a170 <__aeabi_ddiv>
 80887c6:	4606      	mov	r6, r0
 80887c8:	460f      	mov	r7, r1
 80887ca:	4630      	mov	r0, r6
 80887cc:	4639      	mov	r1, r7
 80887ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80887d0:	200000c8 	.word	0x200000c8
 80887d4:	00000000 	.word	0x00000000

080887d8 <__ieee754_log>:
 80887d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80887dc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80887e0:	4602      	mov	r2, r0
 80887e2:	460b      	mov	r3, r1
 80887e4:	460f      	mov	r7, r1
 80887e6:	b087      	sub	sp, #28
 80887e8:	da59      	bge.n	808889e <__ieee754_log+0xc6>
 80887ea:	4604      	mov	r4, r0
 80887ec:	f021 4500 	bic.w	r5, r1, #2147483648	; 0x80000000
 80887f0:	432c      	orrs	r4, r5
 80887f2:	f000 80f8 	beq.w	80889e6 <__ieee754_log+0x20e>
 80887f6:	2900      	cmp	r1, #0
 80887f8:	f2c0 8132 	blt.w	8088a60 <__ieee754_log+0x288>
 80887fc:	2200      	movs	r2, #0
 80887fe:	4bd6      	ldr	r3, [pc, #856]	; (8088b58 <__ieee754_log+0x380>)
 8088800:	f001 fb8c 	bl	8089f1c <__aeabi_dmul>
 8088804:	460f      	mov	r7, r1
 8088806:	460b      	mov	r3, r1
 8088808:	49d4      	ldr	r1, [pc, #848]	; (8088b5c <__ieee754_log+0x384>)
 808880a:	f06f 0435 	mvn.w	r4, #53	; 0x35
 808880e:	428f      	cmp	r7, r1
 8088810:	4602      	mov	r2, r0
 8088812:	dc48      	bgt.n	80888a6 <__ieee754_log+0xce>
 8088814:	153e      	asrs	r6, r7, #20
 8088816:	f3c7 0713 	ubfx	r7, r7, #0, #20
 808881a:	f507 2115 	add.w	r1, r7, #610304	; 0x95000
 808881e:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 8088822:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 8088826:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
 808882a:	4426      	add	r6, r4
 808882c:	eb06 5611 	add.w	r6, r6, r1, lsr #20
 8088830:	f081 517f 	eor.w	r1, r1, #1069547520	; 0x3fc00000
 8088834:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 8088838:	ea41 0307 	orr.w	r3, r1, r7
 808883c:	4610      	mov	r0, r2
 808883e:	4619      	mov	r1, r3
 8088840:	2200      	movs	r2, #0
 8088842:	4bc7      	ldr	r3, [pc, #796]	; (8088b60 <__ieee754_log+0x388>)
 8088844:	f001 f9b2 	bl	8089bac <__aeabi_dsub>
 8088848:	1cbb      	adds	r3, r7, #2
 808884a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 808884e:	2b02      	cmp	r3, #2
 8088850:	4682      	mov	sl, r0
 8088852:	468b      	mov	fp, r1
 8088854:	dc2e      	bgt.n	80888b4 <__ieee754_log+0xdc>
 8088856:	2200      	movs	r2, #0
 8088858:	2300      	movs	r3, #0
 808885a:	f001 fdc7 	bl	808a3ec <__aeabi_dcmpeq>
 808885e:	2800      	cmp	r0, #0
 8088860:	f000 80ca 	beq.w	80889f8 <__ieee754_log+0x220>
 8088864:	2e00      	cmp	r6, #0
 8088866:	f000 814b 	beq.w	8088b00 <__ieee754_log+0x328>
 808886a:	4630      	mov	r0, r6
 808886c:	f001 faec 	bl	8089e48 <__aeabi_i2d>
 8088870:	a3a5      	add	r3, pc, #660	; (adr r3, 8088b08 <__ieee754_log+0x330>)
 8088872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8088876:	4606      	mov	r6, r0
 8088878:	460f      	mov	r7, r1
 808887a:	f001 fb4f 	bl	8089f1c <__aeabi_dmul>
 808887e:	a3a4      	add	r3, pc, #656	; (adr r3, 8088b10 <__ieee754_log+0x338>)
 8088880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8088884:	4604      	mov	r4, r0
 8088886:	460d      	mov	r5, r1
 8088888:	4630      	mov	r0, r6
 808888a:	4639      	mov	r1, r7
 808888c:	f001 fb46 	bl	8089f1c <__aeabi_dmul>
 8088890:	4602      	mov	r2, r0
 8088892:	460b      	mov	r3, r1
 8088894:	4620      	mov	r0, r4
 8088896:	4629      	mov	r1, r5
 8088898:	f001 f98a 	bl	8089bb0 <__adddf3>
 808889c:	e007      	b.n	80888ae <__ieee754_log+0xd6>
 808889e:	49af      	ldr	r1, [pc, #700]	; (8088b5c <__ieee754_log+0x384>)
 80888a0:	2400      	movs	r4, #0
 80888a2:	428f      	cmp	r7, r1
 80888a4:	ddb6      	ble.n	8088814 <__ieee754_log+0x3c>
 80888a6:	4610      	mov	r0, r2
 80888a8:	4619      	mov	r1, r3
 80888aa:	f001 f981 	bl	8089bb0 <__adddf3>
 80888ae:	b007      	add	sp, #28
 80888b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80888b4:	f5a7 23c2 	sub.w	r3, r7, #397312	; 0x61000
 80888b8:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80888bc:	2200      	movs	r2, #0
 80888be:	9301      	str	r3, [sp, #4]
 80888c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80888c4:	f001 f974 	bl	8089bb0 <__adddf3>
 80888c8:	460b      	mov	r3, r1
 80888ca:	4602      	mov	r2, r0
 80888cc:	4659      	mov	r1, fp
 80888ce:	4650      	mov	r0, sl
 80888d0:	f001 fc4e 	bl	808a170 <__aeabi_ddiv>
 80888d4:	4602      	mov	r2, r0
 80888d6:	4630      	mov	r0, r6
 80888d8:	4614      	mov	r4, r2
 80888da:	460d      	mov	r5, r1
 80888dc:	f001 fab4 	bl	8089e48 <__aeabi_i2d>
 80888e0:	4622      	mov	r2, r4
 80888e2:	462b      	mov	r3, r5
 80888e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80888e8:	4620      	mov	r0, r4
 80888ea:	4629      	mov	r1, r5
 80888ec:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80888f0:	f001 fb14 	bl	8089f1c <__aeabi_dmul>
 80888f4:	4602      	mov	r2, r0
 80888f6:	460b      	mov	r3, r1
 80888f8:	4680      	mov	r8, r0
 80888fa:	4689      	mov	r9, r1
 80888fc:	f001 fb0e 	bl	8089f1c <__aeabi_dmul>
 8088900:	a385      	add	r3, pc, #532	; (adr r3, 8088b18 <__ieee754_log+0x340>)
 8088902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8088906:	4604      	mov	r4, r0
 8088908:	460d      	mov	r5, r1
 808890a:	f001 fb07 	bl	8089f1c <__aeabi_dmul>
 808890e:	a384      	add	r3, pc, #528	; (adr r3, 8088b20 <__ieee754_log+0x348>)
 8088910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8088914:	f001 f94c 	bl	8089bb0 <__adddf3>
 8088918:	4622      	mov	r2, r4
 808891a:	462b      	mov	r3, r5
 808891c:	f001 fafe 	bl	8089f1c <__aeabi_dmul>
 8088920:	a381      	add	r3, pc, #516	; (adr r3, 8088b28 <__ieee754_log+0x350>)
 8088922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8088926:	f001 f943 	bl	8089bb0 <__adddf3>
 808892a:	4622      	mov	r2, r4
 808892c:	462b      	mov	r3, r5
 808892e:	f001 faf5 	bl	8089f1c <__aeabi_dmul>
 8088932:	a37f      	add	r3, pc, #508	; (adr r3, 8088b30 <__ieee754_log+0x358>)
 8088934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8088938:	f001 f93a 	bl	8089bb0 <__adddf3>
 808893c:	4642      	mov	r2, r8
 808893e:	464b      	mov	r3, r9
 8088940:	f001 faec 	bl	8089f1c <__aeabi_dmul>
 8088944:	a37c      	add	r3, pc, #496	; (adr r3, 8088b38 <__ieee754_log+0x360>)
 8088946:	e9d3 2300 	ldrd	r2, r3, [r3]
 808894a:	4680      	mov	r8, r0
 808894c:	4689      	mov	r9, r1
 808894e:	4620      	mov	r0, r4
 8088950:	4629      	mov	r1, r5
 8088952:	f001 fae3 	bl	8089f1c <__aeabi_dmul>
 8088956:	a37a      	add	r3, pc, #488	; (adr r3, 8088b40 <__ieee754_log+0x368>)
 8088958:	e9d3 2300 	ldrd	r2, r3, [r3]
 808895c:	f001 f928 	bl	8089bb0 <__adddf3>
 8088960:	4622      	mov	r2, r4
 8088962:	462b      	mov	r3, r5
 8088964:	f001 fada 	bl	8089f1c <__aeabi_dmul>
 8088968:	a377      	add	r3, pc, #476	; (adr r3, 8088b48 <__ieee754_log+0x370>)
 808896a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808896e:	f001 f91f 	bl	8089bb0 <__adddf3>
 8088972:	4622      	mov	r2, r4
 8088974:	462b      	mov	r3, r5
 8088976:	f001 fad1 	bl	8089f1c <__aeabi_dmul>
 808897a:	460b      	mov	r3, r1
 808897c:	4602      	mov	r2, r0
 808897e:	4649      	mov	r1, r9
 8088980:	4640      	mov	r0, r8
 8088982:	f001 f915 	bl	8089bb0 <__adddf3>
 8088986:	f5c7 27d7 	rsb	r7, r7, #440320	; 0x6b800
 808898a:	9b01      	ldr	r3, [sp, #4]
 808898c:	3751      	adds	r7, #81	; 0x51
 808898e:	431f      	orrs	r7, r3
 8088990:	2f00      	cmp	r7, #0
 8088992:	4680      	mov	r8, r0
 8088994:	4689      	mov	r9, r1
 8088996:	dd55      	ble.n	8088a44 <__ieee754_log+0x26c>
 8088998:	2200      	movs	r2, #0
 808899a:	4b72      	ldr	r3, [pc, #456]	; (8088b64 <__ieee754_log+0x38c>)
 808899c:	4650      	mov	r0, sl
 808899e:	4659      	mov	r1, fp
 80889a0:	f001 fabc 	bl	8089f1c <__aeabi_dmul>
 80889a4:	4652      	mov	r2, sl
 80889a6:	465b      	mov	r3, fp
 80889a8:	f001 fab8 	bl	8089f1c <__aeabi_dmul>
 80889ac:	4604      	mov	r4, r0
 80889ae:	460d      	mov	r5, r1
 80889b0:	2e00      	cmp	r6, #0
 80889b2:	d15c      	bne.n	8088a6e <__ieee754_log+0x296>
 80889b4:	4622      	mov	r2, r4
 80889b6:	462b      	mov	r3, r5
 80889b8:	4640      	mov	r0, r8
 80889ba:	4649      	mov	r1, r9
 80889bc:	f001 f8f8 	bl	8089bb0 <__adddf3>
 80889c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80889c4:	f001 faaa 	bl	8089f1c <__aeabi_dmul>
 80889c8:	4602      	mov	r2, r0
 80889ca:	460b      	mov	r3, r1
 80889cc:	4620      	mov	r0, r4
 80889ce:	4629      	mov	r1, r5
 80889d0:	f001 f8ec 	bl	8089bac <__aeabi_dsub>
 80889d4:	4602      	mov	r2, r0
 80889d6:	460b      	mov	r3, r1
 80889d8:	4650      	mov	r0, sl
 80889da:	4659      	mov	r1, fp
 80889dc:	f001 f8e6 	bl	8089bac <__aeabi_dsub>
 80889e0:	b007      	add	sp, #28
 80889e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80889e6:	2200      	movs	r2, #0
 80889e8:	2300      	movs	r3, #0
 80889ea:	2000      	movs	r0, #0
 80889ec:	495e      	ldr	r1, [pc, #376]	; (8088b68 <__ieee754_log+0x390>)
 80889ee:	f001 fbbf 	bl	808a170 <__aeabi_ddiv>
 80889f2:	b007      	add	sp, #28
 80889f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80889f8:	a355      	add	r3, pc, #340	; (adr r3, 8088b50 <__ieee754_log+0x378>)
 80889fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80889fe:	4650      	mov	r0, sl
 8088a00:	4659      	mov	r1, fp
 8088a02:	f001 fa8b 	bl	8089f1c <__aeabi_dmul>
 8088a06:	4602      	mov	r2, r0
 8088a08:	460b      	mov	r3, r1
 8088a0a:	2000      	movs	r0, #0
 8088a0c:	4955      	ldr	r1, [pc, #340]	; (8088b64 <__ieee754_log+0x38c>)
 8088a0e:	f001 f8cd 	bl	8089bac <__aeabi_dsub>
 8088a12:	4652      	mov	r2, sl
 8088a14:	4604      	mov	r4, r0
 8088a16:	460d      	mov	r5, r1
 8088a18:	465b      	mov	r3, fp
 8088a1a:	4650      	mov	r0, sl
 8088a1c:	4659      	mov	r1, fp
 8088a1e:	f001 fa7d 	bl	8089f1c <__aeabi_dmul>
 8088a22:	4602      	mov	r2, r0
 8088a24:	460b      	mov	r3, r1
 8088a26:	4620      	mov	r0, r4
 8088a28:	4629      	mov	r1, r5
 8088a2a:	f001 fa77 	bl	8089f1c <__aeabi_dmul>
 8088a2e:	4604      	mov	r4, r0
 8088a30:	460d      	mov	r5, r1
 8088a32:	2e00      	cmp	r6, #0
 8088a34:	d150      	bne.n	8088ad8 <__ieee754_log+0x300>
 8088a36:	4602      	mov	r2, r0
 8088a38:	460b      	mov	r3, r1
 8088a3a:	4650      	mov	r0, sl
 8088a3c:	4659      	mov	r1, fp
 8088a3e:	f001 f8b5 	bl	8089bac <__aeabi_dsub>
 8088a42:	e734      	b.n	80888ae <__ieee754_log+0xd6>
 8088a44:	2e00      	cmp	r6, #0
 8088a46:	f040 8091 	bne.w	8088b6c <__ieee754_log+0x394>
 8088a4a:	4602      	mov	r2, r0
 8088a4c:	460b      	mov	r3, r1
 8088a4e:	4650      	mov	r0, sl
 8088a50:	4659      	mov	r1, fp
 8088a52:	f001 f8ab 	bl	8089bac <__aeabi_dsub>
 8088a56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8088a5a:	f001 fa5f 	bl	8089f1c <__aeabi_dmul>
 8088a5e:	e7b9      	b.n	80889d4 <__ieee754_log+0x1fc>
 8088a60:	f001 f8a4 	bl	8089bac <__aeabi_dsub>
 8088a64:	2200      	movs	r2, #0
 8088a66:	2300      	movs	r3, #0
 8088a68:	f001 fb82 	bl	808a170 <__aeabi_ddiv>
 8088a6c:	e71f      	b.n	80888ae <__ieee754_log+0xd6>
 8088a6e:	a326      	add	r3, pc, #152	; (adr r3, 8088b08 <__ieee754_log+0x330>)
 8088a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8088a74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8088a78:	f001 fa50 	bl	8089f1c <__aeabi_dmul>
 8088a7c:	4622      	mov	r2, r4
 8088a7e:	462b      	mov	r3, r5
 8088a80:	4606      	mov	r6, r0
 8088a82:	460f      	mov	r7, r1
 8088a84:	4640      	mov	r0, r8
 8088a86:	4649      	mov	r1, r9
 8088a88:	f001 f892 	bl	8089bb0 <__adddf3>
 8088a8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8088a90:	f001 fa44 	bl	8089f1c <__aeabi_dmul>
 8088a94:	a31e      	add	r3, pc, #120	; (adr r3, 8088b10 <__ieee754_log+0x338>)
 8088a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8088a9a:	4680      	mov	r8, r0
 8088a9c:	4689      	mov	r9, r1
 8088a9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8088aa2:	f001 fa3b 	bl	8089f1c <__aeabi_dmul>
 8088aa6:	4602      	mov	r2, r0
 8088aa8:	460b      	mov	r3, r1
 8088aaa:	4640      	mov	r0, r8
 8088aac:	4649      	mov	r1, r9
 8088aae:	f001 f87f 	bl	8089bb0 <__adddf3>
 8088ab2:	4602      	mov	r2, r0
 8088ab4:	460b      	mov	r3, r1
 8088ab6:	4620      	mov	r0, r4
 8088ab8:	4629      	mov	r1, r5
 8088aba:	f001 f877 	bl	8089bac <__aeabi_dsub>
 8088abe:	4652      	mov	r2, sl
 8088ac0:	465b      	mov	r3, fp
 8088ac2:	f001 f873 	bl	8089bac <__aeabi_dsub>
 8088ac6:	4602      	mov	r2, r0
 8088ac8:	460b      	mov	r3, r1
 8088aca:	4630      	mov	r0, r6
 8088acc:	4639      	mov	r1, r7
 8088ace:	f001 f86d 	bl	8089bac <__aeabi_dsub>
 8088ad2:	b007      	add	sp, #28
 8088ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8088ad8:	4630      	mov	r0, r6
 8088ada:	f001 f9b5 	bl	8089e48 <__aeabi_i2d>
 8088ade:	a30a      	add	r3, pc, #40	; (adr r3, 8088b08 <__ieee754_log+0x330>)
 8088ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8088ae4:	4680      	mov	r8, r0
 8088ae6:	4689      	mov	r9, r1
 8088ae8:	f001 fa18 	bl	8089f1c <__aeabi_dmul>
 8088aec:	a308      	add	r3, pc, #32	; (adr r3, 8088b10 <__ieee754_log+0x338>)
 8088aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8088af2:	4606      	mov	r6, r0
 8088af4:	460f      	mov	r7, r1
 8088af6:	4640      	mov	r0, r8
 8088af8:	4649      	mov	r1, r9
 8088afa:	f001 fa0f 	bl	8089f1c <__aeabi_dmul>
 8088afe:	e7d8      	b.n	8088ab2 <__ieee754_log+0x2da>
 8088b00:	2000      	movs	r0, #0
 8088b02:	2100      	movs	r1, #0
 8088b04:	e6d3      	b.n	80888ae <__ieee754_log+0xd6>
 8088b06:	bf00      	nop
 8088b08:	fee00000 	.word	0xfee00000
 8088b0c:	3fe62e42 	.word	0x3fe62e42
 8088b10:	35793c76 	.word	0x35793c76
 8088b14:	3dea39ef 	.word	0x3dea39ef
 8088b18:	df3e5244 	.word	0xdf3e5244
 8088b1c:	3fc2f112 	.word	0x3fc2f112
 8088b20:	96cb03de 	.word	0x96cb03de
 8088b24:	3fc74664 	.word	0x3fc74664
 8088b28:	94229359 	.word	0x94229359
 8088b2c:	3fd24924 	.word	0x3fd24924
 8088b30:	55555593 	.word	0x55555593
 8088b34:	3fe55555 	.word	0x3fe55555
 8088b38:	d078c69f 	.word	0xd078c69f
 8088b3c:	3fc39a09 	.word	0x3fc39a09
 8088b40:	1d8e78af 	.word	0x1d8e78af
 8088b44:	3fcc71c5 	.word	0x3fcc71c5
 8088b48:	9997fa04 	.word	0x9997fa04
 8088b4c:	3fd99999 	.word	0x3fd99999
 8088b50:	55555555 	.word	0x55555555
 8088b54:	3fd55555 	.word	0x3fd55555
 8088b58:	43500000 	.word	0x43500000
 8088b5c:	7fefffff 	.word	0x7fefffff
 8088b60:	3ff00000 	.word	0x3ff00000
 8088b64:	3fe00000 	.word	0x3fe00000
 8088b68:	c3500000 	.word	0xc3500000
 8088b6c:	a316      	add	r3, pc, #88	; (adr r3, 8088bc8 <__ieee754_log+0x3f0>)
 8088b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8088b72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8088b76:	f001 f9d1 	bl	8089f1c <__aeabi_dmul>
 8088b7a:	4642      	mov	r2, r8
 8088b7c:	464b      	mov	r3, r9
 8088b7e:	4604      	mov	r4, r0
 8088b80:	460d      	mov	r5, r1
 8088b82:	4650      	mov	r0, sl
 8088b84:	4659      	mov	r1, fp
 8088b86:	f001 f811 	bl	8089bac <__aeabi_dsub>
 8088b8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8088b8e:	f001 f9c5 	bl	8089f1c <__aeabi_dmul>
 8088b92:	a30f      	add	r3, pc, #60	; (adr r3, 8088bd0 <__ieee754_log+0x3f8>)
 8088b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8088b98:	4606      	mov	r6, r0
 8088b9a:	460f      	mov	r7, r1
 8088b9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8088ba0:	f001 f9bc 	bl	8089f1c <__aeabi_dmul>
 8088ba4:	4602      	mov	r2, r0
 8088ba6:	460b      	mov	r3, r1
 8088ba8:	4630      	mov	r0, r6
 8088baa:	4639      	mov	r1, r7
 8088bac:	f000 fffe 	bl	8089bac <__aeabi_dsub>
 8088bb0:	4652      	mov	r2, sl
 8088bb2:	465b      	mov	r3, fp
 8088bb4:	f000 fffa 	bl	8089bac <__aeabi_dsub>
 8088bb8:	4602      	mov	r2, r0
 8088bba:	460b      	mov	r3, r1
 8088bbc:	4620      	mov	r0, r4
 8088bbe:	4629      	mov	r1, r5
 8088bc0:	f000 fff4 	bl	8089bac <__aeabi_dsub>
 8088bc4:	e673      	b.n	80888ae <__ieee754_log+0xd6>
 8088bc6:	bf00      	nop
 8088bc8:	fee00000 	.word	0xfee00000
 8088bcc:	3fe62e42 	.word	0x3fe62e42
 8088bd0:	35793c76 	.word	0x35793c76
 8088bd4:	3dea39ef 	.word	0x3dea39ef

08088bd8 <__ieee754_log10>:
 8088bd8:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8088bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8088be0:	4604      	mov	r4, r0
 8088be2:	460d      	mov	r5, r1
 8088be4:	460b      	mov	r3, r1
 8088be6:	da1a      	bge.n	8088c1e <__ieee754_log10+0x46>
 8088be8:	4602      	mov	r2, r0
 8088bea:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8088bee:	4332      	orrs	r2, r6
 8088bf0:	d058      	beq.n	8088ca4 <__ieee754_log10+0xcc>
 8088bf2:	2900      	cmp	r1, #0
 8088bf4:	db5e      	blt.n	8088cb4 <__ieee754_log10+0xdc>
 8088bf6:	2200      	movs	r2, #0
 8088bf8:	4b39      	ldr	r3, [pc, #228]	; (8088ce0 <__ieee754_log10+0x108>)
 8088bfa:	f001 f98f 	bl	8089f1c <__aeabi_dmul>
 8088bfe:	460d      	mov	r5, r1
 8088c00:	462b      	mov	r3, r5
 8088c02:	4a38      	ldr	r2, [pc, #224]	; (8088ce4 <__ieee754_log10+0x10c>)
 8088c04:	4604      	mov	r4, r0
 8088c06:	4293      	cmp	r3, r2
 8088c08:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8088c0c:	dd0b      	ble.n	8088c26 <__ieee754_log10+0x4e>
 8088c0e:	4622      	mov	r2, r4
 8088c10:	462b      	mov	r3, r5
 8088c12:	4620      	mov	r0, r4
 8088c14:	4629      	mov	r1, r5
 8088c16:	f000 ffcb 	bl	8089bb0 <__adddf3>
 8088c1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8088c1e:	4a31      	ldr	r2, [pc, #196]	; (8088ce4 <__ieee754_log10+0x10c>)
 8088c20:	2100      	movs	r1, #0
 8088c22:	4293      	cmp	r3, r2
 8088c24:	dcf3      	bgt.n	8088c0e <__ieee754_log10+0x36>
 8088c26:	1518      	asrs	r0, r3, #20
 8088c28:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8088c2c:	4408      	add	r0, r1
 8088c2e:	0fc7      	lsrs	r7, r0, #31
 8088c30:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8088c34:	f3c3 0613 	ubfx	r6, r3, #0, #20
 8088c38:	f001 f906 	bl	8089e48 <__aeabi_i2d>
 8088c3c:	f5c7 737f 	rsb	r3, r7, #1020	; 0x3fc
 8088c40:	3303      	adds	r3, #3
 8088c42:	ea46 5503 	orr.w	r5, r6, r3, lsl #20
 8088c46:	460f      	mov	r7, r1
 8088c48:	4606      	mov	r6, r0
 8088c4a:	4629      	mov	r1, r5
 8088c4c:	4620      	mov	r0, r4
 8088c4e:	f7ff fdc3 	bl	80887d8 <__ieee754_log>
 8088c52:	a31d      	add	r3, pc, #116	; (adr r3, 8088cc8 <__ieee754_log10+0xf0>)
 8088c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8088c58:	4680      	mov	r8, r0
 8088c5a:	4689      	mov	r9, r1
 8088c5c:	4630      	mov	r0, r6
 8088c5e:	4639      	mov	r1, r7
 8088c60:	f001 f95c 	bl	8089f1c <__aeabi_dmul>
 8088c64:	a31a      	add	r3, pc, #104	; (adr r3, 8088cd0 <__ieee754_log10+0xf8>)
 8088c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8088c6a:	4604      	mov	r4, r0
 8088c6c:	460d      	mov	r5, r1
 8088c6e:	4640      	mov	r0, r8
 8088c70:	4649      	mov	r1, r9
 8088c72:	f001 f953 	bl	8089f1c <__aeabi_dmul>
 8088c76:	4602      	mov	r2, r0
 8088c78:	460b      	mov	r3, r1
 8088c7a:	4620      	mov	r0, r4
 8088c7c:	4629      	mov	r1, r5
 8088c7e:	f000 ff97 	bl	8089bb0 <__adddf3>
 8088c82:	a315      	add	r3, pc, #84	; (adr r3, 8088cd8 <__ieee754_log10+0x100>)
 8088c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8088c88:	4604      	mov	r4, r0
 8088c8a:	460d      	mov	r5, r1
 8088c8c:	4630      	mov	r0, r6
 8088c8e:	4639      	mov	r1, r7
 8088c90:	f001 f944 	bl	8089f1c <__aeabi_dmul>
 8088c94:	4602      	mov	r2, r0
 8088c96:	460b      	mov	r3, r1
 8088c98:	4620      	mov	r0, r4
 8088c9a:	4629      	mov	r1, r5
 8088c9c:	f000 ff88 	bl	8089bb0 <__adddf3>
 8088ca0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8088ca4:	2200      	movs	r2, #0
 8088ca6:	2300      	movs	r3, #0
 8088ca8:	2000      	movs	r0, #0
 8088caa:	490f      	ldr	r1, [pc, #60]	; (8088ce8 <__ieee754_log10+0x110>)
 8088cac:	f001 fa60 	bl	808a170 <__aeabi_ddiv>
 8088cb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8088cb4:	4602      	mov	r2, r0
 8088cb6:	f000 ff79 	bl	8089bac <__aeabi_dsub>
 8088cba:	2200      	movs	r2, #0
 8088cbc:	2300      	movs	r3, #0
 8088cbe:	f001 fa57 	bl	808a170 <__aeabi_ddiv>
 8088cc2:	e7aa      	b.n	8088c1a <__ieee754_log10+0x42>
 8088cc4:	f3af 8000 	nop.w
 8088cc8:	11f12b36 	.word	0x11f12b36
 8088ccc:	3d59fef3 	.word	0x3d59fef3
 8088cd0:	1526e50e 	.word	0x1526e50e
 8088cd4:	3fdbcb7b 	.word	0x3fdbcb7b
 8088cd8:	509f6000 	.word	0x509f6000
 8088cdc:	3fd34413 	.word	0x3fd34413
 8088ce0:	43500000 	.word	0x43500000
 8088ce4:	7fefffff 	.word	0x7fefffff
 8088ce8:	c3500000 	.word	0xc3500000
 8088cec:	00000000 	.word	0x00000000

08088cf0 <__ieee754_pow>:
 8088cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8088cf4:	4699      	mov	r9, r3
 8088cf6:	4690      	mov	r8, r2
 8088cf8:	f029 4500 	bic.w	r5, r9, #2147483648	; 0x80000000
 8088cfc:	461e      	mov	r6, r3
 8088cfe:	4613      	mov	r3, r2
 8088d00:	ea55 0208 	orrs.w	r2, r5, r8
 8088d04:	b093      	sub	sp, #76	; 0x4c
 8088d06:	d035      	beq.n	8088d74 <__ieee754_pow+0x84>
 8088d08:	4a6b      	ldr	r2, [pc, #428]	; (8088eb8 <__ieee754_pow+0x1c8>)
 8088d0a:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8088d0e:	4294      	cmp	r4, r2
 8088d10:	4683      	mov	fp, r0
 8088d12:	468a      	mov	sl, r1
 8088d14:	460f      	mov	r7, r1
 8088d16:	9000      	str	r0, [sp, #0]
 8088d18:	dc25      	bgt.n	8088d66 <__ieee754_pow+0x76>
 8088d1a:	d034      	beq.n	8088d86 <__ieee754_pow+0x96>
 8088d1c:	4295      	cmp	r5, r2
 8088d1e:	dc22      	bgt.n	8088d66 <__ieee754_pow+0x76>
 8088d20:	4a65      	ldr	r2, [pc, #404]	; (8088eb8 <__ieee754_pow+0x1c8>)
 8088d22:	4295      	cmp	r5, r2
 8088d24:	d01d      	beq.n	8088d62 <__ieee754_pow+0x72>
 8088d26:	2f00      	cmp	r7, #0
 8088d28:	db36      	blt.n	8088d98 <__ieee754_pow+0xa8>
 8088d2a:	2200      	movs	r2, #0
 8088d2c:	9202      	str	r2, [sp, #8]
 8088d2e:	2b00      	cmp	r3, #0
 8088d30:	d14c      	bne.n	8088dcc <__ieee754_pow+0xdc>
 8088d32:	4b61      	ldr	r3, [pc, #388]	; (8088eb8 <__ieee754_pow+0x1c8>)
 8088d34:	429d      	cmp	r5, r3
 8088d36:	f000 8097 	beq.w	8088e68 <__ieee754_pow+0x178>
 8088d3a:	4b60      	ldr	r3, [pc, #384]	; (8088ebc <__ieee754_pow+0x1cc>)
 8088d3c:	429d      	cmp	r5, r3
 8088d3e:	f000 80a5 	beq.w	8088e8c <__ieee754_pow+0x19c>
 8088d42:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8088d46:	f000 84a3 	beq.w	8089690 <__ieee754_pow+0x9a0>
 8088d4a:	4b5d      	ldr	r3, [pc, #372]	; (8088ec0 <__ieee754_pow+0x1d0>)
 8088d4c:	429e      	cmp	r6, r3
 8088d4e:	d13d      	bne.n	8088dcc <__ieee754_pow+0xdc>
 8088d50:	2f00      	cmp	r7, #0
 8088d52:	db3b      	blt.n	8088dcc <__ieee754_pow+0xdc>
 8088d54:	4658      	mov	r0, fp
 8088d56:	4651      	mov	r1, sl
 8088d58:	b013      	add	sp, #76	; 0x4c
 8088d5a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8088d5e:	f000 bd2f 	b.w	80897c0 <__ieee754_sqrt>
 8088d62:	2b00      	cmp	r3, #0
 8088d64:	d0df      	beq.n	8088d26 <__ieee754_pow+0x36>
 8088d66:	9b00      	ldr	r3, [sp, #0]
 8088d68:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8088d6c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8088d70:	4323      	orrs	r3, r4
 8088d72:	d10b      	bne.n	8088d8c <__ieee754_pow+0x9c>
 8088d74:	2300      	movs	r3, #0
 8088d76:	4c51      	ldr	r4, [pc, #324]	; (8088ebc <__ieee754_pow+0x1cc>)
 8088d78:	e9cd 3400 	strd	r3, r4, [sp]
 8088d7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8088d80:	b013      	add	sp, #76	; 0x4c
 8088d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8088d86:	b908      	cbnz	r0, 8088d8c <__ieee754_pow+0x9c>
 8088d88:	42a5      	cmp	r5, r4
 8088d8a:	ddc9      	ble.n	8088d20 <__ieee754_pow+0x30>
 8088d8c:	484d      	ldr	r0, [pc, #308]	; (8088ec4 <__ieee754_pow+0x1d4>)
 8088d8e:	b013      	add	sp, #76	; 0x4c
 8088d90:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8088d94:	f000 bde4 	b.w	8089960 <nan>
 8088d98:	4a4b      	ldr	r2, [pc, #300]	; (8088ec8 <__ieee754_pow+0x1d8>)
 8088d9a:	4295      	cmp	r5, r2
 8088d9c:	dc7e      	bgt.n	8088e9c <__ieee754_pow+0x1ac>
 8088d9e:	f1a2 7254 	sub.w	r2, r2, #55574528	; 0x3500000
 8088da2:	4295      	cmp	r5, r2
 8088da4:	dd0e      	ble.n	8088dc4 <__ieee754_pow+0xd4>
 8088da6:	152a      	asrs	r2, r5, #20
 8088da8:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8088dac:	2a14      	cmp	r2, #20
 8088dae:	f340 8479 	ble.w	80896a4 <__ieee754_pow+0x9b4>
 8088db2:	f1c2 0234 	rsb	r2, r2, #52	; 0x34
 8088db6:	fa23 f102 	lsr.w	r1, r3, r2
 8088dba:	fa01 f202 	lsl.w	r2, r1, r2
 8088dbe:	429a      	cmp	r2, r3
 8088dc0:	f000 84c5 	beq.w	808974e <__ieee754_pow+0xa5e>
 8088dc4:	2200      	movs	r2, #0
 8088dc6:	9202      	str	r2, [sp, #8]
 8088dc8:	2b00      	cmp	r3, #0
 8088dca:	d0b6      	beq.n	8088d3a <__ieee754_pow+0x4a>
 8088dcc:	4658      	mov	r0, fp
 8088dce:	4651      	mov	r1, sl
 8088dd0:	f000 fdbc 	bl	808994c <fabs>
 8088dd4:	465b      	mov	r3, fp
 8088dd6:	e9cd 0100 	strd	r0, r1, [sp]
 8088dda:	bb33      	cbnz	r3, 8088e2a <__ieee754_pow+0x13a>
 8088ddc:	b124      	cbz	r4, 8088de8 <__ieee754_pow+0xf8>
 8088dde:	4b37      	ldr	r3, [pc, #220]	; (8088ebc <__ieee754_pow+0x1cc>)
 8088de0:	f027 4240 	bic.w	r2, r7, #3221225472	; 0xc0000000
 8088de4:	429a      	cmp	r2, r3
 8088de6:	d120      	bne.n	8088e2a <__ieee754_pow+0x13a>
 8088de8:	2e00      	cmp	r6, #0
 8088dea:	da07      	bge.n	8088dfc <__ieee754_pow+0x10c>
 8088dec:	e9dd 2300 	ldrd	r2, r3, [sp]
 8088df0:	2000      	movs	r0, #0
 8088df2:	4932      	ldr	r1, [pc, #200]	; (8088ebc <__ieee754_pow+0x1cc>)
 8088df4:	f001 f9bc 	bl	808a170 <__aeabi_ddiv>
 8088df8:	e9cd 0100 	strd	r0, r1, [sp]
 8088dfc:	2f00      	cmp	r7, #0
 8088dfe:	dabd      	bge.n	8088d7c <__ieee754_pow+0x8c>
 8088e00:	9b02      	ldr	r3, [sp, #8]
 8088e02:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8088e06:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8088e0a:	4323      	orrs	r3, r4
 8088e0c:	f040 846f 	bne.w	80896ee <__ieee754_pow+0x9fe>
 8088e10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8088e14:	4610      	mov	r0, r2
 8088e16:	4619      	mov	r1, r3
 8088e18:	f000 fec8 	bl	8089bac <__aeabi_dsub>
 8088e1c:	4602      	mov	r2, r0
 8088e1e:	460b      	mov	r3, r1
 8088e20:	f001 f9a6 	bl	808a170 <__aeabi_ddiv>
 8088e24:	e9cd 0100 	strd	r0, r1, [sp]
 8088e28:	e7a8      	b.n	8088d7c <__ieee754_pow+0x8c>
 8088e2a:	9a02      	ldr	r2, [sp, #8]
 8088e2c:	0ffb      	lsrs	r3, r7, #31
 8088e2e:	3b01      	subs	r3, #1
 8088e30:	930a      	str	r3, [sp, #40]	; 0x28
 8088e32:	4313      	orrs	r3, r2
 8088e34:	d035      	beq.n	8088ea2 <__ieee754_pow+0x1b2>
 8088e36:	4b25      	ldr	r3, [pc, #148]	; (8088ecc <__ieee754_pow+0x1dc>)
 8088e38:	429d      	cmp	r5, r3
 8088e3a:	dd4b      	ble.n	8088ed4 <__ieee754_pow+0x1e4>
 8088e3c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8088e40:	429d      	cmp	r5, r3
 8088e42:	4b23      	ldr	r3, [pc, #140]	; (8088ed0 <__ieee754_pow+0x1e0>)
 8088e44:	f340 83bc 	ble.w	80895c0 <__ieee754_pow+0x8d0>
 8088e48:	429c      	cmp	r4, r3
 8088e4a:	f340 834f 	ble.w	80894ec <__ieee754_pow+0x7fc>
 8088e4e:	2e00      	cmp	r6, #0
 8088e50:	f340 834f 	ble.w	80894f2 <__ieee754_pow+0x802>
 8088e54:	a316      	add	r3, pc, #88	; (adr r3, 8088eb0 <__ieee754_pow+0x1c0>)
 8088e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8088e5a:	4610      	mov	r0, r2
 8088e5c:	4619      	mov	r1, r3
 8088e5e:	f001 f85d 	bl	8089f1c <__aeabi_dmul>
 8088e62:	e9cd 0100 	strd	r0, r1, [sp]
 8088e66:	e789      	b.n	8088d7c <__ieee754_pow+0x8c>
 8088e68:	9a00      	ldr	r2, [sp, #0]
 8088e6a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8088e6e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8088e72:	4313      	orrs	r3, r2
 8088e74:	f43f af7e 	beq.w	8088d74 <__ieee754_pow+0x84>
 8088e78:	4b15      	ldr	r3, [pc, #84]	; (8088ed0 <__ieee754_pow+0x1e0>)
 8088e7a:	429c      	cmp	r4, r3
 8088e7c:	f340 8363 	ble.w	8089546 <__ieee754_pow+0x856>
 8088e80:	2e00      	cmp	r6, #0
 8088e82:	f2c0 8336 	blt.w	80894f2 <__ieee754_pow+0x802>
 8088e86:	e9cd 8900 	strd	r8, r9, [sp]
 8088e8a:	e777      	b.n	8088d7c <__ieee754_pow+0x8c>
 8088e8c:	2e00      	cmp	r6, #0
 8088e8e:	f2c0 83f5 	blt.w	808967c <__ieee754_pow+0x98c>
 8088e92:	4658      	mov	r0, fp
 8088e94:	4651      	mov	r1, sl
 8088e96:	e9cd 0100 	strd	r0, r1, [sp]
 8088e9a:	e76f      	b.n	8088d7c <__ieee754_pow+0x8c>
 8088e9c:	2202      	movs	r2, #2
 8088e9e:	9202      	str	r2, [sp, #8]
 8088ea0:	e745      	b.n	8088d2e <__ieee754_pow+0x3e>
 8088ea2:	465a      	mov	r2, fp
 8088ea4:	4658      	mov	r0, fp
 8088ea6:	4653      	mov	r3, sl
 8088ea8:	4651      	mov	r1, sl
 8088eaa:	e7b5      	b.n	8088e18 <__ieee754_pow+0x128>
 8088eac:	f3af 8000 	nop.w
 8088eb0:	8800759c 	.word	0x8800759c
 8088eb4:	7e37e43c 	.word	0x7e37e43c
 8088eb8:	7ff00000 	.word	0x7ff00000
 8088ebc:	3ff00000 	.word	0x3ff00000
 8088ec0:	3fe00000 	.word	0x3fe00000
 8088ec4:	0808bdf0 	.word	0x0808bdf0
 8088ec8:	433fffff 	.word	0x433fffff
 8088ecc:	41e00000 	.word	0x41e00000
 8088ed0:	3fefffff 	.word	0x3fefffff
 8088ed4:	4bd4      	ldr	r3, [pc, #848]	; (8089228 <__ieee754_pow+0x538>)
 8088ed6:	403b      	ands	r3, r7
 8088ed8:	2b00      	cmp	r3, #0
 8088eda:	f040 83cd 	bne.w	8089678 <__ieee754_pow+0x988>
 8088ede:	e9dd 0100 	ldrd	r0, r1, [sp]
 8088ee2:	2200      	movs	r2, #0
 8088ee4:	4bd1      	ldr	r3, [pc, #836]	; (808922c <__ieee754_pow+0x53c>)
 8088ee6:	f001 f819 	bl	8089f1c <__aeabi_dmul>
 8088eea:	f06f 0534 	mvn.w	r5, #52	; 0x34
 8088eee:	460c      	mov	r4, r1
 8088ef0:	e9cd 0100 	strd	r0, r1, [sp]
 8088ef4:	1523      	asrs	r3, r4, #20
 8088ef6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8088efa:	1959      	adds	r1, r3, r5
 8088efc:	4bcc      	ldr	r3, [pc, #816]	; (8089230 <__ieee754_pow+0x540>)
 8088efe:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8088f02:	f042 547f 	orr.w	r4, r2, #1069547520	; 0x3fc00000
 8088f06:	429a      	cmp	r2, r3
 8088f08:	910b      	str	r1, [sp, #44]	; 0x2c
 8088f0a:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8088f0e:	dd07      	ble.n	8088f20 <__ieee754_pow+0x230>
 8088f10:	4bc8      	ldr	r3, [pc, #800]	; (8089234 <__ieee754_pow+0x544>)
 8088f12:	429a      	cmp	r2, r3
 8088f14:	f340 83f8 	ble.w	8089708 <__ieee754_pow+0xa18>
 8088f18:	3101      	adds	r1, #1
 8088f1a:	910b      	str	r1, [sp, #44]	; 0x2c
 8088f1c:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
 8088f20:	2200      	movs	r2, #0
 8088f22:	2300      	movs	r3, #0
 8088f24:	2000      	movs	r0, #0
 8088f26:	2500      	movs	r5, #0
 8088f28:	49c3      	ldr	r1, [pc, #780]	; (8089238 <__ieee754_pow+0x548>)
 8088f2a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8088f2e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8088f32:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8088f36:	e9dd 0100 	ldrd	r0, r1, [sp]
 8088f3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8088f3e:	4621      	mov	r1, r4
 8088f40:	4682      	mov	sl, r0
 8088f42:	f000 fe33 	bl	8089bac <__aeabi_dsub>
 8088f46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8088f4a:	46a3      	mov	fp, r4
 8088f4c:	4606      	mov	r6, r0
 8088f4e:	460f      	mov	r7, r1
 8088f50:	4650      	mov	r0, sl
 8088f52:	4621      	mov	r1, r4
 8088f54:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 8088f58:	f000 fe2a 	bl	8089bb0 <__adddf3>
 8088f5c:	4602      	mov	r2, r0
 8088f5e:	460b      	mov	r3, r1
 8088f60:	2000      	movs	r0, #0
 8088f62:	49b5      	ldr	r1, [pc, #724]	; (8089238 <__ieee754_pow+0x548>)
 8088f64:	f001 f904 	bl	808a170 <__aeabi_ddiv>
 8088f68:	468c      	mov	ip, r1
 8088f6a:	4683      	mov	fp, r0
 8088f6c:	4663      	mov	r3, ip
 8088f6e:	465a      	mov	r2, fp
 8088f70:	4630      	mov	r0, r6
 8088f72:	4639      	mov	r1, r7
 8088f74:	e9cd bc0e 	strd	fp, ip, [sp, #56]	; 0x38
 8088f78:	f000 ffd0 	bl	8089f1c <__aeabi_dmul>
 8088f7c:	4682      	mov	sl, r0
 8088f7e:	468b      	mov	fp, r1
 8088f80:	1063      	asrs	r3, r4, #1
 8088f82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8088f86:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 8088f8a:	1959      	adds	r1, r3, r5
 8088f8c:	460d      	mov	r5, r1
 8088f8e:	465a      	mov	r2, fp
 8088f90:	4651      	mov	r1, sl
 8088f92:	2300      	movs	r3, #0
 8088f94:	2000      	movs	r0, #0
 8088f96:	e9cd 1200 	strd	r1, r2, [sp]
 8088f9a:	9300      	str	r3, [sp, #0]
 8088f9c:	4604      	mov	r4, r0
 8088f9e:	4602      	mov	r2, r0
 8088fa0:	462b      	mov	r3, r5
 8088fa2:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8088fa6:	e9dd ab00 	ldrd	sl, fp, [sp]
 8088faa:	4650      	mov	r0, sl
 8088fac:	4659      	mov	r1, fp
 8088fae:	f000 ffb5 	bl	8089f1c <__aeabi_dmul>
 8088fb2:	4602      	mov	r2, r0
 8088fb4:	460b      	mov	r3, r1
 8088fb6:	4630      	mov	r0, r6
 8088fb8:	4639      	mov	r1, r7
 8088fba:	f000 fdf7 	bl	8089bac <__aeabi_dsub>
 8088fbe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8088fc2:	4606      	mov	r6, r0
 8088fc4:	460f      	mov	r7, r1
 8088fc6:	4620      	mov	r0, r4
 8088fc8:	4629      	mov	r1, r5
 8088fca:	f000 fdef 	bl	8089bac <__aeabi_dsub>
 8088fce:	4602      	mov	r2, r0
 8088fd0:	460b      	mov	r3, r1
 8088fd2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8088fd6:	f000 fde9 	bl	8089bac <__aeabi_dsub>
 8088fda:	4652      	mov	r2, sl
 8088fdc:	465b      	mov	r3, fp
 8088fde:	f000 ff9d 	bl	8089f1c <__aeabi_dmul>
 8088fe2:	4602      	mov	r2, r0
 8088fe4:	460b      	mov	r3, r1
 8088fe6:	4630      	mov	r0, r6
 8088fe8:	4639      	mov	r1, r7
 8088fea:	f000 fddf 	bl	8089bac <__aeabi_dsub>
 8088fee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8088ff2:	f000 ff93 	bl	8089f1c <__aeabi_dmul>
 8088ff6:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8088ffa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8088ffe:	4622      	mov	r2, r4
 8089000:	462b      	mov	r3, r5
 8089002:	4620      	mov	r0, r4
 8089004:	4629      	mov	r1, r5
 8089006:	f000 ff89 	bl	8089f1c <__aeabi_dmul>
 808900a:	a375      	add	r3, pc, #468	; (adr r3, 80891e0 <__ieee754_pow+0x4f0>)
 808900c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8089010:	4604      	mov	r4, r0
 8089012:	460d      	mov	r5, r1
 8089014:	f000 ff82 	bl	8089f1c <__aeabi_dmul>
 8089018:	a373      	add	r3, pc, #460	; (adr r3, 80891e8 <__ieee754_pow+0x4f8>)
 808901a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808901e:	f000 fdc7 	bl	8089bb0 <__adddf3>
 8089022:	4622      	mov	r2, r4
 8089024:	462b      	mov	r3, r5
 8089026:	f000 ff79 	bl	8089f1c <__aeabi_dmul>
 808902a:	a371      	add	r3, pc, #452	; (adr r3, 80891f0 <__ieee754_pow+0x500>)
 808902c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8089030:	f000 fdbe 	bl	8089bb0 <__adddf3>
 8089034:	4622      	mov	r2, r4
 8089036:	462b      	mov	r3, r5
 8089038:	f000 ff70 	bl	8089f1c <__aeabi_dmul>
 808903c:	a36e      	add	r3, pc, #440	; (adr r3, 80891f8 <__ieee754_pow+0x508>)
 808903e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8089042:	f000 fdb5 	bl	8089bb0 <__adddf3>
 8089046:	4622      	mov	r2, r4
 8089048:	462b      	mov	r3, r5
 808904a:	f000 ff67 	bl	8089f1c <__aeabi_dmul>
 808904e:	a36c      	add	r3, pc, #432	; (adr r3, 8089200 <__ieee754_pow+0x510>)
 8089050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8089054:	f000 fdac 	bl	8089bb0 <__adddf3>
 8089058:	4622      	mov	r2, r4
 808905a:	462b      	mov	r3, r5
 808905c:	f000 ff5e 	bl	8089f1c <__aeabi_dmul>
 8089060:	a369      	add	r3, pc, #420	; (adr r3, 8089208 <__ieee754_pow+0x518>)
 8089062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8089066:	f000 fda3 	bl	8089bb0 <__adddf3>
 808906a:	4622      	mov	r2, r4
 808906c:	4606      	mov	r6, r0
 808906e:	460f      	mov	r7, r1
 8089070:	462b      	mov	r3, r5
 8089072:	4620      	mov	r0, r4
 8089074:	4629      	mov	r1, r5
 8089076:	f000 ff51 	bl	8089f1c <__aeabi_dmul>
 808907a:	4602      	mov	r2, r0
 808907c:	460b      	mov	r3, r1
 808907e:	4630      	mov	r0, r6
 8089080:	4639      	mov	r1, r7
 8089082:	f000 ff4b 	bl	8089f1c <__aeabi_dmul>
 8089086:	4604      	mov	r4, r0
 8089088:	460d      	mov	r5, r1
 808908a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 808908e:	4652      	mov	r2, sl
 8089090:	465b      	mov	r3, fp
 8089092:	f000 fd8d 	bl	8089bb0 <__adddf3>
 8089096:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 808909a:	f000 ff3f 	bl	8089f1c <__aeabi_dmul>
 808909e:	4622      	mov	r2, r4
 80890a0:	462b      	mov	r3, r5
 80890a2:	f000 fd85 	bl	8089bb0 <__adddf3>
 80890a6:	4652      	mov	r2, sl
 80890a8:	4606      	mov	r6, r0
 80890aa:	460f      	mov	r7, r1
 80890ac:	465b      	mov	r3, fp
 80890ae:	4650      	mov	r0, sl
 80890b0:	4659      	mov	r1, fp
 80890b2:	f000 ff33 	bl	8089f1c <__aeabi_dmul>
 80890b6:	4602      	mov	r2, r0
 80890b8:	460b      	mov	r3, r1
 80890ba:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80890be:	2200      	movs	r2, #0
 80890c0:	4b5e      	ldr	r3, [pc, #376]	; (808923c <__ieee754_pow+0x54c>)
 80890c2:	f000 fd75 	bl	8089bb0 <__adddf3>
 80890c6:	4632      	mov	r2, r6
 80890c8:	463b      	mov	r3, r7
 80890ca:	f000 fd71 	bl	8089bb0 <__adddf3>
 80890ce:	2400      	movs	r4, #0
 80890d0:	460d      	mov	r5, r1
 80890d2:	4622      	mov	r2, r4
 80890d4:	462b      	mov	r3, r5
 80890d6:	4650      	mov	r0, sl
 80890d8:	4659      	mov	r1, fp
 80890da:	f000 ff1f 	bl	8089f1c <__aeabi_dmul>
 80890de:	2200      	movs	r2, #0
 80890e0:	4682      	mov	sl, r0
 80890e2:	468b      	mov	fp, r1
 80890e4:	4620      	mov	r0, r4
 80890e6:	4629      	mov	r1, r5
 80890e8:	4b54      	ldr	r3, [pc, #336]	; (808923c <__ieee754_pow+0x54c>)
 80890ea:	f000 fd5f 	bl	8089bac <__aeabi_dsub>
 80890ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80890f2:	f000 fd5b 	bl	8089bac <__aeabi_dsub>
 80890f6:	4602      	mov	r2, r0
 80890f8:	460b      	mov	r3, r1
 80890fa:	4630      	mov	r0, r6
 80890fc:	4639      	mov	r1, r7
 80890fe:	f000 fd55 	bl	8089bac <__aeabi_dsub>
 8089102:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8089106:	f000 ff09 	bl	8089f1c <__aeabi_dmul>
 808910a:	4622      	mov	r2, r4
 808910c:	4606      	mov	r6, r0
 808910e:	460f      	mov	r7, r1
 8089110:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8089114:	462b      	mov	r3, r5
 8089116:	f000 ff01 	bl	8089f1c <__aeabi_dmul>
 808911a:	4602      	mov	r2, r0
 808911c:	460b      	mov	r3, r1
 808911e:	4630      	mov	r0, r6
 8089120:	4639      	mov	r1, r7
 8089122:	f000 fd45 	bl	8089bb0 <__adddf3>
 8089126:	4606      	mov	r6, r0
 8089128:	460f      	mov	r7, r1
 808912a:	2400      	movs	r4, #0
 808912c:	4632      	mov	r2, r6
 808912e:	463b      	mov	r3, r7
 8089130:	4650      	mov	r0, sl
 8089132:	4659      	mov	r1, fp
 8089134:	f000 fd3c 	bl	8089bb0 <__adddf3>
 8089138:	a335      	add	r3, pc, #212	; (adr r3, 8089210 <__ieee754_pow+0x520>)
 808913a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808913e:	4620      	mov	r0, r4
 8089140:	460d      	mov	r5, r1
 8089142:	f000 feeb 	bl	8089f1c <__aeabi_dmul>
 8089146:	4652      	mov	r2, sl
 8089148:	465b      	mov	r3, fp
 808914a:	4682      	mov	sl, r0
 808914c:	468b      	mov	fp, r1
 808914e:	4620      	mov	r0, r4
 8089150:	4629      	mov	r1, r5
 8089152:	f000 fd2b 	bl	8089bac <__aeabi_dsub>
 8089156:	4602      	mov	r2, r0
 8089158:	460b      	mov	r3, r1
 808915a:	4630      	mov	r0, r6
 808915c:	4639      	mov	r1, r7
 808915e:	f000 fd25 	bl	8089bac <__aeabi_dsub>
 8089162:	a32d      	add	r3, pc, #180	; (adr r3, 8089218 <__ieee754_pow+0x528>)
 8089164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8089168:	f000 fed8 	bl	8089f1c <__aeabi_dmul>
 808916c:	4602      	mov	r2, r0
 808916e:	460b      	mov	r3, r1
 8089170:	4620      	mov	r0, r4
 8089172:	4629      	mov	r1, r5
 8089174:	4614      	mov	r4, r2
 8089176:	461d      	mov	r5, r3
 8089178:	a329      	add	r3, pc, #164	; (adr r3, 8089220 <__ieee754_pow+0x530>)
 808917a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808917e:	f000 fecd 	bl	8089f1c <__aeabi_dmul>
 8089182:	4602      	mov	r2, r0
 8089184:	460b      	mov	r3, r1
 8089186:	4620      	mov	r0, r4
 8089188:	4629      	mov	r1, r5
 808918a:	f000 fd11 	bl	8089bb0 <__adddf3>
 808918e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8089192:	f000 fd0d 	bl	8089bb0 <__adddf3>
 8089196:	4606      	mov	r6, r0
 8089198:	980b      	ldr	r0, [sp, #44]	; 0x2c
 808919a:	460f      	mov	r7, r1
 808919c:	f000 fe54 	bl	8089e48 <__aeabi_i2d>
 80891a0:	4604      	mov	r4, r0
 80891a2:	460d      	mov	r5, r1
 80891a4:	4632      	mov	r2, r6
 80891a6:	463b      	mov	r3, r7
 80891a8:	4650      	mov	r0, sl
 80891aa:	4659      	mov	r1, fp
 80891ac:	f000 fd00 	bl	8089bb0 <__adddf3>
 80891b0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80891b4:	f000 fcfc 	bl	8089bb0 <__adddf3>
 80891b8:	4622      	mov	r2, r4
 80891ba:	462b      	mov	r3, r5
 80891bc:	f000 fcf8 	bl	8089bb0 <__adddf3>
 80891c0:	4622      	mov	r2, r4
 80891c2:	2400      	movs	r4, #0
 80891c4:	462b      	mov	r3, r5
 80891c6:	4620      	mov	r0, r4
 80891c8:	460d      	mov	r5, r1
 80891ca:	f000 fcef 	bl	8089bac <__aeabi_dsub>
 80891ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80891d2:	f000 fceb 	bl	8089bac <__aeabi_dsub>
 80891d6:	4652      	mov	r2, sl
 80891d8:	465b      	mov	r3, fp
 80891da:	e031      	b.n	8089240 <__ieee754_pow+0x550>
 80891dc:	f3af 8000 	nop.w
 80891e0:	4a454eef 	.word	0x4a454eef
 80891e4:	3fca7e28 	.word	0x3fca7e28
 80891e8:	93c9db65 	.word	0x93c9db65
 80891ec:	3fcd864a 	.word	0x3fcd864a
 80891f0:	a91d4101 	.word	0xa91d4101
 80891f4:	3fd17460 	.word	0x3fd17460
 80891f8:	518f264d 	.word	0x518f264d
 80891fc:	3fd55555 	.word	0x3fd55555
 8089200:	db6fabff 	.word	0xdb6fabff
 8089204:	3fdb6db6 	.word	0x3fdb6db6
 8089208:	33333303 	.word	0x33333303
 808920c:	3fe33333 	.word	0x3fe33333
 8089210:	e0000000 	.word	0xe0000000
 8089214:	3feec709 	.word	0x3feec709
 8089218:	dc3a03fd 	.word	0xdc3a03fd
 808921c:	3feec709 	.word	0x3feec709
 8089220:	145b01f5 	.word	0x145b01f5
 8089224:	be3e2fe0 	.word	0xbe3e2fe0
 8089228:	7ff00000 	.word	0x7ff00000
 808922c:	43400000 	.word	0x43400000
 8089230:	0003988e 	.word	0x0003988e
 8089234:	000bb679 	.word	0x000bb679
 8089238:	3ff00000 	.word	0x3ff00000
 808923c:	40080000 	.word	0x40080000
 8089240:	f000 fcb4 	bl	8089bac <__aeabi_dsub>
 8089244:	4602      	mov	r2, r0
 8089246:	460b      	mov	r3, r1
 8089248:	4630      	mov	r0, r6
 808924a:	4639      	mov	r1, r7
 808924c:	f000 fcae 	bl	8089bac <__aeabi_dsub>
 8089250:	9b02      	ldr	r3, [sp, #8]
 8089252:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8089254:	3b01      	subs	r3, #1
 8089256:	4313      	orrs	r3, r2
 8089258:	f04f 0200 	mov.w	r2, #0
 808925c:	bf0c      	ite	eq
 808925e:	4bd2      	ldreq	r3, [pc, #840]	; (80895a8 <__ieee754_pow+0x8b8>)
 8089260:	4bd2      	ldrne	r3, [pc, #840]	; (80895ac <__ieee754_pow+0x8bc>)
 8089262:	e9cd 8900 	strd	r8, r9, [sp]
 8089266:	e9cd 2302 	strd	r2, r3, [sp, #8]
 808926a:	2300      	movs	r3, #0
 808926c:	9300      	str	r3, [sp, #0]
 808926e:	e9dd ab00 	ldrd	sl, fp, [sp]
 8089272:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8089276:	4652      	mov	r2, sl
 8089278:	4640      	mov	r0, r8
 808927a:	4649      	mov	r1, r9
 808927c:	465b      	mov	r3, fp
 808927e:	f000 fc95 	bl	8089bac <__aeabi_dsub>
 8089282:	4622      	mov	r2, r4
 8089284:	462b      	mov	r3, r5
 8089286:	f000 fe49 	bl	8089f1c <__aeabi_dmul>
 808928a:	4642      	mov	r2, r8
 808928c:	4606      	mov	r6, r0
 808928e:	460f      	mov	r7, r1
 8089290:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8089294:	464b      	mov	r3, r9
 8089296:	f000 fe41 	bl	8089f1c <__aeabi_dmul>
 808929a:	4602      	mov	r2, r0
 808929c:	460b      	mov	r3, r1
 808929e:	4630      	mov	r0, r6
 80892a0:	4639      	mov	r1, r7
 80892a2:	f000 fc85 	bl	8089bb0 <__adddf3>
 80892a6:	4652      	mov	r2, sl
 80892a8:	4606      	mov	r6, r0
 80892aa:	460f      	mov	r7, r1
 80892ac:	465b      	mov	r3, fp
 80892ae:	4620      	mov	r0, r4
 80892b0:	4629      	mov	r1, r5
 80892b2:	f000 fe33 	bl	8089f1c <__aeabi_dmul>
 80892b6:	4604      	mov	r4, r0
 80892b8:	460d      	mov	r5, r1
 80892ba:	4630      	mov	r0, r6
 80892bc:	462b      	mov	r3, r5
 80892be:	4639      	mov	r1, r7
 80892c0:	4622      	mov	r2, r4
 80892c2:	f000 fc75 	bl	8089bb0 <__adddf3>
 80892c6:	4bba      	ldr	r3, [pc, #744]	; (80895b0 <__ieee754_pow+0x8c0>)
 80892c8:	4680      	mov	r8, r0
 80892ca:	4299      	cmp	r1, r3
 80892cc:	4689      	mov	r9, r1
 80892ce:	468a      	mov	sl, r1
 80892d0:	f340 8114 	ble.w	80894fc <__ieee754_pow+0x80c>
 80892d4:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80892d8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80892dc:	4303      	orrs	r3, r0
 80892de:	f040 81f6 	bne.w	80896ce <__ieee754_pow+0x9de>
 80892e2:	a39d      	add	r3, pc, #628	; (adr r3, 8089558 <__ieee754_pow+0x868>)
 80892e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80892e8:	4630      	mov	r0, r6
 80892ea:	4639      	mov	r1, r7
 80892ec:	f000 fc60 	bl	8089bb0 <__adddf3>
 80892f0:	4602      	mov	r2, r0
 80892f2:	460b      	mov	r3, r1
 80892f4:	4640      	mov	r0, r8
 80892f6:	4649      	mov	r1, r9
 80892f8:	4690      	mov	r8, r2
 80892fa:	4699      	mov	r9, r3
 80892fc:	4622      	mov	r2, r4
 80892fe:	462b      	mov	r3, r5
 8089300:	f000 fc54 	bl	8089bac <__aeabi_dsub>
 8089304:	4602      	mov	r2, r0
 8089306:	460b      	mov	r3, r1
 8089308:	4640      	mov	r0, r8
 808930a:	4649      	mov	r1, r9
 808930c:	f001 f896 	bl	808a43c <__aeabi_dcmpgt>
 8089310:	2800      	cmp	r0, #0
 8089312:	f040 81dc 	bne.w	80896ce <__ieee754_pow+0x9de>
 8089316:	f3ca 530a 	ubfx	r3, sl, #20, #11
 808931a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 808931e:	2000      	movs	r0, #0
 8089320:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8089324:	fa42 f303 	asr.w	r3, r2, r3
 8089328:	4453      	add	r3, sl
 808932a:	49a2      	ldr	r1, [pc, #648]	; (80895b4 <__ieee754_pow+0x8c4>)
 808932c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8089330:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8089334:	fa41 fc02 	asr.w	ip, r1, r2
 8089338:	f3c3 0b13 	ubfx	fp, r3, #0, #20
 808933c:	ea23 010c 	bic.w	r1, r3, ip
 8089340:	f1c2 0214 	rsb	r2, r2, #20
 8089344:	f44b 1b80 	orr.w	fp, fp, #1048576	; 0x100000
 8089348:	f1ba 0f00 	cmp.w	sl, #0
 808934c:	460b      	mov	r3, r1
 808934e:	fa4b fb02 	asr.w	fp, fp, r2
 8089352:	4629      	mov	r1, r5
 8089354:	4602      	mov	r2, r0
 8089356:	4620      	mov	r0, r4
 8089358:	bfb8      	it	lt
 808935a:	f1cb 0b00 	rsblt	fp, fp, #0
 808935e:	f000 fc25 	bl	8089bac <__aeabi_dsub>
 8089362:	4604      	mov	r4, r0
 8089364:	460d      	mov	r5, r1
 8089366:	4630      	mov	r0, r6
 8089368:	4639      	mov	r1, r7
 808936a:	4622      	mov	r2, r4
 808936c:	462b      	mov	r3, r5
 808936e:	f000 fc1f 	bl	8089bb0 <__adddf3>
 8089372:	4689      	mov	r9, r1
 8089374:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
 8089378:	f04f 0800 	mov.w	r8, #0
 808937c:	a378      	add	r3, pc, #480	; (adr r3, 8089560 <__ieee754_pow+0x870>)
 808937e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8089382:	4640      	mov	r0, r8
 8089384:	4649      	mov	r1, r9
 8089386:	f000 fdc9 	bl	8089f1c <__aeabi_dmul>
 808938a:	4622      	mov	r2, r4
 808938c:	462b      	mov	r3, r5
 808938e:	4604      	mov	r4, r0
 8089390:	460d      	mov	r5, r1
 8089392:	4640      	mov	r0, r8
 8089394:	4649      	mov	r1, r9
 8089396:	f000 fc09 	bl	8089bac <__aeabi_dsub>
 808939a:	4602      	mov	r2, r0
 808939c:	460b      	mov	r3, r1
 808939e:	4630      	mov	r0, r6
 80893a0:	4639      	mov	r1, r7
 80893a2:	f000 fc03 	bl	8089bac <__aeabi_dsub>
 80893a6:	a370      	add	r3, pc, #448	; (adr r3, 8089568 <__ieee754_pow+0x878>)
 80893a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80893ac:	f000 fdb6 	bl	8089f1c <__aeabi_dmul>
 80893b0:	a36f      	add	r3, pc, #444	; (adr r3, 8089570 <__ieee754_pow+0x880>)
 80893b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80893b6:	4606      	mov	r6, r0
 80893b8:	460f      	mov	r7, r1
 80893ba:	4640      	mov	r0, r8
 80893bc:	4649      	mov	r1, r9
 80893be:	f000 fdad 	bl	8089f1c <__aeabi_dmul>
 80893c2:	4602      	mov	r2, r0
 80893c4:	460b      	mov	r3, r1
 80893c6:	4630      	mov	r0, r6
 80893c8:	4639      	mov	r1, r7
 80893ca:	f000 fbf1 	bl	8089bb0 <__adddf3>
 80893ce:	4680      	mov	r8, r0
 80893d0:	4689      	mov	r9, r1
 80893d2:	4642      	mov	r2, r8
 80893d4:	464b      	mov	r3, r9
 80893d6:	4620      	mov	r0, r4
 80893d8:	4629      	mov	r1, r5
 80893da:	f000 fbe9 	bl	8089bb0 <__adddf3>
 80893de:	4622      	mov	r2, r4
 80893e0:	462b      	mov	r3, r5
 80893e2:	4606      	mov	r6, r0
 80893e4:	460f      	mov	r7, r1
 80893e6:	f000 fbe1 	bl	8089bac <__aeabi_dsub>
 80893ea:	4602      	mov	r2, r0
 80893ec:	460b      	mov	r3, r1
 80893ee:	4640      	mov	r0, r8
 80893f0:	4649      	mov	r1, r9
 80893f2:	f000 fbdb 	bl	8089bac <__aeabi_dsub>
 80893f6:	4632      	mov	r2, r6
 80893f8:	4680      	mov	r8, r0
 80893fa:	4689      	mov	r9, r1
 80893fc:	463b      	mov	r3, r7
 80893fe:	4630      	mov	r0, r6
 8089400:	4639      	mov	r1, r7
 8089402:	f000 fd8b 	bl	8089f1c <__aeabi_dmul>
 8089406:	a35c      	add	r3, pc, #368	; (adr r3, 8089578 <__ieee754_pow+0x888>)
 8089408:	e9d3 2300 	ldrd	r2, r3, [r3]
 808940c:	4604      	mov	r4, r0
 808940e:	460d      	mov	r5, r1
 8089410:	f000 fd84 	bl	8089f1c <__aeabi_dmul>
 8089414:	a35a      	add	r3, pc, #360	; (adr r3, 8089580 <__ieee754_pow+0x890>)
 8089416:	e9d3 2300 	ldrd	r2, r3, [r3]
 808941a:	f000 fbc7 	bl	8089bac <__aeabi_dsub>
 808941e:	4622      	mov	r2, r4
 8089420:	462b      	mov	r3, r5
 8089422:	f000 fd7b 	bl	8089f1c <__aeabi_dmul>
 8089426:	a358      	add	r3, pc, #352	; (adr r3, 8089588 <__ieee754_pow+0x898>)
 8089428:	e9d3 2300 	ldrd	r2, r3, [r3]
 808942c:	f000 fbc0 	bl	8089bb0 <__adddf3>
 8089430:	4622      	mov	r2, r4
 8089432:	462b      	mov	r3, r5
 8089434:	f000 fd72 	bl	8089f1c <__aeabi_dmul>
 8089438:	a355      	add	r3, pc, #340	; (adr r3, 8089590 <__ieee754_pow+0x8a0>)
 808943a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808943e:	f000 fbb5 	bl	8089bac <__aeabi_dsub>
 8089442:	4622      	mov	r2, r4
 8089444:	462b      	mov	r3, r5
 8089446:	f000 fd69 	bl	8089f1c <__aeabi_dmul>
 808944a:	a353      	add	r3, pc, #332	; (adr r3, 8089598 <__ieee754_pow+0x8a8>)
 808944c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8089450:	f000 fbae 	bl	8089bb0 <__adddf3>
 8089454:	4622      	mov	r2, r4
 8089456:	462b      	mov	r3, r5
 8089458:	f000 fd60 	bl	8089f1c <__aeabi_dmul>
 808945c:	4602      	mov	r2, r0
 808945e:	460b      	mov	r3, r1
 8089460:	4630      	mov	r0, r6
 8089462:	4639      	mov	r1, r7
 8089464:	f000 fba2 	bl	8089bac <__aeabi_dsub>
 8089468:	4604      	mov	r4, r0
 808946a:	460d      	mov	r5, r1
 808946c:	4622      	mov	r2, r4
 808946e:	462b      	mov	r3, r5
 8089470:	4630      	mov	r0, r6
 8089472:	4639      	mov	r1, r7
 8089474:	f000 fd52 	bl	8089f1c <__aeabi_dmul>
 8089478:	4602      	mov	r2, r0
 808947a:	460b      	mov	r3, r1
 808947c:	4620      	mov	r0, r4
 808947e:	4629      	mov	r1, r5
 8089480:	4614      	mov	r4, r2
 8089482:	461d      	mov	r5, r3
 8089484:	2200      	movs	r2, #0
 8089486:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 808948a:	f000 fb8f 	bl	8089bac <__aeabi_dsub>
 808948e:	4602      	mov	r2, r0
 8089490:	460b      	mov	r3, r1
 8089492:	4620      	mov	r0, r4
 8089494:	4629      	mov	r1, r5
 8089496:	f000 fe6b 	bl	808a170 <__aeabi_ddiv>
 808949a:	4642      	mov	r2, r8
 808949c:	4604      	mov	r4, r0
 808949e:	460d      	mov	r5, r1
 80894a0:	464b      	mov	r3, r9
 80894a2:	4630      	mov	r0, r6
 80894a4:	4639      	mov	r1, r7
 80894a6:	f000 fd39 	bl	8089f1c <__aeabi_dmul>
 80894aa:	4642      	mov	r2, r8
 80894ac:	464b      	mov	r3, r9
 80894ae:	f000 fb7f 	bl	8089bb0 <__adddf3>
 80894b2:	4602      	mov	r2, r0
 80894b4:	460b      	mov	r3, r1
 80894b6:	4620      	mov	r0, r4
 80894b8:	4629      	mov	r1, r5
 80894ba:	f000 fb77 	bl	8089bac <__aeabi_dsub>
 80894be:	4632      	mov	r2, r6
 80894c0:	463b      	mov	r3, r7
 80894c2:	f000 fb73 	bl	8089bac <__aeabi_dsub>
 80894c6:	4602      	mov	r2, r0
 80894c8:	460b      	mov	r3, r1
 80894ca:	2000      	movs	r0, #0
 80894cc:	4937      	ldr	r1, [pc, #220]	; (80895ac <__ieee754_pow+0x8bc>)
 80894ce:	f000 fb6d 	bl	8089bac <__aeabi_dsub>
 80894d2:	448a      	add	sl, r1
 80894d4:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
 80894d8:	f2c0 8135 	blt.w	8089746 <__ieee754_pow+0xa56>
 80894dc:	4651      	mov	r1, sl
 80894de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80894e2:	f000 fd1b 	bl	8089f1c <__aeabi_dmul>
 80894e6:	e9cd 0100 	strd	r0, r1, [sp]
 80894ea:	e447      	b.n	8088d7c <__ieee754_pow+0x8c>
 80894ec:	2e00      	cmp	r6, #0
 80894ee:	f6ff acb1 	blt.w	8088e54 <__ieee754_pow+0x164>
 80894f2:	2300      	movs	r3, #0
 80894f4:	2400      	movs	r4, #0
 80894f6:	e9cd 3400 	strd	r3, r4, [sp]
 80894fa:	e43f      	b.n	8088d7c <__ieee754_pow+0x8c>
 80894fc:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 80895b8 <__ieee754_pow+0x8c8>
 8089500:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8089504:	4563      	cmp	r3, ip
 8089506:	f340 80da 	ble.w	80896be <__ieee754_pow+0x9ce>
 808950a:	4b2c      	ldr	r3, [pc, #176]	; (80895bc <__ieee754_pow+0x8cc>)
 808950c:	440b      	add	r3, r1
 808950e:	4303      	orrs	r3, r0
 8089510:	d10a      	bne.n	8089528 <__ieee754_pow+0x838>
 8089512:	4622      	mov	r2, r4
 8089514:	462b      	mov	r3, r5
 8089516:	f000 fb49 	bl	8089bac <__aeabi_dsub>
 808951a:	4632      	mov	r2, r6
 808951c:	463b      	mov	r3, r7
 808951e:	f000 ff83 	bl	808a428 <__aeabi_dcmpge>
 8089522:	2800      	cmp	r0, #0
 8089524:	f43f aef7 	beq.w	8089316 <__ieee754_pow+0x626>
 8089528:	a31d      	add	r3, pc, #116	; (adr r3, 80895a0 <__ieee754_pow+0x8b0>)
 808952a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808952e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8089532:	f000 fcf3 	bl	8089f1c <__aeabi_dmul>
 8089536:	a31a      	add	r3, pc, #104	; (adr r3, 80895a0 <__ieee754_pow+0x8b0>)
 8089538:	e9d3 2300 	ldrd	r2, r3, [r3]
 808953c:	f000 fcee 	bl	8089f1c <__aeabi_dmul>
 8089540:	e9cd 0100 	strd	r0, r1, [sp]
 8089544:	e41a      	b.n	8088d7c <__ieee754_pow+0x8c>
 8089546:	2e00      	cmp	r6, #0
 8089548:	dad3      	bge.n	80894f2 <__ieee754_pow+0x802>
 808954a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 808954e:	f8cd 8000 	str.w	r8, [sp]
 8089552:	9301      	str	r3, [sp, #4]
 8089554:	e412      	b.n	8088d7c <__ieee754_pow+0x8c>
 8089556:	bf00      	nop
 8089558:	652b82fe 	.word	0x652b82fe
 808955c:	3c971547 	.word	0x3c971547
 8089560:	00000000 	.word	0x00000000
 8089564:	3fe62e43 	.word	0x3fe62e43
 8089568:	fefa39ef 	.word	0xfefa39ef
 808956c:	3fe62e42 	.word	0x3fe62e42
 8089570:	0ca86c39 	.word	0x0ca86c39
 8089574:	be205c61 	.word	0xbe205c61
 8089578:	72bea4d0 	.word	0x72bea4d0
 808957c:	3e663769 	.word	0x3e663769
 8089580:	c5d26bf1 	.word	0xc5d26bf1
 8089584:	3ebbbd41 	.word	0x3ebbbd41
 8089588:	af25de2c 	.word	0xaf25de2c
 808958c:	3f11566a 	.word	0x3f11566a
 8089590:	16bebd93 	.word	0x16bebd93
 8089594:	3f66c16c 	.word	0x3f66c16c
 8089598:	5555553e 	.word	0x5555553e
 808959c:	3fc55555 	.word	0x3fc55555
 80895a0:	c2f8f359 	.word	0xc2f8f359
 80895a4:	01a56e1f 	.word	0x01a56e1f
 80895a8:	bff00000 	.word	0xbff00000
 80895ac:	3ff00000 	.word	0x3ff00000
 80895b0:	408fffff 	.word	0x408fffff
 80895b4:	000fffff 	.word	0x000fffff
 80895b8:	4090cbff 	.word	0x4090cbff
 80895bc:	3f6f3400 	.word	0x3f6f3400
 80895c0:	429c      	cmp	r4, r3
 80895c2:	db93      	blt.n	80894ec <__ieee754_pow+0x7fc>
 80895c4:	4b7a      	ldr	r3, [pc, #488]	; (80897b0 <__ieee754_pow+0xac0>)
 80895c6:	429c      	cmp	r4, r3
 80895c8:	f73f ac41 	bgt.w	8088e4e <__ieee754_pow+0x15e>
 80895cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80895d0:	2200      	movs	r2, #0
 80895d2:	4b77      	ldr	r3, [pc, #476]	; (80897b0 <__ieee754_pow+0xac0>)
 80895d4:	f000 faea 	bl	8089bac <__aeabi_dsub>
 80895d8:	a367      	add	r3, pc, #412	; (adr r3, 8089778 <__ieee754_pow+0xa88>)
 80895da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80895de:	4604      	mov	r4, r0
 80895e0:	460d      	mov	r5, r1
 80895e2:	f000 fc9b 	bl	8089f1c <__aeabi_dmul>
 80895e6:	a366      	add	r3, pc, #408	; (adr r3, 8089780 <__ieee754_pow+0xa90>)
 80895e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80895ec:	4682      	mov	sl, r0
 80895ee:	468b      	mov	fp, r1
 80895f0:	4620      	mov	r0, r4
 80895f2:	4629      	mov	r1, r5
 80895f4:	f000 fc92 	bl	8089f1c <__aeabi_dmul>
 80895f8:	2200      	movs	r2, #0
 80895fa:	e9cd 0100 	strd	r0, r1, [sp]
 80895fe:	4b6d      	ldr	r3, [pc, #436]	; (80897b4 <__ieee754_pow+0xac4>)
 8089600:	4620      	mov	r0, r4
 8089602:	4629      	mov	r1, r5
 8089604:	f000 fc8a 	bl	8089f1c <__aeabi_dmul>
 8089608:	4602      	mov	r2, r0
 808960a:	460b      	mov	r3, r1
 808960c:	a15e      	add	r1, pc, #376	; (adr r1, 8089788 <__ieee754_pow+0xa98>)
 808960e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8089612:	f000 facb 	bl	8089bac <__aeabi_dsub>
 8089616:	4622      	mov	r2, r4
 8089618:	462b      	mov	r3, r5
 808961a:	f000 fc7f 	bl	8089f1c <__aeabi_dmul>
 808961e:	4602      	mov	r2, r0
 8089620:	460b      	mov	r3, r1
 8089622:	2000      	movs	r0, #0
 8089624:	4964      	ldr	r1, [pc, #400]	; (80897b8 <__ieee754_pow+0xac8>)
 8089626:	f000 fac1 	bl	8089bac <__aeabi_dsub>
 808962a:	4622      	mov	r2, r4
 808962c:	4606      	mov	r6, r0
 808962e:	460f      	mov	r7, r1
 8089630:	462b      	mov	r3, r5
 8089632:	4620      	mov	r0, r4
 8089634:	4629      	mov	r1, r5
 8089636:	f000 fc71 	bl	8089f1c <__aeabi_dmul>
 808963a:	4602      	mov	r2, r0
 808963c:	460b      	mov	r3, r1
 808963e:	4630      	mov	r0, r6
 8089640:	4639      	mov	r1, r7
 8089642:	f000 fc6b 	bl	8089f1c <__aeabi_dmul>
 8089646:	a352      	add	r3, pc, #328	; (adr r3, 8089790 <__ieee754_pow+0xaa0>)
 8089648:	e9d3 2300 	ldrd	r2, r3, [r3]
 808964c:	f000 fc66 	bl	8089f1c <__aeabi_dmul>
 8089650:	4602      	mov	r2, r0
 8089652:	460b      	mov	r3, r1
 8089654:	e9dd 0100 	ldrd	r0, r1, [sp]
 8089658:	f000 faa8 	bl	8089bac <__aeabi_dsub>
 808965c:	4606      	mov	r6, r0
 808965e:	460f      	mov	r7, r1
 8089660:	4632      	mov	r2, r6
 8089662:	463b      	mov	r3, r7
 8089664:	4650      	mov	r0, sl
 8089666:	4659      	mov	r1, fp
 8089668:	f000 faa2 	bl	8089bb0 <__adddf3>
 808966c:	2400      	movs	r4, #0
 808966e:	4652      	mov	r2, sl
 8089670:	465b      	mov	r3, fp
 8089672:	460d      	mov	r5, r1
 8089674:	4620      	mov	r0, r4
 8089676:	e5e3      	b.n	8089240 <__ieee754_pow+0x550>
 8089678:	2500      	movs	r5, #0
 808967a:	e43b      	b.n	8088ef4 <__ieee754_pow+0x204>
 808967c:	465a      	mov	r2, fp
 808967e:	2000      	movs	r0, #0
 8089680:	4653      	mov	r3, sl
 8089682:	494b      	ldr	r1, [pc, #300]	; (80897b0 <__ieee754_pow+0xac0>)
 8089684:	f000 fd74 	bl	808a170 <__aeabi_ddiv>
 8089688:	e9cd 0100 	strd	r0, r1, [sp]
 808968c:	f7ff bb76 	b.w	8088d7c <__ieee754_pow+0x8c>
 8089690:	465a      	mov	r2, fp
 8089692:	4658      	mov	r0, fp
 8089694:	4653      	mov	r3, sl
 8089696:	4651      	mov	r1, sl
 8089698:	f000 fc40 	bl	8089f1c <__aeabi_dmul>
 808969c:	e9cd 0100 	strd	r0, r1, [sp]
 80896a0:	f7ff bb6c 	b.w	8088d7c <__ieee754_pow+0x8c>
 80896a4:	2b00      	cmp	r3, #0
 80896a6:	d140      	bne.n	808972a <__ieee754_pow+0xa3a>
 80896a8:	f1c2 0214 	rsb	r2, r2, #20
 80896ac:	fa45 f102 	asr.w	r1, r5, r2
 80896b0:	fa01 f202 	lsl.w	r2, r1, r2
 80896b4:	42aa      	cmp	r2, r5
 80896b6:	d054      	beq.n	8089762 <__ieee754_pow+0xa72>
 80896b8:	9302      	str	r3, [sp, #8]
 80896ba:	f7ff bb3e 	b.w	8088d3a <__ieee754_pow+0x4a>
 80896be:	4a3e      	ldr	r2, [pc, #248]	; (80897b8 <__ieee754_pow+0xac8>)
 80896c0:	4293      	cmp	r3, r2
 80896c2:	dc55      	bgt.n	8089770 <__ieee754_pow+0xa80>
 80896c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80896c8:	4692      	mov	sl, r2
 80896ca:	4693      	mov	fp, r2
 80896cc:	e654      	b.n	8089378 <__ieee754_pow+0x688>
 80896ce:	a332      	add	r3, pc, #200	; (adr r3, 8089798 <__ieee754_pow+0xaa8>)
 80896d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80896d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80896d8:	f000 fc20 	bl	8089f1c <__aeabi_dmul>
 80896dc:	a32e      	add	r3, pc, #184	; (adr r3, 8089798 <__ieee754_pow+0xaa8>)
 80896de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80896e2:	f000 fc1b 	bl	8089f1c <__aeabi_dmul>
 80896e6:	e9cd 0100 	strd	r0, r1, [sp]
 80896ea:	f7ff bb47 	b.w	8088d7c <__ieee754_pow+0x8c>
 80896ee:	9b02      	ldr	r3, [sp, #8]
 80896f0:	2b01      	cmp	r3, #1
 80896f2:	f47f ab43 	bne.w	8088d7c <__ieee754_pow+0x8c>
 80896f6:	e9dd 4500 	ldrd	r4, r5, [sp]
 80896fa:	4622      	mov	r2, r4
 80896fc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8089700:	e9cd 2300 	strd	r2, r3, [sp]
 8089704:	f7ff bb3a 	b.w	8088d7c <__ieee754_pow+0x8c>
 8089708:	2200      	movs	r2, #0
 808970a:	4b2c      	ldr	r3, [pc, #176]	; (80897bc <__ieee754_pow+0xacc>)
 808970c:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8089710:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8089714:	a322      	add	r3, pc, #136	; (adr r3, 80897a0 <__ieee754_pow+0xab0>)
 8089716:	e9d3 2300 	ldrd	r2, r3, [r3]
 808971a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 808971e:	a322      	add	r3, pc, #136	; (adr r3, 80897a8 <__ieee754_pow+0xab8>)
 8089720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8089724:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8089728:	e405      	b.n	8088f36 <__ieee754_pow+0x246>
 808972a:	4658      	mov	r0, fp
 808972c:	4651      	mov	r1, sl
 808972e:	f000 f90d 	bl	808994c <fabs>
 8089732:	465b      	mov	r3, fp
 8089734:	e9cd 0100 	strd	r0, r1, [sp]
 8089738:	2b00      	cmp	r3, #0
 808973a:	f47f abb2 	bne.w	8088ea2 <__ieee754_pow+0x1b2>
 808973e:	f8cd b008 	str.w	fp, [sp, #8]
 8089742:	f7ff bb4b 	b.w	8088ddc <__ieee754_pow+0xec>
 8089746:	465a      	mov	r2, fp
 8089748:	f000 f9ae 	bl	8089aa8 <scalbn>
 808974c:	e6c7      	b.n	80894de <__ieee754_pow+0x7ee>
 808974e:	f001 0101 	and.w	r1, r1, #1
 8089752:	f1c1 0202 	rsb	r2, r1, #2
 8089756:	9202      	str	r2, [sp, #8]
 8089758:	2b00      	cmp	r3, #0
 808975a:	f43f aaee 	beq.w	8088d3a <__ieee754_pow+0x4a>
 808975e:	f7ff bb35 	b.w	8088dcc <__ieee754_pow+0xdc>
 8089762:	f001 0101 	and.w	r1, r1, #1
 8089766:	f1c1 0302 	rsb	r3, r1, #2
 808976a:	9302      	str	r3, [sp, #8]
 808976c:	f7ff bae5 	b.w	8088d3a <__ieee754_pow+0x4a>
 8089770:	151b      	asrs	r3, r3, #20
 8089772:	e5d2      	b.n	808931a <__ieee754_pow+0x62a>
 8089774:	f3af 8000 	nop.w
 8089778:	60000000 	.word	0x60000000
 808977c:	3ff71547 	.word	0x3ff71547
 8089780:	f85ddf44 	.word	0xf85ddf44
 8089784:	3e54ae0b 	.word	0x3e54ae0b
 8089788:	55555555 	.word	0x55555555
 808978c:	3fd55555 	.word	0x3fd55555
 8089790:	652b82fe 	.word	0x652b82fe
 8089794:	3ff71547 	.word	0x3ff71547
 8089798:	8800759c 	.word	0x8800759c
 808979c:	7e37e43c 	.word	0x7e37e43c
 80897a0:	40000000 	.word	0x40000000
 80897a4:	3fe2b803 	.word	0x3fe2b803
 80897a8:	43cfd006 	.word	0x43cfd006
 80897ac:	3e4cfdeb 	.word	0x3e4cfdeb
 80897b0:	3ff00000 	.word	0x3ff00000
 80897b4:	3fd00000 	.word	0x3fd00000
 80897b8:	3fe00000 	.word	0x3fe00000
 80897bc:	3ff80000 	.word	0x3ff80000

080897c0 <__ieee754_sqrt>:
 80897c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80897c4:	4e60      	ldr	r6, [pc, #384]	; (8089948 <__ieee754_sqrt+0x188>)
 80897c6:	4605      	mov	r5, r0
 80897c8:	ea36 0201 	bics.w	r2, r6, r1
 80897cc:	460c      	mov	r4, r1
 80897ce:	f000 809e 	beq.w	808990e <__ieee754_sqrt+0x14e>
 80897d2:	2900      	cmp	r1, #0
 80897d4:	460b      	mov	r3, r1
 80897d6:	4684      	mov	ip, r0
 80897d8:	dd54      	ble.n	8089884 <__ieee754_sqrt+0xc4>
 80897da:	1509      	asrs	r1, r1, #20
 80897dc:	d062      	beq.n	80898a4 <__ieee754_sqrt+0xe4>
 80897de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80897e2:	07c8      	lsls	r0, r1, #31
 80897e4:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 80897e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80897ec:	d404      	bmi.n	80897f8 <__ieee754_sqrt+0x38>
 80897ee:	005b      	lsls	r3, r3, #1
 80897f0:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
 80897f4:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80897f8:	2600      	movs	r6, #0
 80897fa:	ea4f 72dc 	mov.w	r2, ip, lsr #31
 80897fe:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8089802:	f04f 0e16 	mov.w	lr, #22
 8089806:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 808980a:	4634      	mov	r4, r6
 808980c:	107f      	asrs	r7, r7, #1
 808980e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8089812:	18a1      	adds	r1, r4, r2
 8089814:	4299      	cmp	r1, r3
 8089816:	dc02      	bgt.n	808981e <__ieee754_sqrt+0x5e>
 8089818:	1a5b      	subs	r3, r3, r1
 808981a:	188c      	adds	r4, r1, r2
 808981c:	4416      	add	r6, r2
 808981e:	005b      	lsls	r3, r3, #1
 8089820:	f1be 0e01 	subs.w	lr, lr, #1
 8089824:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
 8089828:	ea4f 0252 	mov.w	r2, r2, lsr #1
 808982c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8089830:	d1ef      	bne.n	8089812 <__ieee754_sqrt+0x52>
 8089832:	4675      	mov	r5, lr
 8089834:	2020      	movs	r0, #32
 8089836:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 808983a:	e00a      	b.n	8089852 <__ieee754_sqrt+0x92>
 808983c:	d043      	beq.n	80898c6 <__ieee754_sqrt+0x106>
 808983e:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8089842:	3801      	subs	r0, #1
 8089844:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8089848:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 808984c:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8089850:	d042      	beq.n	80898d8 <__ieee754_sqrt+0x118>
 8089852:	42a3      	cmp	r3, r4
 8089854:	eb02 010e 	add.w	r1, r2, lr
 8089858:	ddf0      	ble.n	808983c <__ieee754_sqrt+0x7c>
 808985a:	2900      	cmp	r1, #0
 808985c:	eb01 0e02 	add.w	lr, r1, r2
 8089860:	db0a      	blt.n	8089878 <__ieee754_sqrt+0xb8>
 8089862:	46a0      	mov	r8, r4
 8089864:	1b1b      	subs	r3, r3, r4
 8089866:	4561      	cmp	r1, ip
 8089868:	bf88      	it	hi
 808986a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 808986e:	4644      	mov	r4, r8
 8089870:	ebac 0c01 	sub.w	ip, ip, r1
 8089874:	4415      	add	r5, r2
 8089876:	e7e2      	b.n	808983e <__ieee754_sqrt+0x7e>
 8089878:	f1be 0f00 	cmp.w	lr, #0
 808987c:	dbf1      	blt.n	8089862 <__ieee754_sqrt+0xa2>
 808987e:	f104 0801 	add.w	r8, r4, #1
 8089882:	e7ef      	b.n	8089864 <__ieee754_sqrt+0xa4>
 8089884:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8089888:	4302      	orrs	r2, r0
 808988a:	d036      	beq.n	80898fa <__ieee754_sqrt+0x13a>
 808988c:	2900      	cmp	r1, #0
 808988e:	d14c      	bne.n	808992a <__ieee754_sqrt+0x16a>
 8089890:	ea4f 22dc 	mov.w	r2, ip, lsr #11
 8089894:	4613      	mov	r3, r2
 8089896:	3915      	subs	r1, #21
 8089898:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
 808989c:	2a00      	cmp	r2, #0
 808989e:	d0f7      	beq.n	8089890 <__ieee754_sqrt+0xd0>
 80898a0:	02d6      	lsls	r6, r2, #11
 80898a2:	d44c      	bmi.n	808993e <__ieee754_sqrt+0x17e>
 80898a4:	2000      	movs	r0, #0
 80898a6:	005b      	lsls	r3, r3, #1
 80898a8:	02dd      	lsls	r5, r3, #11
 80898aa:	4604      	mov	r4, r0
 80898ac:	f100 0001 	add.w	r0, r0, #1
 80898b0:	d5f9      	bpl.n	80898a6 <__ieee754_sqrt+0xe6>
 80898b2:	461a      	mov	r2, r3
 80898b4:	4663      	mov	r3, ip
 80898b6:	fa0c fc00 	lsl.w	ip, ip, r0
 80898ba:	f1c0 0020 	rsb	r0, r0, #32
 80898be:	40c3      	lsrs	r3, r0
 80898c0:	1b09      	subs	r1, r1, r4
 80898c2:	4313      	orrs	r3, r2
 80898c4:	e78b      	b.n	80897de <__ieee754_sqrt+0x1e>
 80898c6:	4561      	cmp	r1, ip
 80898c8:	d8b9      	bhi.n	808983e <__ieee754_sqrt+0x7e>
 80898ca:	2900      	cmp	r1, #0
 80898cc:	eb01 0e02 	add.w	lr, r1, r2
 80898d0:	dbd2      	blt.n	8089878 <__ieee754_sqrt+0xb8>
 80898d2:	4698      	mov	r8, r3
 80898d4:	2300      	movs	r3, #0
 80898d6:	e7ca      	b.n	808986e <__ieee754_sqrt+0xae>
 80898d8:	ea53 030c 	orrs.w	r3, r3, ip
 80898dc:	d111      	bne.n	8089902 <__ieee754_sqrt+0x142>
 80898de:	0868      	lsrs	r0, r5, #1
 80898e0:	1073      	asrs	r3, r6, #1
 80898e2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80898e6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80898ea:	07f2      	lsls	r2, r6, #31
 80898ec:	bf48      	it	mi
 80898ee:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
 80898f2:	eb03 5907 	add.w	r9, r3, r7, lsl #20
 80898f6:	4605      	mov	r5, r0
 80898f8:	464c      	mov	r4, r9
 80898fa:	4628      	mov	r0, r5
 80898fc:	4621      	mov	r1, r4
 80898fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8089902:	1c69      	adds	r1, r5, #1
 8089904:	bf16      	itet	ne
 8089906:	1c68      	addne	r0, r5, #1
 8089908:	3601      	addeq	r6, #1
 808990a:	0840      	lsrne	r0, r0, #1
 808990c:	e7e8      	b.n	80898e0 <__ieee754_sqrt+0x120>
 808990e:	4602      	mov	r2, r0
 8089910:	460b      	mov	r3, r1
 8089912:	f000 fb03 	bl	8089f1c <__aeabi_dmul>
 8089916:	462a      	mov	r2, r5
 8089918:	4623      	mov	r3, r4
 808991a:	f000 f949 	bl	8089bb0 <__adddf3>
 808991e:	4605      	mov	r5, r0
 8089920:	460c      	mov	r4, r1
 8089922:	4628      	mov	r0, r5
 8089924:	4621      	mov	r1, r4
 8089926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808992a:	4602      	mov	r2, r0
 808992c:	f000 f93e 	bl	8089bac <__aeabi_dsub>
 8089930:	4602      	mov	r2, r0
 8089932:	460b      	mov	r3, r1
 8089934:	f000 fc1c 	bl	808a170 <__aeabi_ddiv>
 8089938:	4605      	mov	r5, r0
 808993a:	460c      	mov	r4, r1
 808993c:	e7dd      	b.n	80898fa <__ieee754_sqrt+0x13a>
 808993e:	4663      	mov	r3, ip
 8089940:	2020      	movs	r0, #32
 8089942:	f04f 34ff 	mov.w	r4, #4294967295
 8089946:	e7ba      	b.n	80898be <__ieee754_sqrt+0xfe>
 8089948:	7ff00000 	.word	0x7ff00000

0808994c <fabs>:
 808994c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8089950:	4770      	bx	lr
 8089952:	bf00      	nop

08089954 <finite>:
 8089954:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8089958:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 808995c:	0fc0      	lsrs	r0, r0, #31
 808995e:	4770      	bx	lr

08089960 <nan>:
 8089960:	2000      	movs	r0, #0
 8089962:	4901      	ldr	r1, [pc, #4]	; (8089968 <nan+0x8>)
 8089964:	4770      	bx	lr
 8089966:	bf00      	nop
 8089968:	7ff80000 	.word	0x7ff80000

0808996c <rint>:
 808996c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808996e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8089972:	f2a5 3cff 	subw	ip, r5, #1023	; 0x3ff
 8089976:	f1bc 0f13 	cmp.w	ip, #19
 808997a:	4602      	mov	r2, r0
 808997c:	460b      	mov	r3, r1
 808997e:	460c      	mov	r4, r1
 8089980:	4686      	mov	lr, r0
 8089982:	b083      	sub	sp, #12
 8089984:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 8089988:	dc65      	bgt.n	8089a56 <rint+0xea>
 808998a:	f1bc 0f00 	cmp.w	ip, #0
 808998e:	db30      	blt.n	80899f2 <rint+0x86>
 8089990:	4942      	ldr	r1, [pc, #264]	; (8089a9c <rint+0x130>)
 8089992:	fa41 f10c 	asr.w	r1, r1, ip
 8089996:	ea03 0001 	and.w	r0, r3, r1
 808999a:	4310      	orrs	r0, r2
 808999c:	d061      	beq.n	8089a62 <rint+0xf6>
 808999e:	ea03 0351 	and.w	r3, r3, r1, lsr #1
 80899a2:	ea52 0e03 	orrs.w	lr, r2, r3
 80899a6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80899aa:	d00d      	beq.n	80899c8 <rint+0x5c>
 80899ac:	ea24 0101 	bic.w	r1, r4, r1
 80899b0:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 80899b4:	f1bc 0f13 	cmp.w	ip, #19
 80899b8:	bf0c      	ite	eq
 80899ba:	f04f 4e00 	moveq.w	lr, #2147483648	; 0x80000000
 80899be:	f04f 0e00 	movne.w	lr, #0
 80899c2:	fa44 f40c 	asr.w	r4, r4, ip
 80899c6:	430c      	orrs	r4, r1
 80899c8:	4935      	ldr	r1, [pc, #212]	; (8089aa0 <rint+0x134>)
 80899ca:	4623      	mov	r3, r4
 80899cc:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 80899d0:	e9d6 6700 	ldrd	r6, r7, [r6]
 80899d4:	4672      	mov	r2, lr
 80899d6:	4630      	mov	r0, r6
 80899d8:	4639      	mov	r1, r7
 80899da:	f000 f8e9 	bl	8089bb0 <__adddf3>
 80899de:	e9cd 0100 	strd	r0, r1, [sp]
 80899e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80899e6:	4632      	mov	r2, r6
 80899e8:	463b      	mov	r3, r7
 80899ea:	f000 f8df 	bl	8089bac <__aeabi_dsub>
 80899ee:	b003      	add	sp, #12
 80899f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80899f2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80899f6:	4301      	orrs	r1, r0
 80899f8:	4619      	mov	r1, r3
 80899fa:	d0f8      	beq.n	80899ee <rint+0x82>
 80899fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8089a00:	ea43 0e00 	orr.w	lr, r3, r0
 8089a04:	f1ce 0300 	rsb	r3, lr, #0
 8089a08:	ea43 030e 	orr.w	r3, r3, lr
 8089a0c:	0c62      	lsrs	r2, r4, #17
 8089a0e:	0b1b      	lsrs	r3, r3, #12
 8089a10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8089a14:	0452      	lsls	r2, r2, #17
 8089a16:	ea43 0102 	orr.w	r1, r3, r2
 8089a1a:	460b      	mov	r3, r1
 8089a1c:	4920      	ldr	r1, [pc, #128]	; (8089aa0 <rint+0x134>)
 8089a1e:	4602      	mov	r2, r0
 8089a20:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 8089a24:	e9d6 6700 	ldrd	r6, r7, [r6]
 8089a28:	4630      	mov	r0, r6
 8089a2a:	4639      	mov	r1, r7
 8089a2c:	f000 f8c0 	bl	8089bb0 <__adddf3>
 8089a30:	e9cd 0100 	strd	r0, r1, [sp]
 8089a34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8089a38:	4632      	mov	r2, r6
 8089a3a:	463b      	mov	r3, r7
 8089a3c:	f000 f8b6 	bl	8089bac <__aeabi_dsub>
 8089a40:	4602      	mov	r2, r0
 8089a42:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 8089a46:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8089a4a:	ea41 0304 	orr.w	r3, r1, r4
 8089a4e:	4610      	mov	r0, r2
 8089a50:	4619      	mov	r1, r3
 8089a52:	b003      	add	sp, #12
 8089a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8089a56:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 8089a5a:	dd06      	ble.n	8089a6a <rint+0xfe>
 8089a5c:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 8089a60:	d018      	beq.n	8089a94 <rint+0x128>
 8089a62:	4610      	mov	r0, r2
 8089a64:	4619      	mov	r1, r3
 8089a66:	b003      	add	sp, #12
 8089a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8089a6a:	f04f 31ff 	mov.w	r1, #4294967295
 8089a6e:	f2a5 4513 	subw	r5, r5, #1043	; 0x413
 8089a72:	40e9      	lsrs	r1, r5
 8089a74:	4208      	tst	r0, r1
 8089a76:	d0f4      	beq.n	8089a62 <rint+0xf6>
 8089a78:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 8089a7c:	ea4f 0351 	mov.w	r3, r1, lsr #1
 8089a80:	d0a2      	beq.n	80899c8 <rint+0x5c>
 8089a82:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
 8089a86:	ea20 0303 	bic.w	r3, r0, r3
 8089a8a:	fa4e f505 	asr.w	r5, lr, r5
 8089a8e:	ea43 0e05 	orr.w	lr, r3, r5
 8089a92:	e799      	b.n	80899c8 <rint+0x5c>
 8089a94:	f000 f88c 	bl	8089bb0 <__adddf3>
 8089a98:	e7a9      	b.n	80899ee <rint+0x82>
 8089a9a:	bf00      	nop
 8089a9c:	000fffff 	.word	0x000fffff
 8089aa0:	0808bdf8 	.word	0x0808bdf8
 8089aa4:	00000000 	.word	0x00000000

08089aa8 <scalbn>:
 8089aa8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8089aac:	b570      	push	{r4, r5, r6, lr}
 8089aae:	468c      	mov	ip, r1
 8089ab0:	4604      	mov	r4, r0
 8089ab2:	460d      	mov	r5, r1
 8089ab4:	4616      	mov	r6, r2
 8089ab6:	bb7b      	cbnz	r3, 8089b18 <scalbn+0x70>
 8089ab8:	4603      	mov	r3, r0
 8089aba:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8089abe:	ea5c 0303 	orrs.w	r3, ip, r3
 8089ac2:	d028      	beq.n	8089b16 <scalbn+0x6e>
 8089ac4:	4b32      	ldr	r3, [pc, #200]	; (8089b90 <scalbn+0xe8>)
 8089ac6:	2200      	movs	r2, #0
 8089ac8:	f000 fa28 	bl	8089f1c <__aeabi_dmul>
 8089acc:	4b31      	ldr	r3, [pc, #196]	; (8089b94 <scalbn+0xec>)
 8089ace:	4604      	mov	r4, r0
 8089ad0:	429e      	cmp	r6, r3
 8089ad2:	460d      	mov	r5, r1
 8089ad4:	db1a      	blt.n	8089b0c <scalbn+0x64>
 8089ad6:	468c      	mov	ip, r1
 8089ad8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8089adc:	3b36      	subs	r3, #54	; 0x36
 8089ade:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8089ae2:	4433      	add	r3, r6
 8089ae4:	4293      	cmp	r3, r2
 8089ae6:	dc20      	bgt.n	8089b2a <scalbn+0x82>
 8089ae8:	2b00      	cmp	r3, #0
 8089aea:	dc3e      	bgt.n	8089b6a <scalbn+0xc2>
 8089aec:	f113 0f35 	cmn.w	r3, #53	; 0x35
 8089af0:	da2c      	bge.n	8089b4c <scalbn+0xa4>
 8089af2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8089af6:	429e      	cmp	r6, r3
 8089af8:	dc17      	bgt.n	8089b2a <scalbn+0x82>
 8089afa:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8089afe:	f043 71d2 	orr.w	r1, r3, #27525120	; 0x1a40000
 8089b02:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8089b06:	4824      	ldr	r0, [pc, #144]	; (8089b98 <scalbn+0xf0>)
 8089b08:	f041 011f 	orr.w	r1, r1, #31
 8089b0c:	a31c      	add	r3, pc, #112	; (adr r3, 8089b80 <scalbn+0xd8>)
 8089b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8089b12:	f000 fa03 	bl	8089f1c <__aeabi_dmul>
 8089b16:	bd70      	pop	{r4, r5, r6, pc}
 8089b18:	f240 7eff 	movw	lr, #2047	; 0x7ff
 8089b1c:	4573      	cmp	r3, lr
 8089b1e:	d1de      	bne.n	8089ade <scalbn+0x36>
 8089b20:	4602      	mov	r2, r0
 8089b22:	460b      	mov	r3, r1
 8089b24:	f000 f844 	bl	8089bb0 <__adddf3>
 8089b28:	bd70      	pop	{r4, r5, r6, pc}
 8089b2a:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8089b2e:	f043 41fc 	orr.w	r1, r3, #2113929216	; 0x7e000000
 8089b32:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8089b36:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8089b3a:	a313      	add	r3, pc, #76	; (adr r3, 8089b88 <scalbn+0xe0>)
 8089b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8089b40:	4816      	ldr	r0, [pc, #88]	; (8089b9c <scalbn+0xf4>)
 8089b42:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8089b46:	f000 f9e9 	bl	8089f1c <__aeabi_dmul>
 8089b4a:	bd70      	pop	{r4, r5, r6, pc}
 8089b4c:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
 8089b50:	f103 0136 	add.w	r1, r3, #54	; 0x36
 8089b54:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
 8089b58:	ea4c 5501 	orr.w	r5, ip, r1, lsl #20
 8089b5c:	2200      	movs	r2, #0
 8089b5e:	4620      	mov	r0, r4
 8089b60:	4629      	mov	r1, r5
 8089b62:	4b0f      	ldr	r3, [pc, #60]	; (8089ba0 <scalbn+0xf8>)
 8089b64:	f000 f9da 	bl	8089f1c <__aeabi_dmul>
 8089b68:	bd70      	pop	{r4, r5, r6, pc}
 8089b6a:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
 8089b6e:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
 8089b72:	4620      	mov	r0, r4
 8089b74:	ea4c 5103 	orr.w	r1, ip, r3, lsl #20
 8089b78:	bd70      	pop	{r4, r5, r6, pc}
 8089b7a:	bf00      	nop
 8089b7c:	f3af 8000 	nop.w
 8089b80:	c2f8f359 	.word	0xc2f8f359
 8089b84:	01a56e1f 	.word	0x01a56e1f
 8089b88:	8800759c 	.word	0x8800759c
 8089b8c:	7e37e43c 	.word	0x7e37e43c
 8089b90:	43500000 	.word	0x43500000
 8089b94:	ffff3cb0 	.word	0xffff3cb0
 8089b98:	c2f8f359 	.word	0xc2f8f359
 8089b9c:	8800759c 	.word	0x8800759c
 8089ba0:	3c900000 	.word	0x3c900000

08089ba4 <__aeabi_drsub>:
 8089ba4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8089ba8:	e002      	b.n	8089bb0 <__adddf3>
 8089baa:	bf00      	nop

08089bac <__aeabi_dsub>:
 8089bac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08089bb0 <__adddf3>:
 8089bb0:	b530      	push	{r4, r5, lr}
 8089bb2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8089bb6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8089bba:	ea94 0f05 	teq	r4, r5
 8089bbe:	bf08      	it	eq
 8089bc0:	ea90 0f02 	teqeq	r0, r2
 8089bc4:	bf1f      	itttt	ne
 8089bc6:	ea54 0c00 	orrsne.w	ip, r4, r0
 8089bca:	ea55 0c02 	orrsne.w	ip, r5, r2
 8089bce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8089bd2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8089bd6:	f000 80e2 	beq.w	8089d9e <__adddf3+0x1ee>
 8089bda:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8089bde:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8089be2:	bfb8      	it	lt
 8089be4:	426d      	neglt	r5, r5
 8089be6:	dd0c      	ble.n	8089c02 <__adddf3+0x52>
 8089be8:	442c      	add	r4, r5
 8089bea:	ea80 0202 	eor.w	r2, r0, r2
 8089bee:	ea81 0303 	eor.w	r3, r1, r3
 8089bf2:	ea82 0000 	eor.w	r0, r2, r0
 8089bf6:	ea83 0101 	eor.w	r1, r3, r1
 8089bfa:	ea80 0202 	eor.w	r2, r0, r2
 8089bfe:	ea81 0303 	eor.w	r3, r1, r3
 8089c02:	2d36      	cmp	r5, #54	; 0x36
 8089c04:	bf88      	it	hi
 8089c06:	bd30      	pophi	{r4, r5, pc}
 8089c08:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8089c0c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8089c10:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8089c14:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8089c18:	d002      	beq.n	8089c20 <__adddf3+0x70>
 8089c1a:	4240      	negs	r0, r0
 8089c1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8089c20:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8089c24:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8089c28:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8089c2c:	d002      	beq.n	8089c34 <__adddf3+0x84>
 8089c2e:	4252      	negs	r2, r2
 8089c30:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8089c34:	ea94 0f05 	teq	r4, r5
 8089c38:	f000 80a7 	beq.w	8089d8a <__adddf3+0x1da>
 8089c3c:	f1a4 0401 	sub.w	r4, r4, #1
 8089c40:	f1d5 0e20 	rsbs	lr, r5, #32
 8089c44:	db0d      	blt.n	8089c62 <__adddf3+0xb2>
 8089c46:	fa02 fc0e 	lsl.w	ip, r2, lr
 8089c4a:	fa22 f205 	lsr.w	r2, r2, r5
 8089c4e:	1880      	adds	r0, r0, r2
 8089c50:	f141 0100 	adc.w	r1, r1, #0
 8089c54:	fa03 f20e 	lsl.w	r2, r3, lr
 8089c58:	1880      	adds	r0, r0, r2
 8089c5a:	fa43 f305 	asr.w	r3, r3, r5
 8089c5e:	4159      	adcs	r1, r3
 8089c60:	e00e      	b.n	8089c80 <__adddf3+0xd0>
 8089c62:	f1a5 0520 	sub.w	r5, r5, #32
 8089c66:	f10e 0e20 	add.w	lr, lr, #32
 8089c6a:	2a01      	cmp	r2, #1
 8089c6c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8089c70:	bf28      	it	cs
 8089c72:	f04c 0c02 	orrcs.w	ip, ip, #2
 8089c76:	fa43 f305 	asr.w	r3, r3, r5
 8089c7a:	18c0      	adds	r0, r0, r3
 8089c7c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8089c80:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8089c84:	d507      	bpl.n	8089c96 <__adddf3+0xe6>
 8089c86:	f04f 0e00 	mov.w	lr, #0
 8089c8a:	f1dc 0c00 	rsbs	ip, ip, #0
 8089c8e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8089c92:	eb6e 0101 	sbc.w	r1, lr, r1
 8089c96:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8089c9a:	d31b      	bcc.n	8089cd4 <__adddf3+0x124>
 8089c9c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8089ca0:	d30c      	bcc.n	8089cbc <__adddf3+0x10c>
 8089ca2:	0849      	lsrs	r1, r1, #1
 8089ca4:	ea5f 0030 	movs.w	r0, r0, rrx
 8089ca8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8089cac:	f104 0401 	add.w	r4, r4, #1
 8089cb0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8089cb4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8089cb8:	f080 809a 	bcs.w	8089df0 <__adddf3+0x240>
 8089cbc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8089cc0:	bf08      	it	eq
 8089cc2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8089cc6:	f150 0000 	adcs.w	r0, r0, #0
 8089cca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8089cce:	ea41 0105 	orr.w	r1, r1, r5
 8089cd2:	bd30      	pop	{r4, r5, pc}
 8089cd4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8089cd8:	4140      	adcs	r0, r0
 8089cda:	eb41 0101 	adc.w	r1, r1, r1
 8089cde:	3c01      	subs	r4, #1
 8089ce0:	bf28      	it	cs
 8089ce2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8089ce6:	d2e9      	bcs.n	8089cbc <__adddf3+0x10c>
 8089ce8:	f091 0f00 	teq	r1, #0
 8089cec:	bf04      	itt	eq
 8089cee:	4601      	moveq	r1, r0
 8089cf0:	2000      	moveq	r0, #0
 8089cf2:	fab1 f381 	clz	r3, r1
 8089cf6:	bf08      	it	eq
 8089cf8:	3320      	addeq	r3, #32
 8089cfa:	f1a3 030b 	sub.w	r3, r3, #11
 8089cfe:	f1b3 0220 	subs.w	r2, r3, #32
 8089d02:	da0c      	bge.n	8089d1e <__adddf3+0x16e>
 8089d04:	320c      	adds	r2, #12
 8089d06:	dd08      	ble.n	8089d1a <__adddf3+0x16a>
 8089d08:	f102 0c14 	add.w	ip, r2, #20
 8089d0c:	f1c2 020c 	rsb	r2, r2, #12
 8089d10:	fa01 f00c 	lsl.w	r0, r1, ip
 8089d14:	fa21 f102 	lsr.w	r1, r1, r2
 8089d18:	e00c      	b.n	8089d34 <__adddf3+0x184>
 8089d1a:	f102 0214 	add.w	r2, r2, #20
 8089d1e:	bfd8      	it	le
 8089d20:	f1c2 0c20 	rsble	ip, r2, #32
 8089d24:	fa01 f102 	lsl.w	r1, r1, r2
 8089d28:	fa20 fc0c 	lsr.w	ip, r0, ip
 8089d2c:	bfdc      	itt	le
 8089d2e:	ea41 010c 	orrle.w	r1, r1, ip
 8089d32:	4090      	lslle	r0, r2
 8089d34:	1ae4      	subs	r4, r4, r3
 8089d36:	bfa2      	ittt	ge
 8089d38:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8089d3c:	4329      	orrge	r1, r5
 8089d3e:	bd30      	popge	{r4, r5, pc}
 8089d40:	ea6f 0404 	mvn.w	r4, r4
 8089d44:	3c1f      	subs	r4, #31
 8089d46:	da1c      	bge.n	8089d82 <__adddf3+0x1d2>
 8089d48:	340c      	adds	r4, #12
 8089d4a:	dc0e      	bgt.n	8089d6a <__adddf3+0x1ba>
 8089d4c:	f104 0414 	add.w	r4, r4, #20
 8089d50:	f1c4 0220 	rsb	r2, r4, #32
 8089d54:	fa20 f004 	lsr.w	r0, r0, r4
 8089d58:	fa01 f302 	lsl.w	r3, r1, r2
 8089d5c:	ea40 0003 	orr.w	r0, r0, r3
 8089d60:	fa21 f304 	lsr.w	r3, r1, r4
 8089d64:	ea45 0103 	orr.w	r1, r5, r3
 8089d68:	bd30      	pop	{r4, r5, pc}
 8089d6a:	f1c4 040c 	rsb	r4, r4, #12
 8089d6e:	f1c4 0220 	rsb	r2, r4, #32
 8089d72:	fa20 f002 	lsr.w	r0, r0, r2
 8089d76:	fa01 f304 	lsl.w	r3, r1, r4
 8089d7a:	ea40 0003 	orr.w	r0, r0, r3
 8089d7e:	4629      	mov	r1, r5
 8089d80:	bd30      	pop	{r4, r5, pc}
 8089d82:	fa21 f004 	lsr.w	r0, r1, r4
 8089d86:	4629      	mov	r1, r5
 8089d88:	bd30      	pop	{r4, r5, pc}
 8089d8a:	f094 0f00 	teq	r4, #0
 8089d8e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8089d92:	bf06      	itte	eq
 8089d94:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8089d98:	3401      	addeq	r4, #1
 8089d9a:	3d01      	subne	r5, #1
 8089d9c:	e74e      	b.n	8089c3c <__adddf3+0x8c>
 8089d9e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8089da2:	bf18      	it	ne
 8089da4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8089da8:	d029      	beq.n	8089dfe <__adddf3+0x24e>
 8089daa:	ea94 0f05 	teq	r4, r5
 8089dae:	bf08      	it	eq
 8089db0:	ea90 0f02 	teqeq	r0, r2
 8089db4:	d005      	beq.n	8089dc2 <__adddf3+0x212>
 8089db6:	ea54 0c00 	orrs.w	ip, r4, r0
 8089dba:	bf04      	itt	eq
 8089dbc:	4619      	moveq	r1, r3
 8089dbe:	4610      	moveq	r0, r2
 8089dc0:	bd30      	pop	{r4, r5, pc}
 8089dc2:	ea91 0f03 	teq	r1, r3
 8089dc6:	bf1e      	ittt	ne
 8089dc8:	2100      	movne	r1, #0
 8089dca:	2000      	movne	r0, #0
 8089dcc:	bd30      	popne	{r4, r5, pc}
 8089dce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8089dd2:	d105      	bne.n	8089de0 <__adddf3+0x230>
 8089dd4:	0040      	lsls	r0, r0, #1
 8089dd6:	4149      	adcs	r1, r1
 8089dd8:	bf28      	it	cs
 8089dda:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8089dde:	bd30      	pop	{r4, r5, pc}
 8089de0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8089de4:	bf3c      	itt	cc
 8089de6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8089dea:	bd30      	popcc	{r4, r5, pc}
 8089dec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8089df0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8089df4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8089df8:	f04f 0000 	mov.w	r0, #0
 8089dfc:	bd30      	pop	{r4, r5, pc}
 8089dfe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8089e02:	bf1a      	itte	ne
 8089e04:	4619      	movne	r1, r3
 8089e06:	4610      	movne	r0, r2
 8089e08:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8089e0c:	bf1c      	itt	ne
 8089e0e:	460b      	movne	r3, r1
 8089e10:	4602      	movne	r2, r0
 8089e12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8089e16:	bf06      	itte	eq
 8089e18:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8089e1c:	ea91 0f03 	teqeq	r1, r3
 8089e20:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8089e24:	bd30      	pop	{r4, r5, pc}
 8089e26:	bf00      	nop

08089e28 <__aeabi_ui2d>:
 8089e28:	f090 0f00 	teq	r0, #0
 8089e2c:	bf04      	itt	eq
 8089e2e:	2100      	moveq	r1, #0
 8089e30:	4770      	bxeq	lr
 8089e32:	b530      	push	{r4, r5, lr}
 8089e34:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8089e38:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8089e3c:	f04f 0500 	mov.w	r5, #0
 8089e40:	f04f 0100 	mov.w	r1, #0
 8089e44:	e750      	b.n	8089ce8 <__adddf3+0x138>
 8089e46:	bf00      	nop

08089e48 <__aeabi_i2d>:
 8089e48:	f090 0f00 	teq	r0, #0
 8089e4c:	bf04      	itt	eq
 8089e4e:	2100      	moveq	r1, #0
 8089e50:	4770      	bxeq	lr
 8089e52:	b530      	push	{r4, r5, lr}
 8089e54:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8089e58:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8089e5c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8089e60:	bf48      	it	mi
 8089e62:	4240      	negmi	r0, r0
 8089e64:	f04f 0100 	mov.w	r1, #0
 8089e68:	e73e      	b.n	8089ce8 <__adddf3+0x138>
 8089e6a:	bf00      	nop

08089e6c <__aeabi_f2d>:
 8089e6c:	0042      	lsls	r2, r0, #1
 8089e6e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8089e72:	ea4f 0131 	mov.w	r1, r1, rrx
 8089e76:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8089e7a:	bf1f      	itttt	ne
 8089e7c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8089e80:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8089e84:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8089e88:	4770      	bxne	lr
 8089e8a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8089e8e:	bf08      	it	eq
 8089e90:	4770      	bxeq	lr
 8089e92:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8089e96:	bf04      	itt	eq
 8089e98:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8089e9c:	4770      	bxeq	lr
 8089e9e:	b530      	push	{r4, r5, lr}
 8089ea0:	f44f 7460 	mov.w	r4, #896	; 0x380
 8089ea4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8089ea8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8089eac:	e71c      	b.n	8089ce8 <__adddf3+0x138>
 8089eae:	bf00      	nop

08089eb0 <__aeabi_ul2d>:
 8089eb0:	ea50 0201 	orrs.w	r2, r0, r1
 8089eb4:	bf08      	it	eq
 8089eb6:	4770      	bxeq	lr
 8089eb8:	b530      	push	{r4, r5, lr}
 8089eba:	f04f 0500 	mov.w	r5, #0
 8089ebe:	e00a      	b.n	8089ed6 <__aeabi_l2d+0x16>

08089ec0 <__aeabi_l2d>:
 8089ec0:	ea50 0201 	orrs.w	r2, r0, r1
 8089ec4:	bf08      	it	eq
 8089ec6:	4770      	bxeq	lr
 8089ec8:	b530      	push	{r4, r5, lr}
 8089eca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8089ece:	d502      	bpl.n	8089ed6 <__aeabi_l2d+0x16>
 8089ed0:	4240      	negs	r0, r0
 8089ed2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8089ed6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8089eda:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8089ede:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8089ee2:	f43f aed8 	beq.w	8089c96 <__adddf3+0xe6>
 8089ee6:	f04f 0203 	mov.w	r2, #3
 8089eea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8089eee:	bf18      	it	ne
 8089ef0:	3203      	addne	r2, #3
 8089ef2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8089ef6:	bf18      	it	ne
 8089ef8:	3203      	addne	r2, #3
 8089efa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8089efe:	f1c2 0320 	rsb	r3, r2, #32
 8089f02:	fa00 fc03 	lsl.w	ip, r0, r3
 8089f06:	fa20 f002 	lsr.w	r0, r0, r2
 8089f0a:	fa01 fe03 	lsl.w	lr, r1, r3
 8089f0e:	ea40 000e 	orr.w	r0, r0, lr
 8089f12:	fa21 f102 	lsr.w	r1, r1, r2
 8089f16:	4414      	add	r4, r2
 8089f18:	e6bd      	b.n	8089c96 <__adddf3+0xe6>
 8089f1a:	bf00      	nop

08089f1c <__aeabi_dmul>:
 8089f1c:	b570      	push	{r4, r5, r6, lr}
 8089f1e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8089f22:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8089f26:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8089f2a:	bf1d      	ittte	ne
 8089f2c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8089f30:	ea94 0f0c 	teqne	r4, ip
 8089f34:	ea95 0f0c 	teqne	r5, ip
 8089f38:	f000 f8de 	bleq	808a0f8 <__aeabi_dmul+0x1dc>
 8089f3c:	442c      	add	r4, r5
 8089f3e:	ea81 0603 	eor.w	r6, r1, r3
 8089f42:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8089f46:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8089f4a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8089f4e:	bf18      	it	ne
 8089f50:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8089f54:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8089f58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8089f5c:	d038      	beq.n	8089fd0 <__aeabi_dmul+0xb4>
 8089f5e:	fba0 ce02 	umull	ip, lr, r0, r2
 8089f62:	f04f 0500 	mov.w	r5, #0
 8089f66:	fbe1 e502 	umlal	lr, r5, r1, r2
 8089f6a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8089f6e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8089f72:	f04f 0600 	mov.w	r6, #0
 8089f76:	fbe1 5603 	umlal	r5, r6, r1, r3
 8089f7a:	f09c 0f00 	teq	ip, #0
 8089f7e:	bf18      	it	ne
 8089f80:	f04e 0e01 	orrne.w	lr, lr, #1
 8089f84:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8089f88:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8089f8c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8089f90:	d204      	bcs.n	8089f9c <__aeabi_dmul+0x80>
 8089f92:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8089f96:	416d      	adcs	r5, r5
 8089f98:	eb46 0606 	adc.w	r6, r6, r6
 8089f9c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8089fa0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8089fa4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8089fa8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8089fac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8089fb0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8089fb4:	bf88      	it	hi
 8089fb6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8089fba:	d81e      	bhi.n	8089ffa <__aeabi_dmul+0xde>
 8089fbc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8089fc0:	bf08      	it	eq
 8089fc2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8089fc6:	f150 0000 	adcs.w	r0, r0, #0
 8089fca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8089fce:	bd70      	pop	{r4, r5, r6, pc}
 8089fd0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8089fd4:	ea46 0101 	orr.w	r1, r6, r1
 8089fd8:	ea40 0002 	orr.w	r0, r0, r2
 8089fdc:	ea81 0103 	eor.w	r1, r1, r3
 8089fe0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8089fe4:	bfc2      	ittt	gt
 8089fe6:	ebd4 050c 	rsbsgt	r5, r4, ip
 8089fea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8089fee:	bd70      	popgt	{r4, r5, r6, pc}
 8089ff0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8089ff4:	f04f 0e00 	mov.w	lr, #0
 8089ff8:	3c01      	subs	r4, #1
 8089ffa:	f300 80ab 	bgt.w	808a154 <__aeabi_dmul+0x238>
 8089ffe:	f114 0f36 	cmn.w	r4, #54	; 0x36
 808a002:	bfde      	ittt	le
 808a004:	2000      	movle	r0, #0
 808a006:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 808a00a:	bd70      	pople	{r4, r5, r6, pc}
 808a00c:	f1c4 0400 	rsb	r4, r4, #0
 808a010:	3c20      	subs	r4, #32
 808a012:	da35      	bge.n	808a080 <__aeabi_dmul+0x164>
 808a014:	340c      	adds	r4, #12
 808a016:	dc1b      	bgt.n	808a050 <__aeabi_dmul+0x134>
 808a018:	f104 0414 	add.w	r4, r4, #20
 808a01c:	f1c4 0520 	rsb	r5, r4, #32
 808a020:	fa00 f305 	lsl.w	r3, r0, r5
 808a024:	fa20 f004 	lsr.w	r0, r0, r4
 808a028:	fa01 f205 	lsl.w	r2, r1, r5
 808a02c:	ea40 0002 	orr.w	r0, r0, r2
 808a030:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 808a034:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 808a038:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 808a03c:	fa21 f604 	lsr.w	r6, r1, r4
 808a040:	eb42 0106 	adc.w	r1, r2, r6
 808a044:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808a048:	bf08      	it	eq
 808a04a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808a04e:	bd70      	pop	{r4, r5, r6, pc}
 808a050:	f1c4 040c 	rsb	r4, r4, #12
 808a054:	f1c4 0520 	rsb	r5, r4, #32
 808a058:	fa00 f304 	lsl.w	r3, r0, r4
 808a05c:	fa20 f005 	lsr.w	r0, r0, r5
 808a060:	fa01 f204 	lsl.w	r2, r1, r4
 808a064:	ea40 0002 	orr.w	r0, r0, r2
 808a068:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808a06c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 808a070:	f141 0100 	adc.w	r1, r1, #0
 808a074:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808a078:	bf08      	it	eq
 808a07a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808a07e:	bd70      	pop	{r4, r5, r6, pc}
 808a080:	f1c4 0520 	rsb	r5, r4, #32
 808a084:	fa00 f205 	lsl.w	r2, r0, r5
 808a088:	ea4e 0e02 	orr.w	lr, lr, r2
 808a08c:	fa20 f304 	lsr.w	r3, r0, r4
 808a090:	fa01 f205 	lsl.w	r2, r1, r5
 808a094:	ea43 0302 	orr.w	r3, r3, r2
 808a098:	fa21 f004 	lsr.w	r0, r1, r4
 808a09c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808a0a0:	fa21 f204 	lsr.w	r2, r1, r4
 808a0a4:	ea20 0002 	bic.w	r0, r0, r2
 808a0a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 808a0ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808a0b0:	bf08      	it	eq
 808a0b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808a0b6:	bd70      	pop	{r4, r5, r6, pc}
 808a0b8:	f094 0f00 	teq	r4, #0
 808a0bc:	d10f      	bne.n	808a0de <__aeabi_dmul+0x1c2>
 808a0be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 808a0c2:	0040      	lsls	r0, r0, #1
 808a0c4:	eb41 0101 	adc.w	r1, r1, r1
 808a0c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808a0cc:	bf08      	it	eq
 808a0ce:	3c01      	subeq	r4, #1
 808a0d0:	d0f7      	beq.n	808a0c2 <__aeabi_dmul+0x1a6>
 808a0d2:	ea41 0106 	orr.w	r1, r1, r6
 808a0d6:	f095 0f00 	teq	r5, #0
 808a0da:	bf18      	it	ne
 808a0dc:	4770      	bxne	lr
 808a0de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 808a0e2:	0052      	lsls	r2, r2, #1
 808a0e4:	eb43 0303 	adc.w	r3, r3, r3
 808a0e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 808a0ec:	bf08      	it	eq
 808a0ee:	3d01      	subeq	r5, #1
 808a0f0:	d0f7      	beq.n	808a0e2 <__aeabi_dmul+0x1c6>
 808a0f2:	ea43 0306 	orr.w	r3, r3, r6
 808a0f6:	4770      	bx	lr
 808a0f8:	ea94 0f0c 	teq	r4, ip
 808a0fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808a100:	bf18      	it	ne
 808a102:	ea95 0f0c 	teqne	r5, ip
 808a106:	d00c      	beq.n	808a122 <__aeabi_dmul+0x206>
 808a108:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808a10c:	bf18      	it	ne
 808a10e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808a112:	d1d1      	bne.n	808a0b8 <__aeabi_dmul+0x19c>
 808a114:	ea81 0103 	eor.w	r1, r1, r3
 808a118:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808a11c:	f04f 0000 	mov.w	r0, #0
 808a120:	bd70      	pop	{r4, r5, r6, pc}
 808a122:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808a126:	bf06      	itte	eq
 808a128:	4610      	moveq	r0, r2
 808a12a:	4619      	moveq	r1, r3
 808a12c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808a130:	d019      	beq.n	808a166 <__aeabi_dmul+0x24a>
 808a132:	ea94 0f0c 	teq	r4, ip
 808a136:	d102      	bne.n	808a13e <__aeabi_dmul+0x222>
 808a138:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 808a13c:	d113      	bne.n	808a166 <__aeabi_dmul+0x24a>
 808a13e:	ea95 0f0c 	teq	r5, ip
 808a142:	d105      	bne.n	808a150 <__aeabi_dmul+0x234>
 808a144:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 808a148:	bf1c      	itt	ne
 808a14a:	4610      	movne	r0, r2
 808a14c:	4619      	movne	r1, r3
 808a14e:	d10a      	bne.n	808a166 <__aeabi_dmul+0x24a>
 808a150:	ea81 0103 	eor.w	r1, r1, r3
 808a154:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808a158:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 808a15c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 808a160:	f04f 0000 	mov.w	r0, #0
 808a164:	bd70      	pop	{r4, r5, r6, pc}
 808a166:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 808a16a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 808a16e:	bd70      	pop	{r4, r5, r6, pc}

0808a170 <__aeabi_ddiv>:
 808a170:	b570      	push	{r4, r5, r6, lr}
 808a172:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808a176:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 808a17a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808a17e:	bf1d      	ittte	ne
 808a180:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 808a184:	ea94 0f0c 	teqne	r4, ip
 808a188:	ea95 0f0c 	teqne	r5, ip
 808a18c:	f000 f8a7 	bleq	808a2de <__aeabi_ddiv+0x16e>
 808a190:	eba4 0405 	sub.w	r4, r4, r5
 808a194:	ea81 0e03 	eor.w	lr, r1, r3
 808a198:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 808a19c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 808a1a0:	f000 8088 	beq.w	808a2b4 <__aeabi_ddiv+0x144>
 808a1a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 808a1a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 808a1ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 808a1b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 808a1b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 808a1b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 808a1bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 808a1c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 808a1c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 808a1c8:	429d      	cmp	r5, r3
 808a1ca:	bf08      	it	eq
 808a1cc:	4296      	cmpeq	r6, r2
 808a1ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 808a1d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 808a1d6:	d202      	bcs.n	808a1de <__aeabi_ddiv+0x6e>
 808a1d8:	085b      	lsrs	r3, r3, #1
 808a1da:	ea4f 0232 	mov.w	r2, r2, rrx
 808a1de:	1ab6      	subs	r6, r6, r2
 808a1e0:	eb65 0503 	sbc.w	r5, r5, r3
 808a1e4:	085b      	lsrs	r3, r3, #1
 808a1e6:	ea4f 0232 	mov.w	r2, r2, rrx
 808a1ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 808a1ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 808a1f2:	ebb6 0e02 	subs.w	lr, r6, r2
 808a1f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 808a1fa:	bf22      	ittt	cs
 808a1fc:	1ab6      	subcs	r6, r6, r2
 808a1fe:	4675      	movcs	r5, lr
 808a200:	ea40 000c 	orrcs.w	r0, r0, ip
 808a204:	085b      	lsrs	r3, r3, #1
 808a206:	ea4f 0232 	mov.w	r2, r2, rrx
 808a20a:	ebb6 0e02 	subs.w	lr, r6, r2
 808a20e:	eb75 0e03 	sbcs.w	lr, r5, r3
 808a212:	bf22      	ittt	cs
 808a214:	1ab6      	subcs	r6, r6, r2
 808a216:	4675      	movcs	r5, lr
 808a218:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808a21c:	085b      	lsrs	r3, r3, #1
 808a21e:	ea4f 0232 	mov.w	r2, r2, rrx
 808a222:	ebb6 0e02 	subs.w	lr, r6, r2
 808a226:	eb75 0e03 	sbcs.w	lr, r5, r3
 808a22a:	bf22      	ittt	cs
 808a22c:	1ab6      	subcs	r6, r6, r2
 808a22e:	4675      	movcs	r5, lr
 808a230:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808a234:	085b      	lsrs	r3, r3, #1
 808a236:	ea4f 0232 	mov.w	r2, r2, rrx
 808a23a:	ebb6 0e02 	subs.w	lr, r6, r2
 808a23e:	eb75 0e03 	sbcs.w	lr, r5, r3
 808a242:	bf22      	ittt	cs
 808a244:	1ab6      	subcs	r6, r6, r2
 808a246:	4675      	movcs	r5, lr
 808a248:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808a24c:	ea55 0e06 	orrs.w	lr, r5, r6
 808a250:	d018      	beq.n	808a284 <__aeabi_ddiv+0x114>
 808a252:	ea4f 1505 	mov.w	r5, r5, lsl #4
 808a256:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 808a25a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 808a25e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 808a262:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 808a266:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 808a26a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 808a26e:	d1c0      	bne.n	808a1f2 <__aeabi_ddiv+0x82>
 808a270:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808a274:	d10b      	bne.n	808a28e <__aeabi_ddiv+0x11e>
 808a276:	ea41 0100 	orr.w	r1, r1, r0
 808a27a:	f04f 0000 	mov.w	r0, #0
 808a27e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 808a282:	e7b6      	b.n	808a1f2 <__aeabi_ddiv+0x82>
 808a284:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808a288:	bf04      	itt	eq
 808a28a:	4301      	orreq	r1, r0
 808a28c:	2000      	moveq	r0, #0
 808a28e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808a292:	bf88      	it	hi
 808a294:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 808a298:	f63f aeaf 	bhi.w	8089ffa <__aeabi_dmul+0xde>
 808a29c:	ebb5 0c03 	subs.w	ip, r5, r3
 808a2a0:	bf04      	itt	eq
 808a2a2:	ebb6 0c02 	subseq.w	ip, r6, r2
 808a2a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 808a2aa:	f150 0000 	adcs.w	r0, r0, #0
 808a2ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808a2b2:	bd70      	pop	{r4, r5, r6, pc}
 808a2b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 808a2b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 808a2bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 808a2c0:	bfc2      	ittt	gt
 808a2c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 808a2c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 808a2ca:	bd70      	popgt	{r4, r5, r6, pc}
 808a2cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808a2d0:	f04f 0e00 	mov.w	lr, #0
 808a2d4:	3c01      	subs	r4, #1
 808a2d6:	e690      	b.n	8089ffa <__aeabi_dmul+0xde>
 808a2d8:	ea45 0e06 	orr.w	lr, r5, r6
 808a2dc:	e68d      	b.n	8089ffa <__aeabi_dmul+0xde>
 808a2de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808a2e2:	ea94 0f0c 	teq	r4, ip
 808a2e6:	bf08      	it	eq
 808a2e8:	ea95 0f0c 	teqeq	r5, ip
 808a2ec:	f43f af3b 	beq.w	808a166 <__aeabi_dmul+0x24a>
 808a2f0:	ea94 0f0c 	teq	r4, ip
 808a2f4:	d10a      	bne.n	808a30c <__aeabi_ddiv+0x19c>
 808a2f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 808a2fa:	f47f af34 	bne.w	808a166 <__aeabi_dmul+0x24a>
 808a2fe:	ea95 0f0c 	teq	r5, ip
 808a302:	f47f af25 	bne.w	808a150 <__aeabi_dmul+0x234>
 808a306:	4610      	mov	r0, r2
 808a308:	4619      	mov	r1, r3
 808a30a:	e72c      	b.n	808a166 <__aeabi_dmul+0x24a>
 808a30c:	ea95 0f0c 	teq	r5, ip
 808a310:	d106      	bne.n	808a320 <__aeabi_ddiv+0x1b0>
 808a312:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 808a316:	f43f aefd 	beq.w	808a114 <__aeabi_dmul+0x1f8>
 808a31a:	4610      	mov	r0, r2
 808a31c:	4619      	mov	r1, r3
 808a31e:	e722      	b.n	808a166 <__aeabi_dmul+0x24a>
 808a320:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808a324:	bf18      	it	ne
 808a326:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808a32a:	f47f aec5 	bne.w	808a0b8 <__aeabi_dmul+0x19c>
 808a32e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 808a332:	f47f af0d 	bne.w	808a150 <__aeabi_dmul+0x234>
 808a336:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 808a33a:	f47f aeeb 	bne.w	808a114 <__aeabi_dmul+0x1f8>
 808a33e:	e712      	b.n	808a166 <__aeabi_dmul+0x24a>

0808a340 <__gedf2>:
 808a340:	f04f 3cff 	mov.w	ip, #4294967295
 808a344:	e006      	b.n	808a354 <__cmpdf2+0x4>
 808a346:	bf00      	nop

0808a348 <__ledf2>:
 808a348:	f04f 0c01 	mov.w	ip, #1
 808a34c:	e002      	b.n	808a354 <__cmpdf2+0x4>
 808a34e:	bf00      	nop

0808a350 <__cmpdf2>:
 808a350:	f04f 0c01 	mov.w	ip, #1
 808a354:	f84d cd04 	str.w	ip, [sp, #-4]!
 808a358:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808a35c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808a360:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808a364:	bf18      	it	ne
 808a366:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 808a36a:	d01b      	beq.n	808a3a4 <__cmpdf2+0x54>
 808a36c:	b001      	add	sp, #4
 808a36e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 808a372:	bf0c      	ite	eq
 808a374:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 808a378:	ea91 0f03 	teqne	r1, r3
 808a37c:	bf02      	ittt	eq
 808a37e:	ea90 0f02 	teqeq	r0, r2
 808a382:	2000      	moveq	r0, #0
 808a384:	4770      	bxeq	lr
 808a386:	f110 0f00 	cmn.w	r0, #0
 808a38a:	ea91 0f03 	teq	r1, r3
 808a38e:	bf58      	it	pl
 808a390:	4299      	cmppl	r1, r3
 808a392:	bf08      	it	eq
 808a394:	4290      	cmpeq	r0, r2
 808a396:	bf2c      	ite	cs
 808a398:	17d8      	asrcs	r0, r3, #31
 808a39a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 808a39e:	f040 0001 	orr.w	r0, r0, #1
 808a3a2:	4770      	bx	lr
 808a3a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808a3a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808a3ac:	d102      	bne.n	808a3b4 <__cmpdf2+0x64>
 808a3ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808a3b2:	d107      	bne.n	808a3c4 <__cmpdf2+0x74>
 808a3b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808a3b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808a3bc:	d1d6      	bne.n	808a36c <__cmpdf2+0x1c>
 808a3be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 808a3c2:	d0d3      	beq.n	808a36c <__cmpdf2+0x1c>
 808a3c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 808a3c8:	4770      	bx	lr
 808a3ca:	bf00      	nop

0808a3cc <__aeabi_cdrcmple>:
 808a3cc:	4684      	mov	ip, r0
 808a3ce:	4610      	mov	r0, r2
 808a3d0:	4662      	mov	r2, ip
 808a3d2:	468c      	mov	ip, r1
 808a3d4:	4619      	mov	r1, r3
 808a3d6:	4663      	mov	r3, ip
 808a3d8:	e000      	b.n	808a3dc <__aeabi_cdcmpeq>
 808a3da:	bf00      	nop

0808a3dc <__aeabi_cdcmpeq>:
 808a3dc:	b501      	push	{r0, lr}
 808a3de:	f7ff ffb7 	bl	808a350 <__cmpdf2>
 808a3e2:	2800      	cmp	r0, #0
 808a3e4:	bf48      	it	mi
 808a3e6:	f110 0f00 	cmnmi.w	r0, #0
 808a3ea:	bd01      	pop	{r0, pc}

0808a3ec <__aeabi_dcmpeq>:
 808a3ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 808a3f0:	f7ff fff4 	bl	808a3dc <__aeabi_cdcmpeq>
 808a3f4:	bf0c      	ite	eq
 808a3f6:	2001      	moveq	r0, #1
 808a3f8:	2000      	movne	r0, #0
 808a3fa:	f85d fb08 	ldr.w	pc, [sp], #8
 808a3fe:	bf00      	nop

0808a400 <__aeabi_dcmplt>:
 808a400:	f84d ed08 	str.w	lr, [sp, #-8]!
 808a404:	f7ff ffea 	bl	808a3dc <__aeabi_cdcmpeq>
 808a408:	bf34      	ite	cc
 808a40a:	2001      	movcc	r0, #1
 808a40c:	2000      	movcs	r0, #0
 808a40e:	f85d fb08 	ldr.w	pc, [sp], #8
 808a412:	bf00      	nop

0808a414 <__aeabi_dcmple>:
 808a414:	f84d ed08 	str.w	lr, [sp, #-8]!
 808a418:	f7ff ffe0 	bl	808a3dc <__aeabi_cdcmpeq>
 808a41c:	bf94      	ite	ls
 808a41e:	2001      	movls	r0, #1
 808a420:	2000      	movhi	r0, #0
 808a422:	f85d fb08 	ldr.w	pc, [sp], #8
 808a426:	bf00      	nop

0808a428 <__aeabi_dcmpge>:
 808a428:	f84d ed08 	str.w	lr, [sp, #-8]!
 808a42c:	f7ff ffce 	bl	808a3cc <__aeabi_cdrcmple>
 808a430:	bf94      	ite	ls
 808a432:	2001      	movls	r0, #1
 808a434:	2000      	movhi	r0, #0
 808a436:	f85d fb08 	ldr.w	pc, [sp], #8
 808a43a:	bf00      	nop

0808a43c <__aeabi_dcmpgt>:
 808a43c:	f84d ed08 	str.w	lr, [sp, #-8]!
 808a440:	f7ff ffc4 	bl	808a3cc <__aeabi_cdrcmple>
 808a444:	bf34      	ite	cc
 808a446:	2001      	movcc	r0, #1
 808a448:	2000      	movcs	r0, #0
 808a44a:	f85d fb08 	ldr.w	pc, [sp], #8
 808a44e:	bf00      	nop

0808a450 <__aeabi_dcmpun>:
 808a450:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808a454:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808a458:	d102      	bne.n	808a460 <__aeabi_dcmpun+0x10>
 808a45a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808a45e:	d10a      	bne.n	808a476 <__aeabi_dcmpun+0x26>
 808a460:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808a464:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808a468:	d102      	bne.n	808a470 <__aeabi_dcmpun+0x20>
 808a46a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 808a46e:	d102      	bne.n	808a476 <__aeabi_dcmpun+0x26>
 808a470:	f04f 0000 	mov.w	r0, #0
 808a474:	4770      	bx	lr
 808a476:	f04f 0001 	mov.w	r0, #1
 808a47a:	4770      	bx	lr

0808a47c <__aeabi_d2iz>:
 808a47c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 808a480:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 808a484:	d215      	bcs.n	808a4b2 <__aeabi_d2iz+0x36>
 808a486:	d511      	bpl.n	808a4ac <__aeabi_d2iz+0x30>
 808a488:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 808a48c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 808a490:	d912      	bls.n	808a4b8 <__aeabi_d2iz+0x3c>
 808a492:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808a496:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808a49a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808a49e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808a4a2:	fa23 f002 	lsr.w	r0, r3, r2
 808a4a6:	bf18      	it	ne
 808a4a8:	4240      	negne	r0, r0
 808a4aa:	4770      	bx	lr
 808a4ac:	f04f 0000 	mov.w	r0, #0
 808a4b0:	4770      	bx	lr
 808a4b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808a4b6:	d105      	bne.n	808a4c4 <__aeabi_d2iz+0x48>
 808a4b8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 808a4bc:	bf08      	it	eq
 808a4be:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808a4c2:	4770      	bx	lr
 808a4c4:	f04f 0000 	mov.w	r0, #0
 808a4c8:	4770      	bx	lr
 808a4ca:	bf00      	nop

0808a4cc <__aeabi_d2uiz>:
 808a4cc:	004a      	lsls	r2, r1, #1
 808a4ce:	d211      	bcs.n	808a4f4 <__aeabi_d2uiz+0x28>
 808a4d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 808a4d4:	d211      	bcs.n	808a4fa <__aeabi_d2uiz+0x2e>
 808a4d6:	d50d      	bpl.n	808a4f4 <__aeabi_d2uiz+0x28>
 808a4d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 808a4dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 808a4e0:	d40e      	bmi.n	808a500 <__aeabi_d2uiz+0x34>
 808a4e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808a4e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808a4ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808a4ee:	fa23 f002 	lsr.w	r0, r3, r2
 808a4f2:	4770      	bx	lr
 808a4f4:	f04f 0000 	mov.w	r0, #0
 808a4f8:	4770      	bx	lr
 808a4fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808a4fe:	d102      	bne.n	808a506 <__aeabi_d2uiz+0x3a>
 808a500:	f04f 30ff 	mov.w	r0, #4294967295
 808a504:	4770      	bx	lr
 808a506:	f04f 0000 	mov.w	r0, #0
 808a50a:	4770      	bx	lr

0808a50c <__aeabi_d2f>:
 808a50c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 808a510:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 808a514:	bf24      	itt	cs
 808a516:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 808a51a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 808a51e:	d90d      	bls.n	808a53c <__aeabi_d2f+0x30>
 808a520:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808a524:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 808a528:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 808a52c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 808a530:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 808a534:	bf08      	it	eq
 808a536:	f020 0001 	biceq.w	r0, r0, #1
 808a53a:	4770      	bx	lr
 808a53c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 808a540:	d121      	bne.n	808a586 <__aeabi_d2f+0x7a>
 808a542:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 808a546:	bfbc      	itt	lt
 808a548:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 808a54c:	4770      	bxlt	lr
 808a54e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808a552:	ea4f 5252 	mov.w	r2, r2, lsr #21
 808a556:	f1c2 0218 	rsb	r2, r2, #24
 808a55a:	f1c2 0c20 	rsb	ip, r2, #32
 808a55e:	fa10 f30c 	lsls.w	r3, r0, ip
 808a562:	fa20 f002 	lsr.w	r0, r0, r2
 808a566:	bf18      	it	ne
 808a568:	f040 0001 	orrne.w	r0, r0, #1
 808a56c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808a570:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 808a574:	fa03 fc0c 	lsl.w	ip, r3, ip
 808a578:	ea40 000c 	orr.w	r0, r0, ip
 808a57c:	fa23 f302 	lsr.w	r3, r3, r2
 808a580:	ea4f 0343 	mov.w	r3, r3, lsl #1
 808a584:	e7cc      	b.n	808a520 <__aeabi_d2f+0x14>
 808a586:	ea7f 5362 	mvns.w	r3, r2, asr #21
 808a58a:	d107      	bne.n	808a59c <__aeabi_d2f+0x90>
 808a58c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 808a590:	bf1e      	ittt	ne
 808a592:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 808a596:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 808a59a:	4770      	bxne	lr
 808a59c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 808a5a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808a5a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808a5a8:	4770      	bx	lr
 808a5aa:	bf00      	nop

0808a5ac <__aeabi_frsub>:
 808a5ac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 808a5b0:	e002      	b.n	808a5b8 <__addsf3>
 808a5b2:	bf00      	nop

0808a5b4 <__aeabi_fsub>:
 808a5b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0808a5b8 <__addsf3>:
 808a5b8:	0042      	lsls	r2, r0, #1
 808a5ba:	bf1f      	itttt	ne
 808a5bc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 808a5c0:	ea92 0f03 	teqne	r2, r3
 808a5c4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 808a5c8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808a5cc:	d06a      	beq.n	808a6a4 <__addsf3+0xec>
 808a5ce:	ea4f 6212 	mov.w	r2, r2, lsr #24
 808a5d2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 808a5d6:	bfc1      	itttt	gt
 808a5d8:	18d2      	addgt	r2, r2, r3
 808a5da:	4041      	eorgt	r1, r0
 808a5dc:	4048      	eorgt	r0, r1
 808a5de:	4041      	eorgt	r1, r0
 808a5e0:	bfb8      	it	lt
 808a5e2:	425b      	neglt	r3, r3
 808a5e4:	2b19      	cmp	r3, #25
 808a5e6:	bf88      	it	hi
 808a5e8:	4770      	bxhi	lr
 808a5ea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 808a5ee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808a5f2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 808a5f6:	bf18      	it	ne
 808a5f8:	4240      	negne	r0, r0
 808a5fa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808a5fe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 808a602:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 808a606:	bf18      	it	ne
 808a608:	4249      	negne	r1, r1
 808a60a:	ea92 0f03 	teq	r2, r3
 808a60e:	d03f      	beq.n	808a690 <__addsf3+0xd8>
 808a610:	f1a2 0201 	sub.w	r2, r2, #1
 808a614:	fa41 fc03 	asr.w	ip, r1, r3
 808a618:	eb10 000c 	adds.w	r0, r0, ip
 808a61c:	f1c3 0320 	rsb	r3, r3, #32
 808a620:	fa01 f103 	lsl.w	r1, r1, r3
 808a624:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 808a628:	d502      	bpl.n	808a630 <__addsf3+0x78>
 808a62a:	4249      	negs	r1, r1
 808a62c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 808a630:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 808a634:	d313      	bcc.n	808a65e <__addsf3+0xa6>
 808a636:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 808a63a:	d306      	bcc.n	808a64a <__addsf3+0x92>
 808a63c:	0840      	lsrs	r0, r0, #1
 808a63e:	ea4f 0131 	mov.w	r1, r1, rrx
 808a642:	f102 0201 	add.w	r2, r2, #1
 808a646:	2afe      	cmp	r2, #254	; 0xfe
 808a648:	d251      	bcs.n	808a6ee <__addsf3+0x136>
 808a64a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 808a64e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808a652:	bf08      	it	eq
 808a654:	f020 0001 	biceq.w	r0, r0, #1
 808a658:	ea40 0003 	orr.w	r0, r0, r3
 808a65c:	4770      	bx	lr
 808a65e:	0049      	lsls	r1, r1, #1
 808a660:	eb40 0000 	adc.w	r0, r0, r0
 808a664:	3a01      	subs	r2, #1
 808a666:	bf28      	it	cs
 808a668:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 808a66c:	d2ed      	bcs.n	808a64a <__addsf3+0x92>
 808a66e:	fab0 fc80 	clz	ip, r0
 808a672:	f1ac 0c08 	sub.w	ip, ip, #8
 808a676:	ebb2 020c 	subs.w	r2, r2, ip
 808a67a:	fa00 f00c 	lsl.w	r0, r0, ip
 808a67e:	bfaa      	itet	ge
 808a680:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 808a684:	4252      	neglt	r2, r2
 808a686:	4318      	orrge	r0, r3
 808a688:	bfbc      	itt	lt
 808a68a:	40d0      	lsrlt	r0, r2
 808a68c:	4318      	orrlt	r0, r3
 808a68e:	4770      	bx	lr
 808a690:	f092 0f00 	teq	r2, #0
 808a694:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 808a698:	bf06      	itte	eq
 808a69a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 808a69e:	3201      	addeq	r2, #1
 808a6a0:	3b01      	subne	r3, #1
 808a6a2:	e7b5      	b.n	808a610 <__addsf3+0x58>
 808a6a4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808a6a8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808a6ac:	bf18      	it	ne
 808a6ae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808a6b2:	d021      	beq.n	808a6f8 <__addsf3+0x140>
 808a6b4:	ea92 0f03 	teq	r2, r3
 808a6b8:	d004      	beq.n	808a6c4 <__addsf3+0x10c>
 808a6ba:	f092 0f00 	teq	r2, #0
 808a6be:	bf08      	it	eq
 808a6c0:	4608      	moveq	r0, r1
 808a6c2:	4770      	bx	lr
 808a6c4:	ea90 0f01 	teq	r0, r1
 808a6c8:	bf1c      	itt	ne
 808a6ca:	2000      	movne	r0, #0
 808a6cc:	4770      	bxne	lr
 808a6ce:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 808a6d2:	d104      	bne.n	808a6de <__addsf3+0x126>
 808a6d4:	0040      	lsls	r0, r0, #1
 808a6d6:	bf28      	it	cs
 808a6d8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 808a6dc:	4770      	bx	lr
 808a6de:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 808a6e2:	bf3c      	itt	cc
 808a6e4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 808a6e8:	4770      	bxcc	lr
 808a6ea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 808a6ee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 808a6f2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808a6f6:	4770      	bx	lr
 808a6f8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 808a6fc:	bf16      	itet	ne
 808a6fe:	4608      	movne	r0, r1
 808a700:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 808a704:	4601      	movne	r1, r0
 808a706:	0242      	lsls	r2, r0, #9
 808a708:	bf06      	itte	eq
 808a70a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 808a70e:	ea90 0f01 	teqeq	r0, r1
 808a712:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 808a716:	4770      	bx	lr

0808a718 <__aeabi_ui2f>:
 808a718:	f04f 0300 	mov.w	r3, #0
 808a71c:	e004      	b.n	808a728 <__aeabi_i2f+0x8>
 808a71e:	bf00      	nop

0808a720 <__aeabi_i2f>:
 808a720:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 808a724:	bf48      	it	mi
 808a726:	4240      	negmi	r0, r0
 808a728:	ea5f 0c00 	movs.w	ip, r0
 808a72c:	bf08      	it	eq
 808a72e:	4770      	bxeq	lr
 808a730:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 808a734:	4601      	mov	r1, r0
 808a736:	f04f 0000 	mov.w	r0, #0
 808a73a:	e01c      	b.n	808a776 <__aeabi_l2f+0x2a>

0808a73c <__aeabi_ul2f>:
 808a73c:	ea50 0201 	orrs.w	r2, r0, r1
 808a740:	bf08      	it	eq
 808a742:	4770      	bxeq	lr
 808a744:	f04f 0300 	mov.w	r3, #0
 808a748:	e00a      	b.n	808a760 <__aeabi_l2f+0x14>
 808a74a:	bf00      	nop

0808a74c <__aeabi_l2f>:
 808a74c:	ea50 0201 	orrs.w	r2, r0, r1
 808a750:	bf08      	it	eq
 808a752:	4770      	bxeq	lr
 808a754:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 808a758:	d502      	bpl.n	808a760 <__aeabi_l2f+0x14>
 808a75a:	4240      	negs	r0, r0
 808a75c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808a760:	ea5f 0c01 	movs.w	ip, r1
 808a764:	bf02      	ittt	eq
 808a766:	4684      	moveq	ip, r0
 808a768:	4601      	moveq	r1, r0
 808a76a:	2000      	moveq	r0, #0
 808a76c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 808a770:	bf08      	it	eq
 808a772:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 808a776:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 808a77a:	fabc f28c 	clz	r2, ip
 808a77e:	3a08      	subs	r2, #8
 808a780:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 808a784:	db10      	blt.n	808a7a8 <__aeabi_l2f+0x5c>
 808a786:	fa01 fc02 	lsl.w	ip, r1, r2
 808a78a:	4463      	add	r3, ip
 808a78c:	fa00 fc02 	lsl.w	ip, r0, r2
 808a790:	f1c2 0220 	rsb	r2, r2, #32
 808a794:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 808a798:	fa20 f202 	lsr.w	r2, r0, r2
 808a79c:	eb43 0002 	adc.w	r0, r3, r2
 808a7a0:	bf08      	it	eq
 808a7a2:	f020 0001 	biceq.w	r0, r0, #1
 808a7a6:	4770      	bx	lr
 808a7a8:	f102 0220 	add.w	r2, r2, #32
 808a7ac:	fa01 fc02 	lsl.w	ip, r1, r2
 808a7b0:	f1c2 0220 	rsb	r2, r2, #32
 808a7b4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 808a7b8:	fa21 f202 	lsr.w	r2, r1, r2
 808a7bc:	eb43 0002 	adc.w	r0, r3, r2
 808a7c0:	bf08      	it	eq
 808a7c2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808a7c6:	4770      	bx	lr

0808a7c8 <__aeabi_fmul>:
 808a7c8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808a7cc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 808a7d0:	bf1e      	ittt	ne
 808a7d2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808a7d6:	ea92 0f0c 	teqne	r2, ip
 808a7da:	ea93 0f0c 	teqne	r3, ip
 808a7de:	d06f      	beq.n	808a8c0 <__aeabi_fmul+0xf8>
 808a7e0:	441a      	add	r2, r3
 808a7e2:	ea80 0c01 	eor.w	ip, r0, r1
 808a7e6:	0240      	lsls	r0, r0, #9
 808a7e8:	bf18      	it	ne
 808a7ea:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 808a7ee:	d01e      	beq.n	808a82e <__aeabi_fmul+0x66>
 808a7f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 808a7f4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 808a7f8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 808a7fc:	fba0 3101 	umull	r3, r1, r0, r1
 808a800:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808a804:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 808a808:	bf3e      	ittt	cc
 808a80a:	0049      	lslcc	r1, r1, #1
 808a80c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 808a810:	005b      	lslcc	r3, r3, #1
 808a812:	ea40 0001 	orr.w	r0, r0, r1
 808a816:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 808a81a:	2afd      	cmp	r2, #253	; 0xfd
 808a81c:	d81d      	bhi.n	808a85a <__aeabi_fmul+0x92>
 808a81e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 808a822:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808a826:	bf08      	it	eq
 808a828:	f020 0001 	biceq.w	r0, r0, #1
 808a82c:	4770      	bx	lr
 808a82e:	f090 0f00 	teq	r0, #0
 808a832:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808a836:	bf08      	it	eq
 808a838:	0249      	lsleq	r1, r1, #9
 808a83a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808a83e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 808a842:	3a7f      	subs	r2, #127	; 0x7f
 808a844:	bfc2      	ittt	gt
 808a846:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808a84a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808a84e:	4770      	bxgt	lr
 808a850:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808a854:	f04f 0300 	mov.w	r3, #0
 808a858:	3a01      	subs	r2, #1
 808a85a:	dc5d      	bgt.n	808a918 <__aeabi_fmul+0x150>
 808a85c:	f112 0f19 	cmn.w	r2, #25
 808a860:	bfdc      	itt	le
 808a862:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 808a866:	4770      	bxle	lr
 808a868:	f1c2 0200 	rsb	r2, r2, #0
 808a86c:	0041      	lsls	r1, r0, #1
 808a86e:	fa21 f102 	lsr.w	r1, r1, r2
 808a872:	f1c2 0220 	rsb	r2, r2, #32
 808a876:	fa00 fc02 	lsl.w	ip, r0, r2
 808a87a:	ea5f 0031 	movs.w	r0, r1, rrx
 808a87e:	f140 0000 	adc.w	r0, r0, #0
 808a882:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 808a886:	bf08      	it	eq
 808a888:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808a88c:	4770      	bx	lr
 808a88e:	f092 0f00 	teq	r2, #0
 808a892:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808a896:	bf02      	ittt	eq
 808a898:	0040      	lsleq	r0, r0, #1
 808a89a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808a89e:	3a01      	subeq	r2, #1
 808a8a0:	d0f9      	beq.n	808a896 <__aeabi_fmul+0xce>
 808a8a2:	ea40 000c 	orr.w	r0, r0, ip
 808a8a6:	f093 0f00 	teq	r3, #0
 808a8aa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808a8ae:	bf02      	ittt	eq
 808a8b0:	0049      	lsleq	r1, r1, #1
 808a8b2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808a8b6:	3b01      	subeq	r3, #1
 808a8b8:	d0f9      	beq.n	808a8ae <__aeabi_fmul+0xe6>
 808a8ba:	ea41 010c 	orr.w	r1, r1, ip
 808a8be:	e78f      	b.n	808a7e0 <__aeabi_fmul+0x18>
 808a8c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 808a8c4:	ea92 0f0c 	teq	r2, ip
 808a8c8:	bf18      	it	ne
 808a8ca:	ea93 0f0c 	teqne	r3, ip
 808a8ce:	d00a      	beq.n	808a8e6 <__aeabi_fmul+0x11e>
 808a8d0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 808a8d4:	bf18      	it	ne
 808a8d6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808a8da:	d1d8      	bne.n	808a88e <__aeabi_fmul+0xc6>
 808a8dc:	ea80 0001 	eor.w	r0, r0, r1
 808a8e0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 808a8e4:	4770      	bx	lr
 808a8e6:	f090 0f00 	teq	r0, #0
 808a8ea:	bf17      	itett	ne
 808a8ec:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 808a8f0:	4608      	moveq	r0, r1
 808a8f2:	f091 0f00 	teqne	r1, #0
 808a8f6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 808a8fa:	d014      	beq.n	808a926 <__aeabi_fmul+0x15e>
 808a8fc:	ea92 0f0c 	teq	r2, ip
 808a900:	d101      	bne.n	808a906 <__aeabi_fmul+0x13e>
 808a902:	0242      	lsls	r2, r0, #9
 808a904:	d10f      	bne.n	808a926 <__aeabi_fmul+0x15e>
 808a906:	ea93 0f0c 	teq	r3, ip
 808a90a:	d103      	bne.n	808a914 <__aeabi_fmul+0x14c>
 808a90c:	024b      	lsls	r3, r1, #9
 808a90e:	bf18      	it	ne
 808a910:	4608      	movne	r0, r1
 808a912:	d108      	bne.n	808a926 <__aeabi_fmul+0x15e>
 808a914:	ea80 0001 	eor.w	r0, r0, r1
 808a918:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 808a91c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808a920:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808a924:	4770      	bx	lr
 808a926:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808a92a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 808a92e:	4770      	bx	lr

0808a930 <__aeabi_fdiv>:
 808a930:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808a934:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 808a938:	bf1e      	ittt	ne
 808a93a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808a93e:	ea92 0f0c 	teqne	r2, ip
 808a942:	ea93 0f0c 	teqne	r3, ip
 808a946:	d069      	beq.n	808aa1c <__aeabi_fdiv+0xec>
 808a948:	eba2 0203 	sub.w	r2, r2, r3
 808a94c:	ea80 0c01 	eor.w	ip, r0, r1
 808a950:	0249      	lsls	r1, r1, #9
 808a952:	ea4f 2040 	mov.w	r0, r0, lsl #9
 808a956:	d037      	beq.n	808a9c8 <__aeabi_fdiv+0x98>
 808a958:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 808a95c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 808a960:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 808a964:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808a968:	428b      	cmp	r3, r1
 808a96a:	bf38      	it	cc
 808a96c:	005b      	lslcc	r3, r3, #1
 808a96e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 808a972:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 808a976:	428b      	cmp	r3, r1
 808a978:	bf24      	itt	cs
 808a97a:	1a5b      	subcs	r3, r3, r1
 808a97c:	ea40 000c 	orrcs.w	r0, r0, ip
 808a980:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 808a984:	bf24      	itt	cs
 808a986:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 808a98a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808a98e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 808a992:	bf24      	itt	cs
 808a994:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 808a998:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808a99c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 808a9a0:	bf24      	itt	cs
 808a9a2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 808a9a6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808a9aa:	011b      	lsls	r3, r3, #4
 808a9ac:	bf18      	it	ne
 808a9ae:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 808a9b2:	d1e0      	bne.n	808a976 <__aeabi_fdiv+0x46>
 808a9b4:	2afd      	cmp	r2, #253	; 0xfd
 808a9b6:	f63f af50 	bhi.w	808a85a <__aeabi_fmul+0x92>
 808a9ba:	428b      	cmp	r3, r1
 808a9bc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808a9c0:	bf08      	it	eq
 808a9c2:	f020 0001 	biceq.w	r0, r0, #1
 808a9c6:	4770      	bx	lr
 808a9c8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808a9cc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808a9d0:	327f      	adds	r2, #127	; 0x7f
 808a9d2:	bfc2      	ittt	gt
 808a9d4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808a9d8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808a9dc:	4770      	bxgt	lr
 808a9de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808a9e2:	f04f 0300 	mov.w	r3, #0
 808a9e6:	3a01      	subs	r2, #1
 808a9e8:	e737      	b.n	808a85a <__aeabi_fmul+0x92>
 808a9ea:	f092 0f00 	teq	r2, #0
 808a9ee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808a9f2:	bf02      	ittt	eq
 808a9f4:	0040      	lsleq	r0, r0, #1
 808a9f6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808a9fa:	3a01      	subeq	r2, #1
 808a9fc:	d0f9      	beq.n	808a9f2 <__aeabi_fdiv+0xc2>
 808a9fe:	ea40 000c 	orr.w	r0, r0, ip
 808aa02:	f093 0f00 	teq	r3, #0
 808aa06:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808aa0a:	bf02      	ittt	eq
 808aa0c:	0049      	lsleq	r1, r1, #1
 808aa0e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808aa12:	3b01      	subeq	r3, #1
 808aa14:	d0f9      	beq.n	808aa0a <__aeabi_fdiv+0xda>
 808aa16:	ea41 010c 	orr.w	r1, r1, ip
 808aa1a:	e795      	b.n	808a948 <__aeabi_fdiv+0x18>
 808aa1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 808aa20:	ea92 0f0c 	teq	r2, ip
 808aa24:	d108      	bne.n	808aa38 <__aeabi_fdiv+0x108>
 808aa26:	0242      	lsls	r2, r0, #9
 808aa28:	f47f af7d 	bne.w	808a926 <__aeabi_fmul+0x15e>
 808aa2c:	ea93 0f0c 	teq	r3, ip
 808aa30:	f47f af70 	bne.w	808a914 <__aeabi_fmul+0x14c>
 808aa34:	4608      	mov	r0, r1
 808aa36:	e776      	b.n	808a926 <__aeabi_fmul+0x15e>
 808aa38:	ea93 0f0c 	teq	r3, ip
 808aa3c:	d104      	bne.n	808aa48 <__aeabi_fdiv+0x118>
 808aa3e:	024b      	lsls	r3, r1, #9
 808aa40:	f43f af4c 	beq.w	808a8dc <__aeabi_fmul+0x114>
 808aa44:	4608      	mov	r0, r1
 808aa46:	e76e      	b.n	808a926 <__aeabi_fmul+0x15e>
 808aa48:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 808aa4c:	bf18      	it	ne
 808aa4e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808aa52:	d1ca      	bne.n	808a9ea <__aeabi_fdiv+0xba>
 808aa54:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 808aa58:	f47f af5c 	bne.w	808a914 <__aeabi_fmul+0x14c>
 808aa5c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 808aa60:	f47f af3c 	bne.w	808a8dc <__aeabi_fmul+0x114>
 808aa64:	e75f      	b.n	808a926 <__aeabi_fmul+0x15e>
 808aa66:	bf00      	nop

0808aa68 <__gesf2>:
 808aa68:	f04f 3cff 	mov.w	ip, #4294967295
 808aa6c:	e006      	b.n	808aa7c <__cmpsf2+0x4>
 808aa6e:	bf00      	nop

0808aa70 <__lesf2>:
 808aa70:	f04f 0c01 	mov.w	ip, #1
 808aa74:	e002      	b.n	808aa7c <__cmpsf2+0x4>
 808aa76:	bf00      	nop

0808aa78 <__cmpsf2>:
 808aa78:	f04f 0c01 	mov.w	ip, #1
 808aa7c:	f84d cd04 	str.w	ip, [sp, #-4]!
 808aa80:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808aa84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808aa88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808aa8c:	bf18      	it	ne
 808aa8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808aa92:	d011      	beq.n	808aab8 <__cmpsf2+0x40>
 808aa94:	b001      	add	sp, #4
 808aa96:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 808aa9a:	bf18      	it	ne
 808aa9c:	ea90 0f01 	teqne	r0, r1
 808aaa0:	bf58      	it	pl
 808aaa2:	ebb2 0003 	subspl.w	r0, r2, r3
 808aaa6:	bf88      	it	hi
 808aaa8:	17c8      	asrhi	r0, r1, #31
 808aaaa:	bf38      	it	cc
 808aaac:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 808aab0:	bf18      	it	ne
 808aab2:	f040 0001 	orrne.w	r0, r0, #1
 808aab6:	4770      	bx	lr
 808aab8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808aabc:	d102      	bne.n	808aac4 <__cmpsf2+0x4c>
 808aabe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 808aac2:	d105      	bne.n	808aad0 <__cmpsf2+0x58>
 808aac4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 808aac8:	d1e4      	bne.n	808aa94 <__cmpsf2+0x1c>
 808aaca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 808aace:	d0e1      	beq.n	808aa94 <__cmpsf2+0x1c>
 808aad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 808aad4:	4770      	bx	lr
 808aad6:	bf00      	nop

0808aad8 <__aeabi_cfrcmple>:
 808aad8:	4684      	mov	ip, r0
 808aada:	4608      	mov	r0, r1
 808aadc:	4661      	mov	r1, ip
 808aade:	e7ff      	b.n	808aae0 <__aeabi_cfcmpeq>

0808aae0 <__aeabi_cfcmpeq>:
 808aae0:	b50f      	push	{r0, r1, r2, r3, lr}
 808aae2:	f7ff ffc9 	bl	808aa78 <__cmpsf2>
 808aae6:	2800      	cmp	r0, #0
 808aae8:	bf48      	it	mi
 808aaea:	f110 0f00 	cmnmi.w	r0, #0
 808aaee:	bd0f      	pop	{r0, r1, r2, r3, pc}

0808aaf0 <__aeabi_fcmpeq>:
 808aaf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 808aaf4:	f7ff fff4 	bl	808aae0 <__aeabi_cfcmpeq>
 808aaf8:	bf0c      	ite	eq
 808aafa:	2001      	moveq	r0, #1
 808aafc:	2000      	movne	r0, #0
 808aafe:	f85d fb08 	ldr.w	pc, [sp], #8
 808ab02:	bf00      	nop

0808ab04 <__aeabi_fcmplt>:
 808ab04:	f84d ed08 	str.w	lr, [sp, #-8]!
 808ab08:	f7ff ffea 	bl	808aae0 <__aeabi_cfcmpeq>
 808ab0c:	bf34      	ite	cc
 808ab0e:	2001      	movcc	r0, #1
 808ab10:	2000      	movcs	r0, #0
 808ab12:	f85d fb08 	ldr.w	pc, [sp], #8
 808ab16:	bf00      	nop

0808ab18 <__aeabi_fcmple>:
 808ab18:	f84d ed08 	str.w	lr, [sp, #-8]!
 808ab1c:	f7ff ffe0 	bl	808aae0 <__aeabi_cfcmpeq>
 808ab20:	bf94      	ite	ls
 808ab22:	2001      	movls	r0, #1
 808ab24:	2000      	movhi	r0, #0
 808ab26:	f85d fb08 	ldr.w	pc, [sp], #8
 808ab2a:	bf00      	nop

0808ab2c <__aeabi_fcmpge>:
 808ab2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 808ab30:	f7ff ffd2 	bl	808aad8 <__aeabi_cfrcmple>
 808ab34:	bf94      	ite	ls
 808ab36:	2001      	movls	r0, #1
 808ab38:	2000      	movhi	r0, #0
 808ab3a:	f85d fb08 	ldr.w	pc, [sp], #8
 808ab3e:	bf00      	nop

0808ab40 <__aeabi_fcmpgt>:
 808ab40:	f84d ed08 	str.w	lr, [sp, #-8]!
 808ab44:	f7ff ffc8 	bl	808aad8 <__aeabi_cfrcmple>
 808ab48:	bf34      	ite	cc
 808ab4a:	2001      	movcc	r0, #1
 808ab4c:	2000      	movcs	r0, #0
 808ab4e:	f85d fb08 	ldr.w	pc, [sp], #8
 808ab52:	bf00      	nop

0808ab54 <__aeabi_fcmpun>:
 808ab54:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808ab58:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808ab5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808ab60:	d102      	bne.n	808ab68 <__aeabi_fcmpun+0x14>
 808ab62:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 808ab66:	d108      	bne.n	808ab7a <__aeabi_fcmpun+0x26>
 808ab68:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 808ab6c:	d102      	bne.n	808ab74 <__aeabi_fcmpun+0x20>
 808ab6e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 808ab72:	d102      	bne.n	808ab7a <__aeabi_fcmpun+0x26>
 808ab74:	f04f 0000 	mov.w	r0, #0
 808ab78:	4770      	bx	lr
 808ab7a:	f04f 0001 	mov.w	r0, #1
 808ab7e:	4770      	bx	lr

0808ab80 <__aeabi_f2iz>:
 808ab80:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808ab84:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 808ab88:	d30f      	bcc.n	808abaa <__aeabi_f2iz+0x2a>
 808ab8a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 808ab8e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 808ab92:	d90d      	bls.n	808abb0 <__aeabi_f2iz+0x30>
 808ab94:	ea4f 2300 	mov.w	r3, r0, lsl #8
 808ab98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808ab9c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 808aba0:	fa23 f002 	lsr.w	r0, r3, r2
 808aba4:	bf18      	it	ne
 808aba6:	4240      	negne	r0, r0
 808aba8:	4770      	bx	lr
 808abaa:	f04f 0000 	mov.w	r0, #0
 808abae:	4770      	bx	lr
 808abb0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 808abb4:	d101      	bne.n	808abba <__aeabi_f2iz+0x3a>
 808abb6:	0242      	lsls	r2, r0, #9
 808abb8:	d105      	bne.n	808abc6 <__aeabi_f2iz+0x46>
 808abba:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 808abbe:	bf08      	it	eq
 808abc0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808abc4:	4770      	bx	lr
 808abc6:	f04f 0000 	mov.w	r0, #0
 808abca:	4770      	bx	lr

0808abcc <asctime_r>:
 808abcc:	b510      	push	{r4, lr}
 808abce:	460c      	mov	r4, r1
 808abd0:	6941      	ldr	r1, [r0, #20]
 808abd2:	b086      	sub	sp, #24
 808abd4:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 808abd8:	6903      	ldr	r3, [r0, #16]
 808abda:	6982      	ldr	r2, [r0, #24]
 808abdc:	9104      	str	r1, [sp, #16]
 808abde:	6801      	ldr	r1, [r0, #0]
 808abe0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 808abe4:	9103      	str	r1, [sp, #12]
 808abe6:	6841      	ldr	r1, [r0, #4]
 808abe8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 808abec:	9102      	str	r1, [sp, #8]
 808abee:	6881      	ldr	r1, [r0, #8]
 808abf0:	9101      	str	r1, [sp, #4]
 808abf2:	68c1      	ldr	r1, [r0, #12]
 808abf4:	4620      	mov	r0, r4
 808abf6:	9100      	str	r1, [sp, #0]
 808abf8:	4904      	ldr	r1, [pc, #16]	; (808ac0c <asctime_r+0x40>)
 808abfa:	440b      	add	r3, r1
 808abfc:	4904      	ldr	r1, [pc, #16]	; (808ac10 <asctime_r+0x44>)
 808abfe:	440a      	add	r2, r1
 808ac00:	4904      	ldr	r1, [pc, #16]	; (808ac14 <asctime_r+0x48>)
 808ac02:	f7fa fad5 	bl	80851b0 <siprintf>
 808ac06:	4620      	mov	r0, r4
 808ac08:	b006      	add	sp, #24
 808ac0a:	bd10      	pop	{r4, pc}
 808ac0c:	0808be3d 	.word	0x0808be3d
 808ac10:	0808be28 	.word	0x0808be28
 808ac14:	0808be08 	.word	0x0808be08

0808ac18 <atoi>:
 808ac18:	220a      	movs	r2, #10
 808ac1a:	2100      	movs	r1, #0
 808ac1c:	f000 b9d0 	b.w	808afc0 <strtol>

0808ac20 <atol>:
 808ac20:	220a      	movs	r2, #10
 808ac22:	2100      	movs	r1, #0
 808ac24:	f000 b9cc 	b.w	808afc0 <strtol>

0808ac28 <__cxa_atexit>:
 808ac28:	b510      	push	{r4, lr}
 808ac2a:	4604      	mov	r4, r0
 808ac2c:	4804      	ldr	r0, [pc, #16]	; (808ac40 <__cxa_atexit+0x18>)
 808ac2e:	4613      	mov	r3, r2
 808ac30:	b120      	cbz	r0, 808ac3c <__cxa_atexit+0x14>
 808ac32:	460a      	mov	r2, r1
 808ac34:	2002      	movs	r0, #2
 808ac36:	4621      	mov	r1, r4
 808ac38:	f3af 8000 	nop.w
 808ac3c:	bd10      	pop	{r4, pc}
 808ac3e:	bf00      	nop
 808ac40:	00000000 	.word	0x00000000

0808ac44 <memcpy>:
 808ac44:	440a      	add	r2, r1
 808ac46:	4291      	cmp	r1, r2
 808ac48:	f100 33ff 	add.w	r3, r0, #4294967295
 808ac4c:	d100      	bne.n	808ac50 <memcpy+0xc>
 808ac4e:	4770      	bx	lr
 808ac50:	b510      	push	{r4, lr}
 808ac52:	f811 4b01 	ldrb.w	r4, [r1], #1
 808ac56:	4291      	cmp	r1, r2
 808ac58:	f803 4f01 	strb.w	r4, [r3, #1]!
 808ac5c:	d1f9      	bne.n	808ac52 <memcpy+0xe>
 808ac5e:	bd10      	pop	{r4, pc}

0808ac60 <memmove>:
 808ac60:	4288      	cmp	r0, r1
 808ac62:	b510      	push	{r4, lr}
 808ac64:	eb01 0402 	add.w	r4, r1, r2
 808ac68:	d902      	bls.n	808ac70 <memmove+0x10>
 808ac6a:	4284      	cmp	r4, r0
 808ac6c:	4623      	mov	r3, r4
 808ac6e:	d807      	bhi.n	808ac80 <memmove+0x20>
 808ac70:	1e43      	subs	r3, r0, #1
 808ac72:	42a1      	cmp	r1, r4
 808ac74:	d008      	beq.n	808ac88 <memmove+0x28>
 808ac76:	f811 2b01 	ldrb.w	r2, [r1], #1
 808ac7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 808ac7e:	e7f8      	b.n	808ac72 <memmove+0x12>
 808ac80:	4601      	mov	r1, r0
 808ac82:	4402      	add	r2, r0
 808ac84:	428a      	cmp	r2, r1
 808ac86:	d100      	bne.n	808ac8a <memmove+0x2a>
 808ac88:	bd10      	pop	{r4, pc}
 808ac8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 808ac8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 808ac92:	e7f7      	b.n	808ac84 <memmove+0x24>

0808ac94 <memset>:
 808ac94:	4603      	mov	r3, r0
 808ac96:	4402      	add	r2, r0
 808ac98:	4293      	cmp	r3, r2
 808ac9a:	d100      	bne.n	808ac9e <memset+0xa>
 808ac9c:	4770      	bx	lr
 808ac9e:	f803 1b01 	strb.w	r1, [r3], #1
 808aca2:	e7f9      	b.n	808ac98 <memset+0x4>

0808aca4 <srand>:
 808aca4:	b538      	push	{r3, r4, r5, lr}
 808aca6:	4b10      	ldr	r3, [pc, #64]	; (808ace8 <srand+0x44>)
 808aca8:	4604      	mov	r4, r0
 808acaa:	681d      	ldr	r5, [r3, #0]
 808acac:	6bab      	ldr	r3, [r5, #56]	; 0x38
 808acae:	b9b3      	cbnz	r3, 808acde <srand+0x3a>
 808acb0:	2018      	movs	r0, #24
 808acb2:	f7fa fa65 	bl	8085180 <malloc>
 808acb6:	4602      	mov	r2, r0
 808acb8:	63a8      	str	r0, [r5, #56]	; 0x38
 808acba:	b920      	cbnz	r0, 808acc6 <srand+0x22>
 808acbc:	2142      	movs	r1, #66	; 0x42
 808acbe:	4b0b      	ldr	r3, [pc, #44]	; (808acec <srand+0x48>)
 808acc0:	480b      	ldr	r0, [pc, #44]	; (808acf0 <srand+0x4c>)
 808acc2:	f7fa faa5 	bl	8085210 <__assert_func>
 808acc6:	490b      	ldr	r1, [pc, #44]	; (808acf4 <srand+0x50>)
 808acc8:	4b0b      	ldr	r3, [pc, #44]	; (808acf8 <srand+0x54>)
 808acca:	e9c0 1300 	strd	r1, r3, [r0]
 808acce:	4b0b      	ldr	r3, [pc, #44]	; (808acfc <srand+0x58>)
 808acd0:	2100      	movs	r1, #0
 808acd2:	6083      	str	r3, [r0, #8]
 808acd4:	230b      	movs	r3, #11
 808acd6:	8183      	strh	r3, [r0, #12]
 808acd8:	2001      	movs	r0, #1
 808acda:	e9c2 0104 	strd	r0, r1, [r2, #16]
 808acde:	2200      	movs	r2, #0
 808ace0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 808ace2:	611c      	str	r4, [r3, #16]
 808ace4:	615a      	str	r2, [r3, #20]
 808ace6:	bd38      	pop	{r3, r4, r5, pc}
 808ace8:	200000cc 	.word	0x200000cc
 808acec:	0808be61 	.word	0x0808be61
 808acf0:	0808be78 	.word	0x0808be78
 808acf4:	abcd330e 	.word	0xabcd330e
 808acf8:	e66d1234 	.word	0xe66d1234
 808acfc:	0005deec 	.word	0x0005deec

0808ad00 <strchr>:
 808ad00:	4603      	mov	r3, r0
 808ad02:	b2c9      	uxtb	r1, r1
 808ad04:	4618      	mov	r0, r3
 808ad06:	f813 2b01 	ldrb.w	r2, [r3], #1
 808ad0a:	b112      	cbz	r2, 808ad12 <strchr+0x12>
 808ad0c:	428a      	cmp	r2, r1
 808ad0e:	d1f9      	bne.n	808ad04 <strchr+0x4>
 808ad10:	4770      	bx	lr
 808ad12:	2900      	cmp	r1, #0
 808ad14:	bf18      	it	ne
 808ad16:	2000      	movne	r0, #0
 808ad18:	4770      	bx	lr

0808ad1a <strchrnul>:
 808ad1a:	b510      	push	{r4, lr}
 808ad1c:	4604      	mov	r4, r0
 808ad1e:	f7ff ffef 	bl	808ad00 <strchr>
 808ad22:	b918      	cbnz	r0, 808ad2c <strchrnul+0x12>
 808ad24:	4620      	mov	r0, r4
 808ad26:	f000 f830 	bl	808ad8a <strlen>
 808ad2a:	4420      	add	r0, r4
 808ad2c:	bd10      	pop	{r4, pc}

0808ad2e <strcmp>:
 808ad2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 808ad32:	f811 3b01 	ldrb.w	r3, [r1], #1
 808ad36:	2a01      	cmp	r2, #1
 808ad38:	bf28      	it	cs
 808ad3a:	429a      	cmpcs	r2, r3
 808ad3c:	d0f7      	beq.n	808ad2e <strcmp>
 808ad3e:	1ad0      	subs	r0, r2, r3
 808ad40:	4770      	bx	lr

0808ad42 <strcpy>:
 808ad42:	4603      	mov	r3, r0
 808ad44:	f811 2b01 	ldrb.w	r2, [r1], #1
 808ad48:	f803 2b01 	strb.w	r2, [r3], #1
 808ad4c:	2a00      	cmp	r2, #0
 808ad4e:	d1f9      	bne.n	808ad44 <strcpy+0x2>
 808ad50:	4770      	bx	lr
	...

0808ad54 <strdup>:
 808ad54:	4b02      	ldr	r3, [pc, #8]	; (808ad60 <strdup+0xc>)
 808ad56:	4601      	mov	r1, r0
 808ad58:	6818      	ldr	r0, [r3, #0]
 808ad5a:	f000 b803 	b.w	808ad64 <_strdup_r>
 808ad5e:	bf00      	nop
 808ad60:	200000cc 	.word	0x200000cc

0808ad64 <_strdup_r>:
 808ad64:	b570      	push	{r4, r5, r6, lr}
 808ad66:	4604      	mov	r4, r0
 808ad68:	4608      	mov	r0, r1
 808ad6a:	460d      	mov	r5, r1
 808ad6c:	f000 f80d 	bl	808ad8a <strlen>
 808ad70:	1c46      	adds	r6, r0, #1
 808ad72:	4631      	mov	r1, r6
 808ad74:	4620      	mov	r0, r4
 808ad76:	f7fa fa3b 	bl	80851f0 <_malloc_r>
 808ad7a:	4604      	mov	r4, r0
 808ad7c:	b118      	cbz	r0, 808ad86 <_strdup_r+0x22>
 808ad7e:	4632      	mov	r2, r6
 808ad80:	4629      	mov	r1, r5
 808ad82:	f7ff ff5f 	bl	808ac44 <memcpy>
 808ad86:	4620      	mov	r0, r4
 808ad88:	bd70      	pop	{r4, r5, r6, pc}

0808ad8a <strlen>:
 808ad8a:	4603      	mov	r3, r0
 808ad8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 808ad90:	2a00      	cmp	r2, #0
 808ad92:	d1fb      	bne.n	808ad8c <strlen+0x2>
 808ad94:	1a18      	subs	r0, r3, r0
 808ad96:	3801      	subs	r0, #1
 808ad98:	4770      	bx	lr

0808ad9a <strncmp>:
 808ad9a:	4603      	mov	r3, r0
 808ad9c:	b510      	push	{r4, lr}
 808ad9e:	b172      	cbz	r2, 808adbe <strncmp+0x24>
 808ada0:	3901      	subs	r1, #1
 808ada2:	1884      	adds	r4, r0, r2
 808ada4:	f813 0b01 	ldrb.w	r0, [r3], #1
 808ada8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 808adac:	4290      	cmp	r0, r2
 808adae:	d101      	bne.n	808adb4 <strncmp+0x1a>
 808adb0:	42a3      	cmp	r3, r4
 808adb2:	d101      	bne.n	808adb8 <strncmp+0x1e>
 808adb4:	1a80      	subs	r0, r0, r2
 808adb6:	bd10      	pop	{r4, pc}
 808adb8:	2800      	cmp	r0, #0
 808adba:	d1f3      	bne.n	808ada4 <strncmp+0xa>
 808adbc:	e7fa      	b.n	808adb4 <strncmp+0x1a>
 808adbe:	4610      	mov	r0, r2
 808adc0:	e7f9      	b.n	808adb6 <strncmp+0x1c>

0808adc2 <strncpy>:
 808adc2:	4603      	mov	r3, r0
 808adc4:	b510      	push	{r4, lr}
 808adc6:	3901      	subs	r1, #1
 808adc8:	b132      	cbz	r2, 808add8 <strncpy+0x16>
 808adca:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 808adce:	3a01      	subs	r2, #1
 808add0:	f803 4b01 	strb.w	r4, [r3], #1
 808add4:	2c00      	cmp	r4, #0
 808add6:	d1f7      	bne.n	808adc8 <strncpy+0x6>
 808add8:	2100      	movs	r1, #0
 808adda:	441a      	add	r2, r3
 808addc:	4293      	cmp	r3, r2
 808adde:	d100      	bne.n	808ade2 <strncpy+0x20>
 808ade0:	bd10      	pop	{r4, pc}
 808ade2:	f803 1b01 	strb.w	r1, [r3], #1
 808ade6:	e7f9      	b.n	808addc <strncpy+0x1a>

0808ade8 <strrchr>:
 808ade8:	b538      	push	{r3, r4, r5, lr}
 808adea:	4603      	mov	r3, r0
 808adec:	460c      	mov	r4, r1
 808adee:	b969      	cbnz	r1, 808ae0c <strrchr+0x24>
 808adf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 808adf4:	f7ff bf84 	b.w	808ad00 <strchr>
 808adf8:	4605      	mov	r5, r0
 808adfa:	1c43      	adds	r3, r0, #1
 808adfc:	4621      	mov	r1, r4
 808adfe:	4618      	mov	r0, r3
 808ae00:	f7ff ff7e 	bl	808ad00 <strchr>
 808ae04:	2800      	cmp	r0, #0
 808ae06:	d1f7      	bne.n	808adf8 <strrchr+0x10>
 808ae08:	4628      	mov	r0, r5
 808ae0a:	bd38      	pop	{r3, r4, r5, pc}
 808ae0c:	2500      	movs	r5, #0
 808ae0e:	e7f5      	b.n	808adfc <strrchr+0x14>

0808ae10 <strtok>:
 808ae10:	4b16      	ldr	r3, [pc, #88]	; (808ae6c <strtok+0x5c>)
 808ae12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808ae16:	681f      	ldr	r7, [r3, #0]
 808ae18:	4605      	mov	r5, r0
 808ae1a:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 808ae1c:	460e      	mov	r6, r1
 808ae1e:	b9ec      	cbnz	r4, 808ae5c <strtok+0x4c>
 808ae20:	2050      	movs	r0, #80	; 0x50
 808ae22:	f7fa f9ad 	bl	8085180 <malloc>
 808ae26:	4602      	mov	r2, r0
 808ae28:	65b8      	str	r0, [r7, #88]	; 0x58
 808ae2a:	b920      	cbnz	r0, 808ae36 <strtok+0x26>
 808ae2c:	2157      	movs	r1, #87	; 0x57
 808ae2e:	4b10      	ldr	r3, [pc, #64]	; (808ae70 <strtok+0x60>)
 808ae30:	4810      	ldr	r0, [pc, #64]	; (808ae74 <strtok+0x64>)
 808ae32:	f7fa f9ed 	bl	8085210 <__assert_func>
 808ae36:	e9c0 4400 	strd	r4, r4, [r0]
 808ae3a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 808ae3e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 808ae42:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 808ae46:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 808ae4a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 808ae4e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 808ae52:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 808ae56:	6184      	str	r4, [r0, #24]
 808ae58:	7704      	strb	r4, [r0, #28]
 808ae5a:	6244      	str	r4, [r0, #36]	; 0x24
 808ae5c:	4631      	mov	r1, r6
 808ae5e:	4628      	mov	r0, r5
 808ae60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 808ae62:	2301      	movs	r3, #1
 808ae64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 808ae68:	f000 b806 	b.w	808ae78 <__strtok_r>
 808ae6c:	200000cc 	.word	0x200000cc
 808ae70:	0808be61 	.word	0x0808be61
 808ae74:	0808bef5 	.word	0x0808bef5

0808ae78 <__strtok_r>:
 808ae78:	b5f0      	push	{r4, r5, r6, r7, lr}
 808ae7a:	b908      	cbnz	r0, 808ae80 <__strtok_r+0x8>
 808ae7c:	6810      	ldr	r0, [r2, #0]
 808ae7e:	b188      	cbz	r0, 808aea4 <__strtok_r+0x2c>
 808ae80:	4604      	mov	r4, r0
 808ae82:	460f      	mov	r7, r1
 808ae84:	4620      	mov	r0, r4
 808ae86:	f814 5b01 	ldrb.w	r5, [r4], #1
 808ae8a:	f817 6b01 	ldrb.w	r6, [r7], #1
 808ae8e:	b91e      	cbnz	r6, 808ae98 <__strtok_r+0x20>
 808ae90:	b965      	cbnz	r5, 808aeac <__strtok_r+0x34>
 808ae92:	4628      	mov	r0, r5
 808ae94:	6015      	str	r5, [r2, #0]
 808ae96:	e005      	b.n	808aea4 <__strtok_r+0x2c>
 808ae98:	42b5      	cmp	r5, r6
 808ae9a:	d1f6      	bne.n	808ae8a <__strtok_r+0x12>
 808ae9c:	2b00      	cmp	r3, #0
 808ae9e:	d1f0      	bne.n	808ae82 <__strtok_r+0xa>
 808aea0:	6014      	str	r4, [r2, #0]
 808aea2:	7003      	strb	r3, [r0, #0]
 808aea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808aea6:	461c      	mov	r4, r3
 808aea8:	e00c      	b.n	808aec4 <__strtok_r+0x4c>
 808aeaa:	b915      	cbnz	r5, 808aeb2 <__strtok_r+0x3a>
 808aeac:	460e      	mov	r6, r1
 808aeae:	f814 3b01 	ldrb.w	r3, [r4], #1
 808aeb2:	f816 5b01 	ldrb.w	r5, [r6], #1
 808aeb6:	42ab      	cmp	r3, r5
 808aeb8:	d1f7      	bne.n	808aeaa <__strtok_r+0x32>
 808aeba:	2b00      	cmp	r3, #0
 808aebc:	d0f3      	beq.n	808aea6 <__strtok_r+0x2e>
 808aebe:	2300      	movs	r3, #0
 808aec0:	f804 3c01 	strb.w	r3, [r4, #-1]
 808aec4:	6014      	str	r4, [r2, #0]
 808aec6:	e7ed      	b.n	808aea4 <__strtok_r+0x2c>

0808aec8 <_strtol_l.constprop.0>:
 808aec8:	2b01      	cmp	r3, #1
 808aeca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808aece:	4680      	mov	r8, r0
 808aed0:	d001      	beq.n	808aed6 <_strtol_l.constprop.0+0xe>
 808aed2:	2b24      	cmp	r3, #36	; 0x24
 808aed4:	d906      	bls.n	808aee4 <_strtol_l.constprop.0+0x1c>
 808aed6:	f7fa f993 	bl	8085200 <__errno>
 808aeda:	2316      	movs	r3, #22
 808aedc:	6003      	str	r3, [r0, #0]
 808aede:	2000      	movs	r0, #0
 808aee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808aee4:	460d      	mov	r5, r1
 808aee6:	4f35      	ldr	r7, [pc, #212]	; (808afbc <_strtol_l.constprop.0+0xf4>)
 808aee8:	4628      	mov	r0, r5
 808aeea:	f815 4b01 	ldrb.w	r4, [r5], #1
 808aeee:	5de6      	ldrb	r6, [r4, r7]
 808aef0:	f016 0608 	ands.w	r6, r6, #8
 808aef4:	d1f8      	bne.n	808aee8 <_strtol_l.constprop.0+0x20>
 808aef6:	2c2d      	cmp	r4, #45	; 0x2d
 808aef8:	d12f      	bne.n	808af5a <_strtol_l.constprop.0+0x92>
 808aefa:	2601      	movs	r6, #1
 808aefc:	782c      	ldrb	r4, [r5, #0]
 808aefe:	1c85      	adds	r5, r0, #2
 808af00:	2b00      	cmp	r3, #0
 808af02:	d057      	beq.n	808afb4 <_strtol_l.constprop.0+0xec>
 808af04:	2b10      	cmp	r3, #16
 808af06:	d109      	bne.n	808af1c <_strtol_l.constprop.0+0x54>
 808af08:	2c30      	cmp	r4, #48	; 0x30
 808af0a:	d107      	bne.n	808af1c <_strtol_l.constprop.0+0x54>
 808af0c:	7828      	ldrb	r0, [r5, #0]
 808af0e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 808af12:	2858      	cmp	r0, #88	; 0x58
 808af14:	d149      	bne.n	808afaa <_strtol_l.constprop.0+0xe2>
 808af16:	2310      	movs	r3, #16
 808af18:	786c      	ldrb	r4, [r5, #1]
 808af1a:	3502      	adds	r5, #2
 808af1c:	2700      	movs	r7, #0
 808af1e:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 808af22:	f10e 3eff 	add.w	lr, lr, #4294967295
 808af26:	fbbe f9f3 	udiv	r9, lr, r3
 808af2a:	4638      	mov	r0, r7
 808af2c:	fb03 ea19 	mls	sl, r3, r9, lr
 808af30:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 808af34:	f1bc 0f09 	cmp.w	ip, #9
 808af38:	d814      	bhi.n	808af64 <_strtol_l.constprop.0+0x9c>
 808af3a:	4664      	mov	r4, ip
 808af3c:	42a3      	cmp	r3, r4
 808af3e:	dd22      	ble.n	808af86 <_strtol_l.constprop.0+0xbe>
 808af40:	2f00      	cmp	r7, #0
 808af42:	db1d      	blt.n	808af80 <_strtol_l.constprop.0+0xb8>
 808af44:	4581      	cmp	r9, r0
 808af46:	d31b      	bcc.n	808af80 <_strtol_l.constprop.0+0xb8>
 808af48:	d101      	bne.n	808af4e <_strtol_l.constprop.0+0x86>
 808af4a:	45a2      	cmp	sl, r4
 808af4c:	db18      	blt.n	808af80 <_strtol_l.constprop.0+0xb8>
 808af4e:	2701      	movs	r7, #1
 808af50:	fb00 4003 	mla	r0, r0, r3, r4
 808af54:	f815 4b01 	ldrb.w	r4, [r5], #1
 808af58:	e7ea      	b.n	808af30 <_strtol_l.constprop.0+0x68>
 808af5a:	2c2b      	cmp	r4, #43	; 0x2b
 808af5c:	bf04      	itt	eq
 808af5e:	782c      	ldrbeq	r4, [r5, #0]
 808af60:	1c85      	addeq	r5, r0, #2
 808af62:	e7cd      	b.n	808af00 <_strtol_l.constprop.0+0x38>
 808af64:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 808af68:	f1bc 0f19 	cmp.w	ip, #25
 808af6c:	d801      	bhi.n	808af72 <_strtol_l.constprop.0+0xaa>
 808af6e:	3c37      	subs	r4, #55	; 0x37
 808af70:	e7e4      	b.n	808af3c <_strtol_l.constprop.0+0x74>
 808af72:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 808af76:	f1bc 0f19 	cmp.w	ip, #25
 808af7a:	d804      	bhi.n	808af86 <_strtol_l.constprop.0+0xbe>
 808af7c:	3c57      	subs	r4, #87	; 0x57
 808af7e:	e7dd      	b.n	808af3c <_strtol_l.constprop.0+0x74>
 808af80:	f04f 37ff 	mov.w	r7, #4294967295
 808af84:	e7e6      	b.n	808af54 <_strtol_l.constprop.0+0x8c>
 808af86:	2f00      	cmp	r7, #0
 808af88:	da07      	bge.n	808af9a <_strtol_l.constprop.0+0xd2>
 808af8a:	2322      	movs	r3, #34	; 0x22
 808af8c:	4670      	mov	r0, lr
 808af8e:	f8c8 3000 	str.w	r3, [r8]
 808af92:	2a00      	cmp	r2, #0
 808af94:	d0a4      	beq.n	808aee0 <_strtol_l.constprop.0+0x18>
 808af96:	1e69      	subs	r1, r5, #1
 808af98:	e005      	b.n	808afa6 <_strtol_l.constprop.0+0xde>
 808af9a:	b106      	cbz	r6, 808af9e <_strtol_l.constprop.0+0xd6>
 808af9c:	4240      	negs	r0, r0
 808af9e:	2a00      	cmp	r2, #0
 808afa0:	d09e      	beq.n	808aee0 <_strtol_l.constprop.0+0x18>
 808afa2:	2f00      	cmp	r7, #0
 808afa4:	d1f7      	bne.n	808af96 <_strtol_l.constprop.0+0xce>
 808afa6:	6011      	str	r1, [r2, #0]
 808afa8:	e79a      	b.n	808aee0 <_strtol_l.constprop.0+0x18>
 808afaa:	2430      	movs	r4, #48	; 0x30
 808afac:	2b00      	cmp	r3, #0
 808afae:	d1b5      	bne.n	808af1c <_strtol_l.constprop.0+0x54>
 808afb0:	2308      	movs	r3, #8
 808afb2:	e7b3      	b.n	808af1c <_strtol_l.constprop.0+0x54>
 808afb4:	2c30      	cmp	r4, #48	; 0x30
 808afb6:	d0a9      	beq.n	808af0c <_strtol_l.constprop.0+0x44>
 808afb8:	230a      	movs	r3, #10
 808afba:	e7af      	b.n	808af1c <_strtol_l.constprop.0+0x54>
 808afbc:	0808bf75 	.word	0x0808bf75

0808afc0 <strtol>:
 808afc0:	4613      	mov	r3, r2
 808afc2:	460a      	mov	r2, r1
 808afc4:	4601      	mov	r1, r0
 808afc6:	4802      	ldr	r0, [pc, #8]	; (808afd0 <strtol+0x10>)
 808afc8:	6800      	ldr	r0, [r0, #0]
 808afca:	f7ff bf7d 	b.w	808aec8 <_strtol_l.constprop.0>
 808afce:	bf00      	nop
 808afd0:	200000cc 	.word	0x200000cc

0808afd4 <dynalib_user>:
 808afd4:	08080041 08080081 080800a9 080800ad     A...............
 808afe4:	00000000 65746e69 6c616e72 74786500     ....internal.ext
 808aff4:	616e7265 6e69006c 6f437469 656c706d     ernal.initComple
 808b004:	203a6574 756f6800 00203a72 756e696d     te: .hour: .minu
 808b014:	203a6574 6e6f6d00 203a6874 79616400     te: .month: .day
 808b024:	7900203a 3a726165 696d0020 73696c6c     : .year: .millis
 808b034:	6e6f6365 203a7364 74616c00 64757469     econds: .latitud
 808b044:	00203a65 676e6f6c 64757469 00203a65     e: .longitude: .
 808b054:	6974616c 65647574 72676544 3a736565     latitudeDegrees:
 808b064:	6f6c0020 7469676e 44656475 65726765      .longitudeDegre
 808b074:	203a7365 6f656700 65686469 74686769     es: .geoidheight
 808b084:	6100203a 7469746c 3a656475 70730020     : .altitude: .sp
 808b094:	3a646565 69660020 61757178 7974696c     eed: .fixquality
 808b0a4:	7300203a 6c657461 6574696c 00203a73     : .satellites: .
 808b0b4:	7a726f68 3a636341 65760020 63417472     horzAcc: .vertAc
 808b0c4:	00203a63 4e6c6576 7600203a 3a456c65     c: .velN: .velE:
 808b0d4:	65760020 203a446c 70536700 3a646565      .velD: .gSpeed:
 808b0e4:	646f0020 6972546f 00203a70 546f646f      .odoTrip: .odoT
 808b0f4:	6c61746f 7200203a 3a657461 6e200020     otal: .rate: . n
 808b104:	203a7661 74756200 206e6f74 20736177     av: .button was 
 808b114:	63696c63 2064656b 74206425 73656d69     clicked %d times
 808b124:	6c227b00 253a2261 6c222c66 253a226f     .{"la":%f,"lo":%
 808b134:	68222c66 253a2274 61222c66 253a2263     f,"ht":%f,"ac":%
 808b144:	74222c66 223a226d 7d227325 474a4c00     f,"tm":"%s"}.LJG
 808b154:	49465350 227b0058 203a2273 222c6425     PSFIX.{"s": %d,"
 808b164:	203a226e 76222c30 2e253a22 222c6632     n": 0,"v":%.2f,"
 808b174:	253a2263 7d66322e 504a4c00 54535257     c":%.2f}.LJPWRST
 808b184:	7b005441 3a227822 222c6425 253a2279     AT.{"x":%d,"y":%
 808b194:	7a222c64 64253a22 226d222c 7d64253a     d,"z":%d,"m":%d}
 808b1a4:	414a4c00 524c4543 227b0054 253a2274     .LJACELRT.{"t":%
 808b1b4:	2c66322e 3a226822 66322e25 4a4c007d     .2f,"h":%.2f}.LJ
 808b1c4:	4d564e45 61460054 64656c69 206f7420     ENVMT.Failed to 
 808b1d4:	64616572 6f726620 4844206d 65732054     read from DHT se
 808b1e4:	726f736e 77700021 70670072 63610073     nsor!.pwr.gps.ac
 808b1f4:	6e650063 227b0076 22646d63 7325223a     c.env.{"cmd":"%s
 808b204:	4c007d22 444d434a 00525245 2273227b     "}.LJCMDERR.{"s"
 808b214:	6425203a 226e222c 2c31203a 3a227622     : %d,"n": 1,"v":
 808b224:	66322e25 2263222c 322e253a 0d007d66     %.2f,"c":%.2f}..
 808b234:	7465520a 76656972 20676e69 6f666e69     .Retrieving info
 808b244:	74616d72 206e6f69 6d6f7266 54484420     rmation from DHT
 808b254:	6e657320 2e726f73 65520020 73206461      sensor. .Read s
 808b264:	6f736e65 00203a72 45004b4f 726f7272     ensor: .OK.Error
 808b274:	43090d0a 6b636568 206d7573 6f727265     ...Checksum erro
 808b284:	72450072 0a726f72 5349090d 69742052     r.Error...ISR ti
 808b294:	6f20656d 65207475 726f7272 72724500     me out error.Err
 808b2a4:	0d0a726f 73655209 736e6f70 69742065     or...Response ti
 808b2b4:	6f20656d 65207475 726f7272 72724500     me out error.Err
 808b2c4:	0d0a726f 74614409 69742061 6f20656d     or...Data time o
 808b2d4:	65207475 726f7272 72724500 0d0a726f     ut error.Error..
 808b2e4:	71634109 69726975 4500676e 726f7272     .Acquiring.Error
 808b2f4:	44090d0a 61746c65 6d697420 6f742065     ...Delta time to
 808b304:	616d7320 45006c6c 726f7272 4e090d0a      small.Error...N
 808b314:	7320746f 74726174 55006465 6f6e6b6e     ot started.Unkno
 808b324:	65206e77 726f7272 6d754800 74696469     wn error.Humidit
 808b334:	25282079 203a2925 66322e25 6d655400     y (%%): %.2f.Tem
 808b344:	61726570 65727574 436f2820 25203a29     perature (oC): %
 808b354:	0066322e 706d6554 74617265 20657275     .2f.Temperature 
 808b364:	29466f28 2e25203a 54006632 65706d65     (oF): %.2f.Tempe
 808b374:	75746172 28206572 203a294b 66322e25     rature (K): %.2f
 808b384:	77654400 696f5020 2820746e 3a29436f     .Dew Point (oC):
 808b394:	322e2520 65440066 6f502077 20746e69      %.2f.Dew Point 
 808b3a4:	776f6c53 436f2820 25203a29 0066322e     Slow (oC): %.2f.
 808b3b4:	20646e45 6c20664f 28706f6f 75662029     End Of loop() fu
 808b3c4:	6974636e 69006e6f 4374696e 6c706d6f     nction.initCompl
 808b3d4:	00657465 72756f68 6e696d00 00657475     ete.hour.minute.
 808b3e4:	746e6f6d 61640068 65790079 6d007261     month.day.year.m
 808b3f4:	696c6c69 6f636573 0073646e 6974616c     illiseconds.lati
 808b404:	65647574 6e6f6c00 75746967 6c006564     tude.longitude.l
 808b414:	74697461 44656475 65726765 6c007365     atitudeDegrees.l
 808b424:	69676e6f 65647574 72676544 00736565     ongitudeDegrees.
 808b434:	696f6567 69656864 00746867 69746c61     geoidheight.alti
 808b444:	65647574 65707300 66006465 75717869     tude.speed.fixqu
 808b454:	74696c61 61730079 6c6c6574 73657469     ality.satellites
 808b464:	726f6800 6363417a 756c2500 72657600     .horzAcc.%lu.ver
 808b474:	63634174 6c657600 6c25004e 65760064     tAcc.velN.%ld.ve
 808b484:	7600456c 00446c65 65705367 6f006465     lE.velD.gSpeed.o
 808b494:	72546f64 6f007069 6f546f64 006c6174     doTrip.odoTotal.
 808b4a4:	276e6f44 6e6b2074 7420776f 20746168     Don't know that 
 808b4b4:	2e656e6f 65684320 73206b63 6c6c6570     one. Check spell
 808b4c4:	2e676e69 434a4c00 4156444d 7570004c     ing..LJCMDVAL.pu
 808b4d4:	6c615662 74657300 54434341 73007268     bVal.setACCThr.s
 808b4e4:	50477465 796c4453 74657300 44434341     etGPSDly.setACCD
 808b4f4:	7300796c 48447465 796c4454 73706700     ly.setDHTDly.gps
 808b504:	65746152 73657200 444f7465 6873004f     Rate.resetODO.sh
 808b514:	6c41776f 6f70006c 61567473 0065756c     owAll.postValue.
 808b524:	69676964 726c6174 00646165 69676964     digitalread.digi
 808b534:	776c6174 65746972 616e6100 72676f6c     talwrite.analogr
 808b544:	00646165 6c616e61 7277676f 00657469     ead.analogwrite.
 808b554:	7473616c 65776f50 63610072 546c6563     lastPower.accelT
 808b564:	73657268 72740068 6d736e61 614d7469     hresh.transmitMa
 808b574:	6c006b73 47747361 75505350 616c0062     sk.lastGPSPub.la
 808b584:	43417473 62755043 73616c00 54484474     stACCPub.lastDHT
 808b594:	00627550 616c6564 53504779 006e694d     Pub.delayGPSMin.
 808b5a4:	616c6564 43434179 006e694d 616c6564     delayACCMin.dela
 808b5b4:	54484479 006e694d 45737067 72657478     yDHTMin.gpsExter
 808b5c4:	006c616e 20646e45 7320666f 70757465     nal.End of setup
 808b5d4:	66202928 74636e75 006e6f69 67746573     () function.setg
 808b5e4:	6e617370 6f630074 76456e6e 53746e65     psant.connEventS
 808b5f4:	73746174 73657300 6e6f6973 63656843     tats.sessionChec
 808b604:	6574006b 72657473 00006e46              k.testerFn..

0808b610 <_ZTV5Timer>:
	...
 808b618:	08080811 08080865 08080105              ....e.......

0808b624 <_ZTVN5spark10LogHandlerE>:
	...
 808b634:	080800c9 080800ed                       ........

0808b63c <_ZTVN5spark16SerialLogHandlerE>:
	...
 808b644:	08080339 0808036d 0808680d 080800ef     9...m....h......

0808b654 <_ZTV12BatteryCheck>:
	...
 808b65c:	08081cb9 08081cbb 65736572 6f6d0074     ........reset.mo
 808b66c:	526d6564 74657365 73657200 65537465     demReset.resetSe
 808b67c:	6f697373 7073006e 2f6b7261 69766564     ssion.spark/devi
 808b68c:	732f6563 69737365 652f6e6f 7300646e     ce/session/end.s
 808b69c:	4d656661 0065646f 57707061 68637461     afeMode.appWatch
 808b6ac:	00676f64 65656c73 6c770070 64006e61     dog.sleep.wlan.d
 808b6bc:	00706565 70656564 6e617453 00796264     eep.deepStandby.
 808b6cc:	706f7473 6f747300 61745370 7962646e     stop.stopStandby
 808b6dc:	6e697000 74730067 00747261              .ping.start.

0808b6e8 <_ZTV6Tester>:
	...
 808b6f0:	08081dad 08081daf 552b5441 474e4950     ........AT+UPING
 808b700:	2e38223d 2e382e38 0a0d2238 2b544100     ="8.8.8.8"...AT+
 808b710:	4e495055 61223d47 702e6970 69747261     UPING="api.parti
 808b720:	2e656c63 0d226f69 6572000a 74746573     cle.io"...resett
 808b730:	20676e69 65646f6d 5441006d 5546432b     ing modem.AT+CFU
 808b740:	36313d4e 75000a0d 6f640070 63006e77     N=16...up.down.c
 808b750:	756c6c65 2072616c 63007325 64756f6c     ellular %s.cloud
 808b760:	6e6f6320 7463656e 206e6f69 65007325      connection %s.e
 808b770:	7265746e 6c206465 65747369 676e696e     ntered listening
 808b780:	646f6d20 00000065                        mode...

0808b788 <_ZTV15ConnectionCheck>:
	...
 808b790:	080821d9 080821db 77707061 00007464     .!...!..appwdt..

0808b7a0 <_ZTV18AppWatchdogWrapper>:
	...
 808b7a8:	080824ed 08082539 7570002f 73696c62     .$..9%../.publis
 808b7b8:	676e6968 73657320 6e6f6973 65686320     hing session che
 808b7c8:	65206b63 746e6576 00732520              ck event %s.

0808b7d4 <_ZTV12SessionCheck>:
	...
 808b7dc:	080826dd 080826fd 2c756c25 2c756c25     .&...&..%lu,%lu,
 808b7ec:	252c6425 63003b64 646c756f 2074276e     %d,%d;.couldn't 
 808b7fc:	646e6573 6c6c6120 65766520 2c73746e     send all events,
 808b80c:	76617320 20676e69 66206425 6c20726f      saving %d for l
 808b81c:	72657461 6e657300 64252074 65766520     ater.sent %d eve
 808b82c:	0073746e 63736964 69647261 6f20676e     nts.discarding o
 808b83c:	6520646c 746e6576 6e6f6300 7463656e     ld event.connect
 808b84c:	456e6f69 746e6576 65766520 253d746e     ionEvent event=%
 808b85c:	61642064 253d6174 6e690064 61697469     d data=%d.initia
 808b86c:	697a696c 6320676e 656e6e6f 6f697463     lizing connectio
 808b87c:	7665206e 20746e65 61746572 64656e69     n event retained
 808b88c:	6d656d20 0079726f                        memory.

0808b894 <_ZTV16ConnectionEvents>:
	...
 808b89c:	08082a29 08082a2b                       )*..+*..

0808b8a4 <_ZTV10PowerCheck>:
	...
 808b8ac:	08082c5d 08082c75 252c6625 70670066     ],..u,..%f,%f.gp
 808b8bc:	65622e73 206e6967 6c696166 203a6465     s.begin failed: 
 808b8cc:	53504700 61747320 64657472 53494c00     .GPS started.LIS
 808b8dc:	00484433                                3DH.

0808b8e0 <_ZTV15Adafruit_LIS3DH>:
	...
 808b8e8:	08082d87 08083079 080830b9 080834c5     .-..y0...0...4..
 808b8f8:	080830cd 6954003e 20646572 7720666f     .0..>.Tired of w
 808b908:	69746961 6620676e 7420726f 47206568     aiting for the G
 808b918:	202e5350 206d2749 6e696f67 68732067     PS. I'm going sh
 808b928:	69207475 666f2074 6e612066 65722064     ut it off and re
 808b938:	746f6f62 6572002e 42556461 67736d58     boot..readUBXmsg
 808b948:	64616220 6e656c20 3a687467 65720020      bad length: .re
 808b958:	42556461 67736d58 64616220 65686320     adUBXmsg bad che
 808b968:	73206b63 00206d75 5024002c 2c584255     ck sum .,.$PUBX,
 808b978:	312c3134 312c332c 3036392c 2a302c30     41,1,3,1,9600,0*
 808b988:	0a0d3631 67656200 66206e69 656c6961     16...begin faile
 808b998:	73202c64 65746174 2000203a 6f727265     d, state: . erro
 808b9a8:	00203a72 73726170 41203a65 545f4b43     r: .parse: ACK_T
 808b9b8:	3a455059 656d0020 67617373 63612065     YPE: .message ac
 808b9c8:	3a64656b 61700020 3a657372 4b414e20     ked: .parse: NAK
 808b9d8:	5059545f 00203a45 7373656d 20656761     _TYPE: .message 
 808b9e8:	654b414e 00203a64 73726170 55203a65     NAKed: .parse: U
 808b9f8:	6f6e6b6e 74206e77 3a657079 70670020     nknown type: .gp
 808ba08:	65722e73 67206461 7520746f 41427862     s.read got ubxBA
 808ba18:	454c5f44 4854474e 73706700 6165722e     D_LENGTH.gps.rea
 808ba28:	6f672064 62752074 44414278 4548435f     d got ubxBAD_CHE
 808ba38:	535f4b43 77004d55 65746972 3a584255     CK_SUM.writeUBX:
 808ba48:	70797420 00203a65 2e737067 646e6573      type: .gps.send
 808ba58:	6d6d6f43 20646e61 20746f67 42786275     Command got ubxB
 808ba68:	4c5f4441 54474e45 70670048 65732e73     AD_LENGTH.gps.se
 808ba78:	6f43646e 6e616d6d 6f672064 62752074     ndCommand got ub
 808ba88:	44414278 4548435f 535f4b43 67004d55     xBAD_CHECK_SUM.g
 808ba98:	732e7370 43646e65 616d6d6f 6720646e     ps.sendCommand g
 808baa8:	7520746f 4f4e7862 4b43415f 74657300     ot ubxNO_ACK.set
 808bab8:	65746152 6863203a 65676e61 656d2064     Rate: changed me
 808bac8:	72757361 6e656d65 6f742074 6e696d20     asurement to min
 808bad8:	6d756d69 20303120 7300736d 61527465     imum 10 ms.setRa
 808bae8:	203a6574 6e616863 20646567 6976616e     te: changed navi
 808baf8:	69746167 6f536e6f 6f74206c 6e696d20     gationSol to min
 808bb08:	6d756d69 73003120 61527465 203a6574     imum 1.setRate: 
 808bb18:	6e616863 20646567 6976616e 69746167     changed navigati
 808bb28:	6f536e6f 6f74206c 78616d20 6d756d69     onSol to maximum
 808bb38:	37323120 74657300 65746152 656d203a      127.setRate: me
 808bb48:	72757361 6e656d65 00203a74 52746573     asurement: .setR
 808bb58:	3a657461 76616e20 74616769 536e6f69     ate: navigationS
 808bb68:	203a6c6f 74657300 65746152 6275203a     ol: .setRate: ub
 808bb78:	74615778 6f646863 00203a67 49480041     xWatchdog: .A.HI
 808bb88:	4c004847                                 GH.LOW.

0808bb8f <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 808bb8f:	18100800 38302820 006e616e 00666e69     .... (08nan.inf.
 808bb9f:	0066766f 64756162 72655300 006c6169     ovf.baud.Serial.
 808bbaf:	53425355 61697265 4a00316c 534e4f53     USBSerial1.JSONS
 808bbbf:	61657274 676f4c6d 646e6148 0072656c     treamLogHandler.
 808bbcf:	00707061 30313025 5d002075 202c0020     app.%010u .] ., 
 808bbdf:	3a292800 5b200020 646f6300 203d2065     .(): . [.code = 
 808bbef:	00692500 61746564 20736c69 6c00203d     .%i.details = .l
 808bbff:	6e66006e 646f6300 65640065 6c696174     n.fn.code.detail
	...

0808bc10 <_ZTVN5spark16JSONStreamWriterE>:
	...
 808bc18:	08085bf9 08085c1f 08085bdf 08087e5b     .[...\...[..[~..

0808bc28 <_ZTVN5spark16StreamLogHandlerE>:
	...
 808bc30:	080860c9 080860e1 0808680d 080800ef     .`...`...h......

0808bc40 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 808bc48:	080860f5 08086109 080869b5 08085be7     .`...a...i...[..

0808bc58 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 808bc60:	08085bf7 08085c2d 08086771 08085be9     .[..-\..qg...[..

0808bc70 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 808bc78:	08085bf5 08085c3b 08085fe9 08085c5b     .[..;\..._..[\..
 808bc88:	2b25005a 3a643330 75323025 2d592500     Z.%+03d:%02u.%Y-
 808bc98:	252d6d25 48255464 3a4d253a 7a255325     %m-%dT%H:%M:%S%z
 808bca8:	63736100 656d6974 00000000              .asctime....

0808bcb4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 808bcbc:	08087095 0808709b 080870d9 080870a9     .p...p...p...p..
 808bccc:	08087097                                .p..

0808bcd0 <_ZTV9IPAddress>:
	...
 808bcd8:	08087693 08087691 080876c5              .v...v...v..

0808bce4 <_ZTV9USBSerial>:
	...
 808bcec:	08087735 0808779b 08087773 08085901     5w...w..sw...Y..
 808bcfc:	08087765 08087737 08087747 08087795     ew..7w..Gw...w..
 808bd0c:	08087757 08087731                       Ww..1w..

0808bd14 <_ZTVN5spark13CellularClassE>:
	...
 808bd1c:	08087a77 08087a6d 08087a63 080879dd     wz..mz..cz...y..
 808bd2c:	08087a57 08087a4b 08087d99 08087da1     Wz..Kz...}...}..
 808bd3c:	08087a3f 08087a37 08087a2d 08087a23     ?z..7z..-z..#z..
 808bd4c:	080879e7                                .y..

0808bd50 <_ZTV11USARTSerial>:
	...
 808bd58:	08087ab1 08087b19 08087af5 08085901     .z...{...z...Y..
 808bd68:	08087ac5 08087ae1 08087ad3 08087aef     .z...z...z...z..
 808bd78:	08087ab3 08087ab7                       .z...z..

0808bd80 <_ZTV7TwoWire>:
	...
 808bd88:	08087be1 08087c2b 08087c03 08087be3     .{..+|...|...{..
 808bd98:	08087c0b 08087c13 08087c1b 08087c23     .|...|...|..#|..

0808bda8 <_ZTVN5spark12NetworkClassE>:
	...
 808bdb0:	08087d59 08087d63 08087d6d 08087d77     Y}..c}..m}..w}..
 808bdc0:	08087d81 08087d8d 08087d99 08087da1     .}...}...}...}..
 808bdd0:	08087da9 08087db5 08087dbd 08087dc7     .}...}...}...}..
 808bde0:	08087dd1 75007525 78343025               .}..%u.u%04x.

0808bded <_ZSt7nothrow>:
	...

0808bdf8 <TWO52>:
 808bdf8:	00000000 43300000 00000000 c3300000     ......0C......0.
 808be08:	73332e25 332e2520 64332573 322e2520     %.3s %.3s%3d %.2
 808be18:	2e253a64 253a6432 2064322e 000a6425     d:%.2d:%.2d %d..

0808be28 <day_name.1>:
 808be28:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
 808be38:	61536972                                 riSat

0808be3d <mon_name.0>:
 808be3d:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
 808be4d:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
 808be5d:	63654476 4e454552 616d2054 636f6c6c     vDecREENT malloc
 808be6d:	63757320 64656563 2f006465 2f746e6d      succeeded./mnt/
 808be7d:	6b726f77 63617073 6f772f65 70736b72     workspace/worksp
 808be8d:	2f656361 2d434347 702d3031 6c657069     ace/GCC-10-pipel
 808be9d:	2f656e69 6b6e656a 2d736e69 2d434347     ine/jenkins-GCC-
 808bead:	702d3031 6c657069 2d656e69 325f3834     10-pipeline-48_2
 808bebd:	31303230 5f343231 36303631 36303831     0201124_16061806
 808becd:	732f3134 6e2f6372 696c7765 656e2f62     41/src/newlib/ne
 808bedd:	62696c77 62696c2f 74732f63 62696c64     wlib/libc/stdlib
 808beed:	6e61722f 00632e64 746e6d2f 726f772f     /rand.c./mnt/wor
 808befd:	6170736b 772f6563 736b726f 65636170     kspace/workspace
 808bf0d:	4343472f 2d30312d 65706970 656e696c     /GCC-10-pipeline
 808bf1d:	6e656a2f 736e696b 4343472d 2d30312d     /jenkins-GCC-10-
 808bf2d:	65706970 656e696c 5f38342d 30323032     pipeline-48_2020
 808bf3d:	34323131 3036315f 30383136 2f313436     1124_1606180641/
 808bf4d:	2f637273 6c77656e 6e2f6269 696c7765     src/newlib/newli
 808bf5d:	696c2f62 732f6362 6e697274 74732f67     b/libc/string/st
 808bf6d:	6b6f7472                                 rtok.c.

0808bf74 <_ctype_>:
 808bf74:	20202000 20202020 28282020 20282828     .         ((((( 
 808bf84:	20202020 20202020 20202020 20202020                     
 808bf94:	10108820 10101010 10101010 10101010      ...............
 808bfa4:	04040410 04040404 10040404 10101010     ................
 808bfb4:	41411010 41414141 01010101 01010101     ..AAAAAA........
 808bfc4:	01010101 01010101 01010101 10101010     ................
 808bfd4:	42421010 42424242 02020202 02020202     ..BBBBBB........
 808bfe4:	02020202 02020202 02020202 10101010     ................
 808bff4:	00000020 00000000 00000000 00000000      ...............
	...

0808c075 <link_const_variable_data_end>:
 808c075:	00          	.byte	0x00
	...

0808c078 <link_constructors_location>:
 808c078:	08081a31 	.word	0x08081a31
 808c07c:	08081d5d 	.word	0x08081d5d
 808c080:	080821b1 	.word	0x080821b1
 808c084:	08082465 	.word	0x08082465
 808c088:	08082631 	.word	0x08082631
 808c08c:	08082a1d 	.word	0x08082a1d
 808c090:	08082c51 	.word	0x08082c51
 808c094:	08083089 	.word	0x08083089
 808c098:	08083fb9 	.word	0x08083fb9
 808c09c:	080855a1 	.word	0x080855a1
 808c0a0:	080867fd 	.word	0x080867fd
 808c0a4:	08086d71 	.word	0x08086d71
 808c0a8:	08086d99 	.word	0x08086d99
 808c0ac:	08087a81 	.word	0x08087a81
 808c0b0:	08087e19 	.word	0x08087e19
 808c0b4:	080883e1 	.word	0x080883e1

0808c0b8 <link_constructors_end>:
	...
