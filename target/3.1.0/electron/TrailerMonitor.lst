
c:/Users/Mitch/Documents/Particle/projects/TrailerMonitor/target/3.1.0/electron/TrailerMonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000c040  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000224  40024000  0808c060  00024000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000130  20000000  0808c284  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000008b4  20000130  20000130  00040130  2**3
                  ALLOC
  6 .module_info_suffix 00000028  0808c3b4  0808c3b4  0003c3b4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  0808c3dc  0808c3dc  0003c3dc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001a7716  00000000  00000000  0003c3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 0001fd2a  00000000  00000000  001e3af6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 00003160  00000000  00000000  00203820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 000083a0  00000000  00000000  00206980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  000384ee  00000000  00000000  0020ed20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   00054e33  00000000  00000000  0024720e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    000d0fc3  00000000  00000000  0029c041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_frame  00008c78  00000000  00000000  0036d004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    00031ddd  00000000  00000000  00375c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08080020 <localtime_r>:
#endif // !(defined(DYNALIB_IMPORT) && (defined(PARTICLE_COMPILE_LTO) || defined(PARTICLE_COMPILE_LTO_FAT)))
DYNALIB_FN(18, services2, mktime32, time32_t(struct tm*))
DYNALIB_FN(19, services2, __ssvfscanf_r, int(struct _reent*, FILE*, const char*, va_list))
DYNALIB_FN(20, services2, _printf_i, int(struct _reent*, struct _prt_data_t*, FILE*, int (*pfunc)(struct _reent *, FILE *, const char *, size_t), va_list*))
DYNALIB_FN(21, services2, localtime32_r, struct tm*(const time32_t*, struct tm*))
DYNALIB_FN(22, services2, localtime_r, struct tm*(const time_t*, struct tm*))
 8080020:	b508      	push	{r3, lr}
 8080022:	4b02      	ldr	r3, [pc, #8]	; (808002c <localtime_r+0xc>)
 8080024:	681b      	ldr	r3, [r3, #0]
 8080026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8080028:	9301      	str	r3, [sp, #4]
 808002a:	bd08      	pop	{r3, pc}
 808002c:	0806002c 	.word	0x0806002c

08080030 <strftime>:
DYNALIB_FN(23, services2, mktime, time_t(struct tm*))
DYNALIB_FN(24, services2, gmtime_r, struct tm*(const time_t*, struct tm*))
DYNALIB_FN(25, services2, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
 8080030:	b508      	push	{r3, lr}
 8080032:	4b02      	ldr	r3, [pc, #8]	; (808003c <strftime+0xc>)
 8080034:	681b      	ldr	r3, [r3, #0]
 8080036:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8080038:	9301      	str	r3, [sp, #4]
 808003a:	bd08      	pop	{r3, pc}
 808003c:	0806002c 	.word	0x0806002c

08080040 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080040:	4809      	ldr	r0, [pc, #36]	; (8080068 <module_user_pre_init+0x28>)
 8080042:	490a      	ldr	r1, [pc, #40]	; (808006c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 8080044:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080046:	4288      	cmp	r0, r1
 8080048:	d005      	beq.n	8080056 <module_user_pre_init+0x16>
 808004a:	4a09      	ldr	r2, [pc, #36]	; (8080070 <module_user_pre_init+0x30>)
 808004c:	4282      	cmp	r2, r0
 808004e:	d002      	beq.n	8080056 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 8080050:	1a12      	subs	r2, r2, r0
 8080052:	f00a fdcf 	bl	808abf4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080056:	4807      	ldr	r0, [pc, #28]	; (8080074 <module_user_pre_init+0x34>)
 8080058:	4a07      	ldr	r2, [pc, #28]	; (8080078 <module_user_pre_init+0x38>)
 808005a:	2100      	movs	r1, #0
 808005c:	1a12      	subs	r2, r2, r0
 808005e:	f00a fdf1 	bl	808ac44 <memset>
    return &link_heap_start;
}
 8080062:	4806      	ldr	r0, [pc, #24]	; (808007c <module_user_pre_init+0x3c>)
 8080064:	bd08      	pop	{r3, pc}
 8080066:	bf00      	nop
 8080068:	20000000 	.word	0x20000000
 808006c:	0808c284 	.word	0x0808c284
 8080070:	20000130 	.word	0x20000130
 8080074:	20000130 	.word	0x20000130
 8080078:	200009e4 	.word	0x200009e4
 808007c:	200009e4 	.word	0x200009e4

08080080 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 8080080:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 8080082:	f006 ffad 	bl	8086fe0 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080086:	2500      	movs	r5, #0
 8080088:	4e05      	ldr	r6, [pc, #20]	; (80800a0 <module_user_init+0x20>)
 808008a:	4c06      	ldr	r4, [pc, #24]	; (80800a4 <module_user_init+0x24>)
 808008c:	1ba4      	subs	r4, r4, r6
 808008e:	08a4      	lsrs	r4, r4, #2
 8080090:	42a5      	cmp	r5, r4
 8080092:	d100      	bne.n	8080096 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080094:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 8080096:	f856 3b04 	ldr.w	r3, [r6], #4
 808009a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808009c:	3501      	adds	r5, #1
 808009e:	e7f7      	b.n	8080090 <module_user_init+0x10>
 80800a0:	0808c020 	.word	0x0808c020
 80800a4:	0808c05c 	.word	0x0808c05c

080800a8 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80800a8:	f001 ba9c 	b.w	80815e4 <setup>

080800ac <module_user_loop>:
}

void module_user_loop() {
 80800ac:	b508      	push	{r3, lr}
    loop();
 80800ae:	f001 f87f 	bl	80811b0 <loop>
    _post_loop();
}
 80800b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80800b6:	f006 bf4b 	b.w	8086f50 <_post_loop>

080800ba <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80800ba:	f005 b839 	b.w	8085130 <malloc>

080800be <_Znaj>:
 80800be:	f005 b837 	b.w	8085130 <malloc>

080800c2 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80800c2:	f005 b83d 	b.w	8085140 <free>
	...

080800c8 <__cxa_pure_virtual>:
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 80800c8:	2100      	movs	r1, #0
 80800ca:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 80800cc:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80800ce:	4a02      	ldr	r2, [pc, #8]	; (80800d8 <__cxa_pure_virtual+0x10>)
 80800d0:	f004 fee6 	bl	8084ea0 <panic_>
  while (1);
 80800d4:	e7fe      	b.n	80800d4 <__cxa_pure_virtual+0xc>
 80800d6:	bf00      	nop
 80800d8:	08084aa1 	.word	0x08084aa1

080800dc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800dc:	7800      	ldrb	r0, [r0, #0]
 80800de:	fab0 f080 	clz	r0, r0
 80800e2:	0940      	lsrs	r0, r0, #5
 80800e4:	4770      	bx	lr

080800e6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800e6:	2301      	movs	r3, #1
 80800e8:	7003      	strb	r3, [r0, #0]
 80800ea:	4770      	bx	lr

080800ec <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 80800ec:	4770      	bx	lr

080800ee <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
 80800ee:	6a00      	ldr	r0, [r0, #32]
 80800f0:	6803      	ldr	r3, [r0, #0]
 80800f2:	68db      	ldr	r3, [r3, #12]
 80800f4:	4718      	bx	r3
	...

080800f8 <_Z7callGPSv>:
int transmittingData = ( TRANSMITTINGGPSDATA | TRANSMITTINGACCDATA | TRANSMITTINGPWRDATA | TRANSMITTINGDHTDATA );
// Run the GPS off a timer interrupt.
// read all bytes available, if an entire message was received,
// parse it store the data for access by the get routines.
void callGPS() {
     t.updateGPS();
 80800f8:	4801      	ldr	r0, [pc, #4]	; (8080100 <_Z7callGPSv+0x8>)
 80800fa:	f002 bf4b 	b.w	8082f94 <_ZN13AssetTracker29updateGPSEv>
 80800fe:	bf00      	nop
 8080100:	20000278 	.word	0x20000278

08080104 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
 8080104:	6943      	ldr	r3, [r0, #20]
 8080106:	b113      	cbz	r3, 808010e <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8080108:	6983      	ldr	r3, [r0, #24]
 808010a:	300c      	adds	r0, #12
 808010c:	4718      	bx	r3
            callback();
        }
    }
 808010e:	4770      	bx	lr

08080110 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_>:
        system_set_flag(flag, value, nullptr);
    }

    static SleepResult sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags);

    static void subscribedEventHandler(system_event_t events, int data, void* pointer, void* context) {
 8080110:	b530      	push	{r4, r5, lr}
 8080112:	b085      	sub	sp, #20
 8080114:	4604      	mov	r4, r0
 8080116:	9808      	ldr	r0, [sp, #32]
        if (!context) {
 8080118:	b160      	cbz	r0, 8080134 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        auto pContext = static_cast<const SystemEventContext*>(context);
        if (!pContext->callable) {
 808011a:	6840      	ldr	r0, [r0, #4]
 808011c:	b150      	cbz	r0, 8080134 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        std::function<void(system_event_t, int, void*)>* handler = reinterpret_cast< std::function<void(system_event_t, int, void*)>* >(pContext->callable);
        if (!(*handler)) {
 808011e:	6885      	ldr	r5, [r0, #8]
 8080120:	b145      	cbz	r5, 8080134 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        (*handler)(events, data, pointer);
 8080122:	e9cd 4102 	strd	r4, r1, [sp, #8]
 8080126:	e9cd 2300 	strd	r2, r3, [sp]
 808012a:	68c4      	ldr	r4, [r0, #12]
 808012c:	466a      	mov	r2, sp
 808012e:	ab01      	add	r3, sp, #4
 8080130:	a902      	add	r1, sp, #8
 8080132:	47a0      	blx	r4
    }
 8080134:	b005      	add	sp, #20
 8080136:	bd30      	pop	{r4, r5, pc}

08080138 <_Z16accelThresholder6String>:
		else
		  transmittingData &= ~( SERIALBTNDATA | SERIALCONNDATA | SERIALLOOPDATA | SERIALSETUPDATA | SERIALGPSDATA | SERIALACCDATA | SERIALPWRDATA | SERIALDHTDATA );
}

// Remotely change the trigger threshold!
int accelThresholder(String command) {
 8080138:	b508      	push	{r3, lr}
    accelThreshold = atoi(command);
 808013a:	6800      	ldr	r0, [r0, #0]
 808013c:	f00a fd44 	bl	808abc8 <atoi>
 8080140:	4b01      	ldr	r3, [pc, #4]	; (8080148 <_Z16accelThresholder6String+0x10>)
 8080142:	6018      	str	r0, [r3, #0]
    return accelThreshold;
}
 8080144:	bd08      	pop	{r3, pc}
 8080146:	bf00      	nop
 8080148:	20000000 	.word	0x20000000

0808014c <_Z18setDelayGPSMinutes6String>:
// Remotely change the publishing delay for GPS!
int setDelayGPSMinutes(String command) {
 808014c:	b508      	push	{r3, lr}
    delayGPSMinutes = atoi(command);
 808014e:	6800      	ldr	r0, [r0, #0]
 8080150:	f00a fd3a 	bl	808abc8 <atoi>
 8080154:	4b01      	ldr	r3, [pc, #4]	; (808015c <_Z18setDelayGPSMinutes6String+0x10>)
 8080156:	6018      	str	r0, [r3, #0]
    return delayGPSMinutes;
}
 8080158:	bd08      	pop	{r3, pc}
 808015a:	bf00      	nop
 808015c:	2000000c 	.word	0x2000000c

08080160 <_Z18setDelayACCMinutes6String>:

// Remotely change the publishing delay for ACC!
int setDelayACCMinutes(String command) {
 8080160:	b508      	push	{r3, lr}
    delayACCMinutes = atoi(command);
 8080162:	6800      	ldr	r0, [r0, #0]
 8080164:	f00a fd30 	bl	808abc8 <atoi>
 8080168:	4b01      	ldr	r3, [pc, #4]	; (8080170 <_Z18setDelayACCMinutes6String+0x10>)
 808016a:	6018      	str	r0, [r3, #0]
    return delayACCMinutes;
}
 808016c:	bd08      	pop	{r3, pc}
 808016e:	bf00      	nop
 8080170:	20000004 	.word	0x20000004

08080174 <_Z18setDelayDHTMinutes6String>:

// Remotely change the publishing delay for DHT!
int setDelayDHTMinutes(String command) {
 8080174:	b508      	push	{r3, lr}
    delayDHTMinutes = atoi(command);
 8080176:	6800      	ldr	r0, [r0, #0]
 8080178:	f00a fd26 	bl	808abc8 <atoi>
 808017c:	4b01      	ldr	r3, [pc, #4]	; (8080184 <_Z18setDelayDHTMinutes6String+0x10>)
 808017e:	6018      	str	r0, [r3, #0]
    return delayDHTMinutes;
}
 8080180:	bd08      	pop	{r3, pc}
 8080182:	bf00      	nop
 8080184:	20000008 	.word	0x20000008

08080188 <_Z12transmitMode6String>:

// Allows you to remotely change whether a device is publishing to the cloud
// or is only reporting data over Serial. Saves data when using only Serial!
// Change the default at the top of the code.
int transmitMode(String command) {
 8080188:	b508      	push	{r3, lr}
    transmittingData = atoi(command);
 808018a:	6800      	ldr	r0, [r0, #0]
 808018c:	f00a fd1c 	bl	808abc8 <atoi>
 8080190:	4b01      	ldr	r3, [pc, #4]	; (8080198 <_Z12transmitMode6String+0x10>)
 8080192:	6018      	str	r0, [r3, #0]
    return transmittingData;
}
 8080194:	bd08      	pop	{r3, pc}
 8080196:	bf00      	nop
 8080198:	20000014 	.word	0x20000014

0808019c <_Z8resetODO6String>:
  }
}


// Reset the trip odometer
int resetODO(String command) {
 808019c:	b508      	push	{r3, lr}
    t.gpsResetODO();
 808019e:	4802      	ldr	r0, [pc, #8]	; (80801a8 <_Z8resetODO6String+0xc>)
 80801a0:	f002 ff04 	bl	8082fac <_ZN13AssetTracker211gpsResetODOEv>
    return 1;
}
 80801a4:	2001      	movs	r0, #1
 80801a6:	bd08      	pop	{r3, pc}
 80801a8:	20000278 	.word	0x20000278

080801ac <_ZN11SystemClassD1Ev>:
class SystemClass {
 80801ac:	b510      	push	{r4, lr}
 80801ae:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80801b0:	6800      	ldr	r0, [r0, #0]
 80801b2:	b108      	cbz	r0, 80801b8 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 80801b4:	f004 ffc4 	bl	8085140 <free>
class SystemClass {
 80801b8:	4620      	mov	r0, r4
 80801ba:	bd10      	pop	{r4, pc}

080801bc <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
 80801bc:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
 80801be:	2100      	movs	r1, #0
 80801c0:	4604      	mov	r4, r0
 80801c2:	4608      	mov	r0, r1
 80801c4:	f004 fccc 	bl	8084b60 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
 80801c8:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
 80801ca:	4620      	mov	r0, r4
 80801cc:	a901      	add	r1, sp, #4
            void* id = nullptr;
 80801ce:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
 80801d0:	f004 fcde 	bl	8084b90 <os_timer_get_id>
            t = static_cast<Timer*>(id);
 80801d4:	9c01      	ldr	r4, [sp, #4]
            if (t) {
 80801d6:	b10c      	cbz	r4, 80801dc <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
 80801d8:	2301      	movs	r3, #1
 80801da:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
 80801dc:	2100      	movs	r1, #0
 80801de:	2001      	movs	r0, #1
 80801e0:	f004 fcbe 	bl	8084b60 <os_thread_scheduling>
            }
        }
        if (t) {
 80801e4:	b12c      	cbz	r4, 80801f2 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
 80801e6:	6823      	ldr	r3, [r4, #0]
 80801e8:	4620      	mov	r0, r4
 80801ea:	689b      	ldr	r3, [r3, #8]
 80801ec:	4798      	blx	r3
            t->running = false;
 80801ee:	2300      	movs	r3, #0
 80801f0:	7123      	strb	r3, [r4, #4]
        }
    }
 80801f2:	b002      	add	sp, #8
 80801f4:	bd10      	pop	{r4, pc}
	...

080801f8 <_Z13SetGPSAntenna6String>:
bool SetGPSAntenna(String command) {
 80801f8:	b510      	push	{r4, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80801fa:	490d      	ldr	r1, [pc, #52]	; (8080230 <_Z13SetGPSAntenna6String+0x38>)
 80801fc:	4604      	mov	r4, r0
 80801fe:	f005 fab4 	bl	808576a <_ZNK6String6equalsEPKc>
  if (command == "internal") {
 8080202:	b138      	cbz	r0, 8080214 <_Z13SetGPSAntenna6String+0x1c>
    gpsAntennaExternal = false;
 8080204:	2200      	movs	r2, #0
 8080206:	4b0b      	ldr	r3, [pc, #44]	; (8080234 <_Z13SetGPSAntenna6String+0x3c>)
    return t.antennaInternal();
 8080208:	480b      	ldr	r0, [pc, #44]	; (8080238 <_Z13SetGPSAntenna6String+0x40>)
    gpsAntennaExternal = false;
 808020a:	701a      	strb	r2, [r3, #0]
}
 808020c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return t.antennaInternal();
 8080210:	f002 be9c 	b.w	8082f4c <_ZN13AssetTracker215antennaInternalEv>
 8080214:	4620      	mov	r0, r4
 8080216:	4909      	ldr	r1, [pc, #36]	; (808023c <_Z13SetGPSAntenna6String+0x44>)
 8080218:	f005 faa7 	bl	808576a <_ZNK6String6equalsEPKc>
  } else if (command == "external") {
 808021c:	b138      	cbz	r0, 808022e <_Z13SetGPSAntenna6String+0x36>
    gpsAntennaExternal = true;
 808021e:	2201      	movs	r2, #1
 8080220:	4b04      	ldr	r3, [pc, #16]	; (8080234 <_Z13SetGPSAntenna6String+0x3c>)
    return t.antennaExternal();
 8080222:	4805      	ldr	r0, [pc, #20]	; (8080238 <_Z13SetGPSAntenna6String+0x40>)
    gpsAntennaExternal = true;
 8080224:	701a      	strb	r2, [r3, #0]
}
 8080226:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return t.antennaExternal();
 808022a:	f002 bea1 	b.w	8082f70 <_ZN13AssetTracker215antennaExternalEv>
}
 808022e:	bd10      	pop	{r4, pc}
 8080230:	0808af98 	.word	0x0808af98
 8080234:	20000010 	.word	0x20000010
 8080238:	20000278 	.word	0x20000278
 808023c:	0808afa1 	.word	0x0808afa1

08080240 <_ZNSt17_Function_handlerIFi6StringEPFbS0_EE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	switch (__op)
 8080240:	2a01      	cmp	r2, #1
 8080242:	d102      	bne.n	808024a <_ZNSt17_Function_handlerIFi6StringEPFbS0_EE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8080244:	6001      	str	r1, [r0, #0]
      }
 8080246:	2000      	movs	r0, #0
 8080248:	4770      	bx	lr
	  switch (__op)
 808024a:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 808024c:	bf04      	itt	eq
 808024e:	680b      	ldreq	r3, [r1, #0]
 8080250:	6003      	streq	r3, [r0, #0]
	      break;
 8080252:	e7f8      	b.n	8080246 <_ZNSt17_Function_handlerIFi6StringEPFbS0_EE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6>

08080254 <_ZNSt17_Function_handlerIFi6StringEPFbS0_EE9_M_invokeERKSt9_Any_dataOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8080254:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8080256:	6804      	ldr	r4, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8080258:	4668      	mov	r0, sp
 808025a:	f005 fa11 	bl	8085680 <_ZN6StringC1EOS_>
 808025e:	4668      	mov	r0, sp
 8080260:	47a0      	blx	r4
 8080262:	4604      	mov	r4, r0
 8080264:	4668      	mov	r0, sp
 8080266:	f005 f991 	bl	808558c <_ZN6StringD1Ev>
      }
 808026a:	4620      	mov	r0, r4
 808026c:	b004      	add	sp, #16
 808026e:	bd10      	pop	{r4, pc}

08080270 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
 8080270:	2a01      	cmp	r2, #1
 8080272:	d102      	bne.n	808027a <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8080274:	6001      	str	r1, [r0, #0]
      }
 8080276:	2000      	movs	r0, #0
 8080278:	4770      	bx	lr
	  switch (__op)
 808027a:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 808027c:	bf04      	itt	eq
 808027e:	680b      	ldreq	r3, [r1, #0]
 8080280:	6003      	streq	r3, [r0, #0]
	      break;
 8080282:	e7f8      	b.n	8080276 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

08080284 <_ZNSt17_Function_handlerIFvyiEPS0_E9_M_invokeERKSt9_Any_dataOyOi>:
 8080284:	6803      	ldr	r3, [r0, #0]
 8080286:	6812      	ldr	r2, [r2, #0]
 8080288:	e9d1 0100 	ldrd	r0, r1, [r1]
 808028c:	4718      	bx	r3

0808028e <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
 808028e:	2a01      	cmp	r2, #1
 8080290:	d102      	bne.n	8080298 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8080292:	6001      	str	r1, [r0, #0]
      }
 8080294:	2000      	movs	r0, #0
 8080296:	4770      	bx	lr
	  switch (__op)
 8080298:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 808029a:	bf04      	itt	eq
 808029c:	680b      	ldreq	r3, [r1, #0]
 808029e:	6003      	streq	r3, [r0, #0]
	      break;
 80802a0:	e7f8      	b.n	8080294 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

080802a2 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
 80802a2:	6803      	ldr	r3, [r0, #0]
 80802a4:	4718      	bx	r3

080802a6 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80802a6:	b530      	push	{r4, r5, lr}
 80802a8:	6813      	ldr	r3, [r2, #0]
	    return __source._M_access<_Functor*>();
 80802aa:	6800      	ldr	r0, [r0, #0]
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80802ac:	b085      	sub	sp, #20
 80802ae:	9301      	str	r3, [sp, #4]
      if (_M_empty())
 80802b0:	6883      	ldr	r3, [r0, #8]
 80802b2:	e9d1 4500 	ldrd	r4, r5, [r1]
 80802b6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80802ba:	b90b      	cbnz	r3, 80802c0 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_+0x1a>
	__throw_bad_function_call();
 80802bc:	f008 f8fd 	bl	80884ba <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80802c0:	68c3      	ldr	r3, [r0, #12]
 80802c2:	aa01      	add	r2, sp, #4
 80802c4:	a902      	add	r1, sp, #8
 80802c6:	4798      	blx	r3
      }
 80802c8:	b005      	add	sp, #20
 80802ca:	bd30      	pop	{r4, r5, pc}

080802cc <_ZN5Print7printlnIlLi0EEEjT_i.isra.0>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value), int> = 0>
    size_t println(T b, int base = DEC) {
 80802cc:	b570      	push	{r4, r5, r6, lr}
 80802ce:	4605      	mov	r5, r0
 80802d0:	460c      	mov	r4, r1

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
 80802d2:	4616      	mov	r6, r2
 80802d4:	b942      	cbnz	r2, 80802e8 <_ZN5Print7printlnIlLi0EEEjT_i.isra.0+0x1c>
        return write(n);
 80802d6:	6803      	ldr	r3, [r0, #0]
 80802d8:	b2c9      	uxtb	r1, r1
 80802da:	689b      	ldr	r3, [r3, #8]
 80802dc:	4798      	blx	r3
        n += println();
 80802de:	4628      	mov	r0, r5
    }
 80802e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        n += println();
 80802e4:	f005 bb11 	b.w	808590a <_ZN5Print7printlnEv>
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
 80802e8:	2900      	cmp	r1, #0
 80802ea:	da0a      	bge.n	8080302 <_ZN5Print7printlnIlLi0EEEjT_i.isra.0+0x36>
 80802ec:	2a0a      	cmp	r2, #10
 80802ee:	d108      	bne.n	8080302 <_ZN5Print7printlnIlLi0EEEjT_i.isra.0+0x36>
            t = print('-');
 80802f0:	212d      	movs	r1, #45	; 0x2d
 80802f2:	f005 fb07 	bl	8085904 <_ZN5Print5printEc>
            val = -n;
 80802f6:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80802f8:	4628      	mov	r0, r5
 80802fa:	b2f2      	uxtb	r2, r6
 80802fc:	f005 fb1b 	bl	8085936 <_ZN5Print11printNumberEmh>
 8080300:	e7ed      	b.n	80802de <_ZN5Print7printlnIlLi0EEEjT_i.isra.0+0x12>
            val = n;
 8080302:	4621      	mov	r1, r4
 8080304:	e7f8      	b.n	80802f8 <_ZN5Print7printlnIlLi0EEEjT_i.isra.0+0x2c>

08080306 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>:
    size_t println(T b, int base = DEC) {
 8080306:	b510      	push	{r4, lr}
 8080308:	4604      	mov	r4, r0
    if (base == 0) {
 808030a:	b93a      	cbnz	r2, 808031c <_ZN5Print7printlnIhLi0EEEjT_i.isra.0+0x16>
        return write(n);
 808030c:	6803      	ldr	r3, [r0, #0]
 808030e:	689b      	ldr	r3, [r3, #8]
 8080310:	4798      	blx	r3
        n += println();
 8080312:	4620      	mov	r0, r4
    }
 8080314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
 8080318:	f005 baf7 	b.w	808590a <_ZN5Print7printlnEv>
        return printNumber(val, base) + t;
 808031c:	b2d2      	uxtb	r2, r2
 808031e:	f005 fb0a 	bl	8085936 <_ZN5Print11printNumberEmh>
 8080322:	e7f6      	b.n	8080312 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0+0xc>

08080324 <_ZN10CloudClass9_functionEPKcPFi6StringE.isra.0>:
            "\n\nIn Particle.function, name must be " __XSTRING(USER_FUNC_KEY_LENGTH) " characters or less\n\n");

        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
 8080324:	4602      	mov	r2, r0
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
 8080326:	4801      	ldr	r0, [pc, #4]	; (808032c <_ZN10CloudClass9_functionEPKcPFi6StringE.isra.0+0x8>)
 8080328:	f006 bf09 	b.w	808713e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 808032c:	080870cf 	.word	0x080870cf

08080330 <_ZN10CloudClass8variableIA12_cJRiEEEbRKT_DpOT0_.isra.0>:
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 8080330:	2300      	movs	r3, #0
 8080332:	2202      	movs	r2, #2
 8080334:	f004 bea4 	b.w	8085080 <spark_variable>

08080338 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 8080338:	b510      	push	{r4, lr}
 808033a:	4604      	mov	r4, r0
 808033c:	4b09      	ldr	r3, [pc, #36]	; (8080364 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 808033e:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 8080340:	f005 fd92 	bl	8085e68 <_ZN5spark10LogManager8instanceEv>
 8080344:	4621      	mov	r1, r4
 8080346:	f005 fff0 	bl	808632a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 808034a:	f007 fa37 	bl	80877bc <_Z16_fetch_usbserialv>
 808034e:	f007 fa1b 	bl	8087788 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 8080352:	4620      	mov	r0, r4
 8080354:	4b04      	ldr	r3, [pc, #16]	; (8080368 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 8080356:	f840 3b04 	str.w	r3, [r0], #4
 808035a:	f005 fe83 	bl	8086064 <_ZN5spark6detail9LogFilterD1Ev>
    }
 808035e:	4620      	mov	r0, r4
 8080360:	bd10      	pop	{r4, pc}
 8080362:	bf00      	nop
 8080364:	0808b5f4 	.word	0x0808b5f4
 8080368:	0808b5dc 	.word	0x0808b5dc

0808036c <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 808036c:	b510      	push	{r4, lr}
 808036e:	4604      	mov	r4, r0
    }
 8080370:	f7ff ffe2 	bl	8080338 <_ZN5spark16SerialLogHandlerD1Ev>
 8080374:	4620      	mov	r0, r4
 8080376:	2124      	movs	r1, #36	; 0x24
 8080378:	f008 f899 	bl	80884ae <_ZdlPvj>
 808037c:	4620      	mov	r0, r4
 808037e:	bd10      	pop	{r4, pc}

08080380 <_Z7showAll6String>:
// then call the postValue routine passing it the name of one of these
// vales.
// For details on all values see the ublox spec:
// https://www.u-blox.com/sites/default/files/products/documents/u-blox8-M8_ReceiverDescrProtSpec_(UBX-13003221)_Public.pdf
int showAll(String cmd)
{
 8080380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    bool initComplete = t.gpsInitComplete();
 8080384:	4cc9      	ldr	r4, [pc, #804]	; (80806ac <_Z7showAll6String+0x32c>)
{
 8080386:	b093      	sub	sp, #76	; 0x4c
    bool initComplete = t.gpsInitComplete();
 8080388:	4620      	mov	r0, r4
 808038a:	f002 fdd3 	bl	8082f34 <_ZN13AssetTracker215gpsInitCompleteEv>
 808038e:	4683      	mov	fp, r0
    uint8_t hour = t.getHour(); // Time is UTC
 8080390:	4620      	mov	r0, r4
 8080392:	f002 fd35 	bl	8082e00 <_ZN13AssetTracker27getHourEv>
 8080396:	4682      	mov	sl, r0
    uint8_t minute = t.getMinute();
 8080398:	4620      	mov	r0, r4
 808039a:	f002 fd37 	bl	8082e0c <_ZN13AssetTracker29getMinuteEv>
 808039e:	4681      	mov	r9, r0
    uint8_t seconds = t.getSeconds();
 80803a0:	4620      	mov	r0, r4
 80803a2:	f002 fd39 	bl	8082e18 <_ZN13AssetTracker210getSecondsEv>
 80803a6:	4680      	mov	r8, r0
    uint8_t month = t.getMonth();
 80803a8:	4620      	mov	r0, r4
 80803aa:	f002 fd47 	bl	8082e3c <_ZN13AssetTracker28getMonthEv>
 80803ae:	4607      	mov	r7, r0
    uint8_t day = t.getDay();
 80803b0:	4620      	mov	r0, r4
 80803b2:	f002 fd49 	bl	8082e48 <_ZN13AssetTracker26getDayEv>
 80803b6:	4606      	mov	r6, r0
    uint16_t year = t.getYear();
 80803b8:	4620      	mov	r0, r4
 80803ba:	f002 fd39 	bl	8082e30 <_ZN13AssetTracker27getYearEv>
 80803be:	4605      	mov	r5, r0
    uint16_t milliseconds = t.getMilliseconds(); // Since last measurement
 80803c0:	4620      	mov	r0, r4
 80803c2:	f002 fd2f 	bl	8082e24 <_ZN13AssetTracker215getMillisecondsEv>
 80803c6:	9000      	str	r0, [sp, #0]
    float latitude = t.readLat(); // degrees
 80803c8:	4620      	mov	r0, r4
 80803ca:	f002 fcc9 	bl	8082d60 <_ZN13AssetTracker27readLatEv>
 80803ce:	9001      	str	r0, [sp, #4]
    float longitude = t.readLon(); // degrees
 80803d0:	4620      	mov	r0, r4
 80803d2:	f002 fccb 	bl	8082d6c <_ZN13AssetTracker27readLonEv>
 80803d6:	9002      	str	r0, [sp, #8]
    float latitudeDegrees = t.readLatDeg(); // degrees
 80803d8:	4620      	mov	r0, r4
 80803da:	f002 fccd 	bl	8082d78 <_ZN13AssetTracker210readLatDegEv>
 80803de:	9003      	str	r0, [sp, #12]
    float longitudeDegrees = t.readLonDeg(); // degrees
 80803e0:	4620      	mov	r0, r4
 80803e2:	f002 fccf 	bl	8082d84 <_ZN13AssetTracker210readLonDegEv>
 80803e6:	9004      	str	r0, [sp, #16]
    float geoidheight = t.getGeoIdHeight(); // Height above ellipsoid, mm
 80803e8:	4620      	mov	r0, r4
 80803ea:	f002 fd45 	bl	8082e78 <_ZN13AssetTracker214getGeoIdHeightEv>
 80803ee:	9005      	str	r0, [sp, #20]
    float altitude = t.getAltitude(); // Height above mean sea level, mm
 80803f0:	4620      	mov	r0, r4
 80803f2:	f002 fd47 	bl	8082e84 <_ZN13AssetTracker211getAltitudeEv>
 80803f6:	9006      	str	r0, [sp, #24]
    float speed = t.getSpeed();  // m/s
 80803f8:	4620      	mov	r0, r4
 80803fa:	f002 fd37 	bl	8082e6c <_ZN13AssetTracker28getSpeedEv>
 80803fe:	9007      	str	r0, [sp, #28]
    uint8_t fixquality = t.getFixQuality(); // 0:no fix,1:dead rec,2:2d,3:3d,4:gnss+dead rec,5:time only
 8080400:	4620      	mov	r0, r4
 8080402:	f002 fd2d 	bl	8082e60 <_ZN13AssetTracker213getFixQualityEv>
 8080406:	900f      	str	r0, [sp, #60]	; 0x3c
    uint8_t satellites = t.getSatellites(); // how many
 8080408:	4620      	mov	r0, r4
 808040a:	f002 fd23 	bl	8082e54 <_ZN13AssetTracker213getSatellitesEv>
 808040e:	9010      	str	r0, [sp, #64]	; 0x40
    uint32_t horzAcc = t.getHaccuracy(); // estimate, mm
 8080410:	4620      	mov	r0, r4
 8080412:	f002 fcc5 	bl	8082da0 <_ZN13AssetTracker212getHaccuracyEv>
 8080416:	9008      	str	r0, [sp, #32]
    uint32_t vertAcc = t.getVaccuracy(); // estimate, mm
 8080418:	4620      	mov	r0, r4
 808041a:	f002 fcc7 	bl	8082dac <_ZN13AssetTracker212getVaccuracyEv>
 808041e:	9009      	str	r0, [sp, #36]	; 0x24
    int32_t velN = t.getVelN(); // North velocity, mm/s
 8080420:	4620      	mov	r0, r4
 8080422:	f002 fcc9 	bl	8082db8 <_ZN13AssetTracker27getVelNEv>
 8080426:	900a      	str	r0, [sp, #40]	; 0x28
    int32_t velE = t.getVelE(); // East velocity, mm/s
 8080428:	4620      	mov	r0, r4
 808042a:	f002 fccb 	bl	8082dc4 <_ZN13AssetTracker27getVelEEv>
 808042e:	900b      	str	r0, [sp, #44]	; 0x2c
    int32_t velD = t.getVelD(); // Down velocity, mm/s
 8080430:	4620      	mov	r0, r4
 8080432:	f002 fccd 	bl	8082dd0 <_ZN13AssetTracker27getVelDEv>
 8080436:	900c      	str	r0, [sp, #48]	; 0x30
    int32_t gSpeed = t.getGspeed(); // Ground speed, mm/s
 8080438:	4620      	mov	r0, r4
 808043a:	f002 fcdb 	bl	8082df4 <_ZN13AssetTracker29getGspeedEv>
 808043e:	900d      	str	r0, [sp, #52]	; 0x34
    int32_t odoTrip = t.getOdoTrip(); // m
 8080440:	4620      	mov	r0, r4
 8080442:	f002 fccb 	bl	8082ddc <_ZN13AssetTracker210getOdoTripEv>
 8080446:	900e      	str	r0, [sp, #56]	; 0x38
    int32_t odoTotal = t.getOdoTotal(); // m
 8080448:	4620      	mov	r0, r4
 808044a:	f002 fccd 	bl	8082de8 <_ZN13AssetTracker211getOdoTotalEv>
 808044e:	4604      	mov	r4, r0



    Serial.print("initComplete: ");
 8080450:	f007 f9b4 	bl	80877bc <_Z16_fetch_usbserialv>
 8080454:	4996      	ldr	r1, [pc, #600]	; (80806b0 <_Z7showAll6String+0x330>)
 8080456:	f005 fa51 	bl	80858fc <_ZN5Print5printEPKc>
    Serial.println(initComplete);
 808045a:	f007 f9af 	bl	80877bc <_Z16_fetch_usbserialv>
 808045e:	220a      	movs	r2, #10
 8080460:	4659      	mov	r1, fp
 8080462:	9011      	str	r0, [sp, #68]	; 0x44
 8080464:	f005 fa67 	bl	8085936 <_ZN5Print11printNumberEmh>
        n += println();
 8080468:	9b11      	ldr	r3, [sp, #68]	; 0x44
 808046a:	4618      	mov	r0, r3
 808046c:	f005 fa4d 	bl	808590a <_ZN5Print7printlnEv>
    Serial.print("hour: ");
 8080470:	f007 f9a4 	bl	80877bc <_Z16_fetch_usbserialv>
 8080474:	498f      	ldr	r1, [pc, #572]	; (80806b4 <_Z7showAll6String+0x334>)
 8080476:	f005 fa41 	bl	80858fc <_ZN5Print5printEPKc>
    Serial.println(hour);
 808047a:	f007 f99f 	bl	80877bc <_Z16_fetch_usbserialv>
 808047e:	220a      	movs	r2, #10
 8080480:	4651      	mov	r1, sl
 8080482:	f7ff ff40 	bl	8080306 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
    Serial.print("minute: ");
 8080486:	f007 f999 	bl	80877bc <_Z16_fetch_usbserialv>
 808048a:	498b      	ldr	r1, [pc, #556]	; (80806b8 <_Z7showAll6String+0x338>)
 808048c:	f005 fa36 	bl	80858fc <_ZN5Print5printEPKc>
    Serial.println(minute);
 8080490:	f007 f994 	bl	80877bc <_Z16_fetch_usbserialv>
 8080494:	220a      	movs	r2, #10
 8080496:	4649      	mov	r1, r9
 8080498:	f7ff ff35 	bl	8080306 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
    Serial.print("seconds: ");
 808049c:	f007 f98e 	bl	80877bc <_Z16_fetch_usbserialv>
 80804a0:	4986      	ldr	r1, [pc, #536]	; (80806bc <_Z7showAll6String+0x33c>)
 80804a2:	f005 fa2b 	bl	80858fc <_ZN5Print5printEPKc>
    Serial.println(seconds);
 80804a6:	f007 f989 	bl	80877bc <_Z16_fetch_usbserialv>
 80804aa:	220a      	movs	r2, #10
 80804ac:	4641      	mov	r1, r8
 80804ae:	f7ff ff2a 	bl	8080306 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
    Serial.print("month: ");
 80804b2:	f007 f983 	bl	80877bc <_Z16_fetch_usbserialv>
 80804b6:	4982      	ldr	r1, [pc, #520]	; (80806c0 <_Z7showAll6String+0x340>)
 80804b8:	f005 fa20 	bl	80858fc <_ZN5Print5printEPKc>
    Serial.println(month);
 80804bc:	f007 f97e 	bl	80877bc <_Z16_fetch_usbserialv>
 80804c0:	220a      	movs	r2, #10
 80804c2:	4639      	mov	r1, r7
 80804c4:	f7ff ff1f 	bl	8080306 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
    Serial.print("day: ");
 80804c8:	f007 f978 	bl	80877bc <_Z16_fetch_usbserialv>
 80804cc:	497d      	ldr	r1, [pc, #500]	; (80806c4 <_Z7showAll6String+0x344>)
 80804ce:	f005 fa15 	bl	80858fc <_ZN5Print5printEPKc>
    Serial.println(day);
 80804d2:	f007 f973 	bl	80877bc <_Z16_fetch_usbserialv>
 80804d6:	220a      	movs	r2, #10
 80804d8:	4631      	mov	r1, r6
 80804da:	f7ff ff14 	bl	8080306 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
    Serial.print("year: ");
 80804de:	f007 f96d 	bl	80877bc <_Z16_fetch_usbserialv>
 80804e2:	4979      	ldr	r1, [pc, #484]	; (80806c8 <_Z7showAll6String+0x348>)
 80804e4:	f005 fa0a 	bl	80858fc <_ZN5Print5printEPKc>
    Serial.println(year);
 80804e8:	f007 f968 	bl	80877bc <_Z16_fetch_usbserialv>
 80804ec:	4606      	mov	r6, r0
        return printNumber(val, base) + t;
 80804ee:	220a      	movs	r2, #10
 80804f0:	4629      	mov	r1, r5
 80804f2:	f005 fa20 	bl	8085936 <_ZN5Print11printNumberEmh>
        n += println();
 80804f6:	4630      	mov	r0, r6
 80804f8:	f005 fa07 	bl	808590a <_ZN5Print7printlnEv>
    Serial.print("milliseconds: ");
 80804fc:	f007 f95e 	bl	80877bc <_Z16_fetch_usbserialv>
 8080500:	4972      	ldr	r1, [pc, #456]	; (80806cc <_Z7showAll6String+0x34c>)
 8080502:	f005 f9fb 	bl	80858fc <_ZN5Print5printEPKc>
    Serial.println(milliseconds);
 8080506:	f007 f959 	bl	80877bc <_Z16_fetch_usbserialv>
 808050a:	4605      	mov	r5, r0
        return printNumber(val, base) + t;
 808050c:	220a      	movs	r2, #10
 808050e:	f8bd 1000 	ldrh.w	r1, [sp]
 8080512:	f005 fa10 	bl	8085936 <_ZN5Print11printNumberEmh>
        n += println();
 8080516:	4628      	mov	r0, r5
 8080518:	f005 f9f7 	bl	808590a <_ZN5Print7printlnEv>
    Serial.print("latitude: ");
 808051c:	f007 f94e 	bl	80877bc <_Z16_fetch_usbserialv>
 8080520:	496b      	ldr	r1, [pc, #428]	; (80806d0 <_Z7showAll6String+0x350>)
 8080522:	f005 f9eb 	bl	80858fc <_ZN5Print5printEPKc>
    Serial.println(latitude);
 8080526:	f007 f949 	bl	80877bc <_Z16_fetch_usbserialv>
 808052a:	2202      	movs	r2, #2
 808052c:	9901      	ldr	r1, [sp, #4]
 808052e:	f005 faef 	bl	8085b10 <_ZN5Print7printlnEfi>
    Serial.print("longitude: ");
 8080532:	f007 f943 	bl	80877bc <_Z16_fetch_usbserialv>
 8080536:	4967      	ldr	r1, [pc, #412]	; (80806d4 <_Z7showAll6String+0x354>)
 8080538:	f005 f9e0 	bl	80858fc <_ZN5Print5printEPKc>
    Serial.println(longitude);
 808053c:	f007 f93e 	bl	80877bc <_Z16_fetch_usbserialv>
 8080540:	2202      	movs	r2, #2
 8080542:	9902      	ldr	r1, [sp, #8]
 8080544:	f005 fae4 	bl	8085b10 <_ZN5Print7printlnEfi>
    Serial.print("latitudeDegrees: ");
 8080548:	f007 f938 	bl	80877bc <_Z16_fetch_usbserialv>
 808054c:	4962      	ldr	r1, [pc, #392]	; (80806d8 <_Z7showAll6String+0x358>)
 808054e:	f005 f9d5 	bl	80858fc <_ZN5Print5printEPKc>
    Serial.println(latitudeDegrees);
 8080552:	f007 f933 	bl	80877bc <_Z16_fetch_usbserialv>
 8080556:	2202      	movs	r2, #2
 8080558:	9903      	ldr	r1, [sp, #12]
 808055a:	f005 fad9 	bl	8085b10 <_ZN5Print7printlnEfi>
    Serial.print("longitudeDegrees: ");
 808055e:	f007 f92d 	bl	80877bc <_Z16_fetch_usbserialv>
 8080562:	495e      	ldr	r1, [pc, #376]	; (80806dc <_Z7showAll6String+0x35c>)
 8080564:	f005 f9ca 	bl	80858fc <_ZN5Print5printEPKc>
    Serial.println(longitudeDegrees);
 8080568:	f007 f928 	bl	80877bc <_Z16_fetch_usbserialv>
 808056c:	2202      	movs	r2, #2
 808056e:	9904      	ldr	r1, [sp, #16]
 8080570:	f005 face 	bl	8085b10 <_ZN5Print7printlnEfi>
    Serial.print("geoidheight: ");
 8080574:	f007 f922 	bl	80877bc <_Z16_fetch_usbserialv>
 8080578:	4959      	ldr	r1, [pc, #356]	; (80806e0 <_Z7showAll6String+0x360>)
 808057a:	f005 f9bf 	bl	80858fc <_ZN5Print5printEPKc>
    Serial.println(geoidheight);
 808057e:	f007 f91d 	bl	80877bc <_Z16_fetch_usbserialv>
 8080582:	2202      	movs	r2, #2
 8080584:	9905      	ldr	r1, [sp, #20]
 8080586:	f005 fac3 	bl	8085b10 <_ZN5Print7printlnEfi>
    Serial.print("altitude: ");
 808058a:	f007 f917 	bl	80877bc <_Z16_fetch_usbserialv>
 808058e:	4955      	ldr	r1, [pc, #340]	; (80806e4 <_Z7showAll6String+0x364>)
 8080590:	f005 f9b4 	bl	80858fc <_ZN5Print5printEPKc>
    Serial.println(altitude);
 8080594:	f007 f912 	bl	80877bc <_Z16_fetch_usbserialv>
 8080598:	2202      	movs	r2, #2
 808059a:	9906      	ldr	r1, [sp, #24]
 808059c:	f005 fab8 	bl	8085b10 <_ZN5Print7printlnEfi>
    Serial.print("speed: ");
 80805a0:	f007 f90c 	bl	80877bc <_Z16_fetch_usbserialv>
 80805a4:	4950      	ldr	r1, [pc, #320]	; (80806e8 <_Z7showAll6String+0x368>)
 80805a6:	f005 f9a9 	bl	80858fc <_ZN5Print5printEPKc>
    Serial.println(speed);
 80805aa:	f007 f907 	bl	80877bc <_Z16_fetch_usbserialv>
 80805ae:	2202      	movs	r2, #2
 80805b0:	9907      	ldr	r1, [sp, #28]
 80805b2:	f005 faad 	bl	8085b10 <_ZN5Print7printlnEfi>
    Serial.print("fixquality: ");
 80805b6:	f007 f901 	bl	80877bc <_Z16_fetch_usbserialv>
 80805ba:	494c      	ldr	r1, [pc, #304]	; (80806ec <_Z7showAll6String+0x36c>)
 80805bc:	f005 f99e 	bl	80858fc <_ZN5Print5printEPKc>
    Serial.println(fixquality);
 80805c0:	f007 f8fc 	bl	80877bc <_Z16_fetch_usbserialv>
 80805c4:	220a      	movs	r2, #10
 80805c6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80805c8:	f7ff fe9d 	bl	8080306 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
    Serial.print("satellites: ");
 80805cc:	f007 f8f6 	bl	80877bc <_Z16_fetch_usbserialv>
 80805d0:	4947      	ldr	r1, [pc, #284]	; (80806f0 <_Z7showAll6String+0x370>)
 80805d2:	f005 f993 	bl	80858fc <_ZN5Print5printEPKc>
    Serial.println(satellites);
 80805d6:	f007 f8f1 	bl	80877bc <_Z16_fetch_usbserialv>
 80805da:	220a      	movs	r2, #10
 80805dc:	9910      	ldr	r1, [sp, #64]	; 0x40
 80805de:	f7ff fe92 	bl	8080306 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
    Serial.print("horzAcc: ");
 80805e2:	f007 f8eb 	bl	80877bc <_Z16_fetch_usbserialv>
 80805e6:	4943      	ldr	r1, [pc, #268]	; (80806f4 <_Z7showAll6String+0x374>)
 80805e8:	f005 f988 	bl	80858fc <_ZN5Print5printEPKc>
    Serial.println(horzAcc);
 80805ec:	f007 f8e6 	bl	80877bc <_Z16_fetch_usbserialv>
 80805f0:	4605      	mov	r5, r0
        return printNumber(val, base) + t;
 80805f2:	220a      	movs	r2, #10
 80805f4:	9908      	ldr	r1, [sp, #32]
 80805f6:	f005 f99e 	bl	8085936 <_ZN5Print11printNumberEmh>
        n += println();
 80805fa:	4628      	mov	r0, r5
 80805fc:	f005 f985 	bl	808590a <_ZN5Print7printlnEv>
    Serial.print("vertAcc: ");
 8080600:	f007 f8dc 	bl	80877bc <_Z16_fetch_usbserialv>
 8080604:	493c      	ldr	r1, [pc, #240]	; (80806f8 <_Z7showAll6String+0x378>)
 8080606:	f005 f979 	bl	80858fc <_ZN5Print5printEPKc>
    Serial.println(vertAcc);
 808060a:	f007 f8d7 	bl	80877bc <_Z16_fetch_usbserialv>
 808060e:	4605      	mov	r5, r0
        return printNumber(val, base) + t;
 8080610:	220a      	movs	r2, #10
 8080612:	9909      	ldr	r1, [sp, #36]	; 0x24
 8080614:	f005 f98f 	bl	8085936 <_ZN5Print11printNumberEmh>
        n += println();
 8080618:	4628      	mov	r0, r5
 808061a:	f005 f976 	bl	808590a <_ZN5Print7printlnEv>
    Serial.print("velN: ");
 808061e:	f007 f8cd 	bl	80877bc <_Z16_fetch_usbserialv>
 8080622:	4936      	ldr	r1, [pc, #216]	; (80806fc <_Z7showAll6String+0x37c>)
 8080624:	f005 f96a 	bl	80858fc <_ZN5Print5printEPKc>
    Serial.println(velN);
 8080628:	f007 f8c8 	bl	80877bc <_Z16_fetch_usbserialv>
 808062c:	220a      	movs	r2, #10
 808062e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8080630:	f7ff fe4c 	bl	80802cc <_ZN5Print7printlnIlLi0EEEjT_i.isra.0>
    Serial.print("velE: ");
 8080634:	f007 f8c2 	bl	80877bc <_Z16_fetch_usbserialv>
 8080638:	4931      	ldr	r1, [pc, #196]	; (8080700 <_Z7showAll6String+0x380>)
 808063a:	f005 f95f 	bl	80858fc <_ZN5Print5printEPKc>
    Serial.println(velE);
 808063e:	f007 f8bd 	bl	80877bc <_Z16_fetch_usbserialv>
 8080642:	220a      	movs	r2, #10
 8080644:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8080646:	f7ff fe41 	bl	80802cc <_ZN5Print7printlnIlLi0EEEjT_i.isra.0>
    Serial.print("velD: ");
 808064a:	f007 f8b7 	bl	80877bc <_Z16_fetch_usbserialv>
 808064e:	492d      	ldr	r1, [pc, #180]	; (8080704 <_Z7showAll6String+0x384>)
 8080650:	f005 f954 	bl	80858fc <_ZN5Print5printEPKc>
    Serial.println(velD);
 8080654:	f007 f8b2 	bl	80877bc <_Z16_fetch_usbserialv>
 8080658:	220a      	movs	r2, #10
 808065a:	990c      	ldr	r1, [sp, #48]	; 0x30
 808065c:	f7ff fe36 	bl	80802cc <_ZN5Print7printlnIlLi0EEEjT_i.isra.0>
    Serial.print("gSpeed: ");
 8080660:	f007 f8ac 	bl	80877bc <_Z16_fetch_usbserialv>
 8080664:	4928      	ldr	r1, [pc, #160]	; (8080708 <_Z7showAll6String+0x388>)
 8080666:	f005 f949 	bl	80858fc <_ZN5Print5printEPKc>
    Serial.println(gSpeed);
 808066a:	f007 f8a7 	bl	80877bc <_Z16_fetch_usbserialv>
 808066e:	220a      	movs	r2, #10
 8080670:	990d      	ldr	r1, [sp, #52]	; 0x34
 8080672:	f7ff fe2b 	bl	80802cc <_ZN5Print7printlnIlLi0EEEjT_i.isra.0>
    Serial.print("odoTrip: ");
 8080676:	f007 f8a1 	bl	80877bc <_Z16_fetch_usbserialv>
 808067a:	4924      	ldr	r1, [pc, #144]	; (808070c <_Z7showAll6String+0x38c>)
 808067c:	f005 f93e 	bl	80858fc <_ZN5Print5printEPKc>
    Serial.println(odoTrip);
 8080680:	f007 f89c 	bl	80877bc <_Z16_fetch_usbserialv>
 8080684:	220a      	movs	r2, #10
 8080686:	990e      	ldr	r1, [sp, #56]	; 0x38
 8080688:	f7ff fe20 	bl	80802cc <_ZN5Print7printlnIlLi0EEEjT_i.isra.0>
    Serial.print("odoTotal: ");
 808068c:	f007 f896 	bl	80877bc <_Z16_fetch_usbserialv>
 8080690:	491f      	ldr	r1, [pc, #124]	; (8080710 <_Z7showAll6String+0x390>)
 8080692:	f005 f933 	bl	80858fc <_ZN5Print5printEPKc>
    Serial.println(odoTotal);
 8080696:	f007 f891 	bl	80877bc <_Z16_fetch_usbserialv>
 808069a:	220a      	movs	r2, #10
 808069c:	4621      	mov	r1, r4
 808069e:	f7ff fe15 	bl	80802cc <_ZN5Print7printlnIlLi0EEEjT_i.isra.0>

    return 1;
}
 80806a2:	2001      	movs	r0, #1
 80806a4:	b013      	add	sp, #76	; 0x4c
 80806a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80806aa:	bf00      	nop
 80806ac:	20000278 	.word	0x20000278
 80806b0:	0808afaa 	.word	0x0808afaa
 80806b4:	0808afb9 	.word	0x0808afb9
 80806b8:	0808afc0 	.word	0x0808afc0
 80806bc:	0808afe3 	.word	0x0808afe3
 80806c0:	0808afc9 	.word	0x0808afc9
 80806c4:	0808afd1 	.word	0x0808afd1
 80806c8:	0808afd7 	.word	0x0808afd7
 80806cc:	0808afde 	.word	0x0808afde
 80806d0:	0808afed 	.word	0x0808afed
 80806d4:	0808aff8 	.word	0x0808aff8
 80806d8:	0808b004 	.word	0x0808b004
 80806dc:	0808b016 	.word	0x0808b016
 80806e0:	0808b029 	.word	0x0808b029
 80806e4:	0808b037 	.word	0x0808b037
 80806e8:	0808b042 	.word	0x0808b042
 80806ec:	0808b04a 	.word	0x0808b04a
 80806f0:	0808b057 	.word	0x0808b057
 80806f4:	0808b064 	.word	0x0808b064
 80806f8:	0808b06e 	.word	0x0808b06e
 80806fc:	0808b078 	.word	0x0808b078
 8080700:	0808b07f 	.word	0x0808b07f
 8080704:	0808b086 	.word	0x0808b086
 8080708:	0808b08d 	.word	0x0808b08d
 808070c:	0808b096 	.word	0x0808b096
 8080710:	0808b0a0 	.word	0x0808b0a0

08080714 <_Z7gpsRate6String>:
int gpsRate(String command) {
 8080714:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8080716:	4604      	mov	r4, r0
    uint16_t rate = atoi(command);
 8080718:	6800      	ldr	r0, [r0, #0]
 808071a:	f00a fa55 	bl	808abc8 <atoi>
    int nav = atoi(command.substring(command.indexOf(' ')));
 808071e:	2120      	movs	r1, #32
    uint16_t rate = atoi(command);
 8080720:	b286      	uxth	r6, r0
    int nav = atoi(command.substring(command.indexOf(' ')));
 8080722:	4620      	mov	r0, r4
 8080724:	f005 f86b 	bl	80857fe <_ZNK6String7indexOfEc>
 8080728:	4621      	mov	r1, r4
 808072a:	4602      	mov	r2, r0
 808072c:	4668      	mov	r0, sp
 808072e:	f005 f88b 	bl	8085848 <_ZNK6String9substringEj>
 8080732:	9800      	ldr	r0, [sp, #0]
 8080734:	f00a fa48 	bl	808abc8 <atoi>
 8080738:	4604      	mov	r4, r0
 808073a:	4668      	mov	r0, sp
 808073c:	f004 ff26 	bl	808558c <_ZN6StringD1Ev>
		if ((transmittingData & SERIALGPSDATA) == SERIALGPSDATA) {
 8080740:	4b16      	ldr	r3, [pc, #88]	; (808079c <_Z7gpsRate6String+0x88>)
 8080742:	681b      	ldr	r3, [r3, #0]
 8080744:	00db      	lsls	r3, r3, #3
 8080746:	d51f      	bpl.n	8080788 <_Z7gpsRate6String+0x74>
			Serial.print("rate: ");
 8080748:	f007 f838 	bl	80877bc <_Z16_fetch_usbserialv>
 808074c:	4914      	ldr	r1, [pc, #80]	; (80807a0 <_Z7gpsRate6String+0x8c>)
 808074e:	f005 f8d5 	bl	80858fc <_ZN5Print5printEPKc>
	    Serial.print(rate);
 8080752:	f007 f833 	bl	80877bc <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
 8080756:	220a      	movs	r2, #10
 8080758:	4631      	mov	r1, r6
 808075a:	f005 f8ec 	bl	8085936 <_ZN5Print11printNumberEmh>
	    Serial.print(" nav: ");
 808075e:	f007 f82d 	bl	80877bc <_Z16_fetch_usbserialv>
 8080762:	4910      	ldr	r1, [pc, #64]	; (80807a4 <_Z7gpsRate6String+0x90>)
 8080764:	f005 f8ca 	bl	80858fc <_ZN5Print5printEPKc>
	    Serial.println(nav);
 8080768:	f007 f828 	bl	80877bc <_Z16_fetch_usbserialv>
        if (n < 0 && base == 10) {
 808076c:	2c00      	cmp	r4, #0
 808076e:	4605      	mov	r5, r0
 8080770:	da12      	bge.n	8080798 <_Z7gpsRate6String+0x84>
            t = print('-');
 8080772:	212d      	movs	r1, #45	; 0x2d
 8080774:	f005 f8c6 	bl	8085904 <_ZN5Print5printEc>
            val = -n;
 8080778:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
 808077a:	220a      	movs	r2, #10
 808077c:	4628      	mov	r0, r5
 808077e:	f005 f8da 	bl	8085936 <_ZN5Print11printNumberEmh>
        n += println();
 8080782:	4628      	mov	r0, r5
 8080784:	f005 f8c1 	bl	808590a <_ZN5Print7printlnEv>
    t.gpsRate(rate, nav);
 8080788:	4622      	mov	r2, r4
 808078a:	4631      	mov	r1, r6
 808078c:	4806      	ldr	r0, [pc, #24]	; (80807a8 <_Z7gpsRate6String+0x94>)
 808078e:	f002 fc07 	bl	8082fa0 <_ZN13AssetTracker27gpsRateEti>
}
 8080792:	2001      	movs	r0, #1
 8080794:	b004      	add	sp, #16
 8080796:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
 8080798:	4621      	mov	r1, r4
 808079a:	e7ee      	b.n	808077a <_Z7gpsRate6String+0x66>
 808079c:	20000014 	.word	0x20000014
 80807a0:	0808b0ab 	.word	0x0808b0ab
 80807a4:	0808b0b2 	.word	0x0808b0b2
 80807a8:	20000278 	.word	0x20000278

080807ac <_ZN5Print8printlnfEPKcz>:
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 80807ac:	b40e      	push	{r1, r2, r3}
 80807ae:	b503      	push	{r0, r1, lr}
 80807b0:	ab03      	add	r3, sp, #12
 80807b2:	f853 2b04 	ldr.w	r2, [r3], #4
        auto r = this->vprintf(true, format, args);
 80807b6:	2101      	movs	r1, #1
        va_start(args, format);
 80807b8:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
 80807ba:	f005 f9b7 	bl	8085b2c <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
 80807be:	b002      	add	sp, #8
 80807c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80807c4:	b003      	add	sp, #12
 80807c6:	4770      	bx	lr

080807c8 <_Z14button_clickedyi>:
{
 80807c8:	b538      	push	{r3, r4, r5, lr}
		if ((transmittingData & SERIALBTNDATA) == SERIALBTNDATA)
 80807ca:	4c0a      	ldr	r4, [pc, #40]	; (80807f4 <_Z14button_clickedyi+0x2c>)
{
 80807cc:	4615      	mov	r5, r2
		if ((transmittingData & SERIALBTNDATA) == SERIALBTNDATA)
 80807ce:	6823      	ldr	r3, [r4, #0]
 80807d0:	01d9      	lsls	r1, r3, #7
 80807d2:	d506      	bpl.n	80807e2 <_Z14button_clickedyi+0x1a>
    	Serial.printlnf("button was clicked %d times", times);
 80807d4:	f006 fff2 	bl	80877bc <_Z16_fetch_usbserialv>
 80807d8:	4907      	ldr	r1, [pc, #28]	; (80807f8 <_Z14button_clickedyi+0x30>)
 80807da:	f005 020f 	and.w	r2, r5, #15
 80807de:	f7ff ffe5 	bl	80807ac <_ZN5Print8printlnfEPKcz>
		if ((transmittingData & SERIALLOOPDATA) == 0)
 80807e2:	6823      	ldr	r3, [r4, #0]
 80807e4:	011a      	lsls	r2, r3, #4
		 	transmittingData |= ( SERIALBTNDATA | SERIALCONNDATA | SERIALLOOPDATA | SERIALSETUPDATA | SERIALGPSDATA | SERIALACCDATA | SERIALPWRDATA | SERIALDHTDATA );
 80807e6:	bf54      	ite	pl
 80807e8:	f043 437f 	orrpl.w	r3, r3, #4278190080	; 0xff000000
		  transmittingData &= ~( SERIALBTNDATA | SERIALCONNDATA | SERIALLOOPDATA | SERIALSETUPDATA | SERIALGPSDATA | SERIALACCDATA | SERIALPWRDATA | SERIALDHTDATA );
 80807ec:	f023 437f 	bicmi.w	r3, r3, #4278190080	; 0xff000000
 80807f0:	6023      	str	r3, [r4, #0]
}
 80807f2:	bd38      	pop	{r3, r4, r5, pc}
 80807f4:	20000014 	.word	0x20000014
 80807f8:	0808b0b9 	.word	0x0808b0b9

080807fc <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 80807fc:	b510      	push	{r4, lr}
      if (_M_manager)
 80807fe:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 8080800:	4604      	mov	r4, r0
      if (_M_manager)
 8080802:	b113      	cbz	r3, 808080a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8080804:	2203      	movs	r2, #3
 8080806:	4601      	mov	r1, r0
 8080808:	4798      	blx	r3
    }
 808080a:	4620      	mov	r0, r4
 808080c:	bd10      	pop	{r4, pc}
	...

08080810 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
 8080810:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8080812:	4b13      	ldr	r3, [pc, #76]	; (8080860 <_ZN5TimerD1Ev+0x50>)
 8080814:	4604      	mov	r4, r0
 8080816:	6003      	str	r3, [r0, #0]
        if (handle) {
 8080818:	6880      	ldr	r0, [r0, #8]
 808081a:	b1c8      	cbz	r0, 8080850 <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
 808081c:	2500      	movs	r5, #0
 808081e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8080822:	2102      	movs	r1, #2
 8080824:	e9cd 3500 	strd	r3, r5, [sp]
 8080828:	462a      	mov	r2, r5
 808082a:	462b      	mov	r3, r5
 808082c:	f004 f9b8 	bl	8084ba0 <os_timer_change>
            os_timer_set_id(handle, nullptr);
 8080830:	4629      	mov	r1, r5
 8080832:	68a0      	ldr	r0, [r4, #8]
 8080834:	f004 f9e4 	bl	8084c00 <os_timer_set_id>
            while (running) {
 8080838:	7923      	ldrb	r3, [r4, #4]
 808083a:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 808083e:	b113      	cbz	r3, 8080846 <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
 8080840:	f004 f976 	bl	8084b30 <os_thread_yield>
            while (running) {
 8080844:	e7f8      	b.n	8080838 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
 8080846:	4629      	mov	r1, r5
 8080848:	68a0      	ldr	r0, [r4, #8]
 808084a:	f004 f999 	bl	8084b80 <os_timer_destroy>
            handle = nullptr;
 808084e:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
 8080850:	f104 000c 	add.w	r0, r4, #12
 8080854:	f7ff ffd2 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
    }
 8080858:	4620      	mov	r0, r4
 808085a:	b003      	add	sp, #12
 808085c:	bd30      	pop	{r4, r5, pc}
 808085e:	bf00      	nop
 8080860:	0808b5c8 	.word	0x0808b5c8

08080864 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
 8080864:	b510      	push	{r4, lr}
 8080866:	4604      	mov	r4, r0
    }
 8080868:	f7ff ffd2 	bl	8080810 <_ZN5TimerD1Ev>
 808086c:	4620      	mov	r0, r4
 808086e:	211c      	movs	r1, #28
 8080870:	f007 fe1d 	bl	80884ae <_ZdlPvj>
 8080874:	4620      	mov	r0, r4
 8080876:	bd10      	pop	{r4, pc}

08080878 <_Z12startupMacrov>:
        return HAL_Feature_Set(feature, true);
 8080878:	2101      	movs	r1, #1
void startupMacro() {
 808087a:	b508      	push	{r3, lr}
 808087c:	4608      	mov	r0, r1
 808087e:	f004 f937 	bl	8084af0 <HAL_Feature_Set>
}
 8080882:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8080886:	2101      	movs	r1, #1
 8080888:	2004      	movs	r0, #4
 808088a:	f004 b931 	b.w	8084af0 <HAL_Feature_Set>

0808088e <_ZNSt8functionIFvyiEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 808088e:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8080890:	2300      	movs	r3, #0
 8080892:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 8080894:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 8080896:	4604      	mov	r4, r0
 8080898:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 808089a:	b12b      	cbz	r3, 80808a8 <_ZNSt8functionIFvyiEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 808089c:	2202      	movs	r2, #2
 808089e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80808a0:	68eb      	ldr	r3, [r5, #12]
 80808a2:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80808a4:	68ab      	ldr	r3, [r5, #8]
 80808a6:	60a3      	str	r3, [r4, #8]
    }
 80808a8:	4620      	mov	r0, r4
 80808aa:	bd38      	pop	{r3, r4, r5, pc}

080808ac <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
 80808ac:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80808ae:	b570      	push	{r4, r5, r6, lr}
 80808b0:	4604      	mov	r4, r0
	switch (__op)
 80808b2:	d103      	bne.n	80808bc <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 80808b4:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80808b6:	6003      	str	r3, [r0, #0]
      }
 80808b8:	2000      	movs	r0, #0
 80808ba:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
 80808bc:	2a02      	cmp	r2, #2
 80808be:	d00c      	beq.n	80808da <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x2e>
 80808c0:	2a03      	cmp	r2, #3
 80808c2:	d1f9      	bne.n	80808b8 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 80808c4:	6804      	ldr	r4, [r0, #0]
 80808c6:	2c00      	cmp	r4, #0
 80808c8:	d0f6      	beq.n	80808b8 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
 80808ca:	4620      	mov	r0, r4
 80808cc:	f7ff ff96 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80808d0:	2110      	movs	r1, #16
 80808d2:	4620      	mov	r0, r4
 80808d4:	f007 fdeb 	bl	80884ae <_ZdlPvj>
 80808d8:	e7ee      	b.n	80808b8 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 80808da:	2010      	movs	r0, #16
	  __dest._M_access<_Functor*>() =
 80808dc:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80808de:	f7ff fbec 	bl	80800ba <_Znwj>
 80808e2:	4605      	mov	r5, r0
 80808e4:	b110      	cbz	r0, 80808ec <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x40>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
 80808e6:	4631      	mov	r1, r6
 80808e8:	f7ff ffd1 	bl	808088e <_ZNSt8functionIFvyiEEC1ERKS1_>
	  __dest._M_access<_Functor*>() =
 80808ec:	6025      	str	r5, [r4, #0]
	}
 80808ee:	e7e3      	b.n	80808b8 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>

080808f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80808f0:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80808f2:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80808f4:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80808f6:	b17c      	cbz	r4, 8080918 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80808f8:	6863      	ldr	r3, [r4, #4]
 80808fa:	3b01      	subs	r3, #1
 80808fc:	6063      	str	r3, [r4, #4]
 80808fe:	b95b      	cbnz	r3, 8080918 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 8080900:	6823      	ldr	r3, [r4, #0]
 8080902:	4620      	mov	r0, r4
 8080904:	689b      	ldr	r3, [r3, #8]
 8080906:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8080908:	68a3      	ldr	r3, [r4, #8]
 808090a:	3b01      	subs	r3, #1
 808090c:	60a3      	str	r3, [r4, #8]
 808090e:	b91b      	cbnz	r3, 8080918 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 8080910:	6823      	ldr	r3, [r4, #0]
 8080912:	4620      	mov	r0, r4
 8080914:	68db      	ldr	r3, [r3, #12]
 8080916:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 8080918:	4628      	mov	r0, r5
 808091a:	bd38      	pop	{r3, r4, r5, pc}

0808091c <_Z10gpsPublish6String>:
int gpsPublish(String command) {
 808091c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (t.gpsFix()) {
 8080920:	482e      	ldr	r0, [pc, #184]	; (80809dc <_Z10gpsPublish6String+0xc0>)
int gpsPublish(String command) {
 8080922:	b092      	sub	sp, #72	; 0x48
    if (t.gpsFix()) {
 8080924:	f002 fb0c 	bl	8082f40 <_ZN13AssetTracker26gpsFixEv>
 8080928:	2800      	cmp	r0, #0
 808092a:	d054      	beq.n	80809d6 <_Z10gpsPublish6String+0xba>
			  time_t time = Time.now();
 808092c:	f006 f9e7 	bl	8086cfe <_ZN9TimeClass3nowEv>
 8080930:	4605      	mov	r5, r0
			  Particle.publish("LJGPSFIX", String::format("{\"la\":%f,\"lo\":%f,\"ht\":%f,\"ac\":%f,\"tm\":\"%s\"}",t.readLatDeg(),t.readLonDeg(),(t.getAltitude() / 1000),(t.getGpsAccuracy() / 1000),Time.format(time, TIME_FORMAT_ISO8601_FULL).c_str()), 60, PRIVATE);
 8080932:	482a      	ldr	r0, [pc, #168]	; (80809dc <_Z10gpsPublish6String+0xc0>)
 8080934:	f002 fa20 	bl	8082d78 <_ZN13AssetTracker210readLatDegEv>
 8080938:	4604      	mov	r4, r0
 808093a:	4828      	ldr	r0, [pc, #160]	; (80809dc <_Z10gpsPublish6String+0xc0>)
 808093c:	f002 fa22 	bl	8082d84 <_ZN13AssetTracker210readLonDegEv>
 8080940:	4606      	mov	r6, r0
 8080942:	4826      	ldr	r0, [pc, #152]	; (80809dc <_Z10gpsPublish6String+0xc0>)
 8080944:	f002 fa9e 	bl	8082e84 <_ZN13AssetTracker211getAltitudeEv>
 8080948:	4607      	mov	r7, r0
 808094a:	4824      	ldr	r0, [pc, #144]	; (80809dc <_Z10gpsPublish6String+0xc0>)
 808094c:	f002 fa20 	bl	8082d90 <_ZN13AssetTracker214getGpsAccuracyEv>
 8080950:	4b23      	ldr	r3, [pc, #140]	; (80809e0 <_Z10gpsPublish6String+0xc4>)
 8080952:	462a      	mov	r2, r5
 8080954:	681b      	ldr	r3, [r3, #0]
 8080956:	4680      	mov	r8, r0
 8080958:	4922      	ldr	r1, [pc, #136]	; (80809e4 <_Z10gpsPublish6String+0xc8>)
 808095a:	9300      	str	r3, [sp, #0]
 808095c:	a80e      	add	r0, sp, #56	; 0x38
 808095e:	17eb      	asrs	r3, r5, #31
 8080960:	f006 f96e 	bl	8086c40 <_ZN9TimeClass6formatExPKc>
 8080964:	4620      	mov	r0, r4
 8080966:	f009 fa59 	bl	8089e1c <__aeabi_f2d>
 808096a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 808096c:	4604      	mov	r4, r0
 808096e:	460d      	mov	r5, r1
 8080970:	4640      	mov	r0, r8
 8080972:	491d      	ldr	r1, [pc, #116]	; (80809e8 <_Z10gpsPublish6String+0xcc>)
 8080974:	9306      	str	r3, [sp, #24]
 8080976:	f009 ffb3 	bl	808a8e0 <__aeabi_fdiv>
 808097a:	f009 fa4f 	bl	8089e1c <__aeabi_f2d>
 808097e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8080982:	4919      	ldr	r1, [pc, #100]	; (80809e8 <_Z10gpsPublish6String+0xcc>)
 8080984:	4638      	mov	r0, r7
 8080986:	f009 ffab 	bl	808a8e0 <__aeabi_fdiv>
 808098a:	f009 fa47 	bl	8089e1c <__aeabi_f2d>
 808098e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8080992:	4630      	mov	r0, r6
 8080994:	f009 fa42 	bl	8089e1c <__aeabi_f2d>
 8080998:	4622      	mov	r2, r4
 808099a:	e9cd 0100 	strd	r0, r1, [sp]
 808099e:	462b      	mov	r3, r5
 80809a0:	4912      	ldr	r1, [pc, #72]	; (80809ec <_Z10gpsPublish6String+0xd0>)
 80809a2:	a80a      	add	r0, sp, #40	; 0x28
 80809a4:	f004 ff5c 	bl	8085860 <_ZN6String6formatEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80809a8:	4b11      	ldr	r3, [pc, #68]	; (80809f0 <_Z10gpsPublish6String+0xd4>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80809aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80809ac:	781b      	ldrb	r3, [r3, #0]
 80809ae:	4911      	ldr	r1, [pc, #68]	; (80809f4 <_Z10gpsPublish6String+0xd8>)
 80809b0:	f88d 3000 	strb.w	r3, [sp]
 80809b4:	a808      	add	r0, sp, #32
 80809b6:	233c      	movs	r3, #60	; 0x3c
 80809b8:	f006 fcd2 	bl	8087360 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80809bc:	a809      	add	r0, sp, #36	; 0x24
 80809be:	f7ff ff97 	bl	80808f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80809c2:	a80a      	add	r0, sp, #40	; 0x28
 80809c4:	f004 fde2 	bl	808558c <_ZN6StringD1Ev>
 80809c8:	a80e      	add	r0, sp, #56	; 0x38
 80809ca:	f004 fddf 	bl	808558c <_ZN6StringD1Ev>
 80809ce:	2001      	movs	r0, #1
}
 80809d0:	b012      	add	sp, #72	; 0x48
 80809d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return 2;
 80809d6:	2002      	movs	r0, #2
 80809d8:	e7fa      	b.n	80809d0 <_Z10gpsPublish6String+0xb4>
 80809da:	bf00      	nop
 80809dc:	20000278 	.word	0x20000278
 80809e0:	200000c4 	.word	0x200000c4
 80809e4:	20000430 	.word	0x20000430
 80809e8:	447a0000 	.word	0x447a0000
 80809ec:	0808b0d5 	.word	0x0808b0d5
 80809f0:	20000140 	.word	0x20000140
 80809f4:	0808b101 	.word	0x0808b101

080809f8 <_Z10pwrPublish6String>:
int pwrPublish(String command){
 80809f8:	b530      	push	{r4, r5, lr}
    Particle.publish("LJPWRSTAT", String::format("{\"s\": %d,\"n\": 0,\"v\":%.2f,\"c\":%.2f}",pc.getHasPower(),fuel.getVCell(),fuel.getSoC()), 60, PRIVATE );
 80809fa:	481b      	ldr	r0, [pc, #108]	; (8080a68 <_Z10pwrPublish6String+0x70>)
int pwrPublish(String command){
 80809fc:	b08b      	sub	sp, #44	; 0x2c
    Particle.publish("LJPWRSTAT", String::format("{\"s\": %d,\"n\": 0,\"v\":%.2f,\"c\":%.2f}",pc.getHasPower(),fuel.getVCell(),fuel.getSoC()), 60, PRIVATE );
 80809fe:	f002 f993 	bl	8082d28 <_ZN10PowerCheck11getHasPowerEv>
 8080a02:	4604      	mov	r4, r0
 8080a04:	4819      	ldr	r0, [pc, #100]	; (8080a6c <_Z10pwrPublish6String+0x74>)
 8080a06:	f006 fa19 	bl	8086e3c <_ZN9FuelGauge8getVCellEv>
 8080a0a:	4605      	mov	r5, r0
 8080a0c:	4817      	ldr	r0, [pc, #92]	; (8080a6c <_Z10pwrPublish6String+0x74>)
 8080a0e:	f006 fa33 	bl	8086e78 <_ZN9FuelGauge6getSoCEv>
 8080a12:	f009 fa03 	bl	8089e1c <__aeabi_f2d>
 8080a16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8080a1a:	4628      	mov	r0, r5
 8080a1c:	f009 f9fe 	bl	8089e1c <__aeabi_f2d>
 8080a20:	4622      	mov	r2, r4
 8080a22:	e9cd 0100 	strd	r0, r1, [sp]
 8080a26:	a806      	add	r0, sp, #24
 8080a28:	4911      	ldr	r1, [pc, #68]	; (8080a70 <_Z10pwrPublish6String+0x78>)
 8080a2a:	f004 ff19 	bl	8085860 <_ZN6String6formatEPKcz>
 8080a2e:	4b11      	ldr	r3, [pc, #68]	; (8080a74 <_Z10pwrPublish6String+0x7c>)
 8080a30:	9a06      	ldr	r2, [sp, #24]
 8080a32:	781b      	ldrb	r3, [r3, #0]
 8080a34:	4910      	ldr	r1, [pc, #64]	; (8080a78 <_Z10pwrPublish6String+0x80>)
 8080a36:	f88d 3000 	strb.w	r3, [sp]
 8080a3a:	a804      	add	r0, sp, #16
 8080a3c:	233c      	movs	r3, #60	; 0x3c
 8080a3e:	f006 fc8f 	bl	8087360 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8080a42:	a805      	add	r0, sp, #20
 8080a44:	f7ff ff54 	bl	80808f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080a48:	a806      	add	r0, sp, #24
 8080a4a:	f004 fd9f 	bl	808558c <_ZN6StringD1Ev>
    if (fuel.getSoC()>10){ return 1;}
 8080a4e:	4807      	ldr	r0, [pc, #28]	; (8080a6c <_Z10pwrPublish6String+0x74>)
 8080a50:	f006 fa12 	bl	8086e78 <_ZN9FuelGauge6getSoCEv>
 8080a54:	4909      	ldr	r1, [pc, #36]	; (8080a7c <_Z10pwrPublish6String+0x84>)
 8080a56:	f00a f84b 	bl	808aaf0 <__aeabi_fcmpgt>
    else { return 2;}
 8080a5a:	2800      	cmp	r0, #0
}
 8080a5c:	bf14      	ite	ne
 8080a5e:	2001      	movne	r0, #1
 8080a60:	2002      	moveq	r0, #2
 8080a62:	b00b      	add	sp, #44	; 0x2c
 8080a64:	bd30      	pop	{r4, r5, pc}
 8080a66:	bf00      	nop
 8080a68:	2000021c 	.word	0x2000021c
 8080a6c:	200001e4 	.word	0x200001e4
 8080a70:	0808b10a 	.word	0x0808b10a
 8080a74:	20000140 	.word	0x20000140
 8080a78:	0808b12d 	.word	0x0808b12d
 8080a7c:	41200000 	.word	0x41200000

08080a80 <_Z10accPublish6String>:
int accPublish(String command){
 8080a80:	b5f0      	push	{r4, r5, r6, r7, lr}
  Particle.publish("LJACELRT", String::format("{\"x\":%d,\"y\":%d,\"z\":%d,\"m\":%d}", t.readX(), t.readY(), t.readZ(), t.readXYZmagnitude()), 60, PRIVATE);
 8080a82:	4c16      	ldr	r4, [pc, #88]	; (8080adc <_Z10accPublish6String+0x5c>)
int accPublish(String command){
 8080a84:	b089      	sub	sp, #36	; 0x24
  Particle.publish("LJACELRT", String::format("{\"x\":%d,\"y\":%d,\"z\":%d,\"m\":%d}", t.readX(), t.readY(), t.readZ(), t.readXYZmagnitude()), 60, PRIVATE);
 8080a86:	4620      	mov	r0, r4
 8080a88:	f002 fa96 	bl	8082fb8 <_ZN13AssetTracker25readXEv>
 8080a8c:	4605      	mov	r5, r0
 8080a8e:	4620      	mov	r0, r4
 8080a90:	f002 fa9c 	bl	8082fcc <_ZN13AssetTracker25readYEv>
 8080a94:	4606      	mov	r6, r0
 8080a96:	4620      	mov	r0, r4
 8080a98:	f002 faa2 	bl	8082fe0 <_ZN13AssetTracker25readZEv>
 8080a9c:	4607      	mov	r7, r0
 8080a9e:	4620      	mov	r0, r4
 8080aa0:	f002 faa8 	bl	8082ff4 <_ZN13AssetTracker216readXYZmagnitudeEv>
 8080aa4:	4633      	mov	r3, r6
 8080aa6:	462a      	mov	r2, r5
 8080aa8:	e9cd 7000 	strd	r7, r0, [sp]
 8080aac:	490c      	ldr	r1, [pc, #48]	; (8080ae0 <_Z10accPublish6String+0x60>)
 8080aae:	a804      	add	r0, sp, #16
 8080ab0:	f004 fed6 	bl	8085860 <_ZN6String6formatEPKcz>
 8080ab4:	4b0b      	ldr	r3, [pc, #44]	; (8080ae4 <_Z10accPublish6String+0x64>)
 8080ab6:	9a04      	ldr	r2, [sp, #16]
 8080ab8:	781b      	ldrb	r3, [r3, #0]
 8080aba:	490b      	ldr	r1, [pc, #44]	; (8080ae8 <_Z10accPublish6String+0x68>)
 8080abc:	f88d 3000 	strb.w	r3, [sp]
 8080ac0:	a802      	add	r0, sp, #8
 8080ac2:	233c      	movs	r3, #60	; 0x3c
 8080ac4:	f006 fc4c 	bl	8087360 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8080ac8:	a803      	add	r0, sp, #12
 8080aca:	f7ff ff11 	bl	80808f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080ace:	a804      	add	r0, sp, #16
 8080ad0:	f004 fd5c 	bl	808558c <_ZN6StringD1Ev>
}
 8080ad4:	2001      	movs	r0, #1
 8080ad6:	b009      	add	sp, #36	; 0x24
 8080ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8080ada:	bf00      	nop
 8080adc:	20000278 	.word	0x20000278
 8080ae0:	0808b137 	.word	0x0808b137
 8080ae4:	20000140 	.word	0x20000140
 8080ae8:	0808b155 	.word	0x0808b155

08080aec <_Z10envPublish6String>:
int envPublish(String command){
 8080aec:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = dht.acquireAndWait(DHT_SAMPLE_INTERVAL);  // Reading temperature or humidity takes about 250 milliseconds!
 8080aee:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
int envPublish(String command){
 8080af2:	b089      	sub	sp, #36	; 0x24
    int result = dht.acquireAndWait(DHT_SAMPLE_INTERVAL);  // Reading temperature or humidity takes about 250 milliseconds!
 8080af4:	4820      	ldr	r0, [pc, #128]	; (8080b78 <_Z10envPublish6String+0x8c>)
 8080af6:	f003 ff4b 	bl	8084990 <_ZN14PietteTech_DHT14acquireAndWaitEm>
 8080afa:	4606      	mov	r6, r0
  	float h = dht.getHumidity();
 8080afc:	481e      	ldr	r0, [pc, #120]	; (8080b78 <_Z10envPublish6String+0x8c>)
 8080afe:	f003 fd73 	bl	80845e8 <_ZN14PietteTech_DHT11getHumidityEv>
 8080b02:	4604      	mov	r4, r0
  	float f = dht.getFahrenheit();
 8080b04:	481c      	ldr	r0, [pc, #112]	; (8080b78 <_Z10envPublish6String+0x8c>)
 8080b06:	f003 fd8b 	bl	8084620 <_ZN14PietteTech_DHT13getFahrenheitEv>
 8080b0a:	4605      	mov	r5, r0
  	if (isnan(h) || isnan(f) || result != DHTLIB_OK) {
 8080b0c:	4601      	mov	r1, r0
 8080b0e:	4620      	mov	r0, r4
 8080b10:	f009 fff8 	bl	808ab04 <__aeabi_fcmpun>
 8080b14:	b900      	cbnz	r0, 8080b18 <_Z10envPublish6String+0x2c>
 8080b16:	b12e      	cbz	r6, 8080b24 <_Z10envPublish6String+0x38>
			if ((transmittingData & SERIALDHTDATA) == SERIALDHTDATA)
 8080b18:	4b18      	ldr	r3, [pc, #96]	; (8080b7c <_Z10envPublish6String+0x90>)
 8080b1a:	681b      	ldr	r3, [r3, #0]
 8080b1c:	2b00      	cmp	r3, #0
 8080b1e:	db24      	blt.n	8080b6a <_Z10envPublish6String+0x7e>
  		return 2;
 8080b20:	2002      	movs	r0, #2
 8080b22:	e020      	b.n	8080b66 <_Z10envPublish6String+0x7a>
    Particle.publish("LJENVMT", String::format("{\"t\":%.2f,\"h\":%.2f}",f,h), 60, PRIVATE);
 8080b24:	4628      	mov	r0, r5
 8080b26:	f009 f979 	bl	8089e1c <__aeabi_f2d>
 8080b2a:	4606      	mov	r6, r0
 8080b2c:	4620      	mov	r0, r4
 8080b2e:	460f      	mov	r7, r1
 8080b30:	f009 f974 	bl	8089e1c <__aeabi_f2d>
 8080b34:	4632      	mov	r2, r6
 8080b36:	e9cd 0100 	strd	r0, r1, [sp]
 8080b3a:	463b      	mov	r3, r7
 8080b3c:	4910      	ldr	r1, [pc, #64]	; (8080b80 <_Z10envPublish6String+0x94>)
 8080b3e:	a804      	add	r0, sp, #16
 8080b40:	f004 fe8e 	bl	8085860 <_ZN6String6formatEPKcz>
 8080b44:	4b0f      	ldr	r3, [pc, #60]	; (8080b84 <_Z10envPublish6String+0x98>)
 8080b46:	9a04      	ldr	r2, [sp, #16]
 8080b48:	781b      	ldrb	r3, [r3, #0]
 8080b4a:	490f      	ldr	r1, [pc, #60]	; (8080b88 <_Z10envPublish6String+0x9c>)
 8080b4c:	f88d 3000 	strb.w	r3, [sp]
 8080b50:	a802      	add	r0, sp, #8
 8080b52:	233c      	movs	r3, #60	; 0x3c
 8080b54:	f006 fc04 	bl	8087360 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8080b58:	a803      	add	r0, sp, #12
 8080b5a:	f7ff fec9 	bl	80808f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080b5e:	a804      	add	r0, sp, #16
 8080b60:	f004 fd14 	bl	808558c <_ZN6StringD1Ev>
    return 1;
 8080b64:	2001      	movs	r0, #1
}
 8080b66:	b009      	add	sp, #36	; 0x24
 8080b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
      	Serial.println("Failed to read from DHT sensor!");
 8080b6a:	f006 fe27 	bl	80877bc <_Z16_fetch_usbserialv>
 8080b6e:	4907      	ldr	r1, [pc, #28]	; (8080b8c <_Z10envPublish6String+0xa0>)
 8080b70:	f004 fed7 	bl	8085922 <_ZN5Print7printlnEPKc>
 8080b74:	e7d4      	b.n	8080b20 <_Z10envPublish6String+0x34>
 8080b76:	bf00      	nop
 8080b78:	20000188 	.word	0x20000188
 8080b7c:	20000014 	.word	0x20000014
 8080b80:	0808b15e 	.word	0x0808b15e
 8080b84:	20000140 	.word	0x20000140
 8080b88:	0808b172 	.word	0x0808b172
 8080b8c:	0808b17a 	.word	0x0808b17a

08080b90 <_Z8pubValue6String>:
int pubValue(String command) {
 8080b90:	b530      	push	{r4, r5, lr}
 8080b92:	4927      	ldr	r1, [pc, #156]	; (8080c30 <_Z8pubValue6String+0xa0>)
 8080b94:	b089      	sub	sp, #36	; 0x24
 8080b96:	4605      	mov	r5, r0
 8080b98:	f004 fde7 	bl	808576a <_ZNK6String6equalsEPKc>
  if (command == "pwr") {
 8080b9c:	b168      	cbz	r0, 8080bba <_Z8pubValue6String+0x2a>
    return pwrPublish(command);
 8080b9e:	4629      	mov	r1, r5
 8080ba0:	a804      	add	r0, sp, #16
 8080ba2:	f004 fd87 	bl	80856b4 <_ZN6StringC1ERKS_>
 8080ba6:	a804      	add	r0, sp, #16
 8080ba8:	f7ff ff26 	bl	80809f8 <_Z10pwrPublish6String>
    return envPublish(command);
 8080bac:	4604      	mov	r4, r0
	  Particle.publish("LJCMDERR", String::format("{\"cmd\":\"%s\"}", command.c_str()), 60, PRIVATE);
 8080bae:	a804      	add	r0, sp, #16
 8080bb0:	f004 fcec 	bl	808558c <_ZN6StringD1Ev>
}
 8080bb4:	4620      	mov	r0, r4
 8080bb6:	b009      	add	sp, #36	; 0x24
 8080bb8:	bd30      	pop	{r4, r5, pc}
 8080bba:	4628      	mov	r0, r5
 8080bbc:	491d      	ldr	r1, [pc, #116]	; (8080c34 <_Z8pubValue6String+0xa4>)
 8080bbe:	f004 fdd4 	bl	808576a <_ZNK6String6equalsEPKc>
  } else if (command == "gps") {
 8080bc2:	b138      	cbz	r0, 8080bd4 <_Z8pubValue6String+0x44>
    return gpsPublish(command);
 8080bc4:	4629      	mov	r1, r5
 8080bc6:	a804      	add	r0, sp, #16
 8080bc8:	f004 fd74 	bl	80856b4 <_ZN6StringC1ERKS_>
 8080bcc:	a804      	add	r0, sp, #16
 8080bce:	f7ff fea5 	bl	808091c <_Z10gpsPublish6String>
 8080bd2:	e7eb      	b.n	8080bac <_Z8pubValue6String+0x1c>
 8080bd4:	4628      	mov	r0, r5
 8080bd6:	4918      	ldr	r1, [pc, #96]	; (8080c38 <_Z8pubValue6String+0xa8>)
 8080bd8:	f004 fdc7 	bl	808576a <_ZNK6String6equalsEPKc>
  } else if (command == "acc") {
 8080bdc:	b138      	cbz	r0, 8080bee <_Z8pubValue6String+0x5e>
    return accPublish(command);
 8080bde:	4629      	mov	r1, r5
 8080be0:	a804      	add	r0, sp, #16
 8080be2:	f004 fd67 	bl	80856b4 <_ZN6StringC1ERKS_>
 8080be6:	a804      	add	r0, sp, #16
 8080be8:	f7ff ff4a 	bl	8080a80 <_Z10accPublish6String>
 8080bec:	e7de      	b.n	8080bac <_Z8pubValue6String+0x1c>
 8080bee:	4628      	mov	r0, r5
 8080bf0:	4912      	ldr	r1, [pc, #72]	; (8080c3c <_Z8pubValue6String+0xac>)
 8080bf2:	f004 fdba 	bl	808576a <_ZNK6String6equalsEPKc>
  } else if (command == "env") {
 8080bf6:	4604      	mov	r4, r0
 8080bf8:	b138      	cbz	r0, 8080c0a <_Z8pubValue6String+0x7a>
    return envPublish(command);
 8080bfa:	4629      	mov	r1, r5
 8080bfc:	a804      	add	r0, sp, #16
 8080bfe:	f004 fd59 	bl	80856b4 <_ZN6StringC1ERKS_>
 8080c02:	a804      	add	r0, sp, #16
 8080c04:	f7ff ff72 	bl	8080aec <_Z10envPublish6String>
 8080c08:	e7d0      	b.n	8080bac <_Z8pubValue6String+0x1c>
	  Particle.publish("LJCMDERR", String::format("{\"cmd\":\"%s\"}", command.c_str()), 60, PRIVATE);
 8080c0a:	682a      	ldr	r2, [r5, #0]
 8080c0c:	a804      	add	r0, sp, #16
 8080c0e:	490c      	ldr	r1, [pc, #48]	; (8080c40 <_Z8pubValue6String+0xb0>)
 8080c10:	f004 fe26 	bl	8085860 <_ZN6String6formatEPKcz>
 8080c14:	4b0b      	ldr	r3, [pc, #44]	; (8080c44 <_Z8pubValue6String+0xb4>)
 8080c16:	a802      	add	r0, sp, #8
 8080c18:	781b      	ldrb	r3, [r3, #0]
 8080c1a:	9a04      	ldr	r2, [sp, #16]
 8080c1c:	f88d 3000 	strb.w	r3, [sp]
 8080c20:	4909      	ldr	r1, [pc, #36]	; (8080c48 <_Z8pubValue6String+0xb8>)
 8080c22:	233c      	movs	r3, #60	; 0x3c
 8080c24:	f006 fb9c 	bl	8087360 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8080c28:	a803      	add	r0, sp, #12
 8080c2a:	f7ff fe61 	bl	80808f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080c2e:	e7be      	b.n	8080bae <_Z8pubValue6String+0x1e>
 8080c30:	0808b19a 	.word	0x0808b19a
 8080c34:	0808b19e 	.word	0x0808b19e
 8080c38:	0808b1a2 	.word	0x0808b1a2
 8080c3c:	0808b1a6 	.word	0x0808b1a6
 8080c40:	0808b1aa 	.word	0x0808b1aa
 8080c44:	20000140 	.word	0x20000140
 8080c48:	0808b1b7 	.word	0x0808b1b7

08080c4c <_Z16checkPowerStatusv>:
int checkPowerStatus() {
 8080c4c:	b570      	push	{r4, r5, r6, lr}
    bool currentPower = pc.getHasPower();
 8080c4e:	481b      	ldr	r0, [pc, #108]	; (8080cbc <_Z16checkPowerStatusv+0x70>)
int checkPowerStatus() {
 8080c50:	b08a      	sub	sp, #40	; 0x28
    bool currentPower = pc.getHasPower();
 8080c52:	f002 f869 	bl	8082d28 <_ZN10PowerCheck11getHasPowerEv>
    if (lastPower != currentPower) {
 8080c56:	4e1a      	ldr	r6, [pc, #104]	; (8080cc0 <_Z16checkPowerStatusv+0x74>)
    bool currentPower = pc.getHasPower();
 8080c58:	4604      	mov	r4, r0
    if (lastPower != currentPower) {
 8080c5a:	7833      	ldrb	r3, [r6, #0]
 8080c5c:	4283      	cmp	r3, r0
 8080c5e:	d029      	beq.n	8080cb4 <_Z16checkPowerStatusv+0x68>
      if ((transmittingData & TRANSMITTINGPWRDATA) == TRANSMITTINGPWRDATA) {
 8080c60:	4b18      	ldr	r3, [pc, #96]	; (8080cc4 <_Z16checkPowerStatusv+0x78>)
 8080c62:	681b      	ldr	r3, [r3, #0]
 8080c64:	075b      	lsls	r3, r3, #29
 8080c66:	d525      	bpl.n	8080cb4 <_Z16checkPowerStatusv+0x68>
        Particle.publish("LJPWRSTAT", String::format("{\"s\": %d,\"n\": 1,\"v\":%.2f,\"c\":%.2f}",currentPower,fuel.getVCell(),fuel.getSoC()), 60, PRIVATE );
 8080c68:	4817      	ldr	r0, [pc, #92]	; (8080cc8 <_Z16checkPowerStatusv+0x7c>)
 8080c6a:	f006 f8e7 	bl	8086e3c <_ZN9FuelGauge8getVCellEv>
 8080c6e:	4605      	mov	r5, r0
 8080c70:	4815      	ldr	r0, [pc, #84]	; (8080cc8 <_Z16checkPowerStatusv+0x7c>)
 8080c72:	f006 f901 	bl	8086e78 <_ZN9FuelGauge6getSoCEv>
 8080c76:	f009 f8d1 	bl	8089e1c <__aeabi_f2d>
 8080c7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8080c7e:	4628      	mov	r0, r5
 8080c80:	f009 f8cc 	bl	8089e1c <__aeabi_f2d>
 8080c84:	4622      	mov	r2, r4
 8080c86:	e9cd 0100 	strd	r0, r1, [sp]
 8080c8a:	4910      	ldr	r1, [pc, #64]	; (8080ccc <_Z16checkPowerStatusv+0x80>)
 8080c8c:	a806      	add	r0, sp, #24
 8080c8e:	f004 fde7 	bl	8085860 <_ZN6String6formatEPKcz>
 8080c92:	4b0f      	ldr	r3, [pc, #60]	; (8080cd0 <_Z16checkPowerStatusv+0x84>)
 8080c94:	9a06      	ldr	r2, [sp, #24]
 8080c96:	781b      	ldrb	r3, [r3, #0]
 8080c98:	490e      	ldr	r1, [pc, #56]	; (8080cd4 <_Z16checkPowerStatusv+0x88>)
 8080c9a:	f88d 3000 	strb.w	r3, [sp]
 8080c9e:	a804      	add	r0, sp, #16
 8080ca0:	233c      	movs	r3, #60	; 0x3c
 8080ca2:	f006 fb5d 	bl	8087360 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8080ca6:	a805      	add	r0, sp, #20
 8080ca8:	f7ff fe22 	bl	80808f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080cac:	a806      	add	r0, sp, #24
 8080cae:	f004 fc6d 	bl	808558c <_ZN6StringD1Ev>
        lastPower = currentPower; // note that we only update power status if we actually transmitted data so that when data is turned back on we will report
 8080cb2:	7034      	strb	r4, [r6, #0]
}
 8080cb4:	2001      	movs	r0, #1
 8080cb6:	b00a      	add	sp, #40	; 0x28
 8080cb8:	bd70      	pop	{r4, r5, r6, pc}
 8080cba:	bf00      	nop
 8080cbc:	2000021c 	.word	0x2000021c
 8080cc0:	20000011 	.word	0x20000011
 8080cc4:	20000014 	.word	0x20000014
 8080cc8:	200001e4 	.word	0x200001e4
 8080ccc:	0808b1c0 	.word	0x0808b1c0
 8080cd0:	20000140 	.word	0x20000140
 8080cd4:	0808b12d 	.word	0x0808b12d

08080cd8 <_Z14checkGPSStatusv>:
void checkGPSStatus() {
 8080cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080cdc:	b095      	sub	sp, #84	; 0x54

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8080cde:	f003 feef 	bl	8084ac0 <HAL_Timer_Get_Milli_Seconds>
    if (millis()-lastGPSPublish > ((unsigned long) delayGPSMinutes*60*1000)) {
 8080ce2:	f64e 2260 	movw	r2, #60000	; 0xea60
 8080ce6:	f8df a11c 	ldr.w	sl, [pc, #284]	; 8080e04 <_Z14checkGPSStatusv+0x12c>
 8080cea:	f8da 3000 	ldr.w	r3, [sl]
 8080cee:	1ac0      	subs	r0, r0, r3
 8080cf0:	4b45      	ldr	r3, [pc, #276]	; (8080e08 <_Z14checkGPSStatusv+0x130>)
 8080cf2:	681b      	ldr	r3, [r3, #0]
 8080cf4:	4353      	muls	r3, r2
 8080cf6:	4298      	cmp	r0, r3
 8080cf8:	f240 8081 	bls.w	8080dfe <_Z14checkGPSStatusv+0x126>
        if (t.gpsFix()) {
 8080cfc:	4843      	ldr	r0, [pc, #268]	; (8080e0c <_Z14checkGPSStatusv+0x134>)
 8080cfe:	f002 f91f 	bl	8082f40 <_ZN13AssetTracker26gpsFixEv>
 8080d02:	2800      	cmp	r0, #0
 8080d04:	d07b      	beq.n	8080dfe <_Z14checkGPSStatusv+0x126>
            if ((transmittingData & TRANSMITTINGGPSDATA) == TRANSMITTINGGPSDATA) {
 8080d06:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8080e10 <_Z14checkGPSStatusv+0x138>
 8080d0a:	f8d9 3000 	ldr.w	r3, [r9]
 8080d0e:	07da      	lsls	r2, r3, #31
 8080d10:	d563      	bpl.n	8080dda <_Z14checkGPSStatusv+0x102>
							time_t time = Time.now();
 8080d12:	f005 fff4 	bl	8086cfe <_ZN9TimeClass3nowEv>
							Time.format(time, TIME_FORMAT_ISO8601_FULL); // 2004-01-10T08:22:04-05:15
 8080d16:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 8080e14 <_Z14checkGPSStatusv+0x13c>
							time_t time = Time.now();
 8080d1a:	17c3      	asrs	r3, r0, #31
							Time.format(time, TIME_FORMAT_ISO8601_FULL); // 2004-01-10T08:22:04-05:15
 8080d1c:	f8db 2000 	ldr.w	r2, [fp]
 8080d20:	493d      	ldr	r1, [pc, #244]	; (8080e18 <_Z14checkGPSStatusv+0x140>)
							time_t time = Time.now();
 8080d22:	4604      	mov	r4, r0
							Time.format(time, TIME_FORMAT_ISO8601_FULL); // 2004-01-10T08:22:04-05:15
 8080d24:	9200      	str	r2, [sp, #0]
 8080d26:	4602      	mov	r2, r0
 8080d28:	a810      	add	r0, sp, #64	; 0x40
 8080d2a:	9309      	str	r3, [sp, #36]	; 0x24
 8080d2c:	f005 ff88 	bl	8086c40 <_ZN9TimeClass6formatExPKc>
 8080d30:	a810      	add	r0, sp, #64	; 0x40
 8080d32:	f004 fc2b 	bl	808558c <_ZN6StringD1Ev>
              Particle.publish("LJGPSFIX", String::format("{\"la\":%f,\"lo\":%f,\"ht\":%f,\"ac\":%f,\"tm\":\"%s\"}",t.readLatDeg(),t.readLonDeg(),(t.getAltitude() / 1000),(t.getGpsAccuracy() / 1000),Time.format(time, TIME_FORMAT_ISO8601_FULL).c_str()), 60, PRIVATE);
 8080d36:	4835      	ldr	r0, [pc, #212]	; (8080e0c <_Z14checkGPSStatusv+0x134>)
 8080d38:	f002 f81e 	bl	8082d78 <_ZN13AssetTracker210readLatDegEv>
 8080d3c:	4605      	mov	r5, r0
 8080d3e:	4833      	ldr	r0, [pc, #204]	; (8080e0c <_Z14checkGPSStatusv+0x134>)
 8080d40:	f002 f820 	bl	8082d84 <_ZN13AssetTracker210readLonDegEv>
 8080d44:	4606      	mov	r6, r0
 8080d46:	4831      	ldr	r0, [pc, #196]	; (8080e0c <_Z14checkGPSStatusv+0x134>)
 8080d48:	f002 f89c 	bl	8082e84 <_ZN13AssetTracker211getAltitudeEv>
 8080d4c:	4607      	mov	r7, r0
 8080d4e:	482f      	ldr	r0, [pc, #188]	; (8080e0c <_Z14checkGPSStatusv+0x134>)
 8080d50:	f002 f81e 	bl	8082d90 <_ZN13AssetTracker214getGpsAccuracyEv>
 8080d54:	f8db 2000 	ldr.w	r2, [fp]
 8080d58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8080d5a:	4680      	mov	r8, r0
 8080d5c:	492e      	ldr	r1, [pc, #184]	; (8080e18 <_Z14checkGPSStatusv+0x140>)
 8080d5e:	9200      	str	r2, [sp, #0]
 8080d60:	a810      	add	r0, sp, #64	; 0x40
 8080d62:	4622      	mov	r2, r4
 8080d64:	f005 ff6c 	bl	8086c40 <_ZN9TimeClass6formatExPKc>
 8080d68:	4628      	mov	r0, r5
 8080d6a:	f009 f857 	bl	8089e1c <__aeabi_f2d>
 8080d6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8080d70:	4604      	mov	r4, r0
 8080d72:	460d      	mov	r5, r1
 8080d74:	4640      	mov	r0, r8
 8080d76:	4929      	ldr	r1, [pc, #164]	; (8080e1c <_Z14checkGPSStatusv+0x144>)
 8080d78:	9306      	str	r3, [sp, #24]
 8080d7a:	f009 fdb1 	bl	808a8e0 <__aeabi_fdiv>
 8080d7e:	f009 f84d 	bl	8089e1c <__aeabi_f2d>
 8080d82:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8080d86:	4925      	ldr	r1, [pc, #148]	; (8080e1c <_Z14checkGPSStatusv+0x144>)
 8080d88:	4638      	mov	r0, r7
 8080d8a:	f009 fda9 	bl	808a8e0 <__aeabi_fdiv>
 8080d8e:	f009 f845 	bl	8089e1c <__aeabi_f2d>
 8080d92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8080d96:	4630      	mov	r0, r6
 8080d98:	f009 f840 	bl	8089e1c <__aeabi_f2d>
 8080d9c:	4622      	mov	r2, r4
 8080d9e:	e9cd 0100 	strd	r0, r1, [sp]
 8080da2:	462b      	mov	r3, r5
 8080da4:	491e      	ldr	r1, [pc, #120]	; (8080e20 <_Z14checkGPSStatusv+0x148>)
 8080da6:	a80c      	add	r0, sp, #48	; 0x30
 8080da8:	f004 fd5a 	bl	8085860 <_ZN6String6formatEPKcz>
 8080dac:	4b1d      	ldr	r3, [pc, #116]	; (8080e24 <_Z14checkGPSStatusv+0x14c>)
 8080dae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8080db0:	781b      	ldrb	r3, [r3, #0]
 8080db2:	491d      	ldr	r1, [pc, #116]	; (8080e28 <_Z14checkGPSStatusv+0x150>)
 8080db4:	f88d 3000 	strb.w	r3, [sp]
 8080db8:	a80a      	add	r0, sp, #40	; 0x28
 8080dba:	233c      	movs	r3, #60	; 0x3c
 8080dbc:	f006 fad0 	bl	8087360 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8080dc0:	a80b      	add	r0, sp, #44	; 0x2c
 8080dc2:	f7ff fd95 	bl	80808f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080dc6:	a80c      	add	r0, sp, #48	; 0x30
 8080dc8:	f004 fbe0 	bl	808558c <_ZN6StringD1Ev>
 8080dcc:	a810      	add	r0, sp, #64	; 0x40
 8080dce:	f004 fbdd 	bl	808558c <_ZN6StringD1Ev>
 8080dd2:	f003 fe75 	bl	8084ac0 <HAL_Timer_Get_Milli_Seconds>
              lastGPSPublish = millis();
 8080dd6:	f8ca 0000 	str.w	r0, [sl]
						if ((transmittingData & SERIALGPSDATA) == SERIALGPSDATA)
 8080dda:	f8d9 3000 	ldr.w	r3, [r9]
 8080dde:	00db      	lsls	r3, r3, #3
 8080de0:	d50d      	bpl.n	8080dfe <_Z14checkGPSStatusv+0x126>
            	Serial.println(t.readLatLon());
 8080de2:	f006 fceb 	bl	80877bc <_Z16_fetch_usbserialv>
 8080de6:	4604      	mov	r4, r0
 8080de8:	4908      	ldr	r1, [pc, #32]	; (8080e0c <_Z14checkGPSStatusv+0x134>)
 8080dea:	a810      	add	r0, sp, #64	; 0x40
 8080dec:	f002 f850 	bl	8082e90 <_ZN13AssetTracker210readLatLonEv>
 8080df0:	4620      	mov	r0, r4
 8080df2:	9910      	ldr	r1, [sp, #64]	; 0x40
 8080df4:	f004 fd95 	bl	8085922 <_ZN5Print7printlnEPKc>
 8080df8:	a810      	add	r0, sp, #64	; 0x40
 8080dfa:	f004 fbc7 	bl	808558c <_ZN6StringD1Ev>
}
 8080dfe:	b015      	add	sp, #84	; 0x54
 8080e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8080e04:	200001f4 	.word	0x200001f4
 8080e08:	2000000c 	.word	0x2000000c
 8080e0c:	20000278 	.word	0x20000278
 8080e10:	20000014 	.word	0x20000014
 8080e14:	200000c4 	.word	0x200000c4
 8080e18:	20000430 	.word	0x20000430
 8080e1c:	447a0000 	.word	0x447a0000
 8080e20:	0808b0d5 	.word	0x0808b0d5
 8080e24:	20000140 	.word	0x20000140
 8080e28:	0808b101 	.word	0x0808b101

08080e2c <_Z16checkAccelStatusv>:
void checkAccelStatus() {
 8080e2c:	b570      	push	{r4, r5, r6, lr}
      int readMagnitude = t.readXYZmagnitude();
 8080e2e:	4833      	ldr	r0, [pc, #204]	; (8080efc <_Z16checkAccelStatusv+0xd0>)
void checkAccelStatus() {
 8080e30:	b086      	sub	sp, #24
      int readMagnitude = t.readXYZmagnitude();
 8080e32:	f002 f8df 	bl	8082ff4 <_ZN13AssetTracker216readXYZmagnitudeEv>
      if (readMagnitude > accelThreshold) {
 8080e36:	4b32      	ldr	r3, [pc, #200]	; (8080f00 <_Z16checkAccelStatusv+0xd4>)
      int readMagnitude = t.readXYZmagnitude();
 8080e38:	4604      	mov	r4, r0
      if (readMagnitude > accelThreshold) {
 8080e3a:	681b      	ldr	r3, [r3, #0]
 8080e3c:	4283      	cmp	r3, r0
 8080e3e:	da23      	bge.n	8080e88 <_Z16checkAccelStatusv+0x5c>
          pubAccel = String::format("{\"x\":%d,\"y\":%d,\"z\":%d,\"m\":%d}", t.readX(), t.readY(), t.readZ(), readMagnitude);
 8080e40:	482e      	ldr	r0, [pc, #184]	; (8080efc <_Z16checkAccelStatusv+0xd0>)
 8080e42:	f002 f8b9 	bl	8082fb8 <_ZN13AssetTracker25readXEv>
 8080e46:	4605      	mov	r5, r0
 8080e48:	482c      	ldr	r0, [pc, #176]	; (8080efc <_Z16checkAccelStatusv+0xd0>)
 8080e4a:	f002 f8bf 	bl	8082fcc <_ZN13AssetTracker25readYEv>
 8080e4e:	4606      	mov	r6, r0
 8080e50:	482a      	ldr	r0, [pc, #168]	; (8080efc <_Z16checkAccelStatusv+0xd0>)
 8080e52:	f002 f8c5 	bl	8082fe0 <_ZN13AssetTracker25readZEv>
 8080e56:	e9cd 0400 	strd	r0, r4, [sp]
 8080e5a:	4c2a      	ldr	r4, [pc, #168]	; (8080f04 <_Z16checkAccelStatusv+0xd8>)
 8080e5c:	4633      	mov	r3, r6
 8080e5e:	462a      	mov	r2, r5
 8080e60:	4929      	ldr	r1, [pc, #164]	; (8080f08 <_Z16checkAccelStatusv+0xdc>)
 8080e62:	a802      	add	r0, sp, #8
 8080e64:	f004 fcfc 	bl	8085860 <_ZN6String6formatEPKcz>
 8080e68:	a902      	add	r1, sp, #8
 8080e6a:	4620      	mov	r0, r4
 8080e6c:	f004 fc2d 	bl	80856ca <_ZN6StringaSEOS_>
 8080e70:	a802      	add	r0, sp, #8
 8080e72:	f004 fb8b 	bl	808558c <_ZN6StringD1Ev>
					if ((transmittingData & SERIALACCDATA) == SERIALACCDATA)
 8080e76:	4b25      	ldr	r3, [pc, #148]	; (8080f0c <_Z16checkAccelStatusv+0xe0>)
 8080e78:	681b      	ldr	r3, [r3, #0]
 8080e7a:	009a      	lsls	r2, r3, #2
 8080e7c:	d504      	bpl.n	8080e88 <_Z16checkAccelStatusv+0x5c>
          	Serial.println(pubAccel);
 8080e7e:	f006 fc9d 	bl	80877bc <_Z16_fetch_usbserialv>
 8080e82:	6821      	ldr	r1, [r4, #0]
 8080e84:	f004 fd4d 	bl	8085922 <_ZN5Print7printlnEPKc>
 8080e88:	f003 fe1a 	bl	8084ac0 <HAL_Timer_Get_Milli_Seconds>
      if (millis()-lastACCPublish > ((unsigned long) delayACCMinutes*60*1000)) {
 8080e8c:	f64e 2260 	movw	r2, #60000	; 0xea60
 8080e90:	4d1f      	ldr	r5, [pc, #124]	; (8080f10 <_Z16checkAccelStatusv+0xe4>)
 8080e92:	682b      	ldr	r3, [r5, #0]
 8080e94:	1ac0      	subs	r0, r0, r3
 8080e96:	4b1f      	ldr	r3, [pc, #124]	; (8080f14 <_Z16checkAccelStatusv+0xe8>)
 8080e98:	681b      	ldr	r3, [r3, #0]
 8080e9a:	4353      	muls	r3, r2
 8080e9c:	4298      	cmp	r0, r3
 8080e9e:	d92a      	bls.n	8080ef6 <_Z16checkAccelStatusv+0xca>
          if ((transmittingData & TRANSMITTINGACCDATA) == TRANSMITTINGACCDATA) {
 8080ea0:	4b1a      	ldr	r3, [pc, #104]	; (8080f0c <_Z16checkAccelStatusv+0xe0>)
 8080ea2:	681b      	ldr	r3, [r3, #0]
 8080ea4:	079b      	lsls	r3, r3, #30
 8080ea6:	d526      	bpl.n	8080ef6 <_Z16checkAccelStatusv+0xca>
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 8080ea8:	4c16      	ldr	r4, [pc, #88]	; (8080f04 <_Z16checkAccelStatusv+0xd8>)
 8080eaa:	491b      	ldr	r1, [pc, #108]	; (8080f18 <_Z16checkAccelStatusv+0xec>)
 8080eac:	4620      	mov	r0, r4
 8080eae:	f004 fc5c 	bl	808576a <_ZNK6String6equalsEPKc>
            if (pubAccel != "") {
 8080eb2:	bb00      	cbnz	r0, 8080ef6 <_Z16checkAccelStatusv+0xca>
 8080eb4:	4b19      	ldr	r3, [pc, #100]	; (8080f1c <_Z16checkAccelStatusv+0xf0>)
 8080eb6:	491a      	ldr	r1, [pc, #104]	; (8080f20 <_Z16checkAccelStatusv+0xf4>)
 8080eb8:	781b      	ldrb	r3, [r3, #0]
 8080eba:	a802      	add	r0, sp, #8
 8080ebc:	f88d 3000 	strb.w	r3, [sp]
 8080ec0:	6822      	ldr	r2, [r4, #0]
 8080ec2:	233c      	movs	r3, #60	; 0x3c
 8080ec4:	f006 fa4c 	bl	8087360 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8080ec8:	a803      	add	r0, sp, #12
 8080eca:	f7ff fd11 	bl	80808f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
							gpsPublish(""); // publish position if we get an accelleration alert
 8080ece:	4912      	ldr	r1, [pc, #72]	; (8080f18 <_Z16checkAccelStatusv+0xec>)
 8080ed0:	a802      	add	r0, sp, #8
 8080ed2:	f004 fba5 	bl	8085620 <_ZN6StringC1EPK19__FlashStringHelper>
 8080ed6:	a802      	add	r0, sp, #8
 8080ed8:	f7ff fd20 	bl	808091c <_Z10gpsPublish6String>
 8080edc:	a802      	add	r0, sp, #8
 8080ede:	f004 fb55 	bl	808558c <_ZN6StringD1Ev>
 8080ee2:	f003 fded 	bl	8084ac0 <HAL_Timer_Get_Milli_Seconds>
              lastACCPublish = millis();
 8080ee6:	6028      	str	r0, [r5, #0]
              pubAccel = "";
 8080ee8:	4620      	mov	r0, r4
 8080eea:	490b      	ldr	r1, [pc, #44]	; (8080f18 <_Z16checkAccelStatusv+0xec>)
}
 8080eec:	b006      	add	sp, #24
 8080eee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              pubAccel = "";
 8080ef2:	f004 bbf2 	b.w	80856da <_ZN6StringaSEPKc>
}
 8080ef6:	b006      	add	sp, #24
 8080ef8:	bd70      	pop	{r4, r5, r6, pc}
 8080efa:	bf00      	nop
 8080efc:	20000278 	.word	0x20000278
 8080f00:	20000000 	.word	0x20000000
 8080f04:	20000228 	.word	0x20000228
 8080f08:	0808b137 	.word	0x0808b137
 8080f0c:	20000014 	.word	0x20000014
 8080f10:	200001ec 	.word	0x200001ec
 8080f14:	20000004 	.word	0x20000004
 8080f18:	0808b6b8 	.word	0x0808b6b8
 8080f1c:	20000140 	.word	0x20000140
 8080f20:	0808b155 	.word	0x0808b155

08080f24 <_Z14checkDHTStatusv>:
void checkDHTStatus() {
 8080f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8080f28:	b088      	sub	sp, #32
 8080f2a:	f003 fdc9 	bl	8084ac0 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - msLastSample <  DHT_SAMPLE_INTERVAL) return;
 8080f2e:	f8df 9214 	ldr.w	r9, [pc, #532]	; 8081144 <_Z14checkDHTStatusv+0x220>
 8080f32:	f8d9 3000 	ldr.w	r3, [r9]
 8080f36:	1ac0      	subs	r0, r0, r3
 8080f38:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8080f3c:	f0c0 80d7 	bcc.w	80810ee <_Z14checkDHTStatusv+0x1ca>
  if (!bDHTstarted) {               // start the sample
 8080f40:	f8df 8204 	ldr.w	r8, [pc, #516]	; 8081148 <_Z14checkDHTStatusv+0x224>
 8080f44:	f898 3000 	ldrb.w	r3, [r8]
 8080f48:	b973      	cbnz	r3, 8080f68 <_Z14checkDHTStatusv+0x44>
		if ((transmittingData & SERIALDHTDATA) == SERIALDHTDATA) {
 8080f4a:	4b80      	ldr	r3, [pc, #512]	; (808114c <_Z14checkDHTStatusv+0x228>)
 8080f4c:	681b      	ldr	r3, [r3, #0]
 8080f4e:	2b00      	cmp	r3, #0
 8080f50:	da04      	bge.n	8080f5c <_Z14checkDHTStatusv+0x38>
      Serial.println("\r\nRetrieving information from DHT sensor. ");
 8080f52:	f006 fc33 	bl	80877bc <_Z16_fetch_usbserialv>
 8080f56:	497e      	ldr	r1, [pc, #504]	; (8081150 <_Z14checkDHTStatusv+0x22c>)
 8080f58:	f004 fce3 	bl	8085922 <_ZN5Print7printlnEPKc>
    dht.acquire();
 8080f5c:	487d      	ldr	r0, [pc, #500]	; (8081154 <_Z14checkDHTStatusv+0x230>)
 8080f5e:	f003 fa3b 	bl	80843d8 <_ZN14PietteTech_DHT7acquireEv>
    bDHTstarted = true;
 8080f62:	2301      	movs	r3, #1
 8080f64:	f888 3000 	strb.w	r3, [r8]
  if (!dht.acquiring()) {           // has sample completed?
 8080f68:	487a      	ldr	r0, [pc, #488]	; (8081154 <_Z14checkDHTStatusv+0x230>)
 8080f6a:	f003 fb01 	bl	8084570 <_ZN14PietteTech_DHT9acquiringEv>
 8080f6e:	2800      	cmp	r0, #0
 8080f70:	f040 80bd 	bne.w	80810ee <_Z14checkDHTStatusv+0x1ca>
    result = dht.getStatus();
 8080f74:	4877      	ldr	r0, [pc, #476]	; (8081154 <_Z14checkDHTStatusv+0x230>)
 8080f76:	f003 fb14 	bl	80845a2 <_ZN14PietteTech_DHT9getStatusEv>
		if ((transmittingData & SERIALDHTDATA) == SERIALDHTDATA) {
 8080f7a:	4c74      	ldr	r4, [pc, #464]	; (808114c <_Z14checkDHTStatusv+0x228>)
    result = dht.getStatus();
 8080f7c:	4607      	mov	r7, r0
		if ((transmittingData & SERIALDHTDATA) == SERIALDHTDATA) {
 8080f7e:	6823      	ldr	r3, [r4, #0]
 8080f80:	2b00      	cmp	r3, #0
 8080f82:	da12      	bge.n	8080faa <_Z14checkDHTStatusv+0x86>
      Serial.print("Read sensor: ");
 8080f84:	f006 fc1a 	bl	80877bc <_Z16_fetch_usbserialv>
 8080f88:	4973      	ldr	r1, [pc, #460]	; (8081158 <_Z14checkDHTStatusv+0x234>)
 8080f8a:	f004 fcb7 	bl	80858fc <_ZN5Print5printEPKc>
      switch (result) {
 8080f8e:	1dfb      	adds	r3, r7, #7
 8080f90:	2b07      	cmp	r3, #7
 8080f92:	d840      	bhi.n	8081016 <_Z14checkDHTStatusv+0xf2>
 8080f94:	e8df f003 	tbb	[pc, r3]
 8080f98:	2f33373b 	.word	0x2f33373b
 8080f9c:	0423272b 	.word	0x0423272b
          Serial.println("OK");
 8080fa0:	f006 fc0c 	bl	80877bc <_Z16_fetch_usbserialv>
 8080fa4:	496d      	ldr	r1, [pc, #436]	; (808115c <_Z14checkDHTStatusv+0x238>)
          Serial.println("Unknown error");
 8080fa6:	f004 fcbc 	bl	8085922 <_ZN5Print7printlnEPKc>
  	float h = dht.getHumidity();
 8080faa:	486a      	ldr	r0, [pc, #424]	; (8081154 <_Z14checkDHTStatusv+0x230>)
 8080fac:	f003 fb1c 	bl	80845e8 <_ZN14PietteTech_DHT11getHumidityEv>
 8080fb0:	4605      	mov	r5, r0
  	float f = dht.getFahrenheit();
 8080fb2:	4868      	ldr	r0, [pc, #416]	; (8081154 <_Z14checkDHTStatusv+0x230>)
 8080fb4:	f003 fb34 	bl	8084620 <_ZN14PietteTech_DHT13getFahrenheitEv>
 8080fb8:	4606      	mov	r6, r0
  	if (isnan(h) || isnan(f) || result != DHTLIB_OK) {
 8080fba:	4601      	mov	r1, r0
 8080fbc:	4628      	mov	r0, r5
 8080fbe:	f009 fda1 	bl	808ab04 <__aeabi_fcmpun>
 8080fc2:	b900      	cbnz	r0, 8080fc6 <_Z14checkDHTStatusv+0xa2>
 8080fc4:	b35f      	cbz	r7, 808101e <_Z14checkDHTStatusv+0xfa>
  		if ((transmittingData & SERIALDHTDATA) == SERIALDHTDATA)
 8080fc6:	6823      	ldr	r3, [r4, #0]
 8080fc8:	2b00      	cmp	r3, #0
 8080fca:	f280 8090 	bge.w	80810ee <_Z14checkDHTStatusv+0x1ca>
  			Serial.println("Failed to read from DHT sensor!");
 8080fce:	f006 fbf5 	bl	80877bc <_Z16_fetch_usbserialv>
 8080fd2:	4963      	ldr	r1, [pc, #396]	; (8081160 <_Z14checkDHTStatusv+0x23c>)
}
 8080fd4:	b008      	add	sp, #32
 8080fd6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  			Serial.println("Failed to read from DHT sensor!");
 8080fda:	f004 bca2 	b.w	8085922 <_ZN5Print7printlnEPKc>
          Serial.println("Error\n\r\tChecksum error");
 8080fde:	f006 fbed 	bl	80877bc <_Z16_fetch_usbserialv>
 8080fe2:	4960      	ldr	r1, [pc, #384]	; (8081164 <_Z14checkDHTStatusv+0x240>)
 8080fe4:	e7df      	b.n	8080fa6 <_Z14checkDHTStatusv+0x82>
          Serial.println("Error\n\r\tISR time out error");
 8080fe6:	f006 fbe9 	bl	80877bc <_Z16_fetch_usbserialv>
 8080fea:	495f      	ldr	r1, [pc, #380]	; (8081168 <_Z14checkDHTStatusv+0x244>)
 8080fec:	e7db      	b.n	8080fa6 <_Z14checkDHTStatusv+0x82>
          Serial.println("Error\n\r\tResponse time out error");
 8080fee:	f006 fbe5 	bl	80877bc <_Z16_fetch_usbserialv>
 8080ff2:	495e      	ldr	r1, [pc, #376]	; (808116c <_Z14checkDHTStatusv+0x248>)
 8080ff4:	e7d7      	b.n	8080fa6 <_Z14checkDHTStatusv+0x82>
          Serial.println("Error\n\r\tData time out error");
 8080ff6:	f006 fbe1 	bl	80877bc <_Z16_fetch_usbserialv>
 8080ffa:	495d      	ldr	r1, [pc, #372]	; (8081170 <_Z14checkDHTStatusv+0x24c>)
 8080ffc:	e7d3      	b.n	8080fa6 <_Z14checkDHTStatusv+0x82>
          Serial.println("Error\n\r\tAcquiring");
 8080ffe:	f006 fbdd 	bl	80877bc <_Z16_fetch_usbserialv>
 8081002:	495c      	ldr	r1, [pc, #368]	; (8081174 <_Z14checkDHTStatusv+0x250>)
 8081004:	e7cf      	b.n	8080fa6 <_Z14checkDHTStatusv+0x82>
          Serial.println("Error\n\r\tDelta time to small");
 8081006:	f006 fbd9 	bl	80877bc <_Z16_fetch_usbserialv>
 808100a:	495b      	ldr	r1, [pc, #364]	; (8081178 <_Z14checkDHTStatusv+0x254>)
 808100c:	e7cb      	b.n	8080fa6 <_Z14checkDHTStatusv+0x82>
          Serial.println("Error\n\r\tNot started");
 808100e:	f006 fbd5 	bl	80877bc <_Z16_fetch_usbserialv>
 8081012:	495a      	ldr	r1, [pc, #360]	; (808117c <_Z14checkDHTStatusv+0x258>)
 8081014:	e7c7      	b.n	8080fa6 <_Z14checkDHTStatusv+0x82>
          Serial.println("Unknown error");
 8081016:	f006 fbd1 	bl	80877bc <_Z16_fetch_usbserialv>
 808101a:	4959      	ldr	r1, [pc, #356]	; (8081180 <_Z14checkDHTStatusv+0x25c>)
 808101c:	e7c3      	b.n	8080fa6 <_Z14checkDHTStatusv+0x82>
 808101e:	f003 fd4f 	bl	8084ac0 <HAL_Timer_Get_Milli_Seconds>
    if (millis()-lastDHTPublish > ((unsigned long) delayDHTMinutes*60*1000)) {
 8081022:	f64e 2260 	movw	r2, #60000	; 0xea60
 8081026:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8081184 <_Z14checkDHTStatusv+0x260>
 808102a:	f8da 3000 	ldr.w	r3, [sl]
 808102e:	1ac0      	subs	r0, r0, r3
 8081030:	4b55      	ldr	r3, [pc, #340]	; (8081188 <_Z14checkDHTStatusv+0x264>)
 8081032:	681b      	ldr	r3, [r3, #0]
 8081034:	4353      	muls	r3, r2
 8081036:	4298      	cmp	r0, r3
 8081038:	d85c      	bhi.n	80810f4 <_Z14checkDHTStatusv+0x1d0>
		if ((transmittingData & SERIALDHTDATA) == SERIALDHTDATA) {
 808103a:	6823      	ldr	r3, [r4, #0]
 808103c:	2b00      	cmp	r3, #0
 808103e:	da4f      	bge.n	80810e0 <_Z14checkDHTStatusv+0x1bc>
      Serial.printlnf("Humidity (%%): %.2f", dht.getHumidity());
 8081040:	f006 fbbc 	bl	80877bc <_Z16_fetch_usbserialv>
 8081044:	4604      	mov	r4, r0
 8081046:	4843      	ldr	r0, [pc, #268]	; (8081154 <_Z14checkDHTStatusv+0x230>)
 8081048:	f003 face 	bl	80845e8 <_ZN14PietteTech_DHT11getHumidityEv>
 808104c:	f008 fee6 	bl	8089e1c <__aeabi_f2d>
 8081050:	4602      	mov	r2, r0
 8081052:	460b      	mov	r3, r1
 8081054:	4620      	mov	r0, r4
 8081056:	494d      	ldr	r1, [pc, #308]	; (808118c <_Z14checkDHTStatusv+0x268>)
 8081058:	f7ff fba8 	bl	80807ac <_ZN5Print8printlnfEPKcz>
      Serial.printlnf("Temperature (oC): %.2f", dht.getCelsius());
 808105c:	f006 fbae 	bl	80877bc <_Z16_fetch_usbserialv>
 8081060:	4604      	mov	r4, r0
 8081062:	483c      	ldr	r0, [pc, #240]	; (8081154 <_Z14checkDHTStatusv+0x230>)
 8081064:	f003 faa4 	bl	80845b0 <_ZN14PietteTech_DHT10getCelsiusEv>
 8081068:	f008 fed8 	bl	8089e1c <__aeabi_f2d>
 808106c:	4602      	mov	r2, r0
 808106e:	460b      	mov	r3, r1
 8081070:	4620      	mov	r0, r4
 8081072:	4947      	ldr	r1, [pc, #284]	; (8081190 <_Z14checkDHTStatusv+0x26c>)
 8081074:	f7ff fb9a 	bl	80807ac <_ZN5Print8printlnfEPKcz>
      Serial.printlnf("Temperature (oF): %.2f", dht.getFahrenheit());
 8081078:	f006 fba0 	bl	80877bc <_Z16_fetch_usbserialv>
 808107c:	4604      	mov	r4, r0
 808107e:	4835      	ldr	r0, [pc, #212]	; (8081154 <_Z14checkDHTStatusv+0x230>)
 8081080:	f003 face 	bl	8084620 <_ZN14PietteTech_DHT13getFahrenheitEv>
 8081084:	f008 feca 	bl	8089e1c <__aeabi_f2d>
 8081088:	4602      	mov	r2, r0
 808108a:	460b      	mov	r3, r1
 808108c:	4620      	mov	r0, r4
 808108e:	4941      	ldr	r1, [pc, #260]	; (8081194 <_Z14checkDHTStatusv+0x270>)
 8081090:	f7ff fb8c 	bl	80807ac <_ZN5Print8printlnfEPKcz>
      Serial.printlnf("Temperature (K): %.2f", dht.getKelvin());
 8081094:	f006 fb92 	bl	80877bc <_Z16_fetch_usbserialv>
 8081098:	4604      	mov	r4, r0
 808109a:	482e      	ldr	r0, [pc, #184]	; (8081154 <_Z14checkDHTStatusv+0x230>)
 808109c:	f003 faec 	bl	8084678 <_ZN14PietteTech_DHT9getKelvinEv>
 80810a0:	f008 febc 	bl	8089e1c <__aeabi_f2d>
 80810a4:	4602      	mov	r2, r0
 80810a6:	460b      	mov	r3, r1
 80810a8:	4620      	mov	r0, r4
 80810aa:	493b      	ldr	r1, [pc, #236]	; (8081198 <_Z14checkDHTStatusv+0x274>)
 80810ac:	f7ff fb7e 	bl	80807ac <_ZN5Print8printlnfEPKcz>
      Serial.printlnf("Dew Point (oC): %.2f", dht.getDewPoint());
 80810b0:	f006 fb84 	bl	80877bc <_Z16_fetch_usbserialv>
 80810b4:	4604      	mov	r4, r0
 80810b6:	4827      	ldr	r0, [pc, #156]	; (8081154 <_Z14checkDHTStatusv+0x230>)
 80810b8:	f003 fb0a 	bl	80846d0 <_ZN14PietteTech_DHT11getDewPointEv>
 80810bc:	4602      	mov	r2, r0
 80810be:	460b      	mov	r3, r1
 80810c0:	4620      	mov	r0, r4
 80810c2:	4936      	ldr	r1, [pc, #216]	; (808119c <_Z14checkDHTStatusv+0x278>)
 80810c4:	f7ff fb72 	bl	80807ac <_ZN5Print8printlnfEPKcz>
      Serial.printlnf("Dew Point Slow (oC): %.2f", dht.getDewPointSlow());
 80810c8:	f006 fb78 	bl	80877bc <_Z16_fetch_usbserialv>
 80810cc:	4604      	mov	r4, r0
 80810ce:	4821      	ldr	r0, [pc, #132]	; (8081154 <_Z14checkDHTStatusv+0x230>)
 80810d0:	f003 fb66 	bl	80847a0 <_ZN14PietteTech_DHT15getDewPointSlowEv>
 80810d4:	4602      	mov	r2, r0
 80810d6:	460b      	mov	r3, r1
 80810d8:	4620      	mov	r0, r4
 80810da:	4931      	ldr	r1, [pc, #196]	; (80811a0 <_Z14checkDHTStatusv+0x27c>)
 80810dc:	f7ff fb66 	bl	80807ac <_ZN5Print8printlnfEPKcz>
    bDHTstarted = false;  // reset the sample flag so we can take another
 80810e0:	2300      	movs	r3, #0
 80810e2:	f888 3000 	strb.w	r3, [r8]
 80810e6:	f003 fceb 	bl	8084ac0 <HAL_Timer_Get_Milli_Seconds>
    msLastSample = millis();
 80810ea:	f8c9 0000 	str.w	r0, [r9]
}
 80810ee:	b008      	add	sp, #32
 80810f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if ((transmittingData & TRANSMITTINGDHTDATA) == TRANSMITTINGDHTDATA) {
 80810f4:	6823      	ldr	r3, [r4, #0]
 80810f6:	071b      	lsls	r3, r3, #28
 80810f8:	d59f      	bpl.n	808103a <_Z14checkDHTStatusv+0x116>
        Particle.publish("LJENVMT", String::format("{\"t\":%.2f,\"h\":%.2f}",f,h), 60, PRIVATE);
 80810fa:	4630      	mov	r0, r6
 80810fc:	f008 fe8e 	bl	8089e1c <__aeabi_f2d>
 8081100:	4606      	mov	r6, r0
 8081102:	4628      	mov	r0, r5
 8081104:	460f      	mov	r7, r1
 8081106:	f008 fe89 	bl	8089e1c <__aeabi_f2d>
 808110a:	4632      	mov	r2, r6
 808110c:	e9cd 0100 	strd	r0, r1, [sp]
 8081110:	463b      	mov	r3, r7
 8081112:	4924      	ldr	r1, [pc, #144]	; (80811a4 <_Z14checkDHTStatusv+0x280>)
 8081114:	a804      	add	r0, sp, #16
 8081116:	f004 fba3 	bl	8085860 <_ZN6String6formatEPKcz>
 808111a:	4b23      	ldr	r3, [pc, #140]	; (80811a8 <_Z14checkDHTStatusv+0x284>)
 808111c:	9a04      	ldr	r2, [sp, #16]
 808111e:	781b      	ldrb	r3, [r3, #0]
 8081120:	4922      	ldr	r1, [pc, #136]	; (80811ac <_Z14checkDHTStatusv+0x288>)
 8081122:	f88d 3000 	strb.w	r3, [sp]
 8081126:	a802      	add	r0, sp, #8
 8081128:	233c      	movs	r3, #60	; 0x3c
 808112a:	f006 f919 	bl	8087360 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 808112e:	a803      	add	r0, sp, #12
 8081130:	f7ff fbde 	bl	80808f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081134:	a804      	add	r0, sp, #16
 8081136:	f004 fa29 	bl	808558c <_ZN6StringD1Ev>
 808113a:	f003 fcc1 	bl	8084ac0 <HAL_Timer_Get_Milli_Seconds>
        lastDHTPublish = millis();
 808113e:	f8ca 0000 	str.w	r0, [sl]
 8081142:	e77a      	b.n	808103a <_Z14checkDHTStatusv+0x116>
 8081144:	20000144 	.word	0x20000144
 8081148:	20000148 	.word	0x20000148
 808114c:	20000014 	.word	0x20000014
 8081150:	0808b1e3 	.word	0x0808b1e3
 8081154:	20000188 	.word	0x20000188
 8081158:	0808b20e 	.word	0x0808b20e
 808115c:	0808b21c 	.word	0x0808b21c
 8081160:	0808b17a 	.word	0x0808b17a
 8081164:	0808b21f 	.word	0x0808b21f
 8081168:	0808b236 	.word	0x0808b236
 808116c:	0808b251 	.word	0x0808b251
 8081170:	0808b271 	.word	0x0808b271
 8081174:	0808b28d 	.word	0x0808b28d
 8081178:	0808b29f 	.word	0x0808b29f
 808117c:	0808b2bb 	.word	0x0808b2bb
 8081180:	0808b2cf 	.word	0x0808b2cf
 8081184:	200001f0 	.word	0x200001f0
 8081188:	20000008 	.word	0x20000008
 808118c:	0808b2dd 	.word	0x0808b2dd
 8081190:	0808b2f1 	.word	0x0808b2f1
 8081194:	0808b308 	.word	0x0808b308
 8081198:	0808b31f 	.word	0x0808b31f
 808119c:	0808b335 	.word	0x0808b335
 80811a0:	0808b34a 	.word	0x0808b34a
 80811a4:	0808b15e 	.word	0x0808b15e
 80811a8:	20000140 	.word	0x20000140
 80811ac:	0808b172 	.word	0x0808b172

080811b0 <loop>:
void loop() {
 80811b0:	b508      	push	{r3, lr}
	batteryCheck.loop();
 80811b2:	4811      	ldr	r0, [pc, #68]	; (80811f8 <loop+0x48>)
 80811b4:	f000 fdbe 	bl	8081d34 <_ZN12BatteryCheck4loopEv>
	sessionCheck.loop();
 80811b8:	4810      	ldr	r0, [pc, #64]	; (80811fc <loop+0x4c>)
 80811ba:	f001 faf1 	bl	80827a0 <_ZN12SessionCheck4loopEv>
	connectionCheck.loop();
 80811be:	4810      	ldr	r0, [pc, #64]	; (8081200 <loop+0x50>)
 80811c0:	f001 f89a 	bl	80822f8 <_ZN15ConnectionCheck4loopEv>
	connectionEvents.loop();
 80811c4:	480f      	ldr	r0, [pc, #60]	; (8081204 <loop+0x54>)
 80811c6:	f001 fc8f 	bl	8082ae8 <_ZN16ConnectionEvents4loopEv>
	tester.loop();
 80811ca:	480f      	ldr	r0, [pc, #60]	; (8081208 <loop+0x58>)
 80811cc:	f000 ffba 	bl	8082144 <_ZN6Tester4loopEv>
  checkAccelStatus();
 80811d0:	f7ff fe2c 	bl	8080e2c <_Z16checkAccelStatusv>
  checkGPSStatus();
 80811d4:	f7ff fd80 	bl	8080cd8 <_Z14checkGPSStatusv>
  checkPowerStatus();
 80811d8:	f7ff fd38 	bl	8080c4c <_Z16checkPowerStatusv>
  checkDHTStatus();
 80811dc:	f7ff fea2 	bl	8080f24 <_Z14checkDHTStatusv>
  if ((transmittingData & SERIALLOOPDATA) == SERIALLOOPDATA)
 80811e0:	4b0a      	ldr	r3, [pc, #40]	; (808120c <loop+0x5c>)
 80811e2:	681b      	ldr	r3, [r3, #0]
 80811e4:	011b      	lsls	r3, r3, #4
 80811e6:	d506      	bpl.n	80811f6 <loop+0x46>
    Serial.println("End Of loop() function");
 80811e8:	f006 fae8 	bl	80877bc <_Z16_fetch_usbserialv>
}
 80811ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.println("End Of loop() function");
 80811f0:	4907      	ldr	r1, [pc, #28]	; (8081210 <loop+0x60>)
 80811f2:	f004 bb96 	b.w	8085922 <_ZN5Print7printlnEPKc>
}
 80811f6:	bd08      	pop	{r3, pc}
 80811f8:	2000014c 	.word	0x2000014c
 80811fc:	20000238 	.word	0x20000238
 8081200:	2000015c 	.word	0x2000015c
 8081204:	2000017c 	.word	0x2000017c
 8081208:	2000027c 	.word	0x2000027c
 808120c:	20000014 	.word	0x20000014
 8081210:	0808b364 	.word	0x0808b364

08081214 <_Z9postValue6String>:

// Type the name of the value you want to see into the console function
// argument and it will be published.
// See showAll() above for names of values and units.
int postValue(String cmd)
{
 8081214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8081218:	b0a1      	sub	sp, #132	; 0x84
    String buf; // for publishing values
 808121a:	ae18      	add	r6, sp, #96	; 0x60
 808121c:	49a6      	ldr	r1, [pc, #664]	; (80814b8 <_Z9postValue6String+0x2a4>)
{
 808121e:	4605      	mov	r5, r0
    String buf; // for publishing values
 8081220:	4630      	mov	r0, r6
 8081222:	f004 f9fd 	bl	8085620 <_ZN6StringC1EPK19__FlashStringHelper>

    bool initComplete = t.gpsInitComplete();
 8081226:	48a5      	ldr	r0, [pc, #660]	; (80814bc <_Z9postValue6String+0x2a8>)
 8081228:	f001 fe84 	bl	8082f34 <_ZN13AssetTracker215gpsInitCompleteEv>
 808122c:	9015      	str	r0, [sp, #84]	; 0x54
    uint8_t hour = t.getHour();
 808122e:	48a3      	ldr	r0, [pc, #652]	; (80814bc <_Z9postValue6String+0x2a8>)
 8081230:	f001 fde6 	bl	8082e00 <_ZN13AssetTracker27getHourEv>
 8081234:	4683      	mov	fp, r0
    uint8_t minute = t.getMinute();
 8081236:	48a1      	ldr	r0, [pc, #644]	; (80814bc <_Z9postValue6String+0x2a8>)
 8081238:	f001 fde8 	bl	8082e0c <_ZN13AssetTracker29getMinuteEv>
 808123c:	4682      	mov	sl, r0
    uint8_t seconds = t.getSeconds();
 808123e:	489f      	ldr	r0, [pc, #636]	; (80814bc <_Z9postValue6String+0x2a8>)
 8081240:	f001 fdea 	bl	8082e18 <_ZN13AssetTracker210getSecondsEv>
 8081244:	4681      	mov	r9, r0
    uint8_t month = t.getMonth();
 8081246:	489d      	ldr	r0, [pc, #628]	; (80814bc <_Z9postValue6String+0x2a8>)
 8081248:	f001 fdf8 	bl	8082e3c <_ZN13AssetTracker28getMonthEv>
 808124c:	4680      	mov	r8, r0
    uint8_t day = t.getDay();
 808124e:	489b      	ldr	r0, [pc, #620]	; (80814bc <_Z9postValue6String+0x2a8>)
 8081250:	f001 fdfa 	bl	8082e48 <_ZN13AssetTracker26getDayEv>
 8081254:	4607      	mov	r7, r0
    uint16_t year = t.getYear();
 8081256:	4899      	ldr	r0, [pc, #612]	; (80814bc <_Z9postValue6String+0x2a8>)
 8081258:	f001 fdea 	bl	8082e30 <_ZN13AssetTracker27getYearEv>
 808125c:	9014      	str	r0, [sp, #80]	; 0x50
    uint16_t milliseconds = t.getMilliseconds();
 808125e:	4897      	ldr	r0, [pc, #604]	; (80814bc <_Z9postValue6String+0x2a8>)
 8081260:	f001 fde0 	bl	8082e24 <_ZN13AssetTracker215getMillisecondsEv>
 8081264:	9002      	str	r0, [sp, #8]
    float latitude = t.readLat();
 8081266:	4895      	ldr	r0, [pc, #596]	; (80814bc <_Z9postValue6String+0x2a8>)
 8081268:	f001 fd7a 	bl	8082d60 <_ZN13AssetTracker27readLatEv>
 808126c:	9005      	str	r0, [sp, #20]
    float longitude = t.readLon();
 808126e:	4893      	ldr	r0, [pc, #588]	; (80814bc <_Z9postValue6String+0x2a8>)
 8081270:	f001 fd7c 	bl	8082d6c <_ZN13AssetTracker27readLonEv>
 8081274:	9006      	str	r0, [sp, #24]
    float latitudeDegrees = t.readLatDeg();
 8081276:	4891      	ldr	r0, [pc, #580]	; (80814bc <_Z9postValue6String+0x2a8>)
 8081278:	f001 fd7e 	bl	8082d78 <_ZN13AssetTracker210readLatDegEv>
 808127c:	9007      	str	r0, [sp, #28]
    float longitudeDegrees = t.readLonDeg();
 808127e:	488f      	ldr	r0, [pc, #572]	; (80814bc <_Z9postValue6String+0x2a8>)
 8081280:	f001 fd80 	bl	8082d84 <_ZN13AssetTracker210readLonDegEv>
 8081284:	9008      	str	r0, [sp, #32]
    float geoidheight = t.getGeoIdHeight();
 8081286:	488d      	ldr	r0, [pc, #564]	; (80814bc <_Z9postValue6String+0x2a8>)
 8081288:	f001 fdf6 	bl	8082e78 <_ZN13AssetTracker214getGeoIdHeightEv>
 808128c:	9009      	str	r0, [sp, #36]	; 0x24
    float altitude = t.getAltitude();
 808128e:	488b      	ldr	r0, [pc, #556]	; (80814bc <_Z9postValue6String+0x2a8>)
 8081290:	f001 fdf8 	bl	8082e84 <_ZN13AssetTracker211getAltitudeEv>
 8081294:	900a      	str	r0, [sp, #40]	; 0x28
    float speed = t.getSpeed();
 8081296:	4889      	ldr	r0, [pc, #548]	; (80814bc <_Z9postValue6String+0x2a8>)
 8081298:	f001 fde8 	bl	8082e6c <_ZN13AssetTracker28getSpeedEv>
 808129c:	900b      	str	r0, [sp, #44]	; 0x2c
    uint8_t fixquality = t.getFixQuality();
 808129e:	4887      	ldr	r0, [pc, #540]	; (80814bc <_Z9postValue6String+0x2a8>)
 80812a0:	f001 fdde 	bl	8082e60 <_ZN13AssetTracker213getFixQualityEv>
 80812a4:	900c      	str	r0, [sp, #48]	; 0x30
    uint8_t satellites = t.getSatellites();
 80812a6:	4885      	ldr	r0, [pc, #532]	; (80814bc <_Z9postValue6String+0x2a8>)
 80812a8:	f001 fdd4 	bl	8082e54 <_ZN13AssetTracker213getSatellitesEv>
 80812ac:	900d      	str	r0, [sp, #52]	; 0x34
    uint32_t horzAcc = t.getHaccuracy();
 80812ae:	4883      	ldr	r0, [pc, #524]	; (80814bc <_Z9postValue6String+0x2a8>)
 80812b0:	f001 fd76 	bl	8082da0 <_ZN13AssetTracker212getHaccuracyEv>
 80812b4:	900e      	str	r0, [sp, #56]	; 0x38
    uint32_t vertAcc = t.getVaccuracy();
 80812b6:	4881      	ldr	r0, [pc, #516]	; (80814bc <_Z9postValue6String+0x2a8>)
 80812b8:	f001 fd78 	bl	8082dac <_ZN13AssetTracker212getVaccuracyEv>
 80812bc:	900f      	str	r0, [sp, #60]	; 0x3c
    int32_t velN = t.getVelN();
 80812be:	487f      	ldr	r0, [pc, #508]	; (80814bc <_Z9postValue6String+0x2a8>)
 80812c0:	f001 fd7a 	bl	8082db8 <_ZN13AssetTracker27getVelNEv>
 80812c4:	9010      	str	r0, [sp, #64]	; 0x40
    uint32_t velE = t.getVelE();
 80812c6:	487d      	ldr	r0, [pc, #500]	; (80814bc <_Z9postValue6String+0x2a8>)
 80812c8:	f001 fd7c 	bl	8082dc4 <_ZN13AssetTracker27getVelEEv>
 80812cc:	9003      	str	r0, [sp, #12]
    uint32_t velD = t.getVelD();
 80812ce:	487b      	ldr	r0, [pc, #492]	; (80814bc <_Z9postValue6String+0x2a8>)
 80812d0:	f001 fd7e 	bl	8082dd0 <_ZN13AssetTracker27getVelDEv>
 80812d4:	9004      	str	r0, [sp, #16]
    int32_t gSpeed = t.getGspeed();
 80812d6:	4879      	ldr	r0, [pc, #484]	; (80814bc <_Z9postValue6String+0x2a8>)
 80812d8:	f001 fd8c 	bl	8082df4 <_ZN13AssetTracker29getGspeedEv>
 80812dc:	9011      	str	r0, [sp, #68]	; 0x44
    int32_t odoTrip = t.getOdoTrip();
 80812de:	4877      	ldr	r0, [pc, #476]	; (80814bc <_Z9postValue6String+0x2a8>)
 80812e0:	f001 fd7c 	bl	8082ddc <_ZN13AssetTracker210getOdoTripEv>
 80812e4:	9012      	str	r0, [sp, #72]	; 0x48
    int32_t odoTotal = t.getOdoTotal();
 80812e6:	4875      	ldr	r0, [pc, #468]	; (80814bc <_Z9postValue6String+0x2a8>)
 80812e8:	f001 fd7e 	bl	8082de8 <_ZN13AssetTracker211getOdoTotalEv>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80812ec:	4974      	ldr	r1, [pc, #464]	; (80814c0 <_Z9postValue6String+0x2ac>)
 80812ee:	9013      	str	r0, [sp, #76]	; 0x4c
 80812f0:	4628      	mov	r0, r5
 80812f2:	f004 fa3a 	bl	808576a <_ZNK6String6equalsEPKc>
 80812f6:	ac1c      	add	r4, sp, #112	; 0x70



    // This implementation is a bit crude but it was easy to implement
    // and simple to read.
    if (cmd == "initComplete"){
 80812f8:	b368      	cbz	r0, 8081356 <_Z9postValue6String+0x142>
        buf = String::format("%d", initComplete);
 80812fa:	9a15      	ldr	r2, [sp, #84]	; 0x54
    } else if (cmd == "hour"){
        buf = String::format("%d", hour);
 80812fc:	4620      	mov	r0, r4
 80812fe:	4971      	ldr	r1, [pc, #452]	; (80814c4 <_Z9postValue6String+0x2b0>)
 8081300:	f004 faae 	bl	8085860 <_ZN6String6formatEPKcz>
 8081304:	4621      	mov	r1, r4
 8081306:	4630      	mov	r0, r6
 8081308:	f004 f9df 	bl	80856ca <_ZN6StringaSEOS_>
 808130c:	4620      	mov	r0, r4
 808130e:	f004 f93d 	bl	808558c <_ZN6StringD1Ev>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8081312:	4629      	mov	r1, r5
 8081314:	4620      	mov	r0, r4
 8081316:	f004 f9cd 	bl	80856b4 <_ZN6StringC1ERKS_>
    } else if (cmd == "odoTotal"){
        buf = String::format("%lu", odoTotal);
    } else {
        buf = "Don't know that one. Check spelling.";
    }
    Particle.publish("LJCMDVAL", cmd + ": " + buf, 60, PRIVATE);
 808131a:	4620      	mov	r0, r4
 808131c:	496a      	ldr	r1, [pc, #424]	; (80814c8 <_Z9postValue6String+0x2b4>)
 808131e:	f004 fa10 	bl	8085742 <_ZplRK15StringSumHelperPKc>
 8081322:	4631      	mov	r1, r6
 8081324:	f004 fa01 	bl	808572a <_ZplRK15StringSumHelperRK6String>
	const char * c_str() const { return buffer; }
 8081328:	4b68      	ldr	r3, [pc, #416]	; (80814cc <_Z9postValue6String+0x2b8>)
 808132a:	6802      	ldr	r2, [r0, #0]
 808132c:	781b      	ldrb	r3, [r3, #0]
 808132e:	4968      	ldr	r1, [pc, #416]	; (80814d0 <_Z9postValue6String+0x2bc>)
 8081330:	f88d 3000 	strb.w	r3, [sp]
 8081334:	a816      	add	r0, sp, #88	; 0x58
 8081336:	233c      	movs	r3, #60	; 0x3c
 8081338:	f006 f812 	bl	8087360 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 808133c:	a817      	add	r0, sp, #92	; 0x5c
 808133e:	f7ff fad7 	bl	80808f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class StringSumHelper : public String
 8081342:	4620      	mov	r0, r4
 8081344:	f004 f922 	bl	808558c <_ZN6StringD1Ev>
    String buf; // for publishing values
 8081348:	4630      	mov	r0, r6
 808134a:	f004 f91f 	bl	808558c <_ZN6StringD1Ev>


    return 1;
}
 808134e:	2001      	movs	r0, #1
 8081350:	b021      	add	sp, #132	; 0x84
 8081352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8081356:	4628      	mov	r0, r5
 8081358:	495e      	ldr	r1, [pc, #376]	; (80814d4 <_Z9postValue6String+0x2c0>)
 808135a:	f004 fa06 	bl	808576a <_ZNK6String6equalsEPKc>
    } else if (cmd == "hour"){
 808135e:	b108      	cbz	r0, 8081364 <_Z9postValue6String+0x150>
        buf = String::format("%d", hour);
 8081360:	465a      	mov	r2, fp
 8081362:	e7cb      	b.n	80812fc <_Z9postValue6String+0xe8>
 8081364:	4628      	mov	r0, r5
 8081366:	495c      	ldr	r1, [pc, #368]	; (80814d8 <_Z9postValue6String+0x2c4>)
 8081368:	f004 f9ff 	bl	808576a <_ZNK6String6equalsEPKc>
    } else if (cmd == "minute"){
 808136c:	b108      	cbz	r0, 8081372 <_Z9postValue6String+0x15e>
        buf = String::format("%d", minute);
 808136e:	4652      	mov	r2, sl
 8081370:	e7c4      	b.n	80812fc <_Z9postValue6String+0xe8>
 8081372:	4628      	mov	r0, r5
 8081374:	4959      	ldr	r1, [pc, #356]	; (80814dc <_Z9postValue6String+0x2c8>)
 8081376:	f004 f9f8 	bl	808576a <_ZNK6String6equalsEPKc>
    } else if (cmd == "seconds"){
 808137a:	b108      	cbz	r0, 8081380 <_Z9postValue6String+0x16c>
        buf = String::format("%d", seconds);
 808137c:	464a      	mov	r2, r9
 808137e:	e7bd      	b.n	80812fc <_Z9postValue6String+0xe8>
 8081380:	4628      	mov	r0, r5
 8081382:	4957      	ldr	r1, [pc, #348]	; (80814e0 <_Z9postValue6String+0x2cc>)
 8081384:	f004 f9f1 	bl	808576a <_ZNK6String6equalsEPKc>
    } else if (cmd == "month"){
 8081388:	b108      	cbz	r0, 808138e <_Z9postValue6String+0x17a>
        buf = String::format("%d", month);
 808138a:	4642      	mov	r2, r8
 808138c:	e7b6      	b.n	80812fc <_Z9postValue6String+0xe8>
 808138e:	4628      	mov	r0, r5
 8081390:	4954      	ldr	r1, [pc, #336]	; (80814e4 <_Z9postValue6String+0x2d0>)
 8081392:	f004 f9ea 	bl	808576a <_ZNK6String6equalsEPKc>
    } else if (cmd == "day"){
 8081396:	b108      	cbz	r0, 808139c <_Z9postValue6String+0x188>
        buf = String::format("%d", day);
 8081398:	463a      	mov	r2, r7
 808139a:	e7af      	b.n	80812fc <_Z9postValue6String+0xe8>
 808139c:	4628      	mov	r0, r5
 808139e:	4952      	ldr	r1, [pc, #328]	; (80814e8 <_Z9postValue6String+0x2d4>)
 80813a0:	f004 f9e3 	bl	808576a <_ZNK6String6equalsEPKc>
    } else if (cmd == "year"){
 80813a4:	b108      	cbz	r0, 80813aa <_Z9postValue6String+0x196>
        buf = String::format("%d", year);
 80813a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80813a8:	e7a8      	b.n	80812fc <_Z9postValue6String+0xe8>
 80813aa:	4628      	mov	r0, r5
 80813ac:	494f      	ldr	r1, [pc, #316]	; (80814ec <_Z9postValue6String+0x2d8>)
 80813ae:	f004 f9dc 	bl	808576a <_ZNK6String6equalsEPKc>
    } else if (cmd == "milliseconds"){
 80813b2:	b110      	cbz	r0, 80813ba <_Z9postValue6String+0x1a6>
        buf = String::format("%d", milliseconds);
 80813b4:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80813b8:	e7a0      	b.n	80812fc <_Z9postValue6String+0xe8>
 80813ba:	4628      	mov	r0, r5
 80813bc:	494c      	ldr	r1, [pc, #304]	; (80814f0 <_Z9postValue6String+0x2dc>)
 80813be:	f004 f9d4 	bl	808576a <_ZNK6String6equalsEPKc>
    } else if (cmd == "latitude"){
 80813c2:	b148      	cbz	r0, 80813d8 <_Z9postValue6String+0x1c4>
        buf = String::format("%f", latitude);
 80813c4:	9805      	ldr	r0, [sp, #20]
        buf = String::format("%f", longitude);
 80813c6:	f008 fd29 	bl	8089e1c <__aeabi_f2d>
 80813ca:	4602      	mov	r2, r0
 80813cc:	460b      	mov	r3, r1
 80813ce:	4620      	mov	r0, r4
 80813d0:	4948      	ldr	r1, [pc, #288]	; (80814f4 <_Z9postValue6String+0x2e0>)
 80813d2:	f004 fa45 	bl	8085860 <_ZN6String6formatEPKcz>
 80813d6:	e795      	b.n	8081304 <_Z9postValue6String+0xf0>
 80813d8:	4628      	mov	r0, r5
 80813da:	4947      	ldr	r1, [pc, #284]	; (80814f8 <_Z9postValue6String+0x2e4>)
 80813dc:	f004 f9c5 	bl	808576a <_ZNK6String6equalsEPKc>
 80813e0:	46b0      	mov	r8, r6
 80813e2:	4627      	mov	r7, r4
    } else if (cmd == "longitude"){
 80813e4:	b108      	cbz	r0, 80813ea <_Z9postValue6String+0x1d6>
        buf = String::format("%f", longitude);
 80813e6:	9806      	ldr	r0, [sp, #24]
 80813e8:	e7ed      	b.n	80813c6 <_Z9postValue6String+0x1b2>
 80813ea:	4628      	mov	r0, r5
 80813ec:	4943      	ldr	r1, [pc, #268]	; (80814fc <_Z9postValue6String+0x2e8>)
 80813ee:	f004 f9bc 	bl	808576a <_ZNK6String6equalsEPKc>
    } else if (cmd == "latitudeDegrees"){
 80813f2:	b170      	cbz	r0, 8081412 <_Z9postValue6String+0x1fe>
        buf = String::format("%f", latitudeDegrees);
 80813f4:	9807      	ldr	r0, [sp, #28]
        buf = String::format("%f", longitudeDegrees);
 80813f6:	f008 fd11 	bl	8089e1c <__aeabi_f2d>
 80813fa:	4602      	mov	r2, r0
 80813fc:	460b      	mov	r3, r1
 80813fe:	4638      	mov	r0, r7
 8081400:	493c      	ldr	r1, [pc, #240]	; (80814f4 <_Z9postValue6String+0x2e0>)
 8081402:	f004 fa2d 	bl	8085860 <_ZN6String6formatEPKcz>
        buf = String::format("%lu", vertAcc);
 8081406:	4639      	mov	r1, r7
 8081408:	4640      	mov	r0, r8
 808140a:	f004 f95e 	bl	80856ca <_ZN6StringaSEOS_>
 808140e:	4638      	mov	r0, r7
 8081410:	e77d      	b.n	808130e <_Z9postValue6String+0xfa>
 8081412:	4628      	mov	r0, r5
 8081414:	493a      	ldr	r1, [pc, #232]	; (8081500 <_Z9postValue6String+0x2ec>)
 8081416:	f004 f9a8 	bl	808576a <_ZNK6String6equalsEPKc>
 808141a:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    } else if (cmd == "longitudeDegrees"){
 808141e:	b108      	cbz	r0, 8081424 <_Z9postValue6String+0x210>
        buf = String::format("%f", longitudeDegrees);
 8081420:	9808      	ldr	r0, [sp, #32]
 8081422:	e7e8      	b.n	80813f6 <_Z9postValue6String+0x1e2>
 8081424:	4628      	mov	r0, r5
 8081426:	4937      	ldr	r1, [pc, #220]	; (8081504 <_Z9postValue6String+0x2f0>)
 8081428:	f004 f99f 	bl	808576a <_ZNK6String6equalsEPKc>
 808142c:	af1c      	add	r7, sp, #112	; 0x70
    } else if (cmd == "geoidheight"){
 808142e:	b108      	cbz	r0, 8081434 <_Z9postValue6String+0x220>
        buf = String::format("%f", geoidheight);
 8081430:	9809      	ldr	r0, [sp, #36]	; 0x24
 8081432:	e7e0      	b.n	80813f6 <_Z9postValue6String+0x1e2>
 8081434:	4628      	mov	r0, r5
 8081436:	4934      	ldr	r1, [pc, #208]	; (8081508 <_Z9postValue6String+0x2f4>)
 8081438:	f004 f997 	bl	808576a <_ZNK6String6equalsEPKc>
    } else if (cmd == "altitude"){
 808143c:	b108      	cbz	r0, 8081442 <_Z9postValue6String+0x22e>
        buf = String::format("%f", altitude);
 808143e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8081440:	e7d9      	b.n	80813f6 <_Z9postValue6String+0x1e2>
 8081442:	4628      	mov	r0, r5
 8081444:	4931      	ldr	r1, [pc, #196]	; (808150c <_Z9postValue6String+0x2f8>)
 8081446:	f004 f990 	bl	808576a <_ZNK6String6equalsEPKc>
    } else if (cmd == "speed"){
 808144a:	b108      	cbz	r0, 8081450 <_Z9postValue6String+0x23c>
        buf = String::format("%f", speed);
 808144c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 808144e:	e7d2      	b.n	80813f6 <_Z9postValue6String+0x1e2>
 8081450:	4628      	mov	r0, r5
 8081452:	492f      	ldr	r1, [pc, #188]	; (8081510 <_Z9postValue6String+0x2fc>)
 8081454:	f004 f989 	bl	808576a <_ZNK6String6equalsEPKc>
 8081458:	46c2      	mov	sl, r8
 808145a:	46b9      	mov	r9, r7
    } else if (cmd == "fixquality"){
 808145c:	b128      	cbz	r0, 808146a <_Z9postValue6String+0x256>
        buf = String::format("%d", fixquality);
 808145e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        buf = String::format("%d", satellites);
 8081460:	4918      	ldr	r1, [pc, #96]	; (80814c4 <_Z9postValue6String+0x2b0>)
        buf = String::format("%lu", vertAcc);
 8081462:	4638      	mov	r0, r7
 8081464:	f004 f9fc 	bl	8085860 <_ZN6String6formatEPKcz>
 8081468:	e7cd      	b.n	8081406 <_Z9postValue6String+0x1f2>
 808146a:	4628      	mov	r0, r5
 808146c:	4929      	ldr	r1, [pc, #164]	; (8081514 <_Z9postValue6String+0x300>)
 808146e:	f004 f97c 	bl	808576a <_ZNK6String6equalsEPKc>
    } else if (cmd == "satellites"){
 8081472:	b108      	cbz	r0, 8081478 <_Z9postValue6String+0x264>
        buf = String::format("%d", satellites);
 8081474:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8081476:	e7f3      	b.n	8081460 <_Z9postValue6String+0x24c>
 8081478:	4628      	mov	r0, r5
 808147a:	4927      	ldr	r1, [pc, #156]	; (8081518 <_Z9postValue6String+0x304>)
 808147c:	f004 f975 	bl	808576a <_ZNK6String6equalsEPKc>
    } else if (cmd == "horzAcc"){
 8081480:	b110      	cbz	r0, 8081488 <_Z9postValue6String+0x274>
        buf = String::format("%lu", horzAcc);
 8081482:	9a0e      	ldr	r2, [sp, #56]	; 0x38
        buf = String::format("%lu", vertAcc);
 8081484:	4925      	ldr	r1, [pc, #148]	; (808151c <_Z9postValue6String+0x308>)
 8081486:	e7ec      	b.n	8081462 <_Z9postValue6String+0x24e>
 8081488:	4628      	mov	r0, r5
 808148a:	4925      	ldr	r1, [pc, #148]	; (8081520 <_Z9postValue6String+0x30c>)
 808148c:	f004 f96d 	bl	808576a <_ZNK6String6equalsEPKc>
    } else if (cmd == "vertAcc"){
 8081490:	b108      	cbz	r0, 8081496 <_Z9postValue6String+0x282>
        buf = String::format("%lu", vertAcc);
 8081492:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8081494:	e7f6      	b.n	8081484 <_Z9postValue6String+0x270>
 8081496:	4628      	mov	r0, r5
 8081498:	4922      	ldr	r1, [pc, #136]	; (8081524 <_Z9postValue6String+0x310>)
 808149a:	f004 f966 	bl	808576a <_ZNK6String6equalsEPKc>
    } else if (cmd == "velN"){
 808149e:	2800      	cmp	r0, #0
 80814a0:	d044      	beq.n	808152c <_Z9postValue6String+0x318>
        buf = String::format("%ld", velN);
 80814a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
        buf = String::format("%ld", velE);
 80814a4:	4920      	ldr	r1, [pc, #128]	; (8081528 <_Z9postValue6String+0x314>)
        buf = String::format("%lu", odoTotal);
 80814a6:	4648      	mov	r0, r9
 80814a8:	f004 f9da 	bl	8085860 <_ZN6String6formatEPKcz>
 80814ac:	4649      	mov	r1, r9
 80814ae:	4650      	mov	r0, sl
 80814b0:	f004 f90b 	bl	80856ca <_ZN6StringaSEOS_>
 80814b4:	4648      	mov	r0, r9
 80814b6:	e72a      	b.n	808130e <_Z9postValue6String+0xfa>
 80814b8:	0808b6b8 	.word	0x0808b6b8
 80814bc:	20000278 	.word	0x20000278
 80814c0:	0808b37b 	.word	0x0808b37b
 80814c4:	0808b80f 	.word	0x0808b80f
 80814c8:	0808bb8e 	.word	0x0808bb8e
 80814cc:	20000140 	.word	0x20000140
 80814d0:	0808b479 	.word	0x0808b479
 80814d4:	0808b388 	.word	0x0808b388
 80814d8:	0808b38d 	.word	0x0808b38d
 80814dc:	0808b3a8 	.word	0x0808b3a8
 80814e0:	0808b394 	.word	0x0808b394
 80814e4:	0808b39a 	.word	0x0808b39a
 80814e8:	0808b39e 	.word	0x0808b39e
 80814ec:	0808b3a3 	.word	0x0808b3a3
 80814f0:	0808b3b0 	.word	0x0808b3b0
 80814f4:	0808b863 	.word	0x0808b863
 80814f8:	0808b3b9 	.word	0x0808b3b9
 80814fc:	0808b3c3 	.word	0x0808b3c3
 8081500:	0808b3d3 	.word	0x0808b3d3
 8081504:	0808b3e4 	.word	0x0808b3e4
 8081508:	0808b3f0 	.word	0x0808b3f0
 808150c:	0808b3f9 	.word	0x0808b3f9
 8081510:	0808b3ff 	.word	0x0808b3ff
 8081514:	0808b40a 	.word	0x0808b40a
 8081518:	0808b415 	.word	0x0808b415
 808151c:	0808b41d 	.word	0x0808b41d
 8081520:	0808b421 	.word	0x0808b421
 8081524:	0808b429 	.word	0x0808b429
 8081528:	0808b42e 	.word	0x0808b42e
 808152c:	4628      	mov	r0, r5
 808152e:	4914      	ldr	r1, [pc, #80]	; (8081580 <_Z9postValue6String+0x36c>)
 8081530:	f004 f91b 	bl	808576a <_ZNK6String6equalsEPKc>
    } else if (cmd == "velE"){
 8081534:	b108      	cbz	r0, 808153a <_Z9postValue6String+0x326>
        buf = String::format("%ld", velE);
 8081536:	9a03      	ldr	r2, [sp, #12]
 8081538:	e7b4      	b.n	80814a4 <_Z9postValue6String+0x290>
 808153a:	4628      	mov	r0, r5
 808153c:	4911      	ldr	r1, [pc, #68]	; (8081584 <_Z9postValue6String+0x370>)
 808153e:	f004 f914 	bl	808576a <_ZNK6String6equalsEPKc>
    } else if (cmd == "velD"){
 8081542:	b108      	cbz	r0, 8081548 <_Z9postValue6String+0x334>
        buf = String::format("%ld", velD);
 8081544:	9a04      	ldr	r2, [sp, #16]
 8081546:	e7ad      	b.n	80814a4 <_Z9postValue6String+0x290>
 8081548:	4628      	mov	r0, r5
 808154a:	490f      	ldr	r1, [pc, #60]	; (8081588 <_Z9postValue6String+0x374>)
 808154c:	f004 f90d 	bl	808576a <_ZNK6String6equalsEPKc>
    } else if (cmd == "gSpeed"){
 8081550:	b110      	cbz	r0, 8081558 <_Z9postValue6String+0x344>
        buf = String::format("%lu", gSpeed);
 8081552:	9a11      	ldr	r2, [sp, #68]	; 0x44
        buf = String::format("%lu", odoTotal);
 8081554:	490d      	ldr	r1, [pc, #52]	; (808158c <_Z9postValue6String+0x378>)
 8081556:	e7a6      	b.n	80814a6 <_Z9postValue6String+0x292>
 8081558:	4628      	mov	r0, r5
 808155a:	490d      	ldr	r1, [pc, #52]	; (8081590 <_Z9postValue6String+0x37c>)
 808155c:	f004 f905 	bl	808576a <_ZNK6String6equalsEPKc>
    } else if (cmd == "odoTrip"){
 8081560:	b108      	cbz	r0, 8081566 <_Z9postValue6String+0x352>
        buf = String::format("%lu", odoTrip);
 8081562:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8081564:	e7f6      	b.n	8081554 <_Z9postValue6String+0x340>
 8081566:	4628      	mov	r0, r5
 8081568:	490a      	ldr	r1, [pc, #40]	; (8081594 <_Z9postValue6String+0x380>)
 808156a:	f004 f8fe 	bl	808576a <_ZNK6String6equalsEPKc>
    } else if (cmd == "odoTotal"){
 808156e:	b108      	cbz	r0, 8081574 <_Z9postValue6String+0x360>
        buf = String::format("%lu", odoTotal);
 8081570:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8081572:	e7ef      	b.n	8081554 <_Z9postValue6String+0x340>
        buf = "Don't know that one. Check spelling.";
 8081574:	4640      	mov	r0, r8
 8081576:	4908      	ldr	r1, [pc, #32]	; (8081598 <_Z9postValue6String+0x384>)
 8081578:	f004 f8af 	bl	80856da <_ZN6StringaSEPKc>
 808157c:	e6c9      	b.n	8081312 <_Z9postValue6String+0xfe>
 808157e:	bf00      	nop
 8081580:	0808b432 	.word	0x0808b432
 8081584:	0808b437 	.word	0x0808b437
 8081588:	0808b43c 	.word	0x0808b43c
 808158c:	0808b41d 	.word	0x0808b41d
 8081590:	0808b443 	.word	0x0808b443
 8081594:	0808b44b 	.word	0x0808b44b
 8081598:	0808b454 	.word	0x0808b454

0808159c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 808159c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 808159e:	2614      	movs	r6, #20
 80815a0:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 80815a4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 80815a6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80815aa:	42ae      	cmp	r6, r5
 80815ac:	d004      	beq.n	80815b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 80815ae:	4628      	mov	r0, r5
 80815b0:	f003 ffec 	bl	808558c <_ZN6StringD1Ev>
 80815b4:	3514      	adds	r5, #20
 80815b6:	e7f8      	b.n	80815aa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 80815b8:	6820      	ldr	r0, [r4, #0]
 80815ba:	f003 fdc1 	bl	8085140 <free>
    AllocatorT::free(data_);
}
 80815be:	4620      	mov	r0, r4
 80815c0:	bd70      	pop	{r4, r5, r6, pc}

080815c2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 80815c2:	b513      	push	{r0, r1, r4, lr}
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80815c4:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80815c6:	460b      	mov	r3, r1
 80815c8:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80815ca:	c803      	ldmia	r0, {r0, r1}
 80815cc:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80815d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80815d4:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80815d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80815dc:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80815e0:	b002      	add	sp, #8
 80815e2:	bd10      	pop	{r4, pc}

080815e4 <setup>:
void setup() {
 80815e4:	b530      	push	{r4, r5, lr}
 80815e6:	b095      	sub	sp, #84	; 0x54
	Serial.begin(9600);
 80815e8:	f006 f8e8 	bl	80877bc <_Z16_fetch_usbserialv>
 80815ec:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80815f0:	f006 f8c6 	bl	8087780 <_ZN9USBSerial5beginEl>
  delay(10000);
 80815f4:	f242 7010 	movw	r0, #10000	; 0x2710
 80815f8:	f005 fb9c 	bl	8086d34 <delay>
  pc.setup();
 80815fc:	4894      	ldr	r0, [pc, #592]	; (8081850 <setup+0x26c>)
 80815fe:	f001 fb69 	bl	8082cd4 <_ZN10PowerCheck5setupEv>
  dht.begin();
 8081602:	4894      	ldr	r0, [pc, #592]	; (8081854 <setup+0x270>)
 8081604:	f002 fec8 	bl	8084398 <_ZN14PietteTech_DHT5beginEv>
  t.begin();
 8081608:	4893      	ldr	r0, [pc, #588]	; (8081858 <setup+0x274>)
 808160a:	f001 fb97 	bl	8082d3c <_ZN13AssetTracker25beginEv>
  t.gpsOn();
 808160e:	4892      	ldr	r0, [pc, #584]	; (8081858 <setup+0x274>)
 8081610:	f001 fc58 	bl	8082ec4 <_ZN13AssetTracker25gpsOnEv>
  SetGPSAntenna("external"); // set up for external antenna
 8081614:	4991      	ldr	r1, [pc, #580]	; (808185c <setup+0x278>)
 8081616:	a810      	add	r0, sp, #64	; 0x40
 8081618:	f004 f802 	bl	8085620 <_ZN6StringC1EPK19__FlashStringHelper>
 808161c:	a810      	add	r0, sp, #64	; 0x40
 808161e:	f7fe fdeb 	bl	80801f8 <_Z13SetGPSAntenna6String>
 8081622:	a810      	add	r0, sp, #64	; 0x40
 8081624:	f003 ffb2 	bl	808558c <_ZN6StringD1Ev>
	bool cloudConnectDebug();

	inline ConnectionCheck &withListenWaitForReboot(unsigned long value) { listenWaitForReboot = value; return *this; };
	inline ConnectionCheck &withCloudWaitForReboot(unsigned long value) { cloudWaitForReboot = value; return *this; };
	inline ConnectionCheck &withPingTimeout(unsigned long value) { pingTimeout = value; return *this; };
	inline ConnectionCheck &withFailureSleepSec(unsigned long value) { failureSleepSec = value; return *this; };
 8081628:	f44f 7361 	mov.w	r3, #900	; 0x384
 808162c:	4c8c      	ldr	r4, [pc, #560]	; (8081860 <setup+0x27c>)
	connectionEvents.setup();
 808162e:	488d      	ldr	r0, [pc, #564]	; (8081864 <setup+0x280>)
 8081630:	6123      	str	r3, [r4, #16]
 8081632:	f001 faab 	bl	8082b8c <_ZN16ConnectionEvents5setupEv>
	batteryCheck.setup();
 8081636:	488c      	ldr	r0, [pc, #560]	; (8081868 <setup+0x284>)
 8081638:	f000 fb7a 	bl	8081d30 <_ZN12BatteryCheck5setupEv>
	sessionCheck.setup();
 808163c:	488b      	ldr	r0, [pc, #556]	; (808186c <setup+0x288>)
 808163e:	f001 f97d 	bl	808293c <_ZN12SessionCheck5setupEv>
	connectionCheck.setup();
 8081642:	4620      	mov	r0, r4
 8081644:	f000 fdf6 	bl	8082234 <_ZN15ConnectionCheck5setupEv>
	tester.setup();
 8081648:	4889      	ldr	r0, [pc, #548]	; (8081870 <setup+0x28c>)
 808164a:	f000 fc07 	bl	8081e5c <_ZN6Tester5setupEv>
        return _function(name, args...);
 808164e:	4989      	ldr	r1, [pc, #548]	; (8081874 <setup+0x290>)
 8081650:	4889      	ldr	r0, [pc, #548]	; (8081878 <setup+0x294>)
 8081652:	f7fe fe67 	bl	8080324 <_ZN10CloudClass9_functionEPKcPFi6StringE.isra.0>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8081656:	4b89      	ldr	r3, [pc, #548]	; (808187c <setup+0x298>)
            auto wrapper = new user_std_function_int_str_t(func);
 8081658:	2010      	movs	r0, #16
 808165a:	9310      	str	r3, [sp, #64]	; 0x40
	    _M_invoker = &_My_handler::_M_invoke;
 808165c:	4b88      	ldr	r3, [pc, #544]	; (8081880 <setup+0x29c>)
 808165e:	9313      	str	r3, [sp, #76]	; 0x4c
	    _M_manager = &_My_handler::_M_manager;
 8081660:	4b88      	ldr	r3, [pc, #544]	; (8081884 <setup+0x2a0>)
 8081662:	9312      	str	r3, [sp, #72]	; 0x48
 8081664:	f7fe fd29 	bl	80800ba <_Znwj>
 8081668:	4604      	mov	r4, r0
 808166a:	b178      	cbz	r0, 808168c <setup+0xa8>
    _Function_base() : _M_manager(nullptr) { }
 808166c:	2300      	movs	r3, #0
 808166e:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 8081670:	9b12      	ldr	r3, [sp, #72]	; 0x48
      if (static_cast<bool>(__x))
 8081672:	b133      	cbz	r3, 8081682 <setup+0x9e>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8081674:	2202      	movs	r2, #2
 8081676:	a910      	add	r1, sp, #64	; 0x40
 8081678:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 808167a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 808167c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 808167e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8081680:	60a3      	str	r3, [r4, #8]
                success = register_function(call_std_user_function, wrapper, funcKey);
 8081682:	4621      	mov	r1, r4
 8081684:	4a80      	ldr	r2, [pc, #512]	; (8081888 <setup+0x2a4>)
 8081686:	4881      	ldr	r0, [pc, #516]	; (808188c <setup+0x2a8>)
 8081688:	f005 fd59 	bl	808713e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
    _Function_base() : _M_manager(nullptr) { }
 808168c:	2500      	movs	r5, #0
    class function<_Res(_ArgTypes...)>
 808168e:	a810      	add	r0, sp, #64	; 0x40
 8081690:	f7ff f8b4 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
        return _function(name, args...);
 8081694:	497e      	ldr	r1, [pc, #504]	; (8081890 <setup+0x2ac>)
 8081696:	487f      	ldr	r0, [pc, #508]	; (8081894 <setup+0x2b0>)
 8081698:	f7fe fe44 	bl	8080324 <_ZN10CloudClass9_functionEPKcPFi6StringE.isra.0>
 808169c:	497e      	ldr	r1, [pc, #504]	; (8081898 <setup+0x2b4>)
 808169e:	487f      	ldr	r0, [pc, #508]	; (808189c <setup+0x2b8>)
 80816a0:	f7fe fe40 	bl	8080324 <_ZN10CloudClass9_functionEPKcPFi6StringE.isra.0>
 80816a4:	497e      	ldr	r1, [pc, #504]	; (80818a0 <setup+0x2bc>)
 80816a6:	487f      	ldr	r0, [pc, #508]	; (80818a4 <setup+0x2c0>)
 80816a8:	f7fe fe3c 	bl	8080324 <_ZN10CloudClass9_functionEPKcPFi6StringE.isra.0>
 80816ac:	497e      	ldr	r1, [pc, #504]	; (80818a8 <setup+0x2c4>)
 80816ae:	487f      	ldr	r0, [pc, #508]	; (80818ac <setup+0x2c8>)
 80816b0:	f7fe fe38 	bl	8080324 <_ZN10CloudClass9_functionEPKcPFi6StringE.isra.0>
 80816b4:	497e      	ldr	r1, [pc, #504]	; (80818b0 <setup+0x2cc>)
 80816b6:	487f      	ldr	r0, [pc, #508]	; (80818b4 <setup+0x2d0>)
 80816b8:	f7fe fe34 	bl	8080324 <_ZN10CloudClass9_functionEPKcPFi6StringE.isra.0>
 80816bc:	497e      	ldr	r1, [pc, #504]	; (80818b8 <setup+0x2d4>)
 80816be:	487f      	ldr	r0, [pc, #508]	; (80818bc <setup+0x2d8>)
 80816c0:	f7fe fe30 	bl	8080324 <_ZN10CloudClass9_functionEPKcPFi6StringE.isra.0>
 80816c4:	497e      	ldr	r1, [pc, #504]	; (80818c0 <setup+0x2dc>)
 80816c6:	487f      	ldr	r0, [pc, #508]	; (80818c4 <setup+0x2e0>)
 80816c8:	f7fe fe2c 	bl	8080324 <_ZN10CloudClass9_functionEPKcPFi6StringE.isra.0>
 80816cc:	497e      	ldr	r1, [pc, #504]	; (80818c8 <setup+0x2e4>)
 80816ce:	487f      	ldr	r0, [pc, #508]	; (80818cc <setup+0x2e8>)
 80816d0:	f7fe fe28 	bl	8080324 <_ZN10CloudClass9_functionEPKcPFi6StringE.isra.0>
 80816d4:	497e      	ldr	r1, [pc, #504]	; (80818d0 <setup+0x2ec>)
 80816d6:	487f      	ldr	r0, [pc, #508]	; (80818d4 <setup+0x2f0>)
 80816d8:	f7fe fe24 	bl	8080324 <_ZN10CloudClass9_functionEPKcPFi6StringE.isra.0>
 80816dc:	497e      	ldr	r1, [pc, #504]	; (80818d8 <setup+0x2f4>)
 80816de:	487f      	ldr	r0, [pc, #508]	; (80818dc <setup+0x2f8>)
 80816e0:	f7fe fe20 	bl	8080324 <_ZN10CloudClass9_functionEPKcPFi6StringE.isra.0>
 80816e4:	497e      	ldr	r1, [pc, #504]	; (80818e0 <setup+0x2fc>)
 80816e6:	487f      	ldr	r0, [pc, #508]	; (80818e4 <setup+0x300>)
 80816e8:	f7fe fe1c 	bl	8080324 <_ZN10CloudClass9_functionEPKcPFi6StringE.isra.0>
 80816ec:	497e      	ldr	r1, [pc, #504]	; (80818e8 <setup+0x304>)
 80816ee:	487f      	ldr	r0, [pc, #508]	; (80818ec <setup+0x308>)
 80816f0:	f7fe fe18 	bl	8080324 <_ZN10CloudClass9_functionEPKcPFi6StringE.isra.0>
 80816f4:	497e      	ldr	r1, [pc, #504]	; (80818f0 <setup+0x30c>)
 80816f6:	487f      	ldr	r0, [pc, #508]	; (80818f4 <setup+0x310>)
 80816f8:	f7fe fe14 	bl	8080324 <_ZN10CloudClass9_functionEPKcPFi6StringE.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 80816fc:	2300      	movs	r3, #0
 80816fe:	2201      	movs	r2, #1
 8081700:	497d      	ldr	r1, [pc, #500]	; (80818f8 <setup+0x314>)
 8081702:	487e      	ldr	r0, [pc, #504]	; (80818fc <setup+0x318>)
 8081704:	f003 fcbc 	bl	8085080 <spark_variable>
  Particle.variable("accelThresh", accelThreshold);
 8081708:	497d      	ldr	r1, [pc, #500]	; (8081900 <setup+0x31c>)
 808170a:	487e      	ldr	r0, [pc, #504]	; (8081904 <setup+0x320>)
 808170c:	f7fe fe10 	bl	8080330 <_ZN10CloudClass8variableIA12_cJRiEEEbRKT_DpOT0_.isra.0>
 8081710:	2300      	movs	r3, #0
 8081712:	2202      	movs	r2, #2
 8081714:	497c      	ldr	r1, [pc, #496]	; (8081908 <setup+0x324>)
 8081716:	487d      	ldr	r0, [pc, #500]	; (808190c <setup+0x328>)
 8081718:	f003 fcb2 	bl	8085080 <spark_variable>
        return spark_variable(varKey, (const void*)userVar, CloudVariableTypeInt::TYPE_ID, NULL);
 808171c:	2300      	movs	r3, #0
 808171e:	2202      	movs	r2, #2
 8081720:	497b      	ldr	r1, [pc, #492]	; (8081910 <setup+0x32c>)
 8081722:	487c      	ldr	r0, [pc, #496]	; (8081914 <setup+0x330>)
 8081724:	f003 fcac 	bl	8085080 <spark_variable>
 8081728:	2300      	movs	r3, #0
 808172a:	2202      	movs	r2, #2
 808172c:	497a      	ldr	r1, [pc, #488]	; (8081918 <setup+0x334>)
 808172e:	487b      	ldr	r0, [pc, #492]	; (808191c <setup+0x338>)
 8081730:	f003 fca6 	bl	8085080 <spark_variable>
 8081734:	2300      	movs	r3, #0
 8081736:	2202      	movs	r2, #2
 8081738:	4979      	ldr	r1, [pc, #484]	; (8081920 <setup+0x33c>)
 808173a:	487a      	ldr	r0, [pc, #488]	; (8081924 <setup+0x340>)
 808173c:	f003 fca0 	bl	8085080 <spark_variable>
  Particle.variable("delayGPSMin", delayGPSMinutes);
 8081740:	4979      	ldr	r1, [pc, #484]	; (8081928 <setup+0x344>)
 8081742:	487a      	ldr	r0, [pc, #488]	; (808192c <setup+0x348>)
 8081744:	f7fe fdf4 	bl	8080330 <_ZN10CloudClass8variableIA12_cJRiEEEbRKT_DpOT0_.isra.0>
  Particle.variable("delayACCMin", delayACCMinutes);
 8081748:	4979      	ldr	r1, [pc, #484]	; (8081930 <setup+0x34c>)
 808174a:	487a      	ldr	r0, [pc, #488]	; (8081934 <setup+0x350>)
 808174c:	f7fe fdf0 	bl	8080330 <_ZN10CloudClass8variableIA12_cJRiEEEbRKT_DpOT0_.isra.0>
  Particle.variable("delayDHTMin", delayDHTMinutes);
 8081750:	4979      	ldr	r1, [pc, #484]	; (8081938 <setup+0x354>)
 8081752:	487a      	ldr	r0, [pc, #488]	; (808193c <setup+0x358>)
 8081754:	f7fe fdec 	bl	8080330 <_ZN10CloudClass8variableIA12_cJRiEEEbRKT_DpOT0_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 8081758:	2201      	movs	r2, #1
 808175a:	2300      	movs	r3, #0
 808175c:	4978      	ldr	r1, [pc, #480]	; (8081940 <setup+0x35c>)
 808175e:	4879      	ldr	r0, [pc, #484]	; (8081944 <setup+0x360>)
 8081760:	f003 fc8e 	bl	8085080 <spark_variable>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8081764:	4b78      	ldr	r3, [pc, #480]	; (8081948 <setup+0x364>)
        };
 8081766:	a904      	add	r1, sp, #16
 8081768:	9304      	str	r3, [sp, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 808176a:	4b78      	ldr	r3, [pc, #480]	; (808194c <setup+0x368>)
 808176c:	a808      	add	r0, sp, #32
 808176e:	9307      	str	r3, [sp, #28]
	    _M_manager = &_My_handler::_M_manager;
 8081770:	4b77      	ldr	r3, [pc, #476]	; (8081950 <setup+0x36c>)
 8081772:	9306      	str	r3, [sp, #24]
 8081774:	f7ff f88b 	bl	808088e <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
 8081778:	a908      	add	r1, sp, #32
 808177a:	a810      	add	r0, sp, #64	; 0x40
 808177c:	f7ff f887 	bl	808088e <_ZNSt8functionIFvyiEEC1ERKS1_>
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081780:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
 8081782:	950e      	str	r5, [sp, #56]	; 0x38
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081784:	f7fe fc99 	bl	80800ba <_Znwj>
 8081788:	4604      	mov	r4, r0
 808178a:	b160      	cbz	r0, 80817a6 <setup+0x1c2>
	std::swap(_M_functor, __x._M_functor);
 808178c:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 808178e:	6085      	str	r5, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 8081790:	a810      	add	r0, sp, #64	; 0x40
 8081792:	f7ff ff16 	bl	80815c2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081796:	9b12      	ldr	r3, [sp, #72]	; 0x48
      __a = _GLIBCXX_MOVE(__b);
 8081798:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808179a:	60a3      	str	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
 808179c:	9212      	str	r2, [sp, #72]	; 0x48
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808179e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
 80817a0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80817a2:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 80817a4:	9213      	str	r2, [sp, #76]	; 0x4c
	    _M_invoker = &_My_handler::_M_invoke;
 80817a6:	4b6b      	ldr	r3, [pc, #428]	; (8081954 <setup+0x370>)
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler); // This may leak memory.
 80817a8:	2010      	movs	r0, #16
 80817aa:	930f      	str	r3, [sp, #60]	; 0x3c
	    _M_manager = &_My_handler::_M_manager;
 80817ac:	4b6a      	ldr	r3, [pc, #424]	; (8081958 <setup+0x374>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80817ae:	940c      	str	r4, [sp, #48]	; 0x30
	    _M_manager = &_My_handler::_M_manager;
 80817b0:	930e      	str	r3, [sp, #56]	; 0x38
 80817b2:	f7fe fc82 	bl	80800ba <_Znwj>
 80817b6:	4604      	mov	r4, r0
 80817b8:	b1a0      	cbz	r0, 80817e4 <setup+0x200>
    _Function_base() : _M_manager(nullptr) { }
 80817ba:	2300      	movs	r3, #0
 80817bc:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 80817be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      if (static_cast<bool>(__x))
 80817c0:	b133      	cbz	r3, 80817d0 <setup+0x1ec>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80817c2:	2202      	movs	r2, #2
 80817c4:	a90c      	add	r1, sp, #48	; 0x30
 80817c6:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80817c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80817ca:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80817cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80817ce:	60a3      	str	r3, [r4, #8]
        SystemEventContext context = {
 80817d0:	4b62      	ldr	r3, [pc, #392]	; (808195c <setup+0x378>)
        return system_subscribe_event(events, subscribedEventHandler, &context);
 80817d2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
        };
 80817d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
        return system_subscribe_event(events, subscribedEventHandler, &context);
 80817da:	2100      	movs	r1, #0
 80817dc:	4a60      	ldr	r2, [pc, #384]	; (8081960 <setup+0x37c>)
 80817de:	ab02      	add	r3, sp, #8
 80817e0:	f003 fb9e 	bl	8084f20 <system_subscribe_event>
    class function<_Res(_ArgTypes...)>
 80817e4:	a80c      	add	r0, sp, #48	; 0x30
 80817e6:	f7ff f809 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
 80817ea:	a810      	add	r0, sp, #64	; 0x40
 80817ec:	f7ff f806 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
 80817f0:	4c5c      	ldr	r4, [pc, #368]	; (8081964 <setup+0x380>)
 80817f2:	a808      	add	r0, sp, #32
 80817f4:	f7ff f802 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
 80817f8:	a804      	add	r0, sp, #16
 80817fa:	f7fe ffff 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 80817fe:	f003 fc57 	bl	80850b0 <spark_cloud_flag_connect>
 8081802:	68a0      	ldr	r0, [r4, #8]
 8081804:	b130      	cbz	r0, 8081814 <setup+0x230>
 8081806:	2300      	movs	r3, #0
 8081808:	2102      	movs	r1, #2
 808180a:	461a      	mov	r2, r3
 808180c:	e9cd 3300 	strd	r3, r3, [sp]
 8081810:	f003 f9c6 	bl	8084ba0 <os_timer_change>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
 8081814:	68a0      	ldr	r0, [r4, #8]
 8081816:	b140      	cbz	r0, 808182a <setup+0x246>
 8081818:	2300      	movs	r3, #0
 808181a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 808181e:	4619      	mov	r1, r3
 8081820:	e9cd 2300 	strd	r2, r3, [sp]
 8081824:	461a      	mov	r2, r3
 8081826:	f003 f9bb 	bl	8084ba0 <os_timer_change>
	delay(DHT_SAMPLE_INTERVAL); // DHT 22 minumum sampling period
 808182a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 808182e:	f005 fa81 	bl	8086d34 <delay>
	if ((transmittingData & SERIALSETUPDATA) == SERIALSETUPDATA)
 8081832:	4b35      	ldr	r3, [pc, #212]	; (8081908 <setup+0x324>)
 8081834:	681b      	ldr	r3, [r3, #0]
 8081836:	015b      	lsls	r3, r3, #5
 8081838:	d507      	bpl.n	808184a <setup+0x266>
		Serial.println("End of setup() function");
 808183a:	f005 ffbf 	bl	80877bc <_Z16_fetch_usbserialv>
 808183e:	494a      	ldr	r1, [pc, #296]	; (8081968 <setup+0x384>)
}
 8081840:	b015      	add	sp, #84	; 0x54
 8081842:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		Serial.println("End of setup() function");
 8081846:	f004 b86c 	b.w	8085922 <_ZN5Print7printlnEPKc>
}
 808184a:	b015      	add	sp, #84	; 0x54
 808184c:	bd30      	pop	{r4, r5, pc}
 808184e:	bf00      	nop
 8081850:	2000021c 	.word	0x2000021c
 8081854:	20000188 	.word	0x20000188
 8081858:	20000278 	.word	0x20000278
 808185c:	0808afa1 	.word	0x0808afa1
 8081860:	2000015c 	.word	0x2000015c
 8081864:	2000017c 	.word	0x2000017c
 8081868:	2000014c 	.word	0x2000014c
 808186c:	20000238 	.word	0x20000238
 8081870:	2000027c 	.word	0x2000027c
 8081874:	08080189 	.word	0x08080189
 8081878:	0808b521 	.word	0x0808b521
 808187c:	080801f9 	.word	0x080801f9
 8081880:	08080255 	.word	0x08080255
 8081884:	08080241 	.word	0x08080241
 8081888:	0808b590 	.word	0x0808b590
 808188c:	080870fb 	.word	0x080870fb
 8081890:	08080b91 	.word	0x08080b91
 8081894:	0808b482 	.word	0x0808b482
 8081898:	08080139 	.word	0x08080139
 808189c:	0808b489 	.word	0x0808b489
 80818a0:	0808014d 	.word	0x0808014d
 80818a4:	0808b493 	.word	0x0808b493
 80818a8:	08080161 	.word	0x08080161
 80818ac:	0808b49d 	.word	0x0808b49d
 80818b0:	08080175 	.word	0x08080175
 80818b4:	0808b4a7 	.word	0x0808b4a7
 80818b8:	08080715 	.word	0x08080715
 80818bc:	0808b4b1 	.word	0x0808b4b1
 80818c0:	0808019d 	.word	0x0808019d
 80818c4:	0808b4b9 	.word	0x0808b4b9
 80818c8:	08080381 	.word	0x08080381
 80818cc:	0808b4c2 	.word	0x0808b4c2
 80818d0:	08081215 	.word	0x08081215
 80818d4:	0808b4ca 	.word	0x0808b4ca
 80818d8:	08083f75 	.word	0x08083f75
 80818dc:	0808b4d4 	.word	0x0808b4d4
 80818e0:	08083ffd 	.word	0x08083ffd
 80818e4:	0808b4e0 	.word	0x0808b4e0
 80818e8:	080840c5 	.word	0x080840c5
 80818ec:	0808b4ed 	.word	0x0808b4ed
 80818f0:	0808414d 	.word	0x0808414d
 80818f4:	0808b4f8 	.word	0x0808b4f8
 80818f8:	20000011 	.word	0x20000011
 80818fc:	0808b504 	.word	0x0808b504
 8081900:	20000000 	.word	0x20000000
 8081904:	0808b50e 	.word	0x0808b50e
 8081908:	20000014 	.word	0x20000014
 808190c:	0808b51a 	.word	0x0808b51a
 8081910:	200001f4 	.word	0x200001f4
 8081914:	0808b527 	.word	0x0808b527
 8081918:	200001ec 	.word	0x200001ec
 808191c:	0808b532 	.word	0x0808b532
 8081920:	200001f0 	.word	0x200001f0
 8081924:	0808b53d 	.word	0x0808b53d
 8081928:	2000000c 	.word	0x2000000c
 808192c:	0808b548 	.word	0x0808b548
 8081930:	20000004 	.word	0x20000004
 8081934:	0808b554 	.word	0x0808b554
 8081938:	20000008 	.word	0x20000008
 808193c:	0808b560 	.word	0x0808b560
 8081940:	20000010 	.word	0x20000010
 8081944:	0808b56c 	.word	0x0808b56c
 8081948:	080807c9 	.word	0x080807c9
 808194c:	08080285 	.word	0x08080285
 8081950:	08080271 	.word	0x08080271
 8081954:	080802a7 	.word	0x080802a7
 8081958:	080808ad 	.word	0x080808ad
 808195c:	00080001 	.word	0x00080001
 8081960:	08080111 	.word	0x08080111
 8081964:	20000298 	.word	0x20000298
 8081968:	0808b578 	.word	0x0808b578

0808196c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 808196c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 808196e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081970:	4604      	mov	r4, r0
 8081972:	460d      	mov	r5, r1
 8081974:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 8081976:	d916      	bls.n	80819a6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 8081978:	4290      	cmp	r0, r2
 808197a:	d215      	bcs.n	80819a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 808197c:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 8081980:	1a75      	subs	r5, r6, r1
 8081982:	f1a1 0714 	sub.w	r7, r1, #20
 8081986:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 8081988:	42b7      	cmp	r7, r6
 808198a:	d01c      	beq.n	80819c6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 808198c:	b12c      	cbz	r4, 808199a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 808198e:	4631      	mov	r1, r6
 8081990:	4620      	mov	r0, r4
 8081992:	f003 fe75 	bl	8085680 <_ZN6StringC1EOS_>
 8081996:	7c33      	ldrb	r3, [r6, #16]
 8081998:	7423      	strb	r3, [r4, #16]
 808199a:	4630      	mov	r0, r6
 808199c:	f003 fdf6 	bl	808558c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 80819a0:	3e14      	subs	r6, #20
 80819a2:	3c14      	subs	r4, #20
 80819a4:	e7f0      	b.n	8081988 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 80819a6:	d00e      	beq.n	80819c6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 80819a8:	42b5      	cmp	r5, r6
 80819aa:	d00c      	beq.n	80819c6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 80819ac:	b12c      	cbz	r4, 80819ba <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 80819ae:	4629      	mov	r1, r5
 80819b0:	4620      	mov	r0, r4
 80819b2:	f003 fe65 	bl	8085680 <_ZN6StringC1EOS_>
 80819b6:	7c2b      	ldrb	r3, [r5, #16]
 80819b8:	7423      	strb	r3, [r4, #16]
 80819ba:	4628      	mov	r0, r5
 80819bc:	f003 fde6 	bl	808558c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 80819c0:	3514      	adds	r5, #20
 80819c2:	3414      	adds	r4, #20
 80819c4:	e7f0      	b.n	80819a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 80819c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080819c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 80819c8:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80819ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 80819ce:	e9c0 3300 	strd	r3, r3, [r0]
 80819d2:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80819d4:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80819d6:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80819d8:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80819da:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80819dc:	dd24      	ble.n	8081a28 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 80819de:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 80819e2:	fb08 f007 	mul.w	r0, r8, r7
 80819e6:	f003 fba3 	bl	8085130 <malloc>
            if (!d) {
 80819ea:	4605      	mov	r5, r0
 80819ec:	b1e0      	cbz	r0, 8081a28 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 80819ee:	e9d4 1200 	ldrd	r1, r2, [r4]
 80819f2:	fb08 1202 	mla	r2, r8, r2, r1
 80819f6:	f7ff ffb9 	bl	808196c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 80819fa:	6820      	ldr	r0, [r4, #0]
 80819fc:	f003 fba0 	bl	8085140 <free>
        data_ = d;
 8081a00:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 8081a02:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 8081a04:	e9d6 7300 	ldrd	r7, r3, [r6]
 8081a08:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 8081a0c:	45b8      	cmp	r8, r7
 8081a0e:	d009      	beq.n	8081a24 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 8081a10:	4639      	mov	r1, r7
 8081a12:	4628      	mov	r0, r5
 8081a14:	f003 fe4e 	bl	80856b4 <_ZN6StringC1ERKS_>
 8081a18:	7c3b      	ldrb	r3, [r7, #16]
 8081a1a:	3514      	adds	r5, #20
 8081a1c:	f805 3c04 	strb.w	r3, [r5, #-4]
 8081a20:	3714      	adds	r7, #20
 8081a22:	e7f3      	b.n	8081a0c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 8081a24:	6873      	ldr	r3, [r6, #4]
 8081a26:	6063      	str	r3, [r4, #4]
}
 8081a28:	4620      	mov	r0, r4
 8081a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08081a30 <_GLOBAL__sub_I_logHandler>:
}
 8081a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        val_(val) {
 8081a34:	f04f 0801 	mov.w	r8, #1
        capacity_(0) {
 8081a38:	2400      	movs	r4, #0
 8081a3a:	4b75      	ldr	r3, [pc, #468]	; (8081c10 <_GLOBAL__sub_I_logHandler+0x1e0>)
 8081a3c:	b090      	sub	sp, #64	; 0x40
 8081a3e:	f883 8000 	strb.w	r8, [r3]
 8081a42:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8081a46:	9405      	str	r4, [sp, #20]
            StreamLogHandler(Serial, level, filters) {
 8081a48:	f005 feb8 	bl	80877bc <_Z16_fetch_usbserialv>
        filter_(level, filters) {
 8081a4c:	4d71      	ldr	r5, [pc, #452]	; (8081c14 <_GLOBAL__sub_I_logHandler+0x1e4>)
 8081a4e:	4606      	mov	r6, r0
 8081a50:	462f      	mov	r7, r5
 8081a52:	a903      	add	r1, sp, #12
 8081a54:	a806      	add	r0, sp, #24
 8081a56:	f7ff ffb7 	bl	80819c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
 8081a5a:	a906      	add	r1, sp, #24
 8081a5c:	a809      	add	r0, sp, #36	; 0x24
 8081a5e:	f7ff ffb3 	bl	80819c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 8081a62:	4b6d      	ldr	r3, [pc, #436]	; (8081c18 <_GLOBAL__sub_I_logHandler+0x1e8>)
 8081a64:	a909      	add	r1, sp, #36	; 0x24
 8081a66:	f847 3b04 	str.w	r3, [r7], #4
 8081a6a:	a80c      	add	r0, sp, #48	; 0x30
 8081a6c:	f7ff ffac 	bl	80819c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 8081a70:	aa0c      	add	r2, sp, #48	; 0x30
 8081a72:	211e      	movs	r1, #30
 8081a74:	4638      	mov	r0, r7
 8081a76:	f004 fd34 	bl	80864e2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 8081a7a:	a80c      	add	r0, sp, #48	; 0x30
 8081a7c:	f7ff fd8e 	bl	808159c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 8081a80:	a809      	add	r0, sp, #36	; 0x24
 8081a82:	f7ff fd8b 	bl	808159c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 8081a86:	4b65      	ldr	r3, [pc, #404]	; (8081c1c <_GLOBAL__sub_I_logHandler+0x1ec>)
 8081a88:	622e      	str	r6, [r5, #32]
 8081a8a:	602b      	str	r3, [r5, #0]
 8081a8c:	a806      	add	r0, sp, #24
 8081a8e:	f7ff fd85 	bl	808159c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 8081a92:	4b63      	ldr	r3, [pc, #396]	; (8081c20 <_GLOBAL__sub_I_logHandler+0x1f0>)
SerialLogHandler logHandler;
 8081a94:	4e63      	ldr	r6, [pc, #396]	; (8081c24 <_GLOBAL__sub_I_logHandler+0x1f4>)
 8081a96:	602b      	str	r3, [r5, #0]
        Serial.begin();
 8081a98:	f005 fe90 	bl	80877bc <_Z16_fetch_usbserialv>
 8081a9c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8081aa0:	f005 fe6e 	bl	8087780 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 8081aa4:	f004 f9e0 	bl	8085e68 <_ZN5spark10LogManager8instanceEv>
 8081aa8:	4629      	mov	r1, r5
 8081aaa:	f004 fbf9 	bl	80862a0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
 8081aae:	a803      	add	r0, sp, #12
 8081ab0:	f7ff fd74 	bl	808159c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 8081ab4:	4632      	mov	r2, r6
 8081ab6:	495c      	ldr	r1, [pc, #368]	; (8081c28 <_GLOBAL__sub_I_logHandler+0x1f8>)
 8081ab8:	4628      	mov	r0, r5
 8081aba:	f006 fcf3 	bl	80884a4 <__aeabi_atexit>
STARTUP(startupMacro());
 8081abe:	f7fe fedb 	bl	8080878 <_Z12startupMacrov>
SYSTEM_THREAD(ENABLED);
 8081ac2:	4621      	mov	r1, r4
 8081ac4:	4640      	mov	r0, r8
 8081ac6:	f003 fa33 	bl	8084f30 <system_thread_set_state>
              error_(SYSTEM_ERROR_NONE) {
 8081aca:	4d58      	ldr	r5, [pc, #352]	; (8081c2c <_GLOBAL__sub_I_logHandler+0x1fc>)
    SleepResult() {}
 8081acc:	4b58      	ldr	r3, [pc, #352]	; (8081c30 <_GLOBAL__sub_I_logHandler+0x200>)
              error_(SYSTEM_ERROR_NONE) {
 8081ace:	e9c5 4400 	strd	r4, r4, [r5]
    SleepResult() {}
 8081ad2:	60ab      	str	r3, [r5, #8]
        set_system_mode(mode);
 8081ad4:	2002      	movs	r0, #2
 8081ad6:	f003 fa0b 	bl	8084ef0 <set_system_mode>
SYSTEM_MODE(SEMI_AUTOMATIC);
 8081ada:	4628      	mov	r0, r5
ConnectionEvents connectionEvents("connEventStats");
 8081adc:	4d55      	ldr	r5, [pc, #340]	; (8081c34 <_GLOBAL__sub_I_logHandler+0x204>)
SYSTEM_MODE(SEMI_AUTOMATIC);
 8081ade:	4632      	mov	r2, r6
 8081ae0:	4955      	ldr	r1, [pc, #340]	; (8081c38 <_GLOBAL__sub_I_logHandler+0x208>)
 8081ae2:	f006 fcdf 	bl	80884a4 <__aeabi_atexit>
ConnectionEvents connectionEvents("connEventStats");
 8081ae6:	4628      	mov	r0, r5
 8081ae8:	4954      	ldr	r1, [pc, #336]	; (8081c3c <_GLOBAL__sub_I_logHandler+0x20c>)
 8081aea:	f000 fff1 	bl	8082ad0 <_ZN16ConnectionEventsC1EPKc>
 8081aee:	4632      	mov	r2, r6
 8081af0:	4953      	ldr	r1, [pc, #332]	; (8081c40 <_GLOBAL__sub_I_logHandler+0x210>)
 8081af2:	4628      	mov	r0, r5
 8081af4:	f006 fcd6 	bl	80884a4 <__aeabi_atexit>
SessionCheck sessionCheck(3600);
 8081af8:	4d52      	ldr	r5, [pc, #328]	; (8081c44 <_GLOBAL__sub_I_logHandler+0x214>)
 8081afa:	4b53      	ldr	r3, [pc, #332]	; (8081c48 <_GLOBAL__sub_I_logHandler+0x218>)
 8081afc:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8081b00:	9300      	str	r3, [sp, #0]
 8081b02:	4628      	mov	r0, r5
 8081b04:	2300      	movs	r3, #0
 8081b06:	f000 fe0b 	bl	8082720 <_ZN12SessionCheckC1ExPKc>
 8081b0a:	4628      	mov	r0, r5
ConnectionCheck connectionCheck;
 8081b0c:	4d4f      	ldr	r5, [pc, #316]	; (8081c4c <_GLOBAL__sub_I_logHandler+0x21c>)
SessionCheck sessionCheck(3600);
 8081b0e:	4632      	mov	r2, r6
 8081b10:	494f      	ldr	r1, [pc, #316]	; (8081c50 <_GLOBAL__sub_I_logHandler+0x220>)
 8081b12:	f006 fcc7 	bl	80884a4 <__aeabi_atexit>
ConnectionCheck connectionCheck;
 8081b16:	4628      	mov	r0, r5
 8081b18:	f000 fb68 	bl	80821ec <_ZN15ConnectionCheckC1Ev>
 8081b1c:	4628      	mov	r0, r5
Tester tester("testerFn", D2);
 8081b1e:	4d4d      	ldr	r5, [pc, #308]	; (8081c54 <_GLOBAL__sub_I_logHandler+0x224>)
ConnectionCheck connectionCheck;
 8081b20:	4632      	mov	r2, r6
 8081b22:	494d      	ldr	r1, [pc, #308]	; (8081c58 <_GLOBAL__sub_I_logHandler+0x228>)
 8081b24:	f006 fcbe 	bl	80884a4 <__aeabi_atexit>
Tester tester("testerFn", D2);
 8081b28:	2202      	movs	r2, #2
 8081b2a:	4628      	mov	r0, r5
 8081b2c:	494b      	ldr	r1, [pc, #300]	; (8081c5c <_GLOBAL__sub_I_logHandler+0x22c>)
 8081b2e:	f000 f987 	bl	8081e40 <_ZN6TesterC1EPKci>
 8081b32:	4628      	mov	r0, r5
BatteryCheck batteryCheck(15.0, 3600);
 8081b34:	4d4a      	ldr	r5, [pc, #296]	; (8081c60 <_GLOBAL__sub_I_logHandler+0x230>)
Tester tester("testerFn", D2);
 8081b36:	4632      	mov	r2, r6
 8081b38:	494a      	ldr	r1, [pc, #296]	; (8081c64 <_GLOBAL__sub_I_logHandler+0x234>)
 8081b3a:	f006 fcb3 	bl	80884a4 <__aeabi_atexit>
BatteryCheck batteryCheck(15.0, 3600);
 8081b3e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8081b42:	4628      	mov	r0, r5
 8081b44:	4948      	ldr	r1, [pc, #288]	; (8081c68 <_GLOBAL__sub_I_logHandler+0x238>)
 8081b46:	f000 f8bf 	bl	8081cc8 <_ZN12BatteryCheckC1Efl>
 8081b4a:	4628      	mov	r0, r5
AppWatchdogWrapper watchdog(APP_WATCHDOG_TIMEOUT);
 8081b4c:	4d47      	ldr	r5, [pc, #284]	; (8081c6c <_GLOBAL__sub_I_logHandler+0x23c>)
BatteryCheck batteryCheck(15.0, 3600);
 8081b4e:	4632      	mov	r2, r6
 8081b50:	4947      	ldr	r1, [pc, #284]	; (8081c70 <_GLOBAL__sub_I_logHandler+0x240>)
 8081b52:	f006 fca7 	bl	80884a4 <__aeabi_atexit>
AppWatchdogWrapper watchdog(APP_WATCHDOG_TIMEOUT);
 8081b56:	f64e 2160 	movw	r1, #60000	; 0xea60
 8081b5a:	4628      	mov	r0, r5
 8081b5c:	f000 fd0a 	bl	8082574 <_ZN18AppWatchdogWrapperC1Em>
 8081b60:	4632      	mov	r2, r6
 8081b62:	4944      	ldr	r1, [pc, #272]	; (8081c74 <_GLOBAL__sub_I_logHandler+0x244>)
 8081b64:	4628      	mov	r0, r5
FuelGauge fuel = FuelGauge();
 8081b66:	4d44      	ldr	r5, [pc, #272]	; (8081c78 <_GLOBAL__sub_I_logHandler+0x248>)
AppWatchdogWrapper watchdog(APP_WATCHDOG_TIMEOUT);
 8081b68:	f006 fc9c 	bl	80884a4 <__aeabi_atexit>
AssetTracker2 t = AssetTracker2();
 8081b6c:	4843      	ldr	r0, [pc, #268]	; (8081c7c <_GLOBAL__sub_I_logHandler+0x24c>)
 8081b6e:	f001 f8e3 	bl	8082d38 <_ZN13AssetTracker2C1Ev>
FuelGauge fuel = FuelGauge();
 8081b72:	4621      	mov	r1, r4
 8081b74:	4628      	mov	r0, r5
 8081b76:	f005 f90d 	bl	8086d94 <_ZN9FuelGaugeC1Eb>
 8081b7a:	4628      	mov	r0, r5
PowerCheck pc = PowerCheck();
 8081b7c:	4d40      	ldr	r5, [pc, #256]	; (8081c80 <_GLOBAL__sub_I_logHandler+0x250>)
FuelGauge fuel = FuelGauge();
 8081b7e:	4632      	mov	r2, r6
 8081b80:	4940      	ldr	r1, [pc, #256]	; (8081c84 <_GLOBAL__sub_I_logHandler+0x254>)
 8081b82:	f006 fc8f 	bl	80884a4 <__aeabi_atexit>
PowerCheck pc = PowerCheck();
 8081b86:	4628      	mov	r0, r5
 8081b88:	f001 f894 	bl	8082cb4 <_ZN10PowerCheckC1Ev>
 8081b8c:	4632      	mov	r2, r6
 8081b8e:	4628      	mov	r0, r5
 8081b90:	493d      	ldr	r1, [pc, #244]	; (8081c88 <_GLOBAL__sub_I_logHandler+0x258>)
String pubAccel = "";
 8081b92:	4d3e      	ldr	r5, [pc, #248]	; (8081c8c <_GLOBAL__sub_I_logHandler+0x25c>)
PowerCheck pc = PowerCheck();
 8081b94:	f006 fc86 	bl	80884a4 <__aeabi_atexit>
PietteTech_DHT dht(DHTPIN, DHTTYPE, NULL);
 8081b98:	4623      	mov	r3, r4
 8081b9a:	2216      	movs	r2, #22
 8081b9c:	2103      	movs	r1, #3
 8081b9e:	483c      	ldr	r0, [pc, #240]	; (8081c90 <_GLOBAL__sub_I_logHandler+0x260>)
 8081ba0:	f002 fbf7 	bl	8084392 <_ZN14PietteTech_DHTC1EhhPFvvE>
String pubAccel = "";
 8081ba4:	4628      	mov	r0, r5
 8081ba6:	493b      	ldr	r1, [pc, #236]	; (8081c94 <_GLOBAL__sub_I_logHandler+0x264>)
 8081ba8:	f003 fd3a 	bl	8085620 <_ZN6StringC1EPK19__FlashStringHelper>
 8081bac:	4632      	mov	r2, r6
 8081bae:	4628      	mov	r0, r5
 8081bb0:	4939      	ldr	r1, [pc, #228]	; (8081c98 <_GLOBAL__sub_I_logHandler+0x268>)
 8081bb2:	f006 fc77 	bl	80884a4 <__aeabi_atexit>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8081bb6:	4b39      	ldr	r3, [pc, #228]	; (8081c9c <_GLOBAL__sub_I_logHandler+0x26c>)
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
 8081bb8:	4d39      	ldr	r5, [pc, #228]	; (8081ca0 <_GLOBAL__sub_I_logHandler+0x270>)
 8081bba:	930c      	str	r3, [sp, #48]	; 0x30
	    _M_invoker = &_My_handler::_M_invoke;
 8081bbc:	4b39      	ldr	r3, [pc, #228]	; (8081ca4 <_GLOBAL__sub_I_logHandler+0x274>)
	std::swap(_M_functor, __x._M_functor);
 8081bbe:	f105 010c 	add.w	r1, r5, #12
	    _M_invoker = &_My_handler::_M_invoke;
 8081bc2:	930f      	str	r3, [sp, #60]	; 0x3c
	    _M_manager = &_My_handler::_M_manager;
 8081bc4:	4b38      	ldr	r3, [pc, #224]	; (8081ca8 <_GLOBAL__sub_I_logHandler+0x278>)
	std::swap(_M_functor, __x._M_functor);
 8081bc6:	a80c      	add	r0, sp, #48	; 0x30
	    _M_manager = &_My_handler::_M_manager;
 8081bc8:	930e      	str	r3, [sp, #56]	; 0x38
 8081bca:	4b38      	ldr	r3, [pc, #224]	; (8081cac <_GLOBAL__sub_I_logHandler+0x27c>)
 8081bcc:	712c      	strb	r4, [r5, #4]
 8081bce:	602b      	str	r3, [r5, #0]
 8081bd0:	60ac      	str	r4, [r5, #8]
    _Function_base() : _M_manager(nullptr) { }
 8081bd2:	616c      	str	r4, [r5, #20]
	std::swap(_M_functor, __x._M_functor);
 8081bd4:	f7ff fcf5 	bl	80815c2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
 8081bd8:	696a      	ldr	r2, [r5, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081bda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      __a = _GLIBCXX_MOVE(__b);
 8081bdc:	920e      	str	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
 8081bde:	616b      	str	r3, [r5, #20]
      __a = _GLIBCXX_MOVE(__b);
 8081be0:	69aa      	ldr	r2, [r5, #24]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081be2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
 8081be4:	2132      	movs	r1, #50	; 0x32
      __b = _GLIBCXX_MOVE(__tmp);
 8081be6:	61ab      	str	r3, [r5, #24]
      __a = _GLIBCXX_MOVE(__b);
 8081be8:	920f      	str	r2, [sp, #60]	; 0x3c
 8081bea:	462b      	mov	r3, r5
 8081bec:	4a30      	ldr	r2, [pc, #192]	; (8081cb0 <_GLOBAL__sub_I_logHandler+0x280>)
 8081bee:	e9cd 4400 	strd	r4, r4, [sp]
 8081bf2:	f105 0008 	add.w	r0, r5, #8
 8081bf6:	f002 ffbb 	bl	8084b70 <os_timer_create>
    class function<_Res(_ArgTypes...)>
 8081bfa:	a80c      	add	r0, sp, #48	; 0x30
 8081bfc:	f7fe fdfe 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
Timer timer(50, callGPS);
 8081c00:	4632      	mov	r2, r6
 8081c02:	4628      	mov	r0, r5
 8081c04:	492b      	ldr	r1, [pc, #172]	; (8081cb4 <_GLOBAL__sub_I_logHandler+0x284>)
}
 8081c06:	b010      	add	sp, #64	; 0x40
 8081c08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
Timer timer(50, callGPS);
 8081c0c:	f006 bc4a 	b.w	80884a4 <__aeabi_atexit>
 8081c10:	20000140 	.word	0x20000140
 8081c14:	200001f8 	.word	0x200001f8
 8081c18:	0808b5dc 	.word	0x0808b5dc
 8081c1c:	0808bbdc 	.word	0x0808bbdc
 8081c20:	0808b5f4 	.word	0x0808b5f4
 8081c24:	20000130 	.word	0x20000130
 8081c28:	08080339 	.word	0x08080339
 8081c2c:	20000134 	.word	0x20000134
 8081c30:	ffff0000 	.word	0xffff0000
 8081c34:	2000017c 	.word	0x2000017c
 8081c38:	080801ad 	.word	0x080801ad
 8081c3c:	0808b59a 	.word	0x0808b59a
 8081c40:	080829d9 	.word	0x080829d9
 8081c44:	20000238 	.word	0x20000238
 8081c48:	0808b5a9 	.word	0x0808b5a9
 8081c4c:	2000015c 	.word	0x2000015c
 8081c50:	0808268d 	.word	0x0808268d
 8081c54:	2000027c 	.word	0x2000027c
 8081c58:	080821ad 	.word	0x080821ad
 8081c5c:	0808b5b6 	.word	0x0808b5b6
 8081c60:	2000014c 	.word	0x2000014c
 8081c64:	08081dad 	.word	0x08081dad
 8081c68:	41700000 	.word	0x41700000
 8081c6c:	200002b4 	.word	0x200002b4
 8081c70:	08081cb9 	.word	0x08081cb9
 8081c74:	080824a9 	.word	0x080824a9
 8081c78:	200001e4 	.word	0x200001e4
 8081c7c:	20000278 	.word	0x20000278
 8081c80:	2000021c 	.word	0x2000021c
 8081c84:	08086db3 	.word	0x08086db3
 8081c88:	08082c0d 	.word	0x08082c0d
 8081c8c:	20000228 	.word	0x20000228
 8081c90:	20000188 	.word	0x20000188
 8081c94:	0808b6b8 	.word	0x0808b6b8
 8081c98:	0808558d 	.word	0x0808558d
 8081c9c:	080800f9 	.word	0x080800f9
 8081ca0:	20000298 	.word	0x20000298
 8081ca4:	080802a3 	.word	0x080802a3
 8081ca8:	0808028f 	.word	0x0808028f
 8081cac:	0808b5c8 	.word	0x0808b5c8
 8081cb0:	080801bd 	.word	0x080801bd
 8081cb4:	08080811 	.word	0x08080811

08081cb8 <_ZN12BatteryCheckD1Ev>:


}
BatteryCheck::~BatteryCheck() {

}
 8081cb8:	4770      	bx	lr

08081cba <_ZN12BatteryCheckD0Ev>:
BatteryCheck::~BatteryCheck() {
 8081cba:	b510      	push	{r4, lr}
 8081cbc:	4604      	mov	r4, r0
}
 8081cbe:	2110      	movs	r1, #16
 8081cc0:	f006 fbf5 	bl	80884ae <_ZdlPvj>
 8081cc4:	4620      	mov	r0, r4
 8081cc6:	bd10      	pop	{r4, pc}

08081cc8 <_ZN12BatteryCheckC1Efl>:
BatteryCheck::BatteryCheck(float minimumSoC, long sleepTimeSecs) : minimumSoC(minimumSoC), sleepTimeSecs(sleepTimeSecs) {
 8081cc8:	6082      	str	r2, [r0, #8]
 8081cca:	2200      	movs	r2, #0
 8081ccc:	b510      	push	{r4, lr}
 8081cce:	4c02      	ldr	r4, [pc, #8]	; (8081cd8 <_ZN12BatteryCheckC1Efl+0x10>)
 8081cd0:	6041      	str	r1, [r0, #4]
 8081cd2:	6004      	str	r4, [r0, #0]
 8081cd4:	60c2      	str	r2, [r0, #12]
}
 8081cd6:	bd10      	pop	{r4, pc}
 8081cd8:	0808b60c 	.word	0x0808b60c

08081cdc <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv>:
		lastCheckMs = millis();
		checkAndSleepIfNecessary();
	}
}

void BatteryCheck::checkAndSleepIfNecessary() {
 8081cdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8081cde:	4604      	mov	r4, r0
	float soc = fuel.getSoC();
 8081ce0:	4810      	ldr	r0, [pc, #64]	; (8081d24 <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv+0x48>)
 8081ce2:	f005 f8c9 	bl	8086e78 <_ZN9FuelGauge6getSoCEv>

	// There is an SoC, it's less than the minimum, and there's no external power (USB or VIN)
	if (soc != 0.0 && soc < minimumSoC && !pmic.isPowerGood()) {
 8081ce6:	2100      	movs	r1, #0
	float soc = fuel.getSoC();
 8081ce8:	4605      	mov	r5, r0
	if (soc != 0.0 && soc < minimumSoC && !pmic.isPowerGood()) {
 8081cea:	f008 fed9 	bl	808aaa0 <__aeabi_fcmpeq>
 8081cee:	b9b0      	cbnz	r0, 8081d1e <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv+0x42>
 8081cf0:	4629      	mov	r1, r5
 8081cf2:	6860      	ldr	r0, [r4, #4]
 8081cf4:	f008 fefc 	bl	808aaf0 <__aeabi_fcmpgt>
 8081cf8:	b188      	cbz	r0, 8081d1e <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv+0x42>
 8081cfa:	480b      	ldr	r0, [pc, #44]	; (8081d28 <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv+0x4c>)
 8081cfc:	f003 fac5 	bl	808528a <_ZN4PMIC11isPowerGoodEv>
 8081d00:	b968      	cbnz	r0, 8081d1e <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv+0x42>
		ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_LOW_BATTERY_SLEEP, static_cast<int>(soc));
 8081d02:	4628      	mov	r0, r5
 8081d04:	f008 ff14 	bl	808ab30 <__aeabi_f2iz>
 8081d08:	4601      	mov	r1, r0
 8081d0a:	200d      	movs	r0, #13
 8081d0c:	f000 ff6c 	bl	8082be8 <_ZN16ConnectionEvents8addEventEii>

		System.sleep(SLEEP_MODE_DEEP, sleepTimeSecs);
 8081d10:	4b06      	ldr	r3, [pc, #24]	; (8081d2c <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv+0x50>)
 8081d12:	2101      	movs	r1, #1
 8081d14:	4668      	mov	r0, sp
 8081d16:	681b      	ldr	r3, [r3, #0]
 8081d18:	68a2      	ldr	r2, [r4, #8]
 8081d1a:	f003 fba5 	bl	8085468 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
	}

}
 8081d1e:	b003      	add	sp, #12
 8081d20:	bd30      	pop	{r4, r5, pc}
 8081d22:	bf00      	nop
 8081d24:	200002d4 	.word	0x200002d4
 8081d28:	200002dc 	.word	0x200002dc
 8081d2c:	200002d0 	.word	0x200002d0

08081d30 <_ZN12BatteryCheck5setupEv>:
	checkAndSleepIfNecessary();
 8081d30:	f7ff bfd4 	b.w	8081cdc <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv>

08081d34 <_ZN12BatteryCheck4loopEv>:
void BatteryCheck::loop() {
 8081d34:	b510      	push	{r4, lr}
 8081d36:	4604      	mov	r4, r0
 8081d38:	f002 fec2 	bl	8084ac0 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastCheckMs >= CHECK_PERIOD_MS) {
 8081d3c:	68e3      	ldr	r3, [r4, #12]
 8081d3e:	1ac0      	subs	r0, r0, r3
 8081d40:	f64e 235f 	movw	r3, #59999	; 0xea5f
 8081d44:	4298      	cmp	r0, r3
 8081d46:	d907      	bls.n	8081d58 <_ZN12BatteryCheck4loopEv+0x24>
 8081d48:	f002 feba 	bl	8084ac0 <HAL_Timer_Get_Milli_Seconds>
		lastCheckMs = millis();
 8081d4c:	60e0      	str	r0, [r4, #12]
		checkAndSleepIfNecessary();
 8081d4e:	4620      	mov	r0, r4
}
 8081d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		checkAndSleepIfNecessary();
 8081d54:	f7ff bfc2 	b.w	8081cdc <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv>
}
 8081d58:	bd10      	pop	{r4, pc}
	...

08081d5c <_GLOBAL__sub_I__ZN12BatteryCheckC2Efl>:
}
 8081d5c:	b570      	push	{r4, r5, r6, lr}
 8081d5e:	2400      	movs	r4, #0
 8081d60:	4b0c      	ldr	r3, [pc, #48]	; (8081d94 <_GLOBAL__sub_I__ZN12BatteryCheckC2Efl+0x38>)
static FuelGauge fuel;
 8081d62:	4d0d      	ldr	r5, [pc, #52]	; (8081d98 <_GLOBAL__sub_I__ZN12BatteryCheckC2Efl+0x3c>)
 8081d64:	601c      	str	r4, [r3, #0]
 8081d66:	4621      	mov	r1, r4
 8081d68:	4e0c      	ldr	r6, [pc, #48]	; (8081d9c <_GLOBAL__sub_I__ZN12BatteryCheckC2Efl+0x40>)
 8081d6a:	4628      	mov	r0, r5
 8081d6c:	f005 f812 	bl	8086d94 <_ZN9FuelGaugeC1Eb>
 8081d70:	4628      	mov	r0, r5
static PMIC pmic;
 8081d72:	4d0b      	ldr	r5, [pc, #44]	; (8081da0 <_GLOBAL__sub_I__ZN12BatteryCheckC2Efl+0x44>)
static FuelGauge fuel;
 8081d74:	4632      	mov	r2, r6
 8081d76:	490b      	ldr	r1, [pc, #44]	; (8081da4 <_GLOBAL__sub_I__ZN12BatteryCheckC2Efl+0x48>)
 8081d78:	f006 fb94 	bl	80884a4 <__aeabi_atexit>
static PMIC pmic;
 8081d7c:	4621      	mov	r1, r4
 8081d7e:	4628      	mov	r0, r5
 8081d80:	f003 fa35 	bl	80851ee <_ZN4PMICC1Eb>
 8081d84:	4632      	mov	r2, r6
 8081d86:	4628      	mov	r0, r5
}
 8081d88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
static PMIC pmic;
 8081d8c:	4906      	ldr	r1, [pc, #24]	; (8081da8 <_GLOBAL__sub_I__ZN12BatteryCheckC2Efl+0x4c>)
 8081d8e:	f006 bb89 	b.w	80884a4 <__aeabi_atexit>
 8081d92:	bf00      	nop
 8081d94:	200002d0 	.word	0x200002d0
 8081d98:	200002d4 	.word	0x200002d4
 8081d9c:	20000130 	.word	0x20000130
 8081da0:	200002dc 	.word	0x200002dc
 8081da4:	08086db3 	.word	0x08086db3
 8081da8:	0808520d 	.word	0x0808520d

08081dac <_ZN6TesterD1Ev>:
}


Tester::~Tester() {

}
 8081dac:	4770      	bx	lr

08081dae <_ZN6TesterD0Ev>:
Tester::~Tester() {
 8081dae:	b510      	push	{r4, lr}
 8081db0:	4604      	mov	r4, r0
}
 8081db2:	211c      	movs	r1, #28
 8081db4:	f006 fb7b 	bl	80884ae <_ZdlPvj>
 8081db8:	4620      	mov	r0, r4
 8081dba:	bd10      	pop	{r4, pc}

08081dbc <_ZN6Tester15functionHandlerE6String>:

// This is the function registered with Particle.function(). Just copy the data and return so
// the successful response can be returned to the caller. Since we do things like reset, or
// enter an infinite loop, or sleep, doing this right from the callback causes the caller to
// time out because the response will never be received.
int Tester::functionHandler(String argStr) {
 8081dbc:	b510      	push	{r4, lr}
 8081dbe:	4604      	mov	r4, r0
	// Process this in loop so the function won't time out
	functionData = strdup(argStr.c_str());
 8081dc0:	6808      	ldr	r0, [r1, #0]
 8081dc2:	f008 ff9f 	bl	808ad04 <strdup>
 8081dc6:	60e0      	str	r0, [r4, #12]

	return 0;
}
 8081dc8:	2000      	movs	r0, #0
 8081dca:	bd10      	pop	{r4, pc}

08081dcc <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM6TesterFiS0_EPS3_St12_PlaceholderILi1EEEEE9_M_invokeERKSt9_Any_dataOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8081dcc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	    return __source._M_access<_Functor*>();
 8081dce:	6802      	ldr	r2, [r0, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
 8081dd0:	6853      	ldr	r3, [r2, #4]
 8081dd2:	6890      	ldr	r0, [r2, #8]
 8081dd4:	105e      	asrs	r6, r3, #1
 8081dd6:	eb00 0563 	add.w	r5, r0, r3, asr #1
 8081dda:	07db      	lsls	r3, r3, #31
 8081ddc:	6814      	ldr	r4, [r2, #0]
 8081dde:	bf48      	it	mi
 8081de0:	5983      	ldrmi	r3, [r0, r6]
 8081de2:	4668      	mov	r0, sp
 8081de4:	bf48      	it	mi
 8081de6:	591c      	ldrmi	r4, [r3, r4]
 8081de8:	f003 fc4a 	bl	8085680 <_ZN6StringC1EOS_>
 8081dec:	4669      	mov	r1, sp
 8081dee:	4628      	mov	r0, r5
 8081df0:	47a0      	blx	r4
 8081df2:	4604      	mov	r4, r0
 8081df4:	4668      	mov	r0, sp
 8081df6:	f003 fbc9 	bl	808558c <_ZN6StringD1Ev>
      }
 8081dfa:	4620      	mov	r0, r4
 8081dfc:	b004      	add	sp, #16
 8081dfe:	bd70      	pop	{r4, r5, r6, pc}

08081e00 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM6TesterFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
 8081e00:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8081e02:	b538      	push	{r3, r4, r5, lr}
 8081e04:	4604      	mov	r4, r0
	switch (__op)
 8081e06:	d102      	bne.n	8081e0e <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM6TesterFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
 8081e08:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
 8081e0a:	6023      	str	r3, [r4, #0]
	}
 8081e0c:	e003      	b.n	8081e16 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM6TesterFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
	  switch (__op)
 8081e0e:	2a02      	cmp	r2, #2
 8081e10:	d003      	beq.n	8081e1a <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM6TesterFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1a>
 8081e12:	2a03      	cmp	r2, #3
 8081e14:	d00d      	beq.n	8081e32 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM6TesterFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x32>
      }
 8081e16:	2000      	movs	r0, #0
 8081e18:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 8081e1a:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
 8081e1c:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 8081e1e:	f7fe f94c 	bl	80800ba <_Znwj>
 8081e22:	4603      	mov	r3, r0
 8081e24:	2800      	cmp	r0, #0
 8081e26:	d0f0      	beq.n	8081e0a <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM6TesterFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xa>
 8081e28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8081e2c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8081e30:	e7eb      	b.n	8081e0a <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM6TesterFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
 8081e32:	6800      	ldr	r0, [r0, #0]
 8081e34:	2800      	cmp	r0, #0
 8081e36:	d0ee      	beq.n	8081e16 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM6TesterFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 8081e38:	210c      	movs	r1, #12
 8081e3a:	f006 fb38 	bl	80884ae <_ZdlPvj>
 8081e3e:	e7ea      	b.n	8081e16 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM6TesterFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>

08081e40 <_ZN6TesterC1EPKci>:
	functionName(functionName), sleepTestPin(sleepTestPin) {
 8081e40:	6082      	str	r2, [r0, #8]
 8081e42:	2200      	movs	r2, #0
Tester::Tester(const char *functionName, int sleepTestPin) :
 8081e44:	b510      	push	{r4, lr}
	functionName(functionName), sleepTestPin(sleepTestPin) {
 8081e46:	4c04      	ldr	r4, [pc, #16]	; (8081e58 <_ZN6TesterC1EPKci+0x18>)
 8081e48:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8081e4c:	e9c0 4100 	strd	r4, r1, [r0]
 8081e50:	e9c0 2205 	strd	r2, r2, [r0, #20]
}
 8081e54:	bd10      	pop	{r4, pc}
 8081e56:	bf00      	nop
 8081e58:	0808b69c 	.word	0x0808b69c

08081e5c <_ZN6Tester5setupEv>:
void Tester::setup() {
 8081e5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    _Function_base() : _M_manager(nullptr) { }
 8081e5e:	2400      	movs	r4, #0
 8081e60:	4605      	mov	r5, r0
 8081e62:	6846      	ldr	r6, [r0, #4]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081e64:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
 8081e66:	9402      	str	r4, [sp, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081e68:	f7fe f927 	bl	80800ba <_Znwj>
 8081e6c:	b118      	cbz	r0, 8081e76 <_ZN6Tester5setupEv+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
 8081e6e:	4b18      	ldr	r3, [pc, #96]	; (8081ed0 <_ZN6Tester5setupEv+0x74>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8081e70:	6085      	str	r5, [r0, #8]
 8081e72:	e9c0 3400 	strd	r3, r4, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
 8081e76:	4b17      	ldr	r3, [pc, #92]	; (8081ed4 <_ZN6Tester5setupEv+0x78>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081e78:	9000      	str	r0, [sp, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 8081e7a:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 8081e7c:	4b16      	ldr	r3, [pc, #88]	; (8081ed8 <_ZN6Tester5setupEv+0x7c>)
            auto wrapper = new user_std_function_int_str_t(func);
 8081e7e:	2010      	movs	r0, #16
 8081e80:	9302      	str	r3, [sp, #8]
 8081e82:	f7fe f91a 	bl	80800ba <_Znwj>
 8081e86:	4604      	mov	r4, r0
 8081e88:	b178      	cbz	r0, 8081eaa <_ZN6Tester5setupEv+0x4e>
    _Function_base() : _M_manager(nullptr) { }
 8081e8a:	2300      	movs	r3, #0
 8081e8c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 8081e8e:	9b02      	ldr	r3, [sp, #8]
      if (static_cast<bool>(__x))
 8081e90:	b133      	cbz	r3, 8081ea0 <_ZN6Tester5setupEv+0x44>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8081e92:	2202      	movs	r2, #2
 8081e94:	4669      	mov	r1, sp
 8081e96:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8081e98:	9b03      	ldr	r3, [sp, #12]
 8081e9a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8081e9c:	9b02      	ldr	r3, [sp, #8]
 8081e9e:	60a3      	str	r3, [r4, #8]
                success = register_function(call_std_user_function, wrapper, funcKey);
 8081ea0:	4632      	mov	r2, r6
 8081ea2:	4621      	mov	r1, r4
 8081ea4:	480d      	ldr	r0, [pc, #52]	; (8081edc <_ZN6Tester5setupEv+0x80>)
 8081ea6:	f005 f94a 	bl	808713e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
      if (_M_manager)
 8081eaa:	9b02      	ldr	r3, [sp, #8]
 8081eac:	b11b      	cbz	r3, 8081eb6 <_ZN6Tester5setupEv+0x5a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8081eae:	4669      	mov	r1, sp
 8081eb0:	2203      	movs	r2, #3
 8081eb2:	4608      	mov	r0, r1
 8081eb4:	4798      	blx	r3
	if (sleepTestPin >= 0) {
 8081eb6:	68a8      	ldr	r0, [r5, #8]
 8081eb8:	2800      	cmp	r0, #0
 8081eba:	db06      	blt.n	8081eca <_ZN6Tester5setupEv+0x6e>
		pinMode(sleepTestPin, INPUT_PULLUP);
 8081ebc:	2102      	movs	r1, #2
 8081ebe:	b280      	uxth	r0, r0
}
 8081ec0:	b004      	add	sp, #16
 8081ec2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		pinMode(sleepTestPin, INPUT_PULLUP);
 8081ec6:	f006 b9a5 	b.w	8088214 <pinMode>
}
 8081eca:	b004      	add	sp, #16
 8081ecc:	bd70      	pop	{r4, r5, r6, pc}
 8081ece:	bf00      	nop
 8081ed0:	08081dbd 	.word	0x08081dbd
 8081ed4:	08081dcd 	.word	0x08081dcd
 8081ed8:	08081e01 	.word	0x08081e01
 8081edc:	080870fb 	.word	0x080870fb

08081ee0 <_ZN6Tester14processOptionsEPc>:

// This does the actual work from the Particle.function(). It's called from looo().
void Tester::processOptions(char *mutableData) {
 8081ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081ee2:	4605      	mov	r5, r0
 8081ee4:	b08d      	sub	sp, #52	; 0x34
 8081ee6:	4608      	mov	r0, r1
	// Parse argument into space-separated fields
	const char *argv[MAX_ARGS];
	size_t argc = 0;

	char *cp = strtok(mutableData, " ");
 8081ee8:	4983      	ldr	r1, [pc, #524]	; (80820f8 <_ZN6Tester14processOptionsEPc+0x218>)
 8081eea:	f008 ff69 	bl	808adc0 <strtok>
	size_t argc = 0;
 8081eee:	2400      	movs	r4, #0
	while(cp && argc < MAX_ARGS) {
		argv[argc++] = cp;
		cp = strtok(NULL, " ");
 8081ef0:	4f81      	ldr	r7, [pc, #516]	; (80820f8 <_ZN6Tester14processOptionsEPc+0x218>)
 8081ef2:	ae07      	add	r6, sp, #28
	while(cp && argc < MAX_ARGS) {
 8081ef4:	b148      	cbz	r0, 8081f0a <_ZN6Tester14processOptionsEPc+0x2a>
 8081ef6:	2c05      	cmp	r4, #5
 8081ef8:	d009      	beq.n	8081f0e <_ZN6Tester14processOptionsEPc+0x2e>
		argv[argc++] = cp;
 8081efa:	f846 0b04 	str.w	r0, [r6], #4
		cp = strtok(NULL, " ");
 8081efe:	4639      	mov	r1, r7
 8081f00:	2000      	movs	r0, #0
		argv[argc++] = cp;
 8081f02:	3401      	adds	r4, #1
		cp = strtok(NULL, " ");
 8081f04:	f008 ff5c 	bl	808adc0 <strtok>
	while(cp && argc < MAX_ARGS) {
 8081f08:	e7f4      	b.n	8081ef4 <_ZN6Tester14processOptionsEPc+0x14>
	}
	if (argc == 0) {
 8081f0a:	2c00      	cmp	r4, #0
 8081f0c:	d04a      	beq.n	8081fa4 <_ZN6Tester14processOptionsEPc+0xc4>
		return;
	}

	// Delay a bit here to make sure the function result is returned, otherwise if we
	// immediately go to sleep the function may return a timeout error.
	delay(500);
 8081f0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8081f12:	f004 ff0f 	bl	8086d34 <delay>

	// Process options here
	if (strcmp(argv[0], "reset") == 0) {
 8081f16:	9e07      	ldr	r6, [sp, #28]
 8081f18:	4978      	ldr	r1, [pc, #480]	; (80820fc <_ZN6Tester14processOptionsEPc+0x21c>)
 8081f1a:	4630      	mov	r0, r6
 8081f1c:	f008 fedf 	bl	808acde <strcmp>
 8081f20:	b940      	cbnz	r0, 8081f34 <_ZN6Tester14processOptionsEPc+0x54>
		ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_TESTER_RESET);
 8081f22:	2100      	movs	r1, #0
 8081f24:	200a      	movs	r0, #10
 8081f26:	f000 fe5f 	bl	8082be8 <_ZN16ConnectionEvents8addEventEii>
			pingInterval = 0;
		}

	}

}
 8081f2a:	b00d      	add	sp, #52	; 0x34
 8081f2c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		System.reset();
 8081f30:	f003 ba8b 	b.w	808544a <_ZN11SystemClass5resetEv>
	if (strcmp(argv[0], "modemReset") == 0) {
 8081f34:	4972      	ldr	r1, [pc, #456]	; (8082100 <_ZN6Tester14processOptionsEPc+0x220>)
 8081f36:	4630      	mov	r0, r6
 8081f38:	f008 fed1 	bl	808acde <strcmp>
 8081f3c:	4601      	mov	r1, r0
 8081f3e:	b960      	cbnz	r0, 8081f5a <_ZN6Tester14processOptionsEPc+0x7a>

	static inline ConnectionCheck *getInstance() { return instance; };
 8081f40:	4c70      	ldr	r4, [pc, #448]	; (8082104 <_ZN6Tester14processOptionsEPc+0x224>)
		if (ConnectionCheck::getInstance()) {
 8081f42:	6823      	ldr	r3, [r4, #0]
 8081f44:	2b00      	cmp	r3, #0
 8081f46:	d0ec      	beq.n	8081f22 <_ZN6Tester14processOptionsEPc+0x42>
			ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_TESTER_RESET_MODEM);
 8081f48:	2011      	movs	r0, #17
 8081f4a:	f000 fe4d 	bl	8082be8 <_ZN16ConnectionEvents8addEventEii>
			ConnectionCheck::getInstance()->fullModemReset();
 8081f4e:	6820      	ldr	r0, [r4, #0]
}
 8081f50:	b00d      	add	sp, #52	; 0x34
 8081f52:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			ConnectionCheck::getInstance()->fullModemReset();
 8081f56:	f000 b98f 	b.w	8082278 <_ZN15ConnectionCheck14fullModemResetEv>
	if (strcmp(argv[0], "resetSession") == 0) {
 8081f5a:	496b      	ldr	r1, [pc, #428]	; (8082108 <_ZN6Tester14processOptionsEPc+0x228>)
 8081f5c:	4630      	mov	r0, r6
 8081f5e:	f008 febe 	bl	808acde <strcmp>
 8081f62:	4601      	mov	r1, r0
 8081f64:	bb00      	cbnz	r0, 8081fa8 <_ZN6Tester14processOptionsEPc+0xc8>
		ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_TESTER_RESET_SESSION);
 8081f66:	2010      	movs	r0, #16
 8081f68:	f000 fe3e 	bl	8082be8 <_ZN16ConnectionEvents8addEventEii>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 8081f6c:	4b67      	ldr	r3, [pc, #412]	; (808210c <_ZN6Tester14processOptionsEPc+0x22c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8081f6e:	4a68      	ldr	r2, [pc, #416]	; (8082110 <_ZN6Tester14processOptionsEPc+0x230>)
 8081f70:	781b      	ldrb	r3, [r3, #0]
 8081f72:	4968      	ldr	r1, [pc, #416]	; (8082114 <_ZN6Tester14processOptionsEPc+0x234>)
 8081f74:	f88d 3000 	strb.w	r3, [sp]
 8081f78:	a805      	add	r0, sp, #20
 8081f7a:	233c      	movs	r3, #60	; 0x3c
 8081f7c:	f005 f9f0 	bl	8087360 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
 8081f80:	9c06      	ldr	r4, [sp, #24]
 8081f82:	b17c      	cbz	r4, 8081fa4 <_ZN6Tester14processOptionsEPc+0xc4>
      if (--_M_use_count == 0)
 8081f84:	6863      	ldr	r3, [r4, #4]
 8081f86:	3b01      	subs	r3, #1
 8081f88:	6063      	str	r3, [r4, #4]
 8081f8a:	b95b      	cbnz	r3, 8081fa4 <_ZN6Tester14processOptionsEPc+0xc4>
          _M_dispose();
 8081f8c:	6823      	ldr	r3, [r4, #0]
 8081f8e:	4620      	mov	r0, r4
 8081f90:	689b      	ldr	r3, [r3, #8]
 8081f92:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8081f94:	68a3      	ldr	r3, [r4, #8]
 8081f96:	3b01      	subs	r3, #1
 8081f98:	60a3      	str	r3, [r4, #8]
 8081f9a:	b91b      	cbnz	r3, 8081fa4 <_ZN6Tester14processOptionsEPc+0xc4>
            _M_destroy();
 8081f9c:	6823      	ldr	r3, [r4, #0]
 8081f9e:	4620      	mov	r0, r4
 8081fa0:	68db      	ldr	r3, [r3, #12]
 8081fa2:	4798      	blx	r3
}
 8081fa4:	b00d      	add	sp, #52	; 0x34
 8081fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (strcmp(argv[0], "safeMode") == 0) {
 8081fa8:	4630      	mov	r0, r6
 8081faa:	495b      	ldr	r1, [pc, #364]	; (8082118 <_ZN6Tester14processOptionsEPc+0x238>)
 8081fac:	f008 fe97 	bl	808acde <strcmp>
 8081fb0:	4607      	mov	r7, r0
 8081fb2:	b948      	cbnz	r0, 8081fc8 <_ZN6Tester14processOptionsEPc+0xe8>
		ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_TESTER_SAFE_MODE);
 8081fb4:	4601      	mov	r1, r0
 8081fb6:	2013      	movs	r0, #19
 8081fb8:	f000 fe16 	bl	8082be8 <_ZN16ConnectionEvents8addEventEii>
		System.enterSafeMode();
 8081fbc:	4638      	mov	r0, r7
}
 8081fbe:	b00d      	add	sp, #52	; 0x34
 8081fc0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		System.enterSafeMode();
 8081fc4:	f003 ba44 	b.w	8085450 <_ZN11SystemClass13enterSafeModeEN8particle5FlagsI19SystemResetFlagTypemEE>
	if (strcmp(argv[0], "appWatchdog") == 0) {
 8081fc8:	4954      	ldr	r1, [pc, #336]	; (808211c <_ZN6Tester14processOptionsEPc+0x23c>)
 8081fca:	4630      	mov	r0, r6
 8081fcc:	f008 fe87 	bl	808acde <strcmp>
 8081fd0:	4601      	mov	r1, r0
 8081fd2:	b918      	cbnz	r0, 8081fdc <_ZN6Tester14processOptionsEPc+0xfc>
		ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_TESTER_APP_WATCHDOG, 0);
 8081fd4:	200b      	movs	r0, #11
 8081fd6:	f000 fe07 	bl	8082be8 <_ZN16ConnectionEvents8addEventEii>
		while(true) {
 8081fda:	e7fe      	b.n	8081fda <_ZN6Tester14processOptionsEPc+0xfa>
	if (strcmp(argv[0], "sleep") == 0 && argc >= 2) {
 8081fdc:	4630      	mov	r0, r6
 8081fde:	4950      	ldr	r1, [pc, #320]	; (8082120 <_ZN6Tester14processOptionsEPc+0x240>)
 8081fe0:	f008 fe7d 	bl	808acde <strcmp>
 8081fe4:	2800      	cmp	r0, #0
 8081fe6:	d164      	bne.n	80820b2 <_ZN6Tester14processOptionsEPc+0x1d2>
 8081fe8:	2c01      	cmp	r4, #1
 8081fea:	d062      	beq.n	80820b2 <_ZN6Tester14processOptionsEPc+0x1d2>
		if (argc >= 3) {
 8081fec:	2c02      	cmp	r4, #2
 8081fee:	d112      	bne.n	8082016 <_ZN6Tester14processOptionsEPc+0x136>
		int duration = 30;
 8081ff0:	241e      	movs	r4, #30
		ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_TESTER_SLEEP, duration);
 8081ff2:	4621      	mov	r1, r4
 8081ff4:	200c      	movs	r0, #12
 8081ff6:	f000 fdf7 	bl	8082be8 <_ZN16ConnectionEvents8addEventEii>
		if (strcmp(argv[1], "deep") == 0) {
 8081ffa:	9e08      	ldr	r6, [sp, #32]
 8081ffc:	4949      	ldr	r1, [pc, #292]	; (8082124 <_ZN6Tester14processOptionsEPc+0x244>)
 8081ffe:	4630      	mov	r0, r6
 8082000:	f008 fe6d 	bl	808acde <strcmp>
 8082004:	b970      	cbnz	r0, 8082024 <_ZN6Tester14processOptionsEPc+0x144>
			System.sleep(SLEEP_MODE_DEEP, duration);
 8082006:	4b48      	ldr	r3, [pc, #288]	; (8082128 <_ZN6Tester14processOptionsEPc+0x248>)
			System.sleep(SLEEP_MODE_DEEP, duration, SLEEP_NETWORK_STANDBY);
 8082008:	4622      	mov	r2, r4
 808200a:	2101      	movs	r1, #1
 808200c:	681b      	ldr	r3, [r3, #0]
 808200e:	a805      	add	r0, sp, #20
 8082010:	f003 fa2a 	bl	8085468 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
 8082014:	e7c6      	b.n	8081fa4 <_ZN6Tester14processOptionsEPc+0xc4>
			duration = atoi(argv[2]);
 8082016:	9809      	ldr	r0, [sp, #36]	; 0x24
 8082018:	f008 fdd6 	bl	808abc8 <atoi>
			if (duration == 0) {
 808201c:	4604      	mov	r4, r0
 808201e:	2800      	cmp	r0, #0
 8082020:	d0e6      	beq.n	8081ff0 <_ZN6Tester14processOptionsEPc+0x110>
 8082022:	e7e6      	b.n	8081ff2 <_ZN6Tester14processOptionsEPc+0x112>
		if (strcmp(argv[1], "deepStandby") == 0) {
 8082024:	4630      	mov	r0, r6
 8082026:	4941      	ldr	r1, [pc, #260]	; (808212c <_ZN6Tester14processOptionsEPc+0x24c>)
 8082028:	f008 fe59 	bl	808acde <strcmp>
 808202c:	b908      	cbnz	r0, 8082032 <_ZN6Tester14processOptionsEPc+0x152>
			System.sleep(SLEEP_MODE_DEEP, duration, SLEEP_NETWORK_STANDBY);
 808202e:	4b40      	ldr	r3, [pc, #256]	; (8082130 <_ZN6Tester14processOptionsEPc+0x250>)
 8082030:	e7ea      	b.n	8082008 <_ZN6Tester14processOptionsEPc+0x128>
		if (strcmp(argv[1], "stop") == 0) {
 8082032:	4630      	mov	r0, r6
 8082034:	493f      	ldr	r1, [pc, #252]	; (8082134 <_ZN6Tester14processOptionsEPc+0x254>)
 8082036:	f008 fe52 	bl	808acde <strcmp>
 808203a:	4607      	mov	r7, r0
 808203c:	b9d8      	cbnz	r0, 8082076 <_ZN6Tester14processOptionsEPc+0x196>
			if (sleepTestPin >= 0) {
 808203e:	68ab      	ldr	r3, [r5, #8]
 8082040:	2b00      	cmp	r3, #0
 8082042:	dbaf      	blt.n	8081fa4 <_ZN6Tester14processOptionsEPc+0xc4>
				System.sleep(sleepTestPin, FALLING, duration);
 8082044:	4a38      	ldr	r2, [pc, #224]	; (8082128 <_ZN6Tester14processOptionsEPc+0x248>)
 8082046:	f8ad 3012 	strh.w	r3, [sp, #18]
 808204a:	6812      	ldr	r2, [r2, #0]
inline ValueT particle::Flag<TagT, ValueT>::value() const {
 808204c:	2302      	movs	r3, #2
        return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag);
 808204e:	e9cd 4201 	strd	r4, r2, [sp, #4]
 8082052:	2201      	movs	r2, #1
 8082054:	f88d 3011 	strb.w	r3, [sp, #17]
 8082058:	f10d 0112 	add.w	r1, sp, #18
 808205c:	9200      	str	r2, [sp, #0]
 808205e:	f10d 0311 	add.w	r3, sp, #17
 8082062:	a805      	add	r0, sp, #20
 8082064:	f003 fa3c 	bl	80854e0 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
				ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_STOP_SLEEP_WAKE, 0);
 8082068:	4639      	mov	r1, r7
				ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_STOP_SLEEP_WAKE, 0);
 808206a:	2015      	movs	r0, #21
}
 808206c:	b00d      	add	sp, #52	; 0x34
 808206e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
				ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_STOP_SLEEP_WAKE, 0);
 8082072:	f000 bdb9 	b.w	8082be8 <_ZN16ConnectionEvents8addEventEii>
		if (strcmp(argv[1], "stopStandby") == 0) {
 8082076:	4630      	mov	r0, r6
 8082078:	492f      	ldr	r1, [pc, #188]	; (8082138 <_ZN6Tester14processOptionsEPc+0x258>)
 808207a:	f008 fe30 	bl	808acde <strcmp>
 808207e:	4606      	mov	r6, r0
 8082080:	2800      	cmp	r0, #0
 8082082:	d18f      	bne.n	8081fa4 <_ZN6Tester14processOptionsEPc+0xc4>
			if (sleepTestPin >= 0) {
 8082084:	68ab      	ldr	r3, [r5, #8]
 8082086:	2b00      	cmp	r3, #0
 8082088:	db8c      	blt.n	8081fa4 <_ZN6Tester14processOptionsEPc+0xc4>
				System.sleep(sleepTestPin, FALLING, duration, SLEEP_NETWORK_STANDBY);
 808208a:	4a29      	ldr	r2, [pc, #164]	; (8082130 <_ZN6Tester14processOptionsEPc+0x250>)
 808208c:	f8ad 3012 	strh.w	r3, [sp, #18]
 8082090:	6812      	ldr	r2, [r2, #0]
 8082092:	2302      	movs	r3, #2
 8082094:	e9cd 4201 	strd	r4, r2, [sp, #4]
 8082098:	2201      	movs	r2, #1
 808209a:	f88d 3011 	strb.w	r3, [sp, #17]
 808209e:	f10d 0112 	add.w	r1, sp, #18
 80820a2:	9200      	str	r2, [sp, #0]
 80820a4:	f10d 0311 	add.w	r3, sp, #17
 80820a8:	a805      	add	r0, sp, #20
 80820aa:	f003 fa19 	bl	80854e0 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
				ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_STOP_SLEEP_WAKE, 0);
 80820ae:	4631      	mov	r1, r6
 80820b0:	e7db      	b.n	808206a <_ZN6Tester14processOptionsEPc+0x18a>
	if (strcmp(argv[0], "ping") == 0 && argc >= 2) {
 80820b2:	4630      	mov	r0, r6
 80820b4:	4921      	ldr	r1, [pc, #132]	; (808213c <_ZN6Tester14processOptionsEPc+0x25c>)
 80820b6:	f008 fe12 	bl	808acde <strcmp>
 80820ba:	2800      	cmp	r0, #0
 80820bc:	f47f af72 	bne.w	8081fa4 <_ZN6Tester14processOptionsEPc+0xc4>
 80820c0:	2c01      	cmp	r4, #1
 80820c2:	f43f af6f 	beq.w	8081fa4 <_ZN6Tester14processOptionsEPc+0xc4>
		if (strcmp(argv[1], "start") == 0) {
 80820c6:	9e08      	ldr	r6, [sp, #32]
 80820c8:	491d      	ldr	r1, [pc, #116]	; (8082140 <_ZN6Tester14processOptionsEPc+0x260>)
 80820ca:	4630      	mov	r0, r6
 80820cc:	f008 fe07 	bl	808acde <strcmp>
 80820d0:	b948      	cbnz	r0, 80820e6 <_ZN6Tester14processOptionsEPc+0x206>
			if (argc >= 3) {
 80820d2:	2c02      	cmp	r4, #2
 80820d4:	d004      	beq.n	80820e0 <_ZN6Tester14processOptionsEPc+0x200>
				pingInterval = (unsigned long) atoi(argv[2]);
 80820d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80820d8:	f008 fd76 	bl	808abc8 <atoi>
			pingInterval = 0;
 80820dc:	6168      	str	r0, [r5, #20]
 80820de:	e761      	b.n	8081fa4 <_ZN6Tester14processOptionsEPc+0xc4>
				pingInterval = 30;
 80820e0:	231e      	movs	r3, #30
 80820e2:	616b      	str	r3, [r5, #20]
 80820e4:	e75e      	b.n	8081fa4 <_ZN6Tester14processOptionsEPc+0xc4>
		if (strcmp(argv[1], "stop") == 0) {
 80820e6:	4630      	mov	r0, r6
 80820e8:	4912      	ldr	r1, [pc, #72]	; (8082134 <_ZN6Tester14processOptionsEPc+0x254>)
 80820ea:	f008 fdf8 	bl	808acde <strcmp>
 80820ee:	2800      	cmp	r0, #0
 80820f0:	f47f af58 	bne.w	8081fa4 <_ZN6Tester14processOptionsEPc+0xc4>
 80820f4:	e7f2      	b.n	80820dc <_ZN6Tester14processOptionsEPc+0x1fc>
 80820f6:	bf00      	nop
 80820f8:	0808bb8a 	.word	0x0808bb8a
 80820fc:	0808b614 	.word	0x0808b614
 8082100:	0808b61a 	.word	0x0808b61a
 8082104:	200002f0 	.word	0x200002f0
 8082108:	0808b625 	.word	0x0808b625
 808210c:	200002e8 	.word	0x200002e8
 8082110:	0808b6b8 	.word	0x0808b6b8
 8082114:	0808b632 	.word	0x0808b632
 8082118:	0808b64b 	.word	0x0808b64b
 808211c:	0808b654 	.word	0x0808b654
 8082120:	0808b660 	.word	0x0808b660
 8082124:	0808b666 	.word	0x0808b666
 8082128:	200002e0 	.word	0x200002e0
 808212c:	0808b66b 	.word	0x0808b66b
 8082130:	200002e4 	.word	0x200002e4
 8082134:	0808b677 	.word	0x0808b677
 8082138:	0808b67c 	.word	0x0808b67c
 808213c:	0808b688 	.word	0x0808b688
 8082140:	0808b68d 	.word	0x0808b68d

08082144 <_ZN6Tester4loopEv>:
void Tester::loop() {
 8082144:	b510      	push	{r4, lr}
	if (functionData) {
 8082146:	68c1      	ldr	r1, [r0, #12]
void Tester::loop() {
 8082148:	4604      	mov	r4, r0
	if (functionData) {
 808214a:	b131      	cbz	r1, 808215a <_ZN6Tester4loopEv+0x16>
		processOptions(functionData);
 808214c:	f7ff fec8 	bl	8081ee0 <_ZN6Tester14processOptionsEPc>
		free(functionData);
 8082150:	68e0      	ldr	r0, [r4, #12]
 8082152:	f002 fff5 	bl	8085140 <free>
		functionData = NULL;
 8082156:	2300      	movs	r3, #0
 8082158:	60e3      	str	r3, [r4, #12]
	if (pingInterval > 0) {
 808215a:	6963      	ldr	r3, [r4, #20]
 808215c:	2b00      	cmp	r3, #0
 808215e:	dd14      	ble.n	808218a <_ZN6Tester4loopEv+0x46>
 8082160:	f002 fcae 	bl	8084ac0 <HAL_Timer_Get_Milli_Seconds>
		if (millis() - lastPing >= (unsigned long) (pingInterval * 1000)) {
 8082164:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8082168:	6923      	ldr	r3, [r4, #16]
 808216a:	1ac0      	subs	r0, r0, r3
 808216c:	6963      	ldr	r3, [r4, #20]
 808216e:	4353      	muls	r3, r2
 8082170:	4298      	cmp	r0, r3
 8082172:	d30a      	bcc.n	808218a <_ZN6Tester4loopEv+0x46>
 8082174:	f002 fca4 	bl	8084ac0 <HAL_Timer_Get_Milli_Seconds>
			ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_TESTER_PING, ++pingCounter);
 8082178:	69a1      	ldr	r1, [r4, #24]
			lastPing = millis();
 808217a:	6120      	str	r0, [r4, #16]
			ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_TESTER_PING, ++pingCounter);
 808217c:	3101      	adds	r1, #1
 808217e:	61a1      	str	r1, [r4, #24]
 8082180:	2014      	movs	r0, #20
}
 8082182:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_TESTER_PING, ++pingCounter);
 8082186:	f000 bd2f 	b.w	8082be8 <_ZN16ConnectionEvents8addEventEii>
}
 808218a:	bd10      	pop	{r4, pc}

0808218c <_GLOBAL__sub_I__ZN6TesterC2EPKci>:
        val_(val) {
 808218c:	2200      	movs	r2, #0
 808218e:	4b04      	ldr	r3, [pc, #16]	; (80821a0 <_GLOBAL__sub_I__ZN6TesterC2EPKci+0x14>)
 8082190:	601a      	str	r2, [r3, #0]
 8082192:	2301      	movs	r3, #1
 8082194:	4a03      	ldr	r2, [pc, #12]	; (80821a4 <_GLOBAL__sub_I__ZN6TesterC2EPKci+0x18>)
 8082196:	6013      	str	r3, [r2, #0]
 8082198:	4a03      	ldr	r2, [pc, #12]	; (80821a8 <_GLOBAL__sub_I__ZN6TesterC2EPKci+0x1c>)
 808219a:	7013      	strb	r3, [r2, #0]
}
 808219c:	4770      	bx	lr
 808219e:	bf00      	nop
 80821a0:	200002e0 	.word	0x200002e0
 80821a4:	200002e4 	.word	0x200002e4
 80821a8:	200002e8 	.word	0x200002e8

080821ac <_ZN15ConnectionCheckD1Ev>:
		connectionCheckRetainedData.numFailures = 0;
	}
}
ConnectionCheck::~ConnectionCheck() {

}
 80821ac:	4770      	bx	lr

080821ae <_ZN15ConnectionCheckD0Ev>:
ConnectionCheck::~ConnectionCheck() {
 80821ae:	b510      	push	{r4, lr}
 80821b0:	4604      	mov	r4, r0
}
 80821b2:	2120      	movs	r1, #32
 80821b4:	f006 f97b 	bl	80884ae <_ZdlPvj>
 80821b8:	4620      	mov	r0, r4
 80821ba:	bd10      	pop	{r4, pc}

080821bc <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 80821bc:	b40e      	push	{r1, r2, r3}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 80821be:	f04f 0c20 	mov.w	ip, #32
 80821c2:	2300      	movs	r3, #0
inline void spark::Logger::info(const char *fmt, ...) const {
 80821c4:	b500      	push	{lr}
 80821c6:	b08c      	sub	sp, #48	; 0x30
 80821c8:	aa0d      	add	r2, sp, #52	; 0x34
 80821ca:	f852 1b04 	ldr.w	r1, [r2], #4
    attr.flags = 0;
 80821ce:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80821d2:	e9cd 1200 	strd	r1, r2, [sp]
    va_start(args, fmt);
 80821d6:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80821d8:	6801      	ldr	r1, [r0, #0]
 80821da:	aa04      	add	r2, sp, #16
 80821dc:	201e      	movs	r0, #30
 80821de:	f002 fe67 	bl	8084eb0 <log_message_v>
}
 80821e2:	b00c      	add	sp, #48	; 0x30
 80821e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80821e8:	b003      	add	sp, #12
 80821ea:	4770      	bx	lr

080821ec <_ZN15ConnectionCheckC1Ev>:
ConnectionCheck::ConnectionCheck()  {
 80821ec:	f247 5230 	movw	r2, #30000	; 0x7530
 80821f0:	4b0b      	ldr	r3, [pc, #44]	; (8082220 <_ZN15ConnectionCheckC1Ev+0x34>)
 80821f2:	f242 7110 	movw	r1, #10000	; 0x2710
 80821f6:	6003      	str	r3, [r0, #0]
 80821f8:	4b0a      	ldr	r3, [pc, #40]	; (8082224 <_ZN15ConnectionCheckC1Ev+0x38>)
 80821fa:	b510      	push	{r4, lr}
 80821fc:	e9c0 2301 	strd	r2, r3, [r0, #4]
 8082200:	2300      	movs	r3, #0
	instance = this;
 8082202:	4a09      	ldr	r2, [pc, #36]	; (8082228 <_ZN15ConnectionCheckC1Ev+0x3c>)
ConnectionCheck::ConnectionCheck()  {
 8082204:	e9c0 1303 	strd	r1, r3, [r0, #12]
	instance = this;
 8082208:	6010      	str	r0, [r2, #0]
	if (connectionCheckRetainedData.magic != CONNECTION_CHECK_MAGIC) {
 808220a:	4a08      	ldr	r2, [pc, #32]	; (808222c <_ZN15ConnectionCheckC1Ev+0x40>)
 808220c:	4908      	ldr	r1, [pc, #32]	; (8082230 <_ZN15ConnectionCheckC1Ev+0x44>)
 808220e:	6814      	ldr	r4, [r2, #0]
ConnectionCheck::ConnectionCheck()  {
 8082210:	e9c0 3306 	strd	r3, r3, [r0, #24]
	if (connectionCheckRetainedData.magic != CONNECTION_CHECK_MAGIC) {
 8082214:	428c      	cmp	r4, r1
		connectionCheckRetainedData.numFailures = 0;
 8082216:	bf18      	it	ne
 8082218:	e9c2 1300 	strdne	r1, r3, [r2]
ConnectionCheck::ConnectionCheck()  {
 808221c:	8283      	strh	r3, [r0, #20]
}
 808221e:	bd10      	pop	{r4, pc}
 8082220:	0808b73c 	.word	0x0808b73c
 8082224:	0002bf20 	.word	0x0002bf20
 8082228:	200002f0 	.word	0x200002f0
 808222c:	40024000 	.word	0x40024000
 8082230:	2e4ec594 	.word	0x2e4ec594

08082234 <_ZN15ConnectionCheck5setupEv>:

void ConnectionCheck::setup() {

}
 8082234:	4770      	bx	lr
	...

08082238 <_ZN15ConnectionCheck17cloudConnectDebugEv>:
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
 8082238:	2100      	movs	r1, #0


// This is called when timing out connecting to the cloud. It adds some debugging events to
// help log the current state for debugging purposes.
// It returns true to force a modem reset immediately, false to use the normal logic for whether to reset the modem.
bool ConnectionCheck::cloudConnectDebug() {
 808223a:	b510      	push	{r4, lr}
 808223c:	4b0c      	ldr	r3, [pc, #48]	; (8082270 <_ZN15ConnectionCheck17cloudConnectDebugEv+0x38>)
 808223e:	68c2      	ldr	r2, [r0, #12]
 8082240:	4604      	mov	r4, r0
 8082242:	4608      	mov	r0, r1
 8082244:	f002 fde4 	bl	8084e10 <cellular_command>
 8082248:	4601      	mov	r1, r0
	int res = Cellular.command(pingTimeout, "AT+UPING=\"8.8.8.8\"\r\n");
	ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_PING_DNS, res);
 808224a:	2007      	movs	r0, #7
 808224c:	f000 fccc 	bl	8082be8 <_ZN16ConnectionEvents8addEventEii>
 8082250:	2100      	movs	r1, #0
 8082252:	68e2      	ldr	r2, [r4, #12]
 8082254:	4b07      	ldr	r3, [pc, #28]	; (8082274 <_ZN15ConnectionCheck17cloudConnectDebugEv+0x3c>)
 8082256:	4608      	mov	r0, r1
 8082258:	f002 fdda 	bl	8084e10 <cellular_command>
 808225c:	4604      	mov	r4, r0

	res = Cellular.command(pingTimeout, "AT+UPING=\"api.particle.io\"\r\n");
	ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_PING_API, res);
 808225e:	4601      	mov	r1, r0
 8082260:	2008      	movs	r0, #8
 8082262:	f000 fcc1 	bl	8082be8 <_ZN16ConnectionEvents8addEventEii>

	// If pinging api.particle.io does not succeed, then reboot the modem right away
	return (res != RESP_OK);
}
 8082266:	1ca0      	adds	r0, r4, #2
 8082268:	bf18      	it	ne
 808226a:	2001      	movne	r0, #1
 808226c:	bd10      	pop	{r4, pc}
 808226e:	bf00      	nop
 8082270:	0808b6a4 	.word	0x0808b6a4
 8082274:	0808b6b9 	.word	0x0808b6b9

08082278 <_ZN15ConnectionCheck14fullModemResetEv>:


// reason is the reason code, one of the ConnectionEvents::CONNECTION_EVENT_* constants
// forceResetMode will reset the modem even immediately instead of waiting for multiple failures
void ConnectionCheck::fullModemReset() {
 8082278:	b530      	push	{r4, r5, lr}

	Log.info("resetting modem");
 808227a:	491b      	ldr	r1, [pc, #108]	; (80822e8 <_ZN15ConnectionCheck14fullModemResetEv+0x70>)
void ConnectionCheck::fullModemReset() {
 808227c:	b085      	sub	sp, #20
	Log.info("resetting modem");
 808227e:	481b      	ldr	r0, [pc, #108]	; (80822ec <_ZN15ConnectionCheck14fullModemResetEv+0x74>)
 8082280:	f7ff ff9c 	bl	80821bc <_ZNK5spark6Logger4infoEPKcz>

	ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_MODEM_RESET);
 8082284:	2100      	movs	r1, #0
 8082286:	2004      	movs	r0, #4
 8082288:	f000 fcae 	bl	8082be8 <_ZN16ConnectionEvents8addEventEii>
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
 808228c:	2300      	movs	r3, #0

	// Disconnect from the cloud
	Particle.disconnect();
 808228e:	a801      	add	r0, sp, #4
 8082290:	e9cd 3301 	strd	r3, r3, [sp, #4]
        bool clearSession) :
 8082294:	f8ad 300c 	strh.w	r3, [sp, #12]
 8082298:	f004 ff62 	bl	8087160 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
 808229c:	f002 fc10 	bl	8084ac0 <HAL_Timer_Get_Milli_Seconds>

	// Wait up to 15 seconds to disconnect
	unsigned long startTime = millis();
	while(Particle.connected() && millis() - startTime < 15000) {
 80822a0:	f643 2597 	movw	r5, #14999	; 0x3a97
 80822a4:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80822a6:	f002 ff0b 	bl	80850c0 <spark_cloud_flag_connected>
 80822aa:	b140      	cbz	r0, 80822be <_ZN15ConnectionCheck14fullModemResetEv+0x46>
 80822ac:	f002 fc08 	bl	8084ac0 <HAL_Timer_Get_Milli_Seconds>
 80822b0:	1b00      	subs	r0, r0, r4
 80822b2:	42a8      	cmp	r0, r5
 80822b4:	d803      	bhi.n	80822be <_ZN15ConnectionCheck14fullModemResetEv+0x46>
		delay(100);
 80822b6:	2064      	movs	r0, #100	; 0x64
 80822b8:	f004 fd3c 	bl	8086d34 <delay>
	while(Particle.connected() && millis() - startTime < 15000) {
 80822bc:	e7f3      	b.n	80822a6 <_ZN15ConnectionCheck14fullModemResetEv+0x2e>
 80822be:	2100      	movs	r1, #0
 80822c0:	f247 5230 	movw	r2, #30000	; 0x7530
 80822c4:	4608      	mov	r0, r1
 80822c6:	4b0a      	ldr	r3, [pc, #40]	; (80822f0 <_ZN15ConnectionCheck14fullModemResetEv+0x78>)
 80822c8:	f002 fda2 	bl	8084e10 <cellular_command>

	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");

	delay(1000);
 80822cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80822d0:	f004 fd30 	bl	8086d34 <delay>

	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
 80822d4:	4b07      	ldr	r3, [pc, #28]	; (80822f4 <_ZN15ConnectionCheck14fullModemResetEv+0x7c>)
 80822d6:	220a      	movs	r2, #10
 80822d8:	2101      	movs	r1, #1
 80822da:	681b      	ldr	r3, [r3, #0]
 80822dc:	a801      	add	r0, sp, #4
 80822de:	f003 f8c3 	bl	8085468 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
 80822e2:	b005      	add	sp, #20
 80822e4:	bd30      	pop	{r4, r5, pc}
 80822e6:	bf00      	nop
 80822e8:	0808b6d6 	.word	0x0808b6d6
 80822ec:	20000404 	.word	0x20000404
 80822f0:	0808b6e6 	.word	0x0808b6e6
 80822f4:	200002ec 	.word	0x200002ec

080822f8 <_ZN15ConnectionCheck4loopEv>:
void ConnectionCheck::loop() {
 80822f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
        return network_ready(*this, 0,  NULL);
 80822fa:	2200      	movs	r2, #0
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
 80822fc:	4d45      	ldr	r5, [pc, #276]	; (8082414 <_ZN15ConnectionCheck4loopEv+0x11c>)
 80822fe:	4604      	mov	r4, r0
 8082300:	4611      	mov	r1, r2
 8082302:	6868      	ldr	r0, [r5, #4]
 8082304:	f002 fe74 	bl	8084ff0 <network_ready>
	if (temp != isCellularReady) {
 8082308:	7d23      	ldrb	r3, [r4, #20]
 808230a:	4601      	mov	r1, r0
 808230c:	4283      	cmp	r3, r0
 808230e:	d00d      	beq.n	808232c <_ZN15ConnectionCheck4loopEv+0x34>
		isCellularReady = temp;
 8082310:	7520      	strb	r0, [r4, #20]
		ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_CELLULAR_READY, isCellularReady);
 8082312:	2001      	movs	r0, #1
 8082314:	f000 fc68 	bl	8082be8 <_ZN16ConnectionEvents8addEventEii>
		Log.info("cellular %s", isCellularReady ? "up" : "down");
 8082318:	7d21      	ldrb	r1, [r4, #20]
 808231a:	4a3f      	ldr	r2, [pc, #252]	; (8082418 <_ZN15ConnectionCheck4loopEv+0x120>)
 808231c:	4b3f      	ldr	r3, [pc, #252]	; (808241c <_ZN15ConnectionCheck4loopEv+0x124>)
 808231e:	4840      	ldr	r0, [pc, #256]	; (8082420 <_ZN15ConnectionCheck4loopEv+0x128>)
 8082320:	2900      	cmp	r1, #0
 8082322:	bf08      	it	eq
 8082324:	461a      	moveq	r2, r3
 8082326:	493f      	ldr	r1, [pc, #252]	; (8082424 <_ZN15ConnectionCheck4loopEv+0x12c>)
 8082328:	f7ff ff48 	bl	80821bc <_ZNK5spark6Logger4infoEPKcz>
 808232c:	f002 fec8 	bl	80850c0 <spark_cloud_flag_connected>
	if (temp != isCloudConnected) {
 8082330:	7d63      	ldrb	r3, [r4, #21]
 8082332:	4601      	mov	r1, r0
 8082334:	4283      	cmp	r3, r0
 8082336:	d02b      	beq.n	8082390 <_ZN15ConnectionCheck4loopEv+0x98>
		isCloudConnected = temp;
 8082338:	7560      	strb	r0, [r4, #21]
		ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_CLOUD_CONNECTED, isCloudConnected);
 808233a:	2002      	movs	r0, #2
 808233c:	f000 fc54 	bl	8082be8 <_ZN16ConnectionEvents8addEventEii>
		Log.info("cloud connection %s", isCloudConnected ? "up" : "down");
 8082340:	7d61      	ldrb	r1, [r4, #21]
 8082342:	4b36      	ldr	r3, [pc, #216]	; (808241c <_ZN15ConnectionCheck4loopEv+0x124>)
 8082344:	4a34      	ldr	r2, [pc, #208]	; (8082418 <_ZN15ConnectionCheck4loopEv+0x120>)
 8082346:	4836      	ldr	r0, [pc, #216]	; (8082420 <_ZN15ConnectionCheck4loopEv+0x128>)
 8082348:	2900      	cmp	r1, #0
 808234a:	bf08      	it	eq
 808234c:	461a      	moveq	r2, r3
 808234e:	4936      	ldr	r1, [pc, #216]	; (8082428 <_ZN15ConnectionCheck4loopEv+0x130>)
 8082350:	f7ff ff34 	bl	80821bc <_ZNK5spark6Logger4infoEPKcz>
		if (isCloudConnected) {
 8082354:	7d63      	ldrb	r3, [r4, #21]
 8082356:	b1c3      	cbz	r3, 808238a <_ZN15ConnectionCheck4loopEv+0x92>
			connectionCheckRetainedData.numFailures = 0;
 8082358:	2200      	movs	r2, #0
 808235a:	4b34      	ldr	r3, [pc, #208]	; (808242c <_ZN15ConnectionCheck4loopEv+0x134>)
 808235c:	605a      	str	r2, [r3, #4]
        return network_listening(*this, 0, NULL);
 808235e:	2200      	movs	r2, #0
 8082360:	6868      	ldr	r0, [r5, #4]
 8082362:	4611      	mov	r1, r2
 8082364:	f002 fe64 	bl	8085030 <network_listening>
	if (Cellular.listening()) {
 8082368:	b168      	cbz	r0, 8082386 <_ZN15ConnectionCheck4loopEv+0x8e>
		if (listeningStart == 0) {
 808236a:	69a5      	ldr	r5, [r4, #24]
 808236c:	2d00      	cmp	r5, #0
 808236e:	d13c      	bne.n	80823ea <_ZN15ConnectionCheck4loopEv+0xf2>
 8082370:	f002 fba6 	bl	8084ac0 <HAL_Timer_Get_Milli_Seconds>
			ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_LISTENING_ENTERED);
 8082374:	4629      	mov	r1, r5
			listeningStart = millis();
 8082376:	61a0      	str	r0, [r4, #24]
			ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_LISTENING_ENTERED);
 8082378:	2003      	movs	r0, #3
 808237a:	f000 fc35 	bl	8082be8 <_ZN16ConnectionEvents8addEventEii>
			Log.info("entered listening mode");
 808237e:	492c      	ldr	r1, [pc, #176]	; (8082430 <_ZN15ConnectionCheck4loopEv+0x138>)
 8082380:	4827      	ldr	r0, [pc, #156]	; (8082420 <_ZN15ConnectionCheck4loopEv+0x128>)
 8082382:	f7ff ff1b 	bl	80821bc <_ZNK5spark6Logger4infoEPKcz>
}
 8082386:	b003      	add	sp, #12
 8082388:	bd30      	pop	{r4, r5, pc}
 808238a:	f002 fb99 	bl	8084ac0 <HAL_Timer_Get_Milli_Seconds>
			cloudCheckStart = millis();
 808238e:	61e0      	str	r0, [r4, #28]
	if (!isCloudConnected) {
 8082390:	7d63      	ldrb	r3, [r4, #21]
 8082392:	2b00      	cmp	r3, #0
 8082394:	d1e3      	bne.n	808235e <_ZN15ConnectionCheck4loopEv+0x66>
		if (cloudWaitForReboot != 0 && millis() - cloudCheckStart >= cloudWaitForReboot) {
 8082396:	68a3      	ldr	r3, [r4, #8]
 8082398:	2b00      	cmp	r3, #0
 808239a:	d0e0      	beq.n	808235e <_ZN15ConnectionCheck4loopEv+0x66>
 808239c:	f002 fb90 	bl	8084ac0 <HAL_Timer_Get_Milli_Seconds>
 80823a0:	69e3      	ldr	r3, [r4, #28]
 80823a2:	1ac0      	subs	r0, r0, r3
 80823a4:	68a3      	ldr	r3, [r4, #8]
 80823a6:	4298      	cmp	r0, r3
 80823a8:	d3d9      	bcc.n	808235e <_ZN15ConnectionCheck4loopEv+0x66>
			if (isCellularReady) {
 80823aa:	7d23      	ldrb	r3, [r4, #20]
 80823ac:	b113      	cbz	r3, 80823b4 <_ZN15ConnectionCheck4loopEv+0xbc>
				cloudConnectDebug();
 80823ae:	4620      	mov	r0, r4
 80823b0:	f7ff ff42 	bl	8082238 <_ZN15ConnectionCheck17cloudConnectDebugEv>
			connectionCheckRetainedData.numFailures++;
 80823b4:	4a1d      	ldr	r2, [pc, #116]	; (808242c <_ZN15ConnectionCheck4loopEv+0x134>)
 80823b6:	6853      	ldr	r3, [r2, #4]
 80823b8:	3301      	adds	r3, #1
 80823ba:	6053      	str	r3, [r2, #4]
			if (failureSleepSec > 0 && connectionCheckRetainedData.numFailures > 1) {
 80823bc:	6922      	ldr	r2, [r4, #16]
 80823be:	b162      	cbz	r2, 80823da <_ZN15ConnectionCheck4loopEv+0xe2>
 80823c0:	2b01      	cmp	r3, #1
 80823c2:	d90a      	bls.n	80823da <_ZN15ConnectionCheck4loopEv+0xe2>
				ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_FAILURE_SLEEP);
 80823c4:	2100      	movs	r1, #0
 80823c6:	2016      	movs	r0, #22
 80823c8:	f000 fc0e 	bl	8082be8 <_ZN16ConnectionEvents8addEventEii>
				System.sleep(SLEEP_MODE_DEEP, failureSleepSec);
 80823cc:	4b19      	ldr	r3, [pc, #100]	; (8082434 <_ZN15ConnectionCheck4loopEv+0x13c>)
 80823ce:	2101      	movs	r1, #1
 80823d0:	4668      	mov	r0, sp
 80823d2:	681b      	ldr	r3, [r3, #0]
 80823d4:	6922      	ldr	r2, [r4, #16]
 80823d6:	f003 f847 	bl	8085468 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
			ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_REBOOT_NO_CLOUD);
 80823da:	2100      	movs	r1, #0
 80823dc:	2006      	movs	r0, #6
 80823de:	f000 fc03 	bl	8082be8 <_ZN16ConnectionEvents8addEventEii>
			fullModemReset();
 80823e2:	4620      	mov	r0, r4
 80823e4:	f7ff ff48 	bl	8082278 <_ZN15ConnectionCheck14fullModemResetEv>
 80823e8:	e7b9      	b.n	808235e <_ZN15ConnectionCheck4loopEv+0x66>
			if (listenWaitForReboot != 0 && millis() - listeningStart >= listenWaitForReboot) {
 80823ea:	6863      	ldr	r3, [r4, #4]
 80823ec:	2b00      	cmp	r3, #0
 80823ee:	d0ca      	beq.n	8082386 <_ZN15ConnectionCheck4loopEv+0x8e>
 80823f0:	f002 fb66 	bl	8084ac0 <HAL_Timer_Get_Milli_Seconds>
 80823f4:	69a3      	ldr	r3, [r4, #24]
 80823f6:	1ac0      	subs	r0, r0, r3
 80823f8:	6863      	ldr	r3, [r4, #4]
 80823fa:	4298      	cmp	r0, r3
 80823fc:	d3c3      	bcc.n	8082386 <_ZN15ConnectionCheck4loopEv+0x8e>
				ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_REBOOT_LISTENING);
 80823fe:	2100      	movs	r1, #0
 8082400:	2005      	movs	r0, #5
 8082402:	f000 fbf1 	bl	8082be8 <_ZN16ConnectionEvents8addEventEii>
				fullModemReset();
 8082406:	4620      	mov	r0, r4
}
 8082408:	b003      	add	sp, #12
 808240a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				fullModemReset();
 808240e:	f7ff bf33 	b.w	8082278 <_ZN15ConnectionCheck14fullModemResetEv>
 8082412:	bf00      	nop
 8082414:	20000850 	.word	0x20000850
 8082418:	0808b6f3 	.word	0x0808b6f3
 808241c:	0808b6f6 	.word	0x0808b6f6
 8082420:	20000404 	.word	0x20000404
 8082424:	0808b6fb 	.word	0x0808b6fb
 8082428:	0808b707 	.word	0x0808b707
 808242c:	40024000 	.word	0x40024000
 8082430:	0808b71b 	.word	0x0808b71b
 8082434:	200002ec 	.word	0x200002ec

08082438 <_GLOBAL__sub_I__ZN15ConnectionCheck8instanceE>:
 8082438:	2200      	movs	r2, #0
 808243a:	4b01      	ldr	r3, [pc, #4]	; (8082440 <_GLOBAL__sub_I__ZN15ConnectionCheck8instanceE+0x8>)
 808243c:	601a      	str	r2, [r3, #0]
}
 808243e:	4770      	bx	lr
 8082440:	200002ec 	.word	0x200002ec

08082444 <_ZN6Thread3runEPv>:

private:

    static os_thread_return_t run(void* param) {
        Data* th = (Data*)param;
        th->started = true;
 8082444:	2301      	movs	r3, #1
    static os_thread_return_t run(void* param) {
 8082446:	b510      	push	{r4, lr}
        th->started = true;
 8082448:	7403      	strb	r3, [r0, #16]
        if (th->func) {
 808244a:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
 808244c:	4604      	mov	r4, r0
        if (th->func) {
 808244e:	b143      	cbz	r3, 8082462 <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
 8082450:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082452:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
 8082454:	2301      	movs	r3, #1
        os_thread_exit(nullptr);
 8082456:	2000      	movs	r0, #0
        th->exited = true;
 8082458:	7463      	strb	r3, [r4, #17]
    }
 808245a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
 808245e:	f002 bbc7 	b.w	8084bf0 <os_thread_exit>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
	return *this;
      }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8082462:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
 8082464:	2800      	cmp	r0, #0
 8082466:	d0f5      	beq.n	8082454 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
 8082468:	6883      	ldr	r3, [r0, #8]
 808246a:	b90b      	cbnz	r3, 8082470 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
 808246c:	f006 f825 	bl	80884ba <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082470:	68c3      	ldr	r3, [r0, #12]
 8082472:	e7ee      	b.n	8082452 <_ZN6Thread3runEPv+0xe>

08082474 <_ZN18AppWatchdogWrapper16watchdogCallbackEv>:

}


// static
void AppWatchdogWrapper::watchdogCallback() {
 8082474:	b508      	push	{r3, lr}
	// This isn't quite safe; connectionEvents.add should only be called from the main loop thread,
	// but since by definition the main loop thread is stuck when the app watchdog fires, this is
	// probably not that unsafe. (The application watchdog runs in a separate thread.)
	ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_APP_WATCHDOG);
 8082476:	2100      	movs	r1, #0
 8082478:	2009      	movs	r0, #9
 808247a:	f000 fbb5 	bl	8082be8 <_ZN16ConnectionEvents8addEventEii>
	System.reset();
}
 808247e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	System.reset();
 8082482:	f002 bfe2 	b.w	808544a <_ZN11SystemClass5resetEv>

08082486 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>:
      operator()(_Tp* __ptr) const
 8082486:	b538      	push	{r3, r4, r5, lr}
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
 8082488:	6805      	ldr	r5, [r0, #0]
      operator()(_Tp* __ptr) const
 808248a:	4604      	mov	r4, r0
	if (__ptr != nullptr)
 808248c:	b135      	cbz	r5, 808249c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0+0x16>
    class function<_Res(_ArgTypes...)>
 808248e:	4628      	mov	r0, r5
 8082490:	f7fe f9b4 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
 8082494:	2110      	movs	r1, #16
 8082496:	4628      	mov	r0, r5
 8082498:	f006 f809 	bl	80884ae <_ZdlPvj>
 808249c:	4620      	mov	r0, r4
      }
 808249e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delete __ptr;
 80824a2:	2114      	movs	r1, #20
 80824a4:	f006 b803 	b.w	80884ae <_ZdlPvj>

080824a8 <_ZN18AppWatchdogWrapperD1Ev>:
AppWatchdogWrapper::~AppWatchdogWrapper() {
 80824a8:	b510      	push	{r4, lr}
 80824aa:	4b11      	ldr	r3, [pc, #68]	; (80824f0 <_ZN18AppWatchdogWrapperD1Ev+0x48>)
 80824ac:	4604      	mov	r4, r0
 80824ae:	6003      	str	r3, [r0, #0]
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80824b0:	6983      	ldr	r3, [r0, #24]
        if (!isValid())
 80824b2:	b19b      	cbz	r3, 80824dc <_ZN18AppWatchdogWrapperD1Ev+0x34>
        return isValid() && os_thread_is_current(d_->handle);
 80824b4:	6858      	ldr	r0, [r3, #4]
 80824b6:	f002 fb33 	bl	8084b20 <os_thread_is_current>
 80824ba:	b978      	cbnz	r0, 80824dc <_ZN18AppWatchdogWrapperD1Ev+0x34>
 80824bc:	69a3      	ldr	r3, [r4, #24]
        if (!d_->exited) {
 80824be:	7c5a      	ldrb	r2, [r3, #17]
 80824c0:	b912      	cbnz	r2, 80824c8 <_ZN18AppWatchdogWrapperD1Ev+0x20>
        return isValid() && os_thread_join(d_->handle)==0;
 80824c2:	6858      	ldr	r0, [r3, #4]
 80824c4:	f002 fb3c 	bl	8084b40 <os_thread_join>
        os_thread_cleanup(d_->handle);
 80824c8:	69a3      	ldr	r3, [r4, #24]
 80824ca:	6858      	ldr	r0, [r3, #4]
 80824cc:	f002 fb40 	bl	8084b50 <os_thread_cleanup>
	_M_ptr() = __p;
 80824d0:	2300      	movs	r3, #0
	const pointer __old_p = _M_ptr();
 80824d2:	69a0      	ldr	r0, [r4, #24]
	_M_ptr() = __p;
 80824d4:	61a3      	str	r3, [r4, #24]
	if (__old_p)
 80824d6:	b108      	cbz	r0, 80824dc <_ZN18AppWatchdogWrapperD1Ev+0x34>
      operator()(_Tp* __ptr) const
 80824d8:	f7ff ffd5 	bl	8082486 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
	if (__ptr != nullptr)
 80824dc:	69a0      	ldr	r0, [r4, #24]
 80824de:	b108      	cbz	r0, 80824e4 <_ZN18AppWatchdogWrapperD1Ev+0x3c>
      operator()(_Tp* __ptr) const
 80824e0:	f7ff ffd1 	bl	8082486 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
 80824e4:	f104 0008 	add.w	r0, r4, #8
 80824e8:	f7fe f988 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
}
 80824ec:	4620      	mov	r0, r4
 80824ee:	bd10      	pop	{r4, pc}
 80824f0:	0808b754 	.word	0x0808b754

080824f4 <_ZN18AppWatchdogWrapperD0Ev>:
AppWatchdogWrapper::~AppWatchdogWrapper() {
 80824f4:	b510      	push	{r4, lr}
 80824f6:	4604      	mov	r4, r0
}
 80824f8:	f7ff ffd6 	bl	80824a8 <_ZN18AppWatchdogWrapperD1Ev>
 80824fc:	4620      	mov	r0, r4
 80824fe:	211c      	movs	r1, #28
 8082500:	f005 ffd5 	bl	80884ae <_ZdlPvj>
 8082504:	4620      	mov	r0, r4
 8082506:	bd10      	pop	{r4, pc}

08082508 <_ZN6ThreadC1EPKcPFvPvES2_hj>:
    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
 8082508:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 808250c:	4604      	mov	r4, r0
 808250e:	460e      	mov	r6, r1
        : d_(new(std::nothrow) Data)
 8082510:	2014      	movs	r0, #20
 8082512:	4916      	ldr	r1, [pc, #88]	; (808256c <_ZN6ThreadC1EPKcPFvPvES2_hj+0x64>)
    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
 8082514:	4690      	mov	r8, r2
 8082516:	461f      	mov	r7, r3
        : d_(new(std::nothrow) Data)
 8082518:	f005 ffcb 	bl	80884b2 <_ZnwjRKSt9nothrow_t>
 808251c:	b130      	cbz	r0, 808252c <_ZN6ThreadC1EPKcPFvPvES2_hj+0x24>
      : _M_head_impl() { }
 808251e:	2500      	movs	r5, #0
            exited(false) {
 8082520:	e9c0 5500 	strd	r5, r5, [r0]
 8082524:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8082528:	7405      	strb	r5, [r0, #16]
 808252a:	7445      	strb	r5, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 808252c:	6020      	str	r0, [r4, #0]
        if (!d_) {
 808252e:	b198      	cbz	r0, 8082558 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x50>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 8082530:	9b09      	ldr	r3, [sp, #36]	; 0x24
        d_->func_param = function_param;
 8082532:	e9c0 8702 	strd	r8, r7, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 8082536:	4631      	mov	r1, r6
 8082538:	e9cd 0300 	strd	r0, r3, [sp]
 808253c:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8082540:	4b0b      	ldr	r3, [pc, #44]	; (8082570 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x68>)
 8082542:	3004      	adds	r0, #4
 8082544:	f002 fae4 	bl	8084b10 <os_thread_create>
 8082548:	b930      	cbnz	r0, 8082558 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x50>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 808254a:	6823      	ldr	r3, [r4, #0]
        while (!d_->started) {
 808254c:	7c1b      	ldrb	r3, [r3, #16]
 808254e:	b94b      	cbnz	r3, 8082564 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x5c>
            HAL_Delay_Milliseconds(1);
 8082550:	2001      	movs	r0, #1
 8082552:	f002 fa9d 	bl	8084a90 <HAL_Delay_Milliseconds>
        while (!d_->started) {
 8082556:	e7f8      	b.n	808254a <_ZN6ThreadC1EPKcPFvPvES2_hj+0x42>
	_M_ptr() = __p;
 8082558:	2300      	movs	r3, #0
	const pointer __old_p = _M_ptr();
 808255a:	6820      	ldr	r0, [r4, #0]
	_M_ptr() = __p;
 808255c:	6023      	str	r3, [r4, #0]
	if (__old_p)
 808255e:	b108      	cbz	r0, 8082564 <_ZN6ThreadC1EPKcPFvPvES2_hj+0x5c>
      operator()(_Tp* __ptr) const
 8082560:	f7ff ff91 	bl	8082486 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
    }
 8082564:	4620      	mov	r0, r4
 8082566:	b002      	add	sp, #8
 8082568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808256c:	0808bd99 	.word	0x0808bd99
 8082570:	08082445 	.word	0x08082445

08082574 <_ZN18AppWatchdogWrapperC1Em>:
AppWatchdogWrapper::AppWatchdogWrapper(unsigned long timeoutMs) : wd(timeoutMs, watchdogCallback, 1800) {
 8082574:	b530      	push	{r4, r5, lr}
 8082576:	4b16      	ldr	r3, [pc, #88]	; (80825d0 <_ZN18AppWatchdogWrapperC1Em+0x5c>)
 8082578:	b087      	sub	sp, #28
 808257a:	6003      	str	r3, [r0, #0]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 808257c:	4b15      	ldr	r3, [pc, #84]	; (80825d4 <_ZN18AppWatchdogWrapperC1Em+0x60>)
 808257e:	4604      	mov	r4, r0
 8082580:	9302      	str	r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
 8082582:	4b15      	ldr	r3, [pc, #84]	; (80825d8 <_ZN18AppWatchdogWrapperC1Em+0x64>)
    static const unsigned DEFAULT_STACK_SIZE = 512;

	ApplicationWatchdog(unsigned timeout_ms, std::function<void(void)> fn, unsigned stack_size=DEFAULT_STACK_SIZE) :
		timeout(timeout_ms),
		timeout_fn(fn),
		thread("appwdt", start, this, OS_THREAD_PRIORITY_CRITICAL, stack_size)
 8082584:	6041      	str	r1, [r0, #4]
 8082586:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 8082588:	4b14      	ldr	r3, [pc, #80]	; (80825dc <_ZN18AppWatchdogWrapperC1Em+0x68>)
 808258a:	1d05      	adds	r5, r0, #4
 808258c:	9304      	str	r3, [sp, #16]
    _Function_base() : _M_manager(nullptr) { }
 808258e:	2300      	movs	r3, #0
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8082590:	a902      	add	r1, sp, #8
    _Function_base() : _M_manager(nullptr) { }
 8082592:	6103      	str	r3, [r0, #16]
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8082594:	2202      	movs	r2, #2
 8082596:	3008      	adds	r0, #8
 8082598:	f7fd fe79 	bl	808028e <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>
	  _M_invoker = __x._M_invoker;
 808259c:	9b05      	ldr	r3, [sp, #20]
 808259e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80825a2:	6163      	str	r3, [r4, #20]
	  _M_manager = __x._M_manager;
 80825a4:	9b04      	ldr	r3, [sp, #16]
 80825a6:	490e      	ldr	r1, [pc, #56]	; (80825e0 <_ZN18AppWatchdogWrapperC1Em+0x6c>)
 80825a8:	6123      	str	r3, [r4, #16]
 80825aa:	2309      	movs	r3, #9
 80825ac:	f104 0018 	add.w	r0, r4, #24
 80825b0:	e9cd 3200 	strd	r3, r2, [sp]
 80825b4:	462b      	mov	r3, r5
 80825b6:	4a0b      	ldr	r2, [pc, #44]	; (80825e4 <_ZN18AppWatchdogWrapperC1Em+0x70>)
 80825b8:	f7ff ffa6 	bl	8082508 <_ZN6ThreadC1EPKcPFvPvES2_hj>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80825bc:	f002 fa80 	bl	8084ac0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80825c0:	4b09      	ldr	r3, [pc, #36]	; (80825e8 <_ZN18AppWatchdogWrapperC1Em+0x74>)
 80825c2:	6018      	str	r0, [r3, #0]
    class function<_Res(_ArgTypes...)>
 80825c4:	a802      	add	r0, sp, #8
 80825c6:	f7fe f919 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
}
 80825ca:	4620      	mov	r0, r4
 80825cc:	b007      	add	sp, #28
 80825ce:	bd30      	pop	{r4, r5, pc}
 80825d0:	0808b754 	.word	0x0808b754
 80825d4:	08082475 	.word	0x08082475
 80825d8:	080802a3 	.word	0x080802a3
 80825dc:	0808028f 	.word	0x0808028f
 80825e0:	0808b744 	.word	0x0808b744
 80825e4:	08088381 	.word	0x08088381
 80825e8:	200009a8 	.word	0x200009a8

080825ec <_ZN12SessionCheck19subscriptionHandlerEPKcS1_>:
void SessionCheck::loop() {
	stateHandler(*this);
}

void SessionCheck::subscriptionHandler(const char *eventName, const char *data) {
	gotResponse = true;
 80825ec:	2301      	movs	r3, #1
 80825ee:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 80825f2:	4770      	bx	lr

080825f4 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM12SessionCheckFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE9_M_invokeERKSt9_Any_dataOS1_SH_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80825f4:	b470      	push	{r4, r5, r6}
	    return __source._M_access<_Functor*>();
 80825f6:	6803      	ldr	r3, [r0, #0]
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 80825f8:	6809      	ldr	r1, [r1, #0]
 80825fa:	685c      	ldr	r4, [r3, #4]
 80825fc:	689d      	ldr	r5, [r3, #8]
 80825fe:	1066      	asrs	r6, r4, #1
 8082600:	eb05 0064 	add.w	r0, r5, r4, asr #1
 8082604:	07e4      	lsls	r4, r4, #31
 8082606:	bf48      	it	mi
 8082608:	59ac      	ldrmi	r4, [r5, r6]
 808260a:	681b      	ldr	r3, [r3, #0]
 808260c:	6812      	ldr	r2, [r2, #0]
 808260e:	bf48      	it	mi
 8082610:	58e3      	ldrmi	r3, [r4, r3]
      }
 8082612:	bc70      	pop	{r4, r5, r6}
 8082614:	4718      	bx	r3

08082616 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM12SessionCheckFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	switch (__op)
 8082616:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8082618:	b538      	push	{r3, r4, r5, lr}
 808261a:	4604      	mov	r4, r0
	switch (__op)
 808261c:	d102      	bne.n	8082624 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM12SessionCheckFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
 808261e:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
 8082620:	6023      	str	r3, [r4, #0]
	}
 8082622:	e003      	b.n	808262c <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM12SessionCheckFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
	  switch (__op)
 8082624:	2a02      	cmp	r2, #2
 8082626:	d003      	beq.n	8082630 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM12SessionCheckFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1a>
 8082628:	2a03      	cmp	r2, #3
 808262a:	d00d      	beq.n	8082648 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM12SessionCheckFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x32>
      }
 808262c:	2000      	movs	r0, #0
 808262e:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 8082630:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
 8082632:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 8082634:	f7fd fd41 	bl	80800ba <_Znwj>
 8082638:	4603      	mov	r3, r0
 808263a:	2800      	cmp	r0, #0
 808263c:	d0f0      	beq.n	8082620 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM12SessionCheckFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
 808263e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8082642:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8082646:	e7eb      	b.n	8082620 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM12SessionCheckFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
 8082648:	6800      	ldr	r0, [r0, #0]
 808264a:	2800      	cmp	r0, #0
 808264c:	d0ee      	beq.n	808262c <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM12SessionCheckFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
 808264e:	210c      	movs	r1, #12
 8082650:	f005 ff2d 	bl	80884ae <_ZdlPvj>
 8082654:	e7ea      	b.n	808262c <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM12SessionCheckFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>

08082656 <_ZNSt17_Function_handlerIFvR12SessionCheckEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8082656:	4603      	mov	r3, r0
 8082658:	b410      	push	{r4}
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
 808265a:	6842      	ldr	r2, [r0, #4]
 808265c:	681b      	ldr	r3, [r3, #0]
 808265e:	1054      	asrs	r4, r2, #1
 8082660:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8082664:	07d2      	lsls	r2, r2, #31
 8082666:	bf48      	it	mi
 8082668:	590a      	ldrmi	r2, [r1, r4]
      }
 808266a:	bc10      	pop	{r4}
 808266c:	bf48      	it	mi
 808266e:	58d3      	ldrmi	r3, [r2, r3]
 8082670:	4718      	bx	r3

08082672 <_ZNSt17_Function_handlerIFvR12SessionCheckEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
 8082672:	2a01      	cmp	r2, #1
 8082674:	d102      	bne.n	808267c <_ZNSt17_Function_handlerIFvR12SessionCheckEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8082676:	6001      	str	r1, [r0, #0]
      }
 8082678:	2000      	movs	r0, #0
 808267a:	4770      	bx	lr
	  switch (__op)
 808267c:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 808267e:	bf04      	itt	eq
 8082680:	e9d1 2300 	ldrdeq	r2, r3, [r1]
 8082684:	e9c0 2300 	strdeq	r2, r3, [r0]
	      break;
 8082688:	e7f6      	b.n	8082678 <_ZNSt17_Function_handlerIFvR12SessionCheckEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6>
	...

0808268c <_ZN12SessionCheckD1Ev>:
SessionCheck::~SessionCheck() {
 808268c:	b510      	push	{r4, lr}
 808268e:	4604      	mov	r4, r0
 8082690:	4b05      	ldr	r3, [pc, #20]	; (80826a8 <_ZN12SessionCheckD1Ev+0x1c>)
 8082692:	f840 3b2c 	str.w	r3, [r0], #44
    class function<_Res(_ArgTypes...)>
 8082696:	f7fe f8b1 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
 808269a:	f104 0010 	add.w	r0, r4, #16
 808269e:	f002 ff75 	bl	808558c <_ZN6StringD1Ev>
}
 80826a2:	4620      	mov	r0, r4
 80826a4:	bd10      	pop	{r4, pc}
 80826a6:	bf00      	nop
 80826a8:	0808b788 	.word	0x0808b788

080826ac <_ZN12SessionCheckD0Ev>:
SessionCheck::~SessionCheck() {
 80826ac:	b510      	push	{r4, lr}
 80826ae:	4604      	mov	r4, r0
}
 80826b0:	f7ff ffec 	bl	808268c <_ZN12SessionCheckD1Ev>
 80826b4:	4620      	mov	r0, r4
 80826b6:	2140      	movs	r1, #64	; 0x40
 80826b8:	f005 fef9 	bl	80884ae <_ZdlPvj>
 80826bc:	4620      	mov	r0, r4
 80826be:	bd10      	pop	{r4, pc}

080826c0 <_ZNSt8functionIFvR12SessionCheckEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>:
	operator=(_Functor&& __f)
 80826c0:	b510      	push	{r4, lr}
 80826c2:	4603      	mov	r3, r0
 80826c4:	e9d1 0200 	ldrd	r0, r2, [r1]
    _Function_base() : _M_manager(nullptr) { }
 80826c8:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
 80826ca:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
 80826cc:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
 80826ce:	b908      	cbnz	r0, 80826d4 <_ZNSt8functionIFvR12SessionCheckEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x14>
 80826d0:	07d1      	lsls	r1, r2, #31
 80826d2:	d505      	bpl.n	80826e0 <_ZNSt8functionIFvR12SessionCheckEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 80826d4:	e9cd 0202 	strd	r0, r2, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
 80826d8:	4a0f      	ldr	r2, [pc, #60]	; (8082718 <_ZNSt8functionIFvR12SessionCheckEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x58>)
 80826da:	9205      	str	r2, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 80826dc:	4a0f      	ldr	r2, [pc, #60]	; (808271c <_ZNSt8functionIFvR12SessionCheckEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x5c>)
 80826de:	9204      	str	r2, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80826e0:	466c      	mov	r4, sp
 80826e2:	aa02      	add	r2, sp, #8
 80826e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80826e8:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80826ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80826f0:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80826f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80826f8:	e883 0003 	stmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80826fc:	9904      	ldr	r1, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80826fe:	6898      	ldr	r0, [r3, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8082700:	6099      	str	r1, [r3, #8]
      __a = _GLIBCXX_MOVE(__b);
 8082702:	9004      	str	r0, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082704:	9905      	ldr	r1, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8082706:	68d8      	ldr	r0, [r3, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8082708:	60d9      	str	r1, [r3, #12]
      __a = _GLIBCXX_MOVE(__b);
 808270a:	9005      	str	r0, [sp, #20]
    class function<_Res(_ArgTypes...)>
 808270c:	4610      	mov	r0, r2
 808270e:	f7fe f875 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
	}
 8082712:	b006      	add	sp, #24
 8082714:	bd10      	pop	{r4, pc}
 8082716:	bf00      	nop
 8082718:	08082657 	.word	0x08082657
 808271c:	08082673 	.word	0x08082673

08082720 <_ZN12SessionCheckC1ExPKc>:
SessionCheck::SessionCheck(time_t checkPeriodSecs, const char *eventSuffix) : checkPeriodSecs(checkPeriodSecs) {
 8082720:	b530      	push	{r4, r5, lr}
 8082722:	4919      	ldr	r1, [pc, #100]	; (8082788 <_ZN12SessionCheckC1ExPKc+0x68>)
 8082724:	f100 0510 	add.w	r5, r0, #16
 8082728:	b089      	sub	sp, #36	; 0x24
 808272a:	4604      	mov	r4, r0
 808272c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8082730:	6001      	str	r1, [r0, #0]
 8082732:	4916      	ldr	r1, [pc, #88]	; (808278c <_ZN12SessionCheckC1ExPKc+0x6c>)
 8082734:	4628      	mov	r0, r5
 8082736:	f002 ff73 	bl	8085620 <_ZN6StringC1EPK19__FlashStringHelper>
 808273a:	2300      	movs	r3, #0
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 808273c:	4a14      	ldr	r2, [pc, #80]	; (8082790 <_ZN12SessionCheckC1ExPKc+0x70>)
 808273e:	6223      	str	r3, [r4, #32]
 8082740:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
 8082744:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8082748:	62a3      	str	r3, [r4, #40]	; 0x28
	    _M_invoker = &_My_handler::_M_invoke;
 808274a:	4b12      	ldr	r3, [pc, #72]	; (8082794 <_ZN12SessionCheckC1ExPKc+0x74>)
        return spark_deviceID();
 808274c:	a804      	add	r0, sp, #16
 808274e:	63a3      	str	r3, [r4, #56]	; 0x38
	    _M_manager = &_My_handler::_M_manager;
 8082750:	4b11      	ldr	r3, [pc, #68]	; (8082798 <_ZN12SessionCheckC1ExPKc+0x78>)
 8082752:	6363      	str	r3, [r4, #52]	; 0x34
 8082754:	f002 fcbc 	bl	80850d0 <spark_deviceID>
	StringSumHelper(const String &s) : String(s) {}
 8082758:	a904      	add	r1, sp, #16
 808275a:	4668      	mov	r0, sp
 808275c:	f002 ffaa 	bl	80856b4 <_ZN6StringC1ERKS_>
	eventName = System.deviceID() + "/" + eventSuffix;
 8082760:	4668      	mov	r0, sp
 8082762:	490e      	ldr	r1, [pc, #56]	; (808279c <_ZN12SessionCheckC1ExPKc+0x7c>)
 8082764:	f002 ffed 	bl	8085742 <_ZplRK15StringSumHelperPKc>
 8082768:	990c      	ldr	r1, [sp, #48]	; 0x30
 808276a:	f002 ffea 	bl	8085742 <_ZplRK15StringSumHelperPKc>
 808276e:	4601      	mov	r1, r0
 8082770:	4628      	mov	r0, r5
 8082772:	f002 ff90 	bl	8085696 <_ZN6StringaSERKS_>
class StringSumHelper : public String
 8082776:	4668      	mov	r0, sp
 8082778:	f002 ff08 	bl	808558c <_ZN6StringD1Ev>
 808277c:	a804      	add	r0, sp, #16
 808277e:	f002 ff05 	bl	808558c <_ZN6StringD1Ev>
}
 8082782:	4620      	mov	r0, r4
 8082784:	b009      	add	sp, #36	; 0x24
 8082786:	bd30      	pop	{r4, r5, pc}
 8082788:	0808b788 	.word	0x0808b788
 808278c:	0808b6b8 	.word	0x0808b6b8
 8082790:	08082815 	.word	0x08082815
 8082794:	08082657 	.word	0x08082657
 8082798:	08082673 	.word	0x08082673
 808279c:	0808b75c 	.word	0x0808b75c

080827a0 <_ZN12SessionCheck4loopEv>:
void SessionCheck::loop() {
 80827a0:	b510      	push	{r4, lr}
      if (_M_empty())
 80827a2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80827a4:	4601      	mov	r1, r0
 80827a6:	b90b      	cbnz	r3, 80827ac <_ZN12SessionCheck4loopEv+0xc>
	__throw_bad_function_call();
 80827a8:	f005 fe87 	bl	80884ba <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80827ac:	6b83      	ldr	r3, [r0, #56]	; 0x38
}
 80827ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80827b2:	302c      	adds	r0, #44	; 0x2c
 80827b4:	4718      	bx	r3
	...

080827b8 <_ZN12SessionCheck9sendEventEv>:
	numFailures = 0;

	sendEvent();
}

void SessionCheck::sendEvent() {
 80827b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	gotResponse = false;
 80827ba:	2300      	movs	r3, #0
	stateHandler = &SessionCheck::waitForResponseState;
 80827bc:	4a10      	ldr	r2, [pc, #64]	; (8082800 <_ZN12SessionCheck9sendEventEv+0x48>)
void SessionCheck::sendEvent() {
 80827be:	4604      	mov	r4, r0
	gotResponse = false;
 80827c0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
	stateHandler = &SessionCheck::waitForResponseState;
 80827c4:	a902      	add	r1, sp, #8
 80827c6:	302c      	adds	r0, #44	; 0x2c
 80827c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80827cc:	f7ff ff78 	bl	80826c0 <_ZNSt8functionIFvR12SessionCheckEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
 80827d0:	f002 f976 	bl	8084ac0 <HAL_Timer_Get_Milli_Seconds>
	stateTime = millis();

	Log.info("publishing session check event %s", eventName.c_str());
 80827d4:	6922      	ldr	r2, [r4, #16]
	stateTime = millis();
 80827d6:	6220      	str	r0, [r4, #32]
	Log.info("publishing session check event %s", eventName.c_str());
 80827d8:	490a      	ldr	r1, [pc, #40]	; (8082804 <_ZN12SessionCheck9sendEventEv+0x4c>)
 80827da:	480b      	ldr	r0, [pc, #44]	; (8082808 <_ZN12SessionCheck9sendEventEv+0x50>)
 80827dc:	f7ff fcee 	bl	80821bc <_ZNK5spark6Logger4infoEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80827e0:	4b0a      	ldr	r3, [pc, #40]	; (808280c <_ZN12SessionCheck9sendEventEv+0x54>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80827e2:	4a0b      	ldr	r2, [pc, #44]	; (8082810 <_ZN12SessionCheck9sendEventEv+0x58>)
 80827e4:	781b      	ldrb	r3, [r3, #0]
 80827e6:	6921      	ldr	r1, [r4, #16]
 80827e8:	f88d 3000 	strb.w	r3, [sp]
 80827ec:	a802      	add	r0, sp, #8
 80827ee:	233c      	movs	r3, #60	; 0x3c
 80827f0:	f004 fdb6 	bl	8087360 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      ~__shared_ptr() = default;
 80827f4:	a803      	add	r0, sp, #12
 80827f6:	f7fe f87b 	bl	80808f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

	// Post our event
	Particle.publish(eventName, "", PRIVATE);
}
 80827fa:	b004      	add	sp, #16
 80827fc:	bd10      	pop	{r4, pc}
 80827fe:	bf00      	nop
 8082800:	08082871 	.word	0x08082871
 8082804:	0808b75e 	.word	0x0808b75e
 8082808:	20000404 	.word	0x20000404
 808280c:	200002f4 	.word	0x200002f4
 8082810:	0808b6b8 	.word	0x0808b6b8

08082814 <_ZN12SessionCheck15waitToSendStateEv>:
void SessionCheck::waitToSendState() {
 8082814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082816:	4604      	mov	r4, r0
 8082818:	f002 f952 	bl	8084ac0 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - stateTime < CHECK_PERIOD_MS) {
 808281c:	6a23      	ldr	r3, [r4, #32]
 808281e:	1ac0      	subs	r0, r0, r3
 8082820:	f247 532f 	movw	r3, #29999	; 0x752f
 8082824:	4298      	cmp	r0, r3
 8082826:	d920      	bls.n	808286a <_ZN12SessionCheck15waitToSendStateEv+0x56>
 8082828:	f002 f94a 	bl	8084ac0 <HAL_Timer_Get_Milli_Seconds>
	stateTime = millis();
 808282c:	6220      	str	r0, [r4, #32]
	if (!Time.isValid()) {
 808282e:	f004 fa49 	bl	8086cc4 <_ZN9TimeClass7isValidEv>
 8082832:	b1d0      	cbz	r0, 808286a <_ZN12SessionCheck15waitToSendStateEv+0x56>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8082834:	f002 fc44 	bl	80850c0 <spark_cloud_flag_connected>
	if (!Particle.connected()) {
 8082838:	b1b8      	cbz	r0, 808286a <_ZN12SessionCheck15waitToSendStateEv+0x56>
	time_t now = Time.now();
 808283a:	f004 fa60 	bl	8086cfe <_ZN9TimeClass3nowEv>
	if (now - sessionRetainedData.lastCheckSecs < checkPeriodSecs) {
 808283e:	e9d4 7602 	ldrd	r7, r6, [r4, #8]
 8082842:	4b0a      	ldr	r3, [pc, #40]	; (808286c <_ZN12SessionCheck15waitToSendStateEv+0x58>)
	time_t now = Time.now();
 8082844:	17c5      	asrs	r5, r0, #31
	if (now - sessionRetainedData.lastCheckSecs < checkPeriodSecs) {
 8082846:	e9d3 2102 	ldrd	r2, r1, [r3, #8]
 808284a:	1a82      	subs	r2, r0, r2
 808284c:	eb65 0101 	sbc.w	r1, r5, r1
 8082850:	42ba      	cmp	r2, r7
 8082852:	eb71 0206 	sbcs.w	r2, r1, r6
 8082856:	db08      	blt.n	808286a <_ZN12SessionCheck15waitToSendStateEv+0x56>
	sessionRetainedData.lastCheckSecs = now;
 8082858:	e9c3 0502 	strd	r0, r5, [r3, #8]
	numFailures = 0;
 808285c:	2300      	movs	r3, #0
	sendEvent();
 808285e:	4620      	mov	r0, r4
	numFailures = 0;
 8082860:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8082862:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	sendEvent();
 8082866:	f7ff bfa7 	b.w	80827b8 <_ZN12SessionCheck9sendEventEv>
}
 808286a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808286c:	40024008 	.word	0x40024008

08082870 <_ZN12SessionCheck20waitForResponseStateEv>:

void SessionCheck::waitForResponseState() {
 8082870:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (gotResponse) {
 8082872:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
void SessionCheck::waitForResponseState() {
 8082876:	4604      	mov	r4, r0
	if (gotResponse) {
 8082878:	b153      	cbz	r3, 8082890 <_ZN12SessionCheck20waitForResponseStateEv+0x20>
		// Success
		stateHandler = &SessionCheck::waitToSendState;
 808287a:	4b23      	ldr	r3, [pc, #140]	; (8082908 <_ZN12SessionCheck20waitForResponseStateEv+0x98>)
 808287c:	a902      	add	r1, sp, #8
 808287e:	9302      	str	r3, [sp, #8]
 8082880:	2300      	movs	r3, #0
 8082882:	302c      	adds	r0, #44	; 0x2c
 8082884:	9303      	str	r3, [sp, #12]
 8082886:	f7ff ff1b 	bl	80826c0 <_ZNSt8functionIFvR12SessionCheckEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
 808288a:	f002 f919 	bl	8084ac0 <HAL_Timer_Get_Milli_Seconds>
		stateTime = millis();
 808288e:	6220      	str	r0, [r4, #32]
 8082890:	f002 f916 	bl	8084ac0 <HAL_Timer_Get_Milli_Seconds>
	}

	if (millis() - stateTime < RECEIVE_TIMEOUT_MS) {
 8082894:	6a23      	ldr	r3, [r4, #32]
 8082896:	1ac0      	subs	r0, r0, r3
 8082898:	f64a 73c7 	movw	r3, #44999	; 0xafc7
 808289c:	4298      	cmp	r0, r3
 808289e:	d930      	bls.n	8082902 <_ZN12SessionCheck20waitForResponseStateEv+0x92>
		// Waiting still
		return;
	}

	ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_SESSION_EVENT_LOST);
 80828a0:	2100      	movs	r1, #0
 80828a2:	200e      	movs	r0, #14
 80828a4:	f000 f9a0 	bl	8082be8 <_ZN16ConnectionEvents8addEventEii>

	// Failed to receive event
	if (++numFailures < NUM_FAILURES_BEFORE_RESET_SESSION) {
 80828a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80828aa:	3301      	adds	r3, #1
 80828ac:	2b01      	cmp	r3, #1
 80828ae:	62a3      	str	r3, [r4, #40]	; 0x28
 80828b0:	dc05      	bgt.n	80828be <_ZN12SessionCheck20waitForResponseStateEv+0x4e>
		// Try sending again just in case
		sendEvent();
 80828b2:	4620      	mov	r0, r4
		ConnectionCheck::getInstance()->fullModemReset();
	}
	else {
		System.reset();
	}
}
 80828b4:	b004      	add	sp, #16
 80828b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		sendEvent();
 80828ba:	f7ff bf7d 	b.w	80827b8 <_ZN12SessionCheck9sendEventEv>
	ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_SESSION_RESET);
 80828be:	2100      	movs	r1, #0
 80828c0:	200f      	movs	r0, #15
 80828c2:	f000 f991 	bl	8082be8 <_ZN16ConnectionEvents8addEventEii>
 80828c6:	4b11      	ldr	r3, [pc, #68]	; (808290c <_ZN12SessionCheck20waitForResponseStateEv+0x9c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80828c8:	4a11      	ldr	r2, [pc, #68]	; (8082910 <_ZN12SessionCheck20waitForResponseStateEv+0xa0>)
 80828ca:	781b      	ldrb	r3, [r3, #0]
 80828cc:	4911      	ldr	r1, [pc, #68]	; (8082914 <_ZN12SessionCheck20waitForResponseStateEv+0xa4>)
 80828ce:	f88d 3000 	strb.w	r3, [sp]
 80828d2:	a802      	add	r0, sp, #8
 80828d4:	233c      	movs	r3, #60	; 0x3c
 80828d6:	f004 fd43 	bl	8087360 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80828da:	a803      	add	r0, sp, #12
 80828dc:	f7fe f808 	bl	80808f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	delay(2000);
 80828e0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80828e4:	f004 fa26 	bl	8086d34 <delay>
 80828e8:	4b0b      	ldr	r3, [pc, #44]	; (8082918 <_ZN12SessionCheck20waitForResponseStateEv+0xa8>)
 80828ea:	6818      	ldr	r0, [r3, #0]
	if (ConnectionCheck::getInstance()) {
 80828ec:	b120      	cbz	r0, 80828f8 <_ZN12SessionCheck20waitForResponseStateEv+0x88>
}
 80828ee:	b004      	add	sp, #16
 80828f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ConnectionCheck::getInstance()->fullModemReset();
 80828f4:	f7ff bcc0 	b.w	8082278 <_ZN15ConnectionCheck14fullModemResetEv>
}
 80828f8:	b004      	add	sp, #16
 80828fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		System.reset();
 80828fe:	f002 bda4 	b.w	808544a <_ZN11SystemClass5resetEv>
}
 8082902:	b004      	add	sp, #16
 8082904:	bd10      	pop	{r4, pc}
 8082906:	bf00      	nop
 8082908:	08082815 	.word	0x08082815
 808290c:	200002f4 	.word	0x200002f4
 8082910:	0808b6b8 	.word	0x0808b6b8
 8082914:	0808b632 	.word	0x0808b632
 8082918:	200002f0 	.word	0x200002f0

0808291c <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 808291c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 808291e:	2300      	movs	r3, #0
 8082920:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 8082922:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 8082924:	4604      	mov	r4, r0
 8082926:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 8082928:	b12b      	cbz	r3, 8082936 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 808292a:	2202      	movs	r2, #2
 808292c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 808292e:	68eb      	ldr	r3, [r5, #12]
 8082930:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8082932:	68ab      	ldr	r3, [r5, #8]
 8082934:	60a3      	str	r3, [r4, #8]
    }
 8082936:	4620      	mov	r0, r4
 8082938:	bd38      	pop	{r3, r4, r5, pc}
	...

0808293c <_ZN12SessionCheck5setupEv>:
void SessionCheck::setup() {
 808293c:	b570      	push	{r4, r5, r6, lr}
	if (sessionRetainedData.magic != SESSION_MAGIC) {
 808293e:	4b1d      	ldr	r3, [pc, #116]	; (80829b4 <_ZN12SessionCheck5setupEv+0x78>)
 8082940:	4a1d      	ldr	r2, [pc, #116]	; (80829b8 <_ZN12SessionCheck5setupEv+0x7c>)
 8082942:	6819      	ldr	r1, [r3, #0]
void SessionCheck::setup() {
 8082944:	4604      	mov	r4, r0
	if (sessionRetainedData.magic != SESSION_MAGIC) {
 8082946:	4291      	cmp	r1, r2
void SessionCheck::setup() {
 8082948:	b08a      	sub	sp, #40	; 0x28
	if (sessionRetainedData.magic != SESSION_MAGIC) {
 808294a:	d004      	beq.n	8082956 <_ZN12SessionCheck5setupEv+0x1a>
		sessionRetainedData.lastCheckSecs = 0;
 808294c:	2000      	movs	r0, #0
 808294e:	2100      	movs	r1, #0
 8082950:	e9c3 0102 	strd	r0, r1, [r3, #8]
		sessionRetainedData.magic = SESSION_MAGIC;
 8082954:	601a      	str	r2, [r3, #0]
    _Function_base() : _M_manager(nullptr) { }
 8082956:	2500      	movs	r5, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082958:	200c      	movs	r0, #12
	const char * c_str() const { return buffer; }
 808295a:	6926      	ldr	r6, [r4, #16]
    _Function_base() : _M_manager(nullptr) { }
 808295c:	9504      	str	r5, [sp, #16]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808295e:	f7fd fbac 	bl	80800ba <_Znwj>
 8082962:	b118      	cbz	r0, 808296c <_ZN12SessionCheck5setupEv+0x30>
      _Bind(_Bind&&) = default;
 8082964:	4b15      	ldr	r3, [pc, #84]	; (80829bc <_ZN12SessionCheck5setupEv+0x80>)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8082966:	6084      	str	r4, [r0, #8]
 8082968:	e9c0 3500 	strd	r3, r5, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
 808296c:	4b14      	ldr	r3, [pc, #80]	; (80829c0 <_ZN12SessionCheck5setupEv+0x84>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808296e:	9002      	str	r0, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
 8082970:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 8082972:	4b14      	ldr	r3, [pc, #80]	; (80829c4 <_ZN12SessionCheck5setupEv+0x88>)
        return subscribe_wiring(eventName, handler, scope);
 8082974:	a902      	add	r1, sp, #8
 8082976:	a806      	add	r0, sp, #24
 8082978:	9304      	str	r3, [sp, #16]
 808297a:	f7ff ffcf 	bl	808291c <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
        if (handler) // if the call-wrapper has wrapped a callable object
 808297e:	9b08      	ldr	r3, [sp, #32]
 8082980:	b17b      	cbz	r3, 80829a2 <_ZN12SessionCheck5setupEv+0x66>
            auto wrapper = new wiring_event_handler_t(handler);
 8082982:	2010      	movs	r0, #16
 8082984:	f7fd fb99 	bl	80800ba <_Znwj>
 8082988:	4604      	mov	r4, r0
 808298a:	b150      	cbz	r0, 80829a2 <_ZN12SessionCheck5setupEv+0x66>
 808298c:	a906      	add	r1, sp, #24
 808298e:	f7ff ffc5 	bl	808291c <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
                success = spark_subscribe(eventName, (EventHandler)call_wiring_event_handler, wrapper, scope, deviceID, NULL);
 8082992:	2300      	movs	r3, #0
 8082994:	4622      	mov	r2, r4
 8082996:	4630      	mov	r0, r6
 8082998:	e9cd 3300 	strd	r3, r3, [sp]
 808299c:	490a      	ldr	r1, [pc, #40]	; (80829c8 <_ZN12SessionCheck5setupEv+0x8c>)
 808299e:	f002 fba7 	bl	80850f0 <spark_subscribe>
    class function<_Res(_ArgTypes...)>
 80829a2:	a806      	add	r0, sp, #24
 80829a4:	f7fd ff2a 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
 80829a8:	a802      	add	r0, sp, #8
 80829aa:	f7fd ff27 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
}
 80829ae:	b00a      	add	sp, #40	; 0x28
 80829b0:	bd70      	pop	{r4, r5, r6, pc}
 80829b2:	bf00      	nop
 80829b4:	40024008 	.word	0x40024008
 80829b8:	4a6849fe 	.word	0x4a6849fe
 80829bc:	080825ed 	.word	0x080825ed
 80829c0:	080825f5 	.word	0x080825f5
 80829c4:	08082617 	.word	0x08082617
 80829c8:	08087123 	.word	0x08087123

080829cc <_GLOBAL__sub_I__ZN12SessionCheck19sessionRetainedDataE>:
        val_(val) {
 80829cc:	2201      	movs	r2, #1
 80829ce:	4b01      	ldr	r3, [pc, #4]	; (80829d4 <_GLOBAL__sub_I__ZN12SessionCheck19sessionRetainedDataE+0x8>)
 80829d0:	701a      	strb	r2, [r3, #0]
}
 80829d2:	4770      	bx	lr
 80829d4:	200002f4 	.word	0x200002f4

080829d8 <_ZN16ConnectionEventsD1Ev>:
	instance = this;
}

ConnectionEvents::~ConnectionEvents() {

}
 80829d8:	4770      	bx	lr

080829da <_ZN16ConnectionEventsD0Ev>:
ConnectionEvents::~ConnectionEvents() {
 80829da:	b510      	push	{r4, lr}
 80829dc:	4604      	mov	r4, r0
}
 80829de:	210c      	movs	r1, #12
 80829e0:	f005 fd65 	bl	80884ae <_ZdlPvj>
 80829e4:	4620      	mov	r0, r4
 80829e6:	bd10      	pop	{r4, pc}

080829e8 <_ZN16ConnectionEvents4loopEv.part.0>:
	}
}

// This should be called from loop()
// If there are queued events and there is a cloud connection they're published, oldest first.
void ConnectionEvents::loop() {
 80829e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	}

	// Send events
	char buf[256]; // 255 data bytes, plus null-terminator
	size_t numHandled;
	size_t offset = 0;
 80829ec:	f04f 0800 	mov.w	r8, #0
 80829f0:	4d30      	ldr	r5, [pc, #192]	; (8082ab4 <_ZN16ConnectionEvents4loopEv.part.0+0xcc>)
void ConnectionEvents::loop() {
 80829f2:	4607      	mov	r7, r0

	// Pack as many events as we have, up to what will fit in a 255 byte publish
	for(numHandled = 0; numHandled < connectionEventData.eventCount; numHandled++) {
 80829f4:	4646      	mov	r6, r8
 80829f6:	462c      	mov	r4, r5
		char entryBuf[64];

		ConnectionEventInfo *ev = &connectionEventData.events[numHandled];
		size_t len = snprintf(entryBuf, sizeof(entryBuf), "%lu,%lu,%d,%d;", ev->tsDate, ev->tsMillis, ev->eventCode, ev->data);
 80829f8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8082ab8 <_ZN16ConnectionEvents4loopEv.part.0+0xd0>
void ConnectionEvents::loop() {
 80829fc:	b0d4      	sub	sp, #336	; 0x150
	for(numHandled = 0; numHandled < connectionEventData.eventCount; numHandled++) {
 80829fe:	6863      	ldr	r3, [r4, #4]
 8082a00:	42b3      	cmp	r3, r6
 8082a02:	d91b      	bls.n	8082a3c <_ZN16ConnectionEvents4loopEv.part.0+0x54>
		size_t len = snprintf(entryBuf, sizeof(entryBuf), "%lu,%lu,%d,%d;", ev->tsDate, ev->tsMillis, ev->eventCode, ev->data);
 8082a04:	696b      	ldr	r3, [r5, #20]
 8082a06:	4652      	mov	r2, sl
 8082a08:	9302      	str	r3, [sp, #8]
 8082a0a:	692b      	ldr	r3, [r5, #16]
 8082a0c:	2140      	movs	r1, #64	; 0x40
 8082a0e:	9301      	str	r3, [sp, #4]
 8082a10:	68eb      	ldr	r3, [r5, #12]
 8082a12:	a804      	add	r0, sp, #16
 8082a14:	9300      	str	r3, [sp, #0]
 8082a16:	68ab      	ldr	r3, [r5, #8]
 8082a18:	f002 fbaa 	bl	8085170 <snprintf>
		if ((offset + len) >= sizeof(buf)) {
 8082a1c:	eb00 0908 	add.w	r9, r0, r8
 8082a20:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8082a24:	f105 0510 	add.w	r5, r5, #16
 8082a28:	d808      	bhi.n	8082a3c <_ZN16ConnectionEvents4loopEv.part.0+0x54>
			// Not enough buffer space to send in this publish; try again later
			break;
		}
		strcpy(&buf[offset], entryBuf);
 8082a2a:	ab14      	add	r3, sp, #80	; 0x50
 8082a2c:	eb03 0008 	add.w	r0, r3, r8
 8082a30:	a904      	add	r1, sp, #16
 8082a32:	f008 f95e 	bl	808acf2 <strcpy>
	for(numHandled = 0; numHandled < connectionEventData.eventCount; numHandled++) {
 8082a36:	46c8      	mov	r8, r9
 8082a38:	3601      	adds	r6, #1
 8082a3a:	e7e0      	b.n	80829fe <_ZN16ConnectionEvents4loopEv.part.0+0x16>
		offset += len;
	}
	connectionEventData.eventCount -= numHandled;
 8082a3c:	6862      	ldr	r2, [r4, #4]
 8082a3e:	1b92      	subs	r2, r2, r6
 8082a40:	6062      	str	r2, [r4, #4]
	if (connectionEventData.eventCount > 0) {
 8082a42:	2a00      	cmp	r2, #0
 8082a44:	d02f      	beq.n	8082aa6 <_ZN16ConnectionEvents4loopEv.part.0+0xbe>
		Log.info("couldn't send all events, saving %d for later", connectionEventData.eventCount);
 8082a46:	491d      	ldr	r1, [pc, #116]	; (8082abc <_ZN16ConnectionEvents4loopEv.part.0+0xd4>)
 8082a48:	481d      	ldr	r0, [pc, #116]	; (8082ac0 <_ZN16ConnectionEvents4loopEv.part.0+0xd8>)
 8082a4a:	f7ff fbb7 	bl	80821bc <_ZNK5spark6Logger4infoEPKcz>
		memmove(&connectionEventData.events[0], &connectionEventData.events[numHandled], connectionEventData.eventCount * sizeof(ConnectionEventData));
 8082a4e:	f44f 7202 	mov.w	r2, #520	; 0x208
 8082a52:	6863      	ldr	r3, [r4, #4]
 8082a54:	eb04 1106 	add.w	r1, r4, r6, lsl #4
 8082a58:	435a      	muls	r2, r3
 8082a5a:	481a      	ldr	r0, [pc, #104]	; (8082ac4 <_ZN16ConnectionEvents4loopEv.part.0+0xdc>)
 8082a5c:	3108      	adds	r1, #8
 8082a5e:	f008 f8d7 	bl	808ac10 <memmove>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 8082a62:	4b19      	ldr	r3, [pc, #100]	; (8082ac8 <_ZN16ConnectionEvents4loopEv.part.0+0xe0>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8082a64:	6879      	ldr	r1, [r7, #4]
 8082a66:	781b      	ldrb	r3, [r3, #0]
 8082a68:	aa14      	add	r2, sp, #80	; 0x50
 8082a6a:	f88d 3000 	strb.w	r3, [sp]
 8082a6e:	a804      	add	r0, sp, #16
 8082a70:	233c      	movs	r3, #60	; 0x3c
 8082a72:	f004 fc75 	bl	8087360 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
 8082a76:	9c05      	ldr	r4, [sp, #20]
 8082a78:	b17c      	cbz	r4, 8082a9a <_ZN16ConnectionEvents4loopEv.part.0+0xb2>
      if (--_M_use_count == 0)
 8082a7a:	6863      	ldr	r3, [r4, #4]
 8082a7c:	3b01      	subs	r3, #1
 8082a7e:	6063      	str	r3, [r4, #4]
 8082a80:	b95b      	cbnz	r3, 8082a9a <_ZN16ConnectionEvents4loopEv.part.0+0xb2>
          _M_dispose();
 8082a82:	6823      	ldr	r3, [r4, #0]
 8082a84:	4620      	mov	r0, r4
 8082a86:	689b      	ldr	r3, [r3, #8]
 8082a88:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8082a8a:	68a3      	ldr	r3, [r4, #8]
 8082a8c:	3b01      	subs	r3, #1
 8082a8e:	60a3      	str	r3, [r4, #8]
 8082a90:	b91b      	cbnz	r3, 8082a9a <_ZN16ConnectionEvents4loopEv.part.0+0xb2>
            _M_destroy();
 8082a92:	6823      	ldr	r3, [r4, #0]
 8082a94:	4620      	mov	r0, r4
 8082a96:	68db      	ldr	r3, [r3, #12]
 8082a98:	4798      	blx	r3
 8082a9a:	f002 f811 	bl	8084ac0 <HAL_Timer_Get_Milli_Seconds>
	else {
		Log.info("sent %d events", numHandled);
	}

	Particle.publish(connectionEventName, buf, PRIVATE);
	connectionEventLastSent = millis();
 8082a9e:	60b8      	str	r0, [r7, #8]
}
 8082aa0:	b054      	add	sp, #336	; 0x150
 8082aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		Log.info("sent %d events", numHandled);
 8082aa6:	4632      	mov	r2, r6
 8082aa8:	4908      	ldr	r1, [pc, #32]	; (8082acc <_ZN16ConnectionEvents4loopEv.part.0+0xe4>)
 8082aaa:	4805      	ldr	r0, [pc, #20]	; (8082ac0 <_ZN16ConnectionEvents4loopEv.part.0+0xd8>)
 8082aac:	f7ff fb86 	bl	80821bc <_ZNK5spark6Logger4infoEPKcz>
 8082ab0:	e7d7      	b.n	8082a62 <_ZN16ConnectionEvents4loopEv.part.0+0x7a>
 8082ab2:	bf00      	nop
 8082ab4:	40024018 	.word	0x40024018
 8082ab8:	0808b790 	.word	0x0808b790
 8082abc:	0808b79f 	.word	0x0808b79f
 8082ac0:	20000404 	.word	0x20000404
 8082ac4:	40024020 	.word	0x40024020
 8082ac8:	200002f5 	.word	0x200002f5
 8082acc:	0808b7cd 	.word	0x0808b7cd

08082ad0 <_ZN16ConnectionEventsC1EPKc>:
ConnectionEvents::ConnectionEvents(const char *connectionEventName) : connectionEventName(connectionEventName) {
 8082ad0:	4a03      	ldr	r2, [pc, #12]	; (8082ae0 <_ZN16ConnectionEventsC1EPKc+0x10>)
 8082ad2:	e9c0 2100 	strd	r2, r1, [r0]
 8082ad6:	2200      	movs	r2, #0
 8082ad8:	6082      	str	r2, [r0, #8]
	instance = this;
 8082ada:	4a02      	ldr	r2, [pc, #8]	; (8082ae4 <_ZN16ConnectionEventsC1EPKc+0x14>)
 8082adc:	6010      	str	r0, [r2, #0]
}
 8082ade:	4770      	bx	lr
 8082ae0:	0808b848 	.word	0x0808b848
 8082ae4:	200002f8 	.word	0x200002f8

08082ae8 <_ZN16ConnectionEvents4loopEv>:
void ConnectionEvents::loop() {
 8082ae8:	b510      	push	{r4, lr}
	if (connectionEventData.eventCount == 0) {
 8082aea:	4b0a      	ldr	r3, [pc, #40]	; (8082b14 <_ZN16ConnectionEvents4loopEv+0x2c>)
void ConnectionEvents::loop() {
 8082aec:	4604      	mov	r4, r0
	if (connectionEventData.eventCount == 0) {
 8082aee:	685b      	ldr	r3, [r3, #4]
 8082af0:	b17b      	cbz	r3, 8082b12 <_ZN16ConnectionEvents4loopEv+0x2a>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8082af2:	f002 fae5 	bl	80850c0 <spark_cloud_flag_connected>
	if (!Particle.connected()) {
 8082af6:	b160      	cbz	r0, 8082b12 <_ZN16ConnectionEvents4loopEv+0x2a>
 8082af8:	f001 ffe2 	bl	8084ac0 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - connectionEventLastSent < PUBLISH_MIN_PERIOD_MS) {
 8082afc:	68a3      	ldr	r3, [r4, #8]
 8082afe:	1ac0      	subs	r0, r0, r3
 8082b00:	f240 33f1 	movw	r3, #1009	; 0x3f1
 8082b04:	4298      	cmp	r0, r3
 8082b06:	d904      	bls.n	8082b12 <_ZN16ConnectionEvents4loopEv+0x2a>
 8082b08:	4620      	mov	r0, r4
}
 8082b0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8082b0e:	f7ff bf6b 	b.w	80829e8 <_ZN16ConnectionEvents4loopEv.part.0>
 8082b12:	bd10      	pop	{r4, pc}
 8082b14:	40024018 	.word	0x40024018

08082b18 <_ZN16ConnectionEvents3addEii>:

// Add a new event. This should only be called from the main loop thread.
// Do not call from other threads like the system thread, software timer, or interrupt service routine.
void ConnectionEvents::add(int eventCode, int data /* = 0 */) {
 8082b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (connectionEventData.eventCount >= CONNECTION_EVENTS_MAX_EVENTS) {
 8082b1c:	4c17      	ldr	r4, [pc, #92]	; (8082b7c <_ZN16ConnectionEvents3addEii+0x64>)
void ConnectionEvents::add(int eventCode, int data /* = 0 */) {
 8082b1e:	460f      	mov	r7, r1
	if (connectionEventData.eventCount >= CONNECTION_EVENTS_MAX_EVENTS) {
 8082b20:	6863      	ldr	r3, [r4, #4]
void ConnectionEvents::add(int eventCode, int data /* = 0 */) {
 8082b22:	4690      	mov	r8, r2
	if (connectionEventData.eventCount >= CONNECTION_EVENTS_MAX_EVENTS) {
 8082b24:	2b1f      	cmp	r3, #31
 8082b26:	d90f      	bls.n	8082b48 <_ZN16ConnectionEvents3addEii+0x30>
		// Throw out oldest event
		Log.info("discarding old event");
 8082b28:	4915      	ldr	r1, [pc, #84]	; (8082b80 <_ZN16ConnectionEvents3addEii+0x68>)
 8082b2a:	4816      	ldr	r0, [pc, #88]	; (8082b84 <_ZN16ConnectionEvents3addEii+0x6c>)
 8082b2c:	f7ff fb46 	bl	80821bc <_ZNK5spark6Logger4infoEPKcz>
		connectionEventData.eventCount--;
		memmove(&connectionEventData.events[0], &connectionEventData.events[1], connectionEventData.eventCount * sizeof(ConnectionEventData));
 8082b30:	f44f 7202 	mov.w	r2, #520	; 0x208
		connectionEventData.eventCount--;
 8082b34:	6863      	ldr	r3, [r4, #4]
		memmove(&connectionEventData.events[0], &connectionEventData.events[1], connectionEventData.eventCount * sizeof(ConnectionEventData));
 8082b36:	f104 0118 	add.w	r1, r4, #24
		connectionEventData.eventCount--;
 8082b3a:	3b01      	subs	r3, #1
		memmove(&connectionEventData.events[0], &connectionEventData.events[1], connectionEventData.eventCount * sizeof(ConnectionEventData));
 8082b3c:	435a      	muls	r2, r3
 8082b3e:	f104 0008 	add.w	r0, r4, #8
		connectionEventData.eventCount--;
 8082b42:	6063      	str	r3, [r4, #4]
		memmove(&connectionEventData.events[0], &connectionEventData.events[1], connectionEventData.eventCount * sizeof(ConnectionEventData));
 8082b44:	f008 f864 	bl	808ac10 <memmove>
	}

	// Add new event
	ConnectionEventInfo *ev = &connectionEventData.events[connectionEventData.eventCount++];
 8082b48:	6866      	ldr	r6, [r4, #4]
 8082b4a:	1c75      	adds	r5, r6, #1
 8082b4c:	6065      	str	r5, [r4, #4]
	ev->tsDate = Time.now();
 8082b4e:	f004 f8d6 	bl	8086cfe <_ZN9TimeClass3nowEv>
 8082b52:	eb04 1606 	add.w	r6, r4, r6, lsl #4
 8082b56:	60b0      	str	r0, [r6, #8]
 8082b58:	f001 ffb2 	bl	8084ac0 <HAL_Timer_Get_Milli_Seconds>
	ev->tsMillis = millis();
	ev->eventCode = eventCode;
 8082b5c:	012b      	lsls	r3, r5, #4
 8082b5e:	eb04 1505 	add.w	r5, r4, r5, lsl #4
	ev->tsMillis = millis();
 8082b62:	60f0      	str	r0, [r6, #12]
	ev->eventCode = eventCode;
 8082b64:	50e7      	str	r7, [r4, r3]
	ev->data = data;

	Log.info("connectionEvent event=%d data=%d", eventCode, data);
 8082b66:	463a      	mov	r2, r7
 8082b68:	4643      	mov	r3, r8
 8082b6a:	4907      	ldr	r1, [pc, #28]	; (8082b88 <_ZN16ConnectionEvents3addEii+0x70>)
 8082b6c:	4805      	ldr	r0, [pc, #20]	; (8082b84 <_ZN16ConnectionEvents3addEii+0x6c>)
	ev->data = data;
 8082b6e:	f8c5 8004 	str.w	r8, [r5, #4]
	Log.info("connectionEvent event=%d data=%d", eventCode, data);
 8082b72:	f7ff fb23 	bl	80821bc <_ZNK5spark6Logger4infoEPKcz>
}
 8082b76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8082b7a:	bf00      	nop
 8082b7c:	40024018 	.word	0x40024018
 8082b80:	0808b7dc 	.word	0x0808b7dc
 8082b84:	20000404 	.word	0x20000404
 8082b88:	0808b7f1 	.word	0x0808b7f1

08082b8c <_ZN16ConnectionEvents5setupEv>:
void ConnectionEvents::setup() {
 8082b8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (connectionEventData.eventMagic != CONNECTION_EVENT_MAGIC ||
 8082b8e:	4d12      	ldr	r5, [pc, #72]	; (8082bd8 <_ZN16ConnectionEvents5setupEv+0x4c>)
 8082b90:	4e12      	ldr	r6, [pc, #72]	; (8082bdc <_ZN16ConnectionEvents5setupEv+0x50>)
 8082b92:	682b      	ldr	r3, [r5, #0]
void ConnectionEvents::setup() {
 8082b94:	4604      	mov	r4, r0
	if (connectionEventData.eventMagic != CONNECTION_EVENT_MAGIC ||
 8082b96:	42b3      	cmp	r3, r6
 8082b98:	d102      	bne.n	8082ba0 <_ZN16ConnectionEvents5setupEv+0x14>
 8082b9a:	686b      	ldr	r3, [r5, #4]
 8082b9c:	2b20      	cmp	r3, #32
 8082b9e:	d904      	bls.n	8082baa <_ZN16ConnectionEvents5setupEv+0x1e>
		Log.info("initializing connection event retained memory");
 8082ba0:	490f      	ldr	r1, [pc, #60]	; (8082be0 <_ZN16ConnectionEvents5setupEv+0x54>)
 8082ba2:	4810      	ldr	r0, [pc, #64]	; (8082be4 <_ZN16ConnectionEvents5setupEv+0x58>)
 8082ba4:	f7ff fb0a 	bl	80821bc <_ZNK5spark6Logger4infoEPKcz>
		connectionEventData.eventMagic = CONNECTION_EVENT_MAGIC;
 8082ba8:	602e      	str	r6, [r5, #0]
	add(CONNECTION_EVENT_SETUP_STARTED);
 8082baa:	2200      	movs	r2, #0
 8082bac:	4620      	mov	r0, r4
 8082bae:	4611      	mov	r1, r2
 8082bb0:	f7ff ffb2 	bl	8082b18 <_ZN16ConnectionEvents3addEii>
        int reason = RESET_REASON_NONE;
 8082bb4:	2200      	movs	r2, #0
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8082bb6:	a801      	add	r0, sp, #4
 8082bb8:	4611      	mov	r1, r2
        int reason = RESET_REASON_NONE;
 8082bba:	9201      	str	r2, [sp, #4]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8082bbc:	f001 ffa0 	bl	8084b00 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 8082bc0:	9a01      	ldr	r2, [sp, #4]
	if (resetReason != RESET_REASON_NONE) {
 8082bc2:	b132      	cbz	r2, 8082bd2 <_ZN16ConnectionEvents5setupEv+0x46>
		add(CONNECTION_EVENT_RESET_REASON, resetReason);
 8082bc4:	2112      	movs	r1, #18
 8082bc6:	4620      	mov	r0, r4
}
 8082bc8:	b002      	add	sp, #8
 8082bca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		add(CONNECTION_EVENT_RESET_REASON, resetReason);
 8082bce:	f7ff bfa3 	b.w	8082b18 <_ZN16ConnectionEvents3addEii>
}
 8082bd2:	b002      	add	sp, #8
 8082bd4:	bd70      	pop	{r4, r5, r6, pc}
 8082bd6:	bf00      	nop
 8082bd8:	40024018 	.word	0x40024018
 8082bdc:	5c39d416 	.word	0x5c39d416
 8082be0:	0808b812 	.word	0x0808b812
 8082be4:	20000404 	.word	0x20000404

08082be8 <_ZN16ConnectionEvents8addEventEii>:

// static
void ConnectionEvents::addEvent(int eventCode, int data) {
 8082be8:	460a      	mov	r2, r1
	if (instance) {
 8082bea:	4904      	ldr	r1, [pc, #16]	; (8082bfc <_ZN16ConnectionEvents8addEventEii+0x14>)
void ConnectionEvents::addEvent(int eventCode, int data) {
 8082bec:	4603      	mov	r3, r0
	if (instance) {
 8082bee:	6808      	ldr	r0, [r1, #0]
 8082bf0:	b110      	cbz	r0, 8082bf8 <_ZN16ConnectionEvents8addEventEii+0x10>
		instance->add(eventCode, data);
 8082bf2:	4619      	mov	r1, r3
 8082bf4:	f7ff bf90 	b.w	8082b18 <_ZN16ConnectionEvents3addEii>
	}
}
 8082bf8:	4770      	bx	lr
 8082bfa:	bf00      	nop
 8082bfc:	200002f8 	.word	0x200002f8

08082c00 <_GLOBAL__sub_I__ZN16ConnectionEvents19connectionEventDataE>:
        val_(val) {
 8082c00:	2201      	movs	r2, #1
 8082c02:	4b01      	ldr	r3, [pc, #4]	; (8082c08 <_GLOBAL__sub_I__ZN16ConnectionEvents19connectionEventDataE+0x8>)
 8082c04:	701a      	strb	r2, [r3, #0]
 8082c06:	4770      	bx	lr
 8082c08:	200002f5 	.word	0x200002f5

08082c0c <_ZN10PowerCheckD1Ev>:
#include "Particle.h"
#include "PowerCheck.h"
PowerCheck::PowerCheck() {
}

PowerCheck::~PowerCheck() {
 8082c0c:	b510      	push	{r4, lr}
 8082c0e:	4604      	mov	r4, r0
 8082c10:	4b03      	ldr	r3, [pc, #12]	; (8082c20 <_ZN10PowerCheckD1Ev+0x14>)
 8082c12:	f840 3b04 	str.w	r3, [r0], #4
 8082c16:	f002 faf9 	bl	808520c <_ZN4PMICD1Ev>
}
 8082c1a:	4620      	mov	r0, r4
 8082c1c:	bd10      	pop	{r4, pc}
 8082c1e:	bf00      	nop
 8082c20:	0808b858 	.word	0x0808b858

08082c24 <_ZN10PowerCheckD0Ev>:
PowerCheck::~PowerCheck() {
 8082c24:	b510      	push	{r4, lr}
 8082c26:	4604      	mov	r4, r0
}
 8082c28:	f7ff fff0 	bl	8082c0c <_ZN10PowerCheckD1Ev>
 8082c2c:	4620      	mov	r0, r4
 8082c2e:	210c      	movs	r1, #12
 8082c30:	f005 fc3d 	bl	80884ae <_ZdlPvj>
 8082c34:	4620      	mov	r0, r4
 8082c36:	bd10      	pop	{r4, pc}

08082c38 <_ZN10PowerCheck16interruptHandlerEv>:
		// between charging and done when there is no battery.
		return false;
	}
}

void PowerCheck::interruptHandler() {
 8082c38:	b510      	push	{r4, lr}
 8082c3a:	4604      	mov	r4, r0
 8082c3c:	f001 ff40 	bl	8084ac0 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastChange < 100) {
 8082c40:	68a3      	ldr	r3, [r4, #8]
 8082c42:	1ac0      	subs	r0, r0, r3
 8082c44:	2863      	cmp	r0, #99	; 0x63
		// We very recently had a change; assume there is no battey and we're rapidly switching
		// between fast charge and charge done
		hasBattery = false;
 8082c46:	bf94      	ite	ls
 8082c48:	2300      	movls	r3, #0
	}
	else {
		// Note: It's quite possible that hasBattery will be false when there is a battery; the logic
		// in getHasBattery() takes this into account by checking lastChange as well.
		hasBattery = true;
 8082c4a:	2301      	movhi	r3, #1
 8082c4c:	7163      	strb	r3, [r4, #5]
 8082c4e:	f001 ff37 	bl	8084ac0 <HAL_Timer_Get_Milli_Seconds>
	}
	lastChange = millis();
 8082c52:	60a0      	str	r0, [r4, #8]
}
 8082c54:	bd10      	pop	{r4, pc}

08082c56 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PowerCheckFvvEPS2_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8082c56:	b410      	push	{r4}
	    return __source._M_access<_Functor*>();
 8082c58:	6803      	ldr	r3, [r0, #0]
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
 8082c5a:	685a      	ldr	r2, [r3, #4]
 8082c5c:	6899      	ldr	r1, [r3, #8]
 8082c5e:	1054      	asrs	r4, r2, #1
 8082c60:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8082c64:	07d2      	lsls	r2, r2, #31
 8082c66:	bf48      	it	mi
 8082c68:	590a      	ldrmi	r2, [r1, r4]
 8082c6a:	681b      	ldr	r3, [r3, #0]
      }
 8082c6c:	bc10      	pop	{r4}
 8082c6e:	bf48      	it	mi
 8082c70:	58d3      	ldrmi	r3, [r2, r3]
 8082c72:	4718      	bx	r3

08082c74 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PowerCheckFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	switch (__op)
 8082c74:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8082c76:	b538      	push	{r3, r4, r5, lr}
 8082c78:	4604      	mov	r4, r0
	switch (__op)
 8082c7a:	d102      	bne.n	8082c82 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PowerCheckFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
 8082c7c:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
 8082c7e:	6023      	str	r3, [r4, #0]
	}
 8082c80:	e003      	b.n	8082c8a <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PowerCheckFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
	  switch (__op)
 8082c82:	2a02      	cmp	r2, #2
 8082c84:	d003      	beq.n	8082c8e <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PowerCheckFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x1a>
 8082c86:	2a03      	cmp	r2, #3
 8082c88:	d00d      	beq.n	8082ca6 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PowerCheckFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x32>
      }
 8082c8a:	2000      	movs	r0, #0
 8082c8c:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 8082c8e:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
 8082c90:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 8082c92:	f7fd fa12 	bl	80800ba <_Znwj>
 8082c96:	4603      	mov	r3, r0
 8082c98:	2800      	cmp	r0, #0
 8082c9a:	d0f0      	beq.n	8082c7e <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PowerCheckFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
 8082c9c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8082ca0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8082ca4:	e7eb      	b.n	8082c7e <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PowerCheckFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
 8082ca6:	6800      	ldr	r0, [r0, #0]
 8082ca8:	2800      	cmp	r0, #0
 8082caa:	d0ee      	beq.n	8082c8a <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PowerCheckFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
 8082cac:	210c      	movs	r1, #12
 8082cae:	f005 fbfe 	bl	80884ae <_ZdlPvj>
 8082cb2:	e7ea      	b.n	8082c8a <_ZNSt17_Function_handlerIFvvESt5_BindIFM10PowerCheckFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>

08082cb4 <_ZN10PowerCheckC1Ev>:
PowerCheck::PowerCheck() {
 8082cb4:	4b06      	ldr	r3, [pc, #24]	; (8082cd0 <_ZN10PowerCheckC1Ev+0x1c>)
 8082cb6:	b510      	push	{r4, lr}
 8082cb8:	2100      	movs	r1, #0
 8082cba:	4604      	mov	r4, r0
 8082cbc:	f840 3b04 	str.w	r3, [r0], #4
 8082cc0:	f002 fa95 	bl	80851ee <_ZN4PMICC1Eb>
 8082cc4:	2301      	movs	r3, #1
 8082cc6:	7163      	strb	r3, [r4, #5]
 8082cc8:	2300      	movs	r3, #0
}
 8082cca:	4620      	mov	r0, r4
PowerCheck::PowerCheck() {
 8082ccc:	60a3      	str	r3, [r4, #8]
}
 8082cce:	bd10      	pop	{r4, pc}
 8082cd0:	0808b858 	.word	0x0808b858

08082cd4 <_ZN10PowerCheck5setupEv>:
void PowerCheck::setup() {
 8082cd4:	b530      	push	{r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8082cd6:	2500      	movs	r5, #0
 8082cd8:	b087      	sub	sp, #28
 8082cda:	4604      	mov	r4, r0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082cdc:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
 8082cde:	9504      	str	r5, [sp, #16]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082ce0:	f7fd f9eb 	bl	80800ba <_Znwj>
 8082ce4:	b118      	cbz	r0, 8082cee <_ZN10PowerCheck5setupEv+0x1a>
 8082ce6:	4b0d      	ldr	r3, [pc, #52]	; (8082d1c <_ZN10PowerCheck5setupEv+0x48>)
 8082ce8:	6084      	str	r4, [r0, #8]
 8082cea:	e9c0 3500 	strd	r3, r5, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
 8082cee:	4b0c      	ldr	r3, [pc, #48]	; (8082d20 <_ZN10PowerCheck5setupEv+0x4c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082cf0:	9002      	str	r0, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
 8082cf2:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 8082cf4:	4b0b      	ldr	r3, [pc, #44]	; (8082d24 <_ZN10PowerCheck5setupEv+0x50>)
bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
template <typename T>
bool attachInterrupt(uint16_t pin, void (T::*handler)(), T *instance, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0) {
    using namespace std::placeholders;
    return attachInterrupt(pin, std::bind(handler, instance), mode, priority, subpriority);
 8082cf6:	2202      	movs	r2, #2
 8082cf8:	9304      	str	r3, [sp, #16]
 8082cfa:	2300      	movs	r3, #0
 8082cfc:	202e      	movs	r0, #46	; 0x2e
 8082cfe:	9300      	str	r3, [sp, #0]
 8082d00:	a902      	add	r1, sp, #8
 8082d02:	f04f 33ff 	mov.w	r3, #4294967295
 8082d06:	f004 fe0f 	bl	8087928 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>
      if (_M_manager)
 8082d0a:	9b04      	ldr	r3, [sp, #16]
 8082d0c:	b11b      	cbz	r3, 8082d16 <_ZN10PowerCheck5setupEv+0x42>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8082d0e:	a902      	add	r1, sp, #8
 8082d10:	2203      	movs	r2, #3
 8082d12:	4608      	mov	r0, r1
 8082d14:	4798      	blx	r3
}
 8082d16:	b007      	add	sp, #28
 8082d18:	bd30      	pop	{r4, r5, pc}
 8082d1a:	bf00      	nop
 8082d1c:	08082c39 	.word	0x08082c39
 8082d20:	08082c57 	.word	0x08082c57
 8082d24:	08082c75 	.word	0x08082c75

08082d28 <_ZN10PowerCheck11getHasPowerEv>:
bool PowerCheck::getHasPower() {
 8082d28:	b508      	push	{r3, lr}
	byte systemStatus = pmic.getSystemStatus();
 8082d2a:	3004      	adds	r0, #4
 8082d2c:	f002 fab4 	bl	8085298 <_ZN4PMIC15getSystemStatusEv>
}
 8082d30:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8082d34:	bd08      	pop	{r3, pc}

08082d36 <_ZN15Adafruit_LIS3DHD1Ev>:
  LIS3DH_INT1_SRC_YL = 0x04,
  LIS3DH_INT1_SRC_XH = 0x02,
  LIS3DH_INT1_SRC_XL = 0x01
} list3dh_ctrl_int2_src_t;

class Adafruit_LIS3DH : public Adafruit_Sensor {
 8082d36:	4770      	bx	lr

08082d38 <_ZN13AssetTracker2C1Ev>:
uint8_t internalANT[]={0xB5,0x62,0x06,0x13,0x04,0x00,0x00,0x00,0xF0,0x7D,0x8A,0x2A};
uint8_t externalANT[]={0xB5,0x62,0x06,0x13,0x04,0x00,0x01,0x00,0xF0,0x7D,0x8B,0x2E};

AssetTracker2::AssetTracker2() {

}
 8082d38:	4770      	bx	lr
	...

08082d3c <_ZN13AssetTracker25beginEv>:

void AssetTracker2::begin() {
 8082d3c:	b510      	push	{r4, lr}
    accel.begin(LIS3DH_DEFAULT_ADDRESS);
 8082d3e:	4c07      	ldr	r4, [pc, #28]	; (8082d5c <_ZN13AssetTracker25beginEv+0x20>)
 8082d40:	2118      	movs	r1, #24
 8082d42:	4620      	mov	r0, r4
 8082d44:	f000 fbaf 	bl	80834a6 <_ZN15Adafruit_LIS3DH5beginEh>

    // Default to 5kHz low-power sampling
    accel.setDataRate(LIS3DH_DATARATE_LOWPOWER_5KHZ);
 8082d48:	4620      	mov	r0, r4
 8082d4a:	2109      	movs	r1, #9
 8082d4c:	f000 fac0 	bl	80832d0 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>

    // Default to 4 gravities range
    accel.setRange(LIS3DH_RANGE_4_G);
 8082d50:	4620      	mov	r0, r4

}
 8082d52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    accel.setRange(LIS3DH_RANGE_4_G);
 8082d56:	2101      	movs	r1, #1
 8082d58:	f000 baa2 	b.w	80832a0 <_ZN15Adafruit_LIS3DH8setRangeE14lis3dh_range_t>
 8082d5c:	200002fc 	.word	0x200002fc

08082d60 <_ZN13AssetTracker27readLatEv>:

float AssetTracker2::readLat() {
    return gps.latitude;
}
 8082d60:	4b01      	ldr	r3, [pc, #4]	; (8082d68 <_ZN13AssetTracker27readLatEv+0x8>)
 8082d62:	6958      	ldr	r0, [r3, #20]
 8082d64:	4770      	bx	lr
 8082d66:	bf00      	nop
 8082d68:	20000328 	.word	0x20000328

08082d6c <_ZN13AssetTracker27readLonEv>:

float AssetTracker2::readLon() {
    return gps.longitude;
}
 8082d6c:	4b01      	ldr	r3, [pc, #4]	; (8082d74 <_ZN13AssetTracker27readLonEv+0x8>)
 8082d6e:	6998      	ldr	r0, [r3, #24]
 8082d70:	4770      	bx	lr
 8082d72:	bf00      	nop
 8082d74:	20000328 	.word	0x20000328

08082d78 <_ZN13AssetTracker210readLatDegEv>:

float AssetTracker2::readLatDeg() {
    return gps.latitudeDegrees;
}
 8082d78:	4b01      	ldr	r3, [pc, #4]	; (8082d80 <_ZN13AssetTracker210readLatDegEv+0x8>)
 8082d7a:	69d8      	ldr	r0, [r3, #28]
 8082d7c:	4770      	bx	lr
 8082d7e:	bf00      	nop
 8082d80:	20000328 	.word	0x20000328

08082d84 <_ZN13AssetTracker210readLonDegEv>:

float AssetTracker2::readLonDeg() {
    return gps.longitudeDegrees;
}
 8082d84:	4b01      	ldr	r3, [pc, #4]	; (8082d8c <_ZN13AssetTracker210readLonDegEv+0x8>)
 8082d86:	6a18      	ldr	r0, [r3, #32]
 8082d88:	4770      	bx	lr
 8082d8a:	bf00      	nop
 8082d8c:	20000328 	.word	0x20000328

08082d90 <_ZN13AssetTracker214getGpsAccuracyEv>:

float AssetTracker2::getGpsAccuracy() {
 8082d90:	b508      	push	{r3, lr}
  return (float)gps.horzAcc;
 8082d92:	4b02      	ldr	r3, [pc, #8]	; (8082d9c <_ZN13AssetTracker214getGpsAccuracyEv+0xc>)
 8082d94:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8082d96:	f007 fc97 	bl	808a6c8 <__aeabi_ui2f>
}
 8082d9a:	bd08      	pop	{r3, pc}
 8082d9c:	20000328 	.word	0x20000328

08082da0 <_ZN13AssetTracker212getHaccuracyEv>:
  return gps.headVehValid;
}

uint32_t AssetTracker2::getHaccuracy() {
  return gps.horzAcc;
}
 8082da0:	4b01      	ldr	r3, [pc, #4]	; (8082da8 <_ZN13AssetTracker212getHaccuracyEv+0x8>)
 8082da2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8082da4:	4770      	bx	lr
 8082da6:	bf00      	nop
 8082da8:	20000328 	.word	0x20000328

08082dac <_ZN13AssetTracker212getVaccuracyEv>:
uint32_t AssetTracker2::getVaccuracy() {
  return gps.vertAcc;
}
 8082dac:	4b01      	ldr	r3, [pc, #4]	; (8082db4 <_ZN13AssetTracker212getVaccuracyEv+0x8>)
 8082dae:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8082db0:	4770      	bx	lr
 8082db2:	bf00      	nop
 8082db4:	20000328 	.word	0x20000328

08082db8 <_ZN13AssetTracker27getVelNEv>:
int32_t AssetTracker2::getVelN() {
  return gps.velN;
}
 8082db8:	4b01      	ldr	r3, [pc, #4]	; (8082dc0 <_ZN13AssetTracker27getVelNEv+0x8>)
 8082dba:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8082dbc:	4770      	bx	lr
 8082dbe:	bf00      	nop
 8082dc0:	20000328 	.word	0x20000328

08082dc4 <_ZN13AssetTracker27getVelEEv>:
int32_t AssetTracker2::getVelE() {
  return gps.velE;
}
 8082dc4:	4b01      	ldr	r3, [pc, #4]	; (8082dcc <_ZN13AssetTracker27getVelEEv+0x8>)
 8082dc6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8082dc8:	4770      	bx	lr
 8082dca:	bf00      	nop
 8082dcc:	20000328 	.word	0x20000328

08082dd0 <_ZN13AssetTracker27getVelDEv>:
int32_t AssetTracker2::getVelD() {
  return gps.velD;
}
 8082dd0:	4b01      	ldr	r3, [pc, #4]	; (8082dd8 <_ZN13AssetTracker27getVelDEv+0x8>)
 8082dd2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8082dd4:	4770      	bx	lr
 8082dd6:	bf00      	nop
 8082dd8:	20000328 	.word	0x20000328

08082ddc <_ZN13AssetTracker210getOdoTripEv>:
int32_t AssetTracker2::getOdoTrip() {
  return gps.odoTrip;
}
 8082ddc:	4b01      	ldr	r3, [pc, #4]	; (8082de4 <_ZN13AssetTracker210getOdoTripEv+0x8>)
 8082dde:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8082de0:	4770      	bx	lr
 8082de2:	bf00      	nop
 8082de4:	20000328 	.word	0x20000328

08082de8 <_ZN13AssetTracker211getOdoTotalEv>:
int32_t AssetTracker2::getOdoTotal() {
  return gps.odoTotal;
}
 8082de8:	4b01      	ldr	r3, [pc, #4]	; (8082df0 <_ZN13AssetTracker211getOdoTotalEv+0x8>)
 8082dea:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8082dec:	4770      	bx	lr
 8082dee:	bf00      	nop
 8082df0:	20000328 	.word	0x20000328

08082df4 <_ZN13AssetTracker29getGspeedEv>:
int32_t AssetTracker2::getGspeed() {
  return gps.gSpeed;
}
 8082df4:	4b01      	ldr	r3, [pc, #4]	; (8082dfc <_ZN13AssetTracker29getGspeedEv+0x8>)
 8082df6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8082df8:	4770      	bx	lr
 8082dfa:	bf00      	nop
 8082dfc:	20000328 	.word	0x20000328

08082e00 <_ZN13AssetTracker27getHourEv>:

uint8_t AssetTracker2::getHour(){
  return gps.hour;
}
 8082e00:	4b01      	ldr	r3, [pc, #4]	; (8082e08 <_ZN13AssetTracker27getHourEv+0x8>)
 8082e02:	7858      	ldrb	r0, [r3, #1]
 8082e04:	4770      	bx	lr
 8082e06:	bf00      	nop
 8082e08:	20000328 	.word	0x20000328

08082e0c <_ZN13AssetTracker29getMinuteEv>:

uint8_t AssetTracker2::getMinute(){
  return gps.minute;
}
 8082e0c:	4b01      	ldr	r3, [pc, #4]	; (8082e14 <_ZN13AssetTracker29getMinuteEv+0x8>)
 8082e0e:	7898      	ldrb	r0, [r3, #2]
 8082e10:	4770      	bx	lr
 8082e12:	bf00      	nop
 8082e14:	20000328 	.word	0x20000328

08082e18 <_ZN13AssetTracker210getSecondsEv>:

uint8_t AssetTracker2::getSeconds(){
  return gps.seconds;
}
 8082e18:	4b01      	ldr	r3, [pc, #4]	; (8082e20 <_ZN13AssetTracker210getSecondsEv+0x8>)
 8082e1a:	78d8      	ldrb	r0, [r3, #3]
 8082e1c:	4770      	bx	lr
 8082e1e:	bf00      	nop
 8082e20:	20000328 	.word	0x20000328

08082e24 <_ZN13AssetTracker215getMillisecondsEv>:

int32_t AssetTracker2::getMilliseconds(){
  return gps.milliseconds;
}
 8082e24:	4b01      	ldr	r3, [pc, #4]	; (8082e2c <_ZN13AssetTracker215getMillisecondsEv+0x8>)
 8082e26:	6898      	ldr	r0, [r3, #8]
 8082e28:	4770      	bx	lr
 8082e2a:	bf00      	nop
 8082e2c:	20000328 	.word	0x20000328

08082e30 <_ZN13AssetTracker27getYearEv>:

uint16_t AssetTracker2::getYear(){
  return gps.year;
}
 8082e30:	4b01      	ldr	r3, [pc, #4]	; (8082e38 <_ZN13AssetTracker27getYearEv+0x8>)
 8082e32:	88d8      	ldrh	r0, [r3, #6]
 8082e34:	4770      	bx	lr
 8082e36:	bf00      	nop
 8082e38:	20000328 	.word	0x20000328

08082e3c <_ZN13AssetTracker28getMonthEv>:

uint8_t AssetTracker2::getMonth(){
  return gps.month;
}
 8082e3c:	4b01      	ldr	r3, [pc, #4]	; (8082e44 <_ZN13AssetTracker28getMonthEv+0x8>)
 8082e3e:	7918      	ldrb	r0, [r3, #4]
 8082e40:	4770      	bx	lr
 8082e42:	bf00      	nop
 8082e44:	20000328 	.word	0x20000328

08082e48 <_ZN13AssetTracker26getDayEv>:

uint8_t AssetTracker2::getDay(){
  return gps.day;
}
 8082e48:	4b01      	ldr	r3, [pc, #4]	; (8082e50 <_ZN13AssetTracker26getDayEv+0x8>)
 8082e4a:	7958      	ldrb	r0, [r3, #5]
 8082e4c:	4770      	bx	lr
 8082e4e:	bf00      	nop
 8082e50:	20000328 	.word	0x20000328

08082e54 <_ZN13AssetTracker213getSatellitesEv>:

uint8_t AssetTracker2::getSatellites(){
  return gps.satellites;
}
 8082e54:	4b01      	ldr	r3, [pc, #4]	; (8082e5c <_ZN13AssetTracker213getSatellitesEv+0x8>)
 8082e56:	f893 003b 	ldrb.w	r0, [r3, #59]	; 0x3b
 8082e5a:	4770      	bx	lr
 8082e5c:	20000328 	.word	0x20000328

08082e60 <_ZN13AssetTracker213getFixQualityEv>:

uint8_t AssetTracker2::getFixQuality(){
  return gps.fixquality;
}
 8082e60:	4b01      	ldr	r3, [pc, #4]	; (8082e68 <_ZN13AssetTracker213getFixQualityEv+0x8>)
 8082e62:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
 8082e66:	4770      	bx	lr
 8082e68:	20000328 	.word	0x20000328

08082e6c <_ZN13AssetTracker28getSpeedEv>:

float AssetTracker2::getSpeed(){
  return gps.speed;
}
 8082e6c:	4b01      	ldr	r3, [pc, #4]	; (8082e74 <_ZN13AssetTracker28getSpeedEv+0x8>)
 8082e6e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8082e70:	4770      	bx	lr
 8082e72:	bf00      	nop
 8082e74:	20000328 	.word	0x20000328

08082e78 <_ZN13AssetTracker214getGeoIdHeightEv>:

float AssetTracker2::getGeoIdHeight(){
  return gps.geoidheight;
}
 8082e78:	4b01      	ldr	r3, [pc, #4]	; (8082e80 <_ZN13AssetTracker214getGeoIdHeightEv+0x8>)
 8082e7a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8082e7c:	4770      	bx	lr
 8082e7e:	bf00      	nop
 8082e80:	20000328 	.word	0x20000328

08082e84 <_ZN13AssetTracker211getAltitudeEv>:

float AssetTracker2::getAltitude(){
  return gps.altitude;
}
 8082e84:	4b01      	ldr	r3, [pc, #4]	; (8082e8c <_ZN13AssetTracker211getAltitudeEv+0x8>)
 8082e86:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8082e88:	4770      	bx	lr
 8082e8a:	bf00      	nop
 8082e8c:	20000328 	.word	0x20000328

08082e90 <_ZN13AssetTracker210readLatLonEv>:

String AssetTracker2::readLatLon() {
 8082e90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    String latLon = String::format("%f,%f",gps.latitudeDegrees,gps.longitudeDegrees);
 8082e92:	4d0a      	ldr	r5, [pc, #40]	; (8082ebc <_ZN13AssetTracker210readLatLonEv+0x2c>)
String AssetTracker2::readLatLon() {
 8082e94:	4604      	mov	r4, r0
    String latLon = String::format("%f,%f",gps.latitudeDegrees,gps.longitudeDegrees);
 8082e96:	69e8      	ldr	r0, [r5, #28]
 8082e98:	f006 ffc0 	bl	8089e1c <__aeabi_f2d>
 8082e9c:	4606      	mov	r6, r0
 8082e9e:	6a28      	ldr	r0, [r5, #32]
 8082ea0:	460f      	mov	r7, r1
 8082ea2:	f006 ffbb 	bl	8089e1c <__aeabi_f2d>
 8082ea6:	4632      	mov	r2, r6
 8082ea8:	e9cd 0100 	strd	r0, r1, [sp]
 8082eac:	463b      	mov	r3, r7
 8082eae:	4620      	mov	r0, r4
 8082eb0:	4903      	ldr	r1, [pc, #12]	; (8082ec0 <_ZN13AssetTracker210readLatLonEv+0x30>)
 8082eb2:	f002 fcd5 	bl	8085860 <_ZN6String6formatEPKcz>
    return latLon;
}
 8082eb6:	4620      	mov	r0, r4
 8082eb8:	b003      	add	sp, #12
 8082eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8082ebc:	20000328 	.word	0x20000328
 8082ec0:	0808b860 	.word	0x0808b860

08082ec4 <_ZN13AssetTracker25gpsOnEv>:

void AssetTracker2::gpsOn() {
 8082ec4:	b538      	push	{r3, r4, r5, lr}
    enum ubxReturn err;
    // Power to the GPS is controlled by a FET connected to D6
    pinMode(D6,OUTPUT);
 8082ec6:	2101      	movs	r1, #1
 8082ec8:	2006      	movs	r0, #6
 8082eca:	f005 f9a3 	bl	8088214 <pinMode>
    digitalWrite(D6,LOW);
 8082ece:	2100      	movs	r1, #0
 8082ed0:	2006      	movs	r0, #6
 8082ed2:	f005 f9b0 	bl	8088236 <digitalWrite>
    Serial1.begin(9600);
 8082ed6:	f004 fe1f 	bl	8087b18 <_Z22__fetch_global_Serial1v>
 8082eda:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8082ede:	f004 fe15 	bl	8087b0c <_ZN11USARTSerial5beginEm>
    delay(10);
 8082ee2:	200a      	movs	r0, #10
 8082ee4:	f003 ff26 	bl	8086d34 <delay>
	if (err != ubxPENDING ){
	    Serial.print("gps.begin failed: ");
	    Serial.println(err);
	    return;
	}
	err=gps.begin();
 8082ee8:	4d0f      	ldr	r5, [pc, #60]	; (8082f28 <_ZN13AssetTracker25gpsOnEv+0x64>)
 8082eea:	4628      	mov	r0, r5
 8082eec:	f000 fffa 	bl	8083ee4 <_ZN12UbloxM8Q_GPS5beginEv>
    while (err != ubxSUCCESS){
 8082ef0:	4604      	mov	r4, r0
 8082ef2:	b930      	cbnz	r0, 8082f02 <_ZN13AssetTracker25gpsOnEv+0x3e>
    }
    Serial.println("GPS started");
 8082ef4:	f004 fc62 	bl	80877bc <_Z16_fetch_usbserialv>
}
 8082ef8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Serial.println("GPS started");
 8082efc:	490b      	ldr	r1, [pc, #44]	; (8082f2c <_ZN13AssetTracker25gpsOnEv+0x68>)
 8082efe:	f002 bd10 	b.w	8085922 <_ZN5Print7printlnEPKc>
	if (err != ubxPENDING ){
 8082f02:	2c01      	cmp	r4, #1
 8082f04:	d0f1      	beq.n	8082eea <_ZN13AssetTracker25gpsOnEv+0x26>
	    Serial.print("gps.begin failed: ");
 8082f06:	f004 fc59 	bl	80877bc <_Z16_fetch_usbserialv>
 8082f0a:	4909      	ldr	r1, [pc, #36]	; (8082f30 <_ZN13AssetTracker25gpsOnEv+0x6c>)
 8082f0c:	f002 fcf6 	bl	80858fc <_ZN5Print5printEPKc>
	    Serial.println(err);
 8082f10:	f004 fc54 	bl	80877bc <_Z16_fetch_usbserialv>
 8082f14:	4605      	mov	r5, r0
        return printNumber(val, base) + t;
 8082f16:	4621      	mov	r1, r4
 8082f18:	220a      	movs	r2, #10
 8082f1a:	f002 fd0c 	bl	8085936 <_ZN5Print11printNumberEmh>
        n += println();
 8082f1e:	4628      	mov	r0, r5
}
 8082f20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8082f24:	f002 bcf1 	b.w	808590a <_ZN5Print7printlnEv>
 8082f28:	20000328 	.word	0x20000328
 8082f2c:	0808b879 	.word	0x0808b879
 8082f30:	0808b866 	.word	0x0808b866

08082f34 <_ZN13AssetTracker215gpsInitCompleteEv>:
    digitalWrite(D6,HIGH);
}

bool AssetTracker2::gpsInitComplete() {
    return gps.initComplete;
}
 8082f34:	4b01      	ldr	r3, [pc, #4]	; (8082f3c <_ZN13AssetTracker215gpsInitCompleteEv+0x8>)
 8082f36:	7818      	ldrb	r0, [r3, #0]
 8082f38:	4770      	bx	lr
 8082f3a:	bf00      	nop
 8082f3c:	20000328 	.word	0x20000328

08082f40 <_ZN13AssetTracker26gpsFixEv>:

bool AssetTracker2::gpsFix() {
    return gps.fix;
}
 8082f40:	4b01      	ldr	r3, [pc, #4]	; (8082f48 <_ZN13AssetTracker26gpsFixEv+0x8>)
 8082f42:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 8082f46:	4770      	bx	lr
 8082f48:	20000328 	.word	0x20000328

08082f4c <_ZN13AssetTracker215antennaInternalEv>:

bool AssetTracker2::gpsTimeValid() {
    return gps.timeValid;
}

bool AssetTracker2::antennaInternal(){
 8082f4c:	b538      	push	{r3, r4, r5, lr}
 8082f4e:	240c      	movs	r4, #12
 8082f50:	4d06      	ldr	r5, [pc, #24]	; (8082f6c <_ZN13AssetTracker215antennaInternalEv+0x20>)

  for(uint8_t i=0;i<12;i++)
    {
        Serial1.write(internalANT[i]); //send the command to gps modul
 8082f52:	f004 fde1 	bl	8087b18 <_Z22__fetch_global_Serial1v>
 8082f56:	6803      	ldr	r3, [r0, #0]
 8082f58:	f815 1b01 	ldrb.w	r1, [r5], #1
 8082f5c:	689b      	ldr	r3, [r3, #8]
  for(uint8_t i=0;i<12;i++)
 8082f5e:	3c01      	subs	r4, #1
        Serial1.write(internalANT[i]); //send the command to gps modul
 8082f60:	4798      	blx	r3
  for(uint8_t i=0;i<12;i++)
 8082f62:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8082f66:	d1f4      	bne.n	8082f52 <_ZN13AssetTracker215antennaInternalEv+0x6>
    }
  return true;

}
 8082f68:	2001      	movs	r0, #1
 8082f6a:	bd38      	pop	{r3, r4, r5, pc}
 8082f6c:	20000024 	.word	0x20000024

08082f70 <_ZN13AssetTracker215antennaExternalEv>:

bool AssetTracker2::antennaExternal(){
 8082f70:	b538      	push	{r3, r4, r5, lr}
 8082f72:	240c      	movs	r4, #12
 8082f74:	4d06      	ldr	r5, [pc, #24]	; (8082f90 <_ZN13AssetTracker215antennaExternalEv+0x20>)

  for(uint8_t i=0;i<12;i++)
    {
        Serial1.write(externalANT[i]); //send the command to gps modul
 8082f76:	f004 fdcf 	bl	8087b18 <_Z22__fetch_global_Serial1v>
 8082f7a:	6803      	ldr	r3, [r0, #0]
 8082f7c:	f815 1b01 	ldrb.w	r1, [r5], #1
 8082f80:	689b      	ldr	r3, [r3, #8]
  for(uint8_t i=0;i<12;i++)
 8082f82:	3c01      	subs	r4, #1
        Serial1.write(externalANT[i]); //send the command to gps modul
 8082f84:	4798      	blx	r3
  for(uint8_t i=0;i<12;i++)
 8082f86:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8082f8a:	d1f4      	bne.n	8082f76 <_ZN13AssetTracker215antennaExternalEv+0x6>
    }
  return true;

}
 8082f8c:	2001      	movs	r0, #1
 8082f8e:	bd38      	pop	{r3, r4, r5, pc}
 8082f90:	20000018 	.word	0x20000018

08082f94 <_ZN13AssetTracker29updateGPSEv>:

void AssetTracker2::updateGPS() {
    gps.read();
 8082f94:	4801      	ldr	r0, [pc, #4]	; (8082f9c <_ZN13AssetTracker29updateGPSEv+0x8>)
 8082f96:	f000 be6d 	b.w	8083c74 <_ZN12UbloxM8Q_GPS4readEv>
 8082f9a:	bf00      	nop
 8082f9c:	20000328 	.word	0x20000328

08082fa0 <_ZN13AssetTracker27gpsRateEti>:
}

void AssetTracker2::gpsRate(uint16_t measurement, int navigation) {
    gps.setRate(measurement, navigation);
 8082fa0:	4801      	ldr	r0, [pc, #4]	; (8082fa8 <_ZN13AssetTracker27gpsRateEti+0x8>)
 8082fa2:	f000 bf33 	b.w	8083e0c <_ZN12UbloxM8Q_GPS7setRateEti>
 8082fa6:	bf00      	nop
 8082fa8:	20000328 	.word	0x20000328

08082fac <_ZN13AssetTracker211gpsResetODOEv>:
}

void AssetTracker2::gpsResetODO(void) {
    gps.resetODO();
 8082fac:	4801      	ldr	r0, [pc, #4]	; (8082fb4 <_ZN13AssetTracker211gpsResetODOEv+0x8>)
 8082fae:	f000 bf27 	b.w	8083e00 <_ZN12UbloxM8Q_GPS8resetODOEv>
 8082fb2:	bf00      	nop
 8082fb4:	20000328 	.word	0x20000328

08082fb8 <_ZN13AssetTracker25readXEv>:

void AssetTracker2::gpsHoldThresh(int speed, uint16_t distance) {
    gps.setThresh(speed, distance);
}

int AssetTracker2::readX() {
 8082fb8:	b510      	push	{r4, lr}
    accel.read();
 8082fba:	4c03      	ldr	r4, [pc, #12]	; (8082fc8 <_ZN13AssetTracker25readXEv+0x10>)
 8082fbc:	4620      	mov	r0, r4
 8082fbe:	f000 f999 	bl	80832f4 <_ZN15Adafruit_LIS3DH4readEv>
    return accel.x;
}
 8082fc2:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 8082fc6:	bd10      	pop	{r4, pc}
 8082fc8:	200002fc 	.word	0x200002fc

08082fcc <_ZN13AssetTracker25readYEv>:

int AssetTracker2::readY() {
 8082fcc:	b510      	push	{r4, lr}
    accel.read();
 8082fce:	4c03      	ldr	r4, [pc, #12]	; (8082fdc <_ZN13AssetTracker25readYEv+0x10>)
 8082fd0:	4620      	mov	r0, r4
 8082fd2:	f000 f98f 	bl	80832f4 <_ZN15Adafruit_LIS3DH4readEv>
    return accel.y;
}
 8082fd6:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8082fda:	bd10      	pop	{r4, pc}
 8082fdc:	200002fc 	.word	0x200002fc

08082fe0 <_ZN13AssetTracker25readZEv>:

int AssetTracker2::readZ() {
 8082fe0:	b510      	push	{r4, lr}
    accel.read();
 8082fe2:	4c03      	ldr	r4, [pc, #12]	; (8082ff0 <_ZN13AssetTracker25readZEv+0x10>)
 8082fe4:	4620      	mov	r0, r4
 8082fe6:	f000 f985 	bl	80832f4 <_ZN15Adafruit_LIS3DH4readEv>
    return accel.z;
}
 8082fea:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
 8082fee:	bd10      	pop	{r4, pc}
 8082ff0:	200002fc 	.word	0x200002fc

08082ff4 <_ZN13AssetTracker216readXYZmagnitudeEv>:
    *y = accel.y;
    *z = accel.z;
}


int AssetTracker2::readXYZmagnitude() {
 8082ff4:	b510      	push	{r4, lr}
    accel.read();
 8082ff6:	4c0b      	ldr	r4, [pc, #44]	; (8083024 <_ZN13AssetTracker216readXYZmagnitudeEv+0x30>)
 8082ff8:	4620      	mov	r0, r4
 8082ffa:	f000 f97b 	bl	80832f4 <_ZN15Adafruit_LIS3DH4readEv>
    int magnitude = sqrt((accel.x*accel.x)+(accel.y*accel.y)+(accel.z*accel.z));
 8082ffe:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8083002:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8083006:	4352      	muls	r2, r2
 8083008:	fb03 2303 	mla	r3, r3, r3, r2
 808300c:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    sqrt(_Tp __x)
    { return __builtin_sqrt(__x); }
 8083010:	fb00 3000 	mla	r0, r0, r0, r3
 8083014:	f006 fef0 	bl	8089df8 <__aeabi_i2d>
 8083018:	f005 fb86 	bl	8088728 <sqrt>
 808301c:	f007 fa06 	bl	808a42c <__aeabi_d2iz>
    return magnitude;
}
 8083020:	bd10      	pop	{r4, pc}
 8083022:	bf00      	nop
 8083024:	200002fc 	.word	0x200002fc

08083028 <_ZN15Adafruit_LIS3DHD0Ev>:
 8083028:	b510      	push	{r4, lr}
 808302a:	4604      	mov	r4, r0
 808302c:	212c      	movs	r1, #44	; 0x2c
 808302e:	f005 fa3e 	bl	80884ae <_ZdlPvj>
 8083032:	4620      	mov	r0, r4
 8083034:	bd10      	pop	{r4, pc}
	...

08083038 <_GLOBAL__sub_I_gps>:
	return accel.setupLowPowerWakeMode(movementThreshold);
}

uint8_t AssetTracker2::clearAccelInterrupt() {
	return accel.clearInterrupt();
}
 8083038:	b510      	push	{r4, lr}
Adafruit_LIS3DH accel = Adafruit_LIS3DH(A2);
 808303a:	4c07      	ldr	r4, [pc, #28]	; (8083058 <_GLOBAL__sub_I_gps+0x20>)
UbloxM8Q_GPS gps = UbloxM8Q_GPS();
 808303c:	4807      	ldr	r0, [pc, #28]	; (808305c <_GLOBAL__sub_I_gps+0x24>)
 808303e:	f000 fac6 	bl	80835ce <_ZN12UbloxM8Q_GPSC1Ev>
Adafruit_LIS3DH accel = Adafruit_LIS3DH(A2);
 8083042:	210c      	movs	r1, #12
 8083044:	4620      	mov	r0, r4
 8083046:	f000 f82f 	bl	80830a8 <_ZN15Adafruit_LIS3DHC1Ea>
 808304a:	4620      	mov	r0, r4
}
 808304c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
Adafruit_LIS3DH accel = Adafruit_LIS3DH(A2);
 8083050:	4a03      	ldr	r2, [pc, #12]	; (8083060 <_GLOBAL__sub_I_gps+0x28>)
 8083052:	4904      	ldr	r1, [pc, #16]	; (8083064 <_GLOBAL__sub_I_gps+0x2c>)
 8083054:	f005 ba26 	b.w	80884a4 <__aeabi_atexit>
 8083058:	200002fc 	.word	0x200002fc
 808305c:	20000328 	.word	0x20000328
 8083060:	20000130 	.word	0x20000130
 8083064:	08082d37 	.word	0x08082d37

08083068 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
 8083068:	4770      	bx	lr

0808306a <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 808306a:	b510      	push	{r4, lr}
 808306c:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 808306e:	6880      	ldr	r0, [r0, #8]
 8083070:	b108      	cbz	r0, 8083076 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 8083072:	f001 fda5 	bl	8084bc0 <os_mutex_recursive_destroy>
 8083076:	4620      	mov	r0, r4
 8083078:	bd10      	pop	{r4, pc}
	...

0808307c <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data
*/
/**************************************************************************/
void Adafruit_LIS3DH::getSensor(sensor_t *sensor) {
 808307c:	b538      	push	{r3, r4, r5, lr}
 808307e:	460c      	mov	r4, r1
 8083080:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
 8083082:	2220      	movs	r2, #32
 8083084:	2100      	movs	r1, #0
 8083086:	f104 0008 	add.w	r0, r4, #8
 808308a:	f007 fddb 	bl	808ac44 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
 808308e:	220b      	movs	r2, #11
 8083090:	4620      	mov	r0, r4
 8083092:	4904      	ldr	r1, [pc, #16]	; (80830a4 <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t+0x28>)
 8083094:	f007 fe6d 	bl	808ad72 <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
  sensor->version     = 1;
 8083098:	2301      	movs	r3, #1
 808309a:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id   = _sensorID;
 808309c:	69aa      	ldr	r2, [r5, #24]
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
 808309e:	e9c4 2304 	strd	r2, r3, [r4, #16]
  sensor->min_delay   = 0;
  sensor->max_value   = 0;
  sensor->min_value   = 0;
  sensor->resolution  = 0;
}
 80830a2:	bd38      	pop	{r3, r4, r5, pc}
 80830a4:	0808b885 	.word	0x0808b885

080830a8 <_ZN15Adafruit_LIS3DHC1Ea>:
  : _sensorID(-1), _cs(cspin), _mosi(-1), _miso(-1), _sck(-1)
 80830a8:	4a06      	ldr	r2, [pc, #24]	; (80830c4 <_ZN15Adafruit_LIS3DHC1Ea+0x1c>)
 80830aa:	7741      	strb	r1, [r0, #29]
 80830ac:	6002      	str	r2, [r0, #0]
 80830ae:	f04f 32ff 	mov.w	r2, #4294967295
 80830b2:	6182      	str	r2, [r0, #24]
 80830b4:	83c2      	strh	r2, [r0, #30]
 80830b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80830ba:	f880 2020 	strb.w	r2, [r0, #32]
 80830be:	2211      	movs	r2, #17
 80830c0:	6242      	str	r2, [r0, #36]	; 0x24
{ }
 80830c2:	4770      	bx	lr
 80830c4:	0808b894 	.word	0x0808b894

080830c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
 80830c8:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
 80830ca:	4d0c      	ldr	r5, [pc, #48]	; (80830fc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
 80830cc:	7829      	ldrb	r1, [r5, #0]
 80830ce:	f3bf 8f5b 	dmb	ish
 80830d2:	f011 0401 	ands.w	r4, r1, #1
 80830d6:	d10f      	bne.n	80830f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>
 80830d8:	4628      	mov	r0, r5
 80830da:	f7fc ffff 	bl	80800dc <__cxa_guard_acquire>
 80830de:	b158      	cbz	r0, 80830f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>
 80830e0:	4621      	mov	r1, r4
 80830e2:	4807      	ldr	r0, [pc, #28]	; (8083100 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x38>)
 80830e4:	f002 f8df 	bl	80852a6 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80830e8:	4628      	mov	r0, r5
 80830ea:	f7fc fffc 	bl	80800e6 <__cxa_guard_release>
 80830ee:	4a05      	ldr	r2, [pc, #20]	; (8083104 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x3c>)
 80830f0:	4905      	ldr	r1, [pc, #20]	; (8083108 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x40>)
 80830f2:	4803      	ldr	r0, [pc, #12]	; (8083100 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x38>)
 80830f4:	f005 f9d6 	bl	80884a4 <__aeabi_atexit>
        return instance;
    }
 80830f8:	4801      	ldr	r0, [pc, #4]	; (8083100 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x38>)
 80830fa:	bd38      	pop	{r3, r4, r5, pc}
 80830fc:	2000038c 	.word	0x2000038c
 8083100:	20000390 	.word	0x20000390
 8083104:	20000130 	.word	0x20000130
 8083108:	0808306b 	.word	0x0808306b

0808310c <_ZN15Adafruit_LIS3DH16beginTransactionEv>:
  #endif
  return value;
}


void Adafruit_LIS3DH::beginTransaction() {
 808310c:	b508      	push	{r3, lr}
    }
    void end() {
        instance().end();
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
 808310e:	f7ff ffdb 	bl	80830c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 8083112:	2101      	movs	r1, #1
 8083114:	f002 f8e5 	bl	80852e2 <_ZN8SPIClass11setBitOrderEh>
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
    }
    unsigned setClockSpeed(unsigned value, unsigned scale=HZ) {
        return instance().setClockSpeed(value, scale);
 8083118:	f7ff ffd6 	bl	80830c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 808311c:	4905      	ldr	r1, [pc, #20]	; (8083134 <_ZN15Adafruit_LIS3DH16beginTransactionEv+0x28>)
 808311e:	2201      	movs	r2, #1
 8083120:	f002 f914 	bl	808534c <_ZN8SPIClass13setClockSpeedEjj>
        instance().setDataMode(mode);
 8083124:	f7ff ffd0 	bl	80830c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    SPI.setClockSpeed(500000);
    SPI.setDataMode(SPI_MODE0);
#else
  SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
#endif
}
 8083128:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 808312c:	2100      	movs	r1, #0
 808312e:	f002 b8e7 	b.w	8085300 <_ZN8SPIClass11setDataModeEh>
 8083132:	bf00      	nop
 8083134:	0007a120 	.word	0x0007a120

08083138 <_ZN15Adafruit_LIS3DH7spixferEh>:
uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
 8083138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (_sck == -1)
 808313c:	f990 3020 	ldrsb.w	r3, [r0, #32]
uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
 8083140:	4605      	mov	r5, r0
  if (_sck == -1)
 8083142:	3301      	adds	r3, #1
uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
 8083144:	460f      	mov	r7, r1
  if (_sck == -1)
 8083146:	d106      	bne.n	8083156 <_ZN15Adafruit_LIS3DH7spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
 8083148:	f7ff ffbe 	bl	80830c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 808314c:	4639      	mov	r1, r7
}
 808314e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8083152:	f002 b927 	b.w	80853a4 <_ZN8SPIClass8transferEh>
  uint8_t reply = 0;
 8083156:	2400      	movs	r4, #0
  for (int i=7; i>=0; i--) {
 8083158:	2607      	movs	r6, #7
    digitalWrite(_mosi, x & (1<<i));
 808315a:	f04f 0801 	mov.w	r8, #1
    digitalWrite(_sck, LOW);
 808315e:	f995 0020 	ldrsb.w	r0, [r5, #32]
 8083162:	2100      	movs	r1, #0
 8083164:	b280      	uxth	r0, r0
 8083166:	f005 f866 	bl	8088236 <digitalWrite>
    digitalWrite(_mosi, x & (1<<i));
 808316a:	f995 001e 	ldrsb.w	r0, [r5, #30]
 808316e:	fa08 f106 	lsl.w	r1, r8, r6
 8083172:	4039      	ands	r1, r7
 8083174:	b280      	uxth	r0, r0
 8083176:	f005 f85e 	bl	8088236 <digitalWrite>
    digitalWrite(_sck, HIGH);
 808317a:	f995 0020 	ldrsb.w	r0, [r5, #32]
 808317e:	2101      	movs	r1, #1
 8083180:	b280      	uxth	r0, r0
 8083182:	f005 f858 	bl	8088236 <digitalWrite>
    if (digitalRead(_miso))
 8083186:	f995 001f 	ldrsb.w	r0, [r5, #31]
    reply <<= 1;
 808318a:	0064      	lsls	r4, r4, #1
    if (digitalRead(_miso))
 808318c:	b280      	uxth	r0, r0
    reply <<= 1;
 808318e:	b2e4      	uxtb	r4, r4
    if (digitalRead(_miso))
 8083190:	f005 f86a 	bl	8088268 <digitalRead>
 8083194:	b108      	cbz	r0, 808319a <_ZN15Adafruit_LIS3DH7spixferEh+0x62>
      reply |= 1;
 8083196:	f044 0401 	orr.w	r4, r4, #1
  for (int i=7; i>=0; i--) {
 808319a:	3e01      	subs	r6, #1
 808319c:	d2df      	bcs.n	808315e <_ZN15Adafruit_LIS3DH7spixferEh+0x26>
}
 808319e:	4620      	mov	r0, r4
 80831a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080831a4 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>:
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
 80831a4:	b570      	push	{r4, r5, r6, lr}
  if (_cs == -1) {
 80831a6:	f990 301d 	ldrsb.w	r3, [r0, #29]
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
 80831aa:	4604      	mov	r4, r0
  if (_cs == -1) {
 80831ac:	3301      	adds	r3, #1
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
 80831ae:	460e      	mov	r6, r1
 80831b0:	4615      	mov	r5, r2
  if (_cs == -1) {
 80831b2:	d116      	bne.n	80831e2 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x3e>
    Wire.beginTransmission((uint8_t)_i2caddr);
 80831b4:	f005 f926 	bl	8088404 <_Z19__fetch_global_Wirev>
 80831b8:	7f21      	ldrb	r1, [r4, #28]
 80831ba:	f004 fd59 	bl	8087c70 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
 80831be:	f005 f921 	bl	8088404 <_Z19__fetch_global_Wirev>
 80831c2:	6803      	ldr	r3, [r0, #0]
 80831c4:	4631      	mov	r1, r6
 80831c6:	689b      	ldr	r3, [r3, #8]
 80831c8:	4798      	blx	r3
    Wire.write((uint8_t)value);
 80831ca:	f005 f91b 	bl	8088404 <_Z19__fetch_global_Wirev>
 80831ce:	6803      	ldr	r3, [r0, #0]
 80831d0:	4629      	mov	r1, r5
 80831d2:	689b      	ldr	r3, [r3, #8]
 80831d4:	4798      	blx	r3
    Wire.endTransmission();
 80831d6:	f005 f915 	bl	8088404 <_Z19__fetch_global_Wirev>
}
 80831da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Wire.endTransmission();
 80831de:	f004 bd6a 	b.w	8087cb6 <_ZN7TwoWire15endTransmissionEv>
	if (_sck == -1)
 80831e2:	f990 3020 	ldrsb.w	r3, [r0, #32]
 80831e6:	3301      	adds	r3, #1
 80831e8:	d101      	bne.n	80831ee <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x4a>
	  beginTransaction();
 80831ea:	f7ff ff8f 	bl	808310c <_ZN15Adafruit_LIS3DH16beginTransactionEv>
    digitalWrite(_cs, LOW);
 80831ee:	f994 001d 	ldrsb.w	r0, [r4, #29]
 80831f2:	2100      	movs	r1, #0
 80831f4:	b280      	uxth	r0, r0
 80831f6:	f005 f81e 	bl	8088236 <digitalWrite>
    spixfer(reg & ~0x80); // write, bit 7 low
 80831fa:	f006 017f 	and.w	r1, r6, #127	; 0x7f
 80831fe:	4620      	mov	r0, r4
 8083200:	f7ff ff9a 	bl	8083138 <_ZN15Adafruit_LIS3DH7spixferEh>
    spixfer(value);
 8083204:	4629      	mov	r1, r5
 8083206:	4620      	mov	r0, r4
 8083208:	f7ff ff96 	bl	8083138 <_ZN15Adafruit_LIS3DH7spixferEh>
    digitalWrite(_cs, HIGH);
 808320c:	f994 001d 	ldrsb.w	r0, [r4, #29]
 8083210:	2101      	movs	r1, #1
}
 8083212:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    digitalWrite(_cs, HIGH);
 8083216:	b280      	uxth	r0, r0
 8083218:	f005 b80d 	b.w	8088236 <digitalWrite>

0808321c <_ZN15Adafruit_LIS3DH13readRegister8Eh>:
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
 808321c:	b538      	push	{r3, r4, r5, lr}
  if (_cs == -1) {
 808321e:	f990 301d 	ldrsb.w	r3, [r0, #29]
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
 8083222:	4604      	mov	r4, r0
  if (_cs == -1) {
 8083224:	3301      	adds	r3, #1
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
 8083226:	460d      	mov	r5, r1
  if (_cs == -1) {
 8083228:	d11d      	bne.n	8083266 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x4a>
    Wire.beginTransmission(_i2caddr);
 808322a:	f005 f8eb 	bl	8088404 <_Z19__fetch_global_Wirev>
 808322e:	f994 101c 	ldrsb.w	r1, [r4, #28]
 8083232:	f004 fd21 	bl	8087c78 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((uint8_t)reg);
 8083236:	f005 f8e5 	bl	8088404 <_Z19__fetch_global_Wirev>
 808323a:	6803      	ldr	r3, [r0, #0]
 808323c:	4629      	mov	r1, r5
 808323e:	689b      	ldr	r3, [r3, #8]
 8083240:	4798      	blx	r3
    Wire.endTransmission();
 8083242:	f005 f8df 	bl	8088404 <_Z19__fetch_global_Wirev>
 8083246:	f004 fd36 	bl	8087cb6 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(_i2caddr, 1);
 808324a:	f005 f8db 	bl	8088404 <_Z19__fetch_global_Wirev>
 808324e:	2201      	movs	r2, #1
 8083250:	7f21      	ldrb	r1, [r4, #28]
 8083252:	f004 fd0a 	bl	8087c6a <_ZN7TwoWire11requestFromEhj>
    value = Wire.read();
 8083256:	f005 f8d5 	bl	8088404 <_Z19__fetch_global_Wirev>
 808325a:	6803      	ldr	r3, [r0, #0]
 808325c:	695b      	ldr	r3, [r3, #20]
 808325e:	4798      	blx	r3
 8083260:	b2c5      	uxtb	r5, r0
}
 8083262:	4628      	mov	r0, r5
 8083264:	bd38      	pop	{r3, r4, r5, pc}
	if (_sck == -1)
 8083266:	f990 3020 	ldrsb.w	r3, [r0, #32]
 808326a:	3301      	adds	r3, #1
 808326c:	d101      	bne.n	8083272 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x56>
	  beginTransaction();
 808326e:	f7ff ff4d 	bl	808310c <_ZN15Adafruit_LIS3DH16beginTransactionEv>
	digitalWrite(_cs, LOW);
 8083272:	f994 001d 	ldrsb.w	r0, [r4, #29]
 8083276:	2100      	movs	r1, #0
 8083278:	b280      	uxth	r0, r0
 808327a:	f004 ffdc 	bl	8088236 <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
 808327e:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 8083282:	4620      	mov	r0, r4
 8083284:	f7ff ff58 	bl	8083138 <_ZN15Adafruit_LIS3DH7spixferEh>
    value = spixfer(0);
 8083288:	2100      	movs	r1, #0
 808328a:	4620      	mov	r0, r4
 808328c:	f7ff ff54 	bl	8083138 <_ZN15Adafruit_LIS3DH7spixferEh>
 8083290:	4605      	mov	r5, r0
    digitalWrite(_cs, HIGH);
 8083292:	f994 001d 	ldrsb.w	r0, [r4, #29]
 8083296:	2101      	movs	r1, #1
 8083298:	b280      	uxth	r0, r0
 808329a:	f004 ffcc 	bl	8088236 <digitalWrite>
    if (_sck == -1)
 808329e:	e7e0      	b.n	8083262 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x46>

080832a0 <_ZN15Adafruit_LIS3DH8setRangeE14lis3dh_range_t>:
{
 80832a0:	b538      	push	{r3, r4, r5, lr}
 80832a2:	460d      	mov	r5, r1
  uint8_t r = readRegister8(LIS3DH_REG_CTRL4);
 80832a4:	2123      	movs	r1, #35	; 0x23
{
 80832a6:	4604      	mov	r4, r0
  uint8_t r = readRegister8(LIS3DH_REG_CTRL4);
 80832a8:	f7ff ffb8 	bl	808321c <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  r &= ~(0x30);
 80832ac:	f020 0230 	bic.w	r2, r0, #48	; 0x30
  r |= range << 4;
 80832b0:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL4, r);
 80832b4:	4620      	mov	r0, r4
}
 80832b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeRegister8(LIS3DH_REG_CTRL4, r);
 80832ba:	2123      	movs	r1, #35	; 0x23
 80832bc:	b2d2      	uxtb	r2, r2
 80832be:	f7ff bf71 	b.w	80831a4 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

080832c2 <_ZN15Adafruit_LIS3DH8getRangeEv>:
  return (lis3dh_range_t)((readRegister8(LIS3DH_REG_CTRL4) >> 4) & 0x03);
 80832c2:	2123      	movs	r1, #35	; 0x23
{
 80832c4:	b508      	push	{r3, lr}
  return (lis3dh_range_t)((readRegister8(LIS3DH_REG_CTRL4) >> 4) & 0x03);
 80832c6:	f7ff ffa9 	bl	808321c <_ZN15Adafruit_LIS3DH13readRegister8Eh>
}
 80832ca:	f3c0 1001 	ubfx	r0, r0, #4, #2
 80832ce:	bd08      	pop	{r3, pc}

080832d0 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>:
{
 80832d0:	b538      	push	{r3, r4, r5, lr}
 80832d2:	460d      	mov	r5, r1
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
 80832d4:	2120      	movs	r1, #32
{
 80832d6:	4604      	mov	r4, r0
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
 80832d8:	f7ff ffa0 	bl	808321c <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  ctl1 &= ~(0xF0); // mask off bits
 80832dc:	f000 020f 	and.w	r2, r0, #15
  ctl1 |= (dataRate << 4);
 80832e0:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
 80832e4:	4620      	mov	r0, r4
}
 80832e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
 80832ea:	2120      	movs	r1, #32
 80832ec:	b2d2      	uxtb	r2, r2
 80832ee:	f7ff bf59 	b.w	80831a4 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
	...

080832f4 <_ZN15Adafruit_LIS3DH4readEv>:
void Adafruit_LIS3DH::read(void) {
 80832f4:	b538      	push	{r3, r4, r5, lr}
  if (_cs == -1) {
 80832f6:	f990 301d 	ldrsb.w	r3, [r0, #29]
void Adafruit_LIS3DH::read(void) {
 80832fa:	4604      	mov	r4, r0
  if (_cs == -1) {
 80832fc:	3301      	adds	r3, #1
 80832fe:	d170      	bne.n	80833e2 <_ZN15Adafruit_LIS3DH4readEv+0xee>
    Wire.beginTransmission(_i2caddr);
 8083300:	f005 f880 	bl	8088404 <_Z19__fetch_global_Wirev>
 8083304:	f994 101c 	ldrsb.w	r1, [r4, #28]
 8083308:	f004 fcb6 	bl	8087c78 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(LIS3DH_REG_OUT_X_L | 0x80); // 0x80 for autoincrement
 808330c:	f005 f87a 	bl	8088404 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 8083310:	6803      	ldr	r3, [r0, #0]
 8083312:	21a8      	movs	r1, #168	; 0xa8
 8083314:	689b      	ldr	r3, [r3, #8]
 8083316:	4798      	blx	r3
    Wire.endTransmission();
 8083318:	f005 f874 	bl	8088404 <_Z19__fetch_global_Wirev>
 808331c:	f004 fccb 	bl	8087cb6 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(_i2caddr, 6);
 8083320:	f005 f870 	bl	8088404 <_Z19__fetch_global_Wirev>
 8083324:	2206      	movs	r2, #6
 8083326:	7f21      	ldrb	r1, [r4, #28]
 8083328:	f004 fc9f 	bl	8087c6a <_ZN7TwoWire11requestFromEhj>
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
 808332c:	f005 f86a 	bl	8088404 <_Z19__fetch_global_Wirev>
 8083330:	6803      	ldr	r3, [r0, #0]
 8083332:	4d4f      	ldr	r5, [pc, #316]	; (8083470 <_ZN15Adafruit_LIS3DH4readEv+0x17c>)
 8083334:	695b      	ldr	r3, [r3, #20]
 8083336:	4798      	blx	r3
 8083338:	80e0      	strh	r0, [r4, #6]
 808333a:	f005 f863 	bl	8088404 <_Z19__fetch_global_Wirev>
 808333e:	6803      	ldr	r3, [r0, #0]
 8083340:	695b      	ldr	r3, [r3, #20]
 8083342:	4798      	blx	r3
 8083344:	88e3      	ldrh	r3, [r4, #6]
 8083346:	ea05 2000 	and.w	r0, r5, r0, lsl #8
 808334a:	4318      	orrs	r0, r3
 808334c:	80e0      	strh	r0, [r4, #6]
    y = Wire.read(); y |= ((uint16_t)Wire.read()) << 8;
 808334e:	f005 f859 	bl	8088404 <_Z19__fetch_global_Wirev>
 8083352:	6803      	ldr	r3, [r0, #0]
 8083354:	695b      	ldr	r3, [r3, #20]
 8083356:	4798      	blx	r3
 8083358:	8120      	strh	r0, [r4, #8]
 808335a:	f005 f853 	bl	8088404 <_Z19__fetch_global_Wirev>
 808335e:	6803      	ldr	r3, [r0, #0]
 8083360:	695b      	ldr	r3, [r3, #20]
 8083362:	4798      	blx	r3
 8083364:	8923      	ldrh	r3, [r4, #8]
 8083366:	ea05 2000 	and.w	r0, r5, r0, lsl #8
 808336a:	4318      	orrs	r0, r3
 808336c:	8120      	strh	r0, [r4, #8]
    z = Wire.read(); z |= ((uint16_t)Wire.read()) << 8;
 808336e:	f005 f849 	bl	8088404 <_Z19__fetch_global_Wirev>
 8083372:	6803      	ldr	r3, [r0, #0]
 8083374:	695b      	ldr	r3, [r3, #20]
 8083376:	4798      	blx	r3
 8083378:	8160      	strh	r0, [r4, #10]
 808337a:	f005 f843 	bl	8088404 <_Z19__fetch_global_Wirev>
 808337e:	6803      	ldr	r3, [r0, #0]
 8083380:	695b      	ldr	r3, [r3, #20]
 8083382:	4798      	blx	r3
 8083384:	ea05 2500 	and.w	r5, r5, r0, lsl #8
 8083388:	8960      	ldrh	r0, [r4, #10]
 808338a:	4305      	orrs	r5, r0
 808338c:	8165      	strh	r5, [r4, #10]
  uint8_t range = getRange();
 808338e:	4620      	mov	r0, r4
 8083390:	f7ff ff97 	bl	80832c2 <_ZN15Adafruit_LIS3DH8getRangeEv>
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
 8083394:	2803      	cmp	r0, #3
 8083396:	d062      	beq.n	808345e <_ZN15Adafruit_LIS3DH4readEv+0x16a>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
 8083398:	2802      	cmp	r0, #2
 808339a:	d063      	beq.n	8083464 <_ZN15Adafruit_LIS3DH4readEv+0x170>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
 808339c:	2801      	cmp	r0, #1
 808339e:	d064      	beq.n	808346a <_ZN15Adafruit_LIS3DH4readEv+0x176>
  if (range == LIS3DH_RANGE_2_G) divider = 16380;
 80833a0:	2800      	cmp	r0, #0
 80833a2:	f643 70fc 	movw	r0, #16380	; 0x3ffc
 80833a6:	bf18      	it	ne
 80833a8:	2001      	movne	r0, #1
  x_g = (float)x / divider;
 80833aa:	f007 f991 	bl	808a6d0 <__aeabi_i2f>
 80833ae:	4605      	mov	r5, r0
 80833b0:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 80833b4:	f007 f98c 	bl	808a6d0 <__aeabi_i2f>
 80833b8:	4629      	mov	r1, r5
 80833ba:	f007 fa91 	bl	808a8e0 <__aeabi_fdiv>
 80833be:	60e0      	str	r0, [r4, #12]
  y_g = (float)y / divider;
 80833c0:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 80833c4:	f007 f984 	bl	808a6d0 <__aeabi_i2f>
 80833c8:	4629      	mov	r1, r5
 80833ca:	f007 fa89 	bl	808a8e0 <__aeabi_fdiv>
 80833ce:	6120      	str	r0, [r4, #16]
  z_g = (float)z / divider;
 80833d0:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
 80833d4:	f007 f97c 	bl	808a6d0 <__aeabi_i2f>
 80833d8:	4629      	mov	r1, r5
 80833da:	f007 fa81 	bl	808a8e0 <__aeabi_fdiv>
 80833de:	6160      	str	r0, [r4, #20]
}
 80833e0:	bd38      	pop	{r3, r4, r5, pc}
    if (_sck == -1)
 80833e2:	f990 3020 	ldrsb.w	r3, [r0, #32]
 80833e6:	3301      	adds	r3, #1
 80833e8:	d101      	bne.n	80833ee <_ZN15Adafruit_LIS3DH4readEv+0xfa>
      beginTransaction();
 80833ea:	f7ff fe8f 	bl	808310c <_ZN15Adafruit_LIS3DH16beginTransactionEv>
    digitalWrite(_cs, LOW);
 80833ee:	f994 001d 	ldrsb.w	r0, [r4, #29]
 80833f2:	2100      	movs	r1, #0
 80833f4:	b280      	uxth	r0, r0
 80833f6:	f004 ff1e 	bl	8088236 <digitalWrite>
    spixfer(LIS3DH_REG_OUT_X_L | 0x80 | 0x40); // read multiple, bit 7&6 high
 80833fa:	21e8      	movs	r1, #232	; 0xe8
 80833fc:	4620      	mov	r0, r4
 80833fe:	f7ff fe9b 	bl	8083138 <_ZN15Adafruit_LIS3DH7spixferEh>
    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
 8083402:	21ff      	movs	r1, #255	; 0xff
 8083404:	4620      	mov	r0, r4
 8083406:	f7ff fe97 	bl	8083138 <_ZN15Adafruit_LIS3DH7spixferEh>
 808340a:	21ff      	movs	r1, #255	; 0xff
 808340c:	80e0      	strh	r0, [r4, #6]
 808340e:	4620      	mov	r0, r4
 8083410:	f7ff fe92 	bl	8083138 <_ZN15Adafruit_LIS3DH7spixferEh>
 8083414:	88e3      	ldrh	r3, [r4, #6]
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
 8083416:	21ff      	movs	r1, #255	; 0xff
    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
 8083418:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 808341c:	80e3      	strh	r3, [r4, #6]
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
 808341e:	4620      	mov	r0, r4
 8083420:	f7ff fe8a 	bl	8083138 <_ZN15Adafruit_LIS3DH7spixferEh>
 8083424:	21ff      	movs	r1, #255	; 0xff
 8083426:	8120      	strh	r0, [r4, #8]
 8083428:	4620      	mov	r0, r4
 808342a:	f7ff fe85 	bl	8083138 <_ZN15Adafruit_LIS3DH7spixferEh>
 808342e:	8923      	ldrh	r3, [r4, #8]
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
 8083430:	21ff      	movs	r1, #255	; 0xff
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
 8083432:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8083436:	8123      	strh	r3, [r4, #8]
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
 8083438:	4620      	mov	r0, r4
 808343a:	f7ff fe7d 	bl	8083138 <_ZN15Adafruit_LIS3DH7spixferEh>
 808343e:	21ff      	movs	r1, #255	; 0xff
 8083440:	8160      	strh	r0, [r4, #10]
 8083442:	4620      	mov	r0, r4
 8083444:	f7ff fe78 	bl	8083138 <_ZN15Adafruit_LIS3DH7spixferEh>
 8083448:	8963      	ldrh	r3, [r4, #10]
    digitalWrite(_cs, HIGH);
 808344a:	2101      	movs	r1, #1
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
 808344c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    digitalWrite(_cs, HIGH);
 8083450:	f994 001d 	ldrsb.w	r0, [r4, #29]
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
 8083454:	8163      	strh	r3, [r4, #10]
    digitalWrite(_cs, HIGH);
 8083456:	b280      	uxth	r0, r0
 8083458:	f004 feed 	bl	8088236 <digitalWrite>
    if (_sck == -1)
 808345c:	e797      	b.n	808338e <_ZN15Adafruit_LIS3DH4readEv+0x9a>
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
 808345e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8083462:	e7a2      	b.n	80833aa <_ZN15Adafruit_LIS3DH4readEv+0xb6>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
 8083464:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8083468:	e79f      	b.n	80833aa <_ZN15Adafruit_LIS3DH4readEv+0xb6>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
 808346a:	f641 70fe 	movw	r0, #8190	; 0x1ffe
 808346e:	e79c      	b.n	80833aa <_ZN15Adafruit_LIS3DH4readEv+0xb6>
 8083470:	00ffff00 	.word	0x00ffff00

08083474 <_ZN15Adafruit_LIS3DH8getEventEP15sensors_event_t>:
bool Adafruit_LIS3DH::getEvent(sensors_event_t *event) {
 8083474:	b570      	push	{r4, r5, r6, lr}
 8083476:	460c      	mov	r4, r1
 8083478:	4605      	mov	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
 808347a:	2220      	movs	r2, #32
 808347c:	2100      	movs	r1, #0
 808347e:	1d20      	adds	r0, r4, #4
 8083480:	f007 fbe0 	bl	808ac44 <memset>
  event->version   = sizeof(sensors_event_t);
 8083484:	2324      	movs	r3, #36	; 0x24
  event->type      = SENSOR_TYPE_ACCELEROMETER;
 8083486:	2601      	movs	r6, #1
  event->version   = sizeof(sensors_event_t);
 8083488:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
 808348a:	69ab      	ldr	r3, [r5, #24]
  read();
 808348c:	4628      	mov	r0, r5
  event->sensor_id = _sensorID;
 808348e:	6063      	str	r3, [r4, #4]
  event->type      = SENSOR_TYPE_ACCELEROMETER;
 8083490:	60a6      	str	r6, [r4, #8]
  read();
 8083492:	f7ff ff2f 	bl	80832f4 <_ZN15Adafruit_LIS3DH4readEv>
  event->acceleration.x = x_g;
 8083496:	68eb      	ldr	r3, [r5, #12]
}
 8083498:	4630      	mov	r0, r6
  event->acceleration.x = x_g;
 808349a:	6163      	str	r3, [r4, #20]
  event->acceleration.y = y_g;
 808349c:	692b      	ldr	r3, [r5, #16]
 808349e:	61a3      	str	r3, [r4, #24]
  event->acceleration.z = z_g;
 80834a0:	696b      	ldr	r3, [r5, #20]
 80834a2:	61e3      	str	r3, [r4, #28]
}
 80834a4:	bd70      	pop	{r4, r5, r6, pc}

080834a6 <_ZN15Adafruit_LIS3DH5beginEh>:
bool Adafruit_LIS3DH::begin(uint8_t i2caddr) {
 80834a6:	b510      	push	{r4, lr}
 80834a8:	4604      	mov	r4, r0
  _i2caddr = i2caddr;
 80834aa:	7701      	strb	r1, [r0, #28]
  if (_cs == -1) {
 80834ac:	f990 001d 	ldrsb.w	r0, [r0, #29]
 80834b0:	1c42      	adds	r2, r0, #1
 80834b2:	d123      	bne.n	80834fc <_ZN15Adafruit_LIS3DH5beginEh+0x56>
    Wire.begin();
 80834b4:	f004 ffa6 	bl	8088404 <_Z19__fetch_global_Wirev>
 80834b8:	f004 fba8 	bl	8087c0c <_ZN7TwoWire5beginEv>
  uint8_t deviceid = readRegister8(LIS3DH_REG_WHOAMI);
 80834bc:	210f      	movs	r1, #15
 80834be:	4620      	mov	r0, r4
 80834c0:	f7ff feac 	bl	808321c <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  if (deviceid != 0x33)
 80834c4:	2833      	cmp	r0, #51	; 0x33
 80834c6:	d13d      	bne.n	8083544 <_ZN15Adafruit_LIS3DH5beginEh+0x9e>
  writeRegister8(LIS3DH_REG_CTRL1, 0x07);
 80834c8:	2207      	movs	r2, #7
 80834ca:	2120      	movs	r1, #32
 80834cc:	4620      	mov	r0, r4
 80834ce:	f7ff fe69 	bl	80831a4 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  setDataRate(LIS3DH_DATARATE_400_HZ);
 80834d2:	2107      	movs	r1, #7
 80834d4:	4620      	mov	r0, r4
 80834d6:	f7ff fefb 	bl	80832d0 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>
  writeRegister8(LIS3DH_REG_CTRL4, 0x88);
 80834da:	2288      	movs	r2, #136	; 0x88
 80834dc:	2123      	movs	r1, #35	; 0x23
 80834de:	4620      	mov	r0, r4
 80834e0:	f7ff fe60 	bl	80831a4 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_CTRL3, 0x10);
 80834e4:	2210      	movs	r2, #16
 80834e6:	2122      	movs	r1, #34	; 0x22
 80834e8:	4620      	mov	r0, r4
 80834ea:	f7ff fe5b 	bl	80831a4 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_TEMPCFG, 0x80);
 80834ee:	4620      	mov	r0, r4
 80834f0:	2280      	movs	r2, #128	; 0x80
 80834f2:	211f      	movs	r1, #31
 80834f4:	f7ff fe56 	bl	80831a4 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  return true;
 80834f8:	2001      	movs	r0, #1
}
 80834fa:	bd10      	pop	{r4, pc}
    digitalWrite(_cs, HIGH);
 80834fc:	2101      	movs	r1, #1
 80834fe:	b280      	uxth	r0, r0
 8083500:	f004 fe99 	bl	8088236 <digitalWrite>
    pinMode(_cs, OUTPUT);
 8083504:	f994 001d 	ldrsb.w	r0, [r4, #29]
 8083508:	2101      	movs	r1, #1
 808350a:	b280      	uxth	r0, r0
 808350c:	f004 fe82 	bl	8088214 <pinMode>
    if (_sck == -1) {
 8083510:	f994 0020 	ldrsb.w	r0, [r4, #32]
 8083514:	1c43      	adds	r3, r0, #1
 8083516:	d104      	bne.n	8083522 <_ZN15Adafruit_LIS3DH5beginEh+0x7c>
        instance().begin();
 8083518:	f7ff fdd6 	bl	80830c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 808351c:	f001 fed2 	bl	80852c4 <_ZN8SPIClass5beginEv>
    }
 8083520:	e7cc      	b.n	80834bc <_ZN15Adafruit_LIS3DH5beginEh+0x16>
      pinMode(_sck, OUTPUT);
 8083522:	2101      	movs	r1, #1
 8083524:	b280      	uxth	r0, r0
 8083526:	f004 fe75 	bl	8088214 <pinMode>
      pinMode(_mosi, OUTPUT);
 808352a:	f994 001e 	ldrsb.w	r0, [r4, #30]
 808352e:	2101      	movs	r1, #1
 8083530:	b280      	uxth	r0, r0
 8083532:	f004 fe6f 	bl	8088214 <pinMode>
      pinMode(_miso, INPUT);
 8083536:	f994 001f 	ldrsb.w	r0, [r4, #31]
 808353a:	2100      	movs	r1, #0
 808353c:	b280      	uxth	r0, r0
 808353e:	f004 fe69 	bl	8088214 <pinMode>
 8083542:	e7bb      	b.n	80834bc <_ZN15Adafruit_LIS3DH5beginEh+0x16>
    return false;
 8083544:	2000      	movs	r0, #0
 8083546:	e7d8      	b.n	80834fa <_ZN15Adafruit_LIS3DH5beginEh+0x54>

08083548 <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>:
    return((m[1]*256)+(m[0]));
}
int32_t
UbloxM8Q_GPS::getLong(uint8_t *m)
{
    return((m[3]*(0xFFFFFF+1))+(m[2]*(0xFFFF+1))+(m[1]*(0xFF+1))+(m[0]));
 8083548:	7883      	ldrb	r3, [r0, #2]
 808354a:	78c2      	ldrb	r2, [r0, #3]
 808354c:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 8083550:	7843      	ldrb	r3, [r0, #1]
 8083552:	7800      	ldrb	r0, [r0, #0]
 8083554:	eb03 2302 	add.w	r3, r3, r2, lsl #8
}
 8083558:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 808355c:	4770      	bx	lr

0808355e <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>:
    size_t println(T b, int base = DEC) {
 808355e:	b570      	push	{r4, r5, r6, lr}
 8083560:	4605      	mov	r5, r0
 8083562:	460c      	mov	r4, r1
    if (base == 0) {
 8083564:	4616      	mov	r6, r2
 8083566:	b942      	cbnz	r2, 808357a <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x1c>
        return write(n);
 8083568:	6803      	ldr	r3, [r0, #0]
 808356a:	b2c9      	uxtb	r1, r1
 808356c:	689b      	ldr	r3, [r3, #8]
 808356e:	4798      	blx	r3
        n += println();
 8083570:	4628      	mov	r0, r5
    }
 8083572:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        n += println();
 8083576:	f002 b9c8 	b.w	808590a <_ZN5Print7printlnEv>
        if (n < 0 && base == 10) {
 808357a:	2900      	cmp	r1, #0
 808357c:	da0a      	bge.n	8083594 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x36>
 808357e:	2a0a      	cmp	r2, #10
 8083580:	d108      	bne.n	8083594 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x36>
            t = print('-');
 8083582:	212d      	movs	r1, #45	; 0x2d
 8083584:	f002 f9be 	bl	8085904 <_ZN5Print5printEc>
            val = -n;
 8083588:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
 808358a:	4628      	mov	r0, r5
 808358c:	b2f2      	uxtb	r2, r6
 808358e:	f002 f9d2 	bl	8085936 <_ZN5Print11printNumberEmh>
 8083592:	e7ed      	b.n	8083570 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x12>
            val = n;
 8083594:	4621      	mov	r1, r4
 8083596:	e7f8      	b.n	808358a <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x2c>

08083598 <_ZN12UbloxM8Q_GPS11common_initEv>:
  latitude = longitude = 0.0;
 8083598:	2200      	movs	r2, #0
  initComplete = false;
 808359a:	2300      	movs	r3, #0
  latitude = longitude = 0.0;
 808359c:	6142      	str	r2, [r0, #20]
  hour = minute = seconds = month = day = 0;
 808359e:	e9c0 3300 	strd	r3, r3, [r0]
  milliseconds = tow = 0;
 80835a2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  horzAcc = vertAcc = 0; // mm
 80835a6:	e9c0 330e 	strd	r3, r3, [r0, #56]	; 0x38
  velN = velE = velD = 0; // north, east, down velocity, mm/s
 80835aa:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
 80835ae:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
  odoTrip = 0; // odometer since last time commanded reset, m
 80835b2:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
  odoAcc = 0; // odometer accuracy, m (1-sigma)
 80835b6:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
  dateValid = false;
 80835ba:	8203      	strh	r3, [r0, #16]
  latitude = longitude = 0.0;
 80835bc:	6182      	str	r2, [r0, #24]
  latitudeDegrees = longitudeDegrees = 0.0;
 80835be:	61c2      	str	r2, [r0, #28]
 80835c0:	6202      	str	r2, [r0, #32]
  geoidheight = altitude = 0.0;
 80835c2:	6242      	str	r2, [r0, #36]	; 0x24
 80835c4:	6282      	str	r2, [r0, #40]	; 0x28
  speed = 0.0; // m/s - its just gSpeed/1000.0
 80835c6:	62c2      	str	r2, [r0, #44]	; 0x2c
  headingMot = headingVeh = 0.0; // degrees
 80835c8:	6302      	str	r2, [r0, #48]	; 0x30
 80835ca:	6342      	str	r2, [r0, #52]	; 0x34
}
 80835cc:	4770      	bx	lr

080835ce <_ZN12UbloxM8Q_GPSC1Ev>:
UbloxM8Q_GPS::UbloxM8Q_GPS()
 80835ce:	b508      	push	{r3, lr}
    common_init();
 80835d0:	f7ff ffe2 	bl	8083598 <_ZN12UbloxM8Q_GPS11common_initEv>
}
 80835d4:	bd08      	pop	{r3, pc}

080835d6 <_ZN12UbloxM8Q_GPS5ubxCSEPhS0_S0_>:
    *ck_a = 0, *ck_b = 0;
 80835d6:	2000      	movs	r0, #0
{
 80835d8:	b530      	push	{r4, r5, lr}
    *ck_a = 0, *ck_b = 0;
 80835da:	7010      	strb	r0, [r2, #0]
 80835dc:	7018      	strb	r0, [r3, #0]

  // set when receiver enabled
  bool gpsOn;
  // length is 2 bytes, little endian
  int ubx_length(uint8_t *m) {
        return( ((m[LENGTH_IDX])+(m[LENGTH_IDX+1]*256)));}
 80835de:	794d      	ldrb	r5, [r1, #5]
 80835e0:	7908      	ldrb	r0, [r1, #4]
 80835e2:	1c4c      	adds	r4, r1, #1
 80835e4:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 80835e8:	3105      	adds	r1, #5
 80835ea:	4408      	add	r0, r1
	*ck_a = *ck_a + msg[i + 2]; // skip the 2 byte header
 80835ec:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 80835f0:	7811      	ldrb	r1, [r2, #0]
    for(i=0;i < length + 4;i++)
 80835f2:	42a0      	cmp	r0, r4
	*ck_a = *ck_a + msg[i + 2]; // skip the 2 byte header
 80835f4:	4429      	add	r1, r5
 80835f6:	b2c9      	uxtb	r1, r1
 80835f8:	7011      	strb	r1, [r2, #0]
	*ck_b = *ck_b + *ck_a;
 80835fa:	781d      	ldrb	r5, [r3, #0]
 80835fc:	4429      	add	r1, r5
 80835fe:	7019      	strb	r1, [r3, #0]
    for(i=0;i < length + 4;i++)
 8083600:	d1f4      	bne.n	80835ec <_ZN12UbloxM8Q_GPS5ubxCSEPhS0_S0_+0x16>
}
 8083602:	bd30      	pop	{r4, r5, pc}

08083604 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_>:
{
 8083604:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    switch (state){
 8083608:	4e6f      	ldr	r6, [pc, #444]	; (80837c8 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1c4>)
{
 808360a:	4681      	mov	r9, r0
    switch (state){
 808360c:	7835      	ldrb	r5, [r6, #0]
{
 808360e:	460c      	mov	r4, r1
 8083610:	4690      	mov	r8, r2
 8083612:	461f      	mov	r7, r3
 8083614:	2d03      	cmp	r5, #3
 8083616:	d824      	bhi.n	8083662 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x5e>
 8083618:	e8df f005 	tbb	[pc, r5]
 808361c:	9b834b02 	.word	0x9b834b02
	if (firstTime){
 8083620:	4d6a      	ldr	r5, [pc, #424]	; (80837cc <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1c8>)
 8083622:	782b      	ldrb	r3, [r5, #0]
 8083624:	b12b      	cbz	r3, 8083632 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x2e>
 8083626:	f001 fa4b 	bl	8084ac0 <HAL_Timer_Get_Milli_Seconds>
	    startTime = millis();
 808362a:	4b69      	ldr	r3, [pc, #420]	; (80837d0 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1cc>)
 808362c:	6018      	str	r0, [r3, #0]
	    firstTime = false;
 808362e:	2300      	movs	r3, #0
 8083630:	702b      	strb	r3, [r5, #0]
	if(Serial1.available()){
 8083632:	f004 fa71 	bl	8087b18 <_Z22__fetch_global_Serial1v>
 8083636:	6803      	ldr	r3, [r0, #0]
 8083638:	691b      	ldr	r3, [r3, #16]
 808363a:	4798      	blx	r3
 808363c:	b168      	cbz	r0, 808365a <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x56>
	    msg[0] = Serial1.read();
 808363e:	f004 fa6b 	bl	8087b18 <_Z22__fetch_global_Serial1v>
 8083642:	6803      	ldr	r3, [r0, #0]
 8083644:	695b      	ldr	r3, [r3, #20]
 8083646:	4798      	blx	r3
 8083648:	b2c0      	uxtb	r0, r0
	    if (msg[0] == 0xb5){
 808364a:	28b5      	cmp	r0, #181	; 0xb5
	    msg[0] = Serial1.read();
 808364c:	7020      	strb	r0, [r4, #0]
	    if (msg[0] == 0xb5){
 808364e:	d10a      	bne.n	8083666 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x62>
		i = 1;
 8083650:	2301      	movs	r3, #1
 8083652:	4a60      	ldr	r2, [pc, #384]	; (80837d4 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1d0>)
		state = ubxLength;
 8083654:	7033      	strb	r3, [r6, #0]
		i = 1;
 8083656:	6013      	str	r3, [r2, #0]
		firstTime = true;
 8083658:	702b      	strb	r3, [r5, #0]
 808365a:	f001 fa31 	bl	8084ac0 <HAL_Timer_Get_Milli_Seconds>
	if ((state == waitB5) && ((cur - startTime)> ubxWatchdog)){
 808365e:	7834      	ldrb	r4, [r6, #0]
 8083660:	b16c      	cbz	r4, 808367e <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x7a>
    switch (state){
 8083662:	2501      	movs	r5, #1
 8083664:	e051      	b.n	808370a <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x106>
		Serial.print(">");
 8083666:	f004 f8a9 	bl	80877bc <_Z16_fetch_usbserialv>
 808366a:	495b      	ldr	r1, [pc, #364]	; (80837d8 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1d4>)
 808366c:	f002 f946 	bl	80858fc <_ZN5Print5printEPKc>
		Serial.print(msg[0], HEX);
 8083670:	f004 f8a4 	bl	80877bc <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
 8083674:	2210      	movs	r2, #16
 8083676:	7821      	ldrb	r1, [r4, #0]
 8083678:	f002 f95d 	bl	8085936 <_ZN5Print11printNumberEmh>
 808367c:	e7ed      	b.n	808365a <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x56>
	if ((state == waitB5) && ((cur - startTime)> ubxWatchdog)){
 808367e:	4b54      	ldr	r3, [pc, #336]	; (80837d0 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1cc>)
 8083680:	681b      	ldr	r3, [r3, #0]
 8083682:	1ac0      	subs	r0, r0, r3
 8083684:	4b55      	ldr	r3, [pc, #340]	; (80837dc <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1d8>)
 8083686:	681b      	ldr	r3, [r3, #0]
 8083688:	4298      	cmp	r0, r3
 808368a:	d9ea      	bls.n	8083662 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x5e>
	    Serial.println("Tired of waiting for the GPS. I'm going shut it off and reboot.");
 808368c:	f004 f896 	bl	80877bc <_Z16_fetch_usbserialv>
 8083690:	4953      	ldr	r1, [pc, #332]	; (80837e0 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1dc>)
 8083692:	f002 f946 	bl	8085922 <_ZN5Print7printlnEPKc>
	    delay(2000);
 8083696:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 808369a:	f003 fb4b 	bl	8086d34 <delay>
	    digitalWrite(D6,HIGH);
 808369e:	2101      	movs	r1, #1
 80836a0:	2006      	movs	r0, #6
 80836a2:	f004 fdc8 	bl	8088236 <digitalWrite>
	    delay(2000);
 80836a6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80836aa:	f003 fb43 	bl	8086d34 <delay>
	    resetFunc();
 80836ae:	47a0      	blx	r4
 80836b0:	e7d7      	b.n	8083662 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x5e>
	if(Serial1.available()){
 80836b2:	f004 fa31 	bl	8087b18 <_Z22__fetch_global_Serial1v>
 80836b6:	6803      	ldr	r3, [r0, #0]
 80836b8:	f8df 9118 	ldr.w	r9, [pc, #280]	; 80837d4 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1d0>
 80836bc:	691b      	ldr	r3, [r3, #16]
 80836be:	4798      	blx	r3
 80836c0:	b150      	cbz	r0, 80836d8 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0xd4>
	    msg[i] = Serial1.read();
 80836c2:	f004 fa29 	bl	8087b18 <_Z22__fetch_global_Serial1v>
 80836c6:	6803      	ldr	r3, [r0, #0]
 80836c8:	695b      	ldr	r3, [r3, #20]
 80836ca:	4798      	blx	r3
 80836cc:	f8d9 3000 	ldr.w	r3, [r9]
 80836d0:	54e0      	strb	r0, [r4, r3]
	    i++;
 80836d2:	3301      	adds	r3, #1
 80836d4:	f8c9 3000 	str.w	r3, [r9]
	if (i == 6){ // read all the header
 80836d8:	f8d9 3000 	ldr.w	r3, [r9]
 80836dc:	2b06      	cmp	r3, #6
 80836de:	d1c0      	bne.n	8083662 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x5e>
 80836e0:	7962      	ldrb	r2, [r4, #5]
 80836e2:	7923      	ldrb	r3, [r4, #4]
 80836e4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	    if ( *length > (256 - 8) ){
 80836e8:	2bf8      	cmp	r3, #248	; 0xf8
	    *length = ubx_length(msg);
 80836ea:	603b      	str	r3, [r7, #0]
	    if ( *length > (256 - 8) ){
 80836ec:	dd11      	ble.n	8083712 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x10e>
		Serial.print("readUBXmsg bad length: ");
 80836ee:	f004 f865 	bl	80877bc <_Z16_fetch_usbserialv>
 80836f2:	493c      	ldr	r1, [pc, #240]	; (80837e4 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1e0>)
 80836f4:	f002 f902 	bl	80858fc <_ZN5Print5printEPKc>
		Serial.println(*length);
 80836f8:	f004 f860 	bl	80877bc <_Z16_fetch_usbserialv>
 80836fc:	220a      	movs	r2, #10
 80836fe:	6839      	ldr	r1, [r7, #0]
 8083700:	f7ff ff2d 	bl	808355e <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
		state = waitB5;
 8083704:	2300      	movs	r3, #0
		return ubxBAD_LENGTH;
 8083706:	2502      	movs	r5, #2
		state = waitB5;
 8083708:	7033      	strb	r3, [r6, #0]
}
 808370a:	4628      	mov	r0, r5
 808370c:	b003      	add	sp, #12
 808370e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*type = ubxMsgType(msg);
 8083712:	8863      	ldrh	r3, [r4, #2]
 8083714:	ba5b      	rev16	r3, r3
 8083716:	b29b      	uxth	r3, r3
 8083718:	f8c8 3000 	str.w	r3, [r8]
		state = payload;
 808371c:	2302      	movs	r3, #2
 808371e:	7033      	strb	r3, [r6, #0]
 8083720:	e7f3      	b.n	808370a <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x106>
	if(Serial1.available()){
 8083722:	f004 f9f9 	bl	8087b18 <_Z22__fetch_global_Serial1v>
 8083726:	6803      	ldr	r3, [r0, #0]
 8083728:	4d2a      	ldr	r5, [pc, #168]	; (80837d4 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1d0>)
 808372a:	691b      	ldr	r3, [r3, #16]
 808372c:	4798      	blx	r3
 808372e:	b140      	cbz	r0, 8083742 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x13e>
	    msg[i] = Serial1.read();
 8083730:	f004 f9f2 	bl	8087b18 <_Z22__fetch_global_Serial1v>
 8083734:	6803      	ldr	r3, [r0, #0]
 8083736:	695b      	ldr	r3, [r3, #20]
 8083738:	4798      	blx	r3
 808373a:	682b      	ldr	r3, [r5, #0]
 808373c:	54e0      	strb	r0, [r4, r3]
	    i++;
 808373e:	3301      	adds	r3, #1
 8083740:	602b      	str	r3, [r5, #0]
	if ( i == (6 + *length)){
 8083742:	683b      	ldr	r3, [r7, #0]
 8083744:	682a      	ldr	r2, [r5, #0]
 8083746:	3306      	adds	r3, #6
 8083748:	4293      	cmp	r3, r2
 808374a:	d18a      	bne.n	8083662 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x5e>
	    state = checksum;
 808374c:	2303      	movs	r3, #3
 808374e:	7033      	strb	r3, [r6, #0]
 8083750:	e787      	b.n	8083662 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x5e>
	if(Serial1.available()){
 8083752:	f004 f9e1 	bl	8087b18 <_Z22__fetch_global_Serial1v>
 8083756:	6803      	ldr	r3, [r0, #0]
 8083758:	f8df 8078 	ldr.w	r8, [pc, #120]	; 80837d4 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1d0>
 808375c:	691b      	ldr	r3, [r3, #16]
 808375e:	4798      	blx	r3
 8083760:	b150      	cbz	r0, 8083778 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x174>
	    msg[i] = Serial1.read();
 8083762:	f004 f9d9 	bl	8087b18 <_Z22__fetch_global_Serial1v>
 8083766:	6803      	ldr	r3, [r0, #0]
 8083768:	695b      	ldr	r3, [r3, #20]
 808376a:	4798      	blx	r3
 808376c:	f8d8 3000 	ldr.w	r3, [r8]
 8083770:	54e0      	strb	r0, [r4, r3]
	    i++;
 8083772:	3301      	adds	r3, #1
 8083774:	f8c8 3000 	str.w	r3, [r8]
	if ( i == (8 + *length)){
 8083778:	683f      	ldr	r7, [r7, #0]
 808377a:	f8d8 3000 	ldr.w	r3, [r8]
 808377e:	3708      	adds	r7, #8
 8083780:	429f      	cmp	r7, r3
 8083782:	f47f af6e 	bne.w	8083662 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x5e>
	    state = waitB5; // going to start over error or not
 8083786:	f04f 0800 	mov.w	r8, #0
	    ubxCS(msg, &ck_a, &ck_b);
 808378a:	4621      	mov	r1, r4
 808378c:	f10d 0307 	add.w	r3, sp, #7
 8083790:	f10d 0206 	add.w	r2, sp, #6
 8083794:	4648      	mov	r0, r9
	    if ( (msg[i-2] != ck_a) || (msg[i-1] != ck_b)){
 8083796:	443c      	add	r4, r7
	    state = waitB5; // going to start over error or not
 8083798:	f886 8000 	strb.w	r8, [r6]
	    ubxCS(msg, &ck_a, &ck_b);
 808379c:	f7ff ff1b 	bl	80835d6 <_ZN12UbloxM8Q_GPS5ubxCSEPhS0_S0_>
	    if ( (msg[i-2] != ck_a) || (msg[i-1] != ck_b)){
 80837a0:	f814 2c02 	ldrb.w	r2, [r4, #-2]
 80837a4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80837a8:	429a      	cmp	r2, r3
 80837aa:	d105      	bne.n	80837b8 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1b4>
 80837ac:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 80837b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80837b4:	429a      	cmp	r2, r3
 80837b6:	d005      	beq.n	80837c4 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1c0>
		Serial.println("readUBXmsg bad check sum ");
 80837b8:	f004 f800 	bl	80877bc <_Z16_fetch_usbserialv>
 80837bc:	490a      	ldr	r1, [pc, #40]	; (80837e8 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1e4>)
 80837be:	f002 f8b0 	bl	8085922 <_ZN5Print7printlnEPKc>
		return ubxBAD_CHECK_SUM;
 80837c2:	e7a2      	b.n	808370a <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x106>
	    return ubxSUCCESS;
 80837c4:	4645      	mov	r5, r8
 80837c6:	e7a0      	b.n	808370a <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x106>
 80837c8:	200003a0 	.word	0x200003a0
 80837cc:	20000030 	.word	0x20000030
 80837d0:	200003a4 	.word	0x200003a4
 80837d4:	2000039c 	.word	0x2000039c
 80837d8:	0808b8a8 	.word	0x0808b8a8
 80837dc:	200000b4 	.word	0x200000b4
 80837e0:	0808b8aa 	.word	0x0808b8aa
 80837e4:	0808b8ea 	.word	0x0808b8ea
 80837e8:	0808b902 	.word	0x0808b902

080837ec <_ZN12UbloxM8Q_GPS8ubxAddCSEPh>:
{
 80837ec:	460a      	mov	r2, r1
 80837ee:	b410      	push	{r4}
 80837f0:	794b      	ldrb	r3, [r1, #5]
 80837f2:	790c      	ldrb	r4, [r1, #4]
 80837f4:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    ubxCS(msg, &msg[length+6], &msg[length+7]);
 80837f8:	1de3      	adds	r3, r4, #7
 80837fa:	3406      	adds	r4, #6
 80837fc:	4422      	add	r2, r4
 80837fe:	440b      	add	r3, r1
}
 8083800:	bc10      	pop	{r4}
    ubxCS(msg, &msg[length+6], &msg[length+7]);
 8083802:	f7ff bee8 	b.w	80835d6 <_ZN12UbloxM8Q_GPS5ubxCSEPhS0_S0_>
	...

08083808 <_ZN12UbloxM8Q_GPS7showUbxEPh>:
{
 8083808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808380a:	460d      	mov	r5, r1
    for (i = 0; i < length + 8; i++){
 808380c:	2600      	movs	r6, #0
 808380e:	794b      	ldrb	r3, [r1, #5]
 8083810:	790c      	ldrb	r4, [r1, #4]
	Serial.print(msg[i], HEX); Serial.print(",");
 8083812:	4f0c      	ldr	r7, [pc, #48]	; (8083844 <_ZN12UbloxM8Q_GPS7showUbxEPh+0x3c>)
 8083814:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    for (i = 0; i < length + 8; i++){
 8083818:	3407      	adds	r4, #7
	Serial.print(msg[i], HEX); Serial.print(",");
 808381a:	f003 ffcf 	bl	80877bc <_Z16_fetch_usbserialv>
 808381e:	5da9      	ldrb	r1, [r5, r6]
 8083820:	2210      	movs	r2, #16
 8083822:	f002 f888 	bl	8085936 <_ZN5Print11printNumberEmh>
    for (i = 0; i < length + 8; i++){
 8083826:	3601      	adds	r6, #1
	Serial.print(msg[i], HEX); Serial.print(",");
 8083828:	f003 ffc8 	bl	80877bc <_Z16_fetch_usbserialv>
 808382c:	4639      	mov	r1, r7
 808382e:	f002 f865 	bl	80858fc <_ZN5Print5printEPKc>
    for (i = 0; i < length + 8; i++){
 8083832:	42b4      	cmp	r4, r6
 8083834:	daf1      	bge.n	808381a <_ZN12UbloxM8Q_GPS7showUbxEPh+0x12>
    Serial.println(" ");
 8083836:	f003 ffc1 	bl	80877bc <_Z16_fetch_usbserialv>
}
 808383a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Serial.println(" ");
 808383e:	4902      	ldr	r1, [pc, #8]	; (8083848 <_ZN12UbloxM8Q_GPS7showUbxEPh+0x40>)
 8083840:	f002 b86f 	b.w	8085922 <_ZN5Print7printlnEPKc>
 8083844:	0808b91c 	.word	0x0808b91c
 8083848:	0808bb8a 	.word	0x0808bb8a

0808384c <_ZN12UbloxM8Q_GPS8getULongEPh>:
uint32_t 
UbloxM8Q_GPS::getULong(uint8_t *m)
{
    return((m[3]*(0xFFFFFF+1))+(m[2]*(0xFFFF+1))+(m[1]*(0xFF+1))+(m[0]));
 808384c:	78cb      	ldrb	r3, [r1, #3]
 808384e:	7888      	ldrb	r0, [r1, #2]
 8083850:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8083854:	784b      	ldrb	r3, [r1, #1]
 8083856:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 808385a:	7808      	ldrb	r0, [r1, #0]
}
 808385c:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8083860:	4770      	bx	lr
 8083862:	0000      	movs	r0, r0
 8083864:	0000      	movs	r0, r0
	...

08083868 <_ZN12UbloxM8Q_GPS11parsePOSLLHEPh>:
{
 8083868:	b538      	push	{r3, r4, r5, lr}
 808386a:	4604      	mov	r4, r0
       ((float) getLong(&data[4])) * 0.0000001;
 808386c:	f101 000a 	add.w	r0, r1, #10
 8083870:	f7ff fe6a 	bl	8083548 <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
{
 8083874:	460d      	mov	r5, r1
       ((float) getLong(&data[4])) * 0.0000001;
 8083876:	f006 ff2b 	bl	808a6d0 <__aeabi_i2f>
 808387a:	f006 facf 	bl	8089e1c <__aeabi_f2d>
 808387e:	a31c      	add	r3, pc, #112	; (adr r3, 80838f0 <_ZN12UbloxM8Q_GPS11parsePOSLLHEPh+0x88>)
 8083880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8083884:	f006 fb22 	bl	8089ecc <__aeabi_dmul>
 8083888:	f006 fe18 	bl	808a4bc <__aeabi_d2f>
    longitudeDegrees =
 808388c:	6220      	str	r0, [r4, #32]
    longitude =              // Longitude, deg
 808388e:	61a0      	str	r0, [r4, #24]
       ((float) getLong(&data[8])) * 0.0000001;
 8083890:	f105 000e 	add.w	r0, r5, #14
 8083894:	f7ff fe58 	bl	8083548 <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
 8083898:	f006 ff1a 	bl	808a6d0 <__aeabi_i2f>
 808389c:	f006 fabe 	bl	8089e1c <__aeabi_f2d>
 80838a0:	a313      	add	r3, pc, #76	; (adr r3, 80838f0 <_ZN12UbloxM8Q_GPS11parsePOSLLHEPh+0x88>)
 80838a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80838a6:	f006 fb11 	bl	8089ecc <__aeabi_dmul>
 80838aa:	f006 fe07 	bl	808a4bc <__aeabi_d2f>
    latitudeDegrees =
 80838ae:	61e0      	str	r0, [r4, #28]
    latitude =              // Latitude, deg
 80838b0:	6160      	str	r0, [r4, #20]
       (float)getLong(&data[12]);  // WGS84 unless user altered. See ublox spec.
 80838b2:	f105 0012 	add.w	r0, r5, #18
 80838b6:	f7ff fe47 	bl	8083548 <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
 80838ba:	f006 ff09 	bl	808a6d0 <__aeabi_i2f>
       (float)getULong(&data[16]);
 80838be:	f105 0116 	add.w	r1, r5, #22
       (float)getLong(&data[12]);  // WGS84 unless user altered. See ublox spec.
 80838c2:	6260      	str	r0, [r4, #36]	; 0x24
       (float)getULong(&data[16]);
 80838c4:	4620      	mov	r0, r4
 80838c6:	f7ff ffc1 	bl	808384c <_ZN12UbloxM8Q_GPS8getULongEPh>
 80838ca:	f006 fefd 	bl	808a6c8 <__aeabi_ui2f>
       getULong(&data[20]);
 80838ce:	f105 011a 	add.w	r1, r5, #26
       (float)getULong(&data[16]);
 80838d2:	62a0      	str	r0, [r4, #40]	; 0x28
       getULong(&data[20]);
 80838d4:	4620      	mov	r0, r4
 80838d6:	f7ff ffb9 	bl	808384c <_ZN12UbloxM8Q_GPS8getULongEPh>
       getULong(&data[24]);
 80838da:	f105 011e 	add.w	r1, r5, #30
    horzAcc =                // Horizontal Accuracy estimate, mm
 80838de:	63e0      	str	r0, [r4, #60]	; 0x3c
       getULong(&data[24]);
 80838e0:	4620      	mov	r0, r4
 80838e2:	f7ff ffb3 	bl	808384c <_ZN12UbloxM8Q_GPS8getULongEPh>
    vertAcc =                // Vertical Accuracy extimate, mm
 80838e6:	6420      	str	r0, [r4, #64]	; 0x40
}
 80838e8:	bd38      	pop	{r3, r4, r5, pc}
 80838ea:	bf00      	nop
 80838ec:	f3af 8000 	nop.w
 80838f0:	9abcaf48 	.word	0x9abcaf48
 80838f4:	3e7ad7f2 	.word	0x3e7ad7f2

080838f8 <_ZN12UbloxM8Q_GPS8parsePVTEPh>:
{
 80838f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80838fa:	460d      	mov	r5, r1
    tow = getULong(&data[0]);
 80838fc:	3106      	adds	r1, #6
{
 80838fe:	4604      	mov	r4, r0
    tow = getULong(&data[0]);
 8083900:	f7ff ffa4 	bl	808384c <_ZN12UbloxM8Q_GPS8getULongEPh>
 8083904:	60e0      	str	r0, [r4, #12]
    if ((data[21] & 0x01) == 0){
 8083906:	7eeb      	ldrb	r3, [r5, #27]
 8083908:	07db      	lsls	r3, r3, #31
 808390a:	f140 80af 	bpl.w	8083a6c <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x174>
    uint8_t flags = data[11];
 808390e:	7c6b      	ldrb	r3, [r5, #17]
    if ( flags & 0x01){
 8083910:	f013 0201 	ands.w	r2, r3, #1
 8083914:	f000 80ab 	beq.w	8083a6e <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x176>
	dateValid = true;
 8083918:	2201      	movs	r2, #1
 808391a:	7422      	strb	r2, [r4, #16]
    return((m[1]*256)+(m[0]));
 808391c:	7ae9      	ldrb	r1, [r5, #11]
 808391e:	7aaa      	ldrb	r2, [r5, #10]
 8083920:	eb02 2201 	add.w	r2, r2, r1, lsl #8
	year = getUInt(&data[4]);  // UTC
 8083924:	80e2      	strh	r2, [r4, #6]
	month = data[6];
 8083926:	7b2a      	ldrb	r2, [r5, #12]
 8083928:	7122      	strb	r2, [r4, #4]
	day = data[7];
 808392a:	7b6a      	ldrb	r2, [r5, #13]
 808392c:	7162      	strb	r2, [r4, #5]
    if ( flags & 0x02){
 808392e:	f013 0302 	ands.w	r3, r3, #2
 8083932:	f000 809e 	beq.w	8083a72 <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x17a>
	timeValid = true;
 8083936:	2301      	movs	r3, #1
 8083938:	7463      	strb	r3, [r4, #17]
	hour = data[8];
 808393a:	7bab      	ldrb	r3, [r5, #14]
 808393c:	7063      	strb	r3, [r4, #1]
	minute = data[9];
 808393e:	7beb      	ldrb	r3, [r5, #15]
 8083940:	70a3      	strb	r3, [r4, #2]
	seconds = data[10];
 8083942:	7c2b      	ldrb	r3, [r5, #16]
 8083944:	70e3      	strb	r3, [r4, #3]
    int32_t nanoseconds = getLong(&data[16]);
 8083946:	f105 0016 	add.w	r0, r5, #22
 808394a:	f7ff fdfd 	bl	8083548 <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
    if (nanoseconds > 0){
 808394e:	2800      	cmp	r0, #0
        milliseconds = nanoseconds/1000;
 8083950:	bfca      	itet	gt
 8083952:	f44f 737a 	movgt.w	r3, #1000	; 0x3e8
        milliseconds = 0;
 8083956:	2000      	movle	r0, #0
        milliseconds = nanoseconds/1000;
 8083958:	fb90 f0f3 	sdivgt	r0, r0, r3
 808395c:	60a0      	str	r0, [r4, #8]
    fixquality = data[20];
 808395e:	7eab      	ldrb	r3, [r5, #26]
          ((float) getLong(&data[24]))*0.0000001;
 8083960:	f105 001e 	add.w	r0, r5, #30
    fixquality = data[20];
 8083964:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    fix =  ((fixquality == 3) || (fixquality == 2));
 8083968:	3b02      	subs	r3, #2
 808396a:	2b01      	cmp	r3, #1
 808396c:	bf8c      	ite	hi
 808396e:	2300      	movhi	r3, #0
 8083970:	2301      	movls	r3, #1
 8083972:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    satellites = data[23];
 8083976:	7f6b      	ldrb	r3, [r5, #29]
        (float) (getLong(&data[64])/100000.0);
 8083978:	f105 0746 	add.w	r7, r5, #70	; 0x46
    satellites = data[23];
 808397c:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
          ((float) getLong(&data[24]))*0.0000001;
 8083980:	f7ff fde2 	bl	8083548 <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
 8083984:	f006 fea4 	bl	808a6d0 <__aeabi_i2f>
 8083988:	f006 fa48 	bl	8089e1c <__aeabi_f2d>
 808398c:	a33a      	add	r3, pc, #232	; (adr r3, 8083a78 <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x180>)
 808398e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8083992:	f006 fa9b 	bl	8089ecc <__aeabi_dmul>
 8083996:	f006 fd91 	bl	808a4bc <__aeabi_d2f>
    longitudeDegrees =
 808399a:	6220      	str	r0, [r4, #32]
    longitude =              // Longitude, deg
 808399c:	61a0      	str	r0, [r4, #24]
       ((float) getLong(&data[28]))*0.0000001;
 808399e:	f105 0022 	add.w	r0, r5, #34	; 0x22
 80839a2:	f7ff fdd1 	bl	8083548 <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
 80839a6:	f006 fe93 	bl	808a6d0 <__aeabi_i2f>
 80839aa:	f006 fa37 	bl	8089e1c <__aeabi_f2d>
 80839ae:	a332      	add	r3, pc, #200	; (adr r3, 8083a78 <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x180>)
 80839b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80839b4:	f006 fa8a 	bl	8089ecc <__aeabi_dmul>
 80839b8:	f006 fd80 	bl	808a4bc <__aeabi_d2f>
    latitudeDegrees =
 80839bc:	61e0      	str	r0, [r4, #28]
    latitude =              // Latitude, deg
 80839be:	6160      	str	r0, [r4, #20]
       (float)getLong(&data[32]); // WGS84 unless user altered. See ublox spec.
 80839c0:	f105 0026 	add.w	r0, r5, #38	; 0x26
 80839c4:	f7ff fdc0 	bl	8083548 <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
 80839c8:	f006 fe82 	bl	808a6d0 <__aeabi_i2f>
       (float)getULong(&data[36]);
 80839cc:	f105 012a 	add.w	r1, r5, #42	; 0x2a
       (float)getLong(&data[32]); // WGS84 unless user altered. See ublox spec.
 80839d0:	6260      	str	r0, [r4, #36]	; 0x24
       (float)getULong(&data[36]);
 80839d2:	4620      	mov	r0, r4
 80839d4:	f7ff ff3a 	bl	808384c <_ZN12UbloxM8Q_GPS8getULongEPh>
 80839d8:	f006 fe76 	bl	808a6c8 <__aeabi_ui2f>
       getULong(&data[40]);
 80839dc:	f105 012e 	add.w	r1, r5, #46	; 0x2e
       (float)getULong(&data[36]);
 80839e0:	62a0      	str	r0, [r4, #40]	; 0x28
       getULong(&data[40]);
 80839e2:	4620      	mov	r0, r4
 80839e4:	f7ff ff32 	bl	808384c <_ZN12UbloxM8Q_GPS8getULongEPh>
       getULong(&data[44]);
 80839e8:	f105 0132 	add.w	r1, r5, #50	; 0x32
    horzAcc =                // Horizontal Accuracy estimate, mm
 80839ec:	63e0      	str	r0, [r4, #60]	; 0x3c
       getULong(&data[44]);
 80839ee:	4620      	mov	r0, r4
 80839f0:	f7ff ff2c 	bl	808384c <_ZN12UbloxM8Q_GPS8getULongEPh>
    vertAcc =                // Vertical Accuracy extimate, mm
 80839f4:	6420      	str	r0, [r4, #64]	; 0x40
        getLong(&data[48]);
 80839f6:	f105 0036 	add.w	r0, r5, #54	; 0x36
 80839fa:	f7ff fda5 	bl	8083548 <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
    velN =                   // North velocity, mm/s
 80839fe:	6460      	str	r0, [r4, #68]	; 0x44
        getLong(&data[52]);
 8083a00:	f105 003a 	add.w	r0, r5, #58	; 0x3a
 8083a04:	f7ff fda0 	bl	8083548 <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
    velE =                   // East velocity, mm/s
 8083a08:	64a0      	str	r0, [r4, #72]	; 0x48
        getLong(&data[56]);
 8083a0a:	f105 003e 	add.w	r0, r5, #62	; 0x3e
 8083a0e:	f7ff fd9b 	bl	8083548 <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
    velD =                   // Down velocity, mm/s
 8083a12:	64e0      	str	r0, [r4, #76]	; 0x4c
        getLong(&data[60]);
 8083a14:	f105 0042 	add.w	r0, r5, #66	; 0x42
 8083a18:	f7ff fd96 	bl	8083548 <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
 8083a1c:	4606      	mov	r6, r0
    gSpeed =                   // Ground speed, mm/s
 8083a1e:	6520      	str	r0, [r4, #80]	; 0x50
        (float) (getLong(&data[64])/100000.0);
 8083a20:	4638      	mov	r0, r7
 8083a22:	f7ff fd91 	bl	8083548 <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
 8083a26:	f006 f9e7 	bl	8089df8 <__aeabi_i2d>
 8083a2a:	a315      	add	r3, pc, #84	; (adr r3, 8083a80 <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x188>)
 8083a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8083a30:	f006 fb76 	bl	808a120 <__aeabi_ddiv>
 8083a34:	f006 fd42 	bl	808a4bc <__aeabi_d2f>
 8083a38:	6320      	str	r0, [r4, #48]	; 0x30
        (float) (getLong(&data[64])/100000.0);
 8083a3a:	4638      	mov	r0, r7
 8083a3c:	f7ff fd84 	bl	8083548 <_ZN12UbloxM8Q_GPS7getLongEPh.constprop.0>
 8083a40:	f006 f9da 	bl	8089df8 <__aeabi_i2d>
 8083a44:	a30e      	add	r3, pc, #56	; (adr r3, 8083a80 <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x188>)
 8083a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8083a4a:	f006 fb69 	bl	808a120 <__aeabi_ddiv>
 8083a4e:	f006 fd35 	bl	808a4bc <__aeabi_d2f>
 8083a52:	6360      	str	r0, [r4, #52]	; 0x34
    if (data[21] & 0x20){
 8083a54:	7eeb      	ldrb	r3, [r5, #27]
    speed = ((float)gSpeed/1000.0); // from integer mm/s to float m/s
 8083a56:	4630      	mov	r0, r6
    if (data[21] & 0x20){
 8083a58:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8083a5c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    speed = ((float)gSpeed/1000.0); // from integer mm/s to float m/s
 8083a60:	f006 fe36 	bl	808a6d0 <__aeabi_i2f>
 8083a64:	4908      	ldr	r1, [pc, #32]	; (8083a88 <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x190>)
 8083a66:	f006 ff3b 	bl	808a8e0 <__aeabi_fdiv>
 8083a6a:	62e0      	str	r0, [r4, #44]	; 0x2c
}
 8083a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	dateValid = false;
 8083a6e:	7422      	strb	r2, [r4, #16]
 8083a70:	e75d      	b.n	808392e <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x36>
	timeValid = false;
 8083a72:	7463      	strb	r3, [r4, #17]
 8083a74:	e767      	b.n	8083946 <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x4e>
 8083a76:	bf00      	nop
 8083a78:	9abcaf48 	.word	0x9abcaf48
 8083a7c:	3e7ad7f2 	.word	0x3e7ad7f2
 8083a80:	00000000 	.word	0x00000000
 8083a84:	40f86a00 	.word	0x40f86a00
 8083a88:	447a0000 	.word	0x447a0000

08083a8c <_ZN12UbloxM8Q_GPS8parseODOEPh>:
{
 8083a8c:	b510      	push	{r4, lr}
 8083a8e:	460c      	mov	r4, r1
    odoTrip = getULong(&data[8]); // since reset, m
 8083a90:	310e      	adds	r1, #14
{
 8083a92:	4602      	mov	r2, r0
    odoTrip = getULong(&data[8]); // since reset, m
 8083a94:	f7ff feda 	bl	808384c <_ZN12UbloxM8Q_GPS8getULongEPh>
    odoTotal = getULong(&data[12]); // since power up, m
 8083a98:	f104 0112 	add.w	r1, r4, #18
    odoTrip = getULong(&data[8]); // since reset, m
 8083a9c:	6550      	str	r0, [r2, #84]	; 0x54
    odoTotal = getULong(&data[12]); // since power up, m
 8083a9e:	4610      	mov	r0, r2
 8083aa0:	f7ff fed4 	bl	808384c <_ZN12UbloxM8Q_GPS8getULongEPh>
    odoAcc = getULong(&data[16]); // m 1-sigma
 8083aa4:	f104 0116 	add.w	r1, r4, #22
    odoTotal = getULong(&data[12]); // since power up, m
 8083aa8:	6590      	str	r0, [r2, #88]	; 0x58
    odoAcc = getULong(&data[16]); // m 1-sigma
 8083aaa:	4610      	mov	r0, r2
 8083aac:	f7ff fece 	bl	808384c <_ZN12UbloxM8Q_GPS8getULongEPh>
 8083ab0:	65d0      	str	r0, [r2, #92]	; 0x5c
}
 8083ab2:	bd10      	pop	{r4, pc}

08083ab4 <_ZN12UbloxM8Q_GPS7readVerEv>:
// Used only by UbloxM8Q_GPS.begin() to read the initial report of version
// information from the receiver, write it to Serial, and then turn off
// the NMEA ascii messages.
void
UbloxM8Q_GPS::readVer()
{
 8083ab4:	b538      	push	{r3, r4, r5, lr}
    int linecnt = 0;
 8083ab6:	2500      	movs	r5, #0
    char c;
    while (linecnt < 10){
	while (Serial1.available()){
 8083ab8:	f004 f82e 	bl	8087b18 <_Z22__fetch_global_Serial1v>
 8083abc:	6803      	ldr	r3, [r0, #0]
 8083abe:	691b      	ldr	r3, [r3, #16]
 8083ac0:	4798      	blx	r3
 8083ac2:	b960      	cbnz	r0, 8083ade <_ZN12UbloxM8Q_GPS7readVerEv+0x2a>
    while (linecnt < 10){
 8083ac4:	2d09      	cmp	r5, #9
 8083ac6:	ddf7      	ble.n	8083ab8 <_ZN12UbloxM8Q_GPS7readVerEv+0x4>
		linecnt++;
	    }
	    Serial.print(c);
	} 
    }
    Serial1.print("$PUBX,41,1,3,1,9600,0*16\r\n");  // Turn off nmea
 8083ac8:	f004 f826 	bl	8087b18 <_Z22__fetch_global_Serial1v>
 8083acc:	490b      	ldr	r1, [pc, #44]	; (8083afc <_ZN12UbloxM8Q_GPS7readVerEv+0x48>)
 8083ace:	f001 ff15 	bl	80858fc <_ZN5Print5printEPKc>
    // Must wait for nmea data to rattle out or it gets confused
    // with ubx data.
    delay(2000);
}
 8083ad2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    delay(2000);
 8083ad6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8083ada:	f003 b92b 	b.w	8086d34 <delay>
	    c = Serial1.read();
 8083ade:	f004 f81b 	bl	8087b18 <_Z22__fetch_global_Serial1v>
 8083ae2:	6803      	ldr	r3, [r0, #0]
 8083ae4:	695b      	ldr	r3, [r3, #20]
 8083ae6:	4798      	blx	r3
 8083ae8:	b2c4      	uxtb	r4, r0
	    if ( c == '\n'){
 8083aea:	2c0a      	cmp	r4, #10
		linecnt++;
 8083aec:	bf08      	it	eq
 8083aee:	3501      	addeq	r5, #1
	    Serial.print(c);
 8083af0:	f003 fe64 	bl	80877bc <_Z16_fetch_usbserialv>
 8083af4:	4621      	mov	r1, r4
 8083af6:	f001 ff05 	bl	8085904 <_ZN5Print5printEc>
	while (Serial1.available()){
 8083afa:	e7dd      	b.n	8083ab8 <_ZN12UbloxM8Q_GPS7readVerEv+0x4>
 8083afc:	0808b91e 	.word	0x0808b91e

08083b00 <_ZN12UbloxM8Q_GPS11reportErrorEi9ubxReturn>:

// report error from begin()
void
UbloxM8Q_GPS::reportError(int state, enum ubxReturn ret)
{
 8083b00:	b570      	push	{r4, r5, r6, lr}
 8083b02:	460c      	mov	r4, r1
 8083b04:	4615      	mov	r5, r2
    Serial.print("begin failed, state: ");
 8083b06:	f003 fe59 	bl	80877bc <_Z16_fetch_usbserialv>
 8083b0a:	4911      	ldr	r1, [pc, #68]	; (8083b50 <_ZN12UbloxM8Q_GPS11reportErrorEi9ubxReturn+0x50>)
 8083b0c:	f001 fef6 	bl	80858fc <_ZN5Print5printEPKc>
    Serial.print(state);
 8083b10:	f003 fe54 	bl	80877bc <_Z16_fetch_usbserialv>
        if (n < 0 && base == 10) {
 8083b14:	2c00      	cmp	r4, #0
 8083b16:	4606      	mov	r6, r0
 8083b18:	da18      	bge.n	8083b4c <_ZN12UbloxM8Q_GPS11reportErrorEi9ubxReturn+0x4c>
            t = print('-');
 8083b1a:	212d      	movs	r1, #45	; 0x2d
 8083b1c:	f001 fef2 	bl	8085904 <_ZN5Print5printEc>
            val = -n;
 8083b20:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
 8083b22:	220a      	movs	r2, #10
 8083b24:	4630      	mov	r0, r6
 8083b26:	f001 ff06 	bl	8085936 <_ZN5Print11printNumberEmh>
    Serial.print(" error: ");
 8083b2a:	f003 fe47 	bl	80877bc <_Z16_fetch_usbserialv>
 8083b2e:	4909      	ldr	r1, [pc, #36]	; (8083b54 <_ZN12UbloxM8Q_GPS11reportErrorEi9ubxReturn+0x54>)
 8083b30:	f001 fee4 	bl	80858fc <_ZN5Print5printEPKc>
    Serial.println(ret);
 8083b34:	f003 fe42 	bl	80877bc <_Z16_fetch_usbserialv>
 8083b38:	4604      	mov	r4, r0
 8083b3a:	4629      	mov	r1, r5
 8083b3c:	220a      	movs	r2, #10
 8083b3e:	f001 fefa 	bl	8085936 <_ZN5Print11printNumberEmh>
        n += println();
 8083b42:	4620      	mov	r0, r4
}
 8083b44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8083b48:	f001 bedf 	b.w	808590a <_ZN5Print7printlnEv>
            val = n;
 8083b4c:	4621      	mov	r1, r4
 8083b4e:	e7e8      	b.n	8083b22 <_ZN12UbloxM8Q_GPS11reportErrorEi9ubxReturn+0x22>
 8083b50:	0808b939 	.word	0x0808b939
 8083b54:	0808b94f 	.word	0x0808b94f

08083b58 <_ZN8AckedMsgC1Ev>:


// AckedMsg methods
AckedMsg::AckedMsg()
 8083b58:	b510      	push	{r4, lr}
 8083b5a:	4604      	mov	r4, r0
{
    for(uint16_t i=0;i<sizeof(ackList)/sizeof(int);i++) {
	ackList[i] = 0;
 8083b5c:	2228      	movs	r2, #40	; 0x28
 8083b5e:	2100      	movs	r1, #0
 8083b60:	f007 f870 	bl	808ac44 <memset>
    }
}
 8083b64:	4620      	mov	r0, r4
 8083b66:	bd10      	pop	{r4, pc}

08083b68 <_ZN8AckedMsg6setAckEi>:
int 
AckedMsg::setAck(int msgType)
{
 8083b68:	4602      	mov	r2, r0
 8083b6a:	2300      	movs	r3, #0
    for(uint16_t i=0;i<sizeof(ackList)/sizeof(int);i++) {
	if (!ackList[i]){
 8083b6c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8083b70:	b910      	cbnz	r0, 8083b78 <_ZN8AckedMsg6setAckEi+0x10>
	    ackList[i] = msgType;
 8083b72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    return 0;
 8083b76:	4770      	bx	lr
    for(uint16_t i=0;i<sizeof(ackList)/sizeof(int);i++) {
 8083b78:	3301      	adds	r3, #1
 8083b7a:	2b0a      	cmp	r3, #10
 8083b7c:	d1f6      	bne.n	8083b6c <_ZN8AckedMsg6setAckEi+0x4>
	}
    }
    return -1;
 8083b7e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8083b82:	4770      	bx	lr

08083b84 <_ZN8AckedMsg8clearAckEi>:
void
AckedMsg::clearAck(int msgType)
{
    for(uint16_t i=0;i<sizeof(ackList)/sizeof(int);i++) {
	if (ackList[i] == msgType){
	    ackList[i] = 0;
 8083b84:	2200      	movs	r2, #0
{
 8083b86:	b510      	push	{r4, lr}
 8083b88:	1f03      	subs	r3, r0, #4
 8083b8a:	3024      	adds	r0, #36	; 0x24
	if (ackList[i] == msgType){
 8083b8c:	f853 4f04 	ldr.w	r4, [r3, #4]!
 8083b90:	428c      	cmp	r4, r1
	    ackList[i] = 0;
 8083b92:	bf08      	it	eq
 8083b94:	601a      	streq	r2, [r3, #0]
    for(uint16_t i=0;i<sizeof(ackList)/sizeof(int);i++) {
 8083b96:	4283      	cmp	r3, r0
 8083b98:	d1f8      	bne.n	8083b8c <_ZN8AckedMsg8clearAckEi+0x8>
	}
    }
}
 8083b9a:	bd10      	pop	{r4, pc}

08083b9c <_ZN12UbloxM8Q_GPS5parseEPhii>:
    switch(type) {
 8083b9c:	f240 1309 	movw	r3, #265	; 0x109
 8083ba0:	429a      	cmp	r2, r3
{
 8083ba2:	b570      	push	{r4, r5, r6, lr}
 8083ba4:	4606      	mov	r6, r0
 8083ba6:	460d      	mov	r5, r1
 8083ba8:	4614      	mov	r4, r2
    switch(type) {
 8083baa:	d052      	beq.n	8083c52 <_ZN12UbloxM8Q_GPS5parseEPhii+0xb6>
 8083bac:	f5b2 7f85 	cmp.w	r2, #266	; 0x10a
 8083bb0:	da17      	bge.n	8083be2 <_ZN12UbloxM8Q_GPS5parseEPhii+0x46>
 8083bb2:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 8083bb6:	d044      	beq.n	8083c42 <_ZN12UbloxM8Q_GPS5parseEPhii+0xa6>
 8083bb8:	f240 1307 	movw	r3, #263	; 0x107
 8083bbc:	429a      	cmp	r2, r3
 8083bbe:	d044      	beq.n	8083c4a <_ZN12UbloxM8Q_GPS5parseEPhii+0xae>
	Serial.print("parse: Unknown type: ");
 8083bc0:	f003 fdfc 	bl	80877bc <_Z16_fetch_usbserialv>
 8083bc4:	4925      	ldr	r1, [pc, #148]	; (8083c5c <_ZN12UbloxM8Q_GPS5parseEPhii+0xc0>)
 8083bc6:	f001 fe99 	bl	80858fc <_ZN5Print5printEPKc>
	Serial.println(type, HEX);
 8083bca:	f003 fdf7 	bl	80877bc <_Z16_fetch_usbserialv>
 8083bce:	4621      	mov	r1, r4
 8083bd0:	2210      	movs	r2, #16
 8083bd2:	f7ff fcc4 	bl	808355e <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
	showUbx(msg);
 8083bd6:	4629      	mov	r1, r5
 8083bd8:	4630      	mov	r0, r6
}
 8083bda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	showUbx(msg);
 8083bde:	f7ff be13 	b.w	8083808 <_ZN12UbloxM8Q_GPS7showUbxEPh>
    switch(type) {
 8083be2:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8083be6:	d01c      	beq.n	8083c22 <_ZN12UbloxM8Q_GPS5parseEPhii+0x86>
 8083be8:	f240 5301 	movw	r3, #1281	; 0x501
 8083bec:	429a      	cmp	r2, r3
 8083bee:	d1e7      	bne.n	8083bc0 <_ZN12UbloxM8Q_GPS5parseEPhii+0x24>
  // type is the class and id combined
  int ubxMsgType(uint8_t *m) { return((m[CLASS_IDX]<<8)|(m[ID_IDX]));}
  // For extracting type from the payload of msg, parameter points into payload
  int ubxMsgParm(uint8_t *m) { return((m[0]<<8)|(m[1]));}
 8083bf0:	88cc      	ldrh	r4, [r1, #6]
	ackedMsg.setAck(typeAcked);
 8083bf2:	481b      	ldr	r0, [pc, #108]	; (8083c60 <_ZN12UbloxM8Q_GPS5parseEPhii+0xc4>)
 8083bf4:	ba64      	rev16	r4, r4
 8083bf6:	b2a4      	uxth	r4, r4
 8083bf8:	4621      	mov	r1, r4
 8083bfa:	f7ff ffb5 	bl	8083b68 <_ZN8AckedMsg6setAckEi>
	Serial.print("parse: ACK_TYPE: ");
 8083bfe:	f003 fddd 	bl	80877bc <_Z16_fetch_usbserialv>
 8083c02:	4918      	ldr	r1, [pc, #96]	; (8083c64 <_ZN12UbloxM8Q_GPS5parseEPhii+0xc8>)
 8083c04:	f001 fe7a 	bl	80858fc <_ZN5Print5printEPKc>
	Serial.print("message acked: ");
 8083c08:	f003 fdd8 	bl	80877bc <_Z16_fetch_usbserialv>
 8083c0c:	4916      	ldr	r1, [pc, #88]	; (8083c68 <_ZN12UbloxM8Q_GPS5parseEPhii+0xcc>)
	Serial.print("message NAKed: ");
 8083c0e:	f001 fe75 	bl	80858fc <_ZN5Print5printEPKc>
	Serial.println(typeAcked, HEX);
 8083c12:	f003 fdd3 	bl	80877bc <_Z16_fetch_usbserialv>
 8083c16:	4621      	mov	r1, r4
}
 8083c18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	Serial.println(typeAcked, HEX);
 8083c1c:	2210      	movs	r2, #16
 8083c1e:	f7ff bc9e 	b.w	808355e <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
 8083c22:	88cc      	ldrh	r4, [r1, #6]
	ackedMsg.clearAck(typeAcked);
 8083c24:	480e      	ldr	r0, [pc, #56]	; (8083c60 <_ZN12UbloxM8Q_GPS5parseEPhii+0xc4>)
 8083c26:	ba64      	rev16	r4, r4
 8083c28:	b2a4      	uxth	r4, r4
 8083c2a:	4621      	mov	r1, r4
 8083c2c:	f7ff ffaa 	bl	8083b84 <_ZN8AckedMsg8clearAckEi>
	Serial.print("parse: NAK_TYPE: ");
 8083c30:	f003 fdc4 	bl	80877bc <_Z16_fetch_usbserialv>
 8083c34:	490d      	ldr	r1, [pc, #52]	; (8083c6c <_ZN12UbloxM8Q_GPS5parseEPhii+0xd0>)
 8083c36:	f001 fe61 	bl	80858fc <_ZN5Print5printEPKc>
	Serial.print("message NAKed: ");
 8083c3a:	f003 fdbf 	bl	80877bc <_Z16_fetch_usbserialv>
 8083c3e:	490c      	ldr	r1, [pc, #48]	; (8083c70 <_ZN12UbloxM8Q_GPS5parseEPhii+0xd4>)
 8083c40:	e7e5      	b.n	8083c0e <_ZN12UbloxM8Q_GPS5parseEPhii+0x72>
}
 8083c42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	parsePOSLLH(msg);
 8083c46:	f7ff be0f 	b.w	8083868 <_ZN12UbloxM8Q_GPS11parsePOSLLHEPh>
}
 8083c4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	parsePVT(msg);
 8083c4e:	f7ff be53 	b.w	80838f8 <_ZN12UbloxM8Q_GPS8parsePVTEPh>
}
 8083c52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	parseODO(msg);
 8083c56:	f7ff bf19 	b.w	8083a8c <_ZN12UbloxM8Q_GPS8parseODOEPh>
 8083c5a:	bf00      	nop
 8083c5c:	0808b99c 	.word	0x0808b99c
 8083c60:	200003c0 	.word	0x200003c0
 8083c64:	0808b958 	.word	0x0808b958
 8083c68:	0808b96a 	.word	0x0808b96a
 8083c6c:	0808b97a 	.word	0x0808b97a
 8083c70:	0808b98c 	.word	0x0808b98c

08083c74 <_ZN12UbloxM8Q_GPS4readEv>:
{
 8083c74:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (gpsOn){
 8083c76:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
{
 8083c7a:	4604      	mov	r4, r0
 8083c7c:	b0c1      	sub	sp, #260	; 0x104
    if (gpsOn){
 8083c7e:	b32b      	cbz	r3, 8083ccc <_ZN12UbloxM8Q_GPS4readEv+0x58>
	    r = readUBXmsg(msg, &type, &length);
 8083c80:	4d13      	ldr	r5, [pc, #76]	; (8083cd0 <_ZN12UbloxM8Q_GPS4readEv+0x5c>)
 8083c82:	4e14      	ldr	r6, [pc, #80]	; (8083cd4 <_ZN12UbloxM8Q_GPS4readEv+0x60>)
		Serial.println("gps.read got ubxBAD_CHECK_SUM");
 8083c84:	4f14      	ldr	r7, [pc, #80]	; (8083cd8 <_ZN12UbloxM8Q_GPS4readEv+0x64>)
	while(Serial1.available()){
 8083c86:	f003 ff47 	bl	8087b18 <_Z22__fetch_global_Serial1v>
 8083c8a:	6803      	ldr	r3, [r0, #0]
 8083c8c:	691b      	ldr	r3, [r3, #16]
 8083c8e:	4798      	blx	r3
 8083c90:	b1e0      	cbz	r0, 8083ccc <_ZN12UbloxM8Q_GPS4readEv+0x58>
	    r = readUBXmsg(msg, &type, &length);
 8083c92:	462b      	mov	r3, r5
 8083c94:	4669      	mov	r1, sp
 8083c96:	4620      	mov	r0, r4
 8083c98:	4a0e      	ldr	r2, [pc, #56]	; (8083cd4 <_ZN12UbloxM8Q_GPS4readEv+0x60>)
 8083c9a:	f7ff fcb3 	bl	8083604 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_>
	    if (r == ubxBAD_LENGTH){
 8083c9e:	2802      	cmp	r0, #2
 8083ca0:	d105      	bne.n	8083cae <_ZN12UbloxM8Q_GPS4readEv+0x3a>
		Serial.println("gps.read got ubxBAD_LENGTH");
 8083ca2:	f003 fd8b 	bl	80877bc <_Z16_fetch_usbserialv>
 8083ca6:	490d      	ldr	r1, [pc, #52]	; (8083cdc <_ZN12UbloxM8Q_GPS4readEv+0x68>)
		Serial.println("gps.read got ubxBAD_CHECK_SUM");
 8083ca8:	f001 fe3b 	bl	8085922 <_ZN5Print7printlnEPKc>
	    if (r == ubxSUCCESS){
 8083cac:	e7eb      	b.n	8083c86 <_ZN12UbloxM8Q_GPS4readEv+0x12>
	    if (r == ubxBAD_CHECK_SUM){
 8083cae:	2803      	cmp	r0, #3
 8083cb0:	d008      	beq.n	8083cc4 <_ZN12UbloxM8Q_GPS4readEv+0x50>
	    if (r == ubxSUCCESS){
 8083cb2:	2800      	cmp	r0, #0
 8083cb4:	d1e7      	bne.n	8083c86 <_ZN12UbloxM8Q_GPS4readEv+0x12>
		parse(msg, type, length);
 8083cb6:	4669      	mov	r1, sp
 8083cb8:	4620      	mov	r0, r4
 8083cba:	682b      	ldr	r3, [r5, #0]
 8083cbc:	6832      	ldr	r2, [r6, #0]
 8083cbe:	f7ff ff6d 	bl	8083b9c <_ZN12UbloxM8Q_GPS5parseEPhii>
 8083cc2:	e7df      	b.n	8083c84 <_ZN12UbloxM8Q_GPS4readEv+0x10>
		Serial.println("gps.read got ubxBAD_CHECK_SUM");
 8083cc4:	f003 fd7a 	bl	80877bc <_Z16_fetch_usbserialv>
 8083cc8:	4639      	mov	r1, r7
 8083cca:	e7ed      	b.n	8083ca8 <_ZN12UbloxM8Q_GPS4readEv+0x34>
}
 8083ccc:	b041      	add	sp, #260	; 0x104
 8083cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8083cd0:	200003ac 	.word	0x200003ac
 8083cd4:	200003a8 	.word	0x200003a8
 8083cd8:	0808b9cd 	.word	0x0808b9cd
 8083cdc:	0808b9b2 	.word	0x0808b9b2

08083ce0 <_ZN8AckedMsg7isAckedEi>:
bool
AckedMsg::isAcked(int msgType)
{
    for(uint16_t i=0;i<sizeof(ackList)/sizeof(int);i++) {
 8083ce0:	1f03      	subs	r3, r0, #4
 8083ce2:	3024      	adds	r0, #36	; 0x24
	if (ackList[i] == msgType){
 8083ce4:	f853 2f04 	ldr.w	r2, [r3, #4]!
 8083ce8:	428a      	cmp	r2, r1
 8083cea:	d003      	beq.n	8083cf4 <_ZN8AckedMsg7isAckedEi+0x14>
    for(uint16_t i=0;i<sizeof(ackList)/sizeof(int);i++) {
 8083cec:	4283      	cmp	r3, r0
 8083cee:	d1f9      	bne.n	8083ce4 <_ZN8AckedMsg7isAckedEi+0x4>
	    return true;
	}
    }
    return false;
 8083cf0:	2000      	movs	r0, #0
 8083cf2:	4770      	bx	lr
	    return true;
 8083cf4:	2001      	movs	r0, #1
}
 8083cf6:	4770      	bx	lr

08083cf8 <_ZN12UbloxM8Q_GPS8writeUBXEPh>:
{
 8083cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (!sent){
 8083cfc:	4e28      	ldr	r6, [pc, #160]	; (8083da0 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0xa8>)
{
 8083cfe:	4607      	mov	r7, r0
    if (!sent){
 8083d00:	7835      	ldrb	r5, [r6, #0]
{
 8083d02:	460c      	mov	r4, r1
 8083d04:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8083da4 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0xac>
    if (!sent){
 8083d08:	bb85      	cbnz	r5, 8083d6c <_ZN12UbloxM8Q_GPS8writeUBXEPh+0x74>
  int ubxMsgType(uint8_t *m) { return((m[CLASS_IDX]<<8)|(m[ID_IDX]));}
 8083d0a:	8849      	ldrh	r1, [r1, #2]
	ackedMsg.clearAck(msgType);
 8083d0c:	4826      	ldr	r0, [pc, #152]	; (8083da8 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0xb0>)
 8083d0e:	ba49      	rev16	r1, r1
 8083d10:	b289      	uxth	r1, r1
	msgType = ubxMsgType(msg);
 8083d12:	f8c8 1000 	str.w	r1, [r8]
	ackedMsg.clearAck(msgType);
 8083d16:	f7ff ff35 	bl	8083b84 <_ZN8AckedMsg8clearAckEi>
	ubxAddCS(msg);
 8083d1a:	4621      	mov	r1, r4
 8083d1c:	4638      	mov	r0, r7
 8083d1e:	f7ff fd65 	bl	80837ec <_ZN12UbloxM8Q_GPS8ubxAddCSEPh>
	Serial.print("writeUBX: type: "); Serial.println(msgType,HEX);
 8083d22:	f003 fd4b 	bl	80877bc <_Z16_fetch_usbserialv>
 8083d26:	4921      	ldr	r1, [pc, #132]	; (8083dac <_ZN12UbloxM8Q_GPS8writeUBXEPh+0xb4>)
 8083d28:	f001 fde8 	bl	80858fc <_ZN5Print5printEPKc>
 8083d2c:	f003 fd46 	bl	80877bc <_Z16_fetch_usbserialv>
 8083d30:	2210      	movs	r2, #16
 8083d32:	f8d8 1000 	ldr.w	r1, [r8]
 8083d36:	f7ff fc12 	bl	808355e <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
	showUbx(msg);
 8083d3a:	4638      	mov	r0, r7
 8083d3c:	4621      	mov	r1, r4
 8083d3e:	f7ff fd63 	bl	8083808 <_ZN12UbloxM8Q_GPS7showUbxEPh>
        return( ((m[LENGTH_IDX])+(m[LENGTH_IDX+1]*256)));}
 8083d42:	7963      	ldrb	r3, [r4, #5]
 8083d44:	7927      	ldrb	r7, [r4, #4]
 8083d46:	eb07 2703 	add.w	r7, r7, r3, lsl #8
	for (i = 0; i < length + 8; i++ ){
 8083d4a:	3707      	adds	r7, #7
	    Serial1.write(msg[i]);
 8083d4c:	f003 fee4 	bl	8087b18 <_Z22__fetch_global_Serial1v>
 8083d50:	6803      	ldr	r3, [r0, #0]
 8083d52:	5d61      	ldrb	r1, [r4, r5]
 8083d54:	689b      	ldr	r3, [r3, #8]
	for (i = 0; i < length + 8; i++ ){
 8083d56:	3501      	adds	r5, #1
	    Serial1.write(msg[i]);
 8083d58:	4798      	blx	r3
	for (i = 0; i < length + 8; i++ ){
 8083d5a:	42af      	cmp	r7, r5
 8083d5c:	daf6      	bge.n	8083d4c <_ZN12UbloxM8Q_GPS8writeUBXEPh+0x54>
 8083d5e:	f000 feaf 	bl	8084ac0 <HAL_Timer_Get_Milli_Seconds>
	prev = millis();
 8083d62:	4b13      	ldr	r3, [pc, #76]	; (8083db0 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0xb8>)
 8083d64:	6018      	str	r0, [r3, #0]
	sent = true;
 8083d66:	2001      	movs	r0, #1
	    sent = false;
 8083d68:	7030      	strb	r0, [r6, #0]
	    return ubxSUCCESS;
 8083d6a:	e012      	b.n	8083d92 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0x9a>
	read();
 8083d6c:	f7ff ff82 	bl	8083c74 <_ZN12UbloxM8Q_GPS4readEv>
	if (!ackedMsg.isAcked(msgType)){
 8083d70:	f8d8 1000 	ldr.w	r1, [r8]
 8083d74:	480c      	ldr	r0, [pc, #48]	; (8083da8 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0xb0>)
 8083d76:	f7ff ffb3 	bl	8083ce0 <_ZN8AckedMsg7isAckedEi>
 8083d7a:	4604      	mov	r4, r0
 8083d7c:	b958      	cbnz	r0, 8083d96 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0x9e>
 8083d7e:	f000 fe9f 	bl	8084ac0 <HAL_Timer_Get_Milli_Seconds>
	    if (cur - prev > 2000){
 8083d82:	4b0b      	ldr	r3, [pc, #44]	; (8083db0 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0xb8>)
 8083d84:	681b      	ldr	r3, [r3, #0]
 8083d86:	1ac0      	subs	r0, r0, r3
 8083d88:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8083d8c:	d905      	bls.n	8083d9a <_ZN12UbloxM8Q_GPS8writeUBXEPh+0xa2>
		return ubxNO_ACK;
 8083d8e:	2004      	movs	r0, #4
		sent = false;
 8083d90:	7034      	strb	r4, [r6, #0]
}
 8083d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    sent = false;
 8083d96:	2000      	movs	r0, #0
 8083d98:	e7e6      	b.n	8083d68 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0x70>
    return ubxPENDING;
 8083d9a:	2001      	movs	r0, #1
 8083d9c:	e7f9      	b.n	8083d92 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0x9a>
 8083d9e:	bf00      	nop
 8083da0:	200003b8 	.word	0x200003b8
 8083da4:	200003bc 	.word	0x200003bc
 8083da8:	200003c0 	.word	0x200003c0
 8083dac:	0808b9eb 	.word	0x0808b9eb
 8083db0:	200003b4 	.word	0x200003b4

08083db4 <_ZN12UbloxM8Q_GPS11sendCommandEPh>:
{
 8083db4:	b538      	push	{r3, r4, r5, lr}
 8083db6:	4604      	mov	r4, r0
 8083db8:	460d      	mov	r5, r1
	r = writeUBX(msg);
 8083dba:	4629      	mov	r1, r5
 8083dbc:	4620      	mov	r0, r4
 8083dbe:	f7ff ff9b 	bl	8083cf8 <_ZN12UbloxM8Q_GPS8writeUBXEPh>
    while( r == ubxPENDING ){
 8083dc2:	2801      	cmp	r0, #1
 8083dc4:	d0f9      	beq.n	8083dba <_ZN12UbloxM8Q_GPS11sendCommandEPh+0x6>
    if (r == ubxBAD_LENGTH){
 8083dc6:	2802      	cmp	r0, #2
 8083dc8:	d106      	bne.n	8083dd8 <_ZN12UbloxM8Q_GPS11sendCommandEPh+0x24>
	Serial.println("gps.sendCommand got ubxBAD_LENGTH");
 8083dca:	f003 fcf7 	bl	80877bc <_Z16_fetch_usbserialv>
 8083dce:	4909      	ldr	r1, [pc, #36]	; (8083df4 <_ZN12UbloxM8Q_GPS11sendCommandEPh+0x40>)
}
 8083dd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Serial.println("gps.sendCommand got ubxNO_ACK");
 8083dd4:	f001 bda5 	b.w	8085922 <_ZN5Print7printlnEPKc>
    if (r == ubxBAD_CHECK_SUM){
 8083dd8:	2803      	cmp	r0, #3
 8083dda:	d005      	beq.n	8083de8 <_ZN12UbloxM8Q_GPS11sendCommandEPh+0x34>
    if (r == ubxNO_ACK){
 8083ddc:	2804      	cmp	r0, #4
 8083dde:	d107      	bne.n	8083df0 <_ZN12UbloxM8Q_GPS11sendCommandEPh+0x3c>
	Serial.println("gps.sendCommand got ubxNO_ACK");
 8083de0:	f003 fcec 	bl	80877bc <_Z16_fetch_usbserialv>
 8083de4:	4904      	ldr	r1, [pc, #16]	; (8083df8 <_ZN12UbloxM8Q_GPS11sendCommandEPh+0x44>)
 8083de6:	e7f3      	b.n	8083dd0 <_ZN12UbloxM8Q_GPS11sendCommandEPh+0x1c>
	Serial.println("gps.sendCommand got ubxBAD_CHECK_SUM");
 8083de8:	f003 fce8 	bl	80877bc <_Z16_fetch_usbserialv>
 8083dec:	4903      	ldr	r1, [pc, #12]	; (8083dfc <_ZN12UbloxM8Q_GPS11sendCommandEPh+0x48>)
 8083dee:	e7ef      	b.n	8083dd0 <_ZN12UbloxM8Q_GPS11sendCommandEPh+0x1c>
}
 8083df0:	bd38      	pop	{r3, r4, r5, pc}
 8083df2:	bf00      	nop
 8083df4:	0808b9fc 	.word	0x0808b9fc
 8083df8:	0808ba43 	.word	0x0808ba43
 8083dfc:	0808ba1e 	.word	0x0808ba1e

08083e00 <_ZN12UbloxM8Q_GPS8resetODOEv>:
    sendCommand(resetODOmsg);
 8083e00:	4901      	ldr	r1, [pc, #4]	; (8083e08 <_ZN12UbloxM8Q_GPS8resetODOEv+0x8>)
 8083e02:	f7ff bfd7 	b.w	8083db4 <_ZN12UbloxM8Q_GPS11sendCommandEPh>
 8083e06:	bf00      	nop
 8083e08:	200000ab 	.word	0x200000ab

08083e0c <_ZN12UbloxM8Q_GPS7setRateEti>:
    if (measurement < 10){ // I don't know what the real minimum is
 8083e0c:	2909      	cmp	r1, #9
{
 8083e0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8083e12:	4606      	mov	r6, r0
 8083e14:	460c      	mov	r4, r1
 8083e16:	4615      	mov	r5, r2
    if (measurement < 10){ // I don't know what the real minimum is
 8083e18:	d805      	bhi.n	8083e26 <_ZN12UbloxM8Q_GPS7setRateEti+0x1a>
	Serial.println("setRate: changed measurement to minimum 10 ms");
 8083e1a:	f003 fccf 	bl	80877bc <_Z16_fetch_usbserialv>
 8083e1e:	4929      	ldr	r1, [pc, #164]	; (8083ec4 <_ZN12UbloxM8Q_GPS7setRateEti+0xb8>)
 8083e20:	f001 fd7f 	bl	8085922 <_ZN5Print7printlnEPKc>
	measurement = 10;
 8083e24:	240a      	movs	r4, #10
    if ( navigationSol < 1 ){ 
 8083e26:	2d00      	cmp	r5, #0
 8083e28:	dc43      	bgt.n	8083eb2 <_ZN12UbloxM8Q_GPS7setRateEti+0xa6>
	Serial.println("setRate: changed navigationSol to minimum 1");
 8083e2a:	f003 fcc7 	bl	80877bc <_Z16_fetch_usbserialv>
 8083e2e:	4926      	ldr	r1, [pc, #152]	; (8083ec8 <_ZN12UbloxM8Q_GPS7setRateEti+0xbc>)
 8083e30:	f001 fd77 	bl	8085922 <_ZN5Print7printlnEPKc>
	navigationSol = 1;
 8083e34:	2501      	movs	r5, #1
    ubxWatchdog = measurement * navigationSol * 5;
 8083e36:	fb05 f304 	mul.w	r3, r5, r4
 8083e3a:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8083ecc <_ZN12UbloxM8Q_GPS7setRateEti+0xc0>
 8083e3e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8083e42:	f8c8 3000 	str.w	r3, [r8]
    Serial.print("setRate: measurement: ");
 8083e46:	f003 fcb9 	bl	80877bc <_Z16_fetch_usbserialv>
 8083e4a:	4921      	ldr	r1, [pc, #132]	; (8083ed0 <_ZN12UbloxM8Q_GPS7setRateEti+0xc4>)
 8083e4c:	f001 fd56 	bl	80858fc <_ZN5Print5printEPKc>
    Serial.println(measurement);
 8083e50:	f003 fcb4 	bl	80877bc <_Z16_fetch_usbserialv>
 8083e54:	4607      	mov	r7, r0
        return printNumber(val, base) + t;
 8083e56:	220a      	movs	r2, #10
 8083e58:	4621      	mov	r1, r4
 8083e5a:	f001 fd6c 	bl	8085936 <_ZN5Print11printNumberEmh>
        n += println();
 8083e5e:	4638      	mov	r0, r7
 8083e60:	f001 fd53 	bl	808590a <_ZN5Print7printlnEv>
    Serial.print("setRate: navigationSol: ");
 8083e64:	f003 fcaa 	bl	80877bc <_Z16_fetch_usbserialv>
 8083e68:	491a      	ldr	r1, [pc, #104]	; (8083ed4 <_ZN12UbloxM8Q_GPS7setRateEti+0xc8>)
 8083e6a:	f001 fd47 	bl	80858fc <_ZN5Print5printEPKc>
    Serial.println(navigationSol);
 8083e6e:	f003 fca5 	bl	80877bc <_Z16_fetch_usbserialv>
 8083e72:	220a      	movs	r2, #10
 8083e74:	4629      	mov	r1, r5
 8083e76:	f7ff fb72 	bl	808355e <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
    Serial.print("setRate: ubxWatchdog: ");
 8083e7a:	f003 fc9f 	bl	80877bc <_Z16_fetch_usbserialv>
 8083e7e:	4916      	ldr	r1, [pc, #88]	; (8083ed8 <_ZN12UbloxM8Q_GPS7setRateEti+0xcc>)
 8083e80:	f001 fd3c 	bl	80858fc <_ZN5Print5printEPKc>
    Serial.println(ubxWatchdog);
 8083e84:	f003 fc9a 	bl	80877bc <_Z16_fetch_usbserialv>
 8083e88:	4607      	mov	r7, r0
        return printNumber(val, base) + t;
 8083e8a:	f8d8 1000 	ldr.w	r1, [r8]
 8083e8e:	220a      	movs	r2, #10
 8083e90:	f001 fd51 	bl	8085936 <_ZN5Print11printNumberEmh>
        n += println();
 8083e94:	4638      	mov	r0, r7
 8083e96:	f001 fd38 	bl	808590a <_ZN5Print7printlnEv>
    rateMsg[PAYLOAD_IDX + 3] = 0;
 8083e9a:	2300      	movs	r3, #0
    rateMsg[PAYLOAD_IDX] = (measurement & 0xFF); // little endian
 8083e9c:	490f      	ldr	r1, [pc, #60]	; (8083edc <_ZN12UbloxM8Q_GPS7setRateEti+0xd0>)
    sendCommand(rateMsg);
 8083e9e:	4630      	mov	r0, r6
    rateMsg[PAYLOAD_IDX] = (measurement & 0xFF); // little endian
 8083ea0:	718c      	strb	r4, [r1, #6]
    rateMsg[PAYLOAD_IDX + 1] = ((measurement/256) & 0xFF);
 8083ea2:	0a24      	lsrs	r4, r4, #8
 8083ea4:	71cc      	strb	r4, [r1, #7]
    rateMsg[PAYLOAD_IDX + 2] = (navigationSol & 0xFF);
 8083ea6:	720d      	strb	r5, [r1, #8]
    rateMsg[PAYLOAD_IDX + 3] = 0;
 8083ea8:	724b      	strb	r3, [r1, #9]
}
 8083eaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    sendCommand(rateMsg);
 8083eae:	f7ff bf81 	b.w	8083db4 <_ZN12UbloxM8Q_GPS11sendCommandEPh>
    if ( navigationSol > 127 ){ 
 8083eb2:	2d7f      	cmp	r5, #127	; 0x7f
 8083eb4:	ddbf      	ble.n	8083e36 <_ZN12UbloxM8Q_GPS7setRateEti+0x2a>
	Serial.println("setRate: changed navigationSol to maximum 127");
 8083eb6:	f003 fc81 	bl	80877bc <_Z16_fetch_usbserialv>
 8083eba:	4909      	ldr	r1, [pc, #36]	; (8083ee0 <_ZN12UbloxM8Q_GPS7setRateEti+0xd4>)
 8083ebc:	f001 fd31 	bl	8085922 <_ZN5Print7printlnEPKc>
	navigationSol = 127;
 8083ec0:	257f      	movs	r5, #127	; 0x7f
 8083ec2:	e7b8      	b.n	8083e36 <_ZN12UbloxM8Q_GPS7setRateEti+0x2a>
 8083ec4:	0808ba61 	.word	0x0808ba61
 8083ec8:	0808ba8f 	.word	0x0808ba8f
 8083ecc:	200000b4 	.word	0x200000b4
 8083ed0:	0808bae9 	.word	0x0808bae9
 8083ed4:	0808bb00 	.word	0x0808bb00
 8083ed8:	0808bb19 	.word	0x0808bb19
 8083edc:	2000009d 	.word	0x2000009d
 8083ee0:	0808babb 	.word	0x0808babb

08083ee4 <_ZN12UbloxM8Q_GPS5beginEv>:
{
 8083ee4:	b570      	push	{r4, r5, r6, lr}
    switch (state){
 8083ee6:	4d1a      	ldr	r5, [pc, #104]	; (8083f50 <_ZN12UbloxM8Q_GPS5beginEv+0x6c>)
{
 8083ee8:	4606      	mov	r6, r0
 8083eea:	682b      	ldr	r3, [r5, #0]
 8083eec:	2b05      	cmp	r3, #5
 8083eee:	d829      	bhi.n	8083f44 <_ZN12UbloxM8Q_GPS5beginEv+0x60>
 8083ef0:	e8df f003 	tbb	[pc, r3]
 8083ef4:	1b190b03 	.word	0x1b190b03
 8083ef8:	1f1d      	.short	0x1f1d
	    readVer();
 8083efa:	f7ff fddb 	bl	8083ab4 <_ZN12UbloxM8Q_GPS7readVerEv>
	    gpsOn = true;
 8083efe:	2301      	movs	r3, #1
 8083f00:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60
	    state++;
 8083f04:	682b      	ldr	r3, [r5, #0]
 8083f06:	3301      	adds	r3, #1
 8083f08:	602b      	str	r3, [r5, #0]
	    ret = writeUBX(cfgRate) ;
 8083f0a:	4912      	ldr	r1, [pc, #72]	; (8083f54 <_ZN12UbloxM8Q_GPS5beginEv+0x70>)
	    ret = writeUBX(cfgNav5) ;
 8083f0c:	4630      	mov	r0, r6
 8083f0e:	f7ff fef3 	bl	8083cf8 <_ZN12UbloxM8Q_GPS8writeUBXEPh>
	    if ( ret == ubxPENDING){
 8083f12:	2801      	cmp	r0, #1
	    ret = writeUBX(cfgNav5) ;
 8083f14:	4604      	mov	r4, r0
	    if ( ret == ubxPENDING){
 8083f16:	d003      	beq.n	8083f20 <_ZN12UbloxM8Q_GPS5beginEv+0x3c>
		state++;
 8083f18:	6829      	ldr	r1, [r5, #0]
	    if ( ret == ubxSUCCESS){
 8083f1a:	b960      	cbnz	r0, 8083f36 <_ZN12UbloxM8Q_GPS5beginEv+0x52>
		state++;
 8083f1c:	3101      	adds	r1, #1
 8083f1e:	6029      	str	r1, [r5, #0]
		return ubxPENDING;
 8083f20:	2401      	movs	r4, #1
}
 8083f22:	4620      	mov	r0, r4
 8083f24:	bd70      	pop	{r4, r5, r6, pc}
	    ret = writeUBX(enablePVT) ;
 8083f26:	490c      	ldr	r1, [pc, #48]	; (8083f58 <_ZN12UbloxM8Q_GPS5beginEv+0x74>)
 8083f28:	e7f0      	b.n	8083f0c <_ZN12UbloxM8Q_GPS5beginEv+0x28>
	    ret = writeUBX(cfgNav5) ;
 8083f2a:	490c      	ldr	r1, [pc, #48]	; (8083f5c <_ZN12UbloxM8Q_GPS5beginEv+0x78>)
 8083f2c:	e7ee      	b.n	8083f0c <_ZN12UbloxM8Q_GPS5beginEv+0x28>
	    ret = writeUBX(cfgODOmsg) ;
 8083f2e:	490c      	ldr	r1, [pc, #48]	; (8083f60 <_ZN12UbloxM8Q_GPS5beginEv+0x7c>)
 8083f30:	e7ec      	b.n	8083f0c <_ZN12UbloxM8Q_GPS5beginEv+0x28>
	    ret = writeUBX(enableODO) ;
 8083f32:	490c      	ldr	r1, [pc, #48]	; (8083f64 <_ZN12UbloxM8Q_GPS5beginEv+0x80>)
 8083f34:	e7ea      	b.n	8083f0c <_ZN12UbloxM8Q_GPS5beginEv+0x28>
		reportError(state, ret);
 8083f36:	4602      	mov	r2, r0
 8083f38:	4630      	mov	r0, r6
 8083f3a:	f7ff fde1 	bl	8083b00 <_ZN12UbloxM8Q_GPS11reportErrorEi9ubxReturn>
		state = 0;
 8083f3e:	2300      	movs	r3, #0
 8083f40:	602b      	str	r3, [r5, #0]
		return ret;
 8083f42:	e7ee      	b.n	8083f22 <_ZN12UbloxM8Q_GPS5beginEv+0x3e>
	    initComplete = true;
 8083f44:	2301      	movs	r3, #1
	    state = 0;
 8083f46:	2400      	movs	r4, #0
	    initComplete = true;
 8083f48:	7003      	strb	r3, [r0, #0]
	    state = 0;
 8083f4a:	602c      	str	r4, [r5, #0]
	    return ubxSUCCESS;
 8083f4c:	e7e9      	b.n	8083f22 <_ZN12UbloxM8Q_GPS5beginEv+0x3e>
 8083f4e:	bf00      	nop
 8083f50:	200003b0 	.word	0x200003b0
 8083f54:	20000079 	.word	0x20000079
 8083f58:	20000092 	.word	0x20000092
 8083f5c:	20000031 	.word	0x20000031
 8083f60:	2000005d 	.word	0x2000005d
 8083f64:	20000087 	.word	0x20000087

08083f68 <_GLOBAL__sub_I_enablePOSLLH>:
AckedMsg ackedMsg = AckedMsg();
 8083f68:	4801      	ldr	r0, [pc, #4]	; (8083f70 <_GLOBAL__sub_I_enablePOSLLH+0x8>)
 8083f6a:	f7ff bdf5 	b.w	8083b58 <_ZN8AckedMsgC1Ev>
 8083f6e:	bf00      	nop
 8083f70:	200003c0 	.word	0x200003c0

08083f74 <_Z17tinkerDigitalRead6String>:
 * Output         : None.
 * Return         : Value of the pin (0 or 1) in INT type
                    Returns a negative number on failure
 *******************************************************************************/
int tinkerDigitalRead(String pin)
{
 8083f74:	b5f0      	push	{r4, r5, r6, r7, lr}
	//convert ascii to integer
	int pinNumber = pin.charAt(1) - '0';
 8083f76:	2101      	movs	r1, #1
{
 8083f78:	b085      	sub	sp, #20
 8083f7a:	4606      	mov	r6, r0
	int pinNumber = pin.charAt(1) - '0';
 8083f7c:	f001 fc2f 	bl	80857de <_ZNK6String6charAtEj>
 8083f80:	f1a0 0530 	sub.w	r5, r0, #48	; 0x30
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 8083f84:	2d07      	cmp	r5, #7
	int pinNumber = pin.charAt(1) - '0';
 8083f86:	4604      	mov	r4, r0
	if (pinNumber< 0 || pinNumber >7) return -1;
 8083f88:	d82c      	bhi.n	8083fe4 <_Z17tinkerDigitalRead6String+0x70>

	if(pin.startsWith("D"))
 8083f8a:	491a      	ldr	r1, [pc, #104]	; (8083ff4 <_Z17tinkerDigitalRead6String+0x80>)
 8083f8c:	4668      	mov	r0, sp
 8083f8e:	f001 fb47 	bl	8085620 <_ZN6StringC1EPK19__FlashStringHelper>
 8083f92:	4669      	mov	r1, sp
 8083f94:	4630      	mov	r0, r6
 8083f96:	f001 fc10 	bl	80857ba <_ZNK6String10startsWithERKS_>
 8083f9a:	4607      	mov	r7, r0
 8083f9c:	4668      	mov	r0, sp
 8083f9e:	f001 faf5 	bl	808558c <_ZN6StringD1Ev>
 8083fa2:	b157      	cbz	r7, 8083fba <_Z17tinkerDigitalRead6String+0x46>
	{
		pinMode(pinNumber, INPUT_PULLDOWN);
 8083fa4:	b2ad      	uxth	r5, r5
 8083fa6:	4628      	mov	r0, r5
 8083fa8:	2103      	movs	r1, #3
 8083faa:	f004 f933 	bl	8088214 <pinMode>
		return digitalRead(pinNumber);
 8083fae:	4628      	mov	r0, r5
	{
		pinMode(pinNumber+10, INPUT_PULLDOWN);
		return digitalRead(pinNumber+10);
	}
	return -2;
}
 8083fb0:	b005      	add	sp, #20
 8083fb2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return digitalRead(pinNumber+10);
 8083fb6:	f004 b957 	b.w	8088268 <digitalRead>
	else if (pin.startsWith("A"))
 8083fba:	490f      	ldr	r1, [pc, #60]	; (8083ff8 <_Z17tinkerDigitalRead6String+0x84>)
 8083fbc:	4668      	mov	r0, sp
 8083fbe:	f001 fb2f 	bl	8085620 <_ZN6StringC1EPK19__FlashStringHelper>
 8083fc2:	4669      	mov	r1, sp
 8083fc4:	4630      	mov	r0, r6
 8083fc6:	f001 fbf8 	bl	80857ba <_ZNK6String10startsWithERKS_>
 8083fca:	4605      	mov	r5, r0
 8083fcc:	4668      	mov	r0, sp
 8083fce:	f001 fadd 	bl	808558c <_ZN6StringD1Ev>
 8083fd2:	b15d      	cbz	r5, 8083fec <_Z17tinkerDigitalRead6String+0x78>
		pinMode(pinNumber+10, INPUT_PULLDOWN);
 8083fd4:	3c26      	subs	r4, #38	; 0x26
 8083fd6:	b2a4      	uxth	r4, r4
 8083fd8:	4620      	mov	r0, r4
 8083fda:	2103      	movs	r1, #3
 8083fdc:	f004 f91a 	bl	8088214 <pinMode>
		return digitalRead(pinNumber+10);
 8083fe0:	4620      	mov	r0, r4
 8083fe2:	e7e5      	b.n	8083fb0 <_Z17tinkerDigitalRead6String+0x3c>
	if (pinNumber< 0 || pinNumber >7) return -1;
 8083fe4:	f04f 30ff 	mov.w	r0, #4294967295
}
 8083fe8:	b005      	add	sp, #20
 8083fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return -2;
 8083fec:	f06f 0001 	mvn.w	r0, #1
 8083ff0:	e7fa      	b.n	8083fe8 <_Z17tinkerDigitalRead6String+0x74>
 8083ff2:	bf00      	nop
 8083ff4:	0808b43a 	.word	0x0808b43a
 8083ff8:	0808bb30 	.word	0x0808bb30

08083ffc <_Z18tinkerDigitalWrite6String>:
 * Input          : Pin and value
 * Output         : None.
 * Return         : 1 on success and a negative number on failure
 *******************************************************************************/
int tinkerDigitalWrite(String command)
{
 8083ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
	bool value = 0;
	//convert ascii to integer
	int pinNumber = command.charAt(1) - '0';
 8083ffe:	2101      	movs	r1, #1
{
 8084000:	b085      	sub	sp, #20
 8084002:	4606      	mov	r6, r0
	int pinNumber = command.charAt(1) - '0';
 8084004:	f001 fbeb 	bl	80857de <_ZNK6String6charAtEj>
 8084008:	f1a0 0430 	sub.w	r4, r0, #48	; 0x30
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 808400c:	2c07      	cmp	r4, #7
 808400e:	d847      	bhi.n	80840a0 <_Z18tinkerDigitalWrite6String+0xa4>

	if(command.substring(3,7) == "HIGH") value = 1;
 8084010:	2307      	movs	r3, #7
 8084012:	2203      	movs	r2, #3
 8084014:	4631      	mov	r1, r6
 8084016:	4668      	mov	r0, sp
 8084018:	f001 fbf4 	bl	8085804 <_ZNK6String9substringEjj>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 808401c:	4668      	mov	r0, sp
 808401e:	4925      	ldr	r1, [pc, #148]	; (80840b4 <_Z18tinkerDigitalWrite6String+0xb8>)
 8084020:	f001 fba3 	bl	808576a <_ZNK6String6equalsEPKc>
 8084024:	4605      	mov	r5, r0
 8084026:	4668      	mov	r0, sp
 8084028:	f001 fab0 	bl	808558c <_ZN6StringD1Ev>
 808402c:	bb3d      	cbnz	r5, 808407e <_Z18tinkerDigitalWrite6String+0x82>
	else if(command.substring(3,6) == "LOW") value = 0;
 808402e:	2306      	movs	r3, #6
 8084030:	2203      	movs	r2, #3
 8084032:	4631      	mov	r1, r6
 8084034:	4668      	mov	r0, sp
 8084036:	f001 fbe5 	bl	8085804 <_ZNK6String9substringEjj>
 808403a:	4668      	mov	r0, sp
 808403c:	491e      	ldr	r1, [pc, #120]	; (80840b8 <_Z18tinkerDigitalWrite6String+0xbc>)
 808403e:	f001 fb94 	bl	808576a <_ZNK6String6equalsEPKc>
 8084042:	4607      	mov	r7, r0
 8084044:	4668      	mov	r0, sp
 8084046:	f001 faa1 	bl	808558c <_ZN6StringD1Ev>
 808404a:	b367      	cbz	r7, 80840a6 <_Z18tinkerDigitalWrite6String+0xaa>
	else return -2;

	if(command.startsWith("D"))
 808404c:	491b      	ldr	r1, [pc, #108]	; (80840bc <_Z18tinkerDigitalWrite6String+0xc0>)
 808404e:	4668      	mov	r0, sp
 8084050:	f001 fae6 	bl	8085620 <_ZN6StringC1EPK19__FlashStringHelper>
 8084054:	4669      	mov	r1, sp
 8084056:	4630      	mov	r0, r6
 8084058:	f001 fbaf 	bl	80857ba <_ZNK6String10startsWithERKS_>
 808405c:	4607      	mov	r7, r0
 808405e:	4668      	mov	r0, sp
 8084060:	f001 fa94 	bl	808558c <_ZN6StringD1Ev>
 8084064:	b16f      	cbz	r7, 8084082 <_Z18tinkerDigitalWrite6String+0x86>
		digitalWrite(pinNumber, value);
		return 1;
	}
	else if(command.startsWith("A"))
	{
		pinMode(pinNumber+10, OUTPUT);
 8084066:	b2a4      	uxth	r4, r4
 8084068:	2101      	movs	r1, #1
 808406a:	4620      	mov	r0, r4
 808406c:	f004 f8d2 	bl	8088214 <pinMode>
		digitalWrite(pinNumber+10, value);
 8084070:	4620      	mov	r0, r4
 8084072:	4629      	mov	r1, r5
 8084074:	f004 f8df 	bl	8088236 <digitalWrite>
		return 1;
 8084078:	2001      	movs	r0, #1
	}
	else return -3;
}
 808407a:	b005      	add	sp, #20
 808407c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(command.substring(3,7) == "HIGH") value = 1;
 808407e:	2501      	movs	r5, #1
 8084080:	e7e4      	b.n	808404c <_Z18tinkerDigitalWrite6String+0x50>
	else if(command.startsWith("A"))
 8084082:	490f      	ldr	r1, [pc, #60]	; (80840c0 <_Z18tinkerDigitalWrite6String+0xc4>)
 8084084:	4668      	mov	r0, sp
 8084086:	f001 facb 	bl	8085620 <_ZN6StringC1EPK19__FlashStringHelper>
 808408a:	4630      	mov	r0, r6
 808408c:	4669      	mov	r1, sp
 808408e:	f001 fb94 	bl	80857ba <_ZNK6String10startsWithERKS_>
 8084092:	4606      	mov	r6, r0
 8084094:	4668      	mov	r0, sp
 8084096:	f001 fa79 	bl	808558c <_ZN6StringD1Ev>
 808409a:	b13e      	cbz	r6, 80840ac <_Z18tinkerDigitalWrite6String+0xb0>
		pinMode(pinNumber+10, OUTPUT);
 808409c:	340a      	adds	r4, #10
 808409e:	e7e2      	b.n	8084066 <_Z18tinkerDigitalWrite6String+0x6a>
	if (pinNumber< 0 || pinNumber >7) return -1;
 80840a0:	f04f 30ff 	mov.w	r0, #4294967295
 80840a4:	e7e9      	b.n	808407a <_Z18tinkerDigitalWrite6String+0x7e>
	else return -2;
 80840a6:	f06f 0001 	mvn.w	r0, #1
 80840aa:	e7e6      	b.n	808407a <_Z18tinkerDigitalWrite6String+0x7e>
	else return -3;
 80840ac:	f06f 0002 	mvn.w	r0, #2
 80840b0:	e7e3      	b.n	808407a <_Z18tinkerDigitalWrite6String+0x7e>
 80840b2:	bf00      	nop
 80840b4:	0808bb32 	.word	0x0808bb32
 80840b8:	0808bb37 	.word	0x0808bb37
 80840bc:	0808b43a 	.word	0x0808b43a
 80840c0:	0808bb30 	.word	0x0808bb30

080840c4 <_Z16tinkerAnalogRead6String>:
 * Output         : None.
 * Return         : Returns the analog value in INT type (0 to 4095)
                    Returns a negative number on failure
 *******************************************************************************/
int tinkerAnalogRead(String pin)
{
 80840c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	//convert ascii to integer
	int pinNumber = pin.charAt(1) - '0';
 80840c6:	2101      	movs	r1, #1
{
 80840c8:	b085      	sub	sp, #20
 80840ca:	4607      	mov	r7, r0
	int pinNumber = pin.charAt(1) - '0';
 80840cc:	f001 fb87 	bl	80857de <_ZNK6String6charAtEj>
 80840d0:	f1a0 0530 	sub.w	r5, r0, #48	; 0x30
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 80840d4:	2d07      	cmp	r5, #7
	int pinNumber = pin.charAt(1) - '0';
 80840d6:	4604      	mov	r4, r0
	if (pinNumber< 0 || pinNumber >7) return -1;
 80840d8:	d82c      	bhi.n	8084134 <_Z16tinkerAnalogRead6String+0x70>

	if(pin.startsWith("D"))
 80840da:	491a      	ldr	r1, [pc, #104]	; (8084144 <_Z16tinkerAnalogRead6String+0x80>)
 80840dc:	4668      	mov	r0, sp
 80840de:	f001 fa9f 	bl	8085620 <_ZN6StringC1EPK19__FlashStringHelper>
 80840e2:	4669      	mov	r1, sp
 80840e4:	4638      	mov	r0, r7
 80840e6:	f001 fb68 	bl	80857ba <_ZNK6String10startsWithERKS_>
 80840ea:	4606      	mov	r6, r0
 80840ec:	4668      	mov	r0, sp
 80840ee:	f001 fa4d 	bl	808558c <_ZN6StringD1Ev>
 80840f2:	b156      	cbz	r6, 808410a <_Z16tinkerAnalogRead6String+0x46>
	{
		pinMode(pinNumber, INPUT);
 80840f4:	b2ad      	uxth	r5, r5
 80840f6:	4628      	mov	r0, r5
 80840f8:	2100      	movs	r1, #0
 80840fa:	f004 f88b 	bl	8088214 <pinMode>
		return analogRead(pinNumber);
 80840fe:	4628      	mov	r0, r5
	{
		pinMode(pinNumber+10, INPUT);
		return analogRead(pinNumber+10);
	}
	return -2;
}
 8084100:	b005      	add	sp, #20
 8084102:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return analogRead(pinNumber+10);
 8084106:	f004 b8c2 	b.w	808828e <analogRead>
	else if (pin.startsWith("A"))
 808410a:	490f      	ldr	r1, [pc, #60]	; (8084148 <_Z16tinkerAnalogRead6String+0x84>)
 808410c:	4668      	mov	r0, sp
 808410e:	f001 fa87 	bl	8085620 <_ZN6StringC1EPK19__FlashStringHelper>
 8084112:	4669      	mov	r1, sp
 8084114:	4638      	mov	r0, r7
 8084116:	f001 fb50 	bl	80857ba <_ZNK6String10startsWithERKS_>
 808411a:	4605      	mov	r5, r0
 808411c:	4668      	mov	r0, sp
 808411e:	f001 fa35 	bl	808558c <_ZN6StringD1Ev>
 8084122:	b15d      	cbz	r5, 808413c <_Z16tinkerAnalogRead6String+0x78>
		pinMode(pinNumber+10, INPUT);
 8084124:	3c26      	subs	r4, #38	; 0x26
 8084126:	b2a4      	uxth	r4, r4
 8084128:	4620      	mov	r0, r4
 808412a:	4631      	mov	r1, r6
 808412c:	f004 f872 	bl	8088214 <pinMode>
		return analogRead(pinNumber+10);
 8084130:	4620      	mov	r0, r4
 8084132:	e7e5      	b.n	8084100 <_Z16tinkerAnalogRead6String+0x3c>
	if (pinNumber< 0 || pinNumber >7) return -1;
 8084134:	f04f 30ff 	mov.w	r0, #4294967295
}
 8084138:	b005      	add	sp, #20
 808413a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return -2;
 808413c:	f06f 0001 	mvn.w	r0, #1
 8084140:	e7fa      	b.n	8084138 <_Z16tinkerAnalogRead6String+0x74>
 8084142:	bf00      	nop
 8084144:	0808b43a 	.word	0x0808b43a
 8084148:	0808bb30 	.word	0x0808bb30

0808414c <_Z17tinkerAnalogWrite6String>:
 * Input          : Pin and Value (0 to 255)
 * Output         : None.
 * Return         : 1 on success and a negative number on failure
 *******************************************************************************/
int tinkerAnalogWrite(String command)
{
 808414c:	b5f0      	push	{r4, r5, r6, r7, lr}
	//convert ascii to integer
	int pinNumber = command.charAt(1) - '0';
 808414e:	2101      	movs	r1, #1
{
 8084150:	b089      	sub	sp, #36	; 0x24
 8084152:	4605      	mov	r5, r0
	int pinNumber = command.charAt(1) - '0';
 8084154:	f001 fb43 	bl	80857de <_ZNK6String6charAtEj>
 8084158:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 808415c:	2e07      	cmp	r6, #7
	int pinNumber = command.charAt(1) - '0';
 808415e:	4604      	mov	r4, r0
	if (pinNumber< 0 || pinNumber >7) return -1;
 8084160:	d840      	bhi.n	80841e4 <_Z17tinkerAnalogWrite6String+0x98>

	String value = command.substring(3);
 8084162:	2203      	movs	r2, #3
 8084164:	4629      	mov	r1, r5
 8084166:	4668      	mov	r0, sp
 8084168:	f001 fb6e 	bl	8085848 <_ZNK6String9substringEj>

	if(command.startsWith("D"))
 808416c:	491f      	ldr	r1, [pc, #124]	; (80841ec <_Z17tinkerAnalogWrite6String+0xa0>)
 808416e:	a804      	add	r0, sp, #16
 8084170:	f001 fa56 	bl	8085620 <_ZN6StringC1EPK19__FlashStringHelper>
 8084174:	4628      	mov	r0, r5
 8084176:	a904      	add	r1, sp, #16
 8084178:	f001 fb1f 	bl	80857ba <_ZNK6String10startsWithERKS_>
 808417c:	4607      	mov	r7, r0
 808417e:	a804      	add	r0, sp, #16
 8084180:	f001 fa04 	bl	808558c <_ZN6StringD1Ev>
 8084184:	b197      	cbz	r7, 80841ac <_Z17tinkerAnalogWrite6String+0x60>
	{
		pinMode(pinNumber, OUTPUT);
 8084186:	b2b6      	uxth	r6, r6
 8084188:	2101      	movs	r1, #1
 808418a:	4630      	mov	r0, r6
 808418c:	f004 f842 	bl	8088214 <pinMode>
		analogWrite(pinNumber, value.toInt());
 8084190:	4668      	mov	r0, sp
 8084192:	f001 fb60 	bl	8085856 <_ZNK6String5toIntEv>
 8084196:	4601      	mov	r1, r0
 8084198:	4630      	mov	r0, r6
		return 1;
	}
	else if(command.startsWith("A"))
	{
		pinMode(pinNumber+10, OUTPUT);
		analogWrite(pinNumber+10, value.toInt());
 808419a:	f004 f88f 	bl	80882bc <_Z11analogWritetm>
		return 1;
 808419e:	2401      	movs	r4, #1
	String value = command.substring(3);
 80841a0:	4668      	mov	r0, sp
 80841a2:	f001 f9f3 	bl	808558c <_ZN6StringD1Ev>
	}
	else return -2;
}
 80841a6:	4620      	mov	r0, r4
 80841a8:	b009      	add	sp, #36	; 0x24
 80841aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(command.startsWith("A"))
 80841ac:	4910      	ldr	r1, [pc, #64]	; (80841f0 <_Z17tinkerAnalogWrite6String+0xa4>)
 80841ae:	a804      	add	r0, sp, #16
 80841b0:	f001 fa36 	bl	8085620 <_ZN6StringC1EPK19__FlashStringHelper>
 80841b4:	4628      	mov	r0, r5
 80841b6:	a904      	add	r1, sp, #16
 80841b8:	f001 faff 	bl	80857ba <_ZNK6String10startsWithERKS_>
 80841bc:	4605      	mov	r5, r0
 80841be:	a804      	add	r0, sp, #16
 80841c0:	f001 f9e4 	bl	808558c <_ZN6StringD1Ev>
 80841c4:	b15d      	cbz	r5, 80841de <_Z17tinkerAnalogWrite6String+0x92>
		pinMode(pinNumber+10, OUTPUT);
 80841c6:	3c26      	subs	r4, #38	; 0x26
 80841c8:	b2a4      	uxth	r4, r4
 80841ca:	2101      	movs	r1, #1
 80841cc:	4620      	mov	r0, r4
 80841ce:	f004 f821 	bl	8088214 <pinMode>
		analogWrite(pinNumber+10, value.toInt());
 80841d2:	4668      	mov	r0, sp
 80841d4:	f001 fb3f 	bl	8085856 <_ZNK6String5toIntEv>
 80841d8:	4601      	mov	r1, r0
 80841da:	4620      	mov	r0, r4
 80841dc:	e7dd      	b.n	808419a <_Z17tinkerAnalogWrite6String+0x4e>
	else return -2;
 80841de:	f06f 0401 	mvn.w	r4, #1
 80841e2:	e7dd      	b.n	80841a0 <_Z17tinkerAnalogWrite6String+0x54>
	if (pinNumber< 0 || pinNumber >7) return -1;
 80841e4:	f04f 34ff 	mov.w	r4, #4294967295
 80841e8:	e7dd      	b.n	80841a6 <_Z17tinkerAnalogWrite6String+0x5a>
 80841ea:	bf00      	nop
 80841ec:	0808b43a 	.word	0x0808b43a
 80841f0:	0808bb30 	.word	0x0808bb30

080841f4 <_ZN14PietteTech_DHT12_isrCallbackEv>:
// NOTE:  isrCallback is only here for backwards compatibility with v0.3 and earlier
//        it is no longer used or needed
// 
void PietteTech_DHT::isrCallback() { }

void PietteTech_DHT::_isrCallback() {
 80841f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // so we'll set _detachISR inside the ISR when we're done
  // and count on code on the main thread to detach it via detachISRIfRequested().
  // Getting another interrupt after we've already requested a detach is benign
  // so we'll just ignore this interrupt and return.

  if (_detachISR) return;
 80841f6:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
void PietteTech_DHT::_isrCallback() {
 80841fa:	4604      	mov	r4, r0
  if (_detachISR) return;
 80841fc:	b98b      	cbnz	r3, 8084222 <_ZN14PietteTech_DHT12_isrCallbackEv+0x2e>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80841fe:	f000 fc57 	bl	8084ab0 <HAL_Timer_Get_Micro_Seconds>

  unsigned long newUs = micros();
  unsigned long delta = (newUs - _us);
  _us = newUs;

  if (delta > 6000) {
 8084202:	f241 7170 	movw	r1, #6000	; 0x1770
  unsigned long delta = (newUs - _us);
 8084206:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  _us = newUs;
 8084208:	63a0      	str	r0, [r4, #56]	; 0x38
  unsigned long delta = (newUs - _us);
 808420a:	1a83      	subs	r3, r0, r2
  if (delta > 6000) {
 808420c:	428b      	cmp	r3, r1
 808420e:	d909      	bls.n	8084224 <_ZN14PietteTech_DHT12_isrCallbackEv+0x30>
    _status = DHTLIB_ERROR_ISR_TIMEOUT;
 8084210:	f06f 0301 	mvn.w	r3, #1
 8084214:	62e3      	str	r3, [r4, #44]	; 0x2c
    _state = STOPPED;
 8084216:	2303      	movs	r3, #3
 8084218:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
#if (SYSTEM_VERSION < SYSTEM_VERSION_v121RC3)
    detachInterrupt(_sigPin);
#else
    _detachISR = true;
 808421c:	2301      	movs	r3, #1
 808421e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    }
    break;
  default:
    break;
  }
}
 8084222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (_state) {
 8084224:	f894 502a 	ldrb.w	r5, [r4, #42]	; 0x2a
 8084228:	f005 01ff 	and.w	r1, r5, #255	; 0xff
 808422c:	2d00      	cmp	r5, #0
 808422e:	d048      	beq.n	80842c2 <_ZN14PietteTech_DHT12_isrCallbackEv+0xce>
 8084230:	2901      	cmp	r1, #1
 8084232:	d1f6      	bne.n	8084222 <_ZN14PietteTech_DHT12_isrCallbackEv+0x2e>
    if (60 < delta && delta < 155) { //valid in timing
 8084234:	f1a3 023d 	sub.w	r2, r3, #61	; 0x3d
 8084238:	2a5d      	cmp	r2, #93	; 0x5d
 808423a:	d870      	bhi.n	808431e <_ZN14PietteTech_DHT12_isrCallbackEv+0x12a>
      _bits[_idx] <<= 1; // shift the data
 808423c:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
      if (delta > 110) //is a one
 8084240:	2b6e      	cmp	r3, #110	; 0x6e
      _bits[_idx] <<= 1; // shift the data
 8084242:	4421      	add	r1, r4
 8084244:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
 8084248:	ea4f 0242 	mov.w	r2, r2, lsl #1
 808424c:	b2d2      	uxtb	r2, r2
 808424e:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
      if (delta > 110) //is a one
 8084252:	d908      	bls.n	8084266 <_ZN14PietteTech_DHT12_isrCallbackEv+0x72>
        _bits[_idx] |= 1;
 8084254:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
 8084258:	4422      	add	r2, r4
 808425a:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
 808425e:	f041 0101 	orr.w	r1, r1, #1
 8084262:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
      *_e++ = delta;  // record the edge -> edge time
 8084266:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8084268:	b2db      	uxtb	r3, r3
 808426a:	1c51      	adds	r1, r2, #1
 808426c:	6421      	str	r1, [r4, #64]	; 0x40
 808426e:	7013      	strb	r3, [r2, #0]
      if (_cnt == 0) { // we have completed the byte, go to next
 8084270:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8084274:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8084278:	2b00      	cmp	r3, #0
 808427a:	d149      	bne.n	8084310 <_ZN14PietteTech_DHT12_isrCallbackEv+0x11c>
        _cnt = 7; // restart at MSB
 808427c:	2307      	movs	r3, #7
 808427e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if (++_idx == 5) { // go to next byte, if we have got 5 bytes stop.
 8084282:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8084286:	3301      	adds	r3, #1
 8084288:	b2db      	uxtb	r3, r3
 808428a:	2b05      	cmp	r3, #5
 808428c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
 8084290:	d1c7      	bne.n	8084222 <_ZN14PietteTech_DHT12_isrCallbackEv+0x2e>
          _detachISR = true;
 8084292:	2001      	movs	r0, #1
 8084294:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
          uint8_t sum = _bits[0] + _bits[1] + _bits[2] + _bits[3];
 8084298:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 808429c:	f894 7031 	ldrb.w	r7, [r4, #49]	; 0x31
 80842a0:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 80842a4:	4439      	add	r1, r7
 80842a6:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 80842aa:	440a      	add	r2, r1
          if (_bits[4] != sum) {
 80842ac:	f894 6034 	ldrb.w	r6, [r4, #52]	; 0x34
          uint8_t sum = _bits[0] + _bits[1] + _bits[2] + _bits[3];
 80842b0:	4413      	add	r3, r2
          if (_bits[4] != sum) {
 80842b2:	b2db      	uxtb	r3, r3
 80842b4:	42b3      	cmp	r3, r6
 80842b6:	d024      	beq.n	8084302 <_ZN14PietteTech_DHT12_isrCallbackEv+0x10e>
            _status = DHTLIB_ERROR_CHECKSUM;
 80842b8:	f04f 33ff 	mov.w	r3, #4294967295
 80842bc:	62e3      	str	r3, [r4, #44]	; 0x2c
            _state = STOPPED;
 80842be:	2303      	movs	r3, #3
 80842c0:	e011      	b.n	80842e6 <_ZN14PietteTech_DHT12_isrCallbackEv+0xf2>
    if (delta < 65) {       // Spec: 20-200us to first falling edge of response
 80842c2:	2b40      	cmp	r3, #64	; 0x40
 80842c4:	d804      	bhi.n	80842d0 <_ZN14PietteTech_DHT12_isrCallbackEv+0xdc>
      _us -= delta;
 80842c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80842c8:	441a      	add	r2, r3
 80842ca:	1a12      	subs	r2, r2, r0
 80842cc:	63a2      	str	r2, [r4, #56]	; 0x38
      break; //do nothing, it started the response signal
 80842ce:	e7a8      	b.n	8084222 <_ZN14PietteTech_DHT12_isrCallbackEv+0x2e>
      *_e++ = delta;  // record the edge -> edge time
 80842d0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80842d2:	b2d9      	uxtb	r1, r3
    } if (125 < delta && delta < 220) {   // account for timing offset with Particle Mesh devices
 80842d4:	3b7e      	subs	r3, #126	; 0x7e
 80842d6:	2b5d      	cmp	r3, #93	; 0x5d
      *_e++ = delta;  // record the edge -> edge time
 80842d8:	f102 0001 	add.w	r0, r2, #1
 80842dc:	f04f 0301 	mov.w	r3, #1
    } if (125 < delta && delta < 220) {   // account for timing offset with Particle Mesh devices
 80842e0:	d804      	bhi.n	80842ec <_ZN14PietteTech_DHT12_isrCallbackEv+0xf8>
      *_e++ = delta;  // record the edge -> edge time
 80842e2:	6420      	str	r0, [r4, #64]	; 0x40
 80842e4:	7011      	strb	r1, [r2, #0]
      _state = STOPPED;
 80842e6:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
 80842ea:	e79a      	b.n	8084222 <_ZN14PietteTech_DHT12_isrCallbackEv+0x2e>
      _detachISR = true;
 80842ec:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
      _status = DHTLIB_ERROR_RESPONSE_TIMEOUT;
 80842f0:	f06f 0302 	mvn.w	r3, #2
 80842f4:	62e3      	str	r3, [r4, #44]	; 0x2c
      _state = STOPPED;
 80842f6:	2303      	movs	r3, #3
      *_e++ = delta;  // record the edge -> edge time
 80842f8:	6420      	str	r0, [r4, #64]	; 0x40
      _state = STOPPED;
 80842fa:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
      *_e++ = delta;  // record the edge -> edge time
 80842fe:	7011      	strb	r1, [r2, #0]
 8084300:	e78f      	b.n	8084222 <_ZN14PietteTech_DHT12_isrCallbackEv+0x2e>
            _state = ACQUIRED;
 8084302:	2302      	movs	r3, #2
            _status = DHTLIB_OK;
 8084304:	62e5      	str	r5, [r4, #44]	; 0x2c
            _state = ACQUIRED;
 8084306:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
            _convert = true;
 808430a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 808430e:	e788      	b.n	8084222 <_ZN14PietteTech_DHT12_isrCallbackEv+0x2e>
      else _cnt--;
 8084310:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8084314:	3b01      	subs	r3, #1
 8084316:	b2db      	uxtb	r3, r3
 8084318:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 808431c:	e781      	b.n	8084222 <_ZN14PietteTech_DHT12_isrCallbackEv+0x2e>
    else if (delta < 10) {
 808431e:	2b09      	cmp	r3, #9
      _status = DHTLIB_ERROR_DELTA;
 8084320:	bf94      	ite	ls
 8084322:	f06f 0205 	mvnls.w	r2, #5
      _status = DHTLIB_ERROR_DATA_TIMEOUT;
 8084326:	f06f 0203 	mvnhi.w	r2, #3
      _detachISR = true;
 808432a:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
 808432e:	2303      	movs	r3, #3
      _status = DHTLIB_ERROR_DATA_TIMEOUT;
 8084330:	62e2      	str	r2, [r4, #44]	; 0x2c
 8084332:	e7d8      	b.n	80842e6 <_ZN14PietteTech_DHT12_isrCallbackEv+0xf2>

08084334 <_ZNSt17_Function_handlerIFvvESt5_BindIFM14PietteTech_DHTFvvEPS2_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8084334:	b410      	push	{r4}
	    return __source._M_access<_Functor*>();
 8084336:	6803      	ldr	r3, [r0, #0]
 8084338:	685a      	ldr	r2, [r3, #4]
 808433a:	6899      	ldr	r1, [r3, #8]
 808433c:	1054      	asrs	r4, r2, #1
 808433e:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8084342:	07d2      	lsls	r2, r2, #31
 8084344:	bf48      	it	mi
 8084346:	590a      	ldrmi	r2, [r1, r4]
 8084348:	681b      	ldr	r3, [r3, #0]
      }
 808434a:	bc10      	pop	{r4}
 808434c:	bf48      	it	mi
 808434e:	58d3      	ldrmi	r3, [r2, r3]
 8084350:	4718      	bx	r3

08084352 <_ZNSt17_Function_handlerIFvvESt5_BindIFM14PietteTech_DHTFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	switch (__op)
 8084352:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8084354:	b538      	push	{r3, r4, r5, lr}
 8084356:	4604      	mov	r4, r0
	switch (__op)
 8084358:	d102      	bne.n	8084360 <_ZNSt17_Function_handlerIFvvESt5_BindIFM14PietteTech_DHTFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
 808435a:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
 808435c:	6023      	str	r3, [r4, #0]
	}
 808435e:	e003      	b.n	8084368 <_ZNSt17_Function_handlerIFvvESt5_BindIFM14PietteTech_DHTFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
	  switch (__op)
 8084360:	2a02      	cmp	r2, #2
 8084362:	d003      	beq.n	808436c <_ZNSt17_Function_handlerIFvvESt5_BindIFM14PietteTech_DHTFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x1a>
 8084364:	2a03      	cmp	r2, #3
 8084366:	d00d      	beq.n	8084384 <_ZNSt17_Function_handlerIFvvESt5_BindIFM14PietteTech_DHTFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x32>
      }
 8084368:	2000      	movs	r0, #0
 808436a:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 808436c:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
 808436e:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 8084370:	f7fb fea3 	bl	80800ba <_Znwj>
 8084374:	4603      	mov	r3, r0
 8084376:	2800      	cmp	r0, #0
 8084378:	d0f0      	beq.n	808435c <_ZNSt17_Function_handlerIFvvESt5_BindIFM14PietteTech_DHTFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
 808437a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 808437e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8084382:	e7eb      	b.n	808435c <_ZNSt17_Function_handlerIFvvESt5_BindIFM14PietteTech_DHTFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
 8084384:	6800      	ldr	r0, [r0, #0]
 8084386:	2800      	cmp	r0, #0
 8084388:	d0ee      	beq.n	8084368 <_ZNSt17_Function_handlerIFvvESt5_BindIFM14PietteTech_DHTFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
 808438a:	210c      	movs	r1, #12
 808438c:	f004 f88f 	bl	80884ae <_ZdlPvj>
 8084390:	e7ea      	b.n	8084368 <_ZNSt17_Function_handlerIFvvESt5_BindIFM14PietteTech_DHTFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>

08084392 <_ZN14PietteTech_DHTC1EhhPFvvE>:
  _type = dht_type;
 8084392:	e9c0 1211 	strd	r1, r2, [r0, #68]	; 0x44
}
 8084396:	4770      	bx	lr

08084398 <_ZN14PietteTech_DHT5beginEv>:
  _state = STOPPED;
 8084398:	2203      	movs	r2, #3
void PietteTech_DHT::begin() {
 808439a:	b538      	push	{r3, r4, r5, lr}
  _lastreadtime = 0;
 808439c:	2300      	movs	r3, #0
  _state = STOPPED;
 808439e:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
  _firstreading = true;
 80843a2:	2501      	movs	r5, #1
  _status = DHTLIB_ERROR_NOTSTARTED;
 80843a4:	f06f 0206 	mvn.w	r2, #6
void PietteTech_DHT::begin() {
 80843a8:	4604      	mov	r4, r0
  _lastreadtime = 0;
 80843aa:	64c3      	str	r3, [r0, #76]	; 0x4c
  _status = DHTLIB_ERROR_NOTSTARTED;
 80843ac:	62c2      	str	r2, [r0, #44]	; 0x2c
  pinMode(_sigPin, OUTPUT);
 80843ae:	4629      	mov	r1, r5
  _detachISR = false;
 80843b0:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
  _firstreading = true;
 80843b4:	f880 5050 	strb.w	r5, [r0, #80]	; 0x50
  pinMode(_sigPin, OUTPUT);
 80843b8:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
 80843bc:	f003 ff2a 	bl	8088214 <pinMode>
  digitalWrite(_sigPin, HIGH);
 80843c0:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
 80843c4:	4629      	mov	r1, r5
 80843c6:	f003 ff36 	bl	8088236 <digitalWrite>
}
 80843ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  delay(1000); // allow for sensor to settle after startup
 80843ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80843d2:	f002 bcaf 	b.w	8086d34 <delay>
	...

080843d8 <_ZN14PietteTech_DHT7acquireEv>:
int PietteTech_DHT::acquire() {
 80843d8:	b570      	push	{r4, r5, r6, lr}
 80843da:	4604      	mov	r4, r0
 80843dc:	b086      	sub	sp, #24
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80843de:	f000 fb6f 	bl	8084ac0 <HAL_Timer_Get_Milli_Seconds>
  if (!_firstreading && ((currenttime - _lastreadtime) < 2000)) {
 80843e2:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80843e6:	b923      	cbnz	r3, 80843f2 <_ZN14PietteTech_DHT7acquireEv+0x1a>
 80843e8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80843ea:	1ac3      	subs	r3, r0, r3
 80843ec:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80843f0:	d367      	bcc.n	80844c2 <_ZN14PietteTech_DHT7acquireEv+0xea>
  if (_state == STOPPED || _state == ACQUIRED) {
 80843f2:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80843f6:	2b03      	cmp	r3, #3
 80843f8:	d003      	beq.n	8084402 <_ZN14PietteTech_DHT7acquireEv+0x2a>
 80843fa:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80843fe:	2b02      	cmp	r3, #2
 8084400:	d161      	bne.n	80844c6 <_ZN14PietteTech_DHT7acquireEv+0xee>
    _firstreading = false;
 8084402:	2300      	movs	r3, #0
    for (int i = 0; i < 41; i++) _edges[i] = 0;
 8084404:	461a      	mov	r2, r3
    _firstreading = false;
 8084406:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    _lastreadtime = currenttime;
 808440a:	64e0      	str	r0, [r4, #76]	; 0x4c
    _state = RESPONSE;
 808440c:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
    for (int i = 0; i < 41; i++) _edges[i] = 0;
 8084410:	54e2      	strb	r2, [r4, r3]
 8084412:	3301      	adds	r3, #1
 8084414:	2b29      	cmp	r3, #41	; 0x29
 8084416:	d1fb      	bne.n	8084410 <_ZN14PietteTech_DHT7acquireEv+0x38>
    _cnt = 7;
 8084418:	2307      	movs	r3, #7
    for (int i = 0; i < 5; i++) _bits[i] = 0;
 808441a:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
 808441e:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
 8084422:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
 8084426:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
 808442a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    _cnt = 7;
 808442e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    _hum = 0;
 8084432:	2300      	movs	r3, #0
    pinMode(_sigPin, OUTPUT);
 8084434:	2101      	movs	r1, #1
    _hum = 0;
 8084436:	6563      	str	r3, [r4, #84]	; 0x54
    _temp = 0;
 8084438:	65a3      	str	r3, [r4, #88]	; 0x58
    pinMode(_sigPin, OUTPUT);
 808443a:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
    _idx = 0;
 808443e:	f884 2036 	strb.w	r2, [r4, #54]	; 0x36
    _e = &_edges[0];
 8084442:	6424      	str	r4, [r4, #64]	; 0x40
    pinMode(_sigPin, OUTPUT);
 8084444:	f003 fee6 	bl	8088214 <pinMode>
    digitalWrite(_sigPin, LOW);
 8084448:	2100      	movs	r1, #0
 808444a:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
 808444e:	f003 fef2 	bl	8088236 <digitalWrite>
    if (_type == DHT11)
 8084452:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8084454:	2b0b      	cmp	r3, #11
 8084456:	d12f      	bne.n	80844b8 <_ZN14PietteTech_DHT7acquireEv+0xe0>
      delay(18);                  // DHT11 Spec: 18ms min
 8084458:	2012      	movs	r0, #18
 808445a:	f002 fc6b 	bl	8086d34 <delay>
    pinMode(_sigPin, INPUT);        // Note Hi-Z mode with pullup resistor
 808445e:	2100      	movs	r1, #0
 8084460:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
    _detachISR = false;
 8084464:	2500      	movs	r5, #0
    pinMode(_sigPin, INPUT);        // Note Hi-Z mode with pullup resistor
 8084466:	f003 fed5 	bl	8088214 <pinMode>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 808446a:	f000 fb21 	bl	8084ab0 <HAL_Timer_Get_Micro_Seconds>
    _us = micros();
 808446e:	63a0      	str	r0, [r4, #56]	; 0x38
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8084470:	200c      	movs	r0, #12
    _detachISR = false;
 8084472:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
    attachInterrupt(_sigPin, &PietteTech_DHT::_isrCallback, this, FALLING);
 8084476:	f8b4 6044 	ldrh.w	r6, [r4, #68]	; 0x44
    _Function_base() : _M_manager(nullptr) { }
 808447a:	9504      	str	r5, [sp, #16]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808447c:	f7fb fe1d 	bl	80800ba <_Znwj>
 8084480:	b118      	cbz	r0, 808448a <_ZN14PietteTech_DHT7acquireEv+0xb2>
 8084482:	4b12      	ldr	r3, [pc, #72]	; (80844cc <_ZN14PietteTech_DHT7acquireEv+0xf4>)
 8084484:	6084      	str	r4, [r0, #8]
 8084486:	e9c0 3500 	strd	r3, r5, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
 808448a:	4b11      	ldr	r3, [pc, #68]	; (80844d0 <_ZN14PietteTech_DHT7acquireEv+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808448c:	9002      	str	r0, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
 808448e:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 8084490:	4b10      	ldr	r3, [pc, #64]	; (80844d4 <_ZN14PietteTech_DHT7acquireEv+0xfc>)
 8084492:	2202      	movs	r2, #2
 8084494:	9304      	str	r3, [sp, #16]
 8084496:	2300      	movs	r3, #0
 8084498:	4630      	mov	r0, r6
 808449a:	9300      	str	r3, [sp, #0]
 808449c:	a902      	add	r1, sp, #8
 808449e:	f04f 33ff 	mov.w	r3, #4294967295
 80844a2:	f003 fa41 	bl	8087928 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>
      if (_M_manager)
 80844a6:	9b04      	ldr	r3, [sp, #16]
 80844a8:	b11b      	cbz	r3, 80844b2 <_ZN14PietteTech_DHT7acquireEv+0xda>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80844aa:	a902      	add	r1, sp, #8
 80844ac:	2203      	movs	r2, #3
 80844ae:	4608      	mov	r0, r1
 80844b0:	4798      	blx	r3
 80844b2:	2001      	movs	r0, #1
}
 80844b4:	b006      	add	sp, #24
 80844b6:	bd70      	pop	{r4, r5, r6, pc}
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80844b8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80844bc:	f000 faf0 	bl	8084aa0 <HAL_Delay_Microseconds>
 80844c0:	e7cd      	b.n	808445e <_ZN14PietteTech_DHT7acquireEv+0x86>
    return DHTLIB_ACQUIRED;
 80844c2:	2002      	movs	r0, #2
 80844c4:	e7f6      	b.n	80844b4 <_ZN14PietteTech_DHT7acquireEv+0xdc>
    return DHTLIB_ERROR_ACQUIRING;
 80844c6:	f06f 0004 	mvn.w	r0, #4
 80844ca:	e7f3      	b.n	80844b4 <_ZN14PietteTech_DHT7acquireEv+0xdc>
 80844cc:	080841f5 	.word	0x080841f5
 80844d0:	08084335 	.word	0x08084335
 80844d4:	08084353 	.word	0x08084353

080844d8 <_ZN14PietteTech_DHT7convertEv>:

void PietteTech_DHT::convert() {
 80844d8:	b510      	push	{r4, lr}
  // Calculate the temperature and humidity based on the sensor type
  switch (_type) {
 80844da:	6c83      	ldr	r3, [r0, #72]	; 0x48
void PietteTech_DHT::convert() {
 80844dc:	4604      	mov	r4, r0
  switch (_type) {
 80844de:	2b0b      	cmp	r3, #11
 80844e0:	d02a      	beq.n	8084538 <_ZN14PietteTech_DHT7convertEv+0x60>
 80844e2:	3b15      	subs	r3, #21
 80844e4:	2b01      	cmp	r3, #1
 80844e6:	d831      	bhi.n	808454c <_ZN14PietteTech_DHT7convertEv+0x74>
    _hum = _bits[0];
    _temp = _bits[2];
    break;
  case DHT22:
  case DHT21:
    _hum = word(_bits[0], _bits[1]) * 0.1;
 80844e8:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 80844ec:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
  ret_val += (high << 8);
 80844f0:	eb00 2003 	add.w	r0, r0, r3, lsl #8
    _hum = word(_bits[0], _bits[1]) * 0.1;
 80844f4:	b280      	uxth	r0, r0
 80844f6:	f005 fc7f 	bl	8089df8 <__aeabi_i2d>
 80844fa:	a31b      	add	r3, pc, #108	; (adr r3, 8084568 <_ZN14PietteTech_DHT7convertEv+0x90>)
 80844fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084500:	f005 fce4 	bl	8089ecc <__aeabi_dmul>
 8084504:	f005 ffda 	bl	808a4bc <__aeabi_d2f>
    _temp = (_bits[2] & 0x80 ?
 8084508:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    _hum = word(_bits[0], _bits[1]) * 0.1;
 808450c:	6560      	str	r0, [r4, #84]	; 0x54
      -word(_bits[2] & 0x7F, _bits[3]) :
      word(_bits[2], _bits[3])) * 0.1;
 808450e:	061b      	lsls	r3, r3, #24
 8084510:	d520      	bpl.n	8084554 <_ZN14PietteTech_DHT7convertEv+0x7c>
      -word(_bits[2] & 0x7F, _bits[3]) :
 8084512:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8084516:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
  ret_val += (high << 8);
 808451a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      -word(_bits[2] & 0x7F, _bits[3]) :
 808451e:	eb00 2003 	add.w	r0, r0, r3, lsl #8
      word(_bits[2], _bits[3])) * 0.1;
 8084522:	4240      	negs	r0, r0
 8084524:	f005 fc68 	bl	8089df8 <__aeabi_i2d>
 8084528:	a30f      	add	r3, pc, #60	; (adr r3, 8084568 <_ZN14PietteTech_DHT7convertEv+0x90>)
 808452a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808452e:	f005 fccd 	bl	8089ecc <__aeabi_dmul>
 8084532:	f005 ffc3 	bl	808a4bc <__aeabi_d2f>
 8084536:	e008      	b.n	808454a <_ZN14PietteTech_DHT7convertEv+0x72>
    _hum = _bits[0];
 8084538:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
 808453c:	f006 f8c4 	bl	808a6c8 <__aeabi_ui2f>
 8084540:	6560      	str	r0, [r4, #84]	; 0x54
    _temp = _bits[2];
 8084542:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 8084546:	f006 f8bf 	bl	808a6c8 <__aeabi_ui2f>
      word(_bits[2], _bits[3])) * 0.1;
 808454a:	65a0      	str	r0, [r4, #88]	; 0x58
    break;
  }
  _convert = false;
 808454c:	2300      	movs	r3, #0
 808454e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8084552:	bd10      	pop	{r4, pc}
      word(_bits[2], _bits[3])) * 0.1;
 8084554:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8084558:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
  ret_val += (high << 8);
 808455c:	eb00 2003 	add.w	r0, r0, r3, lsl #8
      word(_bits[2], _bits[3])) * 0.1;
 8084560:	b280      	uxth	r0, r0
 8084562:	e7df      	b.n	8084524 <_ZN14PietteTech_DHT7convertEv+0x4c>
 8084564:	f3af 8000 	nop.w
 8084568:	9999999a 	.word	0x9999999a
 808456c:	3fb99999 	.word	0x3fb99999

08084570 <_ZN14PietteTech_DHT9acquiringEv>:

bool PietteTech_DHT::acquiring() {
  if (_state != ACQUIRED && _state != STOPPED)
 8084570:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8084574:	2b02      	cmp	r3, #2
 8084576:	d005      	beq.n	8084584 <_ZN14PietteTech_DHT9acquiringEv+0x14>
 8084578:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
 808457c:	3803      	subs	r0, #3
 808457e:	bf18      	it	ne
 8084580:	2001      	movne	r0, #1
 8084582:	4770      	bx	lr
    return true;
  return false;
 8084584:	2000      	movs	r0, #0
}
 8084586:	4770      	bx	lr

08084588 <_ZN14PietteTech_DHT20detachISRIfRequestedEv>:
}

#if (SYSTEM_VERSION < SYSTEM_VERSION_v121RC3)
// no extra steps required
#else
void PietteTech_DHT::detachISRIfRequested() {
 8084588:	b510      	push	{r4, lr}
  if (_detachISR) {
 808458a:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
void PietteTech_DHT::detachISRIfRequested() {
 808458e:	4604      	mov	r4, r0
  if (_detachISR) {
 8084590:	b133      	cbz	r3, 80845a0 <_ZN14PietteTech_DHT20detachISRIfRequestedEv+0x18>
    detachInterrupt(_sigPin);
 8084592:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
 8084596:	f003 f981 	bl	808789c <_Z15detachInterruptt>
    _detachISR = false;
 808459a:	2300      	movs	r3, #0
 808459c:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  }
}
 80845a0:	bd10      	pop	{r4, pc}

080845a2 <_ZN14PietteTech_DHT9getStatusEv>:
int PietteTech_DHT::getStatus() {
 80845a2:	b510      	push	{r4, lr}
 80845a4:	4604      	mov	r4, r0
  detachISRIfRequested();
 80845a6:	f7ff ffef 	bl	8084588 <_ZN14PietteTech_DHT20detachISRIfRequestedEv>
  return _status;
 80845aa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
}
 80845ac:	bd10      	pop	{r4, pc}
	...

080845b0 <_ZN14PietteTech_DHT10getCelsiusEv>:
float PietteTech_DHT::getCelsius() {
 80845b0:	b510      	push	{r4, lr}
 80845b2:	4604      	mov	r4, r0
  DHT_CHECK_STATE;
 80845b4:	f7ff ffe8 	bl	8084588 <_ZN14PietteTech_DHT20detachISRIfRequestedEv>
 80845b8:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80845bc:	2b03      	cmp	r3, #3
 80845be:	d103      	bne.n	80845c8 <_ZN14PietteTech_DHT10getCelsiusEv+0x18>
 80845c0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80845c2:	f006 f885 	bl	808a6d0 <__aeabi_i2f>
}
 80845c6:	bd10      	pop	{r4, pc}
  DHT_CHECK_STATE;
 80845c8:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80845cc:	2b02      	cmp	r3, #2
 80845ce:	d107      	bne.n	80845e0 <_ZN14PietteTech_DHT10getCelsiusEv+0x30>
 80845d0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80845d4:	b113      	cbz	r3, 80845dc <_ZN14PietteTech_DHT10getCelsiusEv+0x2c>
 80845d6:	4620      	mov	r0, r4
 80845d8:	f7ff ff7e 	bl	80844d8 <_ZN14PietteTech_DHT7convertEv>
  return _temp;
 80845dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80845de:	e7f2      	b.n	80845c6 <_ZN14PietteTech_DHT10getCelsiusEv+0x16>
  DHT_CHECK_STATE;
 80845e0:	4800      	ldr	r0, [pc, #0]	; (80845e4 <_ZN14PietteTech_DHT10getCelsiusEv+0x34>)
 80845e2:	e7f0      	b.n	80845c6 <_ZN14PietteTech_DHT10getCelsiusEv+0x16>
 80845e4:	c0a00000 	.word	0xc0a00000

080845e8 <_ZN14PietteTech_DHT11getHumidityEv>:
float PietteTech_DHT::getHumidity() {
 80845e8:	b510      	push	{r4, lr}
 80845ea:	4604      	mov	r4, r0
  DHT_CHECK_STATE;
 80845ec:	f7ff ffcc 	bl	8084588 <_ZN14PietteTech_DHT20detachISRIfRequestedEv>
 80845f0:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80845f4:	2b03      	cmp	r3, #3
 80845f6:	d103      	bne.n	8084600 <_ZN14PietteTech_DHT11getHumidityEv+0x18>
 80845f8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80845fa:	f006 f869 	bl	808a6d0 <__aeabi_i2f>
}
 80845fe:	bd10      	pop	{r4, pc}
  DHT_CHECK_STATE;
 8084600:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8084604:	2b02      	cmp	r3, #2
 8084606:	d107      	bne.n	8084618 <_ZN14PietteTech_DHT11getHumidityEv+0x30>
 8084608:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 808460c:	b113      	cbz	r3, 8084614 <_ZN14PietteTech_DHT11getHumidityEv+0x2c>
 808460e:	4620      	mov	r0, r4
 8084610:	f7ff ff62 	bl	80844d8 <_ZN14PietteTech_DHT7convertEv>
  return _hum;
 8084614:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8084616:	e7f2      	b.n	80845fe <_ZN14PietteTech_DHT11getHumidityEv+0x16>
  DHT_CHECK_STATE;
 8084618:	4800      	ldr	r0, [pc, #0]	; (808461c <_ZN14PietteTech_DHT11getHumidityEv+0x34>)
 808461a:	e7f0      	b.n	80845fe <_ZN14PietteTech_DHT11getHumidityEv+0x16>
 808461c:	c0a00000 	.word	0xc0a00000

08084620 <_ZN14PietteTech_DHT13getFahrenheitEv>:
float PietteTech_DHT::getFahrenheit() {
 8084620:	b510      	push	{r4, lr}
 8084622:	4604      	mov	r4, r0
  DHT_CHECK_STATE;
 8084624:	f7ff ffb0 	bl	8084588 <_ZN14PietteTech_DHT20detachISRIfRequestedEv>
 8084628:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 808462c:	2b03      	cmp	r3, #3
 808462e:	d103      	bne.n	8084638 <_ZN14PietteTech_DHT13getFahrenheitEv+0x18>
 8084630:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8084632:	f006 f84d 	bl	808a6d0 <__aeabi_i2f>
}
 8084636:	bd10      	pop	{r4, pc}
  DHT_CHECK_STATE;
 8084638:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 808463c:	2b02      	cmp	r3, #2
 808463e:	d111      	bne.n	8084664 <_ZN14PietteTech_DHT13getFahrenheitEv+0x44>
 8084640:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8084644:	b113      	cbz	r3, 808464c <_ZN14PietteTech_DHT13getFahrenheitEv+0x2c>
 8084646:	4620      	mov	r0, r4
 8084648:	f7ff ff46 	bl	80844d8 <_ZN14PietteTech_DHT7convertEv>
  return _temp * 9 / 5 + 32;
 808464c:	4906      	ldr	r1, [pc, #24]	; (8084668 <_ZN14PietteTech_DHT13getFahrenheitEv+0x48>)
 808464e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8084650:	f006 f892 	bl	808a778 <__aeabi_fmul>
 8084654:	4905      	ldr	r1, [pc, #20]	; (808466c <_ZN14PietteTech_DHT13getFahrenheitEv+0x4c>)
 8084656:	f006 f943 	bl	808a8e0 <__aeabi_fdiv>
 808465a:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 808465e:	f005 ff83 	bl	808a568 <__addsf3>
 8084662:	e7e8      	b.n	8084636 <_ZN14PietteTech_DHT13getFahrenheitEv+0x16>
  DHT_CHECK_STATE;
 8084664:	4802      	ldr	r0, [pc, #8]	; (8084670 <_ZN14PietteTech_DHT13getFahrenheitEv+0x50>)
 8084666:	e7e6      	b.n	8084636 <_ZN14PietteTech_DHT13getFahrenheitEv+0x16>
 8084668:	41100000 	.word	0x41100000
 808466c:	40a00000 	.word	0x40a00000
 8084670:	c0a00000 	.word	0xc0a00000
 8084674:	00000000 	.word	0x00000000

08084678 <_ZN14PietteTech_DHT9getKelvinEv>:
float PietteTech_DHT::getKelvin() {
 8084678:	b510      	push	{r4, lr}
 808467a:	4604      	mov	r4, r0
  DHT_CHECK_STATE;
 808467c:	f7ff ff84 	bl	8084588 <_ZN14PietteTech_DHT20detachISRIfRequestedEv>
 8084680:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8084684:	2b03      	cmp	r3, #3
 8084686:	d103      	bne.n	8084690 <_ZN14PietteTech_DHT9getKelvinEv+0x18>
 8084688:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 808468a:	f006 f821 	bl	808a6d0 <__aeabi_i2f>
}
 808468e:	bd10      	pop	{r4, pc}
  DHT_CHECK_STATE;
 8084690:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8084694:	2b02      	cmp	r3, #2
 8084696:	d110      	bne.n	80846ba <_ZN14PietteTech_DHT9getKelvinEv+0x42>
 8084698:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 808469c:	b113      	cbz	r3, 80846a4 <_ZN14PietteTech_DHT9getKelvinEv+0x2c>
 808469e:	4620      	mov	r0, r4
 80846a0:	f7ff ff1a 	bl	80844d8 <_ZN14PietteTech_DHT7convertEv>
  return _temp + 273.15;
 80846a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80846a6:	f005 fbb9 	bl	8089e1c <__aeabi_f2d>
 80846aa:	a305      	add	r3, pc, #20	; (adr r3, 80846c0 <_ZN14PietteTech_DHT9getKelvinEv+0x48>)
 80846ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80846b0:	f005 fa56 	bl	8089b60 <__adddf3>
 80846b4:	f005 ff02 	bl	808a4bc <__aeabi_d2f>
 80846b8:	e7e9      	b.n	808468e <_ZN14PietteTech_DHT9getKelvinEv+0x16>
  DHT_CHECK_STATE;
 80846ba:	4803      	ldr	r0, [pc, #12]	; (80846c8 <_ZN14PietteTech_DHT9getKelvinEv+0x50>)
 80846bc:	e7e7      	b.n	808468e <_ZN14PietteTech_DHT9getKelvinEv+0x16>
 80846be:	bf00      	nop
 80846c0:	66666666 	.word	0x66666666
 80846c4:	40711266 	.word	0x40711266
 80846c8:	c0a00000 	.word	0xc0a00000
 80846cc:	00000000 	.word	0x00000000

080846d0 <_ZN14PietteTech_DHT11getDewPointEv>:
double PietteTech_DHT::getDewPoint() {
 80846d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80846d4:	4604      	mov	r4, r0
  DHT_CHECK_STATE;
 80846d6:	f7ff ff57 	bl	8084588 <_ZN14PietteTech_DHT20detachISRIfRequestedEv>
 80846da:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80846de:	2b03      	cmp	r3, #3
 80846e0:	d104      	bne.n	80846ec <_ZN14PietteTech_DHT11getDewPointEv+0x1c>
 80846e2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80846e4:	f005 fb88 	bl	8089df8 <__aeabi_i2d>
}
 80846e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  DHT_CHECK_STATE;
 80846ec:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80846f0:	2b02      	cmp	r3, #2
 80846f2:	d146      	bne.n	8084782 <_ZN14PietteTech_DHT11getDewPointEv+0xb2>
 80846f4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80846f8:	b113      	cbz	r3, 8084700 <_ZN14PietteTech_DHT11getDewPointEv+0x30>
 80846fa:	4620      	mov	r0, r4
 80846fc:	f7ff feec 	bl	80844d8 <_ZN14PietteTech_DHT7convertEv>
  double temp_ = (a * (double)_temp) / (b + (double)_temp) + log((double)_hum / 100);
 8084700:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8084702:	f005 fb8b 	bl	8089e1c <__aeabi_f2d>
 8084706:	4606      	mov	r6, r0
 8084708:	6d60      	ldr	r0, [r4, #84]	; 0x54
 808470a:	460f      	mov	r7, r1
 808470c:	f005 fb86 	bl	8089e1c <__aeabi_f2d>
 8084710:	2200      	movs	r2, #0
 8084712:	4b21      	ldr	r3, [pc, #132]	; (8084798 <_ZN14PietteTech_DHT11getDewPointEv+0xc8>)
 8084714:	f005 fd04 	bl	808a120 <__aeabi_ddiv>
 8084718:	f003 fed2 	bl	80884c0 <log>
 808471c:	a31a      	add	r3, pc, #104	; (adr r3, 8084788 <_ZN14PietteTech_DHT11getDewPointEv+0xb8>)
 808471e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084722:	4604      	mov	r4, r0
 8084724:	460d      	mov	r5, r1
 8084726:	4630      	mov	r0, r6
 8084728:	4639      	mov	r1, r7
 808472a:	f005 fbcf 	bl	8089ecc <__aeabi_dmul>
 808472e:	a318      	add	r3, pc, #96	; (adr r3, 8084790 <_ZN14PietteTech_DHT11getDewPointEv+0xc0>)
 8084730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084734:	4680      	mov	r8, r0
 8084736:	4689      	mov	r9, r1
 8084738:	4630      	mov	r0, r6
 808473a:	4639      	mov	r1, r7
 808473c:	f005 fa10 	bl	8089b60 <__adddf3>
 8084740:	4602      	mov	r2, r0
 8084742:	460b      	mov	r3, r1
 8084744:	4640      	mov	r0, r8
 8084746:	4649      	mov	r1, r9
 8084748:	f005 fcea 	bl	808a120 <__aeabi_ddiv>
 808474c:	4622      	mov	r2, r4
 808474e:	462b      	mov	r3, r5
 8084750:	f005 fa06 	bl	8089b60 <__adddf3>
  double Td = (b * temp_) / (a - temp_);
 8084754:	a30e      	add	r3, pc, #56	; (adr r3, 8084790 <_ZN14PietteTech_DHT11getDewPointEv+0xc0>)
 8084756:	e9d3 2300 	ldrd	r2, r3, [r3]
  double temp_ = (a * (double)_temp) / (b + (double)_temp) + log((double)_hum / 100);
 808475a:	4606      	mov	r6, r0
 808475c:	460f      	mov	r7, r1
  double Td = (b * temp_) / (a - temp_);
 808475e:	f005 fbb5 	bl	8089ecc <__aeabi_dmul>
 8084762:	4632      	mov	r2, r6
 8084764:	4604      	mov	r4, r0
 8084766:	460d      	mov	r5, r1
 8084768:	a107      	add	r1, pc, #28	; (adr r1, 8084788 <_ZN14PietteTech_DHT11getDewPointEv+0xb8>)
 808476a:	e9d1 0100 	ldrd	r0, r1, [r1]
 808476e:	463b      	mov	r3, r7
 8084770:	f005 f9f4 	bl	8089b5c <__aeabi_dsub>
 8084774:	4602      	mov	r2, r0
 8084776:	460b      	mov	r3, r1
 8084778:	4620      	mov	r0, r4
 808477a:	4629      	mov	r1, r5
 808477c:	f005 fcd0 	bl	808a120 <__aeabi_ddiv>
  return Td;
 8084780:	e7b2      	b.n	80846e8 <_ZN14PietteTech_DHT11getDewPointEv+0x18>
  DHT_CHECK_STATE;
 8084782:	2000      	movs	r0, #0
 8084784:	4905      	ldr	r1, [pc, #20]	; (808479c <_ZN14PietteTech_DHT11getDewPointEv+0xcc>)
 8084786:	e7af      	b.n	80846e8 <_ZN14PietteTech_DHT11getDewPointEv+0x18>
 8084788:	4189374c 	.word	0x4189374c
 808478c:	40314560 	.word	0x40314560
 8084790:	66666666 	.word	0x66666666
 8084794:	406db666 	.word	0x406db666
 8084798:	40590000 	.word	0x40590000
 808479c:	c0140000 	.word	0xc0140000

080847a0 <_ZN14PietteTech_DHT15getDewPointSlowEv>:
double PietteTech_DHT::getDewPointSlow() {
 80847a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80847a4:	4604      	mov	r4, r0
  DHT_CHECK_STATE;
 80847a6:	f7ff feef 	bl	8084588 <_ZN14PietteTech_DHT20detachISRIfRequestedEv>
 80847aa:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80847ae:	2b03      	cmp	r3, #3
 80847b0:	d104      	bne.n	80847bc <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1c>
 80847b2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80847b4:	f005 fb20 	bl	8089df8 <__aeabi_i2d>
}
 80847b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  DHT_CHECK_STATE;
 80847bc:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80847c0:	2b02      	cmp	r3, #2
 80847c2:	f040 80a9 	bne.w	8084918 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x178>
 80847c6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80847ca:	b113      	cbz	r3, 80847d2 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x32>
 80847cc:	4620      	mov	r0, r4
 80847ce:	f7ff fe83 	bl	80844d8 <_ZN14PietteTech_DHT7convertEv>
  double a0 = (double) 373.15 / (273.15 + (double)_temp);
 80847d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80847d4:	f005 fb22 	bl	8089e1c <__aeabi_f2d>
 80847d8:	a351      	add	r3, pc, #324	; (adr r3, 8084920 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x180>)
 80847da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80847de:	f005 f9bf 	bl	8089b60 <__adddf3>
 80847e2:	4602      	mov	r2, r0
 80847e4:	460b      	mov	r3, r1
 80847e6:	a150      	add	r1, pc, #320	; (adr r1, 8084928 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x188>)
 80847e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80847ec:	f005 fc98 	bl	808a120 <__aeabi_ddiv>
  double SUM = (double)-7.90298 * (a0 - 1.0);
 80847f0:	2200      	movs	r2, #0
 80847f2:	4b63      	ldr	r3, [pc, #396]	; (8084980 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e0>)
  double a0 = (double) 373.15 / (273.15 + (double)_temp);
 80847f4:	4606      	mov	r6, r0
 80847f6:	460f      	mov	r7, r1
  double SUM = (double)-7.90298 * (a0 - 1.0);
 80847f8:	f005 f9b0 	bl	8089b5c <__aeabi_dsub>
 80847fc:	a34c      	add	r3, pc, #304	; (adr r3, 8084930 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x190>)
 80847fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084802:	4682      	mov	sl, r0
 8084804:	468b      	mov	fp, r1
 8084806:	f005 fb61 	bl	8089ecc <__aeabi_dmul>
 808480a:	4680      	mov	r8, r0
 808480c:	4689      	mov	r9, r1
  SUM += 5.02808 * log10(a0);
 808480e:	4630      	mov	r0, r6
 8084810:	4639      	mov	r1, r7
 8084812:	f003 fe8f 	bl	8088534 <log10>
 8084816:	a348      	add	r3, pc, #288	; (adr r3, 8084938 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x198>)
 8084818:	e9d3 2300 	ldrd	r2, r3, [r3]
 808481c:	f005 fb56 	bl	8089ecc <__aeabi_dmul>
 8084820:	4642      	mov	r2, r8
 8084822:	464b      	mov	r3, r9
 8084824:	f005 f99c 	bl	8089b60 <__adddf3>
  SUM += -1.3816e-7 * (pow(10, (11.344*(1 - 1 / a0))) - 1);
 8084828:	4632      	mov	r2, r6
  SUM += 5.02808 * log10(a0);
 808482a:	4680      	mov	r8, r0
 808482c:	4689      	mov	r9, r1
  SUM += -1.3816e-7 * (pow(10, (11.344*(1 - 1 / a0))) - 1);
 808482e:	463b      	mov	r3, r7
 8084830:	2000      	movs	r0, #0
 8084832:	4953      	ldr	r1, [pc, #332]	; (8084980 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e0>)
 8084834:	f005 fc74 	bl	808a120 <__aeabi_ddiv>
 8084838:	4602      	mov	r2, r0
 808483a:	460b      	mov	r3, r1
 808483c:	2000      	movs	r0, #0
 808483e:	4950      	ldr	r1, [pc, #320]	; (8084980 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e0>)
 8084840:	f005 f98c 	bl	8089b5c <__aeabi_dsub>
 8084844:	a33e      	add	r3, pc, #248	; (adr r3, 8084940 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1a0>)
 8084846:	e9d3 2300 	ldrd	r2, r3, [r3]
 808484a:	f005 fb3f 	bl	8089ecc <__aeabi_dmul>
 808484e:	4602      	mov	r2, r0
 8084850:	460b      	mov	r3, r1
      return pow(__type(__x), __type(__y));
 8084852:	2000      	movs	r0, #0
 8084854:	494b      	ldr	r1, [pc, #300]	; (8084984 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e4>)
 8084856:	f003 fea7 	bl	80885a8 <pow>
 808485a:	2200      	movs	r2, #0
 808485c:	4b48      	ldr	r3, [pc, #288]	; (8084980 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e0>)
 808485e:	f005 f97d 	bl	8089b5c <__aeabi_dsub>
 8084862:	a339      	add	r3, pc, #228	; (adr r3, 8084948 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1a8>)
 8084864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084868:	f005 fb30 	bl	8089ecc <__aeabi_dmul>
 808486c:	4642      	mov	r2, r8
 808486e:	464b      	mov	r3, r9
 8084870:	f005 f976 	bl	8089b60 <__adddf3>
  SUM += 8.1328e-3 * (pow(10, (-3.49149*(a0 - 1))) - 1);
 8084874:	a336      	add	r3, pc, #216	; (adr r3, 8084950 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1b0>)
 8084876:	e9d3 2300 	ldrd	r2, r3, [r3]
  SUM += -1.3816e-7 * (pow(10, (11.344*(1 - 1 / a0))) - 1);
 808487a:	4606      	mov	r6, r0
 808487c:	460f      	mov	r7, r1
  SUM += 8.1328e-3 * (pow(10, (-3.49149*(a0 - 1))) - 1);
 808487e:	4650      	mov	r0, sl
 8084880:	4659      	mov	r1, fp
 8084882:	f005 fb23 	bl	8089ecc <__aeabi_dmul>
 8084886:	4602      	mov	r2, r0
 8084888:	460b      	mov	r3, r1
 808488a:	2000      	movs	r0, #0
 808488c:	493d      	ldr	r1, [pc, #244]	; (8084984 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e4>)
 808488e:	f003 fe8b 	bl	80885a8 <pow>
 8084892:	2200      	movs	r2, #0
 8084894:	4b3a      	ldr	r3, [pc, #232]	; (8084980 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e0>)
 8084896:	f005 f961 	bl	8089b5c <__aeabi_dsub>
 808489a:	a32f      	add	r3, pc, #188	; (adr r3, 8084958 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1b8>)
 808489c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80848a0:	f005 fb14 	bl	8089ecc <__aeabi_dmul>
 80848a4:	4632      	mov	r2, r6
 80848a6:	463b      	mov	r3, r7
 80848a8:	f005 f95a 	bl	8089b60 <__adddf3>
  SUM += log10(1013.246);
 80848ac:	a32c      	add	r3, pc, #176	; (adr r3, 8084960 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1c0>)
 80848ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80848b2:	f005 f955 	bl	8089b60 <__adddf3>
  double VP = pow(10, SUM - 3) * (double)_hum;
 80848b6:	2200      	movs	r2, #0
 80848b8:	4b33      	ldr	r3, [pc, #204]	; (8084988 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e8>)
 80848ba:	f005 f94f 	bl	8089b5c <__aeabi_dsub>
 80848be:	4602      	mov	r2, r0
 80848c0:	460b      	mov	r3, r1
 80848c2:	2000      	movs	r0, #0
 80848c4:	492f      	ldr	r1, [pc, #188]	; (8084984 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e4>)
 80848c6:	f003 fe6f 	bl	80885a8 <pow>
 80848ca:	4606      	mov	r6, r0
 80848cc:	460f      	mov	r7, r1
 80848ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80848d0:	f005 faa4 	bl	8089e1c <__aeabi_f2d>
 80848d4:	4632      	mov	r2, r6
 80848d6:	463b      	mov	r3, r7
 80848d8:	f005 faf8 	bl	8089ecc <__aeabi_dmul>
  double T = log(VP / 0.61078); // temp var
 80848dc:	a322      	add	r3, pc, #136	; (adr r3, 8084968 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1c8>)
 80848de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80848e2:	f005 fc1d 	bl	808a120 <__aeabi_ddiv>
 80848e6:	f003 fdeb 	bl	80884c0 <log>
  return (241.88 * T) / (17.558 - T);
 80848ea:	a321      	add	r3, pc, #132	; (adr r3, 8084970 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1d0>)
 80848ec:	e9d3 2300 	ldrd	r2, r3, [r3]
  double T = log(VP / 0.61078); // temp var
 80848f0:	4606      	mov	r6, r0
 80848f2:	460f      	mov	r7, r1
  return (241.88 * T) / (17.558 - T);
 80848f4:	f005 faea 	bl	8089ecc <__aeabi_dmul>
 80848f8:	4632      	mov	r2, r6
 80848fa:	4604      	mov	r4, r0
 80848fc:	460d      	mov	r5, r1
 80848fe:	a11e      	add	r1, pc, #120	; (adr r1, 8084978 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1d8>)
 8084900:	e9d1 0100 	ldrd	r0, r1, [r1]
 8084904:	463b      	mov	r3, r7
 8084906:	f005 f929 	bl	8089b5c <__aeabi_dsub>
 808490a:	4602      	mov	r2, r0
 808490c:	460b      	mov	r3, r1
 808490e:	4620      	mov	r0, r4
 8084910:	4629      	mov	r1, r5
 8084912:	f005 fc05 	bl	808a120 <__aeabi_ddiv>
 8084916:	e74f      	b.n	80847b8 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x18>
  DHT_CHECK_STATE;
 8084918:	2000      	movs	r0, #0
 808491a:	491c      	ldr	r1, [pc, #112]	; (808498c <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1ec>)
 808491c:	e74c      	b.n	80847b8 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x18>
 808491e:	bf00      	nop
 8084920:	66666666 	.word	0x66666666
 8084924:	40711266 	.word	0x40711266
 8084928:	66666666 	.word	0x66666666
 808492c:	40775266 	.word	0x40775266
 8084930:	ca03c4b1 	.word	0xca03c4b1
 8084934:	c01f9ca6 	.word	0xc01f9ca6
 8084938:	00e6afcd 	.word	0x00e6afcd
 808493c:	40141cc1 	.word	0x40141cc1
 8084940:	c49ba5e3 	.word	0xc49ba5e3
 8084944:	4026b020 	.word	0x4026b020
 8084948:	36423db1 	.word	0x36423db1
 808494c:	be828b24 	.word	0xbe828b24
 8084950:	4f227d03 	.word	0x4f227d03
 8084954:	c00bee92 	.word	0xc00bee92
 8084958:	f0330363 	.word	0xf0330363
 808495c:	3f80a7ed 	.word	0x3f80a7ed
 8084960:	409e541b 	.word	0x409e541b
 8084964:	40080bb4 	.word	0x40080bb4
 8084968:	7fa1a0cf 	.word	0x7fa1a0cf
 808496c:	3fe38b82 	.word	0x3fe38b82
 8084970:	f5c28f5c 	.word	0xf5c28f5c
 8084974:	406e3c28 	.word	0x406e3c28
 8084978:	16872b02 	.word	0x16872b02
 808497c:	40318ed9 	.word	0x40318ed9
 8084980:	3ff00000 	.word	0x3ff00000
 8084984:	40240000 	.word	0x40240000
 8084988:	40080000 	.word	0x40080000
 808498c:	c0140000 	.word	0xc0140000

08084990 <_ZN14PietteTech_DHT14acquireAndWaitEm>:
int PietteTech_DHT::acquireAndWait(uint32_t timeout) {
 8084990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8084992:	460d      	mov	r5, r1
 8084994:	4604      	mov	r4, r0
  acquire();
 8084996:	f7ff fd1f 	bl	80843d8 <_ZN14PietteTech_DHT7acquireEv>
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 808499a:	f000 f891 	bl	8084ac0 <HAL_Timer_Get_Milli_Seconds>
 808499e:	4606      	mov	r6, r0
 80849a0:	4f0e      	ldr	r7, [pc, #56]	; (80849dc <_ZN14PietteTech_DHT14acquireAndWaitEm+0x4c>)
  while (acquiring() && (timeout == 0 || ((millis() - start) < timeout))) Particle.process();
 80849a2:	4620      	mov	r0, r4
 80849a4:	f7ff fde4 	bl	8084570 <_ZN14PietteTech_DHT9acquiringEv>
 80849a8:	b158      	cbz	r0, 80849c2 <_ZN14PietteTech_DHT14acquireAndWaitEm+0x32>
 80849aa:	b92d      	cbnz	r5, 80849b8 <_ZN14PietteTech_DHT14acquireAndWaitEm+0x28>
		return HAL_Timer_Get_Milli_Seconds();
 80849ac:	f000 f888 	bl	8084ac0 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
 80849b0:	6038      	str	r0, [r7, #0]
    		spark_process();
 80849b2:	f000 fb75 	bl	80850a0 <spark_process>
    }
 80849b6:	e7f4      	b.n	80849a2 <_ZN14PietteTech_DHT14acquireAndWaitEm+0x12>
 80849b8:	f000 f882 	bl	8084ac0 <HAL_Timer_Get_Milli_Seconds>
 80849bc:	1b83      	subs	r3, r0, r6
 80849be:	42ab      	cmp	r3, r5
 80849c0:	d3f4      	bcc.n	80849ac <_ZN14PietteTech_DHT14acquireAndWaitEm+0x1c>
  if (acquiring())
 80849c2:	4620      	mov	r0, r4
 80849c4:	f7ff fdd4 	bl	8084570 <_ZN14PietteTech_DHT9acquiringEv>
 80849c8:	b110      	cbz	r0, 80849d0 <_ZN14PietteTech_DHT14acquireAndWaitEm+0x40>
    _status = DHTLIB_ERROR_RESPONSE_TIMEOUT;
 80849ca:	f06f 0302 	mvn.w	r3, #2
 80849ce:	62e3      	str	r3, [r4, #44]	; 0x2c
  detachISRIfRequested();
 80849d0:	4620      	mov	r0, r4
 80849d2:	f7ff fdd9 	bl	8084588 <_ZN14PietteTech_DHT20detachISRIfRequestedEv>
  return _status;
 80849d6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
}
 80849d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80849da:	bf00      	nop
 80849dc:	200009a8 	.word	0x200009a8

080849e0 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80849e0:	b508      	push	{r3, lr}
 80849e2:	4b02      	ldr	r3, [pc, #8]	; (80849ec <HAL_Validate_Pin_Function+0xc>)
 80849e4:	681b      	ldr	r3, [r3, #0]
 80849e6:	685b      	ldr	r3, [r3, #4]
 80849e8:	9301      	str	r3, [sp, #4]
 80849ea:	bd08      	pop	{r3, pc}
 80849ec:	080401b0 	.word	0x080401b0

080849f0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80849f0:	b508      	push	{r3, lr}
 80849f2:	4b02      	ldr	r3, [pc, #8]	; (80849fc <HAL_Pin_Mode+0xc>)
 80849f4:	681b      	ldr	r3, [r3, #0]
 80849f6:	689b      	ldr	r3, [r3, #8]
 80849f8:	9301      	str	r3, [sp, #4]
 80849fa:	bd08      	pop	{r3, pc}
 80849fc:	080401b0 	.word	0x080401b0

08084a00 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8084a00:	b508      	push	{r3, lr}
 8084a02:	4b02      	ldr	r3, [pc, #8]	; (8084a0c <HAL_Get_Pin_Mode+0xc>)
 8084a04:	681b      	ldr	r3, [r3, #0]
 8084a06:	68db      	ldr	r3, [r3, #12]
 8084a08:	9301      	str	r3, [sp, #4]
 8084a0a:	bd08      	pop	{r3, pc}
 8084a0c:	080401b0 	.word	0x080401b0

08084a10 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8084a10:	b508      	push	{r3, lr}
 8084a12:	4b02      	ldr	r3, [pc, #8]	; (8084a1c <HAL_GPIO_Write+0xc>)
 8084a14:	681b      	ldr	r3, [r3, #0]
 8084a16:	691b      	ldr	r3, [r3, #16]
 8084a18:	9301      	str	r3, [sp, #4]
 8084a1a:	bd08      	pop	{r3, pc}
 8084a1c:	080401b0 	.word	0x080401b0

08084a20 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 8084a20:	b508      	push	{r3, lr}
 8084a22:	4b02      	ldr	r3, [pc, #8]	; (8084a2c <HAL_GPIO_Read+0xc>)
 8084a24:	681b      	ldr	r3, [r3, #0]
 8084a26:	695b      	ldr	r3, [r3, #20]
 8084a28:	9301      	str	r3, [sp, #4]
 8084a2a:	bd08      	pop	{r3, pc}
 8084a2c:	080401b0 	.word	0x080401b0

08084a30 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 8084a30:	b508      	push	{r3, lr}
 8084a32:	4b02      	ldr	r3, [pc, #8]	; (8084a3c <HAL_Interrupts_Attach+0xc>)
 8084a34:	681b      	ldr	r3, [r3, #0]
 8084a36:	699b      	ldr	r3, [r3, #24]
 8084a38:	9301      	str	r3, [sp, #4]
 8084a3a:	bd08      	pop	{r3, pc}
 8084a3c:	080401b0 	.word	0x080401b0

08084a40 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
 8084a40:	b508      	push	{r3, lr}
 8084a42:	4b02      	ldr	r3, [pc, #8]	; (8084a4c <HAL_Interrupts_Detach+0xc>)
 8084a44:	681b      	ldr	r3, [r3, #0]
 8084a46:	69db      	ldr	r3, [r3, #28]
 8084a48:	9301      	str	r3, [sp, #4]
 8084a4a:	bd08      	pop	{r3, pc}
 8084a4c:	080401b0 	.word	0x080401b0

08084a50 <HAL_DAC_Write>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
 8084a50:	b508      	push	{r3, lr}
 8084a52:	4b02      	ldr	r3, [pc, #8]	; (8084a5c <HAL_DAC_Write+0xc>)
 8084a54:	681b      	ldr	r3, [r3, #0]
 8084a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8084a58:	9301      	str	r3, [sp, #4]
 8084a5a:	bd08      	pop	{r3, pc}
 8084a5c:	080401b0 	.word	0x080401b0

08084a60 <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 8084a60:	b508      	push	{r3, lr}
 8084a62:	4b02      	ldr	r3, [pc, #8]	; (8084a6c <hal_adc_read+0xc>)
 8084a64:	681b      	ldr	r3, [r3, #0]
 8084a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8084a68:	9301      	str	r3, [sp, #4]
 8084a6a:	bd08      	pop	{r3, pc}
 8084a6c:	080401b0 	.word	0x080401b0

08084a70 <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
 8084a70:	b508      	push	{r3, lr}
 8084a72:	4b02      	ldr	r3, [pc, #8]	; (8084a7c <hal_pwm_write_ext+0xc>)
 8084a74:	681b      	ldr	r3, [r3, #0]
 8084a76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8084a78:	9301      	str	r3, [sp, #4]
 8084a7a:	bd08      	pop	{r3, pc}
 8084a7c:	080401b0 	.word	0x080401b0

08084a80 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8084a80:	b508      	push	{r3, lr}
 8084a82:	4b02      	ldr	r3, [pc, #8]	; (8084a8c <HAL_RNG_GetRandomNumber+0xc>)
 8084a84:	681b      	ldr	r3, [r3, #0]
 8084a86:	685b      	ldr	r3, [r3, #4]
 8084a88:	9301      	str	r3, [sp, #4]
 8084a8a:	bd08      	pop	{r3, pc}
 8084a8c:	0804019c 	.word	0x0804019c

08084a90 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
 8084a90:	b508      	push	{r3, lr}
 8084a92:	4b02      	ldr	r3, [pc, #8]	; (8084a9c <HAL_Delay_Milliseconds+0xc>)
 8084a94:	681b      	ldr	r3, [r3, #0]
 8084a96:	689b      	ldr	r3, [r3, #8]
 8084a98:	9301      	str	r3, [sp, #4]
 8084a9a:	bd08      	pop	{r3, pc}
 8084a9c:	0804019c 	.word	0x0804019c

08084aa0 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 8084aa0:	b508      	push	{r3, lr}
 8084aa2:	4b02      	ldr	r3, [pc, #8]	; (8084aac <HAL_Delay_Microseconds+0xc>)
 8084aa4:	681b      	ldr	r3, [r3, #0]
 8084aa6:	68db      	ldr	r3, [r3, #12]
 8084aa8:	9301      	str	r3, [sp, #4]
 8084aaa:	bd08      	pop	{r3, pc}
 8084aac:	0804019c 	.word	0x0804019c

08084ab0 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 8084ab0:	b508      	push	{r3, lr}
 8084ab2:	4b02      	ldr	r3, [pc, #8]	; (8084abc <HAL_Timer_Get_Micro_Seconds+0xc>)
 8084ab4:	681b      	ldr	r3, [r3, #0]
 8084ab6:	691b      	ldr	r3, [r3, #16]
 8084ab8:	9301      	str	r3, [sp, #4]
 8084aba:	bd08      	pop	{r3, pc}
 8084abc:	0804019c 	.word	0x0804019c

08084ac0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8084ac0:	b508      	push	{r3, lr}
 8084ac2:	4b02      	ldr	r3, [pc, #8]	; (8084acc <HAL_Timer_Get_Milli_Seconds+0xc>)
 8084ac4:	681b      	ldr	r3, [r3, #0]
 8084ac6:	695b      	ldr	r3, [r3, #20]
 8084ac8:	9301      	str	r3, [sp, #4]
 8084aca:	bd08      	pop	{r3, pc}
 8084acc:	0804019c 	.word	0x0804019c

08084ad0 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 8084ad0:	b508      	push	{r3, lr}
 8084ad2:	4b02      	ldr	r3, [pc, #8]	; (8084adc <hal_rtc_time_is_valid+0xc>)
 8084ad4:	681b      	ldr	r3, [r3, #0]
 8084ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8084ad8:	9301      	str	r3, [sp, #4]
 8084ada:	bd08      	pop	{r3, pc}
 8084adc:	0804019c 	.word	0x0804019c

08084ae0 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 8084ae0:	b508      	push	{r3, lr}
 8084ae2:	4b02      	ldr	r3, [pc, #8]	; (8084aec <hal_rtc_get_time+0xc>)
 8084ae4:	681b      	ldr	r3, [r3, #0]
 8084ae6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8084ae8:	9301      	str	r3, [sp, #4]
 8084aea:	bd08      	pop	{r3, pc}
 8084aec:	0804019c 	.word	0x0804019c

08084af0 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
 8084af0:	b508      	push	{r3, lr}
 8084af2:	4b02      	ldr	r3, [pc, #8]	; (8084afc <HAL_Feature_Set+0xc>)
 8084af4:	681b      	ldr	r3, [r3, #0]
 8084af6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8084af8:	9301      	str	r3, [sp, #4]
 8084afa:	bd08      	pop	{r3, pc}
 8084afc:	080401b8 	.word	0x080401b8

08084b00 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 8084b00:	b508      	push	{r3, lr}
 8084b02:	4b02      	ldr	r3, [pc, #8]	; (8084b0c <HAL_Core_Get_Last_Reset_Info+0xc>)
 8084b04:	681b      	ldr	r3, [r3, #0]
 8084b06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8084b08:	9301      	str	r3, [sp, #4]
 8084b0a:	bd08      	pop	{r3, pc}
 8084b0c:	080401b8 	.word	0x080401b8

08084b10 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
 8084b10:	b508      	push	{r3, lr}
 8084b12:	4b02      	ldr	r3, [pc, #8]	; (8084b1c <os_thread_create+0xc>)
 8084b14:	681b      	ldr	r3, [r3, #0]
 8084b16:	685b      	ldr	r3, [r3, #4]
 8084b18:	9301      	str	r3, [sp, #4]
 8084b1a:	bd08      	pop	{r3, pc}
 8084b1c:	080401d0 	.word	0x080401d0

08084b20 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
 8084b20:	b508      	push	{r3, lr}
 8084b22:	4b02      	ldr	r3, [pc, #8]	; (8084b2c <os_thread_is_current+0xc>)
 8084b24:	681b      	ldr	r3, [r3, #0]
 8084b26:	689b      	ldr	r3, [r3, #8]
 8084b28:	9301      	str	r3, [sp, #4]
 8084b2a:	bd08      	pop	{r3, pc}
 8084b2c:	080401d0 	.word	0x080401d0

08084b30 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
 8084b30:	b508      	push	{r3, lr}
 8084b32:	4b02      	ldr	r3, [pc, #8]	; (8084b3c <os_thread_yield+0xc>)
 8084b34:	681b      	ldr	r3, [r3, #0]
 8084b36:	68db      	ldr	r3, [r3, #12]
 8084b38:	9301      	str	r3, [sp, #4]
 8084b3a:	bd08      	pop	{r3, pc}
 8084b3c:	080401d0 	.word	0x080401d0

08084b40 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
 8084b40:	b508      	push	{r3, lr}
 8084b42:	4b02      	ldr	r3, [pc, #8]	; (8084b4c <os_thread_join+0xc>)
 8084b44:	681b      	ldr	r3, [r3, #0]
 8084b46:	691b      	ldr	r3, [r3, #16]
 8084b48:	9301      	str	r3, [sp, #4]
 8084b4a:	bd08      	pop	{r3, pc}
 8084b4c:	080401d0 	.word	0x080401d0

08084b50 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
 8084b50:	b508      	push	{r3, lr}
 8084b52:	4b02      	ldr	r3, [pc, #8]	; (8084b5c <os_thread_cleanup+0xc>)
 8084b54:	681b      	ldr	r3, [r3, #0]
 8084b56:	695b      	ldr	r3, [r3, #20]
 8084b58:	9301      	str	r3, [sp, #4]
 8084b5a:	bd08      	pop	{r3, pc}
 8084b5c:	080401d0 	.word	0x080401d0

08084b60 <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
 8084b60:	b508      	push	{r3, lr}
 8084b62:	4b02      	ldr	r3, [pc, #8]	; (8084b6c <os_thread_scheduling+0xc>)
 8084b64:	681b      	ldr	r3, [r3, #0]
 8084b66:	69db      	ldr	r3, [r3, #28]
 8084b68:	9301      	str	r3, [sp, #4]
 8084b6a:	bd08      	pop	{r3, pc}
 8084b6c:	080401d0 	.word	0x080401d0

08084b70 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
 8084b70:	b508      	push	{r3, lr}
 8084b72:	4b02      	ldr	r3, [pc, #8]	; (8084b7c <os_timer_create+0xc>)
 8084b74:	681b      	ldr	r3, [r3, #0]
 8084b76:	6a1b      	ldr	r3, [r3, #32]
 8084b78:	9301      	str	r3, [sp, #4]
 8084b7a:	bd08      	pop	{r3, pc}
 8084b7c:	080401d0 	.word	0x080401d0

08084b80 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
 8084b80:	b508      	push	{r3, lr}
 8084b82:	4b02      	ldr	r3, [pc, #8]	; (8084b8c <os_timer_destroy+0xc>)
 8084b84:	681b      	ldr	r3, [r3, #0]
 8084b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8084b88:	9301      	str	r3, [sp, #4]
 8084b8a:	bd08      	pop	{r3, pc}
 8084b8c:	080401d0 	.word	0x080401d0

08084b90 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
 8084b90:	b508      	push	{r3, lr}
 8084b92:	4b02      	ldr	r3, [pc, #8]	; (8084b9c <os_timer_get_id+0xc>)
 8084b94:	681b      	ldr	r3, [r3, #0]
 8084b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8084b98:	9301      	str	r3, [sp, #4]
 8084b9a:	bd08      	pop	{r3, pc}
 8084b9c:	080401d0 	.word	0x080401d0

08084ba0 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
 8084ba0:	b508      	push	{r3, lr}
 8084ba2:	4b02      	ldr	r3, [pc, #8]	; (8084bac <os_timer_change+0xc>)
 8084ba4:	681b      	ldr	r3, [r3, #0]
 8084ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8084ba8:	9301      	str	r3, [sp, #4]
 8084baa:	bd08      	pop	{r3, pc}
 8084bac:	080401d0 	.word	0x080401d0

08084bb0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 8084bb0:	b508      	push	{r3, lr}
 8084bb2:	4b02      	ldr	r3, [pc, #8]	; (8084bbc <os_mutex_recursive_create+0xc>)
 8084bb4:	681b      	ldr	r3, [r3, #0]
 8084bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8084bb8:	9301      	str	r3, [sp, #4]
 8084bba:	bd08      	pop	{r3, pc}
 8084bbc:	080401d0 	.word	0x080401d0

08084bc0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 8084bc0:	b508      	push	{r3, lr}
 8084bc2:	4b02      	ldr	r3, [pc, #8]	; (8084bcc <os_mutex_recursive_destroy+0xc>)
 8084bc4:	681b      	ldr	r3, [r3, #0]
 8084bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8084bc8:	9301      	str	r3, [sp, #4]
 8084bca:	bd08      	pop	{r3, pc}
 8084bcc:	080401d0 	.word	0x080401d0

08084bd0 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 8084bd0:	b508      	push	{r3, lr}
 8084bd2:	4b02      	ldr	r3, [pc, #8]	; (8084bdc <os_mutex_recursive_lock+0xc>)
 8084bd4:	681b      	ldr	r3, [r3, #0]
 8084bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8084bd8:	9301      	str	r3, [sp, #4]
 8084bda:	bd08      	pop	{r3, pc}
 8084bdc:	080401d0 	.word	0x080401d0

08084be0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 8084be0:	b508      	push	{r3, lr}
 8084be2:	4b02      	ldr	r3, [pc, #8]	; (8084bec <os_mutex_recursive_unlock+0xc>)
 8084be4:	681b      	ldr	r3, [r3, #0]
 8084be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8084be8:	9301      	str	r3, [sp, #4]
 8084bea:	bd08      	pop	{r3, pc}
 8084bec:	080401d0 	.word	0x080401d0

08084bf0 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
 8084bf0:	b508      	push	{r3, lr}
 8084bf2:	4b02      	ldr	r3, [pc, #8]	; (8084bfc <os_thread_exit+0xc>)
 8084bf4:	681b      	ldr	r3, [r3, #0]
 8084bf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8084bf8:	9301      	str	r3, [sp, #4]
 8084bfa:	bd08      	pop	{r3, pc}
 8084bfc:	080401d0 	.word	0x080401d0

08084c00 <os_timer_set_id>:

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
 8084c00:	b508      	push	{r3, lr}
 8084c02:	4b02      	ldr	r3, [pc, #8]	; (8084c0c <os_timer_set_id+0xc>)
 8084c04:	681b      	ldr	r3, [r3, #0]
 8084c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8084c08:	9301      	str	r3, [sp, #4]
 8084c0a:	bd08      	pop	{r3, pc}
 8084c0c:	080401d0 	.word	0x080401d0

08084c10 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 8084c10:	b508      	push	{r3, lr}
 8084c12:	4b02      	ldr	r3, [pc, #8]	; (8084c1c <hal_usart_init+0xc>)
 8084c14:	681b      	ldr	r3, [r3, #0]
 8084c16:	699b      	ldr	r3, [r3, #24]
 8084c18:	9301      	str	r3, [sp, #4]
 8084c1a:	bd08      	pop	{r3, pc}
 8084c1c:	080401c4 	.word	0x080401c4

08084c20 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 8084c20:	b508      	push	{r3, lr}
 8084c22:	4b02      	ldr	r3, [pc, #8]	; (8084c2c <hal_usart_end+0xc>)
 8084c24:	681b      	ldr	r3, [r3, #0]
 8084c26:	6a1b      	ldr	r3, [r3, #32]
 8084c28:	9301      	str	r3, [sp, #4]
 8084c2a:	bd08      	pop	{r3, pc}
 8084c2c:	080401c4 	.word	0x080401c4

08084c30 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 8084c30:	b508      	push	{r3, lr}
 8084c32:	4b02      	ldr	r3, [pc, #8]	; (8084c3c <hal_usart_write+0xc>)
 8084c34:	681b      	ldr	r3, [r3, #0]
 8084c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8084c38:	9301      	str	r3, [sp, #4]
 8084c3a:	bd08      	pop	{r3, pc}
 8084c3c:	080401c4 	.word	0x080401c4

08084c40 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 8084c40:	b508      	push	{r3, lr}
 8084c42:	4b02      	ldr	r3, [pc, #8]	; (8084c4c <hal_usart_available+0xc>)
 8084c44:	681b      	ldr	r3, [r3, #0]
 8084c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8084c48:	9301      	str	r3, [sp, #4]
 8084c4a:	bd08      	pop	{r3, pc}
 8084c4c:	080401c4 	.word	0x080401c4

08084c50 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 8084c50:	b508      	push	{r3, lr}
 8084c52:	4b02      	ldr	r3, [pc, #8]	; (8084c5c <hal_usart_read+0xc>)
 8084c54:	681b      	ldr	r3, [r3, #0]
 8084c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8084c58:	9301      	str	r3, [sp, #4]
 8084c5a:	bd08      	pop	{r3, pc}
 8084c5c:	080401c4 	.word	0x080401c4

08084c60 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 8084c60:	b508      	push	{r3, lr}
 8084c62:	4b02      	ldr	r3, [pc, #8]	; (8084c6c <hal_usart_peek+0xc>)
 8084c64:	681b      	ldr	r3, [r3, #0]
 8084c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8084c68:	9301      	str	r3, [sp, #4]
 8084c6a:	bd08      	pop	{r3, pc}
 8084c6c:	080401c4 	.word	0x080401c4

08084c70 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 8084c70:	b508      	push	{r3, lr}
 8084c72:	4b02      	ldr	r3, [pc, #8]	; (8084c7c <hal_usart_flush+0xc>)
 8084c74:	681b      	ldr	r3, [r3, #0]
 8084c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8084c78:	9301      	str	r3, [sp, #4]
 8084c7a:	bd08      	pop	{r3, pc}
 8084c7c:	080401c4 	.word	0x080401c4

08084c80 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 8084c80:	b508      	push	{r3, lr}
 8084c82:	4b02      	ldr	r3, [pc, #8]	; (8084c8c <hal_usart_is_enabled+0xc>)
 8084c84:	681b      	ldr	r3, [r3, #0]
 8084c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8084c88:	9301      	str	r3, [sp, #4]
 8084c8a:	bd08      	pop	{r3, pc}
 8084c8c:	080401c4 	.word	0x080401c4

08084c90 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 8084c90:	b508      	push	{r3, lr}
 8084c92:	4b02      	ldr	r3, [pc, #8]	; (8084c9c <hal_usart_available_data_for_write+0xc>)
 8084c94:	681b      	ldr	r3, [r3, #0]
 8084c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8084c98:	9301      	str	r3, [sp, #4]
 8084c9a:	bd08      	pop	{r3, pc}
 8084c9c:	080401c4 	.word	0x080401c4

08084ca0 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 8084ca0:	b508      	push	{r3, lr}
 8084ca2:	4b02      	ldr	r3, [pc, #8]	; (8084cac <hal_usart_begin_config+0xc>)
 8084ca4:	681b      	ldr	r3, [r3, #0]
 8084ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8084ca8:	9301      	str	r3, [sp, #4]
 8084caa:	bd08      	pop	{r3, pc}
 8084cac:	080401c4 	.word	0x080401c4

08084cb0 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 8084cb0:	b508      	push	{r3, lr}
 8084cb2:	4b02      	ldr	r3, [pc, #8]	; (8084cbc <hal_i2c_begin+0xc>)
 8084cb4:	681b      	ldr	r3, [r3, #0]
 8084cb6:	68db      	ldr	r3, [r3, #12]
 8084cb8:	9301      	str	r3, [sp, #4]
 8084cba:	bd08      	pop	{r3, pc}
 8084cbc:	080401ac 	.word	0x080401ac

08084cc0 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 8084cc0:	b508      	push	{r3, lr}
 8084cc2:	4b02      	ldr	r3, [pc, #8]	; (8084ccc <hal_i2c_begin_transmission+0xc>)
 8084cc4:	681b      	ldr	r3, [r3, #0]
 8084cc6:	699b      	ldr	r3, [r3, #24]
 8084cc8:	9301      	str	r3, [sp, #4]
 8084cca:	bd08      	pop	{r3, pc}
 8084ccc:	080401ac 	.word	0x080401ac

08084cd0 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 8084cd0:	b508      	push	{r3, lr}
 8084cd2:	4b02      	ldr	r3, [pc, #8]	; (8084cdc <hal_i2c_end_transmission+0xc>)
 8084cd4:	681b      	ldr	r3, [r3, #0]
 8084cd6:	69db      	ldr	r3, [r3, #28]
 8084cd8:	9301      	str	r3, [sp, #4]
 8084cda:	bd08      	pop	{r3, pc}
 8084cdc:	080401ac 	.word	0x080401ac

08084ce0 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 8084ce0:	b508      	push	{r3, lr}
 8084ce2:	4b02      	ldr	r3, [pc, #8]	; (8084cec <hal_i2c_write+0xc>)
 8084ce4:	681b      	ldr	r3, [r3, #0]
 8084ce6:	6a1b      	ldr	r3, [r3, #32]
 8084ce8:	9301      	str	r3, [sp, #4]
 8084cea:	bd08      	pop	{r3, pc}
 8084cec:	080401ac 	.word	0x080401ac

08084cf0 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 8084cf0:	b508      	push	{r3, lr}
 8084cf2:	4b02      	ldr	r3, [pc, #8]	; (8084cfc <hal_i2c_available+0xc>)
 8084cf4:	681b      	ldr	r3, [r3, #0]
 8084cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8084cf8:	9301      	str	r3, [sp, #4]
 8084cfa:	bd08      	pop	{r3, pc}
 8084cfc:	080401ac 	.word	0x080401ac

08084d00 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 8084d00:	b508      	push	{r3, lr}
 8084d02:	4b02      	ldr	r3, [pc, #8]	; (8084d0c <hal_i2c_read+0xc>)
 8084d04:	681b      	ldr	r3, [r3, #0]
 8084d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8084d08:	9301      	str	r3, [sp, #4]
 8084d0a:	bd08      	pop	{r3, pc}
 8084d0c:	080401ac 	.word	0x080401ac

08084d10 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 8084d10:	b508      	push	{r3, lr}
 8084d12:	4b02      	ldr	r3, [pc, #8]	; (8084d1c <hal_i2c_peek+0xc>)
 8084d14:	681b      	ldr	r3, [r3, #0]
 8084d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8084d18:	9301      	str	r3, [sp, #4]
 8084d1a:	bd08      	pop	{r3, pc}
 8084d1c:	080401ac 	.word	0x080401ac

08084d20 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 8084d20:	b508      	push	{r3, lr}
 8084d22:	4b02      	ldr	r3, [pc, #8]	; (8084d2c <hal_i2c_flush+0xc>)
 8084d24:	681b      	ldr	r3, [r3, #0]
 8084d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8084d28:	9301      	str	r3, [sp, #4]
 8084d2a:	bd08      	pop	{r3, pc}
 8084d2c:	080401ac 	.word	0x080401ac

08084d30 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 8084d30:	b508      	push	{r3, lr}
 8084d32:	4b02      	ldr	r3, [pc, #8]	; (8084d3c <hal_i2c_is_enabled+0xc>)
 8084d34:	681b      	ldr	r3, [r3, #0]
 8084d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8084d38:	9301      	str	r3, [sp, #4]
 8084d3a:	bd08      	pop	{r3, pc}
 8084d3c:	080401ac 	.word	0x080401ac

08084d40 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 8084d40:	b508      	push	{r3, lr}
 8084d42:	4b02      	ldr	r3, [pc, #8]	; (8084d4c <hal_i2c_init+0xc>)
 8084d44:	681b      	ldr	r3, [r3, #0]
 8084d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8084d48:	9301      	str	r3, [sp, #4]
 8084d4a:	bd08      	pop	{r3, pc}
 8084d4c:	080401ac 	.word	0x080401ac

08084d50 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
 8084d50:	b508      	push	{r3, lr}
 8084d52:	4b02      	ldr	r3, [pc, #8]	; (8084d5c <hal_i2c_lock+0xc>)
 8084d54:	681b      	ldr	r3, [r3, #0]
 8084d56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8084d58:	9301      	str	r3, [sp, #4]
 8084d5a:	bd08      	pop	{r3, pc}
 8084d5c:	080401ac 	.word	0x080401ac

08084d60 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
 8084d60:	b508      	push	{r3, lr}
 8084d62:	4b02      	ldr	r3, [pc, #8]	; (8084d6c <hal_i2c_unlock+0xc>)
 8084d64:	681b      	ldr	r3, [r3, #0]
 8084d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8084d68:	9301      	str	r3, [sp, #4]
 8084d6a:	bd08      	pop	{r3, pc}
 8084d6c:	080401ac 	.word	0x080401ac

08084d70 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 8084d70:	b508      	push	{r3, lr}
 8084d72:	4b02      	ldr	r3, [pc, #8]	; (8084d7c <hal_i2c_request_ex+0xc>)
 8084d74:	681b      	ldr	r3, [r3, #0]
 8084d76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8084d78:	9301      	str	r3, [sp, #4]
 8084d7a:	bd08      	pop	{r3, pc}
 8084d7c:	080401ac 	.word	0x080401ac

08084d80 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 8084d80:	b508      	push	{r3, lr}
 8084d82:	4b02      	ldr	r3, [pc, #8]	; (8084d8c <hal_spi_begin+0xc>)
 8084d84:	681b      	ldr	r3, [r3, #0]
 8084d86:	681b      	ldr	r3, [r3, #0]
 8084d88:	9301      	str	r3, [sp, #4]
 8084d8a:	bd08      	pop	{r3, pc}
 8084d8c:	080401b4 	.word	0x080401b4

08084d90 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
 8084d90:	b508      	push	{r3, lr}
 8084d92:	4b02      	ldr	r3, [pc, #8]	; (8084d9c <hal_spi_set_bit_order+0xc>)
 8084d94:	681b      	ldr	r3, [r3, #0]
 8084d96:	689b      	ldr	r3, [r3, #8]
 8084d98:	9301      	str	r3, [sp, #4]
 8084d9a:	bd08      	pop	{r3, pc}
 8084d9c:	080401b4 	.word	0x080401b4

08084da0 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
 8084da0:	b508      	push	{r3, lr}
 8084da2:	4b02      	ldr	r3, [pc, #8]	; (8084dac <hal_spi_set_data_mode+0xc>)
 8084da4:	681b      	ldr	r3, [r3, #0]
 8084da6:	68db      	ldr	r3, [r3, #12]
 8084da8:	9301      	str	r3, [sp, #4]
 8084daa:	bd08      	pop	{r3, pc}
 8084dac:	080401b4 	.word	0x080401b4

08084db0 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
 8084db0:	b508      	push	{r3, lr}
 8084db2:	4b02      	ldr	r3, [pc, #8]	; (8084dbc <hal_spi_set_clock_divider+0xc>)
 8084db4:	681b      	ldr	r3, [r3, #0]
 8084db6:	691b      	ldr	r3, [r3, #16]
 8084db8:	9301      	str	r3, [sp, #4]
 8084dba:	bd08      	pop	{r3, pc}
 8084dbc:	080401b4 	.word	0x080401b4

08084dc0 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 8084dc0:	b508      	push	{r3, lr}
 8084dc2:	4b02      	ldr	r3, [pc, #8]	; (8084dcc <hal_spi_transfer+0xc>)
 8084dc4:	681b      	ldr	r3, [r3, #0]
 8084dc6:	695b      	ldr	r3, [r3, #20]
 8084dc8:	9301      	str	r3, [sp, #4]
 8084dca:	bd08      	pop	{r3, pc}
 8084dcc:	080401b4 	.word	0x080401b4

08084dd0 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 8084dd0:	b508      	push	{r3, lr}
 8084dd2:	4b02      	ldr	r3, [pc, #8]	; (8084ddc <hal_spi_init+0xc>)
 8084dd4:	681b      	ldr	r3, [r3, #0]
 8084dd6:	69db      	ldr	r3, [r3, #28]
 8084dd8:	9301      	str	r3, [sp, #4]
 8084dda:	bd08      	pop	{r3, pc}
 8084ddc:	080401b4 	.word	0x080401b4

08084de0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 8084de0:	b508      	push	{r3, lr}
 8084de2:	4b02      	ldr	r3, [pc, #8]	; (8084dec <hal_spi_is_enabled+0xc>)
 8084de4:	681b      	ldr	r3, [r3, #0]
 8084de6:	6a1b      	ldr	r3, [r3, #32]
 8084de8:	9301      	str	r3, [sp, #4]
 8084dea:	bd08      	pop	{r3, pc}
 8084dec:	080401b4 	.word	0x080401b4

08084df0 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 8084df0:	b508      	push	{r3, lr}
 8084df2:	4b02      	ldr	r3, [pc, #8]	; (8084dfc <hal_spi_info+0xc>)
 8084df4:	681b      	ldr	r3, [r3, #0]
 8084df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8084df8:	9301      	str	r3, [sp, #4]
 8084dfa:	bd08      	pop	{r3, pc}
 8084dfc:	080401b4 	.word	0x080401b4

08084e00 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 8084e00:	b508      	push	{r3, lr}
 8084e02:	4b02      	ldr	r3, [pc, #8]	; (8084e0c <inet_gethostbyname+0xc>)
 8084e04:	681b      	ldr	r3, [r3, #0]
 8084e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8084e08:	9301      	str	r3, [sp, #4]
 8084e0a:	bd08      	pop	{r3, pc}
 8084e0c:	08060020 	.word	0x08060020

08084e10 <cellular_command>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
 8084e10:	b508      	push	{r3, lr}
 8084e12:	4b02      	ldr	r3, [pc, #8]	; (8084e1c <cellular_command+0xc>)
 8084e14:	681b      	ldr	r3, [r3, #0]
 8084e16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8084e18:	9301      	str	r3, [sp, #4]
 8084e1a:	bd08      	pop	{r3, pc}
 8084e1c:	08060020 	.word	0x08060020

08084e20 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8084e20:	b508      	push	{r3, lr}
 8084e22:	4b02      	ldr	r3, [pc, #8]	; (8084e2c <HAL_USB_USART_Init+0xc>)
 8084e24:	681b      	ldr	r3, [r3, #0]
 8084e26:	681b      	ldr	r3, [r3, #0]
 8084e28:	9301      	str	r3, [sp, #4]
 8084e2a:	bd08      	pop	{r3, pc}
 8084e2c:	0806001c 	.word	0x0806001c

08084e30 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 8084e30:	b508      	push	{r3, lr}
 8084e32:	4b02      	ldr	r3, [pc, #8]	; (8084e3c <HAL_USB_USART_Begin+0xc>)
 8084e34:	681b      	ldr	r3, [r3, #0]
 8084e36:	685b      	ldr	r3, [r3, #4]
 8084e38:	9301      	str	r3, [sp, #4]
 8084e3a:	bd08      	pop	{r3, pc}
 8084e3c:	0806001c 	.word	0x0806001c

08084e40 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 8084e40:	b508      	push	{r3, lr}
 8084e42:	4b02      	ldr	r3, [pc, #8]	; (8084e4c <HAL_USB_USART_End+0xc>)
 8084e44:	681b      	ldr	r3, [r3, #0]
 8084e46:	689b      	ldr	r3, [r3, #8]
 8084e48:	9301      	str	r3, [sp, #4]
 8084e4a:	bd08      	pop	{r3, pc}
 8084e4c:	0806001c 	.word	0x0806001c

08084e50 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8084e50:	b508      	push	{r3, lr}
 8084e52:	4b02      	ldr	r3, [pc, #8]	; (8084e5c <HAL_USB_USART_Available_Data+0xc>)
 8084e54:	681b      	ldr	r3, [r3, #0]
 8084e56:	691b      	ldr	r3, [r3, #16]
 8084e58:	9301      	str	r3, [sp, #4]
 8084e5a:	bd08      	pop	{r3, pc}
 8084e5c:	0806001c 	.word	0x0806001c

08084e60 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8084e60:	b508      	push	{r3, lr}
 8084e62:	4b02      	ldr	r3, [pc, #8]	; (8084e6c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8084e64:	681b      	ldr	r3, [r3, #0]
 8084e66:	695b      	ldr	r3, [r3, #20]
 8084e68:	9301      	str	r3, [sp, #4]
 8084e6a:	bd08      	pop	{r3, pc}
 8084e6c:	0806001c 	.word	0x0806001c

08084e70 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8084e70:	b508      	push	{r3, lr}
 8084e72:	4b02      	ldr	r3, [pc, #8]	; (8084e7c <HAL_USB_USART_Receive_Data+0xc>)
 8084e74:	681b      	ldr	r3, [r3, #0]
 8084e76:	699b      	ldr	r3, [r3, #24]
 8084e78:	9301      	str	r3, [sp, #4]
 8084e7a:	bd08      	pop	{r3, pc}
 8084e7c:	0806001c 	.word	0x0806001c

08084e80 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8084e80:	b508      	push	{r3, lr}
 8084e82:	4b02      	ldr	r3, [pc, #8]	; (8084e8c <HAL_USB_USART_Send_Data+0xc>)
 8084e84:	681b      	ldr	r3, [r3, #0]
 8084e86:	69db      	ldr	r3, [r3, #28]
 8084e88:	9301      	str	r3, [sp, #4]
 8084e8a:	bd08      	pop	{r3, pc}
 8084e8c:	0806001c 	.word	0x0806001c

08084e90 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8084e90:	b508      	push	{r3, lr}
 8084e92:	4b02      	ldr	r3, [pc, #8]	; (8084e9c <HAL_USB_USART_Flush_Data+0xc>)
 8084e94:	681b      	ldr	r3, [r3, #0]
 8084e96:	6a1b      	ldr	r3, [r3, #32]
 8084e98:	9301      	str	r3, [sp, #4]
 8084e9a:	bd08      	pop	{r3, pc}
 8084e9c:	0806001c 	.word	0x0806001c

08084ea0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 8084ea0:	b508      	push	{r3, lr}
 8084ea2:	4b02      	ldr	r3, [pc, #8]	; (8084eac <panic_+0xc>)
 8084ea4:	681b      	ldr	r3, [r3, #0]
 8084ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8084ea8:	9301      	str	r3, [sp, #4]
 8084eaa:	bd08      	pop	{r3, pc}
 8084eac:	080201a0 	.word	0x080201a0

08084eb0 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 8084eb0:	b508      	push	{r3, lr}
 8084eb2:	4b02      	ldr	r3, [pc, #8]	; (8084ebc <log_message_v+0xc>)
 8084eb4:	681b      	ldr	r3, [r3, #0]
 8084eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8084eb8:	9301      	str	r3, [sp, #4]
 8084eba:	bd08      	pop	{r3, pc}
 8084ebc:	080201a0 	.word	0x080201a0

08084ec0 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 8084ec0:	b508      	push	{r3, lr}
 8084ec2:	4b02      	ldr	r3, [pc, #8]	; (8084ecc <log_level_name+0xc>)
 8084ec4:	681b      	ldr	r3, [r3, #0]
 8084ec6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8084ec8:	9301      	str	r3, [sp, #4]
 8084eca:	bd08      	pop	{r3, pc}
 8084ecc:	080201a0 	.word	0x080201a0

08084ed0 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 8084ed0:	b508      	push	{r3, lr}
 8084ed2:	4b02      	ldr	r3, [pc, #8]	; (8084edc <log_set_callbacks+0xc>)
 8084ed4:	681b      	ldr	r3, [r3, #0]
 8084ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8084ed8:	9301      	str	r3, [sp, #4]
 8084eda:	bd08      	pop	{r3, pc}
 8084edc:	080201a0 	.word	0x080201a0

08084ee0 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 8084ee0:	b508      	push	{r3, lr}
 8084ee2:	4b02      	ldr	r3, [pc, #8]	; (8084eec <system_mode+0xc>)
 8084ee4:	681b      	ldr	r3, [r3, #0]
 8084ee6:	681b      	ldr	r3, [r3, #0]
 8084ee8:	9301      	str	r3, [sp, #4]
 8084eea:	bd08      	pop	{r3, pc}
 8084eec:	080401a4 	.word	0x080401a4

08084ef0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8084ef0:	b508      	push	{r3, lr}
 8084ef2:	4b02      	ldr	r3, [pc, #8]	; (8084efc <set_system_mode+0xc>)
 8084ef4:	681b      	ldr	r3, [r3, #0]
 8084ef6:	685b      	ldr	r3, [r3, #4]
 8084ef8:	9301      	str	r3, [sp, #4]
 8084efa:	bd08      	pop	{r3, pc}
 8084efc:	080401a4 	.word	0x080401a4

08084f00 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 8084f00:	b508      	push	{r3, lr}
 8084f02:	4b02      	ldr	r3, [pc, #8]	; (8084f0c <system_delay_ms+0xc>)
 8084f04:	681b      	ldr	r3, [r3, #0]
 8084f06:	695b      	ldr	r3, [r3, #20]
 8084f08:	9301      	str	r3, [sp, #4]
 8084f0a:	bd08      	pop	{r3, pc}
 8084f0c:	080401a4 	.word	0x080401a4

08084f10 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
 8084f10:	b508      	push	{r3, lr}
 8084f12:	4b02      	ldr	r3, [pc, #8]	; (8084f1c <system_sleep+0xc>)
 8084f14:	681b      	ldr	r3, [r3, #0]
 8084f16:	699b      	ldr	r3, [r3, #24]
 8084f18:	9301      	str	r3, [sp, #4]
 8084f1a:	bd08      	pop	{r3, pc}
 8084f1c:	080401a4 	.word	0x080401a4

08084f20 <system_subscribe_event>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
 8084f20:	b508      	push	{r3, lr}
 8084f22:	4b02      	ldr	r3, [pc, #8]	; (8084f2c <system_subscribe_event+0xc>)
 8084f24:	681b      	ldr	r3, [r3, #0]
 8084f26:	6a1b      	ldr	r3, [r3, #32]
 8084f28:	9301      	str	r3, [sp, #4]
 8084f2a:	bd08      	pop	{r3, pc}
 8084f2c:	080401a4 	.word	0x080401a4

08084f30 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 8084f30:	b508      	push	{r3, lr}
 8084f32:	4b02      	ldr	r3, [pc, #8]	; (8084f3c <system_thread_set_state+0xc>)
 8084f34:	681b      	ldr	r3, [r3, #0]
 8084f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8084f38:	9301      	str	r3, [sp, #4]
 8084f3a:	bd08      	pop	{r3, pc}
 8084f3c:	080401a4 	.word	0x080401a4

08084f40 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 8084f40:	b508      	push	{r3, lr}
 8084f42:	4b02      	ldr	r3, [pc, #8]	; (8084f4c <application_thread_current+0xc>)
 8084f44:	681b      	ldr	r3, [r3, #0]
 8084f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8084f48:	9301      	str	r3, [sp, #4]
 8084f4a:	bd08      	pop	{r3, pc}
 8084f4c:	080401a4 	.word	0x080401a4

08084f50 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 8084f50:	b508      	push	{r3, lr}
 8084f52:	4b02      	ldr	r3, [pc, #8]	; (8084f5c <application_thread_invoke+0xc>)
 8084f54:	681b      	ldr	r3, [r3, #0]
 8084f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8084f58:	9301      	str	r3, [sp, #4]
 8084f5a:	bd08      	pop	{r3, pc}
 8084f5c:	080401a4 	.word	0x080401a4

08084f60 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 8084f60:	b508      	push	{r3, lr}
 8084f62:	4b02      	ldr	r3, [pc, #8]	; (8084f6c <system_thread_get_state+0xc>)
 8084f64:	681b      	ldr	r3, [r3, #0]
 8084f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8084f68:	9301      	str	r3, [sp, #4]
 8084f6a:	bd08      	pop	{r3, pc}
 8084f6c:	080401a4 	.word	0x080401a4

08084f70 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 8084f70:	b508      	push	{r3, lr}
 8084f72:	4b03      	ldr	r3, [pc, #12]	; (8084f80 <system_ctrl_set_app_request_handler+0x10>)
 8084f74:	681b      	ldr	r3, [r3, #0]
 8084f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8084f7a:	9301      	str	r3, [sp, #4]
 8084f7c:	bd08      	pop	{r3, pc}
 8084f7e:	0000      	.short	0x0000
 8084f80:	080401a4 	.word	0x080401a4

08084f84 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8084f84:	b508      	push	{r3, lr}
 8084f86:	4b03      	ldr	r3, [pc, #12]	; (8084f94 <system_ctrl_set_result+0x10>)
 8084f88:	681b      	ldr	r3, [r3, #0]
 8084f8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8084f8e:	9301      	str	r3, [sp, #4]
 8084f90:	bd08      	pop	{r3, pc}
 8084f92:	0000      	.short	0x0000
 8084f94:	080401a4 	.word	0x080401a4

08084f98 <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
 8084f98:	b508      	push	{r3, lr}
 8084f9a:	4b03      	ldr	r3, [pc, #12]	; (8084fa8 <system_sleep_pins+0x10>)
 8084f9c:	681b      	ldr	r3, [r3, #0]
 8084f9e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8084fa2:	9301      	str	r3, [sp, #4]
 8084fa4:	bd08      	pop	{r3, pc}
 8084fa6:	0000      	.short	0x0000
 8084fa8:	080401a4 	.word	0x080401a4

08084fac <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
 8084fac:	b508      	push	{r3, lr}
 8084fae:	4b03      	ldr	r3, [pc, #12]	; (8084fbc <system_reset+0x10>)
 8084fb0:	681b      	ldr	r3, [r3, #0]
 8084fb2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8084fb6:	9301      	str	r3, [sp, #4]
 8084fb8:	bd08      	pop	{r3, pc}
 8084fba:	0000      	.short	0x0000
 8084fbc:	080401a4 	.word	0x080401a4

08084fc0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 8084fc0:	b508      	push	{r3, lr}
 8084fc2:	4b02      	ldr	r3, [pc, #8]	; (8084fcc <network_connect+0xc>)
 8084fc4:	681b      	ldr	r3, [r3, #0]
 8084fc6:	685b      	ldr	r3, [r3, #4]
 8084fc8:	9301      	str	r3, [sp, #4]
 8084fca:	bd08      	pop	{r3, pc}
 8084fcc:	080401c8 	.word	0x080401c8

08084fd0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 8084fd0:	b508      	push	{r3, lr}
 8084fd2:	4b02      	ldr	r3, [pc, #8]	; (8084fdc <network_connecting+0xc>)
 8084fd4:	681b      	ldr	r3, [r3, #0]
 8084fd6:	689b      	ldr	r3, [r3, #8]
 8084fd8:	9301      	str	r3, [sp, #4]
 8084fda:	bd08      	pop	{r3, pc}
 8084fdc:	080401c8 	.word	0x080401c8

08084fe0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 8084fe0:	b508      	push	{r3, lr}
 8084fe2:	4b02      	ldr	r3, [pc, #8]	; (8084fec <network_disconnect+0xc>)
 8084fe4:	681b      	ldr	r3, [r3, #0]
 8084fe6:	68db      	ldr	r3, [r3, #12]
 8084fe8:	9301      	str	r3, [sp, #4]
 8084fea:	bd08      	pop	{r3, pc}
 8084fec:	080401c8 	.word	0x080401c8

08084ff0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8084ff0:	b508      	push	{r3, lr}
 8084ff2:	4b02      	ldr	r3, [pc, #8]	; (8084ffc <network_ready+0xc>)
 8084ff4:	681b      	ldr	r3, [r3, #0]
 8084ff6:	691b      	ldr	r3, [r3, #16]
 8084ff8:	9301      	str	r3, [sp, #4]
 8084ffa:	bd08      	pop	{r3, pc}
 8084ffc:	080401c8 	.word	0x080401c8

08085000 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 8085000:	b508      	push	{r3, lr}
 8085002:	4b02      	ldr	r3, [pc, #8]	; (808500c <network_on+0xc>)
 8085004:	681b      	ldr	r3, [r3, #0]
 8085006:	695b      	ldr	r3, [r3, #20]
 8085008:	9301      	str	r3, [sp, #4]
 808500a:	bd08      	pop	{r3, pc}
 808500c:	080401c8 	.word	0x080401c8

08085010 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 8085010:	b508      	push	{r3, lr}
 8085012:	4b02      	ldr	r3, [pc, #8]	; (808501c <network_off+0xc>)
 8085014:	681b      	ldr	r3, [r3, #0]
 8085016:	699b      	ldr	r3, [r3, #24]
 8085018:	9301      	str	r3, [sp, #4]
 808501a:	bd08      	pop	{r3, pc}
 808501c:	080401c8 	.word	0x080401c8

08085020 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 8085020:	b508      	push	{r3, lr}
 8085022:	4b02      	ldr	r3, [pc, #8]	; (808502c <network_listen+0xc>)
 8085024:	681b      	ldr	r3, [r3, #0]
 8085026:	69db      	ldr	r3, [r3, #28]
 8085028:	9301      	str	r3, [sp, #4]
 808502a:	bd08      	pop	{r3, pc}
 808502c:	080401c8 	.word	0x080401c8

08085030 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 8085030:	b508      	push	{r3, lr}
 8085032:	4b02      	ldr	r3, [pc, #8]	; (808503c <network_listening+0xc>)
 8085034:	681b      	ldr	r3, [r3, #0]
 8085036:	6a1b      	ldr	r3, [r3, #32]
 8085038:	9301      	str	r3, [sp, #4]
 808503a:	bd08      	pop	{r3, pc}
 808503c:	080401c8 	.word	0x080401c8

08085040 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 8085040:	b508      	push	{r3, lr}
 8085042:	4b02      	ldr	r3, [pc, #8]	; (808504c <network_set_listen_timeout+0xc>)
 8085044:	681b      	ldr	r3, [r3, #0]
 8085046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8085048:	9301      	str	r3, [sp, #4]
 808504a:	bd08      	pop	{r3, pc}
 808504c:	080401c8 	.word	0x080401c8

08085050 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 8085050:	b508      	push	{r3, lr}
 8085052:	4b02      	ldr	r3, [pc, #8]	; (808505c <network_get_listen_timeout+0xc>)
 8085054:	681b      	ldr	r3, [r3, #0]
 8085056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8085058:	9301      	str	r3, [sp, #4]
 808505a:	bd08      	pop	{r3, pc}
 808505c:	080401c8 	.word	0x080401c8

08085060 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 8085060:	b508      	push	{r3, lr}
 8085062:	4b02      	ldr	r3, [pc, #8]	; (808506c <network_is_on+0xc>)
 8085064:	681b      	ldr	r3, [r3, #0]
 8085066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8085068:	9301      	str	r3, [sp, #4]
 808506a:	bd08      	pop	{r3, pc}
 808506c:	080401c8 	.word	0x080401c8

08085070 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 8085070:	b508      	push	{r3, lr}
 8085072:	4b02      	ldr	r3, [pc, #8]	; (808507c <network_is_off+0xc>)
 8085074:	681b      	ldr	r3, [r3, #0]
 8085076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8085078:	9301      	str	r3, [sp, #4]
 808507a:	bd08      	pop	{r3, pc}
 808507c:	080401c8 	.word	0x080401c8

08085080 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 8085080:	b508      	push	{r3, lr}
 8085082:	4b02      	ldr	r3, [pc, #8]	; (808508c <spark_variable+0xc>)
 8085084:	681b      	ldr	r3, [r3, #0]
 8085086:	681b      	ldr	r3, [r3, #0]
 8085088:	9301      	str	r3, [sp, #4]
 808508a:	bd08      	pop	{r3, pc}
 808508c:	080401cc 	.word	0x080401cc

08085090 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 8085090:	b508      	push	{r3, lr}
 8085092:	4b02      	ldr	r3, [pc, #8]	; (808509c <spark_function+0xc>)
 8085094:	681b      	ldr	r3, [r3, #0]
 8085096:	685b      	ldr	r3, [r3, #4]
 8085098:	9301      	str	r3, [sp, #4]
 808509a:	bd08      	pop	{r3, pc}
 808509c:	080401cc 	.word	0x080401cc

080850a0 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80850a0:	b508      	push	{r3, lr}
 80850a2:	4b02      	ldr	r3, [pc, #8]	; (80850ac <spark_process+0xc>)
 80850a4:	681b      	ldr	r3, [r3, #0]
 80850a6:	689b      	ldr	r3, [r3, #8]
 80850a8:	9301      	str	r3, [sp, #4]
 80850aa:	bd08      	pop	{r3, pc}
 80850ac:	080401cc 	.word	0x080401cc

080850b0 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 80850b0:	b508      	push	{r3, lr}
 80850b2:	4b02      	ldr	r3, [pc, #8]	; (80850bc <spark_cloud_flag_connect+0xc>)
 80850b4:	681b      	ldr	r3, [r3, #0]
 80850b6:	68db      	ldr	r3, [r3, #12]
 80850b8:	9301      	str	r3, [sp, #4]
 80850ba:	bd08      	pop	{r3, pc}
 80850bc:	080401cc 	.word	0x080401cc

080850c0 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80850c0:	b508      	push	{r3, lr}
 80850c2:	4b02      	ldr	r3, [pc, #8]	; (80850cc <spark_cloud_flag_connected+0xc>)
 80850c4:	681b      	ldr	r3, [r3, #0]
 80850c6:	695b      	ldr	r3, [r3, #20]
 80850c8:	9301      	str	r3, [sp, #4]
 80850ca:	bd08      	pop	{r3, pc}
 80850cc:	080401cc 	.word	0x080401cc

080850d0 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 80850d0:	b508      	push	{r3, lr}
 80850d2:	4b02      	ldr	r3, [pc, #8]	; (80850dc <spark_deviceID+0xc>)
 80850d4:	681b      	ldr	r3, [r3, #0]
 80850d6:	69db      	ldr	r3, [r3, #28]
 80850d8:	9301      	str	r3, [sp, #4]
 80850da:	bd08      	pop	{r3, pc}
 80850dc:	080401cc 	.word	0x080401cc

080850e0 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80850e0:	b508      	push	{r3, lr}
 80850e2:	4b02      	ldr	r3, [pc, #8]	; (80850ec <spark_send_event+0xc>)
 80850e4:	681b      	ldr	r3, [r3, #0]
 80850e6:	6a1b      	ldr	r3, [r3, #32]
 80850e8:	9301      	str	r3, [sp, #4]
 80850ea:	bd08      	pop	{r3, pc}
 80850ec:	080401cc 	.word	0x080401cc

080850f0 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 80850f0:	b508      	push	{r3, lr}
 80850f2:	4b02      	ldr	r3, [pc, #8]	; (80850fc <spark_subscribe+0xc>)
 80850f4:	681b      	ldr	r3, [r3, #0]
 80850f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80850f8:	9301      	str	r3, [sp, #4]
 80850fa:	bd08      	pop	{r3, pc}
 80850fc:	080401cc 	.word	0x080401cc

08085100 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 8085100:	b508      	push	{r3, lr}
 8085102:	4b02      	ldr	r3, [pc, #8]	; (808510c <spark_sync_time_pending+0xc>)
 8085104:	681b      	ldr	r3, [r3, #0]
 8085106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8085108:	9301      	str	r3, [sp, #4]
 808510a:	bd08      	pop	{r3, pc}
 808510c:	080401cc 	.word	0x080401cc

08085110 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8085110:	b508      	push	{r3, lr}
 8085112:	4b02      	ldr	r3, [pc, #8]	; (808511c <spark_set_random_seed_from_cloud_handler+0xc>)
 8085114:	681b      	ldr	r3, [r3, #0]
 8085116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8085118:	9301      	str	r3, [sp, #4]
 808511a:	bd08      	pop	{r3, pc}
 808511c:	080401cc 	.word	0x080401cc

08085120 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
 8085120:	b508      	push	{r3, lr}
 8085122:	4b02      	ldr	r3, [pc, #8]	; (808512c <spark_cloud_disconnect+0xc>)
 8085124:	681b      	ldr	r3, [r3, #0]
 8085126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8085128:	9301      	str	r3, [sp, #4]
 808512a:	bd08      	pop	{r3, pc}
 808512c:	080401cc 	.word	0x080401cc

08085130 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8085130:	b508      	push	{r3, lr}
 8085132:	4b02      	ldr	r3, [pc, #8]	; (808513c <malloc+0xc>)
 8085134:	681b      	ldr	r3, [r3, #0]
 8085136:	681b      	ldr	r3, [r3, #0]
 8085138:	9301      	str	r3, [sp, #4]
 808513a:	bd08      	pop	{r3, pc}
 808513c:	080401a0 	.word	0x080401a0

08085140 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8085140:	b508      	push	{r3, lr}
 8085142:	4b02      	ldr	r3, [pc, #8]	; (808514c <free+0xc>)
 8085144:	681b      	ldr	r3, [r3, #0]
 8085146:	685b      	ldr	r3, [r3, #4]
 8085148:	9301      	str	r3, [sp, #4]
 808514a:	bd08      	pop	{r3, pc}
 808514c:	080401a0 	.word	0x080401a0

08085150 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 8085150:	b508      	push	{r3, lr}
 8085152:	4b02      	ldr	r3, [pc, #8]	; (808515c <realloc+0xc>)
 8085154:	681b      	ldr	r3, [r3, #0]
 8085156:	689b      	ldr	r3, [r3, #8]
 8085158:	9301      	str	r3, [sp, #4]
 808515a:	bd08      	pop	{r3, pc}
 808515c:	080401a0 	.word	0x080401a0

08085160 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 8085160:	b508      	push	{r3, lr}
 8085162:	4b02      	ldr	r3, [pc, #8]	; (808516c <siprintf+0xc>)
 8085164:	681b      	ldr	r3, [r3, #0]
 8085166:	691b      	ldr	r3, [r3, #16]
 8085168:	9301      	str	r3, [sp, #4]
 808516a:	bd08      	pop	{r3, pc}
 808516c:	080401a0 	.word	0x080401a0

08085170 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 8085170:	b508      	push	{r3, lr}
 8085172:	4b02      	ldr	r3, [pc, #8]	; (808517c <snprintf+0xc>)
 8085174:	681b      	ldr	r3, [r3, #0]
 8085176:	69db      	ldr	r3, [r3, #28]
 8085178:	9301      	str	r3, [sp, #4]
 808517a:	bd08      	pop	{r3, pc}
 808517c:	080401a0 	.word	0x080401a0

08085180 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 8085180:	b508      	push	{r3, lr}
 8085182:	4b02      	ldr	r3, [pc, #8]	; (808518c <vsnprintf+0xc>)
 8085184:	681b      	ldr	r3, [r3, #0]
 8085186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8085188:	9301      	str	r3, [sp, #4]
 808518a:	bd08      	pop	{r3, pc}
 808518c:	080401a0 	.word	0x080401a0

08085190 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 8085190:	b508      	push	{r3, lr}
 8085192:	4b02      	ldr	r3, [pc, #8]	; (808519c <abort+0xc>)
 8085194:	681b      	ldr	r3, [r3, #0]
 8085196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8085198:	9301      	str	r3, [sp, #4]
 808519a:	bd08      	pop	{r3, pc}
 808519c:	080401a0 	.word	0x080401a0

080851a0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80851a0:	b508      	push	{r3, lr}
 80851a2:	4b02      	ldr	r3, [pc, #8]	; (80851ac <_malloc_r+0xc>)
 80851a4:	681b      	ldr	r3, [r3, #0]
 80851a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80851a8:	9301      	str	r3, [sp, #4]
 80851aa:	bd08      	pop	{r3, pc}
 80851ac:	080401a0 	.word	0x080401a0

080851b0 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 80851b0:	b508      	push	{r3, lr}
 80851b2:	4b02      	ldr	r3, [pc, #8]	; (80851bc <__errno+0xc>)
 80851b4:	681b      	ldr	r3, [r3, #0]
 80851b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80851b8:	9301      	str	r3, [sp, #4]
 80851ba:	bd08      	pop	{r3, pc}
 80851bc:	080401a0 	.word	0x080401a0

080851c0 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 80851c0:	b508      	push	{r3, lr}
 80851c2:	4b02      	ldr	r3, [pc, #8]	; (80851cc <__assert_func+0xc>)
 80851c4:	681b      	ldr	r3, [r3, #0]
 80851c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80851c8:	9301      	str	r3, [sp, #4]
 80851ca:	bd08      	pop	{r3, pc}
 80851cc:	080401a0 	.word	0x080401a0

080851d0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80851d0:	b508      	push	{r3, lr}
 80851d2:	4b02      	ldr	r3, [pc, #8]	; (80851dc <newlib_impure_ptr_callback+0xc>)
 80851d4:	681b      	ldr	r3, [r3, #0]
 80851d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80851d8:	9301      	str	r3, [sp, #4]
 80851da:	bd08      	pop	{r3, pc}
 80851dc:	080401a0 	.word	0x080401a0

080851e0 <_ZN4PMIC4lockEv.constprop.0.isra.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
 80851e0:	b508      	push	{r3, lr}
            return &Wire3;
 80851e2:	f003 f937 	bl	8088454 <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->lock();
}
 80851e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
 80851ea:	f002 bd67 	b.w	8087cbc <_ZN7TwoWire4lockEv>

080851ee <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
 80851ee:	b510      	push	{r4, lr}
 80851f0:	4604      	mov	r4, r0
    lock_(_lock)
 80851f2:	7001      	strb	r1, [r0, #0]
    if (lock_) {
 80851f4:	b109      	cbz	r1, 80851fa <_ZN4PMICC1Eb+0xc>
        lock();
 80851f6:	f7ff fff3 	bl	80851e0 <_ZN4PMIC4lockEv.constprop.0.isra.0>
}
 80851fa:	4620      	mov	r0, r4
 80851fc:	bd10      	pop	{r4, pc}

080851fe <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
 80851fe:	b508      	push	{r3, lr}
            return &Wire3;
 8085200:	f003 f928 	bl	8088454 <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->unlock();
}
 8085204:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
 8085208:	f002 bd61 	b.w	8087cce <_ZN7TwoWire6unlockEv>

0808520c <_ZN4PMICD1Ev>:
PMIC::~PMIC()
 808520c:	b510      	push	{r4, lr}
    if (lock_) {
 808520e:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
 8085210:	4604      	mov	r4, r0
    if (lock_) {
 8085212:	b10b      	cbz	r3, 8085218 <_ZN4PMICD1Ev+0xc>
        unlock();
 8085214:	f7ff fff3 	bl	80851fe <_ZN4PMIC6unlockEv>
}
 8085218:	4620      	mov	r0, r4
 808521a:	bd10      	pop	{r4, pc}

0808521c <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 808521c:	b510      	push	{r4, lr}
 808521e:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 8085220:	6800      	ldr	r0, [r0, #0]
 8085222:	f7ff ffec 	bl	80851fe <_ZN4PMIC6unlockEv>
 8085226:	4620      	mov	r0, r4
 8085228:	bd10      	pop	{r4, pc}

0808522a <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
 808522a:	b530      	push	{r4, r5, lr}
 808522c:	b087      	sub	sp, #28
 808522e:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8085230:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8085232:	f7ff ffd5 	bl	80851e0 <_ZN4PMIC4lockEv.constprop.0.isra.0>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8085236:	226b      	movs	r2, #107	; 0x6b
 8085238:	2300      	movs	r3, #0
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
 808523a:	2401      	movs	r4, #1
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 808523c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
 8085240:	230a      	movs	r3, #10
 8085242:	e9cd 4304 	strd	r4, r3, [sp, #16]
            return &Wire3;
 8085246:	f003 f905 	bl	8088454 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->beginTransmission(config);
 808524a:	a902      	add	r1, sp, #8
 808524c:	f002 fd17 	bl	8087c7e <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire3;
 8085250:	f003 f900 	bl	8088454 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->write(startAddress);
 8085254:	6803      	ldr	r3, [r0, #0]
 8085256:	4629      	mov	r1, r5
 8085258:	689b      	ldr	r3, [r3, #8]
 808525a:	4798      	blx	r3
            return &Wire3;
 808525c:	f003 f8fa 	bl	8088454 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->endTransmission(true);
 8085260:	4621      	mov	r1, r4
 8085262:	f002 fd24 	bl	8087cae <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
 8085266:	9403      	str	r4, [sp, #12]
            return &Wire3;
 8085268:	f003 f8f4 	bl	8088454 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->requestFrom(config);
 808526c:	a902      	add	r1, sp, #8
 808526e:	f002 fcd3 	bl	8087c18 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire3;
 8085272:	f003 f8ef 	bl	8088454 <_Z20__fetch_global_Wire3v>
    DATA = pmicWireInstance()->read();
 8085276:	6803      	ldr	r3, [r0, #0]
 8085278:	695b      	ldr	r3, [r3, #20]
 808527a:	4798      	blx	r3
 808527c:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
 808527e:	a801      	add	r0, sp, #4
 8085280:	f7ff ffcc 	bl	808521c <_ZNSt10lock_guardI4PMICED1Ev>
}
 8085284:	b2e0      	uxtb	r0, r4
 8085286:	b007      	add	sp, #28
 8085288:	bd30      	pop	{r4, r5, pc}

0808528a <_ZN4PMIC11isPowerGoodEv>:
    DATA = readRegister(SYSTEM_STATUS_REGISTER);
 808528a:	2108      	movs	r1, #8
bool PMIC::isPowerGood(void) {
 808528c:	b508      	push	{r3, lr}
    DATA = readRegister(SYSTEM_STATUS_REGISTER);
 808528e:	f7ff ffcc 	bl	808522a <_ZN4PMIC12readRegisterEh>
}
 8085292:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8085296:	bd08      	pop	{r3, pc}

08085298 <_ZN4PMIC15getSystemStatusEv>:
    DATA = readRegister(SYSTEM_STATUS_REGISTER);
 8085298:	2108      	movs	r1, #8
 808529a:	f7ff bfc6 	b.w	808522a <_ZN4PMIC12readRegisterEh>

0808529e <_ZN14RecursiveMutex6unlockEv.isra.0>:
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 808529e:	f7ff bc9f 	b.w	8084be0 <os_mutex_recursive_unlock>

080852a2 <_ZN14RecursiveMutex4lockEv.isra.0>:
    void lock() { os_mutex_recursive_lock(handle_); }
 80852a2:	f7ff bc95 	b.w	8084bd0 <os_mutex_recursive_lock>

080852a6 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80852a6:	b570      	push	{r4, r5, r6, lr}
    RecursiveMutex() : handle_(nullptr)
 80852a8:	2600      	movs	r6, #0
 80852aa:	4604      	mov	r4, r0
 80852ac:	460d      	mov	r5, r1
 80852ae:	f840 6f08 	str.w	r6, [r0, #8]!
        os_mutex_recursive_create(&handle_);
 80852b2:	f7ff fc7d 	bl	8084bb0 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80852b6:	4628      	mov	r0, r5
    _spi = spi;
 80852b8:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80852ba:	f7ff fd89 	bl	8084dd0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80852be:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80852c0:	6066      	str	r6, [r4, #4]
}
 80852c2:	bd70      	pop	{r4, r5, r6, pc}

080852c4 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 80852c4:	b510      	push	{r4, lr}
 80852c6:	4604      	mov	r4, r0
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 80852c8:	6880      	ldr	r0, [r0, #8]
 80852ca:	f7ff ffea 	bl	80852a2 <_ZN14RecursiveMutex4lockEv.isra.0>
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
 80852ce:	7820      	ldrb	r0, [r4, #0]
 80852d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80852d4:	f7ff fd54 	bl	8084d80 <hal_spi_begin>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 80852d8:	68a0      	ldr	r0, [r4, #8]
        unlock();
    }
}
 80852da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80852de:	f7ff bfde 	b.w	808529e <_ZN14RecursiveMutex6unlockEv.isra.0>

080852e2 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
 80852e2:	b538      	push	{r3, r4, r5, lr}
 80852e4:	4604      	mov	r4, r0
 80852e6:	460d      	mov	r5, r1
    _mutex.lock();
 80852e8:	6880      	ldr	r0, [r0, #8]
 80852ea:	f7ff ffda 	bl	80852a2 <_ZN14RecursiveMutex4lockEv.isra.0>
    if (!lock())
    {
        hal_spi_set_bit_order(_spi, bitOrder);
 80852ee:	7820      	ldrb	r0, [r4, #0]
 80852f0:	4629      	mov	r1, r5
 80852f2:	f7ff fd4d 	bl	8084d90 <hal_spi_set_bit_order>
    _mutex.unlock();
 80852f6:	68a0      	ldr	r0, [r4, #8]
        unlock();
    }
}
 80852f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80852fc:	f7ff bfcf 	b.w	808529e <_ZN14RecursiveMutex6unlockEv.isra.0>

08085300 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
 8085300:	b538      	push	{r3, r4, r5, lr}
 8085302:	4604      	mov	r4, r0
 8085304:	460d      	mov	r5, r1
    _mutex.lock();
 8085306:	6880      	ldr	r0, [r0, #8]
 8085308:	f7ff ffcb 	bl	80852a2 <_ZN14RecursiveMutex4lockEv.isra.0>
    if (!lock())
    {
        hal_spi_set_data_mode(_spi, mode);
 808530c:	7820      	ldrb	r0, [r4, #0]
 808530e:	4629      	mov	r1, r5
 8085310:	f7ff fd46 	bl	8084da0 <hal_spi_set_data_mode>
    _mutex.unlock();
 8085314:	68a0      	ldr	r0, [r4, #8]
        unlock();
    }
}
 8085316:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 808531a:	f7ff bfc0 	b.w	808529e <_ZN14RecursiveMutex6unlockEv.isra.0>
	...

08085320 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 8085320:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 8085322:	2400      	movs	r4, #0
 8085324:	0840      	lsrs	r0, r0, #1
 8085326:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 8085328:	6818      	ldr	r0, [r3, #0]
 808532a:	b2e5      	uxtb	r5, r4
 808532c:	4288      	cmp	r0, r1
 808532e:	d906      	bls.n	808533e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 8085330:	3401      	adds	r4, #1
 8085332:	2c08      	cmp	r4, #8
 8085334:	d002      	beq.n	808533c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 8085336:	0840      	lsrs	r0, r0, #1
 8085338:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 808533a:	e7f5      	b.n	8085328 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 808533c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 808533e:	4b02      	ldr	r3, [pc, #8]	; (8085348 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 8085340:	5d5b      	ldrb	r3, [r3, r5]
 8085342:	7013      	strb	r3, [r2, #0]
}
 8085344:	bd30      	pop	{r4, r5, pc}
 8085346:	bf00      	nop
 8085348:	0808bb3b 	.word	0x0808bb3b

0808534c <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 808534c:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned clock = 0;
 808534e:	2500      	movs	r5, #0
{
 8085350:	4604      	mov	r4, r0
 8085352:	b089      	sub	sp, #36	; 0x24
    _mutex.lock();
 8085354:	6880      	ldr	r0, [r0, #8]

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;
 8085356:	fb02 f601 	mul.w	r6, r2, r1
    unsigned clock = 0;
 808535a:	9502      	str	r5, [sp, #8]
 808535c:	f7ff ffa1 	bl	80852a2 <_ZN14RecursiveMutex4lockEv.isra.0>
    memset(info, 0, sizeof(hal_spi_info_t));
 8085360:	4629      	mov	r1, r5
 8085362:	2214      	movs	r2, #20
 8085364:	a803      	add	r0, sp, #12

    if (!lock())
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
 8085366:	7827      	ldrb	r7, [r4, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
 8085368:	f005 fc6c 	bl	808ac44 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 808536c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 808536e:	462a      	mov	r2, r5
 8085370:	4638      	mov	r0, r7
 8085372:	a903      	add	r1, sp, #12
    info->version = HAL_SPI_INFO_VERSION_1;
 8085374:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
 8085378:	f7ff fd3a 	bl	8084df0 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 808537c:	ab02      	add	r3, sp, #8
 808537e:	f10d 0207 	add.w	r2, sp, #7
 8085382:	4631      	mov	r1, r6
 8085384:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
 8085386:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 808538a:	f7ff ffc9 	bl	8085320 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
 808538e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8085392:	7820      	ldrb	r0, [r4, #0]
 8085394:	f7ff fd0c 	bl	8084db0 <hal_spi_set_clock_divider>
    _mutex.unlock();
 8085398:	68a0      	ldr	r0, [r4, #8]
 808539a:	f7ff ff80 	bl	808529e <_ZN14RecursiveMutex6unlockEv.isra.0>
        unlock();
    }

    return clock;
}
 808539e:	9802      	ldr	r0, [sp, #8]
 80853a0:	b009      	add	sp, #36	; 0x24
 80853a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080853a4 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
 80853a4:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 80853a6:	7800      	ldrb	r0, [r0, #0]
 80853a8:	f7ff fd0a 	bl	8084dc0 <hal_spi_transfer>
}
 80853ac:	b2c0      	uxtb	r0, r0
 80853ae:	bd08      	pop	{r3, pc}

080853b0 <_ZN17SystemSleepResult13toSleepResultEv>:
    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
 80853b0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SleepResult toSleepResult() {
 80853b4:	b510      	push	{r4, lr}
        if (error_ || wakeupSource_) {
 80853b6:	680a      	ldr	r2, [r1, #0]
 80853b8:	b933      	cbnz	r3, 80853c8 <_ZN17SystemSleepResult13toSleepResultEv+0x18>
 80853ba:	b932      	cbnz	r2, 80853ca <_ZN17SystemSleepResult13toSleepResultEv+0x1a>
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
                    break;
                }
            }
        }
        return compatResult_;
 80853bc:	f8d1 3006 	ldr.w	r3, [r1, #6]
 80853c0:	6003      	str	r3, [r0, #0]
 80853c2:	894b      	ldrh	r3, [r1, #10]
 80853c4:	8083      	strh	r3, [r0, #4]
    }
 80853c6:	bd10      	pop	{r4, pc}
        if (wakeupSource_) {
 80853c8:	b122      	cbz	r2, 80853d4 <_ZN17SystemSleepResult13toSleepResultEv+0x24>
            return static_cast<SystemSleepWakeupReason>(wakeupSource_->type);
 80853ca:	8894      	ldrh	r4, [r2, #4]
            switch (wakeupReason()) {
 80853cc:	2c01      	cmp	r4, #1
 80853ce:	d003      	beq.n	80853d8 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
 80853d0:	2c04      	cmp	r4, #4
 80853d2:	d006      	beq.n	80853e2 <_ZN17SystemSleepResult13toSleepResultEv+0x32>
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 80853d4:	2204      	movs	r2, #4
 80853d6:	e005      	b.n	80853e4 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
 80853d8:	8992      	ldrh	r2, [r2, #12]
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
 80853da:	718c      	strb	r4, [r1, #6]
 80853dc:	810b      	strh	r3, [r1, #8]
 80853de:	814a      	strh	r2, [r1, #10]
                    break;
 80853e0:	e7ec      	b.n	80853bc <_ZN17SystemSleepResult13toSleepResultEv+0xc>
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
 80853e2:	2202      	movs	r2, #2
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 80853e4:	810b      	strh	r3, [r1, #8]
 80853e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80853ea:	718a      	strb	r2, [r1, #6]
 80853ec:	814b      	strh	r3, [r1, #10]
                    break;
 80853ee:	e7e5      	b.n	80853bc <_ZN17SystemSleepResult13toSleepResultEv+0xc>

080853f0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80853f0:	b510      	push	{r4, lr}
 80853f2:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80853f4:	6800      	ldr	r0, [r0, #0]
 80853f6:	b118      	cbz	r0, 8085400 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
 80853f8:	f7ff fea2 	bl	8085140 <free>
            wakeupSource_ = nullptr;
 80853fc:	2300      	movs	r3, #0
 80853fe:	6023      	str	r3, [r4, #0]
        }
    }
 8085400:	bd10      	pop	{r4, pc}

08085402 <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8085402:	b538      	push	{r3, r4, r5, lr}
 8085404:	460c      	mov	r4, r1
        error_ = result.error_;
 8085406:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 808540a:	4605      	mov	r5, r0
        error_ = result.error_;
 808540c:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
 808540e:	f8d1 3006 	ldr.w	r3, [r1, #6]
 8085412:	f8c0 3006 	str.w	r3, [r0, #6]
 8085416:	894b      	ldrh	r3, [r1, #10]
 8085418:	8143      	strh	r3, [r0, #10]
        freeWakeupSourceMemory();
 808541a:	f7ff ffe9 	bl	80853f0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
 808541e:	6823      	ldr	r3, [r4, #0]
 8085420:	b113      	cbz	r3, 8085428 <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
 8085422:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
 8085424:	2300      	movs	r3, #0
 8085426:	6023      	str	r3, [r4, #0]
    }
 8085428:	bd38      	pop	{r3, r4, r5, pc}

0808542a <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
 808542a:	b507      	push	{r0, r1, r2, lr}
 808542c:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 808542e:	2100      	movs	r1, #0
{
 8085430:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 8085432:	9100      	str	r1, [sp, #0]
 8085434:	2001      	movs	r0, #1
 8085436:	218c      	movs	r1, #140	; 0x8c
 8085438:	f7ff fdb8 	bl	8084fac <system_reset>
}
 808543c:	b003      	add	sp, #12
 808543e:	f85d fb04 	ldr.w	pc, [sp], #4

08085442 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
 8085442:	4601      	mov	r1, r0
    reset(0, flags);
 8085444:	2000      	movs	r0, #0
 8085446:	f7ff bff0 	b.w	808542a <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

0808544a <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
 808544a:	2000      	movs	r0, #0
 808544c:	f7ff bff9 	b.w	8085442 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

08085450 <_ZN11SystemClass13enterSafeModeEN8particle5FlagsI19SystemResetFlagTypemEE>:

void SystemClass::enterSafeMode(SystemResetFlags flags)
{
 8085450:	b507      	push	{r0, r1, r2, lr}
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
 8085452:	2200      	movs	r2, #0
{
 8085454:	4603      	mov	r3, r0
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
 8085456:	4611      	mov	r1, r2
 8085458:	9200      	str	r2, [sp, #0]
 808545a:	2003      	movs	r0, #3
 808545c:	f7ff fda6 	bl	8084fac <system_reset>
}
 8085460:	b003      	add	sp, #12
 8085462:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08085468 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
    }
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
 8085468:	b530      	push	{r4, r5, lr}
 808546a:	4604      	mov	r4, r0
 808546c:	b085      	sub	sp, #20
 808546e:	4608      	mov	r0, r1
 8085470:	4611      	mov	r1, r2
 8085472:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
 8085474:	2300      	movs	r3, #0
 8085476:	f7ff fd4b 	bl	8084f10 <system_sleep>
              compatResult_(r) {
 808547a:	2300      	movs	r3, #0
            : wakeupSource_(nullptr),
 808547c:	e9cd 3301 	strd	r3, r3, [sp, #4]
              compatResult_(r) {
 8085480:	f64f 73ff 	movw	r3, #65535	; 0xffff
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
 8085484:	4d09      	ldr	r5, [pc, #36]	; (80854ac <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x44>)
 8085486:	a901      	add	r1, sp, #4
 8085488:	f8ad 000c 	strh.w	r0, [sp, #12]
 808548c:	4628      	mov	r0, r5
 808548e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8085492:	f7ff ffb6 	bl	8085402 <_ZN17SystemSleepResultaSEOS_.isra.0>
        freeWakeupSourceMemory();
 8085496:	a801      	add	r0, sp, #4
 8085498:	f7ff ffaa 	bl	80853f0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        return toSleepResult();
 808549c:	4620      	mov	r0, r4
 808549e:	4629      	mov	r1, r5
 80854a0:	f7ff ff86 	bl	80853b0 <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
 80854a4:	4620      	mov	r0, r4
 80854a6:	b005      	add	sp, #20
 80854a8:	bd30      	pop	{r4, r5, pc}
 80854aa:	bf00      	nop
 80854ac:	200003e8 	.word	0x200003e8

080854b0 <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
 80854b0:	b510      	push	{r4, lr}
 80854b2:	2400      	movs	r4, #0
 80854b4:	7004      	strb	r4, [r0, #0]
 80854b6:	8044      	strh	r4, [r0, #2]
 80854b8:	f64f 74ff 	movw	r4, #65535	; 0xffff
    if (ret > 0) {
 80854bc:	2900      	cmp	r1, #0
SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
 80854be:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
 80854c0:	dd08      	ble.n	80854d4 <_ZN11SleepResultC1EiPKtj+0x24>
        // pin
        --ret;
 80854c2:	3901      	subs	r1, #1
        if ((size_t)ret < pinsSize) {
 80854c4:	428b      	cmp	r3, r1
 80854c6:	d904      	bls.n	80854d2 <_ZN11SleepResultC1EiPKtj+0x22>
            pin_ = pins[ret];
 80854c8:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
 80854cc:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
 80854ce:	2301      	movs	r3, #1
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
        reason_ = WAKEUP_REASON_RTC;
 80854d0:	7003      	strb	r3, [r0, #0]
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
    }
}
 80854d2:	bd10      	pop	{r4, pc}
    } else if (ret == 0) {
 80854d4:	d101      	bne.n	80854da <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
 80854d6:	2302      	movs	r3, #2
 80854d8:	e7fa      	b.n	80854d0 <_ZN11SleepResultC1EiPKtj+0x20>
        err_ = static_cast<system_error_t>(ret);
 80854da:	8041      	strh	r1, [r0, #2]
 80854dc:	e7f9      	b.n	80854d2 <_ZN11SleepResultC1EiPKtj+0x22>
	...

080854e0 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 80854e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80854e2:	460d      	mov	r5, r1
 80854e4:	4616      	mov	r6, r2
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 80854e6:	2700      	movs	r7, #0
SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 80854e8:	b08b      	sub	sp, #44	; 0x2c
 80854ea:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 80854ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 80854ee:	4604      	mov	r4, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 80854f0:	9301      	str	r3, [sp, #4]
 80854f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80854f4:	4631      	mov	r1, r6
 80854f6:	9300      	str	r3, [sp, #0]
 80854f8:	4628      	mov	r0, r5
 80854fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80854fc:	9702      	str	r7, [sp, #8]
 80854fe:	f7ff fd4b 	bl	8084f98 <system_sleep_pins>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
 8085502:	4633      	mov	r3, r6
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 8085504:	4601      	mov	r1, r0
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
 8085506:	462a      	mov	r2, r5
 8085508:	a805      	add	r0, sp, #20
 808550a:	f7ff ffd1 	bl	80854b0 <_ZN11SleepResultC1EiPKtj>
 808550e:	4d0f      	ldr	r5, [pc, #60]	; (808554c <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x6c>)
 8085510:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8085514:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 8085518:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 808551c:	4628      	mov	r0, r5
              compatResult_(r) {
 808551e:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
 8085522:	a907      	add	r1, sp, #28
 8085524:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8085528:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 808552c:	9707      	str	r7, [sp, #28]
 808552e:	f8ad 7020 	strh.w	r7, [sp, #32]
 8085532:	f7ff ff66 	bl	8085402 <_ZN17SystemSleepResultaSEOS_.isra.0>
        freeWakeupSourceMemory();
 8085536:	a807      	add	r0, sp, #28
 8085538:	f7ff ff5a 	bl	80853f0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        return toSleepResult();
 808553c:	4620      	mov	r0, r4
 808553e:	4629      	mov	r1, r5
 8085540:	f7ff ff36 	bl	80853b0 <_ZN17SystemSleepResult13toSleepResultEv>
}
 8085544:	4620      	mov	r0, r4
 8085546:	b00b      	add	sp, #44	; 0x2c
 8085548:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808554a:	bf00      	nop
 808554c:	200003e8 	.word	0x200003e8

08085550 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 8085550:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 8085552:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 8085554:	b510      	push	{r4, lr}
 8085556:	4b08      	ldr	r3, [pc, #32]	; (8085578 <_GLOBAL__sub_I_System+0x28>)
 8085558:	4c08      	ldr	r4, [pc, #32]	; (808557c <_GLOBAL__sub_I_System+0x2c>)
 808555a:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 808555c:	4b08      	ldr	r3, [pc, #32]	; (8085580 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 808555e:	e9c4 0000 	strd	r0, r0, [r4]
    SleepResult() {}
 8085562:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8085564:	f7ff fcc4 	bl	8084ef0 <set_system_mode>
SystemClass System;
 8085568:	4620      	mov	r0, r4
 808556a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 808556e:	4a05      	ldr	r2, [pc, #20]	; (8085584 <_GLOBAL__sub_I_System+0x34>)
 8085570:	4905      	ldr	r1, [pc, #20]	; (8085588 <_GLOBAL__sub_I_System+0x38>)
 8085572:	f002 bf97 	b.w	80884a4 <__aeabi_atexit>
 8085576:	bf00      	nop
 8085578:	200003f4 	.word	0x200003f4
 808557c:	200003e8 	.word	0x200003e8
 8085580:	ffff0000 	.word	0xffff0000
 8085584:	20000130 	.word	0x20000130
 8085588:	080801ad 	.word	0x080801ad

0808558c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 808558c:	b510      	push	{r4, lr}
 808558e:	4604      	mov	r4, r0
{
	free(buffer);
 8085590:	6800      	ldr	r0, [r0, #0]
 8085592:	f7ff fdd5 	bl	8085140 <free>
}
 8085596:	4620      	mov	r0, r4
 8085598:	bd10      	pop	{r4, pc}

0808559a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 808559a:	b510      	push	{r4, lr}
 808559c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 808559e:	6800      	ldr	r0, [r0, #0]
 80855a0:	b108      	cbz	r0, 80855a6 <_ZN6String10invalidateEv+0xc>
 80855a2:	f7ff fdcd 	bl	8085140 <free>
	buffer = NULL;
 80855a6:	2300      	movs	r3, #0
	capacity = len = 0;
 80855a8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80855ac:	6023      	str	r3, [r4, #0]
}
 80855ae:	bd10      	pop	{r4, pc}

080855b0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80855b0:	b538      	push	{r3, r4, r5, lr}
 80855b2:	4604      	mov	r4, r0
 80855b4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80855b6:	6800      	ldr	r0, [r0, #0]
 80855b8:	3101      	adds	r1, #1
 80855ba:	f7ff fdc9 	bl	8085150 <realloc>
	if (newbuffer) {
 80855be:	b110      	cbz	r0, 80855c6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80855c0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80855c4:	2001      	movs	r0, #1
	}
	return 0;
}
 80855c6:	bd38      	pop	{r3, r4, r5, pc}

080855c8 <_ZN6String7reserveEj>:
{
 80855c8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80855ca:	6803      	ldr	r3, [r0, #0]
{
 80855cc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80855ce:	b123      	cbz	r3, 80855da <_ZN6String7reserveEj+0x12>
 80855d0:	6843      	ldr	r3, [r0, #4]
 80855d2:	428b      	cmp	r3, r1
 80855d4:	d301      	bcc.n	80855da <_ZN6String7reserveEj+0x12>
 80855d6:	2001      	movs	r0, #1
}
 80855d8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80855da:	4620      	mov	r0, r4
 80855dc:	f7ff ffe8 	bl	80855b0 <_ZN6String12changeBufferEj>
 80855e0:	2800      	cmp	r0, #0
 80855e2:	d0f9      	beq.n	80855d8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80855e4:	68a3      	ldr	r3, [r4, #8]
 80855e6:	2b00      	cmp	r3, #0
 80855e8:	d1f5      	bne.n	80855d6 <_ZN6String7reserveEj+0xe>
 80855ea:	6822      	ldr	r2, [r4, #0]
 80855ec:	7013      	strb	r3, [r2, #0]
 80855ee:	e7f2      	b.n	80855d6 <_ZN6String7reserveEj+0xe>

080855f0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80855f0:	b570      	push	{r4, r5, r6, lr}
 80855f2:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80855f4:	4611      	mov	r1, r2
{
 80855f6:	4604      	mov	r4, r0
 80855f8:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80855fa:	f7ff ffe5 	bl	80855c8 <_ZN6String7reserveEj>
 80855fe:	b920      	cbnz	r0, 808560a <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 8085600:	4620      	mov	r0, r4
 8085602:	f7ff ffca 	bl	808559a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 8085606:	4620      	mov	r0, r4
 8085608:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 808560a:	462a      	mov	r2, r5
 808560c:	4631      	mov	r1, r6
 808560e:	6820      	ldr	r0, [r4, #0]
	len = length;
 8085610:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 8085612:	f005 faef 	bl	808abf4 <memcpy>
	buffer[len] = 0;
 8085616:	2100      	movs	r1, #0
 8085618:	6822      	ldr	r2, [r4, #0]
 808561a:	68a3      	ldr	r3, [r4, #8]
 808561c:	54d1      	strb	r1, [r2, r3]
	return *this;
 808561e:	e7f2      	b.n	8085606 <_ZN6String4copyEPKcj+0x16>

08085620 <_ZN6StringC1EPK19__FlashStringHelper>:
String::String(const __FlashStringHelper *pstr)
 8085620:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 8085622:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 8085624:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 8085626:	460d      	mov	r5, r1
	capacity = 0;
 8085628:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 808562c:	6083      	str	r3, [r0, #8]
	flags = 0;
 808562e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 8085630:	b139      	cbz	r1, 8085642 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
 8085632:	4608      	mov	r0, r1
 8085634:	f005 fb81 	bl	808ad3a <strlen>
 8085638:	4629      	mov	r1, r5
 808563a:	4602      	mov	r2, r0
 808563c:	4620      	mov	r0, r4
 808563e:	f7ff ffd7 	bl	80855f0 <_ZN6String4copyEPKcj>
}
 8085642:	4620      	mov	r0, r4
 8085644:	bd38      	pop	{r3, r4, r5, pc}

08085646 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 8085646:	b538      	push	{r3, r4, r5, lr}
 8085648:	4605      	mov	r5, r0
	if (buffer) {
 808564a:	6800      	ldr	r0, [r0, #0]
{
 808564c:	460c      	mov	r4, r1
	if (buffer) {
 808564e:	b168      	cbz	r0, 808566c <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 8085650:	686a      	ldr	r2, [r5, #4]
 8085652:	688b      	ldr	r3, [r1, #8]
 8085654:	429a      	cmp	r2, r3
 8085656:	d307      	bcc.n	8085668 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 8085658:	6809      	ldr	r1, [r1, #0]
 808565a:	f005 fb4a 	bl	808acf2 <strcpy>
			len = rhs.len;
 808565e:	68a3      	ldr	r3, [r4, #8]
 8085660:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 8085662:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 8085664:	60a3      	str	r3, [r4, #8]
}
 8085666:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 8085668:	f7ff fd6a 	bl	8085140 <free>
	buffer = rhs.buffer;
 808566c:	6823      	ldr	r3, [r4, #0]
 808566e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 8085670:	6863      	ldr	r3, [r4, #4]
 8085672:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 8085674:	68a3      	ldr	r3, [r4, #8]
 8085676:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 8085678:	2300      	movs	r3, #0
	rhs.capacity = 0;
 808567a:	e9c4 3300 	strd	r3, r3, [r4]
 808567e:	e7f1      	b.n	8085664 <_ZN6String4moveERS_+0x1e>

08085680 <_ZN6StringC1EOS_>:
	buffer = NULL;
 8085680:	2300      	movs	r3, #0
String::String(String &&rval)
 8085682:	b510      	push	{r4, lr}
 8085684:	4604      	mov	r4, r0
	capacity = 0;
 8085686:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 808568a:	6083      	str	r3, [r0, #8]
	flags = 0;
 808568c:	7303      	strb	r3, [r0, #12]
	move(rval);
 808568e:	f7ff ffda 	bl	8085646 <_ZN6String4moveERS_>
}
 8085692:	4620      	mov	r0, r4
 8085694:	bd10      	pop	{r4, pc}

08085696 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8085696:	4288      	cmp	r0, r1
{
 8085698:	b510      	push	{r4, lr}
 808569a:	460b      	mov	r3, r1
 808569c:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 808569e:	d004      	beq.n	80856aa <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80856a0:	6809      	ldr	r1, [r1, #0]
 80856a2:	b121      	cbz	r1, 80856ae <_ZN6StringaSERKS_+0x18>
 80856a4:	689a      	ldr	r2, [r3, #8]
 80856a6:	f7ff ffa3 	bl	80855f0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80856aa:	4620      	mov	r0, r4
 80856ac:	bd10      	pop	{r4, pc}
	else invalidate();
 80856ae:	f7ff ff74 	bl	808559a <_ZN6String10invalidateEv>
 80856b2:	e7fa      	b.n	80856aa <_ZN6StringaSERKS_+0x14>

080856b4 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 80856b4:	2300      	movs	r3, #0
String::String(const String &value)
 80856b6:	b510      	push	{r4, lr}
 80856b8:	4604      	mov	r4, r0
	capacity = 0;
 80856ba:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80856be:	6083      	str	r3, [r0, #8]
	flags = 0;
 80856c0:	7303      	strb	r3, [r0, #12]
	*this = value;
 80856c2:	f7ff ffe8 	bl	8085696 <_ZN6StringaSERKS_>
}
 80856c6:	4620      	mov	r0, r4
 80856c8:	bd10      	pop	{r4, pc}

080856ca <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 80856ca:	4288      	cmp	r0, r1
{
 80856cc:	b510      	push	{r4, lr}
 80856ce:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 80856d0:	d001      	beq.n	80856d6 <_ZN6StringaSEOS_+0xc>
 80856d2:	f7ff ffb8 	bl	8085646 <_ZN6String4moveERS_>
	return *this;
}
 80856d6:	4620      	mov	r0, r4
 80856d8:	bd10      	pop	{r4, pc}

080856da <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80856da:	b538      	push	{r3, r4, r5, lr}
 80856dc:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80856de:	460c      	mov	r4, r1
 80856e0:	b149      	cbz	r1, 80856f6 <_ZN6StringaSEPKc+0x1c>
 80856e2:	4608      	mov	r0, r1
 80856e4:	f005 fb29 	bl	808ad3a <strlen>
 80856e8:	4621      	mov	r1, r4
 80856ea:	4602      	mov	r2, r0
 80856ec:	4628      	mov	r0, r5
 80856ee:	f7ff ff7f 	bl	80855f0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80856f2:	4628      	mov	r0, r5
 80856f4:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 80856f6:	f7ff ff50 	bl	808559a <_ZN6String10invalidateEv>
 80856fa:	e7fa      	b.n	80856f2 <_ZN6StringaSEPKc+0x18>

080856fc <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80856fc:	b570      	push	{r4, r5, r6, lr}
 80856fe:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 8085700:	460e      	mov	r6, r1
 8085702:	b909      	cbnz	r1, 8085708 <_ZN6String6concatEPKcj+0xc>
 8085704:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 8085706:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 8085708:	b16a      	cbz	r2, 8085726 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 808570a:	6884      	ldr	r4, [r0, #8]
 808570c:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 808570e:	4621      	mov	r1, r4
 8085710:	f7ff ff5a 	bl	80855c8 <_ZN6String7reserveEj>
 8085714:	2800      	cmp	r0, #0
 8085716:	d0f5      	beq.n	8085704 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 8085718:	6828      	ldr	r0, [r5, #0]
 808571a:	68ab      	ldr	r3, [r5, #8]
 808571c:	4631      	mov	r1, r6
 808571e:	4418      	add	r0, r3
 8085720:	f005 fae7 	bl	808acf2 <strcpy>
	len = newlen;
 8085724:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 8085726:	2001      	movs	r0, #1
 8085728:	e7ed      	b.n	8085706 <_ZN6String6concatEPKcj+0xa>

0808572a <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 808572a:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 808572c:	688a      	ldr	r2, [r1, #8]
 808572e:	6809      	ldr	r1, [r1, #0]
{
 8085730:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 8085732:	f7ff ffe3 	bl	80856fc <_ZN6String6concatEPKcj>
 8085736:	b910      	cbnz	r0, 808573e <_ZplRK15StringSumHelperRK6String+0x14>
 8085738:	4620      	mov	r0, r4
 808573a:	f7ff ff2e 	bl	808559a <_ZN6String10invalidateEv>
	return a;
}
 808573e:	4620      	mov	r0, r4
 8085740:	bd10      	pop	{r4, pc}

08085742 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 8085742:	b538      	push	{r3, r4, r5, lr}
 8085744:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 8085746:	460d      	mov	r5, r1
 8085748:	b921      	cbnz	r1, 8085754 <_ZplRK15StringSumHelperPKc+0x12>
 808574a:	4620      	mov	r0, r4
 808574c:	f7ff ff25 	bl	808559a <_ZN6String10invalidateEv>
	return a;
}
 8085750:	4620      	mov	r0, r4
 8085752:	bd38      	pop	{r3, r4, r5, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 8085754:	4608      	mov	r0, r1
 8085756:	f005 faf0 	bl	808ad3a <strlen>
 808575a:	4629      	mov	r1, r5
 808575c:	4602      	mov	r2, r0
 808575e:	4620      	mov	r0, r4
 8085760:	f7ff ffcc 	bl	80856fc <_ZN6String6concatEPKcj>
 8085764:	2800      	cmp	r0, #0
 8085766:	d0f0      	beq.n	808574a <_ZplRK15StringSumHelperPKc+0x8>
 8085768:	e7f2      	b.n	8085750 <_ZplRK15StringSumHelperPKc+0xe>

0808576a <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 808576a:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 808576c:	6882      	ldr	r2, [r0, #8]
 808576e:	b93a      	cbnz	r2, 8085780 <_ZNK6String6equalsEPKc+0x16>
 8085770:	b121      	cbz	r1, 808577c <_ZNK6String6equalsEPKc+0x12>
 8085772:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
 8085774:	fab0 f080 	clz	r0, r0
 8085778:	0940      	lsrs	r0, r0, #5
 808577a:	e000      	b.n	808577e <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
 808577c:	2001      	movs	r0, #1
}
 808577e:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 8085780:	6800      	ldr	r0, [r0, #0]
 8085782:	b909      	cbnz	r1, 8085788 <_ZNK6String6equalsEPKc+0x1e>
 8085784:	7800      	ldrb	r0, [r0, #0]
 8085786:	e7f5      	b.n	8085774 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
 8085788:	f005 faa9 	bl	808acde <strcmp>
 808578c:	e7f2      	b.n	8085774 <_ZNK6String6equalsEPKc+0xa>

0808578e <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
 808578e:	4613      	mov	r3, r2
 8085790:	b510      	push	{r4, lr}
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
 8085792:	688a      	ldr	r2, [r1, #8]
 8085794:	6884      	ldr	r4, [r0, #8]
 8085796:	1aa4      	subs	r4, r4, r2
 8085798:	429c      	cmp	r4, r3
 808579a:	d30a      	bcc.n	80857b2 <_ZNK6String10startsWithERKS_j+0x24>
 808579c:	6800      	ldr	r0, [r0, #0]
 808579e:	b138      	cbz	r0, 80857b0 <_ZNK6String10startsWithERKS_j+0x22>
 80857a0:	6809      	ldr	r1, [r1, #0]
 80857a2:	b141      	cbz	r1, 80857b6 <_ZNK6String10startsWithERKS_j+0x28>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
 80857a4:	4418      	add	r0, r3
 80857a6:	f005 fad0 	bl	808ad4a <strncmp>
 80857aa:	fab0 f080 	clz	r0, r0
 80857ae:	0940      	lsrs	r0, r0, #5
}
 80857b0:	bd10      	pop	{r4, pc}
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
 80857b2:	2000      	movs	r0, #0
 80857b4:	e7fc      	b.n	80857b0 <_ZNK6String10startsWithERKS_j+0x22>
 80857b6:	4608      	mov	r0, r1
 80857b8:	e7fa      	b.n	80857b0 <_ZNK6String10startsWithERKS_j+0x22>

080857ba <_ZNK6String10startsWithERKS_>:
	if (len < s2.len) return 0;
 80857ba:	6882      	ldr	r2, [r0, #8]
 80857bc:	688b      	ldr	r3, [r1, #8]
 80857be:	429a      	cmp	r2, r3
 80857c0:	d302      	bcc.n	80857c8 <_ZNK6String10startsWithERKS_+0xe>
	return startsWith(s2, 0);
 80857c2:	2200      	movs	r2, #0
 80857c4:	f7ff bfe3 	b.w	808578e <_ZNK6String10startsWithERKS_j>
}
 80857c8:	2000      	movs	r0, #0
 80857ca:	4770      	bx	lr

080857cc <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
 80857cc:	6883      	ldr	r3, [r0, #8]
 80857ce:	428b      	cmp	r3, r1
 80857d0:	d903      	bls.n	80857da <_ZNK6StringixEj+0xe>
 80857d2:	6800      	ldr	r0, [r0, #0]
 80857d4:	b110      	cbz	r0, 80857dc <_ZNK6StringixEj+0x10>
	return buffer[index];
 80857d6:	5c40      	ldrb	r0, [r0, r1]
 80857d8:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
 80857da:	2000      	movs	r0, #0
}
 80857dc:	4770      	bx	lr

080857de <_ZNK6String6charAtEj>:
	return operator[](loc);
 80857de:	f7ff bff5 	b.w	80857cc <_ZNK6StringixEj>

080857e2 <_ZNK6String7indexOfEcj>:
{
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
 80857e2:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
 80857e4:	6883      	ldr	r3, [r0, #8]
 80857e6:	4293      	cmp	r3, r2
 80857e8:	d906      	bls.n	80857f8 <_ZNK6String7indexOfEcj+0x16>
	const char* temp = strchr(buffer + fromIndex, ch);
 80857ea:	6804      	ldr	r4, [r0, #0]
 80857ec:	18a0      	adds	r0, r4, r2
 80857ee:	f005 fa5f 	bl	808acb0 <strchr>
	if (temp == NULL) return -1;
 80857f2:	b108      	cbz	r0, 80857f8 <_ZNK6String7indexOfEcj+0x16>
	return temp - buffer;
 80857f4:	1b00      	subs	r0, r0, r4
}
 80857f6:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
 80857f8:	f04f 30ff 	mov.w	r0, #4294967295
 80857fc:	e7fb      	b.n	80857f6 <_ZNK6String7indexOfEcj+0x14>

080857fe <_ZNK6String7indexOfEc>:
	return indexOf(c, 0);
 80857fe:	2200      	movs	r2, #0
 8085800:	f7ff bfef 	b.w	80857e2 <_ZNK6String7indexOfEcj>

08085804 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 8085804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8085806:	461d      	mov	r5, r3
	if (left > right) {
 8085808:	429a      	cmp	r2, r3
 808580a:	bf88      	it	hi
 808580c:	4613      	movhi	r3, r2
{
 808580e:	460f      	mov	r7, r1
 8085810:	4614      	mov	r4, r2
	if (left > right) {
 8085812:	bf88      	it	hi
 8085814:	462c      	movhi	r4, r5
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 8085816:	490b      	ldr	r1, [pc, #44]	; (8085844 <_ZNK6String9substringEjj+0x40>)
	if (left > right) {
 8085818:	bf88      	it	hi
 808581a:	461d      	movhi	r5, r3
{
 808581c:	4606      	mov	r6, r0
	String out;
 808581e:	f7ff feff 	bl	8085620 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
 8085822:	68bb      	ldr	r3, [r7, #8]
 8085824:	42a3      	cmp	r3, r4
 8085826:	d30a      	bcc.n	808583e <_ZNK6String9substringEjj+0x3a>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
 8085828:	6839      	ldr	r1, [r7, #0]
 808582a:	42ab      	cmp	r3, r5
 808582c:	bf94      	ite	ls
 808582e:	ebc4 0203 	rsbls	r2, r4, r3
 8085832:	ebc4 0205 	rsbhi	r2, r4, r5
 8085836:	4630      	mov	r0, r6
 8085838:	4421      	add	r1, r4
 808583a:	f7ff fed9 	bl	80855f0 <_ZN6String4copyEPKcj>
	return out;
}
 808583e:	4630      	mov	r0, r6
 8085840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8085842:	bf00      	nop
 8085844:	0808b6b8 	.word	0x0808b6b8

08085848 <_ZNK6String9substringEj>:
{
 8085848:	b510      	push	{r4, lr}
 808584a:	4604      	mov	r4, r0
	return substring(left, len);
 808584c:	688b      	ldr	r3, [r1, #8]
 808584e:	f7ff ffd9 	bl	8085804 <_ZNK6String9substringEjj>
}
 8085852:	4620      	mov	r0, r4
 8085854:	bd10      	pop	{r4, pc}

08085856 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 8085856:	6800      	ldr	r0, [r0, #0]
 8085858:	b108      	cbz	r0, 808585e <_ZNK6String5toIntEv+0x8>
 808585a:	f005 b9b9 	b.w	808abd0 <atol>
	return 0;
}
 808585e:	4770      	bx	lr

08085860 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
 8085860:	b40e      	push	{r1, r2, r3}
 8085862:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
 8085864:	ad09      	add	r5, sp, #36	; 0x24
 8085866:	f855 7b04 	ldr.w	r7, [r5], #4
 808586a:	4604      	mov	r4, r0
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 808586c:	462b      	mov	r3, r5
 808586e:	463a      	mov	r2, r7
 8085870:	2105      	movs	r1, #5
 8085872:	a802      	add	r0, sp, #8
    va_start(marker, fmt);
 8085874:	9501      	str	r5, [sp, #4]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 8085876:	f7ff fc83 	bl	8085180 <vsnprintf>
 808587a:	4606      	mov	r6, r0
    va_end(marker);

    String result;
 808587c:	490b      	ldr	r1, [pc, #44]	; (80858ac <_ZN6String6formatEPKcz+0x4c>)
 808587e:	4620      	mov	r0, r4
 8085880:	f7ff fece 	bl	8085620 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
 8085884:	4631      	mov	r1, r6
 8085886:	4620      	mov	r0, r4
 8085888:	f7ff fe9e 	bl	80855c8 <_ZN6String7reserveEj>
    if (result.buffer) {
 808588c:	6820      	ldr	r0, [r4, #0]
 808588e:	b130      	cbz	r0, 808589e <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 8085890:	462b      	mov	r3, r5
 8085892:	463a      	mov	r2, r7
 8085894:	1c71      	adds	r1, r6, #1
        va_start(marker, fmt);
 8085896:	9501      	str	r5, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 8085898:	f7ff fc72 	bl	8085180 <vsnprintf>
        va_end(marker);
        result.len = n;
 808589c:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
 808589e:	4620      	mov	r0, r4
 80858a0:	b004      	add	sp, #16
 80858a2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80858a6:	b003      	add	sp, #12
 80858a8:	4770      	bx	lr
 80858aa:	bf00      	nop
 80858ac:	0808b6b8 	.word	0x0808b6b8

080858b0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80858b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80858b2:	4606      	mov	r6, r0
 80858b4:	460d      	mov	r5, r1
  size_t n = 0;
 80858b6:	2400      	movs	r4, #0
 80858b8:	188f      	adds	r7, r1, r2
  while (size--) {
 80858ba:	42bd      	cmp	r5, r7
 80858bc:	d00c      	beq.n	80858d8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80858be:	6833      	ldr	r3, [r6, #0]
 80858c0:	4630      	mov	r0, r6
 80858c2:	689b      	ldr	r3, [r3, #8]
 80858c4:	f815 1b01 	ldrb.w	r1, [r5], #1
 80858c8:	4798      	blx	r3
     if (chunk>=0)
 80858ca:	1e03      	subs	r3, r0, #0
 80858cc:	db01      	blt.n	80858d2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80858ce:	441c      	add	r4, r3
  while (size--) {
 80858d0:	e7f3      	b.n	80858ba <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80858d2:	2c00      	cmp	r4, #0
 80858d4:	bf08      	it	eq
 80858d6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80858d8:	4620      	mov	r0, r4
 80858da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080858dc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80858dc:	b570      	push	{r4, r5, r6, lr}
 80858de:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80858e0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80858e2:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80858e4:	b149      	cbz	r1, 80858fa <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80858e6:	f005 fa28 	bl	808ad3a <strlen>
 80858ea:	682b      	ldr	r3, [r5, #0]
 80858ec:	4602      	mov	r2, r0
 80858ee:	4621      	mov	r1, r4
 80858f0:	4628      	mov	r0, r5
    }
 80858f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80858f6:	68db      	ldr	r3, [r3, #12]
 80858f8:	4718      	bx	r3
    }
 80858fa:	bd70      	pop	{r4, r5, r6, pc}

080858fc <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 80858fc:	b508      	push	{r3, lr}
  return write(str);
 80858fe:	f7ff ffed 	bl	80858dc <_ZN5Print5writeEPKc>
}
 8085902:	bd08      	pop	{r3, pc}

08085904 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 8085904:	6803      	ldr	r3, [r0, #0]
 8085906:	689b      	ldr	r3, [r3, #8]
 8085908:	4718      	bx	r3

0808590a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 808590a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 808590c:	210d      	movs	r1, #13
{
 808590e:	4605      	mov	r5, r0
  size_t n = print('\r');
 8085910:	f7ff fff8 	bl	8085904 <_ZN5Print5printEc>
  n += print('\n');
 8085914:	210a      	movs	r1, #10
  size_t n = print('\r');
 8085916:	4604      	mov	r4, r0
  n += print('\n');
 8085918:	4628      	mov	r0, r5
 808591a:	f7ff fff3 	bl	8085904 <_ZN5Print5printEc>
  return n;
}
 808591e:	4420      	add	r0, r4
 8085920:	bd38      	pop	{r3, r4, r5, pc}

08085922 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 8085922:	b538      	push	{r3, r4, r5, lr}
 8085924:	4605      	mov	r5, r0
  return write(str);
 8085926:	f7ff ffd9 	bl	80858dc <_ZN5Print5writeEPKc>
 808592a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 808592c:	4628      	mov	r0, r5
 808592e:	f7ff ffec 	bl	808590a <_ZN5Print7printlnEv>
  return n;
}
 8085932:	4420      	add	r0, r4
 8085934:	bd38      	pop	{r3, r4, r5, pc}

08085936 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8085936:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8085938:	2a01      	cmp	r2, #1
 808593a:	bf98      	it	ls
 808593c:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 808593e:	b530      	push	{r4, r5, lr}
 8085940:	b08b      	sub	sp, #44	; 0x2c
 8085942:	460c      	mov	r4, r1
  *str = '\0';
 8085944:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 8085948:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 808594a:	4625      	mov	r5, r4
 808594c:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 8085950:	fb04 5312 	mls	r3, r4, r2, r5
 8085954:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8085956:	2b09      	cmp	r3, #9
 8085958:	bf94      	ite	ls
 808595a:	3330      	addls	r3, #48	; 0x30
 808595c:	3337      	addhi	r3, #55	; 0x37
 808595e:	b2db      	uxtb	r3, r3
  } while(n);
 8085960:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8085962:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 8085966:	d9f0      	bls.n	808594a <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 8085968:	f7ff ffb8 	bl	80858dc <_ZN5Print5writeEPKc>
}
 808596c:	b00b      	add	sp, #44	; 0x2c
 808596e:	bd30      	pop	{r4, r5, pc}

08085970 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 8085970:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8085974:	4605      	mov	r5, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 8085976:	4619      	mov	r1, r3
 8085978:	4610      	mov	r0, r2
{
 808597a:	4692      	mov	sl, r2
 808597c:	461f      	mov	r7, r3
 808597e:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
  if (isnan(number)) return print("nan");
 8085982:	f004 fd3d 	bl	808a400 <__aeabi_dcmpun>
 8085986:	b140      	cbz	r0, 808599a <_ZN5Print10printFloatEdh+0x2a>
  return write(str);
 8085988:	4951      	ldr	r1, [pc, #324]	; (8085ad0 <_ZN5Print10printFloatEdh+0x160>)
 808598a:	4628      	mov	r0, r5
 808598c:	f7ff ffa6 	bl	80858dc <_ZN5Print5writeEPKc>
 8085990:	4604      	mov	r4, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
 8085992:	4620      	mov	r0, r4
 8085994:	b003      	add	sp, #12
 8085996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 808599a:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
 808599e:	f04f 32ff 	mov.w	r2, #4294967295
 80859a2:	4650      	mov	r0, sl
 80859a4:	4621      	mov	r1, r4
 80859a6:	4b4b      	ldr	r3, [pc, #300]	; (8085ad4 <_ZN5Print10printFloatEdh+0x164>)
 80859a8:	f004 fd2a 	bl	808a400 <__aeabi_dcmpun>
 80859ac:	b948      	cbnz	r0, 80859c2 <_ZN5Print10printFloatEdh+0x52>
 80859ae:	f04f 32ff 	mov.w	r2, #4294967295
 80859b2:	4650      	mov	r0, sl
 80859b4:	4621      	mov	r1, r4
 80859b6:	4b47      	ldr	r3, [pc, #284]	; (8085ad4 <_ZN5Print10printFloatEdh+0x164>)
 80859b8:	f004 fd04 	bl	808a3c4 <__aeabi_dcmple>
 80859bc:	b908      	cbnz	r0, 80859c2 <_ZN5Print10printFloatEdh+0x52>
  return write(str);
 80859be:	4946      	ldr	r1, [pc, #280]	; (8085ad8 <_ZN5Print10printFloatEdh+0x168>)
 80859c0:	e7e3      	b.n	808598a <_ZN5Print10printFloatEdh+0x1a>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80859c2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80859c6:	4650      	mov	r0, sl
 80859c8:	4639      	mov	r1, r7
 80859ca:	4b44      	ldr	r3, [pc, #272]	; (8085adc <_ZN5Print10printFloatEdh+0x16c>)
 80859cc:	f004 fd0e 	bl	808a3ec <__aeabi_dcmpgt>
 80859d0:	b108      	cbz	r0, 80859d6 <_ZN5Print10printFloatEdh+0x66>
  return write(str);
 80859d2:	4943      	ldr	r1, [pc, #268]	; (8085ae0 <_ZN5Print10printFloatEdh+0x170>)
 80859d4:	e7d9      	b.n	808598a <_ZN5Print10printFloatEdh+0x1a>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80859d6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80859da:	4650      	mov	r0, sl
 80859dc:	4639      	mov	r1, r7
 80859de:	4b41      	ldr	r3, [pc, #260]	; (8085ae4 <_ZN5Print10printFloatEdh+0x174>)
 80859e0:	f004 fce6 	bl	808a3b0 <__aeabi_dcmplt>
 80859e4:	2800      	cmp	r0, #0
 80859e6:	d1f4      	bne.n	80859d2 <_ZN5Print10printFloatEdh+0x62>
  if (number < 0.0)
 80859e8:	2200      	movs	r2, #0
 80859ea:	2300      	movs	r3, #0
 80859ec:	4650      	mov	r0, sl
 80859ee:	4639      	mov	r1, r7
 80859f0:	f004 fcde 	bl	808a3b0 <__aeabi_dcmplt>
 80859f4:	4604      	mov	r4, r0
 80859f6:	b130      	cbz	r0, 8085a06 <_ZN5Print10printFloatEdh+0x96>
     n += print('-');
 80859f8:	212d      	movs	r1, #45	; 0x2d
 80859fa:	4628      	mov	r0, r5
 80859fc:	f7ff ff82 	bl	8085904 <_ZN5Print5printEc>
 8085a00:	4604      	mov	r4, r0
     number = -number;
 8085a02:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
  size_t n = 0;
 8085a06:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
 8085a0a:	2000      	movs	r0, #0
    rounding /= 10.0;
 8085a0c:	f04f 0800 	mov.w	r8, #0
  double rounding = 0.5;
 8085a10:	4935      	ldr	r1, [pc, #212]	; (8085ae8 <_ZN5Print10printFloatEdh+0x178>)
    rounding /= 10.0;
 8085a12:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8085aec <_ZN5Print10printFloatEdh+0x17c>
  for (uint8_t i=0; i<digits; ++i)
 8085a16:	fa5f f38b 	uxtb.w	r3, fp
 8085a1a:	429e      	cmp	r6, r3
 8085a1c:	d906      	bls.n	8085a2c <_ZN5Print10printFloatEdh+0xbc>
    rounding /= 10.0;
 8085a1e:	4642      	mov	r2, r8
 8085a20:	464b      	mov	r3, r9
 8085a22:	f004 fb7d 	bl	808a120 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
 8085a26:	f10b 0b01 	add.w	fp, fp, #1
 8085a2a:	e7f4      	b.n	8085a16 <_ZN5Print10printFloatEdh+0xa6>
  number += rounding;
 8085a2c:	463b      	mov	r3, r7
 8085a2e:	4652      	mov	r2, sl
 8085a30:	f004 f896 	bl	8089b60 <__adddf3>
 8085a34:	4689      	mov	r9, r1
 8085a36:	4680      	mov	r8, r0
  unsigned long int_part = (unsigned long)number;
 8085a38:	f004 fd20 	bl	808a47c <__aeabi_d2uiz>
 8085a3c:	4607      	mov	r7, r0
  double remainder = number - (double)int_part;
 8085a3e:	f004 f9cb 	bl	8089dd8 <__aeabi_ui2d>
 8085a42:	4602      	mov	r2, r0
 8085a44:	460b      	mov	r3, r1
 8085a46:	4640      	mov	r0, r8
 8085a48:	4649      	mov	r1, r9
 8085a4a:	f004 f887 	bl	8089b5c <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 8085a4e:	220a      	movs	r2, #10
 8085a50:	4680      	mov	r8, r0
 8085a52:	4689      	mov	r9, r1
 8085a54:	4628      	mov	r0, r5
 8085a56:	4639      	mov	r1, r7
 8085a58:	f7ff ff6d 	bl	8085936 <_ZN5Print11printNumberEmh>
  n += print(int_part);
 8085a5c:	4404      	add	r4, r0
  if (digits > 0) {
 8085a5e:	2e00      	cmp	r6, #0
 8085a60:	d097      	beq.n	8085992 <_ZN5Print10printFloatEdh+0x22>
  return write(str);
 8085a62:	4628      	mov	r0, r5
 8085a64:	4922      	ldr	r1, [pc, #136]	; (8085af0 <_ZN5Print10printFloatEdh+0x180>)
 8085a66:	f7ff ff39 	bl	80858dc <_ZN5Print5writeEPKc>
    remainder *= 10.0;
 8085a6a:	f04f 0a00 	mov.w	sl, #0
 8085a6e:	f8df b07c 	ldr.w	fp, [pc, #124]	; 8085aec <_ZN5Print10printFloatEdh+0x17c>
    n += print(".");
 8085a72:	4404      	add	r4, r0
  while (digits-- > 0)
 8085a74:	2e00      	cmp	r6, #0
 8085a76:	d08c      	beq.n	8085992 <_ZN5Print10printFloatEdh+0x22>
    remainder *= 10.0;
 8085a78:	4652      	mov	r2, sl
 8085a7a:	465b      	mov	r3, fp
 8085a7c:	4640      	mov	r0, r8
 8085a7e:	4649      	mov	r1, r9
 8085a80:	f004 fa24 	bl	8089ecc <__aeabi_dmul>
 8085a84:	4680      	mov	r8, r0
 8085a86:	4689      	mov	r9, r1
    int toPrint = int(remainder);
 8085a88:	f004 fcd0 	bl	808a42c <__aeabi_d2iz>
        if (n < 0 && base == 10) {
 8085a8c:	1e07      	subs	r7, r0, #0
 8085a8e:	da1b      	bge.n	8085ac8 <_ZN5Print10printFloatEdh+0x158>
            t = print('-');
 8085a90:	212d      	movs	r1, #45	; 0x2d
 8085a92:	4628      	mov	r0, r5
 8085a94:	f7ff ff36 	bl	8085904 <_ZN5Print5printEc>
 8085a98:	4603      	mov	r3, r0
            val = -n;
 8085a9a:	4279      	negs	r1, r7
        return printNumber(val, base) + t;
 8085a9c:	220a      	movs	r2, #10
 8085a9e:	4628      	mov	r0, r5
 8085aa0:	9301      	str	r3, [sp, #4]
 8085aa2:	f7ff ff48 	bl	8085936 <_ZN5Print11printNumberEmh>
 8085aa6:	9b01      	ldr	r3, [sp, #4]
 8085aa8:	3e01      	subs	r6, #1
 8085aaa:	4403      	add	r3, r0
    remainder -= toPrint;
 8085aac:	4638      	mov	r0, r7
    n += print(toPrint);
 8085aae:	441c      	add	r4, r3
    remainder -= toPrint;
 8085ab0:	f004 f9a2 	bl	8089df8 <__aeabi_i2d>
 8085ab4:	4602      	mov	r2, r0
 8085ab6:	460b      	mov	r3, r1
 8085ab8:	4640      	mov	r0, r8
 8085aba:	4649      	mov	r1, r9
 8085abc:	f004 f84e 	bl	8089b5c <__aeabi_dsub>
 8085ac0:	b2f6      	uxtb	r6, r6
 8085ac2:	4680      	mov	r8, r0
 8085ac4:	4689      	mov	r9, r1
  while (digits-- > 0)
 8085ac6:	e7d5      	b.n	8085a74 <_ZN5Print10printFloatEdh+0x104>
            val = n;
 8085ac8:	4639      	mov	r1, r7
        size_t t = 0;
 8085aca:	2300      	movs	r3, #0
 8085acc:	e7e6      	b.n	8085a9c <_ZN5Print10printFloatEdh+0x12c>
 8085ace:	bf00      	nop
 8085ad0:	0808bb43 	.word	0x0808bb43
 8085ad4:	7fefffff 	.word	0x7fefffff
 8085ad8:	0808bb47 	.word	0x0808bb47
 8085adc:	41efffff 	.word	0x41efffff
 8085ae0:	0808bb4b 	.word	0x0808bb4b
 8085ae4:	c1efffff 	.word	0xc1efffff
 8085ae8:	3fe00000 	.word	0x3fe00000
 8085aec:	40240000 	.word	0x40240000
 8085af0:	0808b477 	.word	0x0808b477

08085af4 <_ZN5Print7printlnEdi>:
{
 8085af4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return printFloat(n, digits);
 8085af6:	f89d 1018 	ldrb.w	r1, [sp, #24]
{
 8085afa:	4605      	mov	r5, r0
  return printFloat(n, digits);
 8085afc:	9100      	str	r1, [sp, #0]
 8085afe:	f7ff ff37 	bl	8085970 <_ZN5Print10printFloatEdh>
 8085b02:	4604      	mov	r4, r0
  n += println();
 8085b04:	4628      	mov	r0, r5
 8085b06:	f7ff ff00 	bl	808590a <_ZN5Print7printlnEv>
}
 8085b0a:	4420      	add	r0, r4
 8085b0c:	b003      	add	sp, #12
 8085b0e:	bd30      	pop	{r4, r5, pc}

08085b10 <_ZN5Print7printlnEfi>:
{
 8085b10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8085b12:	4604      	mov	r4, r0
    return println((double)num, digits);
 8085b14:	4608      	mov	r0, r1
{
 8085b16:	4615      	mov	r5, r2
    return println((double)num, digits);
 8085b18:	f004 f980 	bl	8089e1c <__aeabi_f2d>
 8085b1c:	9500      	str	r5, [sp, #0]
 8085b1e:	4602      	mov	r2, r0
 8085b20:	460b      	mov	r3, r1
 8085b22:	4620      	mov	r0, r4
 8085b24:	f7ff ffe6 	bl	8085af4 <_ZN5Print7printlnEdi>
}
 8085b28:	b003      	add	sp, #12
 8085b2a:	bd30      	pop	{r4, r5, pc}

08085b2c <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 8085b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8085b30:	b086      	sub	sp, #24
 8085b32:	af00      	add	r7, sp, #0
 8085b34:	4605      	mov	r5, r0
 8085b36:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 8085b38:	1d38      	adds	r0, r7, #4
 8085b3a:	2114      	movs	r1, #20
{
 8085b3c:	4614      	mov	r4, r2
    va_copy(args2, args);
 8085b3e:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 8085b40:	f7ff fb1e 	bl	8085180 <vsnprintf>

    if (n<bufsize)
 8085b44:	2813      	cmp	r0, #19
 8085b46:	d80e      	bhi.n	8085b66 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 8085b48:	4628      	mov	r0, r5
 8085b4a:	1d39      	adds	r1, r7, #4
 8085b4c:	f7ff fec6 	bl	80858dc <_ZN5Print5writeEPKc>
 8085b50:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 8085b52:	b11e      	cbz	r6, 8085b5c <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 8085b54:	4628      	mov	r0, r5
 8085b56:	f7ff fed8 	bl	808590a <_ZN5Print7printlnEv>
 8085b5a:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 8085b5c:	4620      	mov	r0, r4
 8085b5e:	3718      	adds	r7, #24
 8085b60:	46bd      	mov	sp, r7
 8085b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 8085b66:	f100 0308 	add.w	r3, r0, #8
 8085b6a:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 8085b6e:	46e8      	mov	r8, sp
        char bigger[n+1];
 8085b70:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 8085b74:	4622      	mov	r2, r4
 8085b76:	1c41      	adds	r1, r0, #1
 8085b78:	683b      	ldr	r3, [r7, #0]
 8085b7a:	4668      	mov	r0, sp
 8085b7c:	f7ff fb00 	bl	8085180 <vsnprintf>
  return write(str);
 8085b80:	4669      	mov	r1, sp
 8085b82:	4628      	mov	r0, r5
 8085b84:	f7ff feaa 	bl	80858dc <_ZN5Print5writeEPKc>
 8085b88:	4604      	mov	r4, r0
 8085b8a:	46c5      	mov	sp, r8
 8085b8c:	e7e1      	b.n	8085b52 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

08085b8e <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 8085b8e:	6880      	ldr	r0, [r0, #8]
 8085b90:	6803      	ldr	r3, [r0, #0]
 8085b92:	68db      	ldr	r3, [r3, #12]
 8085b94:	4718      	bx	r3

08085b96 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 8085b96:	4770      	bx	lr

08085b98 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 8085b98:	4608      	mov	r0, r1
 8085b9a:	b111      	cbz	r1, 8085ba2 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 8085b9c:	680b      	ldr	r3, [r1, #0]
 8085b9e:	685b      	ldr	r3, [r3, #4]
 8085ba0:	4718      	bx	r3
}
 8085ba2:	4770      	bx	lr

08085ba4 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 8085ba4:	4770      	bx	lr

08085ba6 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 8085ba6:	4770      	bx	lr

08085ba8 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 8085ba8:	4770      	bx	lr

08085baa <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
 8085baa:	b538      	push	{r3, r4, r5, lr}
 8085bac:	4604      	mov	r4, r0
 8085bae:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 8085bb0:	6800      	ldr	r0, [r0, #0]
 8085bb2:	212e      	movs	r1, #46	; 0x2e
 8085bb4:	f005 f889 	bl	808acca <strchrnul>
    size = s - category;
 8085bb8:	6823      	ldr	r3, [r4, #0]
    const char *s = strchrnul(category, '.');
 8085bba:	4602      	mov	r2, r0
    size = s - category;
 8085bbc:	1ac0      	subs	r0, r0, r3
 8085bbe:	6028      	str	r0, [r5, #0]
    if (size) {
 8085bc0:	b120      	cbz	r0, 8085bcc <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x22>
        if (*s) {
 8085bc2:	7813      	ldrb	r3, [r2, #0]
 8085bc4:	b103      	cbz	r3, 8085bc8 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1e>
            ++s;
 8085bc6:	3201      	adds	r2, #1
 8085bc8:	6820      	ldr	r0, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8085bca:	6022      	str	r2, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
}
 8085bcc:	bd38      	pop	{r3, r4, r5, pc}

08085bce <_ZN5spark16JSONStreamWriterD0Ev>:
 8085bce:	b510      	push	{r4, lr}
 8085bd0:	4604      	mov	r4, r0
 8085bd2:	210c      	movs	r1, #12
 8085bd4:	f002 fc6b 	bl	80884ae <_ZdlPvj>
 8085bd8:	4620      	mov	r0, r4
 8085bda:	bd10      	pop	{r4, pc}

08085bdc <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 8085bdc:	b510      	push	{r4, lr}
 8085bde:	4604      	mov	r4, r0
 8085be0:	2104      	movs	r1, #4
 8085be2:	f002 fc64 	bl	80884ae <_ZdlPvj>
 8085be6:	4620      	mov	r0, r4
 8085be8:	bd10      	pop	{r4, pc}

08085bea <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 8085bea:	b510      	push	{r4, lr}
 8085bec:	4604      	mov	r4, r0
 8085bee:	2104      	movs	r1, #4
 8085bf0:	f002 fc5d 	bl	80884ae <_ZdlPvj>
 8085bf4:	4620      	mov	r0, r4
 8085bf6:	bd10      	pop	{r4, pc}

08085bf8 <_ZN14RecursiveMutex4lockEv.isra.0>:
    void lock() { os_mutex_recursive_lock(handle_); }
 8085bf8:	f7fe bfea 	b.w	8084bd0 <os_mutex_recursive_lock>

08085bfc <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 8085bfc:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 8085bfe:	f005 f86e 	bl	808acde <strcmp>
}
 8085c02:	fab0 f080 	clz	r0, r0
 8085c06:	0940      	lsrs	r0, r0, #5
 8085c08:	bd08      	pop	{r3, pc}

08085c0a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 8085c0a:	b510      	push	{r4, lr}
 8085c0c:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
 8085c0e:	f001 fdd5 	bl	80877bc <_Z16_fetch_usbserialv>
 8085c12:	4284      	cmp	r4, r0
 8085c14:	d105      	bne.n	8085c22 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 8085c16:	f001 fdd1 	bl	80877bc <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
 8085c1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        USBSerial1.end();
 8085c1e:	f001 bdb3 	b.w	8087788 <_ZN9USBSerial3endEv>
    if (stream == &USBSerial1) {
 8085c22:	f001 fe09 	bl	8087838 <_Z17_fetch_usbserial1v>
 8085c26:	4284      	cmp	r4, r0
 8085c28:	d102      	bne.n	8085c30 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x26>
        USBSerial1.end();
 8085c2a:	f001 fe05 	bl	8087838 <_Z17_fetch_usbserial1v>
 8085c2e:	e7f4      	b.n	8085c1a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x10>
    if (stream == &Serial1) {
 8085c30:	f001 ff72 	bl	8087b18 <_Z22__fetch_global_Serial1v>
 8085c34:	4284      	cmp	r4, r0
 8085c36:	d105      	bne.n	8085c44 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
        Serial1.end();
 8085c38:	f001 ff6e 	bl	8087b18 <_Z22__fetch_global_Serial1v>
}
 8085c3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 8085c40:	f001 bf67 	b.w	8087b12 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 8085c44:	b12c      	cbz	r4, 8085c52 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x48>
 8085c46:	6823      	ldr	r3, [r4, #0]
 8085c48:	4620      	mov	r0, r4
}
 8085c4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8085c4e:	685b      	ldr	r3, [r3, #4]
 8085c50:	4718      	bx	r3
 8085c52:	bd10      	pop	{r4, pc}

08085c54 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8085c54:	680b      	ldr	r3, [r1, #0]
 8085c56:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 8085c58:	684b      	ldr	r3, [r1, #4]
 8085c5a:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 8085c5c:	b113      	cbz	r3, 8085c64 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
 8085c5e:	685a      	ldr	r2, [r3, #4]
 8085c60:	3201      	adds	r2, #1
 8085c62:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8085c64:	4770      	bx	lr

08085c66 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 8085c66:	b538      	push	{r3, r4, r5, lr}
 8085c68:	4605      	mov	r5, r0
    return value(val, strlen(val));
 8085c6a:	4608      	mov	r0, r1
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 8085c6c:	460c      	mov	r4, r1
    return value(val, strlen(val));
 8085c6e:	f005 f864 	bl	808ad3a <strlen>
 8085c72:	4621      	mov	r1, r4
 8085c74:	4602      	mov	r2, r0
 8085c76:	4628      	mov	r0, r5
}
 8085c78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return value(val, strlen(val));
 8085c7c:	f002 ba75 	b.w	808816a <_ZN5spark10JSONWriter5valueEPKcj>

08085c80 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 8085c80:	b570      	push	{r4, r5, r6, lr}
 8085c82:	4604      	mov	r4, r0
    write(str, strlen(str));
 8085c84:	4608      	mov	r0, r1
inline void spark::StreamLogHandler::write(const char *str) {
 8085c86:	460d      	mov	r5, r1
    write(str, strlen(str));
 8085c88:	f005 f857 	bl	808ad3a <strlen>
 8085c8c:	6823      	ldr	r3, [r4, #0]
 8085c8e:	4602      	mov	r2, r0
 8085c90:	4629      	mov	r1, r5
 8085c92:	4620      	mov	r0, r4
}
 8085c94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    write(str, strlen(str));
 8085c98:	68db      	ldr	r3, [r3, #12]
 8085c9a:	4718      	bx	r3

08085c9c <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 8085c9c:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 8085c9e:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 8085ca0:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 8085ca4:	2201      	movs	r2, #1
 8085ca6:	68db      	ldr	r3, [r3, #12]
 8085ca8:	f10d 0107 	add.w	r1, sp, #7
 8085cac:	4798      	blx	r3
}
 8085cae:	b003      	add	sp, #12
 8085cb0:	f85d fb04 	ldr.w	pc, [sp], #4

08085cb4 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
 8085cb4:	b40e      	push	{r1, r2, r3}
 8085cb6:	b503      	push	{r0, r1, lr}
 8085cb8:	ab03      	add	r3, sp, #12
 8085cba:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
 8085cbe:	2100      	movs	r1, #0
 8085cc0:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
 8085cc2:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
 8085cc4:	f7ff ff32 	bl	8085b2c <_ZN5Print7vprintfEbPKcSt9__va_list>
}
 8085cc8:	b002      	add	sp, #8
 8085cca:	f85d eb04 	ldr.w	lr, [sp], #4
 8085cce:	b003      	add	sp, #12
 8085cd0:	4770      	bx	lr

08085cd2 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
 8085cd2:	680a      	ldr	r2, [r1, #0]
 8085cd4:	b510      	push	{r4, lr}
 8085cd6:	6002      	str	r2, [r0, #0]
 8085cd8:	684a      	ldr	r2, [r1, #4]
 8085cda:	6042      	str	r2, [r0, #4]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 8085cdc:	2200      	movs	r2, #0
 8085cde:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8085ce2:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
 8085ce4:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8085ce6:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 8085ce8:	6084      	str	r4, [r0, #8]
 8085cea:	68cc      	ldr	r4, [r1, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8085cec:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
 8085cee:	60c4      	str	r4, [r0, #12]
 8085cf0:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 8085cf2:	610a      	str	r2, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
 8085cf4:	6104      	str	r4, [r0, #16]
 8085cf6:	bd10      	pop	{r4, pc}

08085cf8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 8085cf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 8085cfc:	f04f 0a14 	mov.w	sl, #20
 8085d00:	e9d0 8400 	ldrd	r8, r4, [r0]
 8085d04:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 8085d06:	4645      	mov	r5, r8
 8085d08:	fb0a f404 	mul.w	r4, sl, r4
 8085d0c:	9300      	str	r3, [sp, #0]
 8085d0e:	4b17      	ldr	r3, [pc, #92]	; (8085d6c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 8085d10:	10a4      	asrs	r4, r4, #2
 8085d12:	435c      	muls	r4, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 8085d14:	2c00      	cmp	r4, #0
 8085d16:	dd21      	ble.n	8085d5c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
 8085d18:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 8085d1a:	fb0a f006 	mul.w	r0, sl, r6
 8085d1e:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 8085d22:	f8b9 b004 	ldrh.w	fp, [r9, #4]
 8085d26:	463a      	mov	r2, r7
 8085d28:	455f      	cmp	r7, fp
 8085d2a:	bf28      	it	cs
 8085d2c:	465a      	movcs	r2, fp
 8085d2e:	5828      	ldr	r0, [r5, r0]
 8085d30:	9101      	str	r1, [sp, #4]
 8085d32:	f005 f80a 	bl	808ad4a <strncmp>
                if (cmp == 0) {
 8085d36:	2800      	cmp	r0, #0
 8085d38:	f04f 0301 	mov.w	r3, #1
 8085d3c:	9901      	ldr	r1, [sp, #4]
 8085d3e:	d10b      	bne.n	8085d58 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
 8085d40:	455f      	cmp	r7, fp
 8085d42:	d103      	bne.n	8085d4c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 8085d44:	9a00      	ldr	r2, [sp, #0]
 8085d46:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 8085d48:	4634      	mov	r4, r6
 8085d4a:	e7e3      	b.n	8085d14 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 8085d4c:	d9fc      	bls.n	8085d48 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 8085d4e:	1ba6      	subs	r6, r4, r6
	      ++__first;
 8085d50:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
 8085d54:	3e01      	subs	r6, #1
 8085d56:	e7f7      	b.n	8085d48 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
 8085d58:	dbf9      	blt.n	8085d4e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
 8085d5a:	e7f5      	b.n	8085d48 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
 8085d5c:	eba5 0508 	sub.w	r5, r5, r8
}
 8085d60:	4802      	ldr	r0, [pc, #8]	; (8085d6c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 8085d62:	10ad      	asrs	r5, r5, #2
 8085d64:	4368      	muls	r0, r5
 8085d66:	b003      	add	sp, #12
 8085d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8085d6c:	cccccccd 	.word	0xcccccccd

08085d70 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 8085d70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 8085d72:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 8085d74:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 8085d76:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 8085d78:	b303      	cbz	r3, 8085dbc <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 8085d7a:	b1f9      	cbz	r1, 8085dbc <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 8085d7c:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 8085d7e:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 8085d82:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 8085d84:	a903      	add	r1, sp, #12
 8085d86:	a801      	add	r0, sp, #4
 8085d88:	f7ff ff0f 	bl	8085baa <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 8085d8c:	4601      	mov	r1, r0
 8085d8e:	b1a8      	cbz	r0, 8085dbc <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 8085d90:	f10d 030b 	add.w	r3, sp, #11
 8085d94:	4620      	mov	r0, r4
 8085d96:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 8085d98:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 8085d9c:	f7ff ffac 	bl	8085cf8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 8085da0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8085da4:	b153      	cbz	r3, 8085dbc <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 8085da6:	2314      	movs	r3, #20
 8085da8:	6824      	ldr	r4, [r4, #0]
 8085daa:	fb03 4400 	mla	r4, r3, r0, r4
            if (node.level >= 0) {
 8085dae:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 8085db2:	3408      	adds	r4, #8
            if (node.level >= 0) {
 8085db4:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 8085db6:	bfa8      	it	ge
 8085db8:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
 8085dba:	e7e3      	b.n	8085d84 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 8085dbc:	4628      	mov	r0, r5
 8085dbe:	b004      	add	sp, #16
 8085dc0:	bd70      	pop	{r4, r5, r6, pc}
	...

08085dc4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 8085dc4:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 8085dc6:	4c0a      	ldr	r4, [pc, #40]	; (8085df0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 8085dc8:	7823      	ldrb	r3, [r4, #0]
 8085dca:	f3bf 8f5b 	dmb	ish
 8085dce:	07db      	lsls	r3, r3, #31
 8085dd0:	d40b      	bmi.n	8085dea <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
 8085dd2:	4620      	mov	r0, r4
 8085dd4:	f7fa f982 	bl	80800dc <__cxa_guard_acquire>
 8085dd8:	b138      	cbz	r0, 8085dea <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
 8085dda:	4620      	mov	r0, r4
 8085ddc:	f7fa f983 	bl	80800e6 <__cxa_guard_release>
 8085de0:	4a04      	ldr	r2, [pc, #16]	; (8085df4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
 8085de2:	4905      	ldr	r1, [pc, #20]	; (8085df8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
 8085de4:	4805      	ldr	r0, [pc, #20]	; (8085dfc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
 8085de6:	f002 fb5d 	bl	80884a4 <__aeabi_atexit>
}
 8085dea:	4804      	ldr	r0, [pc, #16]	; (8085dfc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
 8085dec:	bd10      	pop	{r4, pc}
 8085dee:	bf00      	nop
 8085df0:	200003fc 	.word	0x200003fc
 8085df4:	20000130 	.word	0x20000130
 8085df8:	08085ba7 	.word	0x08085ba7
 8085dfc:	200000b8 	.word	0x200000b8

08085e00 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 8085e00:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 8085e02:	4c0a      	ldr	r4, [pc, #40]	; (8085e2c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 8085e04:	7823      	ldrb	r3, [r4, #0]
 8085e06:	f3bf 8f5b 	dmb	ish
 8085e0a:	07db      	lsls	r3, r3, #31
 8085e0c:	d40b      	bmi.n	8085e26 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
 8085e0e:	4620      	mov	r0, r4
 8085e10:	f7fa f964 	bl	80800dc <__cxa_guard_acquire>
 8085e14:	b138      	cbz	r0, 8085e26 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
 8085e16:	4620      	mov	r0, r4
 8085e18:	f7fa f965 	bl	80800e6 <__cxa_guard_release>
 8085e1c:	4a04      	ldr	r2, [pc, #16]	; (8085e30 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
 8085e1e:	4905      	ldr	r1, [pc, #20]	; (8085e34 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
 8085e20:	4805      	ldr	r0, [pc, #20]	; (8085e38 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
 8085e22:	f002 fb3f 	bl	80884a4 <__aeabi_atexit>
    return &factory;
}
 8085e26:	4804      	ldr	r0, [pc, #16]	; (8085e38 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
 8085e28:	bd10      	pop	{r4, pc}
 8085e2a:	bf00      	nop
 8085e2c:	20000400 	.word	0x20000400
 8085e30:	20000130 	.word	0x20000130
 8085e34:	08085ba5 	.word	0x08085ba5
 8085e38:	200000bc 	.word	0x200000bc

08085e3c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 8085e3c:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 8085e3e:	2500      	movs	r5, #0
 8085e40:	4604      	mov	r4, r0
 8085e42:	e9c0 5500 	strd	r5, r5, [r0]
 8085e46:	e9c0 5504 	strd	r5, r5, [r0, #16]
 8085e4a:	6085      	str	r5, [r0, #8]
 8085e4c:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
 8085e4e:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
 8085e52:	f7fe fead 	bl	8084bb0 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 8085e56:	f7ff ffb5 	bl	8085dc4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 8085e5a:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 8085e5c:	f7ff ffd0 	bl	8085e00 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 8085e60:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 8085e62:	6220      	str	r0, [r4, #32]
}
 8085e64:	4620      	mov	r0, r4
 8085e66:	bd38      	pop	{r3, r4, r5, pc}

08085e68 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 8085e68:	b510      	push	{r4, lr}
    static LogManager mgr;
 8085e6a:	4c0b      	ldr	r4, [pc, #44]	; (8085e98 <_ZN5spark10LogManager8instanceEv+0x30>)
 8085e6c:	7823      	ldrb	r3, [r4, #0]
 8085e6e:	f3bf 8f5b 	dmb	ish
 8085e72:	07db      	lsls	r3, r3, #31
 8085e74:	d40e      	bmi.n	8085e94 <_ZN5spark10LogManager8instanceEv+0x2c>
 8085e76:	4620      	mov	r0, r4
 8085e78:	f7fa f930 	bl	80800dc <__cxa_guard_acquire>
 8085e7c:	b150      	cbz	r0, 8085e94 <_ZN5spark10LogManager8instanceEv+0x2c>
 8085e7e:	4807      	ldr	r0, [pc, #28]	; (8085e9c <_ZN5spark10LogManager8instanceEv+0x34>)
 8085e80:	f7ff ffdc 	bl	8085e3c <_ZN5spark10LogManagerC1Ev>
 8085e84:	4620      	mov	r0, r4
 8085e86:	f7fa f92e 	bl	80800e6 <__cxa_guard_release>
 8085e8a:	4a05      	ldr	r2, [pc, #20]	; (8085ea0 <_ZN5spark10LogManager8instanceEv+0x38>)
 8085e8c:	4905      	ldr	r1, [pc, #20]	; (8085ea4 <_ZN5spark10LogManager8instanceEv+0x3c>)
 8085e8e:	4803      	ldr	r0, [pc, #12]	; (8085e9c <_ZN5spark10LogManager8instanceEv+0x34>)
 8085e90:	f002 fb08 	bl	80884a4 <__aeabi_atexit>
    return &mgr;
}
 8085e94:	4801      	ldr	r0, [pc, #4]	; (8085e9c <_ZN5spark10LogManager8instanceEv+0x34>)
 8085e96:	bd10      	pop	{r4, pc}
 8085e98:	200003f8 	.word	0x200003f8
 8085e9c:	20000408 	.word	0x20000408
 8085ea0:	20000130 	.word	0x20000130
 8085ea4:	080863b5 	.word	0x080863b5

08085ea8 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 8085ea8:	2300      	movs	r3, #0
 8085eaa:	4a02      	ldr	r2, [pc, #8]	; (8085eb4 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 8085eac:	4902      	ldr	r1, [pc, #8]	; (8085eb8 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 8085eae:	4803      	ldr	r0, [pc, #12]	; (8085ebc <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 8085eb0:	f7ff b80e 	b.w	8084ed0 <log_set_callbacks>
 8085eb4:	080861f1 	.word	0x080861f1
 8085eb8:	0808617d 	.word	0x0808617d
 8085ebc:	080860fd 	.word	0x080860fd

08085ec0 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 8085ec0:	2300      	movs	r3, #0
 8085ec2:	461a      	mov	r2, r3
 8085ec4:	4619      	mov	r1, r3
 8085ec6:	4618      	mov	r0, r3
 8085ec8:	f7ff b802 	b.w	8084ed0 <log_set_callbacks>

08085ecc <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 8085ecc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8085ece:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 8085ed0:	688d      	ldr	r5, [r1, #8]
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 8085ed2:	4668      	mov	r0, sp
 8085ed4:	f7ff febe 	bl	8085c54 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 8085ed8:	466a      	mov	r2, sp
 8085eda:	4629      	mov	r1, r5
 8085edc:	4620      	mov	r0, r4
 8085ede:	f002 f869 	bl	8087fb4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 8085ee2:	a801      	add	r0, sp, #4
 8085ee4:	f7fa fd04 	bl	80808f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 8085ee8:	4620      	mov	r0, r4
 8085eea:	b003      	add	sp, #12
 8085eec:	bd30      	pop	{r4, r5, pc}

08085eee <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 8085eee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8085ef0:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 8085ef2:	68cd      	ldr	r5, [r1, #12]
 8085ef4:	4668      	mov	r0, sp
 8085ef6:	f7ff fead 	bl	8085c54 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 8085efa:	466a      	mov	r2, sp
 8085efc:	4629      	mov	r1, r5
 8085efe:	4620      	mov	r0, r4
 8085f00:	f002 f834 	bl	8087f6c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 8085f04:	a801      	add	r0, sp, #4
 8085f06:	f7fa fcf3 	bl	80808f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 8085f0a:	4620      	mov	r0, r4
 8085f0c:	b003      	add	sp, #12
 8085f0e:	bd30      	pop	{r4, r5, pc}

08085f10 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 8085f10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8085f12:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 8085f14:	690d      	ldr	r5, [r1, #16]
 8085f16:	4668      	mov	r0, sp
 8085f18:	f7ff fe9c 	bl	8085c54 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 8085f1c:	466a      	mov	r2, sp
 8085f1e:	4629      	mov	r1, r5
 8085f20:	4620      	mov	r0, r4
 8085f22:	f001 ffca 	bl	8087eba <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 8085f26:	a801      	add	r0, sp, #4
 8085f28:	f7fa fce2 	bl	80808f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 8085f2c:	4620      	mov	r0, r4
 8085f2e:	b003      	add	sp, #12
 8085f30:	bd30      	pop	{r4, r5, pc}
	...

08085f34 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 8085f34:	b570      	push	{r4, r5, r6, lr}
 8085f36:	b08a      	sub	sp, #40	; 0x28
 8085f38:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 8085f3a:	4601      	mov	r1, r0
 8085f3c:	a804      	add	r0, sp, #16
 8085f3e:	f7ff ffc5 	bl	8085ecc <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 8085f42:	4e14      	ldr	r6, [pc, #80]	; (8085f94 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 8085f44:	a804      	add	r0, sp, #16
 8085f46:	f002 f84d 	bl	8087fe4 <_ZN5spark18JSONObjectIterator4nextEv>
 8085f4a:	b1e8      	cbz	r0, 8085f88 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 8085f4c:	4668      	mov	r0, sp
 8085f4e:	a904      	add	r1, sp, #16
 8085f50:	f7ff ffcd 	bl	8085eee <_ZNK5spark18JSONObjectIterator4nameEv>
 8085f54:	4631      	mov	r1, r6
 8085f56:	9802      	ldr	r0, [sp, #8]
 8085f58:	f7ff fe50 	bl	8085bfc <_ZNK5spark10JSONStringeqEPKc.isra.0>
 8085f5c:	4604      	mov	r4, r0
 8085f5e:	b110      	cbz	r0, 8085f66 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 8085f60:	1e2c      	subs	r4, r5, #0
 8085f62:	bf18      	it	ne
 8085f64:	2401      	movne	r4, #1
 8085f66:	a801      	add	r0, sp, #4
 8085f68:	f7fa fcc2 	bl	80808f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8085f6c:	2c00      	cmp	r4, #0
 8085f6e:	d0e9      	beq.n	8085f44 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 8085f70:	4668      	mov	r0, sp
 8085f72:	a904      	add	r1, sp, #16
 8085f74:	f7ff ffcc 	bl	8085f10 <_ZNK5spark18JSONObjectIterator5valueEv>
 8085f78:	4668      	mov	r0, sp
 8085f7a:	f001 ffd5 	bl	8087f28 <_ZNK5spark9JSONValue5toIntEv>
 8085f7e:	6028      	str	r0, [r5, #0]
 8085f80:	a801      	add	r0, sp, #4
 8085f82:	f7fa fcb5 	bl	80808f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8085f86:	e7dd      	b.n	8085f44 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 8085f88:	a805      	add	r0, sp, #20
 8085f8a:	f7fa fcb1 	bl	80808f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 8085f8e:	b00a      	add	sp, #40	; 0x28
 8085f90:	bd70      	pop	{r4, r5, r6, pc}
 8085f92:	bf00      	nop
 8085f94:	0808bb4f 	.word	0x0808bb4f

08085f98 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 8085f98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8085f9a:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 8085f9c:	491b      	ldr	r1, [pc, #108]	; (808600c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x74>)
 8085f9e:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 8085fa0:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 8085fa2:	f004 fe9c 	bl	808acde <strcmp>
 8085fa6:	b950      	cbnz	r0, 8085fbe <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
 8085fa8:	f001 fc08 	bl	80877bc <_Z16_fetch_usbserialv>
 8085fac:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8085fb0:	f001 fbe6 	bl	8087780 <_ZN9USBSerial5beginEl>
}
 8085fb4:	b003      	add	sp, #12
 8085fb6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
 8085fba:	f001 bbff 	b.w	80877bc <_Z16_fetch_usbserialv>
    if (strcmp(type, "USBSerial1") == 0) {
 8085fbe:	4620      	mov	r0, r4
 8085fc0:	4913      	ldr	r1, [pc, #76]	; (8086010 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x78>)
 8085fc2:	f004 fe8c 	bl	808acde <strcmp>
 8085fc6:	b950      	cbnz	r0, 8085fde <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x46>
        USBSerial1.begin();
 8085fc8:	f001 fc36 	bl	8087838 <_Z17_fetch_usbserial1v>
 8085fcc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8085fd0:	f001 fbd6 	bl	8087780 <_ZN9USBSerial5beginEl>
}
 8085fd4:	b003      	add	sp, #12
 8085fd6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &USBSerial1;
 8085fda:	f001 bc2d 	b.w	8087838 <_Z17_fetch_usbserial1v>
    if (strcmp(type, "Serial1") == 0) {
 8085fde:	4620      	mov	r0, r4
 8085fe0:	490c      	ldr	r1, [pc, #48]	; (8086014 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x7c>)
 8085fe2:	f004 fe7c 	bl	808acde <strcmp>
 8085fe6:	b978      	cbnz	r0, 8086008 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x70>
        int baud = 9600;
 8085fe8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 8085fec:	a901      	add	r1, sp, #4
 8085fee:	4628      	mov	r0, r5
        int baud = 9600;
 8085ff0:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 8085ff2:	f7ff ff9f 	bl	8085f34 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 8085ff6:	f001 fd8f 	bl	8087b18 <_Z22__fetch_global_Serial1v>
 8085ffa:	9901      	ldr	r1, [sp, #4]
 8085ffc:	f001 fd86 	bl	8087b0c <_ZN11USARTSerial5beginEm>
        return &Serial1;
 8086000:	f001 fd8a 	bl	8087b18 <_Z22__fetch_global_Serial1v>
}
 8086004:	b003      	add	sp, #12
 8086006:	bd30      	pop	{r4, r5, pc}
    return nullptr;
 8086008:	2000      	movs	r0, #0
 808600a:	e7fb      	b.n	8086004 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x6c>
 808600c:	0808bb54 	.word	0x0808bb54
 8086010:	0808bb5b 	.word	0x0808bb5b
 8086014:	0808bb5e 	.word	0x0808bb5e

08086018 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 8086018:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 808601a:	2614      	movs	r6, #20
 808601c:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 8086020:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 8086022:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 8086026:	42ae      	cmp	r6, r5
 8086028:	d005      	beq.n	8086036 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 808602a:	f105 0008 	add.w	r0, r5, #8
 808602e:	f7ff fff3 	bl	8086018 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 8086032:	3514      	adds	r5, #20
 8086034:	e7f7      	b.n	8086026 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 8086036:	6820      	ldr	r0, [r4, #0]
 8086038:	f7ff f882 	bl	8085140 <free>
}
 808603c:	4620      	mov	r0, r4
 808603e:	bd70      	pop	{r4, r5, r6, pc}

08086040 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 8086040:	b570      	push	{r4, r5, r6, lr}
 8086042:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 8086044:	e9d0 5300 	ldrd	r5, r3, [r0]
 8086048:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 808604c:	42ae      	cmp	r6, r5
 808604e:	d004      	beq.n	808605a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 8086050:	4628      	mov	r0, r5
 8086052:	f7ff fa9b 	bl	808558c <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 8086056:	3510      	adds	r5, #16
 8086058:	e7f8      	b.n	808604c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 808605a:	6820      	ldr	r0, [r4, #0]
 808605c:	f7ff f870 	bl	8085140 <free>
}
 8086060:	4620      	mov	r0, r4
 8086062:	bd70      	pop	{r4, r5, r6, pc}

08086064 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 8086064:	b510      	push	{r4, lr}
 8086066:	4604      	mov	r4, r0
 8086068:	300c      	adds	r0, #12
 808606a:	f7ff ffd5 	bl	8086018 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 808606e:	4620      	mov	r0, r4
 8086070:	f7ff ffe6 	bl	8086040 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 8086074:	4620      	mov	r0, r4
 8086076:	bd10      	pop	{r4, pc}

08086078 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 8086078:	b510      	push	{r4, lr}
 808607a:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 808607c:	4b03      	ldr	r3, [pc, #12]	; (808608c <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 808607e:	f840 3b04 	str.w	r3, [r0], #4
 8086082:	f7ff ffef 	bl	8086064 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 8086086:	4620      	mov	r0, r4
 8086088:	bd10      	pop	{r4, pc}
 808608a:	bf00      	nop
 808608c:	0808b5dc 	.word	0x0808b5dc

08086090 <_ZN5spark16StreamLogHandlerD0Ev>:
 8086090:	b510      	push	{r4, lr}
 8086092:	4604      	mov	r4, r0
 8086094:	f7ff fff0 	bl	8086078 <_ZN5spark16StreamLogHandlerD1Ev>
 8086098:	4620      	mov	r0, r4
 808609a:	2124      	movs	r1, #36	; 0x24
 808609c:	f002 fa07 	bl	80884ae <_ZdlPvj>
 80860a0:	4620      	mov	r0, r4
 80860a2:	bd10      	pop	{r4, pc}

080860a4 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 80860a4:	b510      	push	{r4, lr}
 80860a6:	4604      	mov	r4, r0
 80860a8:	4b02      	ldr	r3, [pc, #8]	; (80860b4 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 80860aa:	6003      	str	r3, [r0, #0]
 80860ac:	f7ff ffe4 	bl	8086078 <_ZN5spark16StreamLogHandlerD1Ev>
 80860b0:	4620      	mov	r0, r4
 80860b2:	bd10      	pop	{r4, pc}
 80860b4:	0808bbf4 	.word	0x0808bbf4

080860b8 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 80860b8:	b510      	push	{r4, lr}
 80860ba:	4604      	mov	r4, r0
 80860bc:	f7ff fff2 	bl	80860a4 <_ZN5spark20JSONStreamLogHandlerD1Ev>
 80860c0:	4620      	mov	r0, r4
 80860c2:	2124      	movs	r1, #36	; 0x24
 80860c4:	f002 f9f3 	bl	80884ae <_ZdlPvj>
 80860c8:	4620      	mov	r0, r4
 80860ca:	bd10      	pop	{r4, pc}

080860cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 80860cc:	2200      	movs	r2, #0
 80860ce:	e9c0 2200 	strd	r2, r2, [r0]
 80860d2:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 80860d4:	b510      	push	{r4, lr}
 80860d6:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80860d8:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 80860da:	6004      	str	r4, [r0, #0]
 80860dc:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80860de:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80860e0:	6044      	str	r4, [r0, #4]
 80860e2:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80860e4:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 80860e6:	6084      	str	r4, [r0, #8]
}
 80860e8:	bd10      	pop	{r4, pc}

080860ea <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
 80860ea:	b510      	push	{r4, lr}
 80860ec:	4604      	mov	r4, r0
    void unlock() { os_mutex_recursive_unlock(handle_); }
 80860ee:	6803      	ldr	r3, [r0, #0]
 80860f0:	6818      	ldr	r0, [r3, #0]
 80860f2:	f7fe fd75 	bl	8084be0 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 80860f6:	4620      	mov	r0, r4
 80860f8:	bd10      	pop	{r4, pc}
	...

080860fc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 80860fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8086100:	b087      	sub	sp, #28
 8086102:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 8086104:	4b1c      	ldr	r3, [pc, #112]	; (8086178 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 8086106:	4680      	mov	r8, r0
 8086108:	685b      	ldr	r3, [r3, #4]
 808610a:	4689      	mov	r9, r1
 808610c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8086110:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 8086112:	b96b      	cbnz	r3, 8086130 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 8086114:	f7ff fea8 	bl	8085e68 <_ZN5spark10LogManager8instanceEv>
 8086118:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 808611a:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
 808611e:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8086120:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
 8086122:	f7ff fd69 	bl	8085bf8 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
 8086126:	7b23      	ldrb	r3, [r4, #12]
 8086128:	b12b      	cbz	r3, 8086136 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 808612a:	a805      	add	r0, sp, #20
 808612c:	f7ff ffdd 	bl	80860ea <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 8086130:	b007      	add	sp, #28
 8086132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 8086136:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 8086138:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 808613c:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 808613e:	e9d4 5300 	ldrd	r5, r3, [r4]
 8086142:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 8086146:	45aa      	cmp	sl, r5
 8086148:	d012      	beq.n	8086170 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 808614a:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 808614e:	4631      	mov	r1, r6
 8086150:	1d38      	adds	r0, r7, #4
 8086152:	f7ff fe0d 	bl	8085d70 <_ZNK5spark6detail9LogFilter5levelEPKc>
 8086156:	4581      	cmp	r9, r0
 8086158:	d3f5      	bcc.n	8086146 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 808615a:	9a03      	ldr	r2, [sp, #12]
 808615c:	683b      	ldr	r3, [r7, #0]
 808615e:	9200      	str	r2, [sp, #0]
 8086160:	f8d3 b008 	ldr.w	fp, [r3, #8]
 8086164:	464a      	mov	r2, r9
 8086166:	4633      	mov	r3, r6
 8086168:	4641      	mov	r1, r8
 808616a:	4638      	mov	r0, r7
 808616c:	47d8      	blx	fp
 808616e:	e7ea      	b.n	8086146 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 8086170:	2300      	movs	r3, #0
 8086172:	7323      	strb	r3, [r4, #12]
 8086174:	e7d9      	b.n	808612a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 8086176:	bf00      	nop
 8086178:	e000ed00 	.word	0xe000ed00

0808617c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 808617c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8086180:	469b      	mov	fp, r3
 8086182:	4b1a      	ldr	r3, [pc, #104]	; (80861ec <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 8086184:	4680      	mov	r8, r0
 8086186:	685b      	ldr	r3, [r3, #4]
 8086188:	4689      	mov	r9, r1
 808618a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 808618e:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
 8086190:	b96b      	cbnz	r3, 80861ae <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 8086192:	f7ff fe69 	bl	8085e68 <_ZN5spark10LogManager8instanceEv>
 8086196:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 8086198:	f100 0324 	add.w	r3, r0, #36	; 0x24
 808619c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808619e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 80861a0:	f7ff fd2a 	bl	8085bf8 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
 80861a4:	7b23      	ldrb	r3, [r4, #12]
 80861a6:	b12b      	cbz	r3, 80861b4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 80861a8:	a801      	add	r0, sp, #4
 80861aa:	f7ff ff9e 	bl	80860ea <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 80861ae:	b003      	add	sp, #12
 80861b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 80861b4:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 80861b6:	b2f6      	uxtb	r6, r6
 80861b8:	7323      	strb	r3, [r4, #12]
 80861ba:	e9d4 5300 	ldrd	r5, r3, [r4]
 80861be:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 80861c2:	4555      	cmp	r5, sl
 80861c4:	d00e      	beq.n	80861e4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 80861c6:	f855 7b04 	ldr.w	r7, [r5], #4
 80861ca:	4659      	mov	r1, fp
 80861cc:	1d38      	adds	r0, r7, #4
 80861ce:	f7ff fdcf 	bl	8085d70 <_ZNK5spark6detail9LogFilter5levelEPKc>
 80861d2:	4286      	cmp	r6, r0
 80861d4:	d3f5      	bcc.n	80861c2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 80861d6:	683b      	ldr	r3, [r7, #0]
 80861d8:	464a      	mov	r2, r9
 80861da:	4641      	mov	r1, r8
 80861dc:	4638      	mov	r0, r7
 80861de:	68db      	ldr	r3, [r3, #12]
 80861e0:	4798      	blx	r3
 80861e2:	e7ee      	b.n	80861c2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 80861e4:	2300      	movs	r3, #0
 80861e6:	7323      	strb	r3, [r4, #12]
 80861e8:	e7de      	b.n	80861a8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 80861ea:	bf00      	nop
 80861ec:	e000ed00 	.word	0xe000ed00

080861f0 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 80861f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80861f4:	4b16      	ldr	r3, [pc, #88]	; (8086250 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 80861f6:	4605      	mov	r5, r0
 80861f8:	685b      	ldr	r3, [r3, #4]
 80861fa:	460f      	mov	r7, r1
 80861fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (HAL_IsISR()) {
 8086200:	bb1b      	cbnz	r3, 808624a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 8086202:	f7ff fe31 	bl	8085e68 <_ZN5spark10LogManager8instanceEv>
 8086206:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 8086208:	f100 0324 	add.w	r3, r0, #36	; 0x24
 808620c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808620e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 8086210:	f7ff fcf2 	bl	8085bf8 <_ZN14RecursiveMutex4lockEv.isra.0>
 8086214:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 8086218:	2446      	movs	r4, #70	; 0x46
 808621a:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 808621e:	45b0      	cmp	r8, r6
 8086220:	d109      	bne.n	8086236 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 8086222:	a801      	add	r0, sp, #4
 8086224:	f7ff ff61 	bl	80860ea <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 8086228:	42a5      	cmp	r5, r4
 808622a:	bfb4      	ite	lt
 808622c:	2000      	movlt	r0, #0
 808622e:	2001      	movge	r0, #1
}
 8086230:	b002      	add	sp, #8
 8086232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 8086236:	f856 0b04 	ldr.w	r0, [r6], #4
 808623a:	4639      	mov	r1, r7
 808623c:	3004      	adds	r0, #4
 808623e:	f7ff fd97 	bl	8085d70 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 8086242:	4284      	cmp	r4, r0
 8086244:	bfa8      	it	ge
 8086246:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 8086248:	e7e9      	b.n	808621e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 808624a:	2000      	movs	r0, #0
 808624c:	e7f0      	b.n	8086230 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 808624e:	bf00      	nop
 8086250:	e000ed00 	.word	0xe000ed00

08086254 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 8086254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 8086256:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 808625a:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 808625c:	4604      	mov	r4, r0
 808625e:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 8086260:	db0d      	blt.n	808627e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
 8086262:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
 8086264:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 8086266:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 8086268:	dd04      	ble.n	8086274 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
 808626a:	00b9      	lsls	r1, r7, #2
 808626c:	f7fe ff70 	bl	8085150 <realloc>
            if (!d) {
 8086270:	b918      	cbnz	r0, 808627a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
 8086272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 8086274:	f7fe ff64 	bl	8085140 <free>
        T* d = nullptr;
 8086278:	2000      	movs	r0, #0
        data_ = d;
 808627a:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 808627c:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 808627e:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
 8086280:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 8086282:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
 8086286:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 8086288:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
 808628c:	1d08      	adds	r0, r1, #4
 808628e:	f004 fcbf 	bl	808ac10 <memmove>
    new(p) T(std::move(value));
 8086292:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
 8086296:	6863      	ldr	r3, [r4, #4]
    return true;
 8086298:	2001      	movs	r0, #1
    ++size_;
 808629a:	3301      	adds	r3, #1
 808629c:	6063      	str	r3, [r4, #4]
    return true;
 808629e:	e7e8      	b.n	8086272 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

080862a0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 80862a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80862a2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 80862a4:	f100 0324 	add.w	r3, r0, #36	; 0x24
 80862a8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80862aa:	9301      	str	r3, [sp, #4]
bool spark::LogManager::addHandler(LogHandler *handler) {
 80862ac:	460d      	mov	r5, r1
      { _M_device.lock(); }
 80862ae:	f7ff fca3 	bl	8085bf8 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
 80862b2:	e9d4 3200 	ldrd	r3, r2, [r4]
 80862b6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
 80862ba:	4293      	cmp	r3, r2
 80862bc:	4619      	mov	r1, r3
 80862be:	d00a      	beq.n	80862d6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 80862c0:	6809      	ldr	r1, [r1, #0]
 80862c2:	3304      	adds	r3, #4
 80862c4:	42a9      	cmp	r1, r5
 80862c6:	d1f8      	bne.n	80862ba <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
 80862c8:	a801      	add	r0, sp, #4
 80862ca:	f7ff ff0e 	bl	80860ea <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 80862ce:	2500      	movs	r5, #0
}
 80862d0:	4628      	mov	r0, r5
 80862d2:	b003      	add	sp, #12
 80862d4:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 80862d6:	4629      	mov	r1, r5
 80862d8:	4620      	mov	r0, r4
 80862da:	f7ff ffbb 	bl	8086254 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
 80862de:	4605      	mov	r5, r0
 80862e0:	2800      	cmp	r0, #0
 80862e2:	d0f1      	beq.n	80862c8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 80862e4:	6863      	ldr	r3, [r4, #4]
 80862e6:	2b01      	cmp	r3, #1
 80862e8:	d101      	bne.n	80862ee <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 80862ea:	f7ff fddd 	bl	8085ea8 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 80862ee:	a801      	add	r0, sp, #4
 80862f0:	f7ff fefb 	bl	80860ea <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 80862f4:	e7ec      	b.n	80862d0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

080862f6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 80862f6:	460b      	mov	r3, r1
 80862f8:	b570      	push	{r4, r5, r6, lr}
 80862fa:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 80862fc:	c805      	ldmia	r0, {r0, r2}
 80862fe:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 8086302:	4282      	cmp	r2, r0
 8086304:	d00f      	beq.n	8086326 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x30>
    move(p, p + 1, data_ + size_);
 8086306:	4601      	mov	r1, r0
            if (*p == value) {
 8086308:	681d      	ldr	r5, [r3, #0]
 808630a:	f851 6b04 	ldr.w	r6, [r1], #4
 808630e:	42ae      	cmp	r6, r5
 8086310:	d107      	bne.n	8086322 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>
        ::memmove(dest, p, (end - p) * sizeof(T));
 8086312:	1a52      	subs	r2, r2, r1
 8086314:	f004 fc7c 	bl	808ac10 <memmove>
    return true;
 8086318:	2001      	movs	r0, #1
    --size_;
 808631a:	6863      	ldr	r3, [r4, #4]
 808631c:	3b01      	subs	r3, #1
 808631e:	6063      	str	r3, [r4, #4]
}
 8086320:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
 8086322:	4608      	mov	r0, r1
 8086324:	e7ed      	b.n	8086302 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
        return false;
 8086326:	2000      	movs	r0, #0
 8086328:	e7fa      	b.n	8086320 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2a>

0808632a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 808632a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 808632c:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 808632e:	f100 0324 	add.w	r3, r0, #36	; 0x24
 8086332:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 8086334:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8086336:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
 8086338:	f7ff fc5e 	bl	8085bf8 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 808633c:	4620      	mov	r0, r4
 808633e:	a901      	add	r1, sp, #4
 8086340:	f7ff ffd9 	bl	80862f6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 8086344:	b118      	cbz	r0, 808634e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 8086346:	6863      	ldr	r3, [r4, #4]
 8086348:	b90b      	cbnz	r3, 808634e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 808634a:	f7ff fdb9 	bl	8085ec0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 808634e:	a803      	add	r0, sp, #12
 8086350:	f7ff fecb 	bl	80860ea <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 8086354:	b004      	add	sp, #16
 8086356:	bd10      	pop	{r4, pc}

08086358 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 8086358:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 808635a:	b570      	push	{r4, r5, r6, lr}
 808635c:	4604      	mov	r4, r0
 808635e:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 8086362:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 8086366:	42ae      	cmp	r6, r5
 8086368:	d015      	beq.n	8086396 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 808636a:	4620      	mov	r0, r4
 808636c:	f105 0110 	add.w	r1, r5, #16
 8086370:	f7ff ffc1 	bl	80862f6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 8086374:	6863      	ldr	r3, [r4, #4]
 8086376:	b90b      	cbnz	r3, 808637c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 8086378:	f7ff fda2 	bl	8085ec0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 808637c:	69e0      	ldr	r0, [r4, #28]
 808637e:	6929      	ldr	r1, [r5, #16]
 8086380:	6803      	ldr	r3, [r0, #0]
 8086382:	68db      	ldr	r3, [r3, #12]
 8086384:	4798      	blx	r3
        if (h.stream) {
 8086386:	6969      	ldr	r1, [r5, #20]
 8086388:	b119      	cbz	r1, 8086392 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 808638a:	6a20      	ldr	r0, [r4, #32]
 808638c:	6803      	ldr	r3, [r0, #0]
 808638e:	68db      	ldr	r3, [r3, #12]
 8086390:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 8086392:	3518      	adds	r5, #24
 8086394:	e7e7      	b.n	8086366 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 8086396:	2618      	movs	r6, #24
 8086398:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 808639c:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80863a0:	42ae      	cmp	r6, r5
 80863a2:	d004      	beq.n	80863ae <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 80863a4:	4628      	mov	r0, r5
 80863a6:	f7ff f8f1 	bl	808558c <_ZN6StringD1Ev>
 80863aa:	3518      	adds	r5, #24
 80863ac:	e7f8      	b.n	80863a0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 80863ae:	2300      	movs	r3, #0
 80863b0:	6163      	str	r3, [r4, #20]
}
 80863b2:	bd70      	pop	{r4, r5, r6, pc}

080863b4 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 80863b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80863b6:	4604      	mov	r4, r0
    resetSystemCallbacks();
 80863b8:	f7ff fd82 	bl	8085ec0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 80863bc:	f104 0324 	add.w	r3, r4, #36	; 0x24
 80863c0:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80863c2:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 80863c4:	f7ff fc18 	bl	8085bf8 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
 80863c8:	4620      	mov	r0, r4
 80863ca:	f7ff ffc5 	bl	8086358 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 80863ce:	a801      	add	r0, sp, #4
 80863d0:	f7ff fe8b 	bl	80860ea <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 80863d4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80863d6:	b108      	cbz	r0, 80863dc <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 80863d8:	f7fe fbf2 	bl	8084bc0 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 80863dc:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 80863e0:	2618      	movs	r6, #24
 80863e2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80863e6:	42ae      	cmp	r6, r5
 80863e8:	d004      	beq.n	80863f4 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 80863ea:	4628      	mov	r0, r5
 80863ec:	f7ff f8ce 	bl	808558c <_ZN6StringD1Ev>
 80863f0:	3518      	adds	r5, #24
 80863f2:	e7f8      	b.n	80863e6 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 80863f4:	6920      	ldr	r0, [r4, #16]
 80863f6:	f7fe fea3 	bl	8085140 <free>
 80863fa:	6820      	ldr	r0, [r4, #0]
 80863fc:	f7fe fea0 	bl	8085140 <free>
}
 8086400:	4620      	mov	r0, r4
 8086402:	b002      	add	sp, #8
 8086404:	bd70      	pop	{r4, r5, r6, pc}

08086406 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 8086406:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 8086408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808640a:	4604      	mov	r4, r0
 808640c:	460d      	mov	r5, r1
 808640e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 8086410:	d915      	bls.n	808643e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
 8086412:	4290      	cmp	r0, r2
 8086414:	d214      	bcs.n	8086440 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
 8086416:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 808641a:	1a75      	subs	r5, r6, r1
 808641c:	f1a1 0714 	sub.w	r7, r1, #20
 8086420:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 8086422:	42b7      	cmp	r7, r6
 8086424:	d01a      	beq.n	808645c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
 8086426:	b11c      	cbz	r4, 8086430 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
 8086428:	4631      	mov	r1, r6
 808642a:	4620      	mov	r0, r4
 808642c:	f7ff fc51 	bl	8085cd2 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
 8086430:	f106 0008 	add.w	r0, r6, #8
 8086434:	f7ff fdf0 	bl	8086018 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 8086438:	3e14      	subs	r6, #20
 808643a:	3c14      	subs	r4, #20
 808643c:	e7f1      	b.n	8086422 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
 808643e:	d00d      	beq.n	808645c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
 8086440:	42b5      	cmp	r5, r6
 8086442:	d00b      	beq.n	808645c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
 8086444:	b11c      	cbz	r4, 808644e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
 8086446:	4629      	mov	r1, r5
 8086448:	4620      	mov	r0, r4
 808644a:	f7ff fc42 	bl	8085cd2 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
 808644e:	f105 0008 	add.w	r0, r5, #8
 8086452:	f7ff fde1 	bl	8086018 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 8086456:	3514      	adds	r5, #20
 8086458:	3414      	adds	r4, #20
 808645a:	e7f1      	b.n	8086440 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
 808645c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808645e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 808645e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 8086460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8086462:	4604      	mov	r4, r0
 8086464:	460d      	mov	r5, r1
 8086466:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 8086468:	d914      	bls.n	8086494 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 808646a:	4290      	cmp	r0, r2
 808646c:	d213      	bcs.n	8086496 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 808646e:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 8086472:	1a75      	subs	r5, r6, r1
 8086474:	f1a1 0710 	sub.w	r7, r1, #16
 8086478:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 808647a:	42b7      	cmp	r7, r6
 808647c:	d018      	beq.n	80864b0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 808647e:	b11c      	cbz	r4, 8086488 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 8086480:	4631      	mov	r1, r6
 8086482:	4620      	mov	r0, r4
 8086484:	f7ff f8fc 	bl	8085680 <_ZN6StringC1EOS_>
                end->~T();
 8086488:	4630      	mov	r0, r6
 808648a:	f7ff f87f 	bl	808558c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 808648e:	3e10      	subs	r6, #16
 8086490:	3c10      	subs	r4, #16
 8086492:	e7f2      	b.n	808647a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 8086494:	d00c      	beq.n	80864b0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 8086496:	42b5      	cmp	r5, r6
 8086498:	d00a      	beq.n	80864b0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 808649a:	b11c      	cbz	r4, 80864a4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 808649c:	4629      	mov	r1, r5
 808649e:	4620      	mov	r0, r4
 80864a0:	f7ff f8ee 	bl	8085680 <_ZN6StringC1EOS_>
                p->~T();
 80864a4:	4628      	mov	r0, r5
 80864a6:	f7ff f871 	bl	808558c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 80864aa:	3510      	adds	r5, #16
 80864ac:	3410      	adds	r4, #16
 80864ae:	e7f2      	b.n	8086496 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 80864b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080864b2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 80864b2:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 80864b4:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 80864b6:	4605      	mov	r5, r0
        if (n > 0) {
 80864b8:	dd11      	ble.n	80864de <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 80864ba:	0130      	lsls	r0, r6, #4
 80864bc:	f7fe fe38 	bl	8085130 <malloc>
            if (!d) {
 80864c0:	4604      	mov	r4, r0
 80864c2:	b158      	cbz	r0, 80864dc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 80864c4:	e9d5 1200 	ldrd	r1, r2, [r5]
 80864c8:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 80864cc:	f7ff ffc7 	bl	808645e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 80864d0:	6828      	ldr	r0, [r5, #0]
 80864d2:	f7fe fe35 	bl	8085140 <free>
        return true;
 80864d6:	2001      	movs	r0, #1
        data_ = d;
 80864d8:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 80864da:	60ae      	str	r6, [r5, #8]
    }
 80864dc:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 80864de:	2400      	movs	r4, #0
 80864e0:	e7f6      	b.n	80864d0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

080864e2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80864e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80864e6:	4690      	mov	r8, r2
        capacity_(0) {
 80864e8:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 80864ea:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80864ec:	b095      	sub	sp, #84	; 0x54
 80864ee:	9103      	str	r1, [sp, #12]
    return size_;
 80864f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80864f4:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 80864f6:	4299      	cmp	r1, r3
        capacity_(0) {
 80864f8:	e9c0 3300 	strd	r3, r3, [r0]
 80864fc:	e9c0 3302 	strd	r3, r3, [r0, #8]
 8086500:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8086504:	e9cd 3308 	strd	r3, r3, [sp, #32]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 8086508:	7602      	strb	r2, [r0, #24]
 808650a:	930a      	str	r3, [sp, #40]	; 0x28
    if (n > capacity_ && !realloc(n)) {
 808650c:	dc23      	bgt.n	8086556 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 808650e:	e9d8 5700 	ldrd	r5, r7, [r8]
 8086512:	2314      	movs	r3, #20
 8086514:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 8086518:	42af      	cmp	r7, r5
 808651a:	d03b      	beq.n	8086594 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 808651c:	4629      	mov	r1, r5
 808651e:	a80b      	add	r0, sp, #44	; 0x2c
 8086520:	f7ff f8ae 	bl	8085680 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 8086524:	a90b      	add	r1, sp, #44	; 0x2c
 8086526:	a80f      	add	r0, sp, #60	; 0x3c
 8086528:	9e09      	ldr	r6, [sp, #36]	; 0x24
 808652a:	f7ff f8a9 	bl	8085680 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 808652e:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
 8086532:	4299      	cmp	r1, r3
 8086534:	da1b      	bge.n	808656e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 8086536:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 8086538:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
 808653a:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 808653e:	4631      	mov	r1, r6
 8086540:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8086544:	f106 0010 	add.w	r0, r6, #16
 8086548:	f7ff ff89 	bl	808645e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 808654c:	b9ee      	cbnz	r6, 808658a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 808654e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8086550:	3301      	adds	r3, #1
 8086552:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
 8086554:	e011      	b.n	808657a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 8086556:	a808      	add	r0, sp, #32
 8086558:	f7ff ffab 	bl	80864b2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 808655c:	2800      	cmp	r0, #0
 808655e:	d1d6      	bne.n	808650e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
 8086560:	a808      	add	r0, sp, #32
 8086562:	f7ff fd6d 	bl	8086040 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 8086566:	4620      	mov	r0, r4
 8086568:	b015      	add	sp, #84	; 0x54
 808656a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 808656e:	3101      	adds	r1, #1
 8086570:	a808      	add	r0, sp, #32
 8086572:	f7ff ff9e 	bl	80864b2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 8086576:	2800      	cmp	r0, #0
 8086578:	d1dd      	bne.n	8086536 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 808657a:	a80f      	add	r0, sp, #60	; 0x3c
 808657c:	f7ff f806 	bl	808558c <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 8086580:	a80b      	add	r0, sp, #44	; 0x2c
 8086582:	f7ff f803 	bl	808558c <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 8086586:	3514      	adds	r5, #20
 8086588:	e7c6      	b.n	8086518 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 808658a:	4630      	mov	r0, r6
 808658c:	a90f      	add	r1, sp, #60	; 0x3c
 808658e:	f7ff f877 	bl	8085680 <_ZN6StringC1EOS_>
 8086592:	e7dc      	b.n	808654e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 8086594:	2600      	movs	r6, #0
 8086596:	f04f 0914 	mov.w	r9, #20
 808659a:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
 808659e:	960d      	str	r6, [sp, #52]	; 0x34
    return data_[i];
 80865a0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    for (int i = 0; i < cats.size(); ++i) {
 80865a4:	429e      	cmp	r6, r3
 80865a6:	da7c      	bge.n	80866a2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
 80865a8:	0133      	lsls	r3, r6, #4
 80865aa:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 80865ac:	9306      	str	r3, [sp, #24]
        if (!category) {
 80865ae:	b90b      	cbnz	r3, 80865b4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
 80865b0:	3601      	adds	r6, #1
 80865b2:	e7f5      	b.n	80865a0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
 80865b4:	2300      	movs	r3, #0
 80865b6:	9307      	str	r3, [sp, #28]
 80865b8:	fb09 f306 	mul.w	r3, r9, r6
        Vector<Node> *pNodes = &nodes; // Root nodes
 80865bc:	ad0b      	add	r5, sp, #44	; 0x2c
 80865be:	9302      	str	r3, [sp, #8]
        while ((name = nextSubcategoryName(category, size))) {
 80865c0:	a907      	add	r1, sp, #28
 80865c2:	a806      	add	r0, sp, #24
 80865c4:	f7ff faf1 	bl	8085baa <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 80865c8:	4682      	mov	sl, r0
 80865ca:	2800      	cmp	r0, #0
 80865cc:	d0f0      	beq.n	80865b0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
 80865ce:	f04f 0300 	mov.w	r3, #0
            const int index = nodeIndex(*pNodes, name, size, found);
 80865d2:	4601      	mov	r1, r0
            bool found = false;
 80865d4:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 80865d8:	4628      	mov	r0, r5
 80865da:	9a07      	ldr	r2, [sp, #28]
 80865dc:	f10d 0317 	add.w	r3, sp, #23
 80865e0:	f7ff fb8a 	bl	8085cf8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80865e4:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 80865e8:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80865ea:	2f00      	cmp	r7, #0
 80865ec:	d14a      	bne.n	8086684 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
 80865ee:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        capacity_(0) {
 80865f2:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
            level(-1) {
 80865f6:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80865fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80865fe:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 8086602:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8086606:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 8086608:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 808660c:	4293      	cmp	r3, r2
 808660e:	db17      	blt.n	8086640 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
 8086610:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
 8086614:	f1ba 0f00 	cmp.w	sl, #0
 8086618:	dd30      	ble.n	808667c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
 808661a:	fb09 f00a 	mul.w	r0, r9, sl
 808661e:	f7fe fd87 	bl	8085130 <malloc>
            if (!d) {
 8086622:	4683      	mov	fp, r0
 8086624:	b360      	cbz	r0, 8086680 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
 8086626:	e9d5 1200 	ldrd	r1, r2, [r5]
 808662a:	fb09 1202 	mla	r2, r9, r2, r1
 808662e:	f7ff feea 	bl	8086406 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
 8086632:	6828      	ldr	r0, [r5, #0]
 8086634:	f7fe fd84 	bl	8085140 <free>
        data_ = d;
 8086638:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
 808663c:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
 8086640:	682b      	ldr	r3, [r5, #0]
 8086642:	9a01      	ldr	r2, [sp, #4]
 8086644:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
 8086648:	686a      	ldr	r2, [r5, #4]
 808664a:	4651      	mov	r1, sl
 808664c:	fb09 3202 	mla	r2, r9, r2, r3
 8086650:	f10a 0014 	add.w	r0, sl, #20
 8086654:	f7ff fed7 	bl	8086406 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 8086658:	f1ba 0f00 	cmp.w	sl, #0
 808665c:	d003      	beq.n	8086666 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
 808665e:	4650      	mov	r0, sl
 8086660:	a90f      	add	r1, sp, #60	; 0x3c
 8086662:	f7ff fb36 	bl	8085cd2 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
 8086666:	686b      	ldr	r3, [r5, #4]
 8086668:	3301      	adds	r3, #1
 808666a:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
 808666c:	a811      	add	r0, sp, #68	; 0x44
 808666e:	f7ff fcd3 	bl	8086018 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 8086672:	b13f      	cbz	r7, 8086684 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
 8086674:	a80b      	add	r0, sp, #44	; 0x2c
 8086676:	f7ff fccf 	bl	8086018 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 808667a:	e771      	b.n	8086560 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 808667c:	46bb      	mov	fp, r7
 808667e:	e7d8      	b.n	8086632 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 8086680:	2701      	movs	r7, #1
 8086682:	e7f3      	b.n	808666c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
 8086684:	9b01      	ldr	r3, [sp, #4]
 8086686:	682d      	ldr	r5, [r5, #0]
 8086688:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
 808668c:	9b06      	ldr	r3, [sp, #24]
 808668e:	781b      	ldrb	r3, [r3, #0]
 8086690:	b92b      	cbnz	r3, 808669e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
 8086692:	f8d8 3000 	ldr.w	r3, [r8]
 8086696:	9a02      	ldr	r2, [sp, #8]
 8086698:	4413      	add	r3, r2
 808669a:	7c1b      	ldrb	r3, [r3, #16]
 808669c:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 808669e:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 80866a0:	e78e      	b.n	80865c0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80866a2:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 80866a4:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80866a6:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 80866a8:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80866aa:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80866ac:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 80866ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
 80866b0:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80866b2:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 80866b4:	60a2      	str	r2, [r4, #8]
 80866b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
 80866b8:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80866ba:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 80866bc:	60e2      	str	r2, [r4, #12]
 80866be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 80866c0:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80866c2:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 80866c4:	6122      	str	r2, [r4, #16]
 80866c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 80866c8:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
 80866ca:	9b03      	ldr	r3, [sp, #12]
 80866cc:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 80866ce:	6162      	str	r2, [r4, #20]
 80866d0:	7623      	strb	r3, [r4, #24]
 80866d2:	e7cf      	b.n	8086674 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>

080866d4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 80866d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80866d6:	4604      	mov	r4, r0
        filter_(level, filters) {
 80866d8:	4626      	mov	r6, r4
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 80866da:	4617      	mov	r7, r2
 80866dc:	b087      	sub	sp, #28
 80866de:	460d      	mov	r5, r1
        stream_(&stream) {
 80866e0:	4668      	mov	r0, sp
 80866e2:	4619      	mov	r1, r3
 80866e4:	f7fb f970 	bl	80819c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 80866e8:	4b0b      	ldr	r3, [pc, #44]	; (8086718 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
 80866ea:	4669      	mov	r1, sp
 80866ec:	f846 3b04 	str.w	r3, [r6], #4
 80866f0:	a803      	add	r0, sp, #12
 80866f2:	f7fb f969 	bl	80819c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80866f6:	4639      	mov	r1, r7
 80866f8:	aa03      	add	r2, sp, #12
 80866fa:	4630      	mov	r0, r6
 80866fc:	f7ff fef1 	bl	80864e2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 8086700:	a803      	add	r0, sp, #12
 8086702:	f7fa ff4b 	bl	808159c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 8086706:	4668      	mov	r0, sp
 8086708:	f7fa ff48 	bl	808159c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 808670c:	4620      	mov	r0, r4
        stream_(&stream) {
 808670e:	4b03      	ldr	r3, [pc, #12]	; (808671c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
 8086710:	6225      	str	r5, [r4, #32]
 8086712:	6023      	str	r3, [r4, #0]
}
 8086714:	b007      	add	sp, #28
 8086716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8086718:	0808b5dc 	.word	0x0808b5dc
 808671c:	0808bbdc 	.word	0x0808bbdc

08086720 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 8086720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8086722:	460f      	mov	r7, r1
 8086724:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 8086726:	4638      	mov	r0, r7
 8086728:	491c      	ldr	r1, [pc, #112]	; (808679c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
 808672a:	4616      	mov	r6, r2
 808672c:	461d      	mov	r5, r3
 808672e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 8086730:	f004 fad5 	bl	808acde <strcmp>
 8086734:	b9c0      	cbnz	r0, 8086768 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
 8086736:	b1a4      	cbz	r4, 8086762 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 8086738:	4629      	mov	r1, r5
 808673a:	a801      	add	r0, sp, #4
 808673c:	f7ff fcc6 	bl	80860cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 8086740:	2024      	movs	r0, #36	; 0x24
 8086742:	4917      	ldr	r1, [pc, #92]	; (80867a0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 8086744:	f001 feb5 	bl	80884b2 <_ZnwjRKSt9nothrow_t>
 8086748:	4605      	mov	r5, r0
 808674a:	b130      	cbz	r0, 808675a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
 808674c:	ab01      	add	r3, sp, #4
 808674e:	4632      	mov	r2, r6
 8086750:	4621      	mov	r1, r4
 8086752:	f7ff ffbf 	bl	80866d4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 8086756:	4b13      	ldr	r3, [pc, #76]	; (80867a4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
 8086758:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 808675a:	a801      	add	r0, sp, #4
 808675c:	f7fa ff1e 	bl	808159c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 8086760:	462c      	mov	r4, r5
}
 8086762:	4620      	mov	r0, r4
 8086764:	b005      	add	sp, #20
 8086766:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 8086768:	4638      	mov	r0, r7
 808676a:	490f      	ldr	r1, [pc, #60]	; (80867a8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
 808676c:	f004 fab7 	bl	808acde <strcmp>
 8086770:	b990      	cbnz	r0, 8086798 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
 8086772:	2c00      	cmp	r4, #0
 8086774:	d0f5      	beq.n	8086762 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 8086776:	4629      	mov	r1, r5
 8086778:	a801      	add	r0, sp, #4
 808677a:	f7ff fca7 	bl	80860cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 808677e:	2024      	movs	r0, #36	; 0x24
 8086780:	4907      	ldr	r1, [pc, #28]	; (80867a0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 8086782:	f001 fe96 	bl	80884b2 <_ZnwjRKSt9nothrow_t>
 8086786:	4605      	mov	r5, r0
 8086788:	2800      	cmp	r0, #0
 808678a:	d0e6      	beq.n	808675a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
 808678c:	4632      	mov	r2, r6
 808678e:	4621      	mov	r1, r4
 8086790:	ab01      	add	r3, sp, #4
 8086792:	f7ff ff9f 	bl	80866d4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 8086796:	e7e0      	b.n	808675a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
 8086798:	2400      	movs	r4, #0
 808679a:	e7e2      	b.n	8086762 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
 808679c:	0808bb66 	.word	0x0808bb66
 80867a0:	0808bd99 	.word	0x0808bd99
 80867a4:	0808bbf4 	.word	0x0808bbf4
 80867a8:	0808bb6a 	.word	0x0808bb6a

080867ac <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 80867ac:	4b01      	ldr	r3, [pc, #4]	; (80867b4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80867ae:	4a02      	ldr	r2, [pc, #8]	; (80867b8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80867b0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80867b2:	4770      	bx	lr
 80867b4:	20000404 	.word	0x20000404
 80867b8:	0808bb7b 	.word	0x0808bb7b

080867bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80867bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80867c0:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 80867c2:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80867c6:	4604      	mov	r4, r0
 80867c8:	460e      	mov	r6, r1
 80867ca:	4617      	mov	r7, r2
 80867cc:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 80867ce:	f000 fff5 	bl	80877bc <_Z16_fetch_usbserialv>
 80867d2:	4581      	cmp	r9, r0
 80867d4:	d04d      	beq.n	8086872 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 80867d6:	792b      	ldrb	r3, [r5, #4]
 80867d8:	0719      	lsls	r1, r3, #28
 80867da:	d504      	bpl.n	80867e6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 80867dc:	4620      	mov	r0, r4
 80867de:	696a      	ldr	r2, [r5, #20]
 80867e0:	4954      	ldr	r1, [pc, #336]	; (8086934 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 80867e2:	f7ff fa67 	bl	8085cb4 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 80867e6:	f1b8 0f00 	cmp.w	r8, #0
 80867ea:	d00d      	beq.n	8086808 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 80867ec:	215b      	movs	r1, #91	; 0x5b
 80867ee:	4620      	mov	r0, r4
 80867f0:	f7ff fa54 	bl	8085c9c <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 80867f4:	4641      	mov	r1, r8
 80867f6:	4620      	mov	r0, r4
 80867f8:	f7ff fa42 	bl	8085c80 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 80867fc:	6823      	ldr	r3, [r4, #0]
 80867fe:	2202      	movs	r2, #2
 8086800:	4620      	mov	r0, r4
 8086802:	68db      	ldr	r3, [r3, #12]
 8086804:	494c      	ldr	r1, [pc, #304]	; (8086938 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 8086806:	4798      	blx	r3
    if (attr.has_file) {
 8086808:	792b      	ldrb	r3, [r5, #4]
 808680a:	07da      	lsls	r2, r3, #31
 808680c:	d524      	bpl.n	8086858 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 808680e:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 8086812:	212f      	movs	r1, #47	; 0x2f
 8086814:	4640      	mov	r0, r8
 8086816:	f004 fabf 	bl	808ad98 <strrchr>
    if (s1) {
 808681a:	b108      	cbz	r0, 8086820 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 808681c:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 8086820:	4641      	mov	r1, r8
 8086822:	4620      	mov	r0, r4
 8086824:	f7ff fa2c 	bl	8085c80 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 8086828:	792b      	ldrb	r3, [r5, #4]
 808682a:	079b      	lsls	r3, r3, #30
 808682c:	d508      	bpl.n	8086840 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 808682e:	213a      	movs	r1, #58	; 0x3a
 8086830:	4620      	mov	r0, r4
 8086832:	f7ff fa33 	bl	8085c9c <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 8086836:	4620      	mov	r0, r4
 8086838:	68ea      	ldr	r2, [r5, #12]
 808683a:	4940      	ldr	r1, [pc, #256]	; (808693c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 808683c:	f7ff fa3a 	bl	8085cb4 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 8086840:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
 8086842:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
 8086844:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 8086848:	4620      	mov	r0, r4
            write(", ", 2);
 808684a:	f04f 0202 	mov.w	r2, #2
 808684e:	68db      	ldr	r3, [r3, #12]
 8086850:	bf14      	ite	ne
 8086852:	493b      	ldrne	r1, [pc, #236]	; (8086940 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 8086854:	493b      	ldreq	r1, [pc, #236]	; (8086944 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 8086856:	4798      	blx	r3
    if (attr.has_function) {
 8086858:	792b      	ldrb	r3, [r5, #4]
 808685a:	0758      	lsls	r0, r3, #29
 808685c:	d51d      	bpl.n	808689a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 808685e:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 8086860:	460b      	mov	r3, r1
 8086862:	461a      	mov	r2, r3
    for (; *s; ++s) {
 8086864:	f813 0b01 	ldrb.w	r0, [r3], #1
 8086868:	b160      	cbz	r0, 8086884 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 808686a:	2820      	cmp	r0, #32
 808686c:	d108      	bne.n	8086880 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 808686e:	4619      	mov	r1, r3
 8086870:	e7f7      	b.n	8086862 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 8086872:	4835      	ldr	r0, [pc, #212]	; (8086948 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 8086874:	f001 fa7f 	bl	8087d76 <_ZN5spark12NetworkClass9listeningEv>
 8086878:	2800      	cmp	r0, #0
 808687a:	d0ac      	beq.n	80867d6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 808687c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 8086880:	2828      	cmp	r0, #40	; 0x28
 8086882:	d1ee      	bne.n	8086862 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 8086884:	6823      	ldr	r3, [r4, #0]
 8086886:	1a52      	subs	r2, r2, r1
 8086888:	4620      	mov	r0, r4
 808688a:	68db      	ldr	r3, [r3, #12]
 808688c:	4798      	blx	r3
        write("(): ", 4);
 808688e:	6823      	ldr	r3, [r4, #0]
 8086890:	2204      	movs	r2, #4
 8086892:	4620      	mov	r0, r4
 8086894:	68db      	ldr	r3, [r3, #12]
 8086896:	492d      	ldr	r1, [pc, #180]	; (808694c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 8086898:	4798      	blx	r3
    return log_level_name(level, nullptr);
 808689a:	2100      	movs	r1, #0
 808689c:	4638      	mov	r0, r7
 808689e:	f7fe fb0f 	bl	8084ec0 <log_level_name>
 80868a2:	4601      	mov	r1, r0
    write(s);
 80868a4:	4620      	mov	r0, r4
 80868a6:	f7ff f9eb 	bl	8085c80 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 80868aa:	6823      	ldr	r3, [r4, #0]
 80868ac:	2202      	movs	r2, #2
 80868ae:	4620      	mov	r0, r4
 80868b0:	68db      	ldr	r3, [r3, #12]
 80868b2:	4924      	ldr	r1, [pc, #144]	; (8086944 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 80868b4:	4798      	blx	r3
    if (msg) {
 80868b6:	b11e      	cbz	r6, 80868c0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 80868b8:	4631      	mov	r1, r6
 80868ba:	4620      	mov	r0, r4
 80868bc:	f7ff f9e0 	bl	8085c80 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 80868c0:	792b      	ldrb	r3, [r5, #4]
 80868c2:	f013 0f30 	tst.w	r3, #48	; 0x30
 80868c6:	d02c      	beq.n	8086922 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 80868c8:	6823      	ldr	r3, [r4, #0]
 80868ca:	4921      	ldr	r1, [pc, #132]	; (8086950 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 80868cc:	68db      	ldr	r3, [r3, #12]
 80868ce:	2202      	movs	r2, #2
 80868d0:	4620      	mov	r0, r4
 80868d2:	4798      	blx	r3
        if (attr.has_code) {
 80868d4:	792b      	ldrb	r3, [r5, #4]
 80868d6:	06d9      	lsls	r1, r3, #27
 80868d8:	d50a      	bpl.n	80868f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 80868da:	6823      	ldr	r3, [r4, #0]
 80868dc:	2207      	movs	r2, #7
 80868de:	4620      	mov	r0, r4
 80868e0:	491c      	ldr	r1, [pc, #112]	; (8086954 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 80868e2:	68db      	ldr	r3, [r3, #12]
 80868e4:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 80868e6:	4620      	mov	r0, r4
 80868e8:	69aa      	ldr	r2, [r5, #24]
 80868ea:	491b      	ldr	r1, [pc, #108]	; (8086958 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 80868ec:	f7ff f9e2 	bl	8085cb4 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 80868f0:	792b      	ldrb	r3, [r5, #4]
 80868f2:	069a      	lsls	r2, r3, #26
 80868f4:	d511      	bpl.n	808691a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 80868f6:	06db      	lsls	r3, r3, #27
 80868f8:	d505      	bpl.n	8086906 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 80868fa:	6823      	ldr	r3, [r4, #0]
 80868fc:	2202      	movs	r2, #2
 80868fe:	4620      	mov	r0, r4
 8086900:	68db      	ldr	r3, [r3, #12]
 8086902:	490f      	ldr	r1, [pc, #60]	; (8086940 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 8086904:	4798      	blx	r3
            write("details = ", 10);
 8086906:	6823      	ldr	r3, [r4, #0]
 8086908:	4620      	mov	r0, r4
 808690a:	4914      	ldr	r1, [pc, #80]	; (808695c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 808690c:	220a      	movs	r2, #10
 808690e:	68db      	ldr	r3, [r3, #12]
 8086910:	4798      	blx	r3
            write(attr.details);
 8086912:	4620      	mov	r0, r4
 8086914:	69e9      	ldr	r1, [r5, #28]
 8086916:	f7ff f9b3 	bl	8085c80 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 808691a:	215d      	movs	r1, #93	; 0x5d
 808691c:	4620      	mov	r0, r4
 808691e:	f7ff f9bd 	bl	8085c9c <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 8086922:	6823      	ldr	r3, [r4, #0]
 8086924:	4620      	mov	r0, r4
}
 8086926:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 808692a:	2202      	movs	r2, #2
 808692c:	68db      	ldr	r3, [r3, #12]
 808692e:	490c      	ldr	r1, [pc, #48]	; (8086960 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 8086930:	4718      	bx	r3
 8086932:	bf00      	nop
 8086934:	0808bb7f 	.word	0x0808bb7f
 8086938:	0808bb86 	.word	0x0808bb86
 808693c:	0808b80f 	.word	0x0808b80f
 8086940:	0808bb89 	.word	0x0808bb89
 8086944:	0808bb8e 	.word	0x0808bb8e
 8086948:	200009a0 	.word	0x200009a0
 808694c:	0808bb8c 	.word	0x0808bb8c
 8086950:	0808bb91 	.word	0x0808bb91
 8086954:	0808bb94 	.word	0x0808bb94
 8086958:	0808bb9c 	.word	0x0808bb9c
 808695c:	0808bb9f 	.word	0x0808bb9f
 8086960:	0808b6b6 	.word	0x0808b6b6

08086964 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 8086964:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8086968:	b085      	sub	sp, #20
    return stream_;
 808696a:	f8d0 9020 	ldr.w	r9, [r0, #32]
 808696e:	4605      	mov	r5, r0
 8086970:	460f      	mov	r7, r1
 8086972:	4690      	mov	r8, r2
 8086974:	461e      	mov	r6, r3
 8086976:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 8086978:	f000 ff20 	bl	80877bc <_Z16_fetch_usbserialv>
 808697c:	4581      	cmp	r9, r0
 808697e:	d105      	bne.n	808698c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 8086980:	4849      	ldr	r0, [pc, #292]	; (8086aa8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 8086982:	f001 f9f8 	bl	8087d76 <_ZN5spark12NetworkClass9listeningEv>
 8086986:	2800      	cmp	r0, #0
 8086988:	f040 808a 	bne.w	8086aa0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 808698c:	f04f 0900 	mov.w	r9, #0
 8086990:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 8086992:	4a46      	ldr	r2, [pc, #280]	; (8086aac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 8086994:	a801      	add	r0, sp, #4
 8086996:	9201      	str	r2, [sp, #4]
 8086998:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 808699a:	f88d 9008 	strb.w	r9, [sp, #8]
 808699e:	f001 fb4a 	bl	8088036 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
 80869a2:	4649      	mov	r1, r9
 80869a4:	4640      	mov	r0, r8
 80869a6:	f7fe fa8b 	bl	8084ec0 <log_level_name>
 80869aa:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 80869ac:	4940      	ldr	r1, [pc, #256]	; (8086ab0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 80869ae:	2201      	movs	r2, #1
 80869b0:	a801      	add	r0, sp, #4
 80869b2:	f001 fbcb 	bl	808814c <_ZN5spark10JSONWriter4nameEPKcj>
 80869b6:	4641      	mov	r1, r8
 80869b8:	f7ff f955 	bl	8085c66 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 80869bc:	b13f      	cbz	r7, 80869ce <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 80869be:	493d      	ldr	r1, [pc, #244]	; (8086ab4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 80869c0:	2201      	movs	r2, #1
 80869c2:	a801      	add	r0, sp, #4
 80869c4:	f001 fbc2 	bl	808814c <_ZN5spark10JSONWriter4nameEPKcj>
 80869c8:	4639      	mov	r1, r7
 80869ca:	f7ff f94c 	bl	8085c66 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 80869ce:	b13e      	cbz	r6, 80869e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 80869d0:	4939      	ldr	r1, [pc, #228]	; (8086ab8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 80869d2:	2201      	movs	r2, #1
 80869d4:	a801      	add	r0, sp, #4
 80869d6:	f001 fbb9 	bl	808814c <_ZN5spark10JSONWriter4nameEPKcj>
 80869da:	4631      	mov	r1, r6
 80869dc:	f7ff f943 	bl	8085c66 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 80869e0:	7923      	ldrb	r3, [r4, #4]
 80869e2:	07df      	lsls	r7, r3, #31
 80869e4:	d50e      	bpl.n	8086a04 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 80869e6:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 80869e8:	212f      	movs	r1, #47	; 0x2f
 80869ea:	4630      	mov	r0, r6
 80869ec:	f004 f9d4 	bl	808ad98 <strrchr>
    if (s1) {
 80869f0:	b100      	cbz	r0, 80869f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 80869f2:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 80869f4:	4931      	ldr	r1, [pc, #196]	; (8086abc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 80869f6:	2201      	movs	r2, #1
 80869f8:	a801      	add	r0, sp, #4
 80869fa:	f001 fba7 	bl	808814c <_ZN5spark10JSONWriter4nameEPKcj>
 80869fe:	4631      	mov	r1, r6
 8086a00:	f7ff f931 	bl	8085c66 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 8086a04:	7923      	ldrb	r3, [r4, #4]
 8086a06:	079e      	lsls	r6, r3, #30
 8086a08:	d507      	bpl.n	8086a1a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 8086a0a:	492d      	ldr	r1, [pc, #180]	; (8086ac0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 8086a0c:	2202      	movs	r2, #2
 8086a0e:	a801      	add	r0, sp, #4
 8086a10:	f001 fb9c 	bl	808814c <_ZN5spark10JSONWriter4nameEPKcj>
 8086a14:	68e1      	ldr	r1, [r4, #12]
 8086a16:	f001 fb1b 	bl	8088050 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 8086a1a:	7923      	ldrb	r3, [r4, #4]
 8086a1c:	0758      	lsls	r0, r3, #29
 8086a1e:	d514      	bpl.n	8086a4a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 8086a20:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 8086a22:	4633      	mov	r3, r6
 8086a24:	461f      	mov	r7, r3
    for (; *s; ++s) {
 8086a26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8086a2a:	b12a      	cbz	r2, 8086a38 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 8086a2c:	2a20      	cmp	r2, #32
 8086a2e:	d101      	bne.n	8086a34 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 8086a30:	461e      	mov	r6, r3
 8086a32:	e7f7      	b.n	8086a24 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 8086a34:	2a28      	cmp	r2, #40	; 0x28
 8086a36:	d1f5      	bne.n	8086a24 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 8086a38:	2202      	movs	r2, #2
 8086a3a:	4922      	ldr	r1, [pc, #136]	; (8086ac4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 8086a3c:	a801      	add	r0, sp, #4
 8086a3e:	f001 fb85 	bl	808814c <_ZN5spark10JSONWriter4nameEPKcj>
 8086a42:	4631      	mov	r1, r6
 8086a44:	1bba      	subs	r2, r7, r6
 8086a46:	f001 fb90 	bl	808816a <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 8086a4a:	7923      	ldrb	r3, [r4, #4]
 8086a4c:	0719      	lsls	r1, r3, #28
 8086a4e:	d507      	bpl.n	8086a60 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 8086a50:	491d      	ldr	r1, [pc, #116]	; (8086ac8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 8086a52:	2201      	movs	r2, #1
 8086a54:	a801      	add	r0, sp, #4
 8086a56:	f001 fb79 	bl	808814c <_ZN5spark10JSONWriter4nameEPKcj>
 8086a5a:	6961      	ldr	r1, [r4, #20]
 8086a5c:	f001 fb0a 	bl	8088074 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 8086a60:	7923      	ldrb	r3, [r4, #4]
 8086a62:	06da      	lsls	r2, r3, #27
 8086a64:	d508      	bpl.n	8086a78 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 8086a66:	2204      	movs	r2, #4
 8086a68:	4918      	ldr	r1, [pc, #96]	; (8086acc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 8086a6a:	eb0d 0002 	add.w	r0, sp, r2
 8086a6e:	f001 fb6d 	bl	808814c <_ZN5spark10JSONWriter4nameEPKcj>
 8086a72:	69a1      	ldr	r1, [r4, #24]
 8086a74:	f001 faec 	bl	8088050 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 8086a78:	7923      	ldrb	r3, [r4, #4]
 8086a7a:	069b      	lsls	r3, r3, #26
 8086a7c:	d507      	bpl.n	8086a8e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 8086a7e:	4914      	ldr	r1, [pc, #80]	; (8086ad0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 8086a80:	2206      	movs	r2, #6
 8086a82:	a801      	add	r0, sp, #4
 8086a84:	f001 fb62 	bl	808814c <_ZN5spark10JSONWriter4nameEPKcj>
 8086a88:	69e1      	ldr	r1, [r4, #28]
 8086a8a:	f7ff f8ec 	bl	8085c66 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 8086a8e:	a801      	add	r0, sp, #4
 8086a90:	f001 fabb 	bl	808800a <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
 8086a94:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 8086a96:	2202      	movs	r2, #2
 8086a98:	6803      	ldr	r3, [r0, #0]
 8086a9a:	490e      	ldr	r1, [pc, #56]	; (8086ad4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 8086a9c:	68db      	ldr	r3, [r3, #12]
 8086a9e:	4798      	blx	r3
}
 8086aa0:	b005      	add	sp, #20
 8086aa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8086aa6:	bf00      	nop
 8086aa8:	200009a0 	.word	0x200009a0
 8086aac:	0808bbc4 	.word	0x0808bbc4
 8086ab0:	0808b487 	.word	0x0808b487
 8086ab4:	0808b6e4 	.word	0x0808b6e4
 8086ab8:	0808be9b 	.word	0x0808be9b
 8086abc:	0808b864 	.word	0x0808b864
 8086ac0:	0808bbaa 	.word	0x0808bbaa
 8086ac4:	0808bbad 	.word	0x0808bbad
 8086ac8:	0808b749 	.word	0x0808b749
 8086acc:	0808bbb0 	.word	0x0808bbb0
 8086ad0:	0808bbb5 	.word	0x0808bbb5
 8086ad4:	0808b6b6 	.word	0x0808b6b6

08086ad8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 8086ad8:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 8086ada:	2000      	movs	r0, #0
 8086adc:	f7fe fb10 	bl	8085100 <spark_sync_time_pending>
 8086ae0:	b128      	cbz	r0, 8086aee <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8086ae2:	f7fe faed 	bl	80850c0 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 8086ae6:	f080 0001 	eor.w	r0, r0, #1
 8086aea:	b2c0      	uxtb	r0, r0
    }
 8086aec:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 8086aee:	2001      	movs	r0, #1
 8086af0:	e7fc      	b.n	8086aec <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

08086af4 <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 8086af4:	b530      	push	{r4, r5, lr}
 8086af6:	b093      	sub	sp, #76	; 0x4c
 8086af8:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
 8086afc:	4b19      	ldr	r3, [pc, #100]	; (8086b64 <_ZN9TimeClass7timeStrEx+0x70>)
{
 8086afe:	4604      	mov	r4, r0
    t += time_zone_cache;
 8086b00:	e9d3 1000 	ldrd	r1, r0, [r3]
 8086b04:	9b01      	ldr	r3, [sp, #4]
 8086b06:	1852      	adds	r2, r2, r1
 8086b08:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
 8086b0c:	4816      	ldr	r0, [pc, #88]	; (8086b68 <_ZN9TimeClass7timeStrEx+0x74>)
    struct tm calendar_time = {};
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
 8086b0e:	2500      	movs	r5, #0
    t += dst_current_cache;
 8086b10:	e9d0 1000 	ldrd	r1, r0, [r0]
 8086b14:	1852      	adds	r2, r2, r1
 8086b16:	eb43 0300 	adc.w	r3, r3, r0
 8086b1a:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
 8086b1e:	2224      	movs	r2, #36	; 0x24
 8086b20:	2100      	movs	r1, #0
 8086b22:	eb0d 0002 	add.w	r0, sp, r2
 8086b26:	f004 f88d 	bl	808ac44 <memset>
    localtime_r(&t, &calendar_time);
 8086b2a:	a909      	add	r1, sp, #36	; 0x24
 8086b2c:	4668      	mov	r0, sp
 8086b2e:	f7f9 fa77 	bl	8080020 <localtime_r>
    char ascstr[26] = {};
 8086b32:	2216      	movs	r2, #22
 8086b34:	4629      	mov	r1, r5
 8086b36:	a803      	add	r0, sp, #12
 8086b38:	9502      	str	r5, [sp, #8]
 8086b3a:	f004 f883 	bl	808ac44 <memset>
    asctime_r(&calendar_time, ascstr);
 8086b3e:	a902      	add	r1, sp, #8
 8086b40:	a809      	add	r0, sp, #36	; 0x24
 8086b42:	f004 f81b 	bl	808ab7c <asctime_r>
    int len = strlen(ascstr);
 8086b46:	a802      	add	r0, sp, #8
 8086b48:	f004 f8f7 	bl	808ad3a <strlen>
    ascstr[len-1] = 0; // remove final newline
 8086b4c:	ab12      	add	r3, sp, #72	; 0x48
 8086b4e:	4418      	add	r0, r3
 8086b50:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
 8086b54:	a902      	add	r1, sp, #8
 8086b56:	4620      	mov	r0, r4
 8086b58:	f7fe fd62 	bl	8085620 <_ZN6StringC1EPK19__FlashStringHelper>
}
 8086b5c:	4620      	mov	r0, r4
 8086b5e:	b013      	add	sp, #76	; 0x4c
 8086b60:	bd30      	pop	{r4, r5, pc}
 8086b62:	bf00      	nop
 8086b64:	20000440 	.word	0x20000440
 8086b68:	20000438 	.word	0x20000438

08086b6c <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 8086b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8086b70:	b0a4      	sub	sp, #144	; 0x90
 8086b72:	4607      	mov	r7, r0
 8086b74:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 8086b76:	a814      	add	r0, sp, #80	; 0x50
{
 8086b78:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 8086b7a:	223f      	movs	r2, #63	; 0x3f
{
 8086b7c:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 8086b7e:	f004 f8f8 	bl	808ad72 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 8086b82:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 8086b84:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 8086b86:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 8086b8a:	f004 f8d6 	bl	808ad3a <strlen>
 8086b8e:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 8086b90:	bb4c      	cbnz	r4, 8086be6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
 8086b92:	4929      	ldr	r1, [pc, #164]	; (8086c38 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
 8086b94:	a803      	add	r0, sp, #12
 8086b96:	f004 f8ac 	bl	808acf2 <strcpy>
{
 8086b9a:	2600      	movs	r6, #0
 8086b9c:	ac14      	add	r4, sp, #80	; 0x50
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 8086b9e:	f105 39ff 	add.w	r9, r5, #4294967295
 8086ba2:	45b1      	cmp	r9, r6
 8086ba4:	d934      	bls.n	8086c10 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 8086ba6:	7823      	ldrb	r3, [r4, #0]
 8086ba8:	f106 0a01 	add.w	sl, r6, #1
 8086bac:	2b25      	cmp	r3, #37	; 0x25
 8086bae:	d117      	bne.n	8086be0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
 8086bb0:	7863      	ldrb	r3, [r4, #1]
 8086bb2:	2b7a      	cmp	r3, #122	; 0x7a
 8086bb4:	d114      	bne.n	8086be0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
 8086bb6:	a803      	add	r0, sp, #12
 8086bb8:	f004 f8bf 	bl	808ad3a <strlen>
 8086bbc:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 8086bbe:	ab14      	add	r3, sp, #80	; 0x50
 8086bc0:	1830      	adds	r0, r6, r0
 8086bc2:	4418      	add	r0, r3
 8086bc4:	eba9 0206 	sub.w	r2, r9, r6
 8086bc8:	1ca1      	adds	r1, r4, #2
 8086bca:	f004 f813 	bl	808abf4 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 8086bce:	462a      	mov	r2, r5
 8086bd0:	a903      	add	r1, sp, #12
 8086bd2:	4620      	mov	r0, r4
 8086bd4:	f004 f80e 	bl	808abf4 <memcpy>
            len = strlen(format_str);
 8086bd8:	a814      	add	r0, sp, #80	; 0x50
 8086bda:	f004 f8ae 	bl	808ad3a <strlen>
 8086bde:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
 8086be0:	4656      	mov	r6, sl
 8086be2:	3401      	adds	r4, #1
 8086be4:	e7db      	b.n	8086b9e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 8086be6:	233c      	movs	r3, #60	; 0x3c
 8086be8:	fb94 f2f3 	sdiv	r2, r4, r3
 8086bec:	2a00      	cmp	r2, #0
 8086bee:	bfb8      	it	lt
 8086bf0:	4252      	neglt	r2, r2
 8086bf2:	fbb2 f1f3 	udiv	r1, r2, r3
 8086bf6:	fb03 2211 	mls	r2, r3, r1, r2
 8086bfa:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8086bfe:	9200      	str	r2, [sp, #0]
 8086c00:	fb94 f3f3 	sdiv	r3, r4, r3
 8086c04:	2110      	movs	r1, #16
 8086c06:	4a0d      	ldr	r2, [pc, #52]	; (8086c3c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
 8086c08:	a803      	add	r0, sp, #12
 8086c0a:	f7fe fab1 	bl	8085170 <snprintf>
 8086c0e:	e7c4      	b.n	8086b9a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
 8086c10:	2100      	movs	r1, #0
 8086c12:	222e      	movs	r2, #46	; 0x2e
 8086c14:	a808      	add	r0, sp, #32
 8086c16:	9107      	str	r1, [sp, #28]
 8086c18:	f004 f814 	bl	808ac44 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
 8086c1c:	4643      	mov	r3, r8
 8086c1e:	aa14      	add	r2, sp, #80	; 0x50
 8086c20:	2132      	movs	r1, #50	; 0x32
 8086c22:	a807      	add	r0, sp, #28
 8086c24:	f7f9 fa04 	bl	8080030 <strftime>
    return String(buf);
 8086c28:	4638      	mov	r0, r7
 8086c2a:	a907      	add	r1, sp, #28
 8086c2c:	f7fe fcf8 	bl	8085620 <_ZN6StringC1EPK19__FlashStringHelper>
}
 8086c30:	4638      	mov	r0, r7
 8086c32:	b024      	add	sp, #144	; 0x90
 8086c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8086c38:	0808bc34 	.word	0x0808bc34
 8086c3c:	0808bc36 	.word	0x0808bc36

08086c40 <_ZN9TimeClass6formatExPKc>:
{
 8086c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8086c42:	b08d      	sub	sp, #52	; 0x34
 8086c44:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8086c46:	4604      	mov	r4, r0
 8086c48:	e9cd 2300 	strd	r2, r3, [sp]
    if (format_spec == nullptr)
 8086c4c:	b915      	cbnz	r5, 8086c54 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
 8086c4e:	4b19      	ldr	r3, [pc, #100]	; (8086cb4 <_ZN9TimeClass6formatExPKc+0x74>)
 8086c50:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
 8086c52:	b12d      	cbz	r5, 8086c60 <_ZN9TimeClass6formatExPKc+0x20>
 8086c54:	4b18      	ldr	r3, [pc, #96]	; (8086cb8 <_ZN9TimeClass6formatExPKc+0x78>)
 8086c56:	4628      	mov	r0, r5
 8086c58:	6819      	ldr	r1, [r3, #0]
 8086c5a:	f004 f840 	bl	808acde <strcmp>
 8086c5e:	b938      	cbnz	r0, 8086c70 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
 8086c60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8086c64:	4620      	mov	r0, r4
 8086c66:	f7ff ff45 	bl	8086af4 <_ZN9TimeClass7timeStrEx>
}
 8086c6a:	4620      	mov	r0, r4
 8086c6c:	b00d      	add	sp, #52	; 0x34
 8086c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
 8086c70:	9900      	ldr	r1, [sp, #0]
 8086c72:	4e12      	ldr	r6, [pc, #72]	; (8086cbc <_ZN9TimeClass6formatExPKc+0x7c>)
    t += dst_current_cache;
 8086c74:	4f12      	ldr	r7, [pc, #72]	; (8086cc0 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
 8086c76:	e9d6 3200 	ldrd	r3, r2, [r6]
 8086c7a:	185b      	adds	r3, r3, r1
 8086c7c:	9901      	ldr	r1, [sp, #4]
 8086c7e:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
 8086c82:	e9d7 0100 	ldrd	r0, r1, [r7]
 8086c86:	181b      	adds	r3, r3, r0
 8086c88:	eb42 0201 	adc.w	r2, r2, r1
 8086c8c:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
 8086c90:	2100      	movs	r1, #0
 8086c92:	2224      	movs	r2, #36	; 0x24
 8086c94:	a803      	add	r0, sp, #12
 8086c96:	f003 ffd5 	bl	808ac44 <memset>
    localtime_r(&t, &calendar_time);
 8086c9a:	a903      	add	r1, sp, #12
 8086c9c:	4668      	mov	r0, sp
 8086c9e:	f7f9 f9bf 	bl	8080020 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
 8086ca2:	6832      	ldr	r2, [r6, #0]
 8086ca4:	683b      	ldr	r3, [r7, #0]
 8086ca6:	4620      	mov	r0, r4
 8086ca8:	4413      	add	r3, r2
 8086caa:	a903      	add	r1, sp, #12
 8086cac:	462a      	mov	r2, r5
 8086cae:	f7ff ff5d 	bl	8086b6c <_ZN9TimeClass14timeFormatImplEP2tmPKci>
 8086cb2:	e7da      	b.n	8086c6a <_ZN9TimeClass6formatExPKc+0x2a>
 8086cb4:	20000434 	.word	0x20000434
 8086cb8:	200000c0 	.word	0x200000c0
 8086cbc:	20000440 	.word	0x20000440
 8086cc0:	20000438 	.word	0x20000438

08086cc4 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
 8086cc4:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 8086cc6:	2000      	movs	r0, #0
 8086cc8:	f7fd ff02 	bl	8084ad0 <hal_rtc_time_is_valid>
    if (rtcstate)
 8086ccc:	4604      	mov	r4, r0
 8086cce:	b9a0      	cbnz	r0, 8086cfa <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 8086cd0:	f7fe f906 	bl	8084ee0 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 8086cd4:	2801      	cmp	r0, #1
 8086cd6:	d110      	bne.n	8086cfa <_ZN9TimeClass7isValidEv+0x36>
 8086cd8:	4620      	mov	r0, r4
 8086cda:	f7fe f941 	bl	8084f60 <system_thread_get_state>
 8086cde:	b960      	cbnz	r0, 8086cfa <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 8086ce0:	f7ff fefa 	bl	8086ad8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8086ce4:	b910      	cbnz	r0, 8086cec <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 8086ce6:	f7fe f9db 	bl	80850a0 <spark_process>
        while (_while() && !_condition()) {
 8086cea:	e7f9      	b.n	8086ce0 <_ZN9TimeClass7isValidEv+0x1c>
 8086cec:	f7ff fef4 	bl	8086ad8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 8086cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 8086cf4:	2000      	movs	r0, #0
 8086cf6:	f7fd beeb 	b.w	8084ad0 <hal_rtc_time_is_valid>
}
 8086cfa:	4620      	mov	r0, r4
 8086cfc:	bd10      	pop	{r4, pc}

08086cfe <_ZN9TimeClass3nowEv>:
{
 8086cfe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 8086d00:	f7ff ffe0 	bl	8086cc4 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 8086d04:	2210      	movs	r2, #16
 8086d06:	2100      	movs	r1, #0
 8086d08:	4668      	mov	r0, sp
 8086d0a:	f003 ff9b 	bl	808ac44 <memset>
    hal_rtc_get_time(&tv, nullptr);
 8086d0e:	2100      	movs	r1, #0
 8086d10:	4668      	mov	r0, sp
 8086d12:	f7fd fee5 	bl	8084ae0 <hal_rtc_get_time>
}
 8086d16:	9800      	ldr	r0, [sp, #0]
 8086d18:	b005      	add	sp, #20
 8086d1a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08086d20 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8086d20:	4b02      	ldr	r3, [pc, #8]	; (8086d2c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8086d22:	681a      	ldr	r2, [r3, #0]
 8086d24:	4b02      	ldr	r3, [pc, #8]	; (8086d30 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8086d26:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 8086d28:	4770      	bx	lr
 8086d2a:	bf00      	nop
 8086d2c:	200000c0 	.word	0x200000c0
 8086d30:	20000434 	.word	0x20000434

08086d34 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8086d34:	2100      	movs	r1, #0
 8086d36:	f7fe b8e3 	b.w	8084f00 <system_delay_ms>

08086d3a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8086d3a:	b510      	push	{r4, lr}
 8086d3c:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
 8086d3e:	f7f9 fd5d 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
 8086d42:	4620      	mov	r0, r4
 8086d44:	bd10      	pop	{r4, pc}
	...

08086d48 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 8086d48:	2300      	movs	r3, #0
 8086d4a:	4803      	ldr	r0, [pc, #12]	; (8086d58 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8086d4c:	4a03      	ldr	r2, [pc, #12]	; (8086d5c <_GLOBAL__sub_I_RGB+0x14>)
 8086d4e:	4904      	ldr	r1, [pc, #16]	; (8086d60 <_GLOBAL__sub_I_RGB+0x18>)
 8086d50:	6083      	str	r3, [r0, #8]
 8086d52:	f001 bba7 	b.w	80884a4 <__aeabi_atexit>
 8086d56:	bf00      	nop
 8086d58:	20000448 	.word	0x20000448
 8086d5c:	20000130 	.word	0x20000130
 8086d60:	08086d3b 	.word	0x08086d3b

08086d64 <_ZN8particle6detail9_getVCellEhh>:
    return i2c_.isEnabled();
}

namespace particle { namespace detail {
    // Converts VCELL_REGISTER reading to Battery Voltage
    float _getVCell(byte MSB, byte LSB) {
 8086d64:	b508      	push	{r3, lr}
        // VCELL = 12-bit value, 1.25mV (1V/800) per bit
        float value = (float)((MSB << 4) | (LSB >> 4));
 8086d66:	0909      	lsrs	r1, r1, #4
 8086d68:	ea41 1000 	orr.w	r0, r1, r0, lsl #4
 8086d6c:	f003 fcb0 	bl	808a6d0 <__aeabi_i2f>
        return value / 800.0;
 8086d70:	4901      	ldr	r1, [pc, #4]	; (8086d78 <_ZN8particle6detail9_getVCellEhh+0x14>)
 8086d72:	f003 fdb5 	bl	808a8e0 <__aeabi_fdiv>
    }
 8086d76:	bd08      	pop	{r3, pc}
 8086d78:	44480000 	.word	0x44480000

08086d7c <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
 8086d7c:	6800      	ldr	r0, [r0, #0]
 8086d7e:	f000 bf9d 	b.w	8087cbc <_ZN7TwoWire4lockEv>

08086d82 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 8086d82:	b510      	push	{r4, lr}
 8086d84:	4604      	mov	r4, r0
      lock_(_lock) {
 8086d86:	6001      	str	r1, [r0, #0]
 8086d88:	7102      	strb	r2, [r0, #4]
    if (lock_) {
 8086d8a:	b10a      	cbz	r2, 8086d90 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 8086d8c:	f7ff fff6 	bl	8086d7c <_ZN9FuelGauge4lockEv>
}
 8086d90:	4620      	mov	r0, r4
 8086d92:	bd10      	pop	{r4, pc}

08086d94 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
 8086d94:	b538      	push	{r3, r4, r5, lr}
 8086d96:	4604      	mov	r4, r0
 8086d98:	460d      	mov	r5, r1
            return &Wire3;
 8086d9a:	f001 fb5b 	bl	8088454 <_Z20__fetch_global_Wire3v>
        : FuelGauge(*fuelWireInstance(), _lock)
 8086d9e:	462a      	mov	r2, r5
            return &Wire3;
 8086da0:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
 8086da2:	4620      	mov	r0, r4
 8086da4:	f7ff ffed 	bl	8086d82 <_ZN9FuelGaugeC1ER7TwoWireb>
}
 8086da8:	4620      	mov	r0, r4
 8086daa:	bd38      	pop	{r3, r4, r5, pc}

08086dac <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
 8086dac:	6800      	ldr	r0, [r0, #0]
 8086dae:	f000 bf8e 	b.w	8087cce <_ZN7TwoWire6unlockEv>

08086db2 <_ZN9FuelGaugeD1Ev>:
FuelGauge::~FuelGauge()
 8086db2:	b510      	push	{r4, lr}
    if (lock_) {
 8086db4:	7903      	ldrb	r3, [r0, #4]
FuelGauge::~FuelGauge()
 8086db6:	4604      	mov	r4, r0
    if (lock_) {
 8086db8:	b10b      	cbz	r3, 8086dbe <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
 8086dba:	f7ff fff7 	bl	8086dac <_ZN9FuelGauge6unlockEv>
}
 8086dbe:	4620      	mov	r0, r4
 8086dc0:	bd10      	pop	{r4, pc}

08086dc2 <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
 8086dc2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8086dc6:	4604      	mov	r4, r0
 8086dc8:	460d      	mov	r5, r1
 8086dca:	4617      	mov	r7, r2
 8086dcc:	461e      	mov	r6, r3
 8086dce:	f7ff ffd5 	bl	8086d7c <_ZN9FuelGauge4lockEv>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8086dd2:	2236      	movs	r2, #54	; 0x36
 8086dd4:	2300      	movs	r3, #0
    timeout_ = ms;
 8086dd6:	f04f 0801 	mov.w	r8, #1
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8086dda:	e9cd 2300 	strd	r2, r3, [sp]
    timeout_ = ms;
 8086dde:	230a      	movs	r3, #10
    i2c_.beginTransmission(config);
 8086de0:	4669      	mov	r1, sp
 8086de2:	6820      	ldr	r0, [r4, #0]
 8086de4:	e9cd 8302 	strd	r8, r3, [sp, #8]
 8086de8:	f000 ff49 	bl	8087c7e <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
 8086dec:	6820      	ldr	r0, [r4, #0]
 8086dee:	4629      	mov	r1, r5
 8086df0:	6803      	ldr	r3, [r0, #0]
 8086df2:	689b      	ldr	r3, [r3, #8]
 8086df4:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
 8086df6:	4641      	mov	r1, r8
 8086df8:	6820      	ldr	r0, [r4, #0]
 8086dfa:	f000 ff58 	bl	8087cae <_ZN7TwoWire15endTransmissionEh>
 8086dfe:	4605      	mov	r5, r0
 8086e00:	b140      	cbz	r0, 8086e14 <_ZN9FuelGauge12readRegisterEhRhS0_+0x52>
 8086e02:	f06f 059f 	mvn.w	r5, #159	; 0x9f
      { _M_device.unlock(); }
 8086e06:	4620      	mov	r0, r4
 8086e08:	f7ff ffd0 	bl	8086dac <_ZN9FuelGauge6unlockEv>
}
 8086e0c:	4628      	mov	r0, r5
 8086e0e:	b004      	add	sp, #16
 8086e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
 8086e14:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
 8086e16:	4669      	mov	r1, sp
 8086e18:	6820      	ldr	r0, [r4, #0]
 8086e1a:	9301      	str	r3, [sp, #4]
 8086e1c:	f000 fefc 	bl	8087c18 <_ZN7TwoWire11requestFromERK16WireTransmission>
 8086e20:	2802      	cmp	r0, #2
 8086e22:	d1ee      	bne.n	8086e02 <_ZN9FuelGauge12readRegisterEhRhS0_+0x40>
    MSB = i2c_.read();
 8086e24:	6820      	ldr	r0, [r4, #0]
 8086e26:	6803      	ldr	r3, [r0, #0]
 8086e28:	695b      	ldr	r3, [r3, #20]
 8086e2a:	4798      	blx	r3
 8086e2c:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
 8086e2e:	6820      	ldr	r0, [r4, #0]
 8086e30:	6803      	ldr	r3, [r0, #0]
 8086e32:	695b      	ldr	r3, [r3, #20]
 8086e34:	4798      	blx	r3
 8086e36:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
 8086e38:	e7e5      	b.n	8086e06 <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>
	...

08086e3c <_ZN9FuelGauge8getVCellEv>:
    byte MSB = 0;
 8086e3c:	2300      	movs	r3, #0
float FuelGauge::getVCell() {
 8086e3e:	b507      	push	{r0, r1, r2, lr}
    if (readRegister(VCELL_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
 8086e40:	2102      	movs	r1, #2
    byte MSB = 0;
 8086e42:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
 8086e46:	f88d 3007 	strb.w	r3, [sp, #7]
    if (readRegister(VCELL_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
 8086e4a:	f10d 0206 	add.w	r2, sp, #6
 8086e4e:	f10d 0307 	add.w	r3, sp, #7
 8086e52:	f7ff ffb6 	bl	8086dc2 <_ZN9FuelGauge12readRegisterEhRhS0_>
 8086e56:	b940      	cbnz	r0, 8086e6a <_ZN9FuelGauge8getVCellEv+0x2e>
    return particle::detail::_getVCell(MSB, LSB);
 8086e58:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8086e5c:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
 8086e60:	b003      	add	sp, #12
 8086e62:	f85d eb04 	ldr.w	lr, [sp], #4
    return particle::detail::_getVCell(MSB, LSB);
 8086e66:	f7ff bf7d 	b.w	8086d64 <_ZN8particle6detail9_getVCellEhh>
}
 8086e6a:	4802      	ldr	r0, [pc, #8]	; (8086e74 <_ZN9FuelGauge8getVCellEv+0x38>)
 8086e6c:	b003      	add	sp, #12
 8086e6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8086e72:	bf00      	nop
 8086e74:	bf800000 	.word	0xbf800000

08086e78 <_ZN9FuelGauge6getSoCEv>:
    byte MSB = 0;
 8086e78:	2300      	movs	r3, #0
float FuelGauge::getSoC() {
 8086e7a:	b513      	push	{r0, r1, r4, lr}
    if(readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
 8086e7c:	2104      	movs	r1, #4
    byte MSB = 0;
 8086e7e:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
 8086e82:	f88d 3007 	strb.w	r3, [sp, #7]
    if(readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
 8086e86:	f10d 0206 	add.w	r2, sp, #6
 8086e8a:	f10d 0307 	add.w	r3, sp, #7
 8086e8e:	f7ff ff98 	bl	8086dc2 <_ZN9FuelGauge12readRegisterEhRhS0_>
 8086e92:	b9a0      	cbnz	r0, 8086ebe <_ZN9FuelGauge6getSoCEv+0x46>
        float decimal = LSB / 256.0;
 8086e94:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8086e98:	f002 ffae 	bl	8089df8 <__aeabi_i2d>
 8086e9c:	2200      	movs	r2, #0
 8086e9e:	4b09      	ldr	r3, [pc, #36]	; (8086ec4 <_ZN9FuelGauge6getSoCEv+0x4c>)
 8086ea0:	f003 f814 	bl	8089ecc <__aeabi_dmul>
 8086ea4:	f003 fb0a 	bl	808a4bc <__aeabi_d2f>
 8086ea8:	4604      	mov	r4, r0
        return MSB + decimal;
 8086eaa:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8086eae:	f003 fc0f 	bl	808a6d0 <__aeabi_i2f>
 8086eb2:	4601      	mov	r1, r0
 8086eb4:	4620      	mov	r0, r4
 8086eb6:	f003 fb57 	bl	808a568 <__addsf3>
}
 8086eba:	b002      	add	sp, #8
 8086ebc:	bd10      	pop	{r4, pc}
        return -1.0f;
 8086ebe:	4802      	ldr	r0, [pc, #8]	; (8086ec8 <_ZN9FuelGauge6getSoCEv+0x50>)
 8086ec0:	e7fb      	b.n	8086eba <_ZN9FuelGauge6getSoCEv+0x42>
 8086ec2:	bf00      	nop
 8086ec4:	3f700000 	.word	0x3f700000
 8086ec8:	bf800000 	.word	0xbf800000

08086ecc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 8086ecc:	4b01      	ldr	r3, [pc, #4]	; (8086ed4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 8086ece:	6018      	str	r0, [r3, #0]
    }, nullptr);
 8086ed0:	4770      	bx	lr
 8086ed2:	bf00      	nop
 8086ed4:	200000cc 	.word	0x200000cc

08086ed8 <serialEventRun>:
{
 8086ed8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8086eda:	4b17      	ldr	r3, [pc, #92]	; (8086f38 <serialEventRun+0x60>)
 8086edc:	b143      	cbz	r3, 8086ef0 <serialEventRun+0x18>
 8086ede:	f000 fc6d 	bl	80877bc <_Z16_fetch_usbserialv>
 8086ee2:	6803      	ldr	r3, [r0, #0]
 8086ee4:	691b      	ldr	r3, [r3, #16]
 8086ee6:	4798      	blx	r3
 8086ee8:	2800      	cmp	r0, #0
 8086eea:	dd01      	ble.n	8086ef0 <serialEventRun+0x18>
        serialEvent();
 8086eec:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 8086ef0:	4b12      	ldr	r3, [pc, #72]	; (8086f3c <serialEventRun+0x64>)
 8086ef2:	b143      	cbz	r3, 8086f06 <serialEventRun+0x2e>
 8086ef4:	f000 fe10 	bl	8087b18 <_Z22__fetch_global_Serial1v>
 8086ef8:	6803      	ldr	r3, [r0, #0]
 8086efa:	691b      	ldr	r3, [r3, #16]
 8086efc:	4798      	blx	r3
 8086efe:	2800      	cmp	r0, #0
 8086f00:	dd01      	ble.n	8086f06 <serialEventRun+0x2e>
        serialEvent1();
 8086f02:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 8086f06:	4b0e      	ldr	r3, [pc, #56]	; (8086f40 <serialEventRun+0x68>)
 8086f08:	b10b      	cbz	r3, 8086f0e <serialEventRun+0x36>
 8086f0a:	f3af 8000 	nop.w
    if (serialEventRun4) serialEventRun4();
 8086f0e:	4b0d      	ldr	r3, [pc, #52]	; (8086f44 <serialEventRun+0x6c>)
 8086f10:	b10b      	cbz	r3, 8086f16 <serialEventRun+0x3e>
 8086f12:	f3af 8000 	nop.w
    if (serialEventRun5) serialEventRun5();
 8086f16:	4b0c      	ldr	r3, [pc, #48]	; (8086f48 <serialEventRun+0x70>)
 8086f18:	b10b      	cbz	r3, 8086f1e <serialEventRun+0x46>
 8086f1a:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8086f1e:	4b0b      	ldr	r3, [pc, #44]	; (8086f4c <serialEventRun+0x74>)
 8086f20:	b143      	cbz	r3, 8086f34 <serialEventRun+0x5c>
 8086f22:	f000 fc89 	bl	8087838 <_Z17_fetch_usbserial1v>
 8086f26:	6803      	ldr	r3, [r0, #0]
 8086f28:	691b      	ldr	r3, [r3, #16]
 8086f2a:	4798      	blx	r3
 8086f2c:	2800      	cmp	r0, #0
 8086f2e:	dd01      	ble.n	8086f34 <serialEventRun+0x5c>
        usbSerialEvent1();
 8086f30:	f3af 8000 	nop.w
}
 8086f34:	bd08      	pop	{r3, pc}
 8086f36:	bf00      	nop
	...

08086f50 <_post_loop>:
{
 8086f50:	b508      	push	{r3, lr}
	serialEventRun();
 8086f52:	f7ff ffc1 	bl	8086ed8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8086f56:	f7fd fdb3 	bl	8084ac0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8086f5a:	4b01      	ldr	r3, [pc, #4]	; (8086f60 <_post_loop+0x10>)
 8086f5c:	6018      	str	r0, [r3, #0]
}
 8086f5e:	bd08      	pop	{r3, pc}
 8086f60:	200009a8 	.word	0x200009a8

08086f64 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8086f64:	4805      	ldr	r0, [pc, #20]	; (8086f7c <_Z33system_initialize_user_backup_ramv+0x18>)
 8086f66:	4a06      	ldr	r2, [pc, #24]	; (8086f80 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 8086f68:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8086f6a:	1a12      	subs	r2, r2, r0
 8086f6c:	4905      	ldr	r1, [pc, #20]	; (8086f84 <_Z33system_initialize_user_backup_ramv+0x20>)
 8086f6e:	f003 fe41 	bl	808abf4 <memcpy>
    __backup_sram_signature = signature;
 8086f72:	4b05      	ldr	r3, [pc, #20]	; (8086f88 <_Z33system_initialize_user_backup_ramv+0x24>)
 8086f74:	4a05      	ldr	r2, [pc, #20]	; (8086f8c <_Z33system_initialize_user_backup_ramv+0x28>)
 8086f76:	601a      	str	r2, [r3, #0]
}
 8086f78:	bd08      	pop	{r3, pc}
 8086f7a:	bf00      	nop
 8086f7c:	40024000 	.word	0x40024000
 8086f80:	40024224 	.word	0x40024224
 8086f84:	0808c060 	.word	0x0808c060
 8086f88:	40024220 	.word	0x40024220
 8086f8c:	9a271c1e 	.word	0x9a271c1e

08086f90 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8086f90:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8086f92:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8086f94:	461a      	mov	r2, r3
 8086f96:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8086f9a:	9300      	str	r3, [sp, #0]
 8086f9c:	f7fd fff2 	bl	8084f84 <system_ctrl_set_result>
}
 8086fa0:	b003      	add	sp, #12
 8086fa2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08086fa8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 8086fa8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8086faa:	8843      	ldrh	r3, [r0, #2]
 8086fac:	2b0a      	cmp	r3, #10
 8086fae:	d008      	beq.n	8086fc2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8086fb0:	2b50      	cmp	r3, #80	; 0x50
 8086fb2:	d10b      	bne.n	8086fcc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 8086fb4:	4b09      	ldr	r3, [pc, #36]	; (8086fdc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 8086fb6:	681b      	ldr	r3, [r3, #0]
 8086fb8:	b14b      	cbz	r3, 8086fce <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 8086fba:	b003      	add	sp, #12
 8086fbc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 8086fc0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 8086fc2:	f7ff ffe5 	bl	8086f90 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 8086fc6:	b003      	add	sp, #12
 8086fc8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8086fcc:	2300      	movs	r3, #0
 8086fce:	461a      	mov	r2, r3
 8086fd0:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8086fd4:	9300      	str	r3, [sp, #0]
 8086fd6:	f7fd ffd5 	bl	8084f84 <system_ctrl_set_result>
}
 8086fda:	e7f4      	b.n	8086fc6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 8086fdc:	2000045c 	.word	0x2000045c

08086fe0 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 8086fe0:	2100      	movs	r1, #0
{
 8086fe2:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 8086fe4:	4811      	ldr	r0, [pc, #68]	; (808702c <module_user_init_hook+0x4c>)
 8086fe6:	f7fe f8f3 	bl	80851d0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 8086fea:	4b11      	ldr	r3, [pc, #68]	; (8087030 <module_user_init_hook+0x50>)
 8086fec:	681a      	ldr	r2, [r3, #0]
 8086fee:	4b11      	ldr	r3, [pc, #68]	; (8087034 <module_user_init_hook+0x54>)
 8086ff0:	429a      	cmp	r2, r3
 8086ff2:	bf0c      	ite	eq
 8086ff4:	2201      	moveq	r2, #1
 8086ff6:	2200      	movne	r2, #0
 8086ff8:	4b0f      	ldr	r3, [pc, #60]	; (8087038 <module_user_init_hook+0x58>)
 8086ffa:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8086ffc:	d001      	beq.n	8087002 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 8086ffe:	f7ff ffb1 	bl	8086f64 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8087002:	f7fd fd3d 	bl	8084a80 <HAL_RNG_GetRandomNumber>
 8087006:	4604      	mov	r4, r0
    srand(seed);
 8087008:	f003 fe24 	bl	808ac54 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 808700c:	4b0b      	ldr	r3, [pc, #44]	; (808703c <module_user_init_hook+0x5c>)
 808700e:	b113      	cbz	r3, 8087016 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 8087010:	4620      	mov	r0, r4
 8087012:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8087016:	2100      	movs	r1, #0
 8087018:	4808      	ldr	r0, [pc, #32]	; (808703c <module_user_init_hook+0x5c>)
 808701a:	f7fe f879 	bl	8085110 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 808701e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8087022:	2100      	movs	r1, #0
 8087024:	4806      	ldr	r0, [pc, #24]	; (8087040 <module_user_init_hook+0x60>)
 8087026:	f7fd bfa3 	b.w	8084f70 <system_ctrl_set_app_request_handler>
 808702a:	bf00      	nop
 808702c:	08086ecd 	.word	0x08086ecd
 8087030:	40024220 	.word	0x40024220
 8087034:	9a271c1e 	.word	0x9a271c1e
 8087038:	20000458 	.word	0x20000458
 808703c:	00000000 	.word	0x00000000
 8087040:	08086fa9 	.word	0x08086fa9

08087044 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8087044:	4770      	bx	lr

08087046 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 8087046:	2000      	movs	r0, #0
 8087048:	4770      	bx	lr

0808704a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 808704a:	b510      	push	{r4, lr}
 808704c:	4604      	mov	r4, r0
 808704e:	2110      	movs	r1, #16
 8087050:	f001 fa2d 	bl	80884ae <_ZdlPvj>
 8087054:	4620      	mov	r0, r4
 8087056:	bd10      	pop	{r4, pc}

08087058 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8087058:	b508      	push	{r3, lr}
      { delete this; }
 808705a:	f7ff fff6 	bl	808704a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 808705e:	bd08      	pop	{r3, pc}

08087060 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8087060:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 8087062:	b530      	push	{r4, r5, lr}
        type_(type) {
 8087064:	f64f 749c 	movw	r4, #65436	; 0xff9c
 8087068:	6002      	str	r2, [r0, #0]
 808706a:	8084      	strh	r4, [r0, #4]
 808706c:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 808706e:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 8087070:	680c      	ldr	r4, [r1, #0]
 8087072:	8085      	strh	r5, [r0, #4]
 8087074:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8087076:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 8087078:	bd30      	pop	{r4, r5, pc}

0808707a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 808707a:	b510      	push	{r4, lr}
 808707c:	4604      	mov	r4, r0
    free((void*)msg_);
 808707e:	6800      	ldr	r0, [r0, #0]
 8087080:	f7fe f85e 	bl	8085140 <free>
}
 8087084:	4620      	mov	r0, r4
 8087086:	bd10      	pop	{r4, pc}

08087088 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8087088:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 808708a:	68c4      	ldr	r4, [r0, #12]
 808708c:	b1f4      	cbz	r4, 80870cc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 808708e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 8087090:	2b02      	cmp	r3, #2
 8087092:	d103      	bne.n	808709c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 8087094:	f104 000c 	add.w	r0, r4, #12
 8087098:	f7ff ffef 	bl	808707a <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 808709c:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 808709e:	b135      	cbz	r5, 80870ae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 80870a0:	4628      	mov	r0, r5
 80870a2:	f7f9 fbab 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
 80870a6:	2110      	movs	r1, #16
 80870a8:	4628      	mov	r0, r5
 80870aa:	f001 fa00 	bl	80884ae <_ZdlPvj>
 80870ae:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80870b0:	b135      	cbz	r5, 80870c0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80870b2:	4628      	mov	r0, r5
 80870b4:	f7f9 fba2 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
 80870b8:	2110      	movs	r1, #16
 80870ba:	4628      	mov	r0, r5
 80870bc:	f001 f9f7 	bl	80884ae <_ZdlPvj>
 80870c0:	4620      	mov	r0, r4
 80870c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80870c6:	2114      	movs	r1, #20
 80870c8:	f001 b9f1 	b.w	80884ae <_ZdlPvj>
 80870cc:	bd38      	pop	{r3, r4, r5, pc}

080870ce <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80870ce:	b510      	push	{r4, lr}
 80870d0:	b088      	sub	sp, #32
 80870d2:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80870d4:	4668      	mov	r0, sp
 80870d6:	f7fe faa3 	bl	8085620 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 80870da:	4669      	mov	r1, sp
 80870dc:	a804      	add	r0, sp, #16
 80870de:	f7fe fae9 	bl	80856b4 <_ZN6StringC1ERKS_>
 80870e2:	a804      	add	r0, sp, #16
 80870e4:	47a0      	blx	r4
 80870e6:	4604      	mov	r4, r0
 80870e8:	a804      	add	r0, sp, #16
 80870ea:	f7fe fa4f 	bl	808558c <_ZN6StringD1Ev>
    String p(param);
 80870ee:	4668      	mov	r0, sp
 80870f0:	f7fe fa4c 	bl	808558c <_ZN6StringD1Ev>
}
 80870f4:	4620      	mov	r0, r4
 80870f6:	b008      	add	sp, #32
 80870f8:	bd10      	pop	{r4, pc}

080870fa <_ZN10CloudClass22call_std_user_functionEPvPKcS0_>:

int CloudClass::call_std_user_function(void* data, const char* param, void* reserved)
{
 80870fa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80870fc:	4604      	mov	r4, r0
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
 80870fe:	4668      	mov	r0, sp
 8087100:	f7fe fa8e 	bl	8085620 <_ZN6StringC1EPK19__FlashStringHelper>
      if (_M_empty())
 8087104:	68a3      	ldr	r3, [r4, #8]
 8087106:	b90b      	cbnz	r3, 808710c <_ZN10CloudClass22call_std_user_functionEPvPKcS0_+0x12>
	__throw_bad_function_call();
 8087108:	f001 f9d7 	bl	80884ba <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808710c:	68e3      	ldr	r3, [r4, #12]
 808710e:	4669      	mov	r1, sp
 8087110:	4620      	mov	r0, r4
 8087112:	4798      	blx	r3
 8087114:	4604      	mov	r4, r0
 8087116:	4668      	mov	r0, sp
 8087118:	f7fe fa38 	bl	808558c <_ZN6StringD1Ev>
}
 808711c:	4620      	mov	r0, r4
 808711e:	b004      	add	sp, #16
 8087120:	bd10      	pop	{r4, pc}

08087122 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_>:

void CloudClass::call_wiring_event_handler(const void* handler_data, const char *event_name, const char *data)
{
 8087122:	b507      	push	{r0, r1, r2, lr}
 8087124:	e9cd 1200 	strd	r1, r2, [sp]
      if (_M_empty())
 8087128:	6882      	ldr	r2, [r0, #8]
 808712a:	b90a      	cbnz	r2, 8087130 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_+0xe>
	__throw_bad_function_call();
 808712c:	f001 f9c5 	bl	80884ba <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8087130:	4669      	mov	r1, sp
 8087132:	68c3      	ldr	r3, [r0, #12]
 8087134:	aa01      	add	r2, sp, #4
 8087136:	4798      	blx	r3
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}
 8087138:	b003      	add	sp, #12
 808713a:	f85d fb04 	ldr.w	pc, [sp], #4

0808713e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 808713e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 8087140:	2300      	movs	r3, #0
         size = sizeof(*this);
 8087142:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 8087144:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 8087148:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 808714a:	4669      	mov	r1, sp
 808714c:	461a      	mov	r2, r3
 808714e:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 8087150:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 8087154:	f8ad 4000 	strh.w	r4, [sp]
 8087158:	f7fd ff9a 	bl	8085090 <spark_function>
}
 808715c:	b004      	add	sp, #16
 808715e:	bd10      	pop	{r4, pc}

08087160 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
 8087160:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
 8087162:	230c      	movs	r3, #12
    spark_cloud_disconnect_options opts = {};
 8087164:	2100      	movs	r1, #0
    opts.size = sizeof(opts);
 8087166:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
 808716a:	6803      	ldr	r3, [r0, #0]
    spark_cloud_disconnect_options opts = {};
 808716c:	f8ad 100d 	strh.w	r1, [sp, #13]
    opts.flags = flags_;
 8087170:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
 8087174:	7a03      	ldrb	r3, [r0, #8]
    spark_cloud_disconnect_options opts = {};
 8087176:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.graceful = graceful_;
 808717a:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
 808717e:	6843      	ldr	r3, [r0, #4]
 8087180:	9302      	str	r3, [sp, #8]
    opts.clear_session = clearSession_;
 8087182:	7a43      	ldrb	r3, [r0, #9]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 8087184:	a801      	add	r0, sp, #4
    opts.clear_session = clearSession_;
 8087186:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 808718a:	f7fd ffc9 	bl	8085120 <spark_cloud_disconnect>
}
 808718e:	b005      	add	sp, #20
 8087190:	f85d fb04 	ldr.w	pc, [sp], #4

08087194 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8087194:	680b      	ldr	r3, [r1, #0]
 8087196:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 8087198:	684b      	ldr	r3, [r1, #4]
 808719a:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 808719c:	b113      	cbz	r3, 80871a4 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
 808719e:	685a      	ldr	r2, [r3, #4]
 80871a0:	3201      	adds	r2, #1
 80871a2:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80871a4:	4770      	bx	lr

080871a6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80871a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80871a8:	4604      	mov	r4, r0
 80871aa:	4668      	mov	r0, sp
 80871ac:	460d      	mov	r5, r1
 80871ae:	f7ff fff1 	bl	8087194 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80871b2:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80871b4:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80871b6:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 80871b8:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80871ba:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 80871bc:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 80871be:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80871c0:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 80871c2:	f7f9 fb95 	bl	80808f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80871c6:	b135      	cbz	r5, 80871d6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
 80871c8:	1d28      	adds	r0, r5, #4
 80871ca:	f7f9 fb91 	bl	80808f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80871ce:	2108      	movs	r1, #8
 80871d0:	4628      	mov	r0, r5
 80871d2:	f001 f96c 	bl	80884ae <_ZdlPvj>
        return p;
    }
 80871d6:	4620      	mov	r0, r4
 80871d8:	b003      	add	sp, #12
 80871da:	bd30      	pop	{r4, r5, pc}

080871dc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 80871dc:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80871de:	b510      	push	{r4, lr}
      if (_M_empty())
 80871e0:	b90a      	cbnz	r2, 80871e6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80871e2:	f001 f96a 	bl	80884ba <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80871e6:	68c3      	ldr	r3, [r0, #12]
    }
 80871e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80871ec:	4718      	bx	r3

080871ee <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80871ee:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80871f0:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80871f2:	f100 0110 	add.w	r1, r0, #16
 80871f6:	f7ff fff1 	bl	80871dc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 80871fa:	bd08      	pop	{r3, pc}

080871fc <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 80871fc:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80871fe:	b510      	push	{r4, lr}
      if (_M_empty())
 8087200:	b90a      	cbnz	r2, 8087206 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 8087202:	f001 f95a 	bl	80884ba <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8087206:	68c3      	ldr	r3, [r0, #12]
    }
 8087208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808720c:	4718      	bx	r3

0808720e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 808720e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 8087210:	6800      	ldr	r0, [r0, #0]
 8087212:	f100 0110 	add.w	r1, r0, #16
 8087216:	f7ff fff1 	bl	80871fc <_ZNKSt8functionIFvRKbEEclES1_>
      }
 808721a:	bd08      	pop	{r3, pc}

0808721c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 808721c:	b538      	push	{r3, r4, r5, lr}
 808721e:	2300      	movs	r3, #0
 8087220:	4604      	mov	r4, r0
 8087222:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8087224:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 8087226:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8087228:	f7f8 ff47 	bl	80800ba <_Znwj>
 808722c:	b128      	cbz	r0, 808723a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 808722e:	2301      	movs	r3, #1
 8087230:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 8087234:	4b02      	ldr	r3, [pc, #8]	; (8087240 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 8087236:	60c5      	str	r5, [r0, #12]
 8087238:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 808723a:	6020      	str	r0, [r4, #0]
	}
 808723c:	4620      	mov	r0, r4
 808723e:	bd38      	pop	{r3, r4, r5, pc}
 8087240:	0808bc68 	.word	0x0808bc68

08087244 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 8087244:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8087246:	2300      	movs	r3, #0
 8087248:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 808724a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 808724c:	4604      	mov	r4, r0
 808724e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 8087250:	b12b      	cbz	r3, 808725e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8087252:	2202      	movs	r2, #2
 8087254:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8087256:	68eb      	ldr	r3, [r5, #12]
 8087258:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 808725a:	68ab      	ldr	r3, [r5, #8]
 808725c:	60a3      	str	r3, [r4, #8]
    }
 808725e:	4620      	mov	r0, r4
 8087260:	bd38      	pop	{r3, r4, r5, pc}
	...

08087264 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 8087264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8087266:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
 8087268:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 808726a:	4668      	mov	r0, sp
 808726c:	f7ff fef8 	bl	8087060 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 8087270:	f04f 0302 	mov.w	r3, #2
 8087274:	e8d4 2f4f 	ldrexb	r2, [r4]
 8087278:	2a00      	cmp	r2, #0
 808727a:	d103      	bne.n	8087284 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 808727c:	e8c4 3f41 	strexb	r1, r3, [r4]
 8087280:	2900      	cmp	r1, #0
 8087282:	d1f7      	bne.n	8087274 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 8087284:	d125      	bne.n	80872d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 8087286:	f104 050c 	add.w	r5, r4, #12
 808728a:	4669      	mov	r1, sp
 808728c:	4628      	mov	r0, r5
 808728e:	f7ff fee7 	bl	8087060 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 8087292:	2301      	movs	r3, #1
 8087294:	f3bf 8f5b 	dmb	ish
 8087298:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 808729a:	2000      	movs	r0, #0
 808729c:	f3bf 8f5b 	dmb	ish
 80872a0:	f104 0308 	add.w	r3, r4, #8
 80872a4:	e853 6f00 	ldrex	r6, [r3]
 80872a8:	e843 0200 	strex	r2, r0, [r3]
 80872ac:	2a00      	cmp	r2, #0
 80872ae:	d1f9      	bne.n	80872a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 80872b0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80872b4:	b16e      	cbz	r6, 80872d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 80872b6:	f7fd fe43 	bl	8084f40 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80872ba:	b178      	cbz	r0, 80872dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80872bc:	4629      	mov	r1, r5
 80872be:	4630      	mov	r0, r6
 80872c0:	f7ff ff8c 	bl	80871dc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 80872c4:	4630      	mov	r0, r6
 80872c6:	f7f9 fa99 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80872ca:	2110      	movs	r1, #16
 80872cc:	4630      	mov	r0, r6
 80872ce:	f001 f8ee 	bl	80884ae <_ZdlPvj>
        p_->setError(std::move(error));
 80872d2:	4668      	mov	r0, sp
 80872d4:	f7ff fed1 	bl	808707a <_ZN8particle5ErrorD1Ev>
    }
 80872d8:	b009      	add	sp, #36	; 0x24
 80872da:	bdf0      	pop	{r4, r5, r6, r7, pc}
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80872dc:	4631      	mov	r1, r6
 80872de:	a802      	add	r0, sp, #8
 80872e0:	f7ff ffb0 	bl	8087244 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80872e4:	68e0      	ldr	r0, [r4, #12]
 80872e6:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80872ea:	b108      	cbz	r0, 80872f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 80872ec:	f003 fd0a 	bl	808ad04 <strdup>
        type_(type) {
 80872f0:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80872f2:	2010      	movs	r0, #16
 80872f4:	f8ad 501c 	strh.w	r5, [sp, #28]
 80872f8:	f7f8 fedf 	bl	80800ba <_Znwj>
 80872fc:	4605      	mov	r5, r0
 80872fe:	b1e8      	cbz	r0, 808733c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 8087300:	2700      	movs	r7, #0
 8087302:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8087304:	2018      	movs	r0, #24
 8087306:	f7f8 fed8 	bl	80800ba <_Znwj>
 808730a:	4604      	mov	r4, r0
 808730c:	b188      	cbz	r0, 8087332 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 808730e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 8087310:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 8087312:	a802      	add	r0, sp, #8
 8087314:	f7fa f955 	bl	80815c2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8087318:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 808731a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808731c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808731e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8087320:	9204      	str	r2, [sp, #16]
 8087322:	68e2      	ldr	r2, [r4, #12]
 8087324:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 8087326:	60e3      	str	r3, [r4, #12]
 8087328:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 808732c:	9205      	str	r2, [sp, #20]
 808732e:	f7ff fe97 	bl	8087060 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 8087332:	4b08      	ldr	r3, [pc, #32]	; (8087354 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8087334:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 8087336:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8087338:	4b07      	ldr	r3, [pc, #28]	; (8087358 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 808733a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 808733c:	a806      	add	r0, sp, #24
 808733e:	f7ff fe9c 	bl	808707a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 8087342:	a802      	add	r0, sp, #8
 8087344:	f7f9 fa5a 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8087348:	2200      	movs	r2, #0
 808734a:	4629      	mov	r1, r5
 808734c:	4803      	ldr	r0, [pc, #12]	; (808735c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 808734e:	f7fd fdff 	bl	8084f50 <application_thread_invoke>
 8087352:	e7b7      	b.n	80872c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 8087354:	080871ef 	.word	0x080871ef
 8087358:	08087479 	.word	0x08087479
 808735c:	08087b69 	.word	0x08087b69

08087360 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8087360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8087364:	b08a      	sub	sp, #40	; 0x28
 8087366:	4605      	mov	r5, r0
 8087368:	460c      	mov	r4, r1
 808736a:	4617      	mov	r7, r2
 808736c:	4698      	mov	r8, r3
 808736e:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8087372:	f7fd fea5 	bl	80850c0 <spark_cloud_flag_connected>
 8087376:	ae07      	add	r6, sp, #28
    if (!connected()) {
 8087378:	4682      	mov	sl, r0
 808737a:	bb38      	cbnz	r0, 80873cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 808737c:	f64f 732e 	movw	r3, #65326	; 0xff2e
 8087380:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8087382:	a905      	add	r1, sp, #20
 8087384:	4630      	mov	r0, r6
 8087386:	f8ad 3018 	strh.w	r3, [sp, #24]
 808738a:	f7ff fe69 	bl	8087060 <_ZN8particle5ErrorC1EOS0_>
 808738e:	2014      	movs	r0, #20
 8087390:	f7f8 fe93 	bl	80800ba <_Znwj>
 8087394:	4604      	mov	r4, r0
 8087396:	b148      	cbz	r0, 80873ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 8087398:	2302      	movs	r3, #2
 808739a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 808739c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 808739e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80873a2:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80873a4:	4631      	mov	r1, r6
 80873a6:	300c      	adds	r0, #12
 80873a8:	f7ff fe5a 	bl	8087060 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80873ac:	4628      	mov	r0, r5
	: __shared_count(__p)
 80873ae:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80873b0:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 80873b4:	f7ff ff32 	bl	808721c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80873b8:	4630      	mov	r0, r6
 80873ba:	f7ff fe5e 	bl	808707a <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80873be:	a805      	add	r0, sp, #20
 80873c0:	f7ff fe5b 	bl	808707a <_ZN8particle5ErrorD1Ev>
}
 80873c4:	4628      	mov	r0, r5
 80873c6:	b00a      	add	sp, #40	; 0x28
 80873c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80873cc:	230c      	movs	r3, #12
 80873ce:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80873d2:	2014      	movs	r0, #20
 80873d4:	e9cd aa08 	strd	sl, sl, [sp, #32]
 80873d8:	9307      	str	r3, [sp, #28]
 80873da:	f7f8 fe6e 	bl	80800ba <_Znwj>
 80873de:	4601      	mov	r1, r0
 80873e0:	b128      	cbz	r0, 80873ee <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80873e2:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 80873e6:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80873ea:	f880 a001 	strb.w	sl, [r0, #1]
 80873ee:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80873f0:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 80873f2:	f7ff ff13 	bl	808721c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 80873f6:	4b1f      	ldr	r3, [pc, #124]	; (8087474 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x114>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80873f8:	2008      	movs	r0, #8
 80873fa:	9308      	str	r3, [sp, #32]
 80873fc:	f7f8 fe5d 	bl	80800ba <_Znwj>
 8087400:	4682      	mov	sl, r0
 8087402:	b110      	cbz	r0, 808740a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xaa>
 8087404:	a903      	add	r1, sp, #12
 8087406:	f7ff fec5 	bl	8087194 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 808740a:	4642      	mov	r2, r8
 808740c:	4639      	mov	r1, r7
 808740e:	4620      	mov	r0, r4
 8087410:	9600      	str	r6, [sp, #0]
 8087412:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 8087416:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 808741a:	f7fd fe61 	bl	80850e0 <spark_send_event>
 808741e:	b9b8      	cbnz	r0, 8087450 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf0>
	return __atomic_load_n(&_M_i, int(__m));
 8087420:	9b03      	ldr	r3, [sp, #12]
 8087422:	785b      	ldrb	r3, [r3, #1]
 8087424:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8087428:	b993      	cbnz	r3, 8087450 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf0>
 808742a:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 808742e:	a905      	add	r1, sp, #20
 8087430:	a803      	add	r0, sp, #12
 8087432:	9205      	str	r2, [sp, #20]
 8087434:	f8ad 3018 	strh.w	r3, [sp, #24]
 8087438:	f7ff ff14 	bl	8087264 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 808743c:	a805      	add	r0, sp, #20
 808743e:	f7ff fe1c 	bl	808707a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 8087442:	a805      	add	r0, sp, #20
 8087444:	9909      	ldr	r1, [sp, #36]	; 0x24
 8087446:	f7ff feae 	bl	80871a6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 808744a:	a806      	add	r0, sp, #24
 808744c:	f7f9 fa50 	bl	80808f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8087450:	a903      	add	r1, sp, #12
 8087452:	a805      	add	r0, sp, #20
 8087454:	f7ff fe9e 	bl	8087194 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 8087458:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 808745a:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 808745c:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 808745e:	2300      	movs	r3, #0
	_M_pi = __tmp;
 8087460:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 8087462:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 8087464:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 8087466:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 8087468:	f7f9 fa42 	bl	80808f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808746c:	a804      	add	r0, sp, #16
 808746e:	f7f9 fa3f 	bl	80808f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 8087472:	e7a7      	b.n	80873c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 8087474:	080874f5 	.word	0x080874f5

08087478 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
 8087478:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 808747a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808747c:	4605      	mov	r5, r0
	switch (__op)
 808747e:	d103      	bne.n	8087488 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 8087480:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8087482:	6003      	str	r3, [r0, #0]
      }
 8087484:	2000      	movs	r0, #0
 8087486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
 8087488:	2a02      	cmp	r2, #2
 808748a:	d010      	beq.n	80874ae <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 808748c:	2a03      	cmp	r2, #3
 808748e:	d1f9      	bne.n	8087484 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 8087490:	6804      	ldr	r4, [r0, #0]
 8087492:	2c00      	cmp	r4, #0
 8087494:	d0f6      	beq.n	8087484 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
 8087496:	f104 0010 	add.w	r0, r4, #16
 808749a:	f7ff fdee 	bl	808707a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 808749e:	4620      	mov	r0, r4
 80874a0:	f7f9 f9ac 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80874a4:	2118      	movs	r1, #24
 80874a6:	4620      	mov	r0, r4
 80874a8:	f001 f801 	bl	80884ae <_ZdlPvj>
 80874ac:	e7ea      	b.n	8087484 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 80874ae:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80874b0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80874b2:	f7f8 fe02 	bl	80800ba <_Znwj>
 80874b6:	4604      	mov	r4, r0
 80874b8:	b150      	cbz	r0, 80874d0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
 80874ba:	4631      	mov	r1, r6
 80874bc:	f7ff fec2 	bl	8087244 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80874c0:	6930      	ldr	r0, [r6, #16]
 80874c2:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80874c6:	b108      	cbz	r0, 80874cc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
 80874c8:	f003 fc1c 	bl	808ad04 <strdup>
        type_(type) {
 80874cc:	6120      	str	r0, [r4, #16]
 80874ce:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80874d0:	602c      	str	r4, [r5, #0]
	}
 80874d2:	e7d7      	b.n	8087484 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

080874d4 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80874d4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80874d6:	2300      	movs	r3, #0
 80874d8:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 80874da:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80874dc:	4604      	mov	r4, r0
 80874de:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80874e0:	b12b      	cbz	r3, 80874ee <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80874e2:	2202      	movs	r2, #2
 80874e4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80874e6:	68eb      	ldr	r3, [r5, #12]
 80874e8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80874ea:	68ab      	ldr	r3, [r5, #8]
 80874ec:	60a3      	str	r3, [r4, #8]
    }
 80874ee:	4620      	mov	r0, r4
 80874f0:	bd38      	pop	{r3, r4, r5, pc}
	...

080874f4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80874f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80874f6:	4604      	mov	r4, r0
 80874f8:	b089      	sub	sp, #36	; 0x24
 80874fa:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80874fc:	a801      	add	r0, sp, #4
 80874fe:	4611      	mov	r1, r2
 8087500:	f7ff fe51 	bl	80871a6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 8087504:	b1a4      	cbz	r4, 8087530 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 8087506:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 8087508:	b11d      	cbz	r5, 8087512 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 808750a:	4628      	mov	r0, r5
 808750c:	f003 fbfa 	bl	808ad04 <strdup>
 8087510:	4605      	mov	r5, r0
 8087512:	a801      	add	r0, sp, #4
 8087514:	a903      	add	r1, sp, #12
        type_(type) {
 8087516:	9503      	str	r5, [sp, #12]
 8087518:	f8ad 4010 	strh.w	r4, [sp, #16]
 808751c:	f7ff fea2 	bl	8087264 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8087520:	a803      	add	r0, sp, #12
 8087522:	f7ff fdaa 	bl	808707a <_ZN8particle5ErrorD1Ev>
 8087526:	a802      	add	r0, sp, #8
 8087528:	f7f9 f9e2 	bl	80808f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 808752c:	b009      	add	sp, #36	; 0x24
 808752e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 8087530:	2301      	movs	r3, #1
      { return _M_ptr; }
 8087532:	9d01      	ldr	r5, [sp, #4]
 8087534:	e8d5 2f4f 	ldrexb	r2, [r5]
 8087538:	2a00      	cmp	r2, #0
 808753a:	d103      	bne.n	8087544 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 808753c:	e8c5 3f41 	strexb	r1, r3, [r5]
 8087540:	2900      	cmp	r1, #0
 8087542:	d1f7      	bne.n	8087534 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 8087544:	d1ef      	bne.n	8087526 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 8087546:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 8087548:	f3bf 8f5b 	dmb	ish
 808754c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 808754e:	f3bf 8f5b 	dmb	ish
 8087552:	1d2b      	adds	r3, r5, #4
 8087554:	e853 6f00 	ldrex	r6, [r3]
 8087558:	e843 4200 	strex	r2, r4, [r3]
 808755c:	2a00      	cmp	r2, #0
 808755e:	d1f9      	bne.n	8087554 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 8087560:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 8087564:	2e00      	cmp	r6, #0
 8087566:	d0de      	beq.n	8087526 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 8087568:	4620      	mov	r0, r4
 808756a:	f7fd fce9 	bl	8084f40 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 808756e:	4607      	mov	r7, r0
 8087570:	b160      	cbz	r0, 808758c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8087572:	4630      	mov	r0, r6
 8087574:	f105 010c 	add.w	r1, r5, #12
 8087578:	f7ff fe40 	bl	80871fc <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 808757c:	4630      	mov	r0, r6
 808757e:	f7f9 f93d 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 8087582:	2110      	movs	r1, #16
 8087584:	4630      	mov	r0, r6
 8087586:	f000 ff92 	bl	80884ae <_ZdlPvj>
 808758a:	e7cc      	b.n	8087526 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 808758c:	4631      	mov	r1, r6
 808758e:	a803      	add	r0, sp, #12
 8087590:	f7ff ffa0 	bl	80874d4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8087594:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8087596:	2010      	movs	r0, #16
 8087598:	f88d 301c 	strb.w	r3, [sp, #28]
 808759c:	f7f8 fd8d 	bl	80800ba <_Znwj>
 80875a0:	4605      	mov	r5, r0
 80875a2:	b1d0      	cbz	r0, 80875da <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80875a4:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80875a6:	2014      	movs	r0, #20
 80875a8:	f7f8 fd87 	bl	80800ba <_Znwj>
 80875ac:	4604      	mov	r4, r0
 80875ae:	b178      	cbz	r0, 80875d0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 80875b0:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80875b2:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80875b4:	a803      	add	r0, sp, #12
 80875b6:	f7fa f804 	bl	80815c2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80875ba:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80875bc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80875be:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80875c0:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80875c2:	9205      	str	r2, [sp, #20]
 80875c4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80875c6:	60e3      	str	r3, [r4, #12]
 80875c8:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80875cc:	9206      	str	r2, [sp, #24]
 80875ce:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 80875d0:	4b06      	ldr	r3, [pc, #24]	; (80875ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80875d2:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80875d4:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80875d6:	4b06      	ldr	r3, [pc, #24]	; (80875f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 80875d8:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 80875da:	a803      	add	r0, sp, #12
 80875dc:	f7f9 f90e 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80875e0:	2200      	movs	r2, #0
 80875e2:	4629      	mov	r1, r5
 80875e4:	4803      	ldr	r0, [pc, #12]	; (80875f4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 80875e6:	f7fd fcb3 	bl	8084f50 <application_thread_invoke>
 80875ea:	e7c7      	b.n	808757c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 80875ec:	0808720f 	.word	0x0808720f
 80875f0:	080875f9 	.word	0x080875f9
 80875f4:	08087b69 	.word	0x08087b69

080875f8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
 80875f8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80875fa:	b570      	push	{r4, r5, r6, lr}
 80875fc:	4604      	mov	r4, r0
	switch (__op)
 80875fe:	d103      	bne.n	8087608 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 8087600:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8087602:	6003      	str	r3, [r0, #0]
      }
 8087604:	2000      	movs	r0, #0
 8087606:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
 8087608:	2a02      	cmp	r2, #2
 808760a:	d00c      	beq.n	8087626 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 808760c:	2a03      	cmp	r2, #3
 808760e:	d1f9      	bne.n	8087604 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 8087610:	6804      	ldr	r4, [r0, #0]
 8087612:	2c00      	cmp	r4, #0
 8087614:	d0f6      	beq.n	8087604 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
 8087616:	4620      	mov	r0, r4
 8087618:	f7f9 f8f0 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 808761c:	2114      	movs	r1, #20
 808761e:	4620      	mov	r0, r4
 8087620:	f000 ff45 	bl	80884ae <_ZdlPvj>
 8087624:	e7ee      	b.n	8087604 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 8087626:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 8087628:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 808762a:	f7f8 fd46 	bl	80800ba <_Znwj>
 808762e:	4605      	mov	r5, r0
 8087630:	b120      	cbz	r0, 808763c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
 8087632:	4631      	mov	r1, r6
 8087634:	f7ff ff4e 	bl	80874d4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 8087638:	7c33      	ldrb	r3, [r6, #16]
 808763a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 808763c:	6025      	str	r5, [r4, #0]
	}
 808763e:	e7e1      	b.n	8087604 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

08087640 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8087640:	4770      	bx	lr

08087642 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8087642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8087644:	460e      	mov	r6, r1
 8087646:	2400      	movs	r4, #0
 8087648:	f100 0708 	add.w	r7, r0, #8
 808764c:	1d05      	adds	r5, r0, #4
        return printNumber(val, base) + t;
 808764e:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 8087652:	220a      	movs	r2, #10
 8087654:	4630      	mov	r0, r6
 8087656:	f7fe f96e 	bl	8085936 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 808765a:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 808765c:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 808765e:	d101      	bne.n	8087664 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 8087660:	4620      	mov	r0, r4
 8087662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 8087664:	2c00      	cmp	r4, #0
 8087666:	d0f2      	beq.n	808764e <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8087668:	212e      	movs	r1, #46	; 0x2e
 808766a:	4630      	mov	r0, r6
 808766c:	f7fe f94a 	bl	8085904 <_ZN5Print5printEc>
 8087670:	4404      	add	r4, r0
 8087672:	e7ec      	b.n	808764e <_ZNK9IPAddress7printToER5Print+0xc>

08087674 <_ZN9IPAddressD0Ev>:
 8087674:	b510      	push	{r4, lr}
 8087676:	4604      	mov	r4, r0
 8087678:	2108      	movs	r1, #8
 808767a:	f000 ff18 	bl	80884ae <_ZdlPvj>
 808767e:	4620      	mov	r0, r4
 8087680:	bd10      	pop	{r4, pc}
	...

08087684 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 8087684:	4a02      	ldr	r2, [pc, #8]	; (8087690 <_ZN9IPAddressC1Ev+0xc>)
 8087686:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8087688:	2200      	movs	r2, #0
 808768a:	6042      	str	r2, [r0, #4]
}
 808768c:	4770      	bx	lr
 808768e:	bf00      	nop
 8087690:	0808bc84 	.word	0x0808bc84

08087694 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 8087694:	4a02      	ldr	r2, [pc, #8]	; (80876a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 8087696:	6002      	str	r2, [r0, #0]
    memcpy(&this->address, &address, sizeof(address));
 8087698:	680a      	ldr	r2, [r1, #0]
 808769a:	6042      	str	r2, [r0, #4]
}
 808769c:	4770      	bx	lr
 808769e:	bf00      	nop
 80876a0:	0808bc84 	.word	0x0808bc84

080876a4 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
 80876a4:	4a01      	ldr	r2, [pc, #4]	; (80876ac <_ZN9IPAddressC1Em+0x8>)
    address.ipv4 = addr;
 80876a6:	e9c0 2100 	strd	r2, r1, [r0]
}
 80876aa:	4770      	bx	lr
 80876ac:	0808bc84 	.word	0x0808bc84

080876b0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80876b0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80876b2:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80876b6:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80876ba:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80876be:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80876c2:	6044      	str	r4, [r0, #4]
}
 80876c4:	bd10      	pop	{r4, pc}
	...

080876c8 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80876c8:	b513      	push	{r0, r1, r4, lr}
 80876ca:	4c04      	ldr	r4, [pc, #16]	; (80876dc <_ZN9IPAddressC1Ehhhh+0x14>)
 80876cc:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80876ce:	f89d 4010 	ldrb.w	r4, [sp, #16]
 80876d2:	9400      	str	r4, [sp, #0]
 80876d4:	f7ff ffec 	bl	80876b0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80876d8:	b002      	add	sp, #8
 80876da:	bd10      	pop	{r4, pc}
 80876dc:	0808bc84 	.word	0x0808bc84

080876e0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80876e0:	7441      	strb	r1, [r0, #17]
}
 80876e2:	4770      	bx	lr

080876e4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80876e4:	4770      	bx	lr

080876e6 <_ZN9USBSerial4readEv>:
{
 80876e6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80876e8:	2100      	movs	r1, #0
 80876ea:	7c00      	ldrb	r0, [r0, #16]
 80876ec:	f7fd fbc0 	bl	8084e70 <HAL_USB_USART_Receive_Data>
}
 80876f0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80876f4:	bd08      	pop	{r3, pc}

080876f6 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 80876f6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80876f8:	2101      	movs	r1, #1
 80876fa:	7c00      	ldrb	r0, [r0, #16]
 80876fc:	f7fd fbb8 	bl	8084e70 <HAL_USB_USART_Receive_Data>
}
 8087700:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8087704:	bd08      	pop	{r3, pc}

08087706 <_ZN9USBSerial17availableForWriteEv>:
{
 8087706:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 8087708:	7c00      	ldrb	r0, [r0, #16]
 808770a:	f7fd fba9 	bl	8084e60 <HAL_USB_USART_Available_Data_For_Write>
}
 808770e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8087712:	bd08      	pop	{r3, pc}

08087714 <_ZN9USBSerial9availableEv>:
{
 8087714:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 8087716:	7c00      	ldrb	r0, [r0, #16]
 8087718:	f7fd fb9a 	bl	8084e50 <HAL_USB_USART_Available_Data>
}
 808771c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8087720:	bd08      	pop	{r3, pc}

08087722 <_ZN9USBSerial5writeEh>:
{
 8087722:	b538      	push	{r3, r4, r5, lr}
 8087724:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8087726:	7c00      	ldrb	r0, [r0, #16]
{
 8087728:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808772a:	f7fd fb99 	bl	8084e60 <HAL_USB_USART_Available_Data_For_Write>
 808772e:	2800      	cmp	r0, #0
 8087730:	dc01      	bgt.n	8087736 <_ZN9USBSerial5writeEh+0x14>
 8087732:	7c60      	ldrb	r0, [r4, #17]
 8087734:	b128      	cbz	r0, 8087742 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 8087736:	4629      	mov	r1, r5
 8087738:	7c20      	ldrb	r0, [r4, #16]
 808773a:	f7fd fba1 	bl	8084e80 <HAL_USB_USART_Send_Data>
 808773e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 8087742:	bd38      	pop	{r3, r4, r5, pc}

08087744 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 8087744:	7c00      	ldrb	r0, [r0, #16]
 8087746:	f7fd bba3 	b.w	8084e90 <HAL_USB_USART_Flush_Data>

0808774a <_ZN9USBSerialD0Ev>:
 808774a:	b510      	push	{r4, lr}
 808774c:	4604      	mov	r4, r0
 808774e:	2114      	movs	r1, #20
 8087750:	f000 fead 	bl	80884ae <_ZdlPvj>
 8087754:	4620      	mov	r0, r4
 8087756:	bd10      	pop	{r4, pc}

08087758 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8087758:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 808775a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808775e:	4604      	mov	r4, r0
 8087760:	4608      	mov	r0, r1
 8087762:	2100      	movs	r1, #0
 8087764:	e9c4 1301 	strd	r1, r3, [r4, #4]
 8087768:	4b04      	ldr	r3, [pc, #16]	; (808777c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 808776a:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 808776c:	6023      	str	r3, [r4, #0]
  _blocking = true;
 808776e:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 8087770:	4611      	mov	r1, r2
  _blocking = true;
 8087772:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 8087774:	f7fd fb54 	bl	8084e20 <HAL_USB_USART_Init>
}
 8087778:	4620      	mov	r0, r4
 808777a:	bd10      	pop	{r4, pc}
 808777c:	0808bc98 	.word	0x0808bc98

08087780 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 8087780:	2200      	movs	r2, #0
 8087782:	7c00      	ldrb	r0, [r0, #16]
 8087784:	f7fd bb54 	b.w	8084e30 <HAL_USB_USART_Begin>

08087788 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 8087788:	7c00      	ldrb	r0, [r0, #16]
 808778a:	f7fd bb59 	b.w	8084e40 <HAL_USB_USART_End>
	...

08087790 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 8087790:	b510      	push	{r4, lr}
 8087792:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8087794:	2214      	movs	r2, #20
 8087796:	2100      	movs	r1, #0
 8087798:	f003 fa54 	bl	808ac44 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 808779c:	4b05      	ldr	r3, [pc, #20]	; (80877b4 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 808779e:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80877a0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80877a2:	4b05      	ldr	r3, [pc, #20]	; (80877b8 <_Z19acquireSerialBufferv+0x28>)
 80877a4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80877a6:	f240 1301 	movw	r3, #257	; 0x101
 80877aa:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80877ac:	2381      	movs	r3, #129	; 0x81
 80877ae:	8223      	strh	r3, [r4, #16]
}
 80877b0:	bd10      	pop	{r4, pc}
 80877b2:	bf00      	nop
 80877b4:	20000490 	.word	0x20000490
 80877b8:	20000591 	.word	0x20000591

080877bc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80877bc:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80877be:	4d0f      	ldr	r5, [pc, #60]	; (80877fc <_Z16_fetch_usbserialv+0x40>)
{
 80877c0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80877c2:	a801      	add	r0, sp, #4
 80877c4:	f7ff ffe4 	bl	8087790 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80877c8:	7829      	ldrb	r1, [r5, #0]
 80877ca:	f3bf 8f5b 	dmb	ish
 80877ce:	f011 0401 	ands.w	r4, r1, #1
 80877d2:	d110      	bne.n	80877f6 <_Z16_fetch_usbserialv+0x3a>
 80877d4:	4628      	mov	r0, r5
 80877d6:	f7f8 fc81 	bl	80800dc <__cxa_guard_acquire>
 80877da:	b160      	cbz	r0, 80877f6 <_Z16_fetch_usbserialv+0x3a>
 80877dc:	4621      	mov	r1, r4
 80877de:	aa01      	add	r2, sp, #4
 80877e0:	4807      	ldr	r0, [pc, #28]	; (8087800 <_Z16_fetch_usbserialv+0x44>)
 80877e2:	f7ff ffb9 	bl	8087758 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80877e6:	4628      	mov	r0, r5
 80877e8:	f7f8 fc7d 	bl	80800e6 <__cxa_guard_release>
 80877ec:	4a05      	ldr	r2, [pc, #20]	; (8087804 <_Z16_fetch_usbserialv+0x48>)
 80877ee:	4906      	ldr	r1, [pc, #24]	; (8087808 <_Z16_fetch_usbserialv+0x4c>)
 80877f0:	4803      	ldr	r0, [pc, #12]	; (8087800 <_Z16_fetch_usbserialv+0x44>)
 80877f2:	f000 fe57 	bl	80884a4 <__aeabi_atexit>
	return _usbserial;
}
 80877f6:	4802      	ldr	r0, [pc, #8]	; (8087800 <_Z16_fetch_usbserialv+0x44>)
 80877f8:	b007      	add	sp, #28
 80877fa:	bd30      	pop	{r4, r5, pc}
 80877fc:	20000460 	.word	0x20000460
 8087800:	20000468 	.word	0x20000468
 8087804:	20000130 	.word	0x20000130
 8087808:	080876e5 	.word	0x080876e5

0808780c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 808780c:	b510      	push	{r4, lr}
 808780e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8087810:	2214      	movs	r2, #20
 8087812:	2100      	movs	r1, #0
 8087814:	f003 fa16 	bl	808ac44 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8087818:	4b05      	ldr	r3, [pc, #20]	; (8087830 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 808781a:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 808781c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 808781e:	4b05      	ldr	r3, [pc, #20]	; (8087834 <_Z23acquireUSBSerial1Bufferv+0x28>)
 8087820:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8087822:	f240 1301 	movw	r3, #257	; 0x101
 8087826:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8087828:	2381      	movs	r3, #129	; 0x81
 808782a:	8223      	strh	r3, [r4, #16]
}
 808782c:	bd10      	pop	{r4, pc}
 808782e:	bf00      	nop
 8087830:	20000612 	.word	0x20000612
 8087834:	20000713 	.word	0x20000713

08087838 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8087838:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 808783a:	4c0f      	ldr	r4, [pc, #60]	; (8087878 <_Z17_fetch_usbserial1v+0x40>)
{
 808783c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 808783e:	a801      	add	r0, sp, #4
 8087840:	f7ff ffe4 	bl	808780c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8087844:	7823      	ldrb	r3, [r4, #0]
 8087846:	f3bf 8f5b 	dmb	ish
 808784a:	07db      	lsls	r3, r3, #31
 808784c:	d410      	bmi.n	8087870 <_Z17_fetch_usbserial1v+0x38>
 808784e:	4620      	mov	r0, r4
 8087850:	f7f8 fc44 	bl	80800dc <__cxa_guard_acquire>
 8087854:	b160      	cbz	r0, 8087870 <_Z17_fetch_usbserial1v+0x38>
 8087856:	2101      	movs	r1, #1
 8087858:	aa01      	add	r2, sp, #4
 808785a:	4808      	ldr	r0, [pc, #32]	; (808787c <_Z17_fetch_usbserial1v+0x44>)
 808785c:	f7ff ff7c 	bl	8087758 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8087860:	4620      	mov	r0, r4
 8087862:	f7f8 fc40 	bl	80800e6 <__cxa_guard_release>
 8087866:	4a06      	ldr	r2, [pc, #24]	; (8087880 <_Z17_fetch_usbserial1v+0x48>)
 8087868:	4906      	ldr	r1, [pc, #24]	; (8087884 <_Z17_fetch_usbserial1v+0x4c>)
 808786a:	4804      	ldr	r0, [pc, #16]	; (808787c <_Z17_fetch_usbserial1v+0x44>)
 808786c:	f000 fe1a 	bl	80884a4 <__aeabi_atexit>
  return _usbserial1;
}
 8087870:	4802      	ldr	r0, [pc, #8]	; (808787c <_Z17_fetch_usbserial1v+0x44>)
 8087872:	b006      	add	sp, #24
 8087874:	bd10      	pop	{r4, pc}
 8087876:	bf00      	nop
 8087878:	20000464 	.word	0x20000464
 808787c:	2000047c 	.word	0x2000047c
 8087880:	20000130 	.word	0x20000130
 8087884:	080876e5 	.word	0x080876e5

08087888 <_Z29call_wiring_interrupt_handlerPv>:
      if (_M_empty())
 8087888:	6882      	ldr	r2, [r0, #8]
    delete handlers[pin];
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
}

void call_wiring_interrupt_handler(void* data)
{
 808788a:	b510      	push	{r4, lr}
 808788c:	b90a      	cbnz	r2, 8087892 <_Z29call_wiring_interrupt_handlerPv+0xa>
	__throw_bad_function_call();
 808788e:	f000 fe14 	bl	80884ba <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8087892:	68c3      	ldr	r3, [r0, #12]
    wiring_interrupt_handler_t* handler = (wiring_interrupt_handler_t*)data;
    (*handler)();
}
 8087894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8087898:	4718      	bx	r3
	...

0808789c <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
 808789c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808789e:	4604      	mov	r4, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
 80878a0:	f7fd f8ce 	bl	8084a40 <HAL_Interrupts_Detach>
 80878a4:	4605      	mov	r5, r0
 80878a6:	b970      	cbnz	r0, 80878c6 <_Z15detachInterruptt+0x2a>
        return false;
    }
    if (handlers[pin]) {
 80878a8:	4f08      	ldr	r7, [pc, #32]	; (80878cc <_Z15detachInterruptt+0x30>)
 80878aa:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
 80878ae:	b146      	cbz	r6, 80878c2 <_Z15detachInterruptt+0x26>
    class function<_Res(_ArgTypes...)>
 80878b0:	4630      	mov	r0, r6
 80878b2:	f7f8 ffa3 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
 80878b6:	2110      	movs	r1, #16
 80878b8:	4630      	mov	r0, r6
 80878ba:	f000 fdf8 	bl	80884ae <_ZdlPvj>
        handlers[pin] = nullptr;
 80878be:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
 80878c2:	2001      	movs	r0, #1
 80878c4:	e000      	b.n	80878c8 <_Z15detachInterruptt+0x2c>
        return false;
 80878c6:	2000      	movs	r0, #0
    }
    return true;
}
 80878c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80878ca:	bf00      	nop
 80878cc:	20000794 	.word	0x20000794

080878d0 <_ZNSt8functionIFvvEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 80878d0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80878d2:	2300      	movs	r3, #0
 80878d4:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 80878d6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80878d8:	4604      	mov	r4, r0
 80878da:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80878dc:	b12b      	cbz	r3, 80878ea <_ZNSt8functionIFvvEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80878de:	2202      	movs	r2, #2
 80878e0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80878e2:	68eb      	ldr	r3, [r5, #12]
 80878e4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80878e6:	68ab      	ldr	r3, [r5, #8]
 80878e8:	60a3      	str	r3, [r4, #8]
    }
 80878ea:	4620      	mov	r0, r4
 80878ec:	bd38      	pop	{r3, r4, r5, pc}
	...

080878f0 <_Z16allocate_handlertRSt8functionIFvvEE>:
{
 80878f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    delete handlers[pin];
 80878f2:	4f0c      	ldr	r7, [pc, #48]	; (8087924 <_Z16allocate_handlertRSt8functionIFvvEE+0x34>)
{
 80878f4:	4605      	mov	r5, r0
    delete handlers[pin];
 80878f6:	f857 4020 	ldr.w	r4, [r7, r0, lsl #2]
{
 80878fa:	460e      	mov	r6, r1
    delete handlers[pin];
 80878fc:	b134      	cbz	r4, 808790c <_Z16allocate_handlertRSt8functionIFvvEE+0x1c>
    class function<_Res(_ArgTypes...)>
 80878fe:	4620      	mov	r0, r4
 8087900:	f7f8 ff7c 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
 8087904:	2110      	movs	r1, #16
 8087906:	4620      	mov	r0, r4
 8087908:	f000 fdd1 	bl	80884ae <_ZdlPvj>
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
 808790c:	2010      	movs	r0, #16
 808790e:	f7f8 fbd4 	bl	80800ba <_Znwj>
 8087912:	4604      	mov	r4, r0
 8087914:	b110      	cbz	r0, 808791c <_Z16allocate_handlertRSt8functionIFvvEE+0x2c>
 8087916:	4631      	mov	r1, r6
 8087918:	f7ff ffda 	bl	80878d0 <_ZNSt8functionIFvvEEC1ERKS1_>
}
 808791c:	4620      	mov	r0, r4
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
 808791e:	f847 4025 	str.w	r4, [r7, r5, lsl #2]
}
 8087922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8087924:	20000794 	.word	0x20000794

08087928 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>:
{
 8087928:	b5f0      	push	{r4, r5, r6, r7, lr}
 808792a:	460c      	mov	r4, r1
 808792c:	4605      	mov	r5, r0
 808792e:	b085      	sub	sp, #20
 8087930:	4617      	mov	r7, r2
 8087932:	461e      	mov	r6, r3
    HAL_Interrupts_Detach(pin);
 8087934:	f7fd f884 	bl	8084a40 <HAL_Interrupts_Detach>
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
 8087938:	4621      	mov	r1, r4
 808793a:	4628      	mov	r0, r5
 808793c:	f7ff ffd8 	bl	80878f0 <_Z16allocate_handlertRSt8functionIFvvEE>
    if (handler) {
 8087940:	4604      	mov	r4, r0
 8087942:	b1e8      	cbz	r0, 8087980 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x58>
        HAL_InterruptExtraConfiguration extra = {0};
 8087944:	2100      	movs	r1, #0
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 8087946:	2304      	movs	r3, #4
  if (priority >= 0) {
 8087948:	428e      	cmp	r6, r1
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 808794a:	f88d 300c 	strb.w	r3, [sp, #12]
    extra.IRQChannelSubPriority = subpriority;
 808794e:	bfa8      	it	ge
 8087950:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
        HAL_InterruptExtraConfiguration extra = {0};
 8087954:	f8ad 100d 	strh.w	r1, [sp, #13]
 8087958:	f88d 100f 	strb.w	r1, [sp, #15]
    return &extra;
 808795c:	bfa4      	itt	ge
 808795e:	a903      	addge	r1, sp, #12
    extra.IRQChannelSubPriority = subpriority;
 8087960:	f88d 300e 	strbge.w	r3, [sp, #14]
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
 8087964:	4602      	mov	r2, r0
 8087966:	9100      	str	r1, [sp, #0]
 8087968:	463b      	mov	r3, r7
 808796a:	4628      	mov	r0, r5
 808796c:	4906      	ldr	r1, [pc, #24]	; (8087988 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x60>)
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 808796e:	bfa8      	it	ge
 8087970:	f88d 600d 	strbge.w	r6, [sp, #13]
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
 8087974:	f7fd f85c 	bl	8084a30 <HAL_Interrupts_Attach>
 8087978:	b110      	cbz	r0, 8087980 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x58>
            return false;
 808797a:	2000      	movs	r0, #0
}
 808797c:	b005      	add	sp, #20
 808797e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return handler!=NULL;
 8087980:	1e20      	subs	r0, r4, #0
 8087982:	bf18      	it	ne
 8087984:	2001      	movne	r0, #1
 8087986:	e7f9      	b.n	808797c <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x54>
 8087988:	08087889 	.word	0x08087889

0808798c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 808798c:	2200      	movs	r2, #0
 808798e:	6840      	ldr	r0, [r0, #4]
 8087990:	4611      	mov	r1, r2
 8087992:	f7fd bb2d 	b.w	8084ff0 <network_ready>

08087996 <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8087996:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        HAL_IPAddress ip = {0};
 8087998:	2600      	movs	r6, #0
    IPAddress resolve(const char* name)
 808799a:	b085      	sub	sp, #20
 808799c:	4604      	mov	r4, r0
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808799e:	4610      	mov	r0, r2
    IPAddress resolve(const char* name)
 80879a0:	460f      	mov	r7, r1
 80879a2:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 80879a4:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80879a6:	f003 f9c8 	bl	808ad3a <strlen>
 80879aa:	687b      	ldr	r3, [r7, #4]
 80879ac:	b281      	uxth	r1, r0
 80879ae:	9600      	str	r6, [sp, #0]
 80879b0:	4628      	mov	r0, r5
 80879b2:	aa03      	add	r2, sp, #12
 80879b4:	f7fd fa24 	bl	8084e00 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80879b8:	b130      	cbz	r0, 80879c8 <_ZN5spark13CellularClass7resolveEPKc+0x32>
 80879ba:	4631      	mov	r1, r6
 80879bc:	4620      	mov	r0, r4
 80879be:	f7ff fe71 	bl	80876a4 <_ZN9IPAddressC1Em>
    }
 80879c2:	4620      	mov	r0, r4
 80879c4:	b005      	add	sp, #20
 80879c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80879c8:	4620      	mov	r0, r4
 80879ca:	a903      	add	r1, sp, #12
 80879cc:	f7ff fe62 	bl	8087694 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80879d0:	e7f7      	b.n	80879c2 <_ZN5spark13CellularClass7resolveEPKc+0x2c>

080879d2 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80879d2:	2200      	movs	r2, #0
 80879d4:	6840      	ldr	r0, [r0, #4]
 80879d6:	4611      	mov	r1, r2
 80879d8:	f7fd bb2a 	b.w	8085030 <network_listening>

080879dc <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80879dc:	2200      	movs	r2, #0
 80879de:	6840      	ldr	r0, [r0, #4]
 80879e0:	4611      	mov	r1, r2
 80879e2:	f7fd bb35 	b.w	8085050 <network_get_listen_timeout>

080879e6 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80879e6:	2200      	movs	r2, #0
 80879e8:	6840      	ldr	r0, [r0, #4]
 80879ea:	f7fd bb29 	b.w	8085040 <network_set_listen_timeout>

080879ee <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80879ee:	2200      	movs	r2, #0
 80879f0:	6840      	ldr	r0, [r0, #4]
 80879f2:	f081 0101 	eor.w	r1, r1, #1
 80879f6:	f7fd bb13 	b.w	8085020 <network_listen>

080879fa <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80879fa:	2300      	movs	r3, #0
 80879fc:	6840      	ldr	r0, [r0, #4]
 80879fe:	461a      	mov	r2, r3
 8087a00:	4619      	mov	r1, r3
 8087a02:	f7fd bb05 	b.w	8085010 <network_off>

08087a06 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
 8087a06:	2300      	movs	r3, #0
 8087a08:	6840      	ldr	r0, [r0, #4]
 8087a0a:	461a      	mov	r2, r3
 8087a0c:	4619      	mov	r1, r3
 8087a0e:	f7fd baf7 	b.w	8085000 <network_on>

08087a12 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 8087a12:	2200      	movs	r2, #0
 8087a14:	6840      	ldr	r0, [r0, #4]
 8087a16:	4611      	mov	r1, r2
 8087a18:	f7fd bada 	b.w	8084fd0 <network_connecting>

08087a1c <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 8087a1c:	2200      	movs	r2, #0
 8087a1e:	2102      	movs	r1, #2
 8087a20:	6840      	ldr	r0, [r0, #4]
 8087a22:	f7fd badd 	b.w	8084fe0 <network_disconnect>

08087a26 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 8087a26:	2300      	movs	r3, #0
 8087a28:	6840      	ldr	r0, [r0, #4]
 8087a2a:	461a      	mov	r2, r3
 8087a2c:	f7fd bac8 	b.w	8084fc0 <network_connect>

08087a30 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 8087a30:	b510      	push	{r4, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 8087a32:	2428      	movs	r4, #40	; 0x28
 8087a34:	4b07      	ldr	r3, [pc, #28]	; (8087a54 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 8087a36:	4622      	mov	r2, r4
 8087a38:	4618      	mov	r0, r3
 8087a3a:	2100      	movs	r1, #0
 8087a3c:	f003 f902 	bl	808ac44 <memset>
        cid = -1;
 8087a40:	f04f 32ff 	mov.w	r2, #4294967295
 8087a44:	6042      	str	r2, [r0, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 8087a46:	2204      	movs	r2, #4
 8087a48:	4b03      	ldr	r3, [pc, #12]	; (8087a58 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
 8087a4a:	8004      	strh	r4, [r0, #0]
 8087a4c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 8087a4e:	4a03      	ldr	r2, [pc, #12]	; (8087a5c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
 8087a50:	601a      	str	r2, [r3, #0]
 8087a52:	bd10      	pop	{r4, pc}
 8087a54:	20000858 	.word	0x20000858
 8087a58:	20000850 	.word	0x20000850
 8087a5c:	0808bcc8 	.word	0x0808bcc8

08087a60 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 8087a60:	4770      	bx	lr

08087a62 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8087a62:	7441      	strb	r1, [r0, #17]
}
 8087a64:	4770      	bx	lr

08087a66 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 8087a66:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 8087a68:	7c00      	ldrb	r0, [r0, #16]
 8087a6a:	f7fd f911 	bl	8084c90 <hal_usart_available_data_for_write>
}
 8087a6e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8087a72:	bd08      	pop	{r3, pc}

08087a74 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 8087a74:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 8087a76:	7c00      	ldrb	r0, [r0, #16]
 8087a78:	f7fd f8e2 	bl	8084c40 <hal_usart_available>
}
 8087a7c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8087a80:	bd08      	pop	{r3, pc}

08087a82 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 8087a82:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 8087a84:	7c00      	ldrb	r0, [r0, #16]
 8087a86:	f7fd f8eb 	bl	8084c60 <hal_usart_peek>
}
 8087a8a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8087a8e:	bd08      	pop	{r3, pc}

08087a90 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 8087a90:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 8087a92:	7c00      	ldrb	r0, [r0, #16]
 8087a94:	f7fd f8dc 	bl	8084c50 <hal_usart_read>
}
 8087a98:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8087a9c:	bd08      	pop	{r3, pc}

08087a9e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 8087a9e:	7c00      	ldrb	r0, [r0, #16]
 8087aa0:	f7fd b8e6 	b.w	8084c70 <hal_usart_flush>

08087aa4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 8087aa4:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8087aa6:	7c46      	ldrb	r6, [r0, #17]
{
 8087aa8:	4604      	mov	r4, r0
 8087aaa:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8087aac:	b12e      	cbz	r6, 8087aba <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 8087aae:	4629      	mov	r1, r5
 8087ab0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 8087ab2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 8087ab6:	f7fd b8bb 	b.w	8084c30 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8087aba:	7c00      	ldrb	r0, [r0, #16]
 8087abc:	f7fd f8e8 	bl	8084c90 <hal_usart_available_data_for_write>
 8087ac0:	2800      	cmp	r0, #0
 8087ac2:	dcf4      	bgt.n	8087aae <_ZN11USARTSerial5writeEh+0xa>
}
 8087ac4:	4630      	mov	r0, r6
 8087ac6:	bd70      	pop	{r4, r5, r6, pc}

08087ac8 <_ZN11USARTSerialD0Ev>:
 8087ac8:	b510      	push	{r4, lr}
 8087aca:	4604      	mov	r4, r0
 8087acc:	2114      	movs	r1, #20
 8087ace:	f000 fcee 	bl	80884ae <_ZdlPvj>
 8087ad2:	4620      	mov	r0, r4
 8087ad4:	bd10      	pop	{r4, pc}
	...

08087ad8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 8087ad8:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 8087adc:	b510      	push	{r4, lr}
 8087ade:	4604      	mov	r4, r0
 8087ae0:	4608      	mov	r0, r1
 8087ae2:	4611      	mov	r1, r2
 8087ae4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8087ae8:	e9c4 c201 	strd	ip, r2, [r4, #4]
 8087aec:	4a04      	ldr	r2, [pc, #16]	; (8087b00 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 8087aee:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 8087af0:	6022      	str	r2, [r4, #0]
  _blocking = true;
 8087af2:	2201      	movs	r2, #1
 8087af4:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 8087af6:	461a      	mov	r2, r3
 8087af8:	f7fd f88a 	bl	8084c10 <hal_usart_init>
}
 8087afc:	4620      	mov	r0, r4
 8087afe:	bd10      	pop	{r4, pc}
 8087b00:	0808bd04 	.word	0x0808bd04

08087b04 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 8087b04:	2300      	movs	r3, #0
 8087b06:	7c00      	ldrb	r0, [r0, #16]
 8087b08:	f7fd b8ca 	b.w	8084ca0 <hal_usart_begin_config>

08087b0c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 8087b0c:	2200      	movs	r2, #0
 8087b0e:	f7ff bff9 	b.w	8087b04 <_ZN11USARTSerial5beginEmm>

08087b12 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 8087b12:	7c00      	ldrb	r0, [r0, #16]
 8087b14:	f7fd b884 	b.w	8084c20 <hal_usart_end>

08087b18 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 8087b18:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 8087b1a:	4d0d      	ldr	r5, [pc, #52]	; (8087b50 <_Z22__fetch_global_Serial1v+0x38>)
 8087b1c:	7829      	ldrb	r1, [r5, #0]
 8087b1e:	f3bf 8f5b 	dmb	ish
 8087b22:	f011 0401 	ands.w	r4, r1, #1
 8087b26:	d111      	bne.n	8087b4c <_Z22__fetch_global_Serial1v+0x34>
 8087b28:	4628      	mov	r0, r5
 8087b2a:	f7f8 fad7 	bl	80800dc <__cxa_guard_acquire>
 8087b2e:	b168      	cbz	r0, 8087b4c <_Z22__fetch_global_Serial1v+0x34>
 8087b30:	4621      	mov	r1, r4
 8087b32:	4a08      	ldr	r2, [pc, #32]	; (8087b54 <_Z22__fetch_global_Serial1v+0x3c>)
 8087b34:	4b08      	ldr	r3, [pc, #32]	; (8087b58 <_Z22__fetch_global_Serial1v+0x40>)
 8087b36:	4809      	ldr	r0, [pc, #36]	; (8087b5c <_Z22__fetch_global_Serial1v+0x44>)
 8087b38:	f7ff ffce 	bl	8087ad8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 8087b3c:	4628      	mov	r0, r5
 8087b3e:	f7f8 fad2 	bl	80800e6 <__cxa_guard_release>
 8087b42:	4a07      	ldr	r2, [pc, #28]	; (8087b60 <_Z22__fetch_global_Serial1v+0x48>)
 8087b44:	4907      	ldr	r1, [pc, #28]	; (8087b64 <_Z22__fetch_global_Serial1v+0x4c>)
 8087b46:	4805      	ldr	r0, [pc, #20]	; (8087b5c <_Z22__fetch_global_Serial1v+0x44>)
 8087b48:	f000 fcac 	bl	80884a4 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 8087b4c:	4803      	ldr	r0, [pc, #12]	; (8087b5c <_Z22__fetch_global_Serial1v+0x44>)
 8087b4e:	bd38      	pop	{r3, r4, r5, pc}
 8087b50:	20000880 	.word	0x20000880
 8087b54:	20000884 	.word	0x20000884
 8087b58:	20000908 	.word	0x20000908
 8087b5c:	2000098c 	.word	0x2000098c
 8087b60:	20000130 	.word	0x20000130
 8087b64:	08087a61 	.word	0x08087a61

08087b68 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 8087b68:	b510      	push	{r4, lr}
      if (_M_empty())
 8087b6a:	6883      	ldr	r3, [r0, #8]
 8087b6c:	4604      	mov	r4, r0
 8087b6e:	b90b      	cbnz	r3, 8087b74 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 8087b70:	f000 fca3 	bl	80884ba <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8087b74:	68c3      	ldr	r3, [r0, #12]
 8087b76:	4798      	blx	r3
      if (_M_manager)
 8087b78:	68a3      	ldr	r3, [r4, #8]
 8087b7a:	b11b      	cbz	r3, 8087b84 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8087b7c:	2203      	movs	r2, #3
 8087b7e:	4621      	mov	r1, r4
 8087b80:	4620      	mov	r0, r4
 8087b82:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8087b84:	4620      	mov	r0, r4
}
 8087b86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 8087b8a:	2110      	movs	r1, #16
 8087b8c:	f000 bc8f 	b.w	80884ae <_ZdlPvj>

08087b90 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 8087b90:	4770      	bx	lr

08087b92 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8087b92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8087b94:	4606      	mov	r6, r0
 8087b96:	4615      	mov	r5, r2
 8087b98:	460c      	mov	r4, r1
 8087b9a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8087b9c:	42bc      	cmp	r4, r7
 8087b9e:	d006      	beq.n	8087bae <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 8087ba0:	6833      	ldr	r3, [r6, #0]
 8087ba2:	4630      	mov	r0, r6
 8087ba4:	689b      	ldr	r3, [r3, #8]
 8087ba6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8087baa:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 8087bac:	e7f6      	b.n	8087b9c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 8087bae:	4628      	mov	r0, r5
 8087bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08087bb2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 8087bb2:	2200      	movs	r2, #0
 8087bb4:	7c00      	ldrb	r0, [r0, #16]
 8087bb6:	f7fd b893 	b.w	8084ce0 <hal_i2c_write>

08087bba <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 8087bba:	2100      	movs	r1, #0
 8087bbc:	7c00      	ldrb	r0, [r0, #16]
 8087bbe:	f7fd b897 	b.w	8084cf0 <hal_i2c_available>

08087bc2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 8087bc2:	2100      	movs	r1, #0
 8087bc4:	7c00      	ldrb	r0, [r0, #16]
 8087bc6:	f7fd b89b 	b.w	8084d00 <hal_i2c_read>

08087bca <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 8087bca:	2100      	movs	r1, #0
 8087bcc:	7c00      	ldrb	r0, [r0, #16]
 8087bce:	f7fd b89f 	b.w	8084d10 <hal_i2c_peek>

08087bd2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 8087bd2:	2100      	movs	r1, #0
 8087bd4:	7c00      	ldrb	r0, [r0, #16]
 8087bd6:	f7fd b8a3 	b.w	8084d20 <hal_i2c_flush>

08087bda <_ZN7TwoWireD0Ev>:
 8087bda:	b510      	push	{r4, lr}
 8087bdc:	4604      	mov	r4, r0
 8087bde:	2114      	movs	r1, #20
 8087be0:	f000 fc65 	bl	80884ae <_ZdlPvj>
 8087be4:	4620      	mov	r0, r4
 8087be6:	bd10      	pop	{r4, pc}

08087be8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 8087be8:	b510      	push	{r4, lr}
 8087bea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8087bee:	4604      	mov	r4, r0
 8087bf0:	4608      	mov	r0, r1
 8087bf2:	2100      	movs	r1, #0
 8087bf4:	e9c4 1301 	strd	r1, r3, [r4, #4]
 8087bf8:	4b03      	ldr	r3, [pc, #12]	; (8087c08 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 8087bfa:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 8087bfc:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 8087bfe:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 8087c00:	f7fd f89e 	bl	8084d40 <hal_i2c_init>
}
 8087c04:	4620      	mov	r0, r4
 8087c06:	bd10      	pop	{r4, pc}
 8087c08:	0808bd34 	.word	0x0808bd34

08087c0c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 8087c0c:	2300      	movs	r3, #0
 8087c0e:	7c00      	ldrb	r0, [r0, #16]
 8087c10:	461a      	mov	r2, r3
 8087c12:	4619      	mov	r1, r3
 8087c14:	f7fd b84c 	b.w	8084cb0 <hal_i2c_begin>

08087c18 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 8087c18:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 8087c1a:	2200      	movs	r2, #0
 8087c1c:	2314      	movs	r3, #20
 8087c1e:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8087c22:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 8087c26:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 8087c28:	7c00      	ldrb	r0, [r0, #16]
 8087c2a:	f88d 3008 	strb.w	r3, [sp, #8]
 8087c2e:	684b      	ldr	r3, [r1, #4]
 8087c30:	9303      	str	r3, [sp, #12]
 8087c32:	68cb      	ldr	r3, [r1, #12]
 8087c34:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 8087c36:	7a0b      	ldrb	r3, [r1, #8]
 8087c38:	a901      	add	r1, sp, #4
 8087c3a:	9305      	str	r3, [sp, #20]
 8087c3c:	f7fd f898 	bl	8084d70 <hal_i2c_request_ex>
}
 8087c40:	b007      	add	sp, #28
 8087c42:	f85d fb04 	ldr.w	pc, [sp], #4

08087c46 <_ZN7TwoWire11requestFromEhjh>:
{
 8087c46:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 8087c48:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8087c4a:	f88d 1000 	strb.w	r1, [sp]
 8087c4e:	f04f 0164 	mov.w	r1, #100	; 0x64
 8087c52:	bf18      	it	ne
 8087c54:	2301      	movne	r3, #1
 8087c56:	9103      	str	r1, [sp, #12]
 8087c58:	4669      	mov	r1, sp
    size_ = size;
 8087c5a:	9201      	str	r2, [sp, #4]
 8087c5c:	f88d 3008 	strb.w	r3, [sp, #8]
 8087c60:	f7ff ffda 	bl	8087c18 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 8087c64:	b005      	add	sp, #20
 8087c66:	f85d fb04 	ldr.w	pc, [sp], #4

08087c6a <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 8087c6a:	2301      	movs	r3, #1
 8087c6c:	f7ff bfeb 	b.w	8087c46 <_ZN7TwoWire11requestFromEhjh>

08087c70 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 8087c70:	2200      	movs	r2, #0
 8087c72:	7c00      	ldrb	r0, [r0, #16]
 8087c74:	f7fd b824 	b.w	8084cc0 <hal_i2c_begin_transmission>

08087c78 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 8087c78:	b2c9      	uxtb	r1, r1
 8087c7a:	f7ff bff9 	b.w	8087c70 <_ZN7TwoWire17beginTransmissionEh>

08087c7e <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
 8087c7e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 8087c80:	2200      	movs	r2, #0
 8087c82:	460b      	mov	r3, r1
 8087c84:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8087c88:	2214      	movs	r2, #20
 8087c8a:	f8ad 2004 	strh.w	r2, [sp, #4]
    };
 8087c8e:	685a      	ldr	r2, [r3, #4]
      .address = address_,
 8087c90:	7809      	ldrb	r1, [r1, #0]
    };
 8087c92:	9203      	str	r2, [sp, #12]
 8087c94:	68da      	ldr	r2, [r3, #12]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 8087c96:	7a1b      	ldrb	r3, [r3, #8]
    };
 8087c98:	9204      	str	r2, [sp, #16]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
 8087c9a:	7c00      	ldrb	r0, [r0, #16]
 8087c9c:	aa01      	add	r2, sp, #4
 8087c9e:	f88d 1008 	strb.w	r1, [sp, #8]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 8087ca2:	9305      	str	r3, [sp, #20]
 8087ca4:	f7fd f80c 	bl	8084cc0 <hal_i2c_begin_transmission>
}
 8087ca8:	b007      	add	sp, #28
 8087caa:	f85d fb04 	ldr.w	pc, [sp], #4

08087cae <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 8087cae:	2200      	movs	r2, #0
 8087cb0:	7c00      	ldrb	r0, [r0, #16]
 8087cb2:	f7fd b80d 	b.w	8084cd0 <hal_i2c_end_transmission>

08087cb6 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 8087cb6:	2101      	movs	r1, #1
 8087cb8:	f7ff bff9 	b.w	8087cae <_ZN7TwoWire15endTransmissionEh>

08087cbc <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 8087cbc:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
 8087cbe:	2100      	movs	r1, #0
 8087cc0:	7c00      	ldrb	r0, [r0, #16]
 8087cc2:	f7fd f845 	bl	8084d50 <hal_i2c_lock>
}
 8087cc6:	fab0 f080 	clz	r0, r0
 8087cca:	0940      	lsrs	r0, r0, #5
 8087ccc:	bd08      	pop	{r3, pc}

08087cce <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 8087cce:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
 8087cd0:	2100      	movs	r1, #0
 8087cd2:	7c00      	ldrb	r0, [r0, #16]
 8087cd4:	f7fd f844 	bl	8084d60 <hal_i2c_unlock>
}
 8087cd8:	fab0 f080 	clz	r0, r0
 8087cdc:	0940      	lsrs	r0, r0, #5
 8087cde:	bd08      	pop	{r3, pc}

08087ce0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
 8087ce0:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
 8087ce2:	6843      	ldr	r3, [r0, #4]
    {
 8087ce4:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
 8087ce6:	3b01      	subs	r3, #1
 8087ce8:	6043      	str	r3, [r0, #4]
 8087cea:	b963      	cbnz	r3, 8087d06 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
 8087cec:	6803      	ldr	r3, [r0, #0]
 8087cee:	689b      	ldr	r3, [r3, #8]
 8087cf0:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8087cf2:	68a3      	ldr	r3, [r4, #8]
 8087cf4:	3b01      	subs	r3, #1
 8087cf6:	60a3      	str	r3, [r4, #8]
 8087cf8:	b92b      	cbnz	r3, 8087d06 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
 8087cfa:	6823      	ldr	r3, [r4, #0]
 8087cfc:	4620      	mov	r0, r4
    }
 8087cfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 8087d02:	68db      	ldr	r3, [r3, #12]
 8087d04:	4718      	bx	r3
    }
 8087d06:	bd10      	pop	{r4, pc}

08087d08 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 8087d08:	2300      	movs	r3, #0
 8087d0a:	6840      	ldr	r0, [r0, #4]
 8087d0c:	461a      	mov	r2, r3
 8087d0e:	f7fd b957 	b.w	8084fc0 <network_connect>

08087d12 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 8087d12:	2200      	movs	r2, #0
 8087d14:	2102      	movs	r1, #2
 8087d16:	6840      	ldr	r0, [r0, #4]
 8087d18:	f7fd b962 	b.w	8084fe0 <network_disconnect>

08087d1c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 8087d1c:	2200      	movs	r2, #0
 8087d1e:	6840      	ldr	r0, [r0, #4]
 8087d20:	4611      	mov	r1, r2
 8087d22:	f7fd b955 	b.w	8084fd0 <network_connecting>

08087d26 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 8087d26:	2200      	movs	r2, #0
 8087d28:	6840      	ldr	r0, [r0, #4]
 8087d2a:	4611      	mov	r1, r2
 8087d2c:	f7fd b960 	b.w	8084ff0 <network_ready>

08087d30 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 8087d30:	2300      	movs	r3, #0
 8087d32:	6840      	ldr	r0, [r0, #4]
 8087d34:	461a      	mov	r2, r3
 8087d36:	4619      	mov	r1, r3
 8087d38:	f7fd b962 	b.w	8085000 <network_on>

08087d3c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 8087d3c:	2300      	movs	r3, #0
 8087d3e:	6840      	ldr	r0, [r0, #4]
 8087d40:	461a      	mov	r2, r3
 8087d42:	4619      	mov	r1, r3
 8087d44:	f7fd b964 	b.w	8085010 <network_off>

08087d48 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 8087d48:	2100      	movs	r1, #0
 8087d4a:	6840      	ldr	r0, [r0, #4]
 8087d4c:	f7fd b988 	b.w	8085060 <network_is_on>

08087d50 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 8087d50:	2100      	movs	r1, #0
 8087d52:	6840      	ldr	r0, [r0, #4]
 8087d54:	f7fd b98c 	b.w	8085070 <network_is_off>

08087d58 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 8087d58:	2200      	movs	r2, #0
 8087d5a:	6840      	ldr	r0, [r0, #4]
 8087d5c:	f081 0101 	eor.w	r1, r1, #1
 8087d60:	f7fd b95e 	b.w	8085020 <network_listen>

08087d64 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 8087d64:	2200      	movs	r2, #0
 8087d66:	6840      	ldr	r0, [r0, #4]
 8087d68:	f7fd b96a 	b.w	8085040 <network_set_listen_timeout>

08087d6c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 8087d6c:	2200      	movs	r2, #0
 8087d6e:	6840      	ldr	r0, [r0, #4]
 8087d70:	4611      	mov	r1, r2
 8087d72:	f7fd b96d 	b.w	8085050 <network_get_listen_timeout>

08087d76 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 8087d76:	2200      	movs	r2, #0
 8087d78:	6840      	ldr	r0, [r0, #4]
 8087d7a:	4611      	mov	r1, r2
 8087d7c:	f7fd b958 	b.w	8085030 <network_listening>

08087d80 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 8087d80:	b570      	push	{r4, r5, r6, lr}
 8087d82:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 8087d84:	2600      	movs	r6, #0
 8087d86:	b086      	sub	sp, #24
 8087d88:	4604      	mov	r4, r0
    IPAddress addr;
 8087d8a:	a804      	add	r0, sp, #16
 8087d8c:	f7ff fc7a 	bl	8087684 <_ZN9IPAddressC1Ev>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8087d90:	4628      	mov	r0, r5
        HAL_IPAddress ip = {0};
 8087d92:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8087d94:	f002 ffd1 	bl	808ad3a <strlen>
 8087d98:	4b0a      	ldr	r3, [pc, #40]	; (8087dc4 <_ZN5spark12NetworkClass7resolveEPKc+0x44>)
 8087d9a:	9600      	str	r6, [sp, #0]
 8087d9c:	b281      	uxth	r1, r0
 8087d9e:	685b      	ldr	r3, [r3, #4]
 8087da0:	4628      	mov	r0, r5
 8087da2:	aa03      	add	r2, sp, #12
 8087da4:	f7fd f82c 	bl	8084e00 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8087da8:	b130      	cbz	r0, 8087db8 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 8087daa:	4631      	mov	r1, r6
 8087dac:	4620      	mov	r0, r4
 8087dae:	f7ff fc79 	bl	80876a4 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 8087db2:	4620      	mov	r0, r4
 8087db4:	b006      	add	sp, #24
 8087db6:	bd70      	pop	{r4, r5, r6, pc}
 8087db8:	4620      	mov	r0, r4
 8087dba:	a903      	add	r1, sp, #12
 8087dbc:	f7ff fc6a 	bl	8087694 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 8087dc0:	e7f7      	b.n	8087db2 <_ZN5spark12NetworkClass7resolveEPKc+0x32>
 8087dc2:	bf00      	nop
 8087dc4:	20000850 	.word	0x20000850

08087dc8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 8087dc8:	4b02      	ldr	r3, [pc, #8]	; (8087dd4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 8087dca:	4a03      	ldr	r2, [pc, #12]	; (8087dd8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 8087dcc:	601a      	str	r2, [r3, #0]
 8087dce:	2200      	movs	r2, #0
 8087dd0:	605a      	str	r2, [r3, #4]

} // spark
 8087dd2:	4770      	bx	lr
 8087dd4:	200009a0 	.word	0x200009a0
 8087dd8:	0808bd5c 	.word	0x0808bd5c

08087ddc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 8087ddc:	2201      	movs	r2, #1
 8087dde:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 8087de2:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 8087de6:	4618      	mov	r0, r3
 8087de8:	2901      	cmp	r1, #1
 8087dea:	d108      	bne.n	8087dfe <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 8087dec:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8087df0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 8087df4:	3a01      	subs	r2, #1
 8087df6:	f103 0310 	add.w	r3, r3, #16
 8087dfa:	d1f2      	bne.n	8087de2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 8087dfc:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 8087dfe:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 8087e00:	bf04      	itt	eq
 8087e02:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 8087e06:	1852      	addeq	r2, r2, r1
 8087e08:	e7f4      	b.n	8087df4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

08087e0a <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 8087e0a:	b40e      	push	{r1, r2, r3}
 8087e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8087e10:	b087      	sub	sp, #28
 8087e12:	af00      	add	r7, sp, #0
 8087e14:	f107 0534 	add.w	r5, r7, #52	; 0x34
 8087e18:	f855 8b04 	ldr.w	r8, [r5], #4
 8087e1c:	4604      	mov	r4, r0
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 8087e1e:	462b      	mov	r3, r5
 8087e20:	4642      	mov	r2, r8
 8087e22:	2110      	movs	r1, #16
 8087e24:	f107 0008 	add.w	r0, r7, #8
    va_start(args, fmt);
 8087e28:	607d      	str	r5, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 8087e2a:	f7fd f9a9 	bl	8085180 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 8087e2e:	280f      	cmp	r0, #15
 8087e30:	d91b      	bls.n	8087e6a <_ZN5spark10JSONWriter6printfEPKcz+0x60>
        char buf[n + 1]; // Use larger buffer
 8087e32:	f100 0308 	add.w	r3, r0, #8
 8087e36:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 8087e3a:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 8087e3c:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 8087e40:	4642      	mov	r2, r8
 8087e42:	1c41      	adds	r1, r0, #1
 8087e44:	462b      	mov	r3, r5
 8087e46:	4668      	mov	r0, sp
        va_start(args, fmt);
 8087e48:	607d      	str	r5, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 8087e4a:	f7fd f999 	bl	8085180 <vsnprintf>
        if (n > 0) {
 8087e4e:	1e02      	subs	r2, r0, #0
 8087e50:	dd04      	ble.n	8087e5c <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
 8087e52:	6823      	ldr	r3, [r4, #0]
 8087e54:	4669      	mov	r1, sp
 8087e56:	4620      	mov	r0, r4
 8087e58:	689b      	ldr	r3, [r3, #8]
 8087e5a:	4798      	blx	r3
 8087e5c:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 8087e5e:	371c      	adds	r7, #28
 8087e60:	46bd      	mov	sp, r7
 8087e62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8087e66:	b003      	add	sp, #12
 8087e68:	4770      	bx	lr
    } else if (n > 0) {
 8087e6a:	2800      	cmp	r0, #0
 8087e6c:	d0f7      	beq.n	8087e5e <_ZN5spark10JSONWriter6printfEPKcz+0x54>
        write(buf, n);
 8087e6e:	6823      	ldr	r3, [r4, #0]
 8087e70:	4602      	mov	r2, r0
 8087e72:	689b      	ldr	r3, [r3, #8]
 8087e74:	4620      	mov	r0, r4
 8087e76:	f107 0108 	add.w	r1, r7, #8
 8087e7a:	4798      	blx	r3
}
 8087e7c:	e7ef      	b.n	8087e5e <_ZN5spark10JSONWriter6printfEPKcz+0x54>

08087e7e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 8087e7e:	b538      	push	{r3, r4, r5, lr}
 8087e80:	680b      	ldr	r3, [r1, #0]
 8087e82:	4604      	mov	r4, r0
 8087e84:	6003      	str	r3, [r0, #0]
 8087e86:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 8087e88:	6843      	ldr	r3, [r0, #4]
 8087e8a:	429d      	cmp	r5, r3
 8087e8c:	d008      	beq.n	8087ea0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
 8087e8e:	b115      	cbz	r5, 8087e96 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
 8087e90:	686b      	ldr	r3, [r5, #4]
 8087e92:	3301      	adds	r3, #1
 8087e94:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 8087e96:	6860      	ldr	r0, [r4, #4]
 8087e98:	b108      	cbz	r0, 8087e9e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
 8087e9a:	f7ff ff21 	bl	8087ce0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 8087e9e:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 8087ea0:	bd38      	pop	{r3, r4, r5, pc}

08087ea2 <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
 8087ea2:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 8087ea4:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 8087ea6:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 8087eaa:	2201      	movs	r2, #1
 8087eac:	689b      	ldr	r3, [r3, #8]
 8087eae:	f10d 0107 	add.w	r1, sp, #7
 8087eb2:	4798      	blx	r3
}
 8087eb4:	b003      	add	sp, #12
 8087eb6:	f85d fb04 	ldr.w	pc, [sp], #4

08087eba <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 8087eba:	460b      	mov	r3, r1
 8087ebc:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 8087ebe:	2200      	movs	r2, #0
 8087ec0:	b510      	push	{r4, lr}
 8087ec2:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 8087ec4:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 8087ec8:	6083      	str	r3, [r0, #8]
    if (t) {
 8087eca:	b90b      	cbnz	r3, 8087ed0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 8087ecc:	4620      	mov	r0, r4
 8087ece:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
 8087ed0:	f7ff ffd5 	bl	8087e7e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
 8087ed4:	e7fa      	b.n	8087ecc <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

08087ed6 <_ZNK5spark9JSONValue4typeEv>:
spark::JSONType spark::JSONValue::type() const {
 8087ed6:	4603      	mov	r3, r0
    if (!t_) {
 8087ed8:	6880      	ldr	r0, [r0, #8]
 8087eda:	b320      	cbz	r0, 8087f26 <_ZNK5spark9JSONValue4typeEv+0x50>
    switch (t_->type) {
 8087edc:	7802      	ldrb	r2, [r0, #0]
 8087ede:	2a03      	cmp	r2, #3
 8087ee0:	d81a      	bhi.n	8087f18 <_ZNK5spark9JSONValue4typeEv+0x42>
 8087ee2:	e8df f002 	tbb	[pc, r2]
 8087ee6:	1704      	.short	0x1704
 8087ee8:	1b02      	.short	0x1b02
 8087eea:	2005      	movs	r0, #5
 8087eec:	4770      	bx	lr
        const char c = d_->json[t_->start];
 8087eee:	681b      	ldr	r3, [r3, #0]
 8087ef0:	685a      	ldr	r2, [r3, #4]
 8087ef2:	6843      	ldr	r3, [r0, #4]
 8087ef4:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 8087ef6:	282d      	cmp	r0, #45	; 0x2d
 8087ef8:	d012      	beq.n	8087f20 <_ZNK5spark9JSONValue4typeEv+0x4a>
 8087efa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8087efe:	2b09      	cmp	r3, #9
 8087f00:	d90e      	bls.n	8087f20 <_ZNK5spark9JSONValue4typeEv+0x4a>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 8087f02:	2874      	cmp	r0, #116	; 0x74
 8087f04:	d00e      	beq.n	8087f24 <_ZNK5spark9JSONValue4typeEv+0x4e>
 8087f06:	2866      	cmp	r0, #102	; 0x66
 8087f08:	d00c      	beq.n	8087f24 <_ZNK5spark9JSONValue4typeEv+0x4e>
        return JSON_TYPE_INVALID;
 8087f0a:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 8087f0e:	4258      	negs	r0, r3
 8087f10:	4158      	adcs	r0, r3
 8087f12:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 8087f14:	2006      	movs	r0, #6
 8087f16:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 8087f18:	2000      	movs	r0, #0
 8087f1a:	4770      	bx	lr
        return JSON_TYPE_STRING;
 8087f1c:	2004      	movs	r0, #4
 8087f1e:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 8087f20:	2003      	movs	r0, #3
 8087f22:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 8087f24:	2002      	movs	r0, #2
}
 8087f26:	4770      	bx	lr

08087f28 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 8087f28:	b510      	push	{r4, lr}
 8087f2a:	4604      	mov	r4, r0
    switch (type()) {
 8087f2c:	f7ff ffd3 	bl	8087ed6 <_ZNK5spark9JSONValue4typeEv>
 8087f30:	2802      	cmp	r0, #2
 8087f32:	d00e      	beq.n	8087f52 <_ZNK5spark9JSONValue5toIntEv+0x2a>
 8087f34:	1ec3      	subs	r3, r0, #3
 8087f36:	b2db      	uxtb	r3, r3
 8087f38:	2b01      	cmp	r3, #1
 8087f3a:	d814      	bhi.n	8087f66 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 8087f3c:	6822      	ldr	r2, [r4, #0]
 8087f3e:	68a3      	ldr	r3, [r4, #8]
 8087f40:	6850      	ldr	r0, [r2, #4]
 8087f42:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 8087f44:	220a      	movs	r2, #10
}
 8087f46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 8087f4a:	2100      	movs	r1, #0
 8087f4c:	4418      	add	r0, r3
 8087f4e:	f003 b80f 	b.w	808af70 <strtol>
        const char* const s = d_->json + t_->start;
 8087f52:	6822      	ldr	r2, [r4, #0]
 8087f54:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 8087f56:	6852      	ldr	r2, [r2, #4]
 8087f58:	685b      	ldr	r3, [r3, #4]
 8087f5a:	5cd0      	ldrb	r0, [r2, r3]
 8087f5c:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 8087f60:	4258      	negs	r0, r3
 8087f62:	4158      	adcs	r0, r3
}
 8087f64:	bd10      	pop	{r4, pc}
    switch (type()) {
 8087f66:	2000      	movs	r0, #0
 8087f68:	e7fc      	b.n	8087f64 <_ZNK5spark9JSONValue5toIntEv+0x3c>
	...

08087f6c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 8087f6c:	460b      	mov	r3, r1
 8087f6e:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 8087f70:	2200      	movs	r2, #0
 8087f72:	b510      	push	{r4, lr}
 8087f74:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 8087f76:	e9c0 2200 	strd	r2, r2, [r0]
        n_(0) {
 8087f7a:	480d      	ldr	r0, [pc, #52]	; (8087fb0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 8087f7c:	e9c4 0202 	strd	r0, r2, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 8087f80:	b1a3      	cbz	r3, 8087fac <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x40>
 8087f82:	781a      	ldrb	r2, [r3, #0]
 8087f84:	2a03      	cmp	r2, #3
 8087f86:	d006      	beq.n	8087f96 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2a>
 8087f88:	b982      	cbnz	r2, 8087fac <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x40>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 8087f8a:	680a      	ldr	r2, [r1, #0]
 8087f8c:	6850      	ldr	r0, [r2, #4]
 8087f8e:	685a      	ldr	r2, [r3, #4]
 8087f90:	5c82      	ldrb	r2, [r0, r2]
 8087f92:	2a6e      	cmp	r2, #110	; 0x6e
 8087f94:	d007      	beq.n	8087fa6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3a>
            s_ = d->json + t->start;
 8087f96:	680a      	ldr	r2, [r1, #0]
 8087f98:	6858      	ldr	r0, [r3, #4]
 8087f9a:	6852      	ldr	r2, [r2, #4]
            n_ = t->end - t->start;
 8087f9c:	689b      	ldr	r3, [r3, #8]
            s_ = d->json + t->start;
 8087f9e:	4402      	add	r2, r0
            n_ = t->end - t->start;
 8087fa0:	1a1b      	subs	r3, r3, r0
            s_ = d->json + t->start;
 8087fa2:	60a2      	str	r2, [r4, #8]
            n_ = t->end - t->start;
 8087fa4:	60e3      	str	r3, [r4, #12]
 8087fa6:	4620      	mov	r0, r4
 8087fa8:	f7ff ff69 	bl	8087e7e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 8087fac:	4620      	mov	r0, r4
 8087fae:	bd10      	pop	{r4, pc}
 8087fb0:	0808b6b8 	.word	0x0808b6b8

08087fb4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 8087fb4:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 8087fb6:	2500      	movs	r5, #0
 8087fb8:	460b      	mov	r3, r1
 8087fba:	4604      	mov	r4, r0
 8087fbc:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 8087fbe:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 8087fc2:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8087fc6:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 8087fca:	b14b      	cbz	r3, 8087fe0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 8087fcc:	781a      	ldrb	r2, [r3, #0]
 8087fce:	2a01      	cmp	r2, #1
 8087fd0:	d106      	bne.n	8087fe0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 8087fd2:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 8087fd6:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 8087fd8:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 8087fda:	6143      	str	r3, [r0, #20]
 8087fdc:	f7ff ff4f 	bl	8087e7e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 8087fe0:	4620      	mov	r0, r4
 8087fe2:	bd38      	pop	{r3, r4, r5, pc}

08087fe4 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 8087fe4:	b510      	push	{r4, lr}
    if (!n_) {
 8087fe6:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 8087fe8:	4604      	mov	r4, r0
    if (!n_) {
 8087fea:	b163      	cbz	r3, 8088006 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 8087fec:	6880      	ldr	r0, [r0, #8]
    --n_;
 8087fee:	3b01      	subs	r3, #1
    k_ = t_; // Name
 8087ff0:	60e0      	str	r0, [r4, #12]
    ++t_;
 8087ff2:	3010      	adds	r0, #16
 8087ff4:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 8087ff6:	6120      	str	r0, [r4, #16]
    --n_;
 8087ff8:	6163      	str	r3, [r4, #20]
    if (n_) {
 8087ffa:	b113      	cbz	r3, 8088002 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 8087ffc:	f7ff feee 	bl	8087ddc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 8088000:	60a0      	str	r0, [r4, #8]
    return true;
 8088002:	2001      	movs	r0, #1
 8088004:	e000      	b.n	8088008 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 8088006:	4618      	mov	r0, r3
}
 8088008:	bd10      	pop	{r4, pc}

0808800a <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 808800a:	b510      	push	{r4, lr}
    write('}');
 808800c:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 808800e:	4604      	mov	r4, r0
    write('}');
 8088010:	f7ff ff47 	bl	8087ea2 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 8088014:	2301      	movs	r3, #1
}
 8088016:	4620      	mov	r0, r4
    state_ = NEXT;
 8088018:	7123      	strb	r3, [r4, #4]
}
 808801a:	bd10      	pop	{r4, pc}

0808801c <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 808801c:	b508      	push	{r3, lr}
    switch (state_) {
 808801e:	7903      	ldrb	r3, [r0, #4]
 8088020:	2b01      	cmp	r3, #1
 8088022:	d002      	beq.n	808802a <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 8088024:	2b02      	cmp	r3, #2
 8088026:	d004      	beq.n	8088032 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 8088028:	bd08      	pop	{r3, pc}
        write(',');
 808802a:	212c      	movs	r1, #44	; 0x2c
        write(':');
 808802c:	f7ff ff39 	bl	8087ea2 <_ZN5spark10JSONWriter5writeEc>
}
 8088030:	e7fa      	b.n	8088028 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 8088032:	213a      	movs	r1, #58	; 0x3a
 8088034:	e7fa      	b.n	808802c <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

08088036 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 8088036:	b510      	push	{r4, lr}
 8088038:	4604      	mov	r4, r0
    writeSeparator();
 808803a:	f7ff ffef 	bl	808801c <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 808803e:	4620      	mov	r0, r4
 8088040:	217b      	movs	r1, #123	; 0x7b
 8088042:	f7ff ff2e 	bl	8087ea2 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 8088046:	2300      	movs	r3, #0
}
 8088048:	4620      	mov	r0, r4
    state_ = BEGIN;
 808804a:	7123      	strb	r3, [r4, #4]
}
 808804c:	bd10      	pop	{r4, pc}
	...

08088050 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 8088050:	b538      	push	{r3, r4, r5, lr}
 8088052:	4604      	mov	r4, r0
 8088054:	460d      	mov	r5, r1
    writeSeparator();
 8088056:	f7ff ffe1 	bl	808801c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 808805a:	6823      	ldr	r3, [r4, #0]
 808805c:	4620      	mov	r0, r4
 808805e:	462a      	mov	r2, r5
 8088060:	68db      	ldr	r3, [r3, #12]
 8088062:	4903      	ldr	r1, [pc, #12]	; (8088070 <_ZN5spark10JSONWriter5valueEi+0x20>)
 8088064:	4798      	blx	r3
    state_ = NEXT;
 8088066:	2301      	movs	r3, #1
}
 8088068:	4620      	mov	r0, r4
    state_ = NEXT;
 808806a:	7123      	strb	r3, [r4, #4]
}
 808806c:	bd38      	pop	{r3, r4, r5, pc}
 808806e:	bf00      	nop
 8088070:	0808b80f 	.word	0x0808b80f

08088074 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 8088074:	b538      	push	{r3, r4, r5, lr}
 8088076:	4604      	mov	r4, r0
 8088078:	460d      	mov	r5, r1
    writeSeparator();
 808807a:	f7ff ffcf 	bl	808801c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 808807e:	6823      	ldr	r3, [r4, #0]
 8088080:	4620      	mov	r0, r4
 8088082:	462a      	mov	r2, r5
 8088084:	68db      	ldr	r3, [r3, #12]
 8088086:	4903      	ldr	r1, [pc, #12]	; (8088094 <_ZN5spark10JSONWriter5valueEj+0x20>)
 8088088:	4798      	blx	r3
    state_ = NEXT;
 808808a:	2301      	movs	r3, #1
}
 808808c:	4620      	mov	r0, r4
    state_ = NEXT;
 808808e:	7123      	strb	r3, [r4, #4]
}
 8088090:	bd38      	pop	{r3, r4, r5, pc}
 8088092:	bf00      	nop
 8088094:	0808bd90 	.word	0x0808bd90

08088098 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 8088098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808809c:	460d      	mov	r5, r1
 808809e:	4690      	mov	r8, r2
    write('"');
 80880a0:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 80880a2:	4604      	mov	r4, r0
 80880a4:	462f      	mov	r7, r5
    write('"');
 80880a6:	f7ff fefc 	bl	8087ea2 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 80880aa:	f8df 909c 	ldr.w	r9, [pc, #156]	; 8088148 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb0>
    const char* const end = str + size;
 80880ae:	44a8      	add	r8, r5
    while (s != end) {
 80880b0:	4547      	cmp	r7, r8
 80880b2:	463a      	mov	r2, r7
 80880b4:	d039      	beq.n	808812a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x92>
        const char c = *s;
 80880b6:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
 80880ba:	2e22      	cmp	r6, #34	; 0x22
 80880bc:	d003      	beq.n	80880c6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
 80880be:	2e5c      	cmp	r6, #92	; 0x5c
 80880c0:	d001      	beq.n	80880c6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
 80880c2:	2e1f      	cmp	r6, #31
 80880c4:	d8f4      	bhi.n	80880b0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 80880c6:	6823      	ldr	r3, [r4, #0]
 80880c8:	4629      	mov	r1, r5
 80880ca:	4620      	mov	r0, r4
 80880cc:	689b      	ldr	r3, [r3, #8]
 80880ce:	1b52      	subs	r2, r2, r5
 80880d0:	4798      	blx	r3
            write('\\');
 80880d2:	215c      	movs	r1, #92	; 0x5c
 80880d4:	4620      	mov	r0, r4
 80880d6:	f7ff fee4 	bl	8087ea2 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 80880da:	2e0d      	cmp	r6, #13
 80880dc:	d80a      	bhi.n	80880f4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5c>
 80880de:	2e07      	cmp	r6, #7
 80880e0:	d91c      	bls.n	808811c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
 80880e2:	f1a6 0308 	sub.w	r3, r6, #8
 80880e6:	2b05      	cmp	r3, #5
 80880e8:	d818      	bhi.n	808811c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
 80880ea:	e8df f003 	tbb	[pc, r3]
 80880ee:	0f0d      	.short	0x0f0d
 80880f0:	15131711 	.word	0x15131711
 80880f4:	2e22      	cmp	r6, #34	; 0x22
 80880f6:	d001      	beq.n	80880fc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
 80880f8:	2e5c      	cmp	r6, #92	; 0x5c
 80880fa:	d10f      	bne.n	808811c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
                write(c);
 80880fc:	4631      	mov	r1, r6
                write('b');
 80880fe:	4620      	mov	r0, r4
 8088100:	f7ff fecf 	bl	8087ea2 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 8088104:	463d      	mov	r5, r7
    while (s != end) {
 8088106:	e7d3      	b.n	80880b0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 8088108:	2162      	movs	r1, #98	; 0x62
 808810a:	e7f8      	b.n	80880fe <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
                write('t');
 808810c:	2174      	movs	r1, #116	; 0x74
 808810e:	e7f6      	b.n	80880fe <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
                write('n');
 8088110:	216e      	movs	r1, #110	; 0x6e
 8088112:	e7f4      	b.n	80880fe <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
                write('f');
 8088114:	2166      	movs	r1, #102	; 0x66
 8088116:	e7f2      	b.n	80880fe <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
                write('r');
 8088118:	2172      	movs	r1, #114	; 0x72
 808811a:	e7f0      	b.n	80880fe <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
                printf("u%04x", (unsigned)c);
 808811c:	6823      	ldr	r3, [r4, #0]
 808811e:	4632      	mov	r2, r6
 8088120:	4649      	mov	r1, r9
 8088122:	4620      	mov	r0, r4
 8088124:	68db      	ldr	r3, [r3, #12]
 8088126:	4798      	blx	r3
                break;
 8088128:	e7ec      	b.n	8088104 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
        }
        ++s;
    }
    if (s != str) {
 808812a:	42bd      	cmp	r5, r7
 808812c:	d005      	beq.n	808813a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xa2>
        write(str, s - str); // Write remaining characters
 808812e:	6823      	ldr	r3, [r4, #0]
 8088130:	4629      	mov	r1, r5
 8088132:	4620      	mov	r0, r4
 8088134:	689b      	ldr	r3, [r3, #8]
 8088136:	1b7a      	subs	r2, r7, r5
 8088138:	4798      	blx	r3
    }
    write('"');
 808813a:	2122      	movs	r1, #34	; 0x22
 808813c:	4620      	mov	r0, r4
 808813e:	f7ff feb0 	bl	8087ea2 <_ZN5spark10JSONWriter5writeEc>
}
 8088142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8088146:	bf00      	nop
 8088148:	0808bd93 	.word	0x0808bd93

0808814c <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 808814c:	b570      	push	{r4, r5, r6, lr}
 808814e:	4604      	mov	r4, r0
 8088150:	460d      	mov	r5, r1
 8088152:	4616      	mov	r6, r2
    writeSeparator();
 8088154:	f7ff ff62 	bl	808801c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 8088158:	4620      	mov	r0, r4
 808815a:	4632      	mov	r2, r6
 808815c:	4629      	mov	r1, r5
 808815e:	f7ff ff9b 	bl	8088098 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 8088162:	2302      	movs	r3, #2
}
 8088164:	4620      	mov	r0, r4
    state_ = VALUE;
 8088166:	7123      	strb	r3, [r4, #4]
}
 8088168:	bd70      	pop	{r4, r5, r6, pc}

0808816a <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 808816a:	b570      	push	{r4, r5, r6, lr}
 808816c:	4604      	mov	r4, r0
 808816e:	460d      	mov	r5, r1
 8088170:	4616      	mov	r6, r2
    writeSeparator();
 8088172:	f7ff ff53 	bl	808801c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 8088176:	4620      	mov	r0, r4
 8088178:	4632      	mov	r2, r6
 808817a:	4629      	mov	r1, r5
 808817c:	f7ff ff8c 	bl	8088098 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 8088180:	2301      	movs	r3, #1
}
 8088182:	4620      	mov	r0, r4
    state_ = NEXT;
 8088184:	7123      	strb	r3, [r4, #4]
}
 8088186:	bd70      	pop	{r4, r5, r6, pc}

08088188 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 8088188:	282e      	cmp	r0, #46	; 0x2e
bool pinAvailable(uint16_t pin) {
 808818a:	b570      	push	{r4, r5, r6, lr}
 808818c:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 808818e:	d901      	bls.n	8088194 <pinAvailable+0xc>
    return false;
 8088190:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 8088192:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 8088194:	f1a0 030d 	sub.w	r3, r0, #13
 8088198:	2b02      	cmp	r3, #2
 808819a:	d90b      	bls.n	80881b4 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 808819c:	2801      	cmp	r0, #1
 808819e:	d826      	bhi.n	80881ee <pinAvailable+0x66>
 80881a0:	f000 f930 	bl	8088404 <_Z19__fetch_global_Wirev>
 80881a4:	2100      	movs	r1, #0
 80881a6:	7c00      	ldrb	r0, [r0, #16]
 80881a8:	f7fc fdc2 	bl	8084d30 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80881ac:	f080 0001 	eor.w	r0, r0, #1
 80881b0:	b2c0      	uxtb	r0, r0
 80881b2:	e7ee      	b.n	8088192 <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80881b4:	4e13      	ldr	r6, [pc, #76]	; (8088204 <pinAvailable+0x7c>)
 80881b6:	7831      	ldrb	r1, [r6, #0]
 80881b8:	f3bf 8f5b 	dmb	ish
 80881bc:	f011 0501 	ands.w	r5, r1, #1
 80881c0:	d10f      	bne.n	80881e2 <pinAvailable+0x5a>
 80881c2:	4630      	mov	r0, r6
 80881c4:	f7f7 ff8a 	bl	80800dc <__cxa_guard_acquire>
 80881c8:	b158      	cbz	r0, 80881e2 <pinAvailable+0x5a>
 80881ca:	4629      	mov	r1, r5
 80881cc:	480e      	ldr	r0, [pc, #56]	; (8088208 <pinAvailable+0x80>)
 80881ce:	f7fd f86a 	bl	80852a6 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80881d2:	4630      	mov	r0, r6
 80881d4:	f7f7 ff87 	bl	80800e6 <__cxa_guard_release>
 80881d8:	4a0c      	ldr	r2, [pc, #48]	; (808820c <pinAvailable+0x84>)
 80881da:	490d      	ldr	r1, [pc, #52]	; (8088210 <pinAvailable+0x88>)
 80881dc:	480a      	ldr	r0, [pc, #40]	; (8088208 <pinAvailable+0x80>)
 80881de:	f000 f961 	bl	80884a4 <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80881e2:	4b09      	ldr	r3, [pc, #36]	; (8088208 <pinAvailable+0x80>)
 80881e4:	7818      	ldrb	r0, [r3, #0]
 80881e6:	f7fc fdfb 	bl	8084de0 <hal_spi_is_enabled>
 80881ea:	2800      	cmp	r0, #0
 80881ec:	d1d0      	bne.n	8088190 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80881ee:	3c12      	subs	r4, #18
 80881f0:	2c01      	cmp	r4, #1
 80881f2:	d805      	bhi.n	8088200 <pinAvailable+0x78>
 80881f4:	f7ff fc90 	bl	8087b18 <_Z22__fetch_global_Serial1v>
 80881f8:	7c00      	ldrb	r0, [r0, #16]
 80881fa:	f7fc fd41 	bl	8084c80 <hal_usart_is_enabled>
 80881fe:	e7d5      	b.n	80881ac <pinAvailable+0x24>
  return true; // 'pin' is available
 8088200:	2001      	movs	r0, #1
 8088202:	e7c6      	b.n	8088192 <pinAvailable+0xa>
 8088204:	2000038c 	.word	0x2000038c
 8088208:	20000390 	.word	0x20000390
 808820c:	20000130 	.word	0x20000130
 8088210:	0808306b 	.word	0x0808306b

08088214 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8088214:	282e      	cmp	r0, #46	; 0x2e
{
 8088216:	b538      	push	{r3, r4, r5, lr}
 8088218:	4604      	mov	r4, r0
 808821a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 808821c:	d80a      	bhi.n	8088234 <pinMode+0x20>
 808821e:	29ff      	cmp	r1, #255	; 0xff
 8088220:	d008      	beq.n	8088234 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 8088222:	f7ff ffb1 	bl	8088188 <pinAvailable>
 8088226:	b128      	cbz	r0, 8088234 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 8088228:	4629      	mov	r1, r5
 808822a:	4620      	mov	r0, r4
}
 808822c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 8088230:	f7fc bbde 	b.w	80849f0 <HAL_Pin_Mode>
}
 8088234:	bd38      	pop	{r3, r4, r5, pc}

08088236 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 8088236:	b538      	push	{r3, r4, r5, lr}
 8088238:	4604      	mov	r4, r0
 808823a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 808823c:	f7fc fbe0 	bl	8084a00 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 8088240:	28ff      	cmp	r0, #255	; 0xff
 8088242:	d010      	beq.n	8088266 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 8088244:	2806      	cmp	r0, #6
 8088246:	d804      	bhi.n	8088252 <digitalWrite+0x1c>
 8088248:	234d      	movs	r3, #77	; 0x4d
 808824a:	fa23 f000 	lsr.w	r0, r3, r0
 808824e:	07c3      	lsls	r3, r0, #31
 8088250:	d409      	bmi.n	8088266 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 8088252:	4620      	mov	r0, r4
 8088254:	f7ff ff98 	bl	8088188 <pinAvailable>
 8088258:	b128      	cbz	r0, 8088266 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 808825a:	4629      	mov	r1, r5
 808825c:	4620      	mov	r0, r4
}
 808825e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 8088262:	f7fc bbd5 	b.w	8084a10 <HAL_GPIO_Write>
}
 8088266:	bd38      	pop	{r3, r4, r5, pc}

08088268 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 8088268:	b510      	push	{r4, lr}
 808826a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 808826c:	f7fc fbc8 	bl	8084a00 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 8088270:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 8088272:	b2db      	uxtb	r3, r3
 8088274:	2b01      	cmp	r3, #1
 8088276:	d908      	bls.n	808828a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 8088278:	4620      	mov	r0, r4
 808827a:	f7ff ff85 	bl	8088188 <pinAvailable>
 808827e:	b120      	cbz	r0, 808828a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 8088280:	4620      	mov	r0, r4
}
 8088282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
 8088286:	f7fc bbcb 	b.w	8084a20 <HAL_GPIO_Read>
}
 808828a:	2000      	movs	r0, #0
 808828c:	bd10      	pop	{r4, pc}

0808828e <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 808828e:	b510      	push	{r4, lr}
 8088290:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 8088292:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 8088294:	bf9c      	itt	ls
 8088296:	340a      	addls	r4, #10
 8088298:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 808829a:	4620      	mov	r0, r4
 808829c:	f7ff ff74 	bl	8088188 <pinAvailable>
 80882a0:	b150      	cbz	r0, 80882b8 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80882a2:	2103      	movs	r1, #3
 80882a4:	4620      	mov	r0, r4
 80882a6:	f7fc fb9b 	bl	80849e0 <HAL_Validate_Pin_Function>
 80882aa:	2803      	cmp	r0, #3
 80882ac:	d104      	bne.n	80882b8 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 80882ae:	4620      	mov	r0, r4
}
 80882b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 80882b4:	f7fc bbd4 	b.w	8084a60 <hal_adc_read>
}
 80882b8:	2000      	movs	r0, #0
 80882ba:	bd10      	pop	{r4, pc}

080882bc <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
 80882bc:	b538      	push	{r3, r4, r5, lr}
 80882be:	4604      	mov	r4, r0
 80882c0:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
 80882c2:	f7ff ff61 	bl	8088188 <pinAvailable>
 80882c6:	b1f0      	cbz	r0, 8088306 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
 80882c8:	2104      	movs	r1, #4
 80882ca:	4620      	mov	r0, r4
 80882cc:	f7fc fb88 	bl	80849e0 <HAL_Validate_Pin_Function>
 80882d0:	2804      	cmp	r0, #4
 80882d2:	d105      	bne.n	80882e0 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
 80882d4:	4620      	mov	r0, r4
 80882d6:	b2a9      	uxth	r1, r5
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
 80882d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
 80882dc:	f7fc bbb8 	b.w	8084a50 <HAL_DAC_Write>
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
 80882e0:	2102      	movs	r1, #2
 80882e2:	4620      	mov	r0, r4
 80882e4:	f7fc fb7c 	bl	80849e0 <HAL_Validate_Pin_Function>
 80882e8:	2802      	cmp	r0, #2
 80882ea:	d10c      	bne.n	8088306 <_Z11analogWritetm+0x4a>
        PinMode mode = HAL_Get_Pin_Mode(pin);
 80882ec:	4620      	mov	r0, r4
 80882ee:	f7fc fb87 	bl	8084a00 <HAL_Get_Pin_Mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
 80882f2:	2801      	cmp	r0, #1
 80882f4:	d001      	beq.n	80882fa <_Z11analogWritetm+0x3e>
 80882f6:	2804      	cmp	r0, #4
 80882f8:	d105      	bne.n	8088306 <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
 80882fa:	4629      	mov	r1, r5
 80882fc:	4620      	mov	r0, r4
}
 80882fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
 8088302:	f7fc bbb5 	b.w	8084a70 <hal_pwm_write_ext>
}
 8088306:	bd38      	pop	{r3, r4, r5, pc}

08088308 <_ZN19ApplicationWatchdog4loopEv>:
	wd.loop();
	os_thread_cleanup(nullptr);
}

void ApplicationWatchdog::loop()
{
 8088308:	b530      	push	{r4, r5, lr}
 808830a:	4604      	mov	r4, r0
	bool done = false;
	system_tick_t now;
	while (!done) {
		HAL_Delay_Milliseconds(timeout);
		now = current_time();
		done = (now-last_checkin)>=timeout;
 808830c:	4d1b      	ldr	r5, [pc, #108]	; (808837c <_ZN19ApplicationWatchdog4loopEv+0x74>)
{
 808830e:	b089      	sub	sp, #36	; 0x24
		HAL_Delay_Milliseconds(timeout);
 8088310:	6820      	ldr	r0, [r4, #0]
 8088312:	f7fc fbbd 	bl	8084a90 <HAL_Delay_Milliseconds>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8088316:	f7fc fbd3 	bl	8084ac0 <HAL_Timer_Get_Milli_Seconds>
		done = (now-last_checkin)>=timeout;
 808831a:	682a      	ldr	r2, [r5, #0]
 808831c:	6823      	ldr	r3, [r4, #0]
 808831e:	1a80      	subs	r0, r0, r2
	while (!done) {
 8088320:	4298      	cmp	r0, r3
 8088322:	d3f5      	bcc.n	8088310 <_ZN19ApplicationWatchdog4loopEv+0x8>
	}

	if (timeout>0 && timeout_fn) {
 8088324:	6823      	ldr	r3, [r4, #0]
 8088326:	b333      	cbz	r3, 8088376 <_ZN19ApplicationWatchdog4loopEv+0x6e>
 8088328:	68e3      	ldr	r3, [r4, #12]
 808832a:	b323      	cbz	r3, 8088376 <_ZN19ApplicationWatchdog4loopEv+0x6e>
		timeout_fn();
 808832c:	1d25      	adds	r5, r4, #4
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808832e:	4628      	mov	r0, r5
 8088330:	6923      	ldr	r3, [r4, #16]
 8088332:	4798      	blx	r3
    _Function_base() : _M_manager(nullptr) { }
 8088334:	2300      	movs	r3, #0
	std::swap(_M_functor, __x._M_functor);
 8088336:	4668      	mov	r0, sp
 8088338:	a904      	add	r1, sp, #16
    _Function_base() : _M_manager(nullptr) { }
 808833a:	9302      	str	r3, [sp, #8]
 808833c:	9306      	str	r3, [sp, #24]
	std::swap(_M_functor, __x._M_functor);
 808833e:	f7f9 f940 	bl	80815c2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8088342:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 8088344:	9a06      	ldr	r2, [sp, #24]
      __b = _GLIBCXX_MOVE(__tmp);
 8088346:	9306      	str	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 8088348:	9202      	str	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808834a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 808834c:	9a07      	ldr	r2, [sp, #28]
 808834e:	4629      	mov	r1, r5
 8088350:	a804      	add	r0, sp, #16
 8088352:	9203      	str	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8088354:	9307      	str	r3, [sp, #28]
 8088356:	f7f9 f934 	bl	80815c2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808835a:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 808835c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 808835e:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8088360:	9b07      	ldr	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 8088362:	9206      	str	r2, [sp, #24]
 8088364:	6922      	ldr	r2, [r4, #16]
    class function<_Res(_ArgTypes...)>
 8088366:	a804      	add	r0, sp, #16
      __b = _GLIBCXX_MOVE(__tmp);
 8088368:	6123      	str	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 808836a:	9207      	str	r2, [sp, #28]
 808836c:	f7f8 fa46 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
 8088370:	4668      	mov	r0, sp
 8088372:	f7f8 fa43 	bl	80807fc <_ZNSt14_Function_baseD1Ev>
		timeout_fn = std::function<void(void)>();
	}
}
 8088376:	b009      	add	sp, #36	; 0x24
 8088378:	bd30      	pop	{r4, r5, pc}
 808837a:	bf00      	nop
 808837c:	200009a8 	.word	0x200009a8

08088380 <_ZN19ApplicationWatchdog5startEPv>:
{
 8088380:	b508      	push	{r3, lr}
	wd.loop();
 8088382:	f7ff ffc1 	bl	8088308 <_ZN19ApplicationWatchdog4loopEv>
}
 8088386:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	os_thread_cleanup(nullptr);
 808838a:	2000      	movs	r0, #0
 808838c:	f7fc bbe0 	b.w	8084b50 <os_thread_cleanup>

08088390 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 8088390:	2300      	movs	r3, #0
 8088392:	b513      	push	{r0, r1, r4, lr}
 8088394:	4c07      	ldr	r4, [pc, #28]	; (80883b4 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 8088396:	461a      	mov	r2, r3
 8088398:	4619      	mov	r1, r3
 808839a:	4620      	mov	r0, r4
 808839c:	9300      	str	r3, [sp, #0]
 808839e:	f7ff f993 	bl	80876c8 <_ZN9IPAddressC1Ehhhh>
 80883a2:	4620      	mov	r0, r4
 80883a4:	4a04      	ldr	r2, [pc, #16]	; (80883b8 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80883a6:	4905      	ldr	r1, [pc, #20]	; (80883bc <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80883a8:	b002      	add	sp, #8
 80883aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80883ae:	f000 b879 	b.w	80884a4 <__aeabi_atexit>
 80883b2:	bf00      	nop
 80883b4:	200009ac 	.word	0x200009ac
 80883b8:	20000130 	.word	0x20000130
 80883bc:	08087641 	.word	0x08087641

080883c0 <_ZN12_GLOBAL__N_117defaultWireConfigEv>:

#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
 80883c0:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80883c2:	2314      	movs	r3, #20
 80883c4:	2520      	movs	r5, #32
		.size = sizeof(hal_i2c_config_t),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80883c6:	4e08      	ldr	r6, [pc, #32]	; (80883e8 <_ZN12_GLOBAL__N_117defaultWireConfigEv+0x28>)
hal_i2c_config_t defaultWireConfig() {
 80883c8:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80883ca:	6003      	str	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80883cc:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80883ce:	6085      	str	r5, [r0, #8]
 80883d0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80883d2:	4628      	mov	r0, r5
 80883d4:	f000 f86f 	bl	80884b6 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80883d8:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80883da:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80883dc:	4628      	mov	r0, r5
 80883de:	f000 f86a 	bl	80884b6 <_ZnajRKSt9nothrow_t>
	};
 80883e2:	60e0      	str	r0, [r4, #12]

	return config;
}
 80883e4:	4620      	mov	r0, r4
 80883e6:	bd70      	pop	{r4, r5, r6, pc}
 80883e8:	0808bd99 	.word	0x0808bd99

080883ec <_Z17acquireWireBufferv>:

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 80883ec:	b510      	push	{r4, lr}
 80883ee:	4604      	mov	r4, r0
	return defaultWireConfig();
 80883f0:	f7ff ffe6 	bl	80883c0 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
}
 80883f4:	4620      	mov	r0, r4
 80883f6:	bd10      	pop	{r4, pc}

080883f8 <_Z18acquireWire3Bufferv>:
 80883f8:	b510      	push	{r4, lr}
 80883fa:	4604      	mov	r4, r0
 80883fc:	f7ff ffe0 	bl	80883c0 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
 8088400:	4620      	mov	r0, r4
 8088402:	bd10      	pop	{r4, pc}

08088404 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 8088404:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 8088406:	4d0f      	ldr	r5, [pc, #60]	; (8088444 <_Z19__fetch_global_Wirev+0x40>)
{
 8088408:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 808840a:	7829      	ldrb	r1, [r5, #0]
 808840c:	f3bf 8f5b 	dmb	ish
 8088410:	f011 0401 	ands.w	r4, r1, #1
 8088414:	d113      	bne.n	808843e <_Z19__fetch_global_Wirev+0x3a>
 8088416:	4628      	mov	r0, r5
 8088418:	f7f7 fe60 	bl	80800dc <__cxa_guard_acquire>
 808841c:	b178      	cbz	r0, 808843e <_Z19__fetch_global_Wirev+0x3a>
 808841e:	a801      	add	r0, sp, #4
 8088420:	f7ff ffe4 	bl	80883ec <_Z17acquireWireBufferv>
 8088424:	4621      	mov	r1, r4
 8088426:	aa01      	add	r2, sp, #4
 8088428:	4807      	ldr	r0, [pc, #28]	; (8088448 <_Z19__fetch_global_Wirev+0x44>)
 808842a:	f7ff fbdd 	bl	8087be8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 808842e:	4628      	mov	r0, r5
 8088430:	f7f7 fe59 	bl	80800e6 <__cxa_guard_release>
 8088434:	4a05      	ldr	r2, [pc, #20]	; (808844c <_Z19__fetch_global_Wirev+0x48>)
 8088436:	4906      	ldr	r1, [pc, #24]	; (8088450 <_Z19__fetch_global_Wirev+0x4c>)
 8088438:	4803      	ldr	r0, [pc, #12]	; (8088448 <_Z19__fetch_global_Wirev+0x44>)
 808843a:	f000 f833 	bl	80884a4 <__aeabi_atexit>
	return wire;
}
 808843e:	4802      	ldr	r0, [pc, #8]	; (8088448 <_Z19__fetch_global_Wirev+0x44>)
 8088440:	b007      	add	sp, #28
 8088442:	bd30      	pop	{r4, r5, pc}
 8088444:	200009b4 	.word	0x200009b4
 8088448:	200009bc 	.word	0x200009bc
 808844c:	20000130 	.word	0x20000130
 8088450:	08087b91 	.word	0x08087b91

08088454 <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 8088454:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 8088456:	4c0f      	ldr	r4, [pc, #60]	; (8088494 <_Z20__fetch_global_Wire3v+0x40>)
{
 8088458:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 808845a:	7823      	ldrb	r3, [r4, #0]
 808845c:	f3bf 8f5b 	dmb	ish
 8088460:	07db      	lsls	r3, r3, #31
 8088462:	d413      	bmi.n	808848c <_Z20__fetch_global_Wire3v+0x38>
 8088464:	4620      	mov	r0, r4
 8088466:	f7f7 fe39 	bl	80800dc <__cxa_guard_acquire>
 808846a:	b178      	cbz	r0, 808848c <_Z20__fetch_global_Wire3v+0x38>
 808846c:	a801      	add	r0, sp, #4
 808846e:	f7ff ffc3 	bl	80883f8 <_Z18acquireWire3Bufferv>
 8088472:	2102      	movs	r1, #2
 8088474:	aa01      	add	r2, sp, #4
 8088476:	4808      	ldr	r0, [pc, #32]	; (8088498 <_Z20__fetch_global_Wire3v+0x44>)
 8088478:	f7ff fbb6 	bl	8087be8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 808847c:	4620      	mov	r0, r4
 808847e:	f7f7 fe32 	bl	80800e6 <__cxa_guard_release>
 8088482:	4a06      	ldr	r2, [pc, #24]	; (808849c <_Z20__fetch_global_Wire3v+0x48>)
 8088484:	4906      	ldr	r1, [pc, #24]	; (80884a0 <_Z20__fetch_global_Wire3v+0x4c>)
 8088486:	4804      	ldr	r0, [pc, #16]	; (8088498 <_Z20__fetch_global_Wire3v+0x44>)
 8088488:	f000 f80c 	bl	80884a4 <__aeabi_atexit>
	return wire;
}
 808848c:	4802      	ldr	r0, [pc, #8]	; (8088498 <_Z20__fetch_global_Wire3v+0x44>)
 808848e:	b006      	add	sp, #24
 8088490:	bd10      	pop	{r4, pc}
 8088492:	bf00      	nop
 8088494:	200009b8 	.word	0x200009b8
 8088498:	200009d0 	.word	0x200009d0
 808849c:	20000130 	.word	0x20000130
 80884a0:	08087b91 	.word	0x08087b91

080884a4 <__aeabi_atexit>:
 80884a4:	460b      	mov	r3, r1
 80884a6:	4601      	mov	r1, r0
 80884a8:	4618      	mov	r0, r3
 80884aa:	f002 bb95 	b.w	808abd8 <__cxa_atexit>

080884ae <_ZdlPvj>:
 80884ae:	f7f7 be08 	b.w	80800c2 <_ZdlPv>

080884b2 <_ZnwjRKSt9nothrow_t>:
 80884b2:	f7f7 be02 	b.w	80800ba <_Znwj>

080884b6 <_ZnajRKSt9nothrow_t>:
 80884b6:	f7f7 be02 	b.w	80800be <_Znaj>

080884ba <_ZSt25__throw_bad_function_callv>:
 80884ba:	b508      	push	{r3, lr}
 80884bc:	f7fc fe68 	bl	8085190 <abort>

080884c0 <log>:
 80884c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80884c2:	4604      	mov	r4, r0
 80884c4:	460d      	mov	r5, r1
 80884c6:	f000 f95f 	bl	8088788 <__ieee754_log>
 80884ca:	4b17      	ldr	r3, [pc, #92]	; (8088528 <log+0x68>)
 80884cc:	4606      	mov	r6, r0
 80884ce:	f993 3000 	ldrsb.w	r3, [r3]
 80884d2:	460f      	mov	r7, r1
 80884d4:	3301      	adds	r3, #1
 80884d6:	d01a      	beq.n	808850e <log+0x4e>
 80884d8:	4622      	mov	r2, r4
 80884da:	462b      	mov	r3, r5
 80884dc:	4620      	mov	r0, r4
 80884de:	4629      	mov	r1, r5
 80884e0:	f001 ff8e 	bl	808a400 <__aeabi_dcmpun>
 80884e4:	b998      	cbnz	r0, 808850e <log+0x4e>
 80884e6:	2200      	movs	r2, #0
 80884e8:	2300      	movs	r3, #0
 80884ea:	4620      	mov	r0, r4
 80884ec:	4629      	mov	r1, r5
 80884ee:	f001 ff7d 	bl	808a3ec <__aeabi_dcmpgt>
 80884f2:	b960      	cbnz	r0, 808850e <log+0x4e>
 80884f4:	2200      	movs	r2, #0
 80884f6:	2300      	movs	r3, #0
 80884f8:	4620      	mov	r0, r4
 80884fa:	4629      	mov	r1, r5
 80884fc:	f001 ff4e 	bl	808a39c <__aeabi_dcmpeq>
 8088500:	b140      	cbz	r0, 8088514 <log+0x54>
 8088502:	f7fc fe55 	bl	80851b0 <__errno>
 8088506:	2322      	movs	r3, #34	; 0x22
 8088508:	2600      	movs	r6, #0
 808850a:	4f08      	ldr	r7, [pc, #32]	; (808852c <log+0x6c>)
 808850c:	6003      	str	r3, [r0, #0]
 808850e:	4630      	mov	r0, r6
 8088510:	4639      	mov	r1, r7
 8088512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8088514:	f7fc fe4c 	bl	80851b0 <__errno>
 8088518:	2221      	movs	r2, #33	; 0x21
 808851a:	4603      	mov	r3, r0
 808851c:	4804      	ldr	r0, [pc, #16]	; (8088530 <log+0x70>)
 808851e:	601a      	str	r2, [r3, #0]
 8088520:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8088524:	f001 b9f4 	b.w	8089910 <nan>
 8088528:	200000c8 	.word	0x200000c8
 808852c:	fff00000 	.word	0xfff00000
 8088530:	0808bd9c 	.word	0x0808bd9c

08088534 <log10>:
 8088534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8088536:	4604      	mov	r4, r0
 8088538:	460d      	mov	r5, r1
 808853a:	f000 fb25 	bl	8088b88 <__ieee754_log10>
 808853e:	4b17      	ldr	r3, [pc, #92]	; (808859c <log10+0x68>)
 8088540:	4606      	mov	r6, r0
 8088542:	f993 3000 	ldrsb.w	r3, [r3]
 8088546:	460f      	mov	r7, r1
 8088548:	3301      	adds	r3, #1
 808854a:	d01a      	beq.n	8088582 <log10+0x4e>
 808854c:	4622      	mov	r2, r4
 808854e:	462b      	mov	r3, r5
 8088550:	4620      	mov	r0, r4
 8088552:	4629      	mov	r1, r5
 8088554:	f001 ff54 	bl	808a400 <__aeabi_dcmpun>
 8088558:	b998      	cbnz	r0, 8088582 <log10+0x4e>
 808855a:	2200      	movs	r2, #0
 808855c:	2300      	movs	r3, #0
 808855e:	4620      	mov	r0, r4
 8088560:	4629      	mov	r1, r5
 8088562:	f001 ff2f 	bl	808a3c4 <__aeabi_dcmple>
 8088566:	b160      	cbz	r0, 8088582 <log10+0x4e>
 8088568:	2200      	movs	r2, #0
 808856a:	2300      	movs	r3, #0
 808856c:	4620      	mov	r0, r4
 808856e:	4629      	mov	r1, r5
 8088570:	f001 ff14 	bl	808a39c <__aeabi_dcmpeq>
 8088574:	b140      	cbz	r0, 8088588 <log10+0x54>
 8088576:	f7fc fe1b 	bl	80851b0 <__errno>
 808857a:	2322      	movs	r3, #34	; 0x22
 808857c:	2600      	movs	r6, #0
 808857e:	4f08      	ldr	r7, [pc, #32]	; (80885a0 <log10+0x6c>)
 8088580:	6003      	str	r3, [r0, #0]
 8088582:	4630      	mov	r0, r6
 8088584:	4639      	mov	r1, r7
 8088586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8088588:	f7fc fe12 	bl	80851b0 <__errno>
 808858c:	2221      	movs	r2, #33	; 0x21
 808858e:	4603      	mov	r3, r0
 8088590:	4804      	ldr	r0, [pc, #16]	; (80885a4 <log10+0x70>)
 8088592:	601a      	str	r2, [r3, #0]
 8088594:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8088598:	f001 b9ba 	b.w	8089910 <nan>
 808859c:	200000c8 	.word	0x200000c8
 80885a0:	fff00000 	.word	0xfff00000
 80885a4:	0808bd9c 	.word	0x0808bd9c

080885a8 <pow>:
 80885a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80885ac:	461d      	mov	r5, r3
 80885ae:	4606      	mov	r6, r0
 80885b0:	460f      	mov	r7, r1
 80885b2:	4614      	mov	r4, r2
 80885b4:	f000 fb74 	bl	8088ca0 <__ieee754_pow>
 80885b8:	4b57      	ldr	r3, [pc, #348]	; (8088718 <pow+0x170>)
 80885ba:	4680      	mov	r8, r0
 80885bc:	f993 3000 	ldrsb.w	r3, [r3]
 80885c0:	4689      	mov	r9, r1
 80885c2:	3301      	adds	r3, #1
 80885c4:	d02a      	beq.n	808861c <pow+0x74>
 80885c6:	4622      	mov	r2, r4
 80885c8:	462b      	mov	r3, r5
 80885ca:	4620      	mov	r0, r4
 80885cc:	4629      	mov	r1, r5
 80885ce:	f001 ff17 	bl	808a400 <__aeabi_dcmpun>
 80885d2:	bb18      	cbnz	r0, 808861c <pow+0x74>
 80885d4:	4632      	mov	r2, r6
 80885d6:	463b      	mov	r3, r7
 80885d8:	4630      	mov	r0, r6
 80885da:	4639      	mov	r1, r7
 80885dc:	f001 ff10 	bl	808a400 <__aeabi_dcmpun>
 80885e0:	2800      	cmp	r0, #0
 80885e2:	d141      	bne.n	8088668 <pow+0xc0>
 80885e4:	2200      	movs	r2, #0
 80885e6:	2300      	movs	r3, #0
 80885e8:	4630      	mov	r0, r6
 80885ea:	4639      	mov	r1, r7
 80885ec:	f001 fed6 	bl	808a39c <__aeabi_dcmpeq>
 80885f0:	b1c0      	cbz	r0, 8088624 <pow+0x7c>
 80885f2:	2200      	movs	r2, #0
 80885f4:	2300      	movs	r3, #0
 80885f6:	4620      	mov	r0, r4
 80885f8:	4629      	mov	r1, r5
 80885fa:	f001 fecf 	bl	808a39c <__aeabi_dcmpeq>
 80885fe:	2800      	cmp	r0, #0
 8088600:	d13a      	bne.n	8088678 <pow+0xd0>
 8088602:	4620      	mov	r0, r4
 8088604:	4629      	mov	r1, r5
 8088606:	f001 f97d 	bl	8089904 <finite>
 808860a:	b138      	cbz	r0, 808861c <pow+0x74>
 808860c:	4620      	mov	r0, r4
 808860e:	4629      	mov	r1, r5
 8088610:	2200      	movs	r2, #0
 8088612:	2300      	movs	r3, #0
 8088614:	f001 fecc 	bl	808a3b0 <__aeabi_dcmplt>
 8088618:	2800      	cmp	r0, #0
 808861a:	d159      	bne.n	80886d0 <pow+0x128>
 808861c:	4640      	mov	r0, r8
 808861e:	4649      	mov	r1, r9
 8088620:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8088624:	4640      	mov	r0, r8
 8088626:	4649      	mov	r1, r9
 8088628:	f001 f96c 	bl	8089904 <finite>
 808862c:	b360      	cbz	r0, 8088688 <pow+0xe0>
 808862e:	2200      	movs	r2, #0
 8088630:	2300      	movs	r3, #0
 8088632:	4640      	mov	r0, r8
 8088634:	4649      	mov	r1, r9
 8088636:	f001 feb1 	bl	808a39c <__aeabi_dcmpeq>
 808863a:	2800      	cmp	r0, #0
 808863c:	d0ee      	beq.n	808861c <pow+0x74>
 808863e:	4630      	mov	r0, r6
 8088640:	4639      	mov	r1, r7
 8088642:	f001 f95f 	bl	8089904 <finite>
 8088646:	2800      	cmp	r0, #0
 8088648:	d0e8      	beq.n	808861c <pow+0x74>
 808864a:	4620      	mov	r0, r4
 808864c:	4629      	mov	r1, r5
 808864e:	f001 f959 	bl	8089904 <finite>
 8088652:	2800      	cmp	r0, #0
 8088654:	d0e2      	beq.n	808861c <pow+0x74>
 8088656:	f7fc fdab 	bl	80851b0 <__errno>
 808865a:	2322      	movs	r3, #34	; 0x22
 808865c:	f04f 0800 	mov.w	r8, #0
 8088660:	f04f 0900 	mov.w	r9, #0
 8088664:	6003      	str	r3, [r0, #0]
 8088666:	e7d9      	b.n	808861c <pow+0x74>
 8088668:	4620      	mov	r0, r4
 808866a:	4629      	mov	r1, r5
 808866c:	2200      	movs	r2, #0
 808866e:	2300      	movs	r3, #0
 8088670:	f001 fe94 	bl	808a39c <__aeabi_dcmpeq>
 8088674:	2800      	cmp	r0, #0
 8088676:	d0d1      	beq.n	808861c <pow+0x74>
 8088678:	f04f 0800 	mov.w	r8, #0
 808867c:	f8df 909c 	ldr.w	r9, [pc, #156]	; 808871c <pow+0x174>
 8088680:	4640      	mov	r0, r8
 8088682:	4649      	mov	r1, r9
 8088684:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8088688:	4630      	mov	r0, r6
 808868a:	4639      	mov	r1, r7
 808868c:	f001 f93a 	bl	8089904 <finite>
 8088690:	2800      	cmp	r0, #0
 8088692:	d0cc      	beq.n	808862e <pow+0x86>
 8088694:	4620      	mov	r0, r4
 8088696:	4629      	mov	r1, r5
 8088698:	f001 f934 	bl	8089904 <finite>
 808869c:	2800      	cmp	r0, #0
 808869e:	d0c6      	beq.n	808862e <pow+0x86>
 80886a0:	4642      	mov	r2, r8
 80886a2:	464b      	mov	r3, r9
 80886a4:	4640      	mov	r0, r8
 80886a6:	4649      	mov	r1, r9
 80886a8:	f001 feaa 	bl	808a400 <__aeabi_dcmpun>
 80886ac:	bb30      	cbnz	r0, 80886fc <pow+0x154>
 80886ae:	f7fc fd7f 	bl	80851b0 <__errno>
 80886b2:	2222      	movs	r2, #34	; 0x22
 80886b4:	4603      	mov	r3, r0
 80886b6:	4639      	mov	r1, r7
 80886b8:	601a      	str	r2, [r3, #0]
 80886ba:	4630      	mov	r0, r6
 80886bc:	2200      	movs	r2, #0
 80886be:	2300      	movs	r3, #0
 80886c0:	f001 fe76 	bl	808a3b0 <__aeabi_dcmplt>
 80886c4:	f04f 0800 	mov.w	r8, #0
 80886c8:	b958      	cbnz	r0, 80886e2 <pow+0x13a>
 80886ca:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8088720 <pow+0x178>
 80886ce:	e7a5      	b.n	808861c <pow+0x74>
 80886d0:	f7fc fd6e 	bl	80851b0 <__errno>
 80886d4:	2321      	movs	r3, #33	; 0x21
 80886d6:	f04f 0800 	mov.w	r8, #0
 80886da:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8088724 <pow+0x17c>
 80886de:	6003      	str	r3, [r0, #0]
 80886e0:	e79c      	b.n	808861c <pow+0x74>
 80886e2:	4620      	mov	r0, r4
 80886e4:	4629      	mov	r1, r5
 80886e6:	f001 f919 	bl	808991c <rint>
 80886ea:	4622      	mov	r2, r4
 80886ec:	462b      	mov	r3, r5
 80886ee:	f001 fe55 	bl	808a39c <__aeabi_dcmpeq>
 80886f2:	2800      	cmp	r0, #0
 80886f4:	d1e9      	bne.n	80886ca <pow+0x122>
 80886f6:	f8df 902c 	ldr.w	r9, [pc, #44]	; 8088724 <pow+0x17c>
 80886fa:	e78f      	b.n	808861c <pow+0x74>
 80886fc:	f7fc fd58 	bl	80851b0 <__errno>
 8088700:	2200      	movs	r2, #0
 8088702:	2300      	movs	r3, #0
 8088704:	2121      	movs	r1, #33	; 0x21
 8088706:	6001      	str	r1, [r0, #0]
 8088708:	4610      	mov	r0, r2
 808870a:	4619      	mov	r1, r3
 808870c:	f001 fd08 	bl	808a120 <__aeabi_ddiv>
 8088710:	4680      	mov	r8, r0
 8088712:	4689      	mov	r9, r1
 8088714:	e782      	b.n	808861c <pow+0x74>
 8088716:	bf00      	nop
 8088718:	200000c8 	.word	0x200000c8
 808871c:	3ff00000 	.word	0x3ff00000
 8088720:	7ff00000 	.word	0x7ff00000
 8088724:	fff00000 	.word	0xfff00000

08088728 <sqrt>:
 8088728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808872a:	4604      	mov	r4, r0
 808872c:	460d      	mov	r5, r1
 808872e:	f001 f81f 	bl	8089770 <__ieee754_sqrt>
 8088732:	4b13      	ldr	r3, [pc, #76]	; (8088780 <sqrt+0x58>)
 8088734:	4606      	mov	r6, r0
 8088736:	f993 3000 	ldrsb.w	r3, [r3]
 808873a:	460f      	mov	r7, r1
 808873c:	3301      	adds	r3, #1
 808873e:	d00d      	beq.n	808875c <sqrt+0x34>
 8088740:	4622      	mov	r2, r4
 8088742:	462b      	mov	r3, r5
 8088744:	4620      	mov	r0, r4
 8088746:	4629      	mov	r1, r5
 8088748:	f001 fe5a 	bl	808a400 <__aeabi_dcmpun>
 808874c:	b930      	cbnz	r0, 808875c <sqrt+0x34>
 808874e:	4620      	mov	r0, r4
 8088750:	4629      	mov	r1, r5
 8088752:	2200      	movs	r2, #0
 8088754:	2300      	movs	r3, #0
 8088756:	f001 fe2b 	bl	808a3b0 <__aeabi_dcmplt>
 808875a:	b910      	cbnz	r0, 8088762 <sqrt+0x3a>
 808875c:	4630      	mov	r0, r6
 808875e:	4639      	mov	r1, r7
 8088760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8088762:	f7fc fd25 	bl	80851b0 <__errno>
 8088766:	2200      	movs	r2, #0
 8088768:	2300      	movs	r3, #0
 808876a:	2121      	movs	r1, #33	; 0x21
 808876c:	6001      	str	r1, [r0, #0]
 808876e:	4610      	mov	r0, r2
 8088770:	4619      	mov	r1, r3
 8088772:	f001 fcd5 	bl	808a120 <__aeabi_ddiv>
 8088776:	4606      	mov	r6, r0
 8088778:	460f      	mov	r7, r1
 808877a:	4630      	mov	r0, r6
 808877c:	4639      	mov	r1, r7
 808877e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8088780:	200000c8 	.word	0x200000c8
 8088784:	00000000 	.word	0x00000000

08088788 <__ieee754_log>:
 8088788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808878c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8088790:	4602      	mov	r2, r0
 8088792:	460b      	mov	r3, r1
 8088794:	460f      	mov	r7, r1
 8088796:	b087      	sub	sp, #28
 8088798:	da59      	bge.n	808884e <__ieee754_log+0xc6>
 808879a:	4604      	mov	r4, r0
 808879c:	f021 4500 	bic.w	r5, r1, #2147483648	; 0x80000000
 80887a0:	432c      	orrs	r4, r5
 80887a2:	f000 80f8 	beq.w	8088996 <__ieee754_log+0x20e>
 80887a6:	2900      	cmp	r1, #0
 80887a8:	f2c0 8132 	blt.w	8088a10 <__ieee754_log+0x288>
 80887ac:	2200      	movs	r2, #0
 80887ae:	4bd6      	ldr	r3, [pc, #856]	; (8088b08 <__ieee754_log+0x380>)
 80887b0:	f001 fb8c 	bl	8089ecc <__aeabi_dmul>
 80887b4:	460f      	mov	r7, r1
 80887b6:	460b      	mov	r3, r1
 80887b8:	49d4      	ldr	r1, [pc, #848]	; (8088b0c <__ieee754_log+0x384>)
 80887ba:	f06f 0435 	mvn.w	r4, #53	; 0x35
 80887be:	428f      	cmp	r7, r1
 80887c0:	4602      	mov	r2, r0
 80887c2:	dc48      	bgt.n	8088856 <__ieee754_log+0xce>
 80887c4:	153e      	asrs	r6, r7, #20
 80887c6:	f3c7 0713 	ubfx	r7, r7, #0, #20
 80887ca:	f507 2115 	add.w	r1, r7, #610304	; 0x95000
 80887ce:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 80887d2:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 80887d6:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
 80887da:	4426      	add	r6, r4
 80887dc:	eb06 5611 	add.w	r6, r6, r1, lsr #20
 80887e0:	f081 517f 	eor.w	r1, r1, #1069547520	; 0x3fc00000
 80887e4:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 80887e8:	ea41 0307 	orr.w	r3, r1, r7
 80887ec:	4610      	mov	r0, r2
 80887ee:	4619      	mov	r1, r3
 80887f0:	2200      	movs	r2, #0
 80887f2:	4bc7      	ldr	r3, [pc, #796]	; (8088b10 <__ieee754_log+0x388>)
 80887f4:	f001 f9b2 	bl	8089b5c <__aeabi_dsub>
 80887f8:	1cbb      	adds	r3, r7, #2
 80887fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80887fe:	2b02      	cmp	r3, #2
 8088800:	4682      	mov	sl, r0
 8088802:	468b      	mov	fp, r1
 8088804:	dc2e      	bgt.n	8088864 <__ieee754_log+0xdc>
 8088806:	2200      	movs	r2, #0
 8088808:	2300      	movs	r3, #0
 808880a:	f001 fdc7 	bl	808a39c <__aeabi_dcmpeq>
 808880e:	2800      	cmp	r0, #0
 8088810:	f000 80ca 	beq.w	80889a8 <__ieee754_log+0x220>
 8088814:	2e00      	cmp	r6, #0
 8088816:	f000 814b 	beq.w	8088ab0 <__ieee754_log+0x328>
 808881a:	4630      	mov	r0, r6
 808881c:	f001 faec 	bl	8089df8 <__aeabi_i2d>
 8088820:	a3a5      	add	r3, pc, #660	; (adr r3, 8088ab8 <__ieee754_log+0x330>)
 8088822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8088826:	4606      	mov	r6, r0
 8088828:	460f      	mov	r7, r1
 808882a:	f001 fb4f 	bl	8089ecc <__aeabi_dmul>
 808882e:	a3a4      	add	r3, pc, #656	; (adr r3, 8088ac0 <__ieee754_log+0x338>)
 8088830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8088834:	4604      	mov	r4, r0
 8088836:	460d      	mov	r5, r1
 8088838:	4630      	mov	r0, r6
 808883a:	4639      	mov	r1, r7
 808883c:	f001 fb46 	bl	8089ecc <__aeabi_dmul>
 8088840:	4602      	mov	r2, r0
 8088842:	460b      	mov	r3, r1
 8088844:	4620      	mov	r0, r4
 8088846:	4629      	mov	r1, r5
 8088848:	f001 f98a 	bl	8089b60 <__adddf3>
 808884c:	e007      	b.n	808885e <__ieee754_log+0xd6>
 808884e:	49af      	ldr	r1, [pc, #700]	; (8088b0c <__ieee754_log+0x384>)
 8088850:	2400      	movs	r4, #0
 8088852:	428f      	cmp	r7, r1
 8088854:	ddb6      	ble.n	80887c4 <__ieee754_log+0x3c>
 8088856:	4610      	mov	r0, r2
 8088858:	4619      	mov	r1, r3
 808885a:	f001 f981 	bl	8089b60 <__adddf3>
 808885e:	b007      	add	sp, #28
 8088860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8088864:	f5a7 23c2 	sub.w	r3, r7, #397312	; 0x61000
 8088868:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 808886c:	2200      	movs	r2, #0
 808886e:	9301      	str	r3, [sp, #4]
 8088870:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8088874:	f001 f974 	bl	8089b60 <__adddf3>
 8088878:	460b      	mov	r3, r1
 808887a:	4602      	mov	r2, r0
 808887c:	4659      	mov	r1, fp
 808887e:	4650      	mov	r0, sl
 8088880:	f001 fc4e 	bl	808a120 <__aeabi_ddiv>
 8088884:	4602      	mov	r2, r0
 8088886:	4630      	mov	r0, r6
 8088888:	4614      	mov	r4, r2
 808888a:	460d      	mov	r5, r1
 808888c:	f001 fab4 	bl	8089df8 <__aeabi_i2d>
 8088890:	4622      	mov	r2, r4
 8088892:	462b      	mov	r3, r5
 8088894:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8088898:	4620      	mov	r0, r4
 808889a:	4629      	mov	r1, r5
 808889c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80888a0:	f001 fb14 	bl	8089ecc <__aeabi_dmul>
 80888a4:	4602      	mov	r2, r0
 80888a6:	460b      	mov	r3, r1
 80888a8:	4680      	mov	r8, r0
 80888aa:	4689      	mov	r9, r1
 80888ac:	f001 fb0e 	bl	8089ecc <__aeabi_dmul>
 80888b0:	a385      	add	r3, pc, #532	; (adr r3, 8088ac8 <__ieee754_log+0x340>)
 80888b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80888b6:	4604      	mov	r4, r0
 80888b8:	460d      	mov	r5, r1
 80888ba:	f001 fb07 	bl	8089ecc <__aeabi_dmul>
 80888be:	a384      	add	r3, pc, #528	; (adr r3, 8088ad0 <__ieee754_log+0x348>)
 80888c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80888c4:	f001 f94c 	bl	8089b60 <__adddf3>
 80888c8:	4622      	mov	r2, r4
 80888ca:	462b      	mov	r3, r5
 80888cc:	f001 fafe 	bl	8089ecc <__aeabi_dmul>
 80888d0:	a381      	add	r3, pc, #516	; (adr r3, 8088ad8 <__ieee754_log+0x350>)
 80888d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80888d6:	f001 f943 	bl	8089b60 <__adddf3>
 80888da:	4622      	mov	r2, r4
 80888dc:	462b      	mov	r3, r5
 80888de:	f001 faf5 	bl	8089ecc <__aeabi_dmul>
 80888e2:	a37f      	add	r3, pc, #508	; (adr r3, 8088ae0 <__ieee754_log+0x358>)
 80888e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80888e8:	f001 f93a 	bl	8089b60 <__adddf3>
 80888ec:	4642      	mov	r2, r8
 80888ee:	464b      	mov	r3, r9
 80888f0:	f001 faec 	bl	8089ecc <__aeabi_dmul>
 80888f4:	a37c      	add	r3, pc, #496	; (adr r3, 8088ae8 <__ieee754_log+0x360>)
 80888f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80888fa:	4680      	mov	r8, r0
 80888fc:	4689      	mov	r9, r1
 80888fe:	4620      	mov	r0, r4
 8088900:	4629      	mov	r1, r5
 8088902:	f001 fae3 	bl	8089ecc <__aeabi_dmul>
 8088906:	a37a      	add	r3, pc, #488	; (adr r3, 8088af0 <__ieee754_log+0x368>)
 8088908:	e9d3 2300 	ldrd	r2, r3, [r3]
 808890c:	f001 f928 	bl	8089b60 <__adddf3>
 8088910:	4622      	mov	r2, r4
 8088912:	462b      	mov	r3, r5
 8088914:	f001 fada 	bl	8089ecc <__aeabi_dmul>
 8088918:	a377      	add	r3, pc, #476	; (adr r3, 8088af8 <__ieee754_log+0x370>)
 808891a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808891e:	f001 f91f 	bl	8089b60 <__adddf3>
 8088922:	4622      	mov	r2, r4
 8088924:	462b      	mov	r3, r5
 8088926:	f001 fad1 	bl	8089ecc <__aeabi_dmul>
 808892a:	460b      	mov	r3, r1
 808892c:	4602      	mov	r2, r0
 808892e:	4649      	mov	r1, r9
 8088930:	4640      	mov	r0, r8
 8088932:	f001 f915 	bl	8089b60 <__adddf3>
 8088936:	f5c7 27d7 	rsb	r7, r7, #440320	; 0x6b800
 808893a:	9b01      	ldr	r3, [sp, #4]
 808893c:	3751      	adds	r7, #81	; 0x51
 808893e:	431f      	orrs	r7, r3
 8088940:	2f00      	cmp	r7, #0
 8088942:	4680      	mov	r8, r0
 8088944:	4689      	mov	r9, r1
 8088946:	dd55      	ble.n	80889f4 <__ieee754_log+0x26c>
 8088948:	2200      	movs	r2, #0
 808894a:	4b72      	ldr	r3, [pc, #456]	; (8088b14 <__ieee754_log+0x38c>)
 808894c:	4650      	mov	r0, sl
 808894e:	4659      	mov	r1, fp
 8088950:	f001 fabc 	bl	8089ecc <__aeabi_dmul>
 8088954:	4652      	mov	r2, sl
 8088956:	465b      	mov	r3, fp
 8088958:	f001 fab8 	bl	8089ecc <__aeabi_dmul>
 808895c:	4604      	mov	r4, r0
 808895e:	460d      	mov	r5, r1
 8088960:	2e00      	cmp	r6, #0
 8088962:	d15c      	bne.n	8088a1e <__ieee754_log+0x296>
 8088964:	4622      	mov	r2, r4
 8088966:	462b      	mov	r3, r5
 8088968:	4640      	mov	r0, r8
 808896a:	4649      	mov	r1, r9
 808896c:	f001 f8f8 	bl	8089b60 <__adddf3>
 8088970:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8088974:	f001 faaa 	bl	8089ecc <__aeabi_dmul>
 8088978:	4602      	mov	r2, r0
 808897a:	460b      	mov	r3, r1
 808897c:	4620      	mov	r0, r4
 808897e:	4629      	mov	r1, r5
 8088980:	f001 f8ec 	bl	8089b5c <__aeabi_dsub>
 8088984:	4602      	mov	r2, r0
 8088986:	460b      	mov	r3, r1
 8088988:	4650      	mov	r0, sl
 808898a:	4659      	mov	r1, fp
 808898c:	f001 f8e6 	bl	8089b5c <__aeabi_dsub>
 8088990:	b007      	add	sp, #28
 8088992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8088996:	2200      	movs	r2, #0
 8088998:	2300      	movs	r3, #0
 808899a:	2000      	movs	r0, #0
 808899c:	495e      	ldr	r1, [pc, #376]	; (8088b18 <__ieee754_log+0x390>)
 808899e:	f001 fbbf 	bl	808a120 <__aeabi_ddiv>
 80889a2:	b007      	add	sp, #28
 80889a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80889a8:	a355      	add	r3, pc, #340	; (adr r3, 8088b00 <__ieee754_log+0x378>)
 80889aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80889ae:	4650      	mov	r0, sl
 80889b0:	4659      	mov	r1, fp
 80889b2:	f001 fa8b 	bl	8089ecc <__aeabi_dmul>
 80889b6:	4602      	mov	r2, r0
 80889b8:	460b      	mov	r3, r1
 80889ba:	2000      	movs	r0, #0
 80889bc:	4955      	ldr	r1, [pc, #340]	; (8088b14 <__ieee754_log+0x38c>)
 80889be:	f001 f8cd 	bl	8089b5c <__aeabi_dsub>
 80889c2:	4652      	mov	r2, sl
 80889c4:	4604      	mov	r4, r0
 80889c6:	460d      	mov	r5, r1
 80889c8:	465b      	mov	r3, fp
 80889ca:	4650      	mov	r0, sl
 80889cc:	4659      	mov	r1, fp
 80889ce:	f001 fa7d 	bl	8089ecc <__aeabi_dmul>
 80889d2:	4602      	mov	r2, r0
 80889d4:	460b      	mov	r3, r1
 80889d6:	4620      	mov	r0, r4
 80889d8:	4629      	mov	r1, r5
 80889da:	f001 fa77 	bl	8089ecc <__aeabi_dmul>
 80889de:	4604      	mov	r4, r0
 80889e0:	460d      	mov	r5, r1
 80889e2:	2e00      	cmp	r6, #0
 80889e4:	d150      	bne.n	8088a88 <__ieee754_log+0x300>
 80889e6:	4602      	mov	r2, r0
 80889e8:	460b      	mov	r3, r1
 80889ea:	4650      	mov	r0, sl
 80889ec:	4659      	mov	r1, fp
 80889ee:	f001 f8b5 	bl	8089b5c <__aeabi_dsub>
 80889f2:	e734      	b.n	808885e <__ieee754_log+0xd6>
 80889f4:	2e00      	cmp	r6, #0
 80889f6:	f040 8091 	bne.w	8088b1c <__ieee754_log+0x394>
 80889fa:	4602      	mov	r2, r0
 80889fc:	460b      	mov	r3, r1
 80889fe:	4650      	mov	r0, sl
 8088a00:	4659      	mov	r1, fp
 8088a02:	f001 f8ab 	bl	8089b5c <__aeabi_dsub>
 8088a06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8088a0a:	f001 fa5f 	bl	8089ecc <__aeabi_dmul>
 8088a0e:	e7b9      	b.n	8088984 <__ieee754_log+0x1fc>
 8088a10:	f001 f8a4 	bl	8089b5c <__aeabi_dsub>
 8088a14:	2200      	movs	r2, #0
 8088a16:	2300      	movs	r3, #0
 8088a18:	f001 fb82 	bl	808a120 <__aeabi_ddiv>
 8088a1c:	e71f      	b.n	808885e <__ieee754_log+0xd6>
 8088a1e:	a326      	add	r3, pc, #152	; (adr r3, 8088ab8 <__ieee754_log+0x330>)
 8088a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8088a24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8088a28:	f001 fa50 	bl	8089ecc <__aeabi_dmul>
 8088a2c:	4622      	mov	r2, r4
 8088a2e:	462b      	mov	r3, r5
 8088a30:	4606      	mov	r6, r0
 8088a32:	460f      	mov	r7, r1
 8088a34:	4640      	mov	r0, r8
 8088a36:	4649      	mov	r1, r9
 8088a38:	f001 f892 	bl	8089b60 <__adddf3>
 8088a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8088a40:	f001 fa44 	bl	8089ecc <__aeabi_dmul>
 8088a44:	a31e      	add	r3, pc, #120	; (adr r3, 8088ac0 <__ieee754_log+0x338>)
 8088a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8088a4a:	4680      	mov	r8, r0
 8088a4c:	4689      	mov	r9, r1
 8088a4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8088a52:	f001 fa3b 	bl	8089ecc <__aeabi_dmul>
 8088a56:	4602      	mov	r2, r0
 8088a58:	460b      	mov	r3, r1
 8088a5a:	4640      	mov	r0, r8
 8088a5c:	4649      	mov	r1, r9
 8088a5e:	f001 f87f 	bl	8089b60 <__adddf3>
 8088a62:	4602      	mov	r2, r0
 8088a64:	460b      	mov	r3, r1
 8088a66:	4620      	mov	r0, r4
 8088a68:	4629      	mov	r1, r5
 8088a6a:	f001 f877 	bl	8089b5c <__aeabi_dsub>
 8088a6e:	4652      	mov	r2, sl
 8088a70:	465b      	mov	r3, fp
 8088a72:	f001 f873 	bl	8089b5c <__aeabi_dsub>
 8088a76:	4602      	mov	r2, r0
 8088a78:	460b      	mov	r3, r1
 8088a7a:	4630      	mov	r0, r6
 8088a7c:	4639      	mov	r1, r7
 8088a7e:	f001 f86d 	bl	8089b5c <__aeabi_dsub>
 8088a82:	b007      	add	sp, #28
 8088a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8088a88:	4630      	mov	r0, r6
 8088a8a:	f001 f9b5 	bl	8089df8 <__aeabi_i2d>
 8088a8e:	a30a      	add	r3, pc, #40	; (adr r3, 8088ab8 <__ieee754_log+0x330>)
 8088a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8088a94:	4680      	mov	r8, r0
 8088a96:	4689      	mov	r9, r1
 8088a98:	f001 fa18 	bl	8089ecc <__aeabi_dmul>
 8088a9c:	a308      	add	r3, pc, #32	; (adr r3, 8088ac0 <__ieee754_log+0x338>)
 8088a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8088aa2:	4606      	mov	r6, r0
 8088aa4:	460f      	mov	r7, r1
 8088aa6:	4640      	mov	r0, r8
 8088aa8:	4649      	mov	r1, r9
 8088aaa:	f001 fa0f 	bl	8089ecc <__aeabi_dmul>
 8088aae:	e7d8      	b.n	8088a62 <__ieee754_log+0x2da>
 8088ab0:	2000      	movs	r0, #0
 8088ab2:	2100      	movs	r1, #0
 8088ab4:	e6d3      	b.n	808885e <__ieee754_log+0xd6>
 8088ab6:	bf00      	nop
 8088ab8:	fee00000 	.word	0xfee00000
 8088abc:	3fe62e42 	.word	0x3fe62e42
 8088ac0:	35793c76 	.word	0x35793c76
 8088ac4:	3dea39ef 	.word	0x3dea39ef
 8088ac8:	df3e5244 	.word	0xdf3e5244
 8088acc:	3fc2f112 	.word	0x3fc2f112
 8088ad0:	96cb03de 	.word	0x96cb03de
 8088ad4:	3fc74664 	.word	0x3fc74664
 8088ad8:	94229359 	.word	0x94229359
 8088adc:	3fd24924 	.word	0x3fd24924
 8088ae0:	55555593 	.word	0x55555593
 8088ae4:	3fe55555 	.word	0x3fe55555
 8088ae8:	d078c69f 	.word	0xd078c69f
 8088aec:	3fc39a09 	.word	0x3fc39a09
 8088af0:	1d8e78af 	.word	0x1d8e78af
 8088af4:	3fcc71c5 	.word	0x3fcc71c5
 8088af8:	9997fa04 	.word	0x9997fa04
 8088afc:	3fd99999 	.word	0x3fd99999
 8088b00:	55555555 	.word	0x55555555
 8088b04:	3fd55555 	.word	0x3fd55555
 8088b08:	43500000 	.word	0x43500000
 8088b0c:	7fefffff 	.word	0x7fefffff
 8088b10:	3ff00000 	.word	0x3ff00000
 8088b14:	3fe00000 	.word	0x3fe00000
 8088b18:	c3500000 	.word	0xc3500000
 8088b1c:	a316      	add	r3, pc, #88	; (adr r3, 8088b78 <__ieee754_log+0x3f0>)
 8088b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8088b22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8088b26:	f001 f9d1 	bl	8089ecc <__aeabi_dmul>
 8088b2a:	4642      	mov	r2, r8
 8088b2c:	464b      	mov	r3, r9
 8088b2e:	4604      	mov	r4, r0
 8088b30:	460d      	mov	r5, r1
 8088b32:	4650      	mov	r0, sl
 8088b34:	4659      	mov	r1, fp
 8088b36:	f001 f811 	bl	8089b5c <__aeabi_dsub>
 8088b3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8088b3e:	f001 f9c5 	bl	8089ecc <__aeabi_dmul>
 8088b42:	a30f      	add	r3, pc, #60	; (adr r3, 8088b80 <__ieee754_log+0x3f8>)
 8088b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8088b48:	4606      	mov	r6, r0
 8088b4a:	460f      	mov	r7, r1
 8088b4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8088b50:	f001 f9bc 	bl	8089ecc <__aeabi_dmul>
 8088b54:	4602      	mov	r2, r0
 8088b56:	460b      	mov	r3, r1
 8088b58:	4630      	mov	r0, r6
 8088b5a:	4639      	mov	r1, r7
 8088b5c:	f000 fffe 	bl	8089b5c <__aeabi_dsub>
 8088b60:	4652      	mov	r2, sl
 8088b62:	465b      	mov	r3, fp
 8088b64:	f000 fffa 	bl	8089b5c <__aeabi_dsub>
 8088b68:	4602      	mov	r2, r0
 8088b6a:	460b      	mov	r3, r1
 8088b6c:	4620      	mov	r0, r4
 8088b6e:	4629      	mov	r1, r5
 8088b70:	f000 fff4 	bl	8089b5c <__aeabi_dsub>
 8088b74:	e673      	b.n	808885e <__ieee754_log+0xd6>
 8088b76:	bf00      	nop
 8088b78:	fee00000 	.word	0xfee00000
 8088b7c:	3fe62e42 	.word	0x3fe62e42
 8088b80:	35793c76 	.word	0x35793c76
 8088b84:	3dea39ef 	.word	0x3dea39ef

08088b88 <__ieee754_log10>:
 8088b88:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8088b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8088b90:	4604      	mov	r4, r0
 8088b92:	460d      	mov	r5, r1
 8088b94:	460b      	mov	r3, r1
 8088b96:	da1a      	bge.n	8088bce <__ieee754_log10+0x46>
 8088b98:	4602      	mov	r2, r0
 8088b9a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8088b9e:	4332      	orrs	r2, r6
 8088ba0:	d058      	beq.n	8088c54 <__ieee754_log10+0xcc>
 8088ba2:	2900      	cmp	r1, #0
 8088ba4:	db5e      	blt.n	8088c64 <__ieee754_log10+0xdc>
 8088ba6:	2200      	movs	r2, #0
 8088ba8:	4b39      	ldr	r3, [pc, #228]	; (8088c90 <__ieee754_log10+0x108>)
 8088baa:	f001 f98f 	bl	8089ecc <__aeabi_dmul>
 8088bae:	460d      	mov	r5, r1
 8088bb0:	462b      	mov	r3, r5
 8088bb2:	4a38      	ldr	r2, [pc, #224]	; (8088c94 <__ieee754_log10+0x10c>)
 8088bb4:	4604      	mov	r4, r0
 8088bb6:	4293      	cmp	r3, r2
 8088bb8:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8088bbc:	dd0b      	ble.n	8088bd6 <__ieee754_log10+0x4e>
 8088bbe:	4622      	mov	r2, r4
 8088bc0:	462b      	mov	r3, r5
 8088bc2:	4620      	mov	r0, r4
 8088bc4:	4629      	mov	r1, r5
 8088bc6:	f000 ffcb 	bl	8089b60 <__adddf3>
 8088bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8088bce:	4a31      	ldr	r2, [pc, #196]	; (8088c94 <__ieee754_log10+0x10c>)
 8088bd0:	2100      	movs	r1, #0
 8088bd2:	4293      	cmp	r3, r2
 8088bd4:	dcf3      	bgt.n	8088bbe <__ieee754_log10+0x36>
 8088bd6:	1518      	asrs	r0, r3, #20
 8088bd8:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8088bdc:	4408      	add	r0, r1
 8088bde:	0fc7      	lsrs	r7, r0, #31
 8088be0:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8088be4:	f3c3 0613 	ubfx	r6, r3, #0, #20
 8088be8:	f001 f906 	bl	8089df8 <__aeabi_i2d>
 8088bec:	f5c7 737f 	rsb	r3, r7, #1020	; 0x3fc
 8088bf0:	3303      	adds	r3, #3
 8088bf2:	ea46 5503 	orr.w	r5, r6, r3, lsl #20
 8088bf6:	460f      	mov	r7, r1
 8088bf8:	4606      	mov	r6, r0
 8088bfa:	4629      	mov	r1, r5
 8088bfc:	4620      	mov	r0, r4
 8088bfe:	f7ff fdc3 	bl	8088788 <__ieee754_log>
 8088c02:	a31d      	add	r3, pc, #116	; (adr r3, 8088c78 <__ieee754_log10+0xf0>)
 8088c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8088c08:	4680      	mov	r8, r0
 8088c0a:	4689      	mov	r9, r1
 8088c0c:	4630      	mov	r0, r6
 8088c0e:	4639      	mov	r1, r7
 8088c10:	f001 f95c 	bl	8089ecc <__aeabi_dmul>
 8088c14:	a31a      	add	r3, pc, #104	; (adr r3, 8088c80 <__ieee754_log10+0xf8>)
 8088c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8088c1a:	4604      	mov	r4, r0
 8088c1c:	460d      	mov	r5, r1
 8088c1e:	4640      	mov	r0, r8
 8088c20:	4649      	mov	r1, r9
 8088c22:	f001 f953 	bl	8089ecc <__aeabi_dmul>
 8088c26:	4602      	mov	r2, r0
 8088c28:	460b      	mov	r3, r1
 8088c2a:	4620      	mov	r0, r4
 8088c2c:	4629      	mov	r1, r5
 8088c2e:	f000 ff97 	bl	8089b60 <__adddf3>
 8088c32:	a315      	add	r3, pc, #84	; (adr r3, 8088c88 <__ieee754_log10+0x100>)
 8088c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8088c38:	4604      	mov	r4, r0
 8088c3a:	460d      	mov	r5, r1
 8088c3c:	4630      	mov	r0, r6
 8088c3e:	4639      	mov	r1, r7
 8088c40:	f001 f944 	bl	8089ecc <__aeabi_dmul>
 8088c44:	4602      	mov	r2, r0
 8088c46:	460b      	mov	r3, r1
 8088c48:	4620      	mov	r0, r4
 8088c4a:	4629      	mov	r1, r5
 8088c4c:	f000 ff88 	bl	8089b60 <__adddf3>
 8088c50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8088c54:	2200      	movs	r2, #0
 8088c56:	2300      	movs	r3, #0
 8088c58:	2000      	movs	r0, #0
 8088c5a:	490f      	ldr	r1, [pc, #60]	; (8088c98 <__ieee754_log10+0x110>)
 8088c5c:	f001 fa60 	bl	808a120 <__aeabi_ddiv>
 8088c60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8088c64:	4602      	mov	r2, r0
 8088c66:	f000 ff79 	bl	8089b5c <__aeabi_dsub>
 8088c6a:	2200      	movs	r2, #0
 8088c6c:	2300      	movs	r3, #0
 8088c6e:	f001 fa57 	bl	808a120 <__aeabi_ddiv>
 8088c72:	e7aa      	b.n	8088bca <__ieee754_log10+0x42>
 8088c74:	f3af 8000 	nop.w
 8088c78:	11f12b36 	.word	0x11f12b36
 8088c7c:	3d59fef3 	.word	0x3d59fef3
 8088c80:	1526e50e 	.word	0x1526e50e
 8088c84:	3fdbcb7b 	.word	0x3fdbcb7b
 8088c88:	509f6000 	.word	0x509f6000
 8088c8c:	3fd34413 	.word	0x3fd34413
 8088c90:	43500000 	.word	0x43500000
 8088c94:	7fefffff 	.word	0x7fefffff
 8088c98:	c3500000 	.word	0xc3500000
 8088c9c:	00000000 	.word	0x00000000

08088ca0 <__ieee754_pow>:
 8088ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8088ca4:	4699      	mov	r9, r3
 8088ca6:	4690      	mov	r8, r2
 8088ca8:	f029 4500 	bic.w	r5, r9, #2147483648	; 0x80000000
 8088cac:	461e      	mov	r6, r3
 8088cae:	4613      	mov	r3, r2
 8088cb0:	ea55 0208 	orrs.w	r2, r5, r8
 8088cb4:	b093      	sub	sp, #76	; 0x4c
 8088cb6:	d035      	beq.n	8088d24 <__ieee754_pow+0x84>
 8088cb8:	4a6b      	ldr	r2, [pc, #428]	; (8088e68 <__ieee754_pow+0x1c8>)
 8088cba:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8088cbe:	4294      	cmp	r4, r2
 8088cc0:	4683      	mov	fp, r0
 8088cc2:	468a      	mov	sl, r1
 8088cc4:	460f      	mov	r7, r1
 8088cc6:	9000      	str	r0, [sp, #0]
 8088cc8:	dc25      	bgt.n	8088d16 <__ieee754_pow+0x76>
 8088cca:	d034      	beq.n	8088d36 <__ieee754_pow+0x96>
 8088ccc:	4295      	cmp	r5, r2
 8088cce:	dc22      	bgt.n	8088d16 <__ieee754_pow+0x76>
 8088cd0:	4a65      	ldr	r2, [pc, #404]	; (8088e68 <__ieee754_pow+0x1c8>)
 8088cd2:	4295      	cmp	r5, r2
 8088cd4:	d01d      	beq.n	8088d12 <__ieee754_pow+0x72>
 8088cd6:	2f00      	cmp	r7, #0
 8088cd8:	db36      	blt.n	8088d48 <__ieee754_pow+0xa8>
 8088cda:	2200      	movs	r2, #0
 8088cdc:	9202      	str	r2, [sp, #8]
 8088cde:	2b00      	cmp	r3, #0
 8088ce0:	d14c      	bne.n	8088d7c <__ieee754_pow+0xdc>
 8088ce2:	4b61      	ldr	r3, [pc, #388]	; (8088e68 <__ieee754_pow+0x1c8>)
 8088ce4:	429d      	cmp	r5, r3
 8088ce6:	f000 8097 	beq.w	8088e18 <__ieee754_pow+0x178>
 8088cea:	4b60      	ldr	r3, [pc, #384]	; (8088e6c <__ieee754_pow+0x1cc>)
 8088cec:	429d      	cmp	r5, r3
 8088cee:	f000 80a5 	beq.w	8088e3c <__ieee754_pow+0x19c>
 8088cf2:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8088cf6:	f000 84a3 	beq.w	8089640 <__ieee754_pow+0x9a0>
 8088cfa:	4b5d      	ldr	r3, [pc, #372]	; (8088e70 <__ieee754_pow+0x1d0>)
 8088cfc:	429e      	cmp	r6, r3
 8088cfe:	d13d      	bne.n	8088d7c <__ieee754_pow+0xdc>
 8088d00:	2f00      	cmp	r7, #0
 8088d02:	db3b      	blt.n	8088d7c <__ieee754_pow+0xdc>
 8088d04:	4658      	mov	r0, fp
 8088d06:	4651      	mov	r1, sl
 8088d08:	b013      	add	sp, #76	; 0x4c
 8088d0a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8088d0e:	f000 bd2f 	b.w	8089770 <__ieee754_sqrt>
 8088d12:	2b00      	cmp	r3, #0
 8088d14:	d0df      	beq.n	8088cd6 <__ieee754_pow+0x36>
 8088d16:	9b00      	ldr	r3, [sp, #0]
 8088d18:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8088d1c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8088d20:	4323      	orrs	r3, r4
 8088d22:	d10b      	bne.n	8088d3c <__ieee754_pow+0x9c>
 8088d24:	2300      	movs	r3, #0
 8088d26:	4c51      	ldr	r4, [pc, #324]	; (8088e6c <__ieee754_pow+0x1cc>)
 8088d28:	e9cd 3400 	strd	r3, r4, [sp]
 8088d2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8088d30:	b013      	add	sp, #76	; 0x4c
 8088d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8088d36:	b908      	cbnz	r0, 8088d3c <__ieee754_pow+0x9c>
 8088d38:	42a5      	cmp	r5, r4
 8088d3a:	ddc9      	ble.n	8088cd0 <__ieee754_pow+0x30>
 8088d3c:	484d      	ldr	r0, [pc, #308]	; (8088e74 <__ieee754_pow+0x1d4>)
 8088d3e:	b013      	add	sp, #76	; 0x4c
 8088d40:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8088d44:	f000 bde4 	b.w	8089910 <nan>
 8088d48:	4a4b      	ldr	r2, [pc, #300]	; (8088e78 <__ieee754_pow+0x1d8>)
 8088d4a:	4295      	cmp	r5, r2
 8088d4c:	dc7e      	bgt.n	8088e4c <__ieee754_pow+0x1ac>
 8088d4e:	f1a2 7254 	sub.w	r2, r2, #55574528	; 0x3500000
 8088d52:	4295      	cmp	r5, r2
 8088d54:	dd0e      	ble.n	8088d74 <__ieee754_pow+0xd4>
 8088d56:	152a      	asrs	r2, r5, #20
 8088d58:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8088d5c:	2a14      	cmp	r2, #20
 8088d5e:	f340 8479 	ble.w	8089654 <__ieee754_pow+0x9b4>
 8088d62:	f1c2 0234 	rsb	r2, r2, #52	; 0x34
 8088d66:	fa23 f102 	lsr.w	r1, r3, r2
 8088d6a:	fa01 f202 	lsl.w	r2, r1, r2
 8088d6e:	429a      	cmp	r2, r3
 8088d70:	f000 84c5 	beq.w	80896fe <__ieee754_pow+0xa5e>
 8088d74:	2200      	movs	r2, #0
 8088d76:	9202      	str	r2, [sp, #8]
 8088d78:	2b00      	cmp	r3, #0
 8088d7a:	d0b6      	beq.n	8088cea <__ieee754_pow+0x4a>
 8088d7c:	4658      	mov	r0, fp
 8088d7e:	4651      	mov	r1, sl
 8088d80:	f000 fdbc 	bl	80898fc <fabs>
 8088d84:	465b      	mov	r3, fp
 8088d86:	e9cd 0100 	strd	r0, r1, [sp]
 8088d8a:	bb33      	cbnz	r3, 8088dda <__ieee754_pow+0x13a>
 8088d8c:	b124      	cbz	r4, 8088d98 <__ieee754_pow+0xf8>
 8088d8e:	4b37      	ldr	r3, [pc, #220]	; (8088e6c <__ieee754_pow+0x1cc>)
 8088d90:	f027 4240 	bic.w	r2, r7, #3221225472	; 0xc0000000
 8088d94:	429a      	cmp	r2, r3
 8088d96:	d120      	bne.n	8088dda <__ieee754_pow+0x13a>
 8088d98:	2e00      	cmp	r6, #0
 8088d9a:	da07      	bge.n	8088dac <__ieee754_pow+0x10c>
 8088d9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8088da0:	2000      	movs	r0, #0
 8088da2:	4932      	ldr	r1, [pc, #200]	; (8088e6c <__ieee754_pow+0x1cc>)
 8088da4:	f001 f9bc 	bl	808a120 <__aeabi_ddiv>
 8088da8:	e9cd 0100 	strd	r0, r1, [sp]
 8088dac:	2f00      	cmp	r7, #0
 8088dae:	dabd      	bge.n	8088d2c <__ieee754_pow+0x8c>
 8088db0:	9b02      	ldr	r3, [sp, #8]
 8088db2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8088db6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8088dba:	4323      	orrs	r3, r4
 8088dbc:	f040 846f 	bne.w	808969e <__ieee754_pow+0x9fe>
 8088dc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8088dc4:	4610      	mov	r0, r2
 8088dc6:	4619      	mov	r1, r3
 8088dc8:	f000 fec8 	bl	8089b5c <__aeabi_dsub>
 8088dcc:	4602      	mov	r2, r0
 8088dce:	460b      	mov	r3, r1
 8088dd0:	f001 f9a6 	bl	808a120 <__aeabi_ddiv>
 8088dd4:	e9cd 0100 	strd	r0, r1, [sp]
 8088dd8:	e7a8      	b.n	8088d2c <__ieee754_pow+0x8c>
 8088dda:	9a02      	ldr	r2, [sp, #8]
 8088ddc:	0ffb      	lsrs	r3, r7, #31
 8088dde:	3b01      	subs	r3, #1
 8088de0:	930a      	str	r3, [sp, #40]	; 0x28
 8088de2:	4313      	orrs	r3, r2
 8088de4:	d035      	beq.n	8088e52 <__ieee754_pow+0x1b2>
 8088de6:	4b25      	ldr	r3, [pc, #148]	; (8088e7c <__ieee754_pow+0x1dc>)
 8088de8:	429d      	cmp	r5, r3
 8088dea:	dd4b      	ble.n	8088e84 <__ieee754_pow+0x1e4>
 8088dec:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8088df0:	429d      	cmp	r5, r3
 8088df2:	4b23      	ldr	r3, [pc, #140]	; (8088e80 <__ieee754_pow+0x1e0>)
 8088df4:	f340 83bc 	ble.w	8089570 <__ieee754_pow+0x8d0>
 8088df8:	429c      	cmp	r4, r3
 8088dfa:	f340 834f 	ble.w	808949c <__ieee754_pow+0x7fc>
 8088dfe:	2e00      	cmp	r6, #0
 8088e00:	f340 834f 	ble.w	80894a2 <__ieee754_pow+0x802>
 8088e04:	a316      	add	r3, pc, #88	; (adr r3, 8088e60 <__ieee754_pow+0x1c0>)
 8088e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8088e0a:	4610      	mov	r0, r2
 8088e0c:	4619      	mov	r1, r3
 8088e0e:	f001 f85d 	bl	8089ecc <__aeabi_dmul>
 8088e12:	e9cd 0100 	strd	r0, r1, [sp]
 8088e16:	e789      	b.n	8088d2c <__ieee754_pow+0x8c>
 8088e18:	9a00      	ldr	r2, [sp, #0]
 8088e1a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8088e1e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8088e22:	4313      	orrs	r3, r2
 8088e24:	f43f af7e 	beq.w	8088d24 <__ieee754_pow+0x84>
 8088e28:	4b15      	ldr	r3, [pc, #84]	; (8088e80 <__ieee754_pow+0x1e0>)
 8088e2a:	429c      	cmp	r4, r3
 8088e2c:	f340 8363 	ble.w	80894f6 <__ieee754_pow+0x856>
 8088e30:	2e00      	cmp	r6, #0
 8088e32:	f2c0 8336 	blt.w	80894a2 <__ieee754_pow+0x802>
 8088e36:	e9cd 8900 	strd	r8, r9, [sp]
 8088e3a:	e777      	b.n	8088d2c <__ieee754_pow+0x8c>
 8088e3c:	2e00      	cmp	r6, #0
 8088e3e:	f2c0 83f5 	blt.w	808962c <__ieee754_pow+0x98c>
 8088e42:	4658      	mov	r0, fp
 8088e44:	4651      	mov	r1, sl
 8088e46:	e9cd 0100 	strd	r0, r1, [sp]
 8088e4a:	e76f      	b.n	8088d2c <__ieee754_pow+0x8c>
 8088e4c:	2202      	movs	r2, #2
 8088e4e:	9202      	str	r2, [sp, #8]
 8088e50:	e745      	b.n	8088cde <__ieee754_pow+0x3e>
 8088e52:	465a      	mov	r2, fp
 8088e54:	4658      	mov	r0, fp
 8088e56:	4653      	mov	r3, sl
 8088e58:	4651      	mov	r1, sl
 8088e5a:	e7b5      	b.n	8088dc8 <__ieee754_pow+0x128>
 8088e5c:	f3af 8000 	nop.w
 8088e60:	8800759c 	.word	0x8800759c
 8088e64:	7e37e43c 	.word	0x7e37e43c
 8088e68:	7ff00000 	.word	0x7ff00000
 8088e6c:	3ff00000 	.word	0x3ff00000
 8088e70:	3fe00000 	.word	0x3fe00000
 8088e74:	0808bd9c 	.word	0x0808bd9c
 8088e78:	433fffff 	.word	0x433fffff
 8088e7c:	41e00000 	.word	0x41e00000
 8088e80:	3fefffff 	.word	0x3fefffff
 8088e84:	4bd4      	ldr	r3, [pc, #848]	; (80891d8 <__ieee754_pow+0x538>)
 8088e86:	403b      	ands	r3, r7
 8088e88:	2b00      	cmp	r3, #0
 8088e8a:	f040 83cd 	bne.w	8089628 <__ieee754_pow+0x988>
 8088e8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8088e92:	2200      	movs	r2, #0
 8088e94:	4bd1      	ldr	r3, [pc, #836]	; (80891dc <__ieee754_pow+0x53c>)
 8088e96:	f001 f819 	bl	8089ecc <__aeabi_dmul>
 8088e9a:	f06f 0534 	mvn.w	r5, #52	; 0x34
 8088e9e:	460c      	mov	r4, r1
 8088ea0:	e9cd 0100 	strd	r0, r1, [sp]
 8088ea4:	1523      	asrs	r3, r4, #20
 8088ea6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8088eaa:	1959      	adds	r1, r3, r5
 8088eac:	4bcc      	ldr	r3, [pc, #816]	; (80891e0 <__ieee754_pow+0x540>)
 8088eae:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8088eb2:	f042 547f 	orr.w	r4, r2, #1069547520	; 0x3fc00000
 8088eb6:	429a      	cmp	r2, r3
 8088eb8:	910b      	str	r1, [sp, #44]	; 0x2c
 8088eba:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8088ebe:	dd07      	ble.n	8088ed0 <__ieee754_pow+0x230>
 8088ec0:	4bc8      	ldr	r3, [pc, #800]	; (80891e4 <__ieee754_pow+0x544>)
 8088ec2:	429a      	cmp	r2, r3
 8088ec4:	f340 83f8 	ble.w	80896b8 <__ieee754_pow+0xa18>
 8088ec8:	3101      	adds	r1, #1
 8088eca:	910b      	str	r1, [sp, #44]	; 0x2c
 8088ecc:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
 8088ed0:	2200      	movs	r2, #0
 8088ed2:	2300      	movs	r3, #0
 8088ed4:	2000      	movs	r0, #0
 8088ed6:	2500      	movs	r5, #0
 8088ed8:	49c3      	ldr	r1, [pc, #780]	; (80891e8 <__ieee754_pow+0x548>)
 8088eda:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8088ede:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8088ee2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8088ee6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8088eea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8088eee:	4621      	mov	r1, r4
 8088ef0:	4682      	mov	sl, r0
 8088ef2:	f000 fe33 	bl	8089b5c <__aeabi_dsub>
 8088ef6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8088efa:	46a3      	mov	fp, r4
 8088efc:	4606      	mov	r6, r0
 8088efe:	460f      	mov	r7, r1
 8088f00:	4650      	mov	r0, sl
 8088f02:	4621      	mov	r1, r4
 8088f04:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 8088f08:	f000 fe2a 	bl	8089b60 <__adddf3>
 8088f0c:	4602      	mov	r2, r0
 8088f0e:	460b      	mov	r3, r1
 8088f10:	2000      	movs	r0, #0
 8088f12:	49b5      	ldr	r1, [pc, #724]	; (80891e8 <__ieee754_pow+0x548>)
 8088f14:	f001 f904 	bl	808a120 <__aeabi_ddiv>
 8088f18:	468c      	mov	ip, r1
 8088f1a:	4683      	mov	fp, r0
 8088f1c:	4663      	mov	r3, ip
 8088f1e:	465a      	mov	r2, fp
 8088f20:	4630      	mov	r0, r6
 8088f22:	4639      	mov	r1, r7
 8088f24:	e9cd bc0e 	strd	fp, ip, [sp, #56]	; 0x38
 8088f28:	f000 ffd0 	bl	8089ecc <__aeabi_dmul>
 8088f2c:	4682      	mov	sl, r0
 8088f2e:	468b      	mov	fp, r1
 8088f30:	1063      	asrs	r3, r4, #1
 8088f32:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8088f36:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 8088f3a:	1959      	adds	r1, r3, r5
 8088f3c:	460d      	mov	r5, r1
 8088f3e:	465a      	mov	r2, fp
 8088f40:	4651      	mov	r1, sl
 8088f42:	2300      	movs	r3, #0
 8088f44:	2000      	movs	r0, #0
 8088f46:	e9cd 1200 	strd	r1, r2, [sp]
 8088f4a:	9300      	str	r3, [sp, #0]
 8088f4c:	4604      	mov	r4, r0
 8088f4e:	4602      	mov	r2, r0
 8088f50:	462b      	mov	r3, r5
 8088f52:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8088f56:	e9dd ab00 	ldrd	sl, fp, [sp]
 8088f5a:	4650      	mov	r0, sl
 8088f5c:	4659      	mov	r1, fp
 8088f5e:	f000 ffb5 	bl	8089ecc <__aeabi_dmul>
 8088f62:	4602      	mov	r2, r0
 8088f64:	460b      	mov	r3, r1
 8088f66:	4630      	mov	r0, r6
 8088f68:	4639      	mov	r1, r7
 8088f6a:	f000 fdf7 	bl	8089b5c <__aeabi_dsub>
 8088f6e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8088f72:	4606      	mov	r6, r0
 8088f74:	460f      	mov	r7, r1
 8088f76:	4620      	mov	r0, r4
 8088f78:	4629      	mov	r1, r5
 8088f7a:	f000 fdef 	bl	8089b5c <__aeabi_dsub>
 8088f7e:	4602      	mov	r2, r0
 8088f80:	460b      	mov	r3, r1
 8088f82:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8088f86:	f000 fde9 	bl	8089b5c <__aeabi_dsub>
 8088f8a:	4652      	mov	r2, sl
 8088f8c:	465b      	mov	r3, fp
 8088f8e:	f000 ff9d 	bl	8089ecc <__aeabi_dmul>
 8088f92:	4602      	mov	r2, r0
 8088f94:	460b      	mov	r3, r1
 8088f96:	4630      	mov	r0, r6
 8088f98:	4639      	mov	r1, r7
 8088f9a:	f000 fddf 	bl	8089b5c <__aeabi_dsub>
 8088f9e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8088fa2:	f000 ff93 	bl	8089ecc <__aeabi_dmul>
 8088fa6:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8088faa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8088fae:	4622      	mov	r2, r4
 8088fb0:	462b      	mov	r3, r5
 8088fb2:	4620      	mov	r0, r4
 8088fb4:	4629      	mov	r1, r5
 8088fb6:	f000 ff89 	bl	8089ecc <__aeabi_dmul>
 8088fba:	a375      	add	r3, pc, #468	; (adr r3, 8089190 <__ieee754_pow+0x4f0>)
 8088fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8088fc0:	4604      	mov	r4, r0
 8088fc2:	460d      	mov	r5, r1
 8088fc4:	f000 ff82 	bl	8089ecc <__aeabi_dmul>
 8088fc8:	a373      	add	r3, pc, #460	; (adr r3, 8089198 <__ieee754_pow+0x4f8>)
 8088fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8088fce:	f000 fdc7 	bl	8089b60 <__adddf3>
 8088fd2:	4622      	mov	r2, r4
 8088fd4:	462b      	mov	r3, r5
 8088fd6:	f000 ff79 	bl	8089ecc <__aeabi_dmul>
 8088fda:	a371      	add	r3, pc, #452	; (adr r3, 80891a0 <__ieee754_pow+0x500>)
 8088fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8088fe0:	f000 fdbe 	bl	8089b60 <__adddf3>
 8088fe4:	4622      	mov	r2, r4
 8088fe6:	462b      	mov	r3, r5
 8088fe8:	f000 ff70 	bl	8089ecc <__aeabi_dmul>
 8088fec:	a36e      	add	r3, pc, #440	; (adr r3, 80891a8 <__ieee754_pow+0x508>)
 8088fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8088ff2:	f000 fdb5 	bl	8089b60 <__adddf3>
 8088ff6:	4622      	mov	r2, r4
 8088ff8:	462b      	mov	r3, r5
 8088ffa:	f000 ff67 	bl	8089ecc <__aeabi_dmul>
 8088ffe:	a36c      	add	r3, pc, #432	; (adr r3, 80891b0 <__ieee754_pow+0x510>)
 8089000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8089004:	f000 fdac 	bl	8089b60 <__adddf3>
 8089008:	4622      	mov	r2, r4
 808900a:	462b      	mov	r3, r5
 808900c:	f000 ff5e 	bl	8089ecc <__aeabi_dmul>
 8089010:	a369      	add	r3, pc, #420	; (adr r3, 80891b8 <__ieee754_pow+0x518>)
 8089012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8089016:	f000 fda3 	bl	8089b60 <__adddf3>
 808901a:	4622      	mov	r2, r4
 808901c:	4606      	mov	r6, r0
 808901e:	460f      	mov	r7, r1
 8089020:	462b      	mov	r3, r5
 8089022:	4620      	mov	r0, r4
 8089024:	4629      	mov	r1, r5
 8089026:	f000 ff51 	bl	8089ecc <__aeabi_dmul>
 808902a:	4602      	mov	r2, r0
 808902c:	460b      	mov	r3, r1
 808902e:	4630      	mov	r0, r6
 8089030:	4639      	mov	r1, r7
 8089032:	f000 ff4b 	bl	8089ecc <__aeabi_dmul>
 8089036:	4604      	mov	r4, r0
 8089038:	460d      	mov	r5, r1
 808903a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 808903e:	4652      	mov	r2, sl
 8089040:	465b      	mov	r3, fp
 8089042:	f000 fd8d 	bl	8089b60 <__adddf3>
 8089046:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 808904a:	f000 ff3f 	bl	8089ecc <__aeabi_dmul>
 808904e:	4622      	mov	r2, r4
 8089050:	462b      	mov	r3, r5
 8089052:	f000 fd85 	bl	8089b60 <__adddf3>
 8089056:	4652      	mov	r2, sl
 8089058:	4606      	mov	r6, r0
 808905a:	460f      	mov	r7, r1
 808905c:	465b      	mov	r3, fp
 808905e:	4650      	mov	r0, sl
 8089060:	4659      	mov	r1, fp
 8089062:	f000 ff33 	bl	8089ecc <__aeabi_dmul>
 8089066:	4602      	mov	r2, r0
 8089068:	460b      	mov	r3, r1
 808906a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 808906e:	2200      	movs	r2, #0
 8089070:	4b5e      	ldr	r3, [pc, #376]	; (80891ec <__ieee754_pow+0x54c>)
 8089072:	f000 fd75 	bl	8089b60 <__adddf3>
 8089076:	4632      	mov	r2, r6
 8089078:	463b      	mov	r3, r7
 808907a:	f000 fd71 	bl	8089b60 <__adddf3>
 808907e:	2400      	movs	r4, #0
 8089080:	460d      	mov	r5, r1
 8089082:	4622      	mov	r2, r4
 8089084:	462b      	mov	r3, r5
 8089086:	4650      	mov	r0, sl
 8089088:	4659      	mov	r1, fp
 808908a:	f000 ff1f 	bl	8089ecc <__aeabi_dmul>
 808908e:	2200      	movs	r2, #0
 8089090:	4682      	mov	sl, r0
 8089092:	468b      	mov	fp, r1
 8089094:	4620      	mov	r0, r4
 8089096:	4629      	mov	r1, r5
 8089098:	4b54      	ldr	r3, [pc, #336]	; (80891ec <__ieee754_pow+0x54c>)
 808909a:	f000 fd5f 	bl	8089b5c <__aeabi_dsub>
 808909e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80890a2:	f000 fd5b 	bl	8089b5c <__aeabi_dsub>
 80890a6:	4602      	mov	r2, r0
 80890a8:	460b      	mov	r3, r1
 80890aa:	4630      	mov	r0, r6
 80890ac:	4639      	mov	r1, r7
 80890ae:	f000 fd55 	bl	8089b5c <__aeabi_dsub>
 80890b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80890b6:	f000 ff09 	bl	8089ecc <__aeabi_dmul>
 80890ba:	4622      	mov	r2, r4
 80890bc:	4606      	mov	r6, r0
 80890be:	460f      	mov	r7, r1
 80890c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80890c4:	462b      	mov	r3, r5
 80890c6:	f000 ff01 	bl	8089ecc <__aeabi_dmul>
 80890ca:	4602      	mov	r2, r0
 80890cc:	460b      	mov	r3, r1
 80890ce:	4630      	mov	r0, r6
 80890d0:	4639      	mov	r1, r7
 80890d2:	f000 fd45 	bl	8089b60 <__adddf3>
 80890d6:	4606      	mov	r6, r0
 80890d8:	460f      	mov	r7, r1
 80890da:	2400      	movs	r4, #0
 80890dc:	4632      	mov	r2, r6
 80890de:	463b      	mov	r3, r7
 80890e0:	4650      	mov	r0, sl
 80890e2:	4659      	mov	r1, fp
 80890e4:	f000 fd3c 	bl	8089b60 <__adddf3>
 80890e8:	a335      	add	r3, pc, #212	; (adr r3, 80891c0 <__ieee754_pow+0x520>)
 80890ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80890ee:	4620      	mov	r0, r4
 80890f0:	460d      	mov	r5, r1
 80890f2:	f000 feeb 	bl	8089ecc <__aeabi_dmul>
 80890f6:	4652      	mov	r2, sl
 80890f8:	465b      	mov	r3, fp
 80890fa:	4682      	mov	sl, r0
 80890fc:	468b      	mov	fp, r1
 80890fe:	4620      	mov	r0, r4
 8089100:	4629      	mov	r1, r5
 8089102:	f000 fd2b 	bl	8089b5c <__aeabi_dsub>
 8089106:	4602      	mov	r2, r0
 8089108:	460b      	mov	r3, r1
 808910a:	4630      	mov	r0, r6
 808910c:	4639      	mov	r1, r7
 808910e:	f000 fd25 	bl	8089b5c <__aeabi_dsub>
 8089112:	a32d      	add	r3, pc, #180	; (adr r3, 80891c8 <__ieee754_pow+0x528>)
 8089114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8089118:	f000 fed8 	bl	8089ecc <__aeabi_dmul>
 808911c:	4602      	mov	r2, r0
 808911e:	460b      	mov	r3, r1
 8089120:	4620      	mov	r0, r4
 8089122:	4629      	mov	r1, r5
 8089124:	4614      	mov	r4, r2
 8089126:	461d      	mov	r5, r3
 8089128:	a329      	add	r3, pc, #164	; (adr r3, 80891d0 <__ieee754_pow+0x530>)
 808912a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808912e:	f000 fecd 	bl	8089ecc <__aeabi_dmul>
 8089132:	4602      	mov	r2, r0
 8089134:	460b      	mov	r3, r1
 8089136:	4620      	mov	r0, r4
 8089138:	4629      	mov	r1, r5
 808913a:	f000 fd11 	bl	8089b60 <__adddf3>
 808913e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8089142:	f000 fd0d 	bl	8089b60 <__adddf3>
 8089146:	4606      	mov	r6, r0
 8089148:	980b      	ldr	r0, [sp, #44]	; 0x2c
 808914a:	460f      	mov	r7, r1
 808914c:	f000 fe54 	bl	8089df8 <__aeabi_i2d>
 8089150:	4604      	mov	r4, r0
 8089152:	460d      	mov	r5, r1
 8089154:	4632      	mov	r2, r6
 8089156:	463b      	mov	r3, r7
 8089158:	4650      	mov	r0, sl
 808915a:	4659      	mov	r1, fp
 808915c:	f000 fd00 	bl	8089b60 <__adddf3>
 8089160:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8089164:	f000 fcfc 	bl	8089b60 <__adddf3>
 8089168:	4622      	mov	r2, r4
 808916a:	462b      	mov	r3, r5
 808916c:	f000 fcf8 	bl	8089b60 <__adddf3>
 8089170:	4622      	mov	r2, r4
 8089172:	2400      	movs	r4, #0
 8089174:	462b      	mov	r3, r5
 8089176:	4620      	mov	r0, r4
 8089178:	460d      	mov	r5, r1
 808917a:	f000 fcef 	bl	8089b5c <__aeabi_dsub>
 808917e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8089182:	f000 fceb 	bl	8089b5c <__aeabi_dsub>
 8089186:	4652      	mov	r2, sl
 8089188:	465b      	mov	r3, fp
 808918a:	e031      	b.n	80891f0 <__ieee754_pow+0x550>
 808918c:	f3af 8000 	nop.w
 8089190:	4a454eef 	.word	0x4a454eef
 8089194:	3fca7e28 	.word	0x3fca7e28
 8089198:	93c9db65 	.word	0x93c9db65
 808919c:	3fcd864a 	.word	0x3fcd864a
 80891a0:	a91d4101 	.word	0xa91d4101
 80891a4:	3fd17460 	.word	0x3fd17460
 80891a8:	518f264d 	.word	0x518f264d
 80891ac:	3fd55555 	.word	0x3fd55555
 80891b0:	db6fabff 	.word	0xdb6fabff
 80891b4:	3fdb6db6 	.word	0x3fdb6db6
 80891b8:	33333303 	.word	0x33333303
 80891bc:	3fe33333 	.word	0x3fe33333
 80891c0:	e0000000 	.word	0xe0000000
 80891c4:	3feec709 	.word	0x3feec709
 80891c8:	dc3a03fd 	.word	0xdc3a03fd
 80891cc:	3feec709 	.word	0x3feec709
 80891d0:	145b01f5 	.word	0x145b01f5
 80891d4:	be3e2fe0 	.word	0xbe3e2fe0
 80891d8:	7ff00000 	.word	0x7ff00000
 80891dc:	43400000 	.word	0x43400000
 80891e0:	0003988e 	.word	0x0003988e
 80891e4:	000bb679 	.word	0x000bb679
 80891e8:	3ff00000 	.word	0x3ff00000
 80891ec:	40080000 	.word	0x40080000
 80891f0:	f000 fcb4 	bl	8089b5c <__aeabi_dsub>
 80891f4:	4602      	mov	r2, r0
 80891f6:	460b      	mov	r3, r1
 80891f8:	4630      	mov	r0, r6
 80891fa:	4639      	mov	r1, r7
 80891fc:	f000 fcae 	bl	8089b5c <__aeabi_dsub>
 8089200:	9b02      	ldr	r3, [sp, #8]
 8089202:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8089204:	3b01      	subs	r3, #1
 8089206:	4313      	orrs	r3, r2
 8089208:	f04f 0200 	mov.w	r2, #0
 808920c:	bf0c      	ite	eq
 808920e:	4bd2      	ldreq	r3, [pc, #840]	; (8089558 <__ieee754_pow+0x8b8>)
 8089210:	4bd2      	ldrne	r3, [pc, #840]	; (808955c <__ieee754_pow+0x8bc>)
 8089212:	e9cd 8900 	strd	r8, r9, [sp]
 8089216:	e9cd 2302 	strd	r2, r3, [sp, #8]
 808921a:	2300      	movs	r3, #0
 808921c:	9300      	str	r3, [sp, #0]
 808921e:	e9dd ab00 	ldrd	sl, fp, [sp]
 8089222:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8089226:	4652      	mov	r2, sl
 8089228:	4640      	mov	r0, r8
 808922a:	4649      	mov	r1, r9
 808922c:	465b      	mov	r3, fp
 808922e:	f000 fc95 	bl	8089b5c <__aeabi_dsub>
 8089232:	4622      	mov	r2, r4
 8089234:	462b      	mov	r3, r5
 8089236:	f000 fe49 	bl	8089ecc <__aeabi_dmul>
 808923a:	4642      	mov	r2, r8
 808923c:	4606      	mov	r6, r0
 808923e:	460f      	mov	r7, r1
 8089240:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8089244:	464b      	mov	r3, r9
 8089246:	f000 fe41 	bl	8089ecc <__aeabi_dmul>
 808924a:	4602      	mov	r2, r0
 808924c:	460b      	mov	r3, r1
 808924e:	4630      	mov	r0, r6
 8089250:	4639      	mov	r1, r7
 8089252:	f000 fc85 	bl	8089b60 <__adddf3>
 8089256:	4652      	mov	r2, sl
 8089258:	4606      	mov	r6, r0
 808925a:	460f      	mov	r7, r1
 808925c:	465b      	mov	r3, fp
 808925e:	4620      	mov	r0, r4
 8089260:	4629      	mov	r1, r5
 8089262:	f000 fe33 	bl	8089ecc <__aeabi_dmul>
 8089266:	4604      	mov	r4, r0
 8089268:	460d      	mov	r5, r1
 808926a:	4630      	mov	r0, r6
 808926c:	462b      	mov	r3, r5
 808926e:	4639      	mov	r1, r7
 8089270:	4622      	mov	r2, r4
 8089272:	f000 fc75 	bl	8089b60 <__adddf3>
 8089276:	4bba      	ldr	r3, [pc, #744]	; (8089560 <__ieee754_pow+0x8c0>)
 8089278:	4680      	mov	r8, r0
 808927a:	4299      	cmp	r1, r3
 808927c:	4689      	mov	r9, r1
 808927e:	468a      	mov	sl, r1
 8089280:	f340 8114 	ble.w	80894ac <__ieee754_pow+0x80c>
 8089284:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8089288:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 808928c:	4303      	orrs	r3, r0
 808928e:	f040 81f6 	bne.w	808967e <__ieee754_pow+0x9de>
 8089292:	a39d      	add	r3, pc, #628	; (adr r3, 8089508 <__ieee754_pow+0x868>)
 8089294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8089298:	4630      	mov	r0, r6
 808929a:	4639      	mov	r1, r7
 808929c:	f000 fc60 	bl	8089b60 <__adddf3>
 80892a0:	4602      	mov	r2, r0
 80892a2:	460b      	mov	r3, r1
 80892a4:	4640      	mov	r0, r8
 80892a6:	4649      	mov	r1, r9
 80892a8:	4690      	mov	r8, r2
 80892aa:	4699      	mov	r9, r3
 80892ac:	4622      	mov	r2, r4
 80892ae:	462b      	mov	r3, r5
 80892b0:	f000 fc54 	bl	8089b5c <__aeabi_dsub>
 80892b4:	4602      	mov	r2, r0
 80892b6:	460b      	mov	r3, r1
 80892b8:	4640      	mov	r0, r8
 80892ba:	4649      	mov	r1, r9
 80892bc:	f001 f896 	bl	808a3ec <__aeabi_dcmpgt>
 80892c0:	2800      	cmp	r0, #0
 80892c2:	f040 81dc 	bne.w	808967e <__ieee754_pow+0x9de>
 80892c6:	f3ca 530a 	ubfx	r3, sl, #20, #11
 80892ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80892ce:	2000      	movs	r0, #0
 80892d0:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80892d4:	fa42 f303 	asr.w	r3, r2, r3
 80892d8:	4453      	add	r3, sl
 80892da:	49a2      	ldr	r1, [pc, #648]	; (8089564 <__ieee754_pow+0x8c4>)
 80892dc:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80892e0:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80892e4:	fa41 fc02 	asr.w	ip, r1, r2
 80892e8:	f3c3 0b13 	ubfx	fp, r3, #0, #20
 80892ec:	ea23 010c 	bic.w	r1, r3, ip
 80892f0:	f1c2 0214 	rsb	r2, r2, #20
 80892f4:	f44b 1b80 	orr.w	fp, fp, #1048576	; 0x100000
 80892f8:	f1ba 0f00 	cmp.w	sl, #0
 80892fc:	460b      	mov	r3, r1
 80892fe:	fa4b fb02 	asr.w	fp, fp, r2
 8089302:	4629      	mov	r1, r5
 8089304:	4602      	mov	r2, r0
 8089306:	4620      	mov	r0, r4
 8089308:	bfb8      	it	lt
 808930a:	f1cb 0b00 	rsblt	fp, fp, #0
 808930e:	f000 fc25 	bl	8089b5c <__aeabi_dsub>
 8089312:	4604      	mov	r4, r0
 8089314:	460d      	mov	r5, r1
 8089316:	4630      	mov	r0, r6
 8089318:	4639      	mov	r1, r7
 808931a:	4622      	mov	r2, r4
 808931c:	462b      	mov	r3, r5
 808931e:	f000 fc1f 	bl	8089b60 <__adddf3>
 8089322:	4689      	mov	r9, r1
 8089324:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
 8089328:	f04f 0800 	mov.w	r8, #0
 808932c:	a378      	add	r3, pc, #480	; (adr r3, 8089510 <__ieee754_pow+0x870>)
 808932e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8089332:	4640      	mov	r0, r8
 8089334:	4649      	mov	r1, r9
 8089336:	f000 fdc9 	bl	8089ecc <__aeabi_dmul>
 808933a:	4622      	mov	r2, r4
 808933c:	462b      	mov	r3, r5
 808933e:	4604      	mov	r4, r0
 8089340:	460d      	mov	r5, r1
 8089342:	4640      	mov	r0, r8
 8089344:	4649      	mov	r1, r9
 8089346:	f000 fc09 	bl	8089b5c <__aeabi_dsub>
 808934a:	4602      	mov	r2, r0
 808934c:	460b      	mov	r3, r1
 808934e:	4630      	mov	r0, r6
 8089350:	4639      	mov	r1, r7
 8089352:	f000 fc03 	bl	8089b5c <__aeabi_dsub>
 8089356:	a370      	add	r3, pc, #448	; (adr r3, 8089518 <__ieee754_pow+0x878>)
 8089358:	e9d3 2300 	ldrd	r2, r3, [r3]
 808935c:	f000 fdb6 	bl	8089ecc <__aeabi_dmul>
 8089360:	a36f      	add	r3, pc, #444	; (adr r3, 8089520 <__ieee754_pow+0x880>)
 8089362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8089366:	4606      	mov	r6, r0
 8089368:	460f      	mov	r7, r1
 808936a:	4640      	mov	r0, r8
 808936c:	4649      	mov	r1, r9
 808936e:	f000 fdad 	bl	8089ecc <__aeabi_dmul>
 8089372:	4602      	mov	r2, r0
 8089374:	460b      	mov	r3, r1
 8089376:	4630      	mov	r0, r6
 8089378:	4639      	mov	r1, r7
 808937a:	f000 fbf1 	bl	8089b60 <__adddf3>
 808937e:	4680      	mov	r8, r0
 8089380:	4689      	mov	r9, r1
 8089382:	4642      	mov	r2, r8
 8089384:	464b      	mov	r3, r9
 8089386:	4620      	mov	r0, r4
 8089388:	4629      	mov	r1, r5
 808938a:	f000 fbe9 	bl	8089b60 <__adddf3>
 808938e:	4622      	mov	r2, r4
 8089390:	462b      	mov	r3, r5
 8089392:	4606      	mov	r6, r0
 8089394:	460f      	mov	r7, r1
 8089396:	f000 fbe1 	bl	8089b5c <__aeabi_dsub>
 808939a:	4602      	mov	r2, r0
 808939c:	460b      	mov	r3, r1
 808939e:	4640      	mov	r0, r8
 80893a0:	4649      	mov	r1, r9
 80893a2:	f000 fbdb 	bl	8089b5c <__aeabi_dsub>
 80893a6:	4632      	mov	r2, r6
 80893a8:	4680      	mov	r8, r0
 80893aa:	4689      	mov	r9, r1
 80893ac:	463b      	mov	r3, r7
 80893ae:	4630      	mov	r0, r6
 80893b0:	4639      	mov	r1, r7
 80893b2:	f000 fd8b 	bl	8089ecc <__aeabi_dmul>
 80893b6:	a35c      	add	r3, pc, #368	; (adr r3, 8089528 <__ieee754_pow+0x888>)
 80893b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80893bc:	4604      	mov	r4, r0
 80893be:	460d      	mov	r5, r1
 80893c0:	f000 fd84 	bl	8089ecc <__aeabi_dmul>
 80893c4:	a35a      	add	r3, pc, #360	; (adr r3, 8089530 <__ieee754_pow+0x890>)
 80893c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80893ca:	f000 fbc7 	bl	8089b5c <__aeabi_dsub>
 80893ce:	4622      	mov	r2, r4
 80893d0:	462b      	mov	r3, r5
 80893d2:	f000 fd7b 	bl	8089ecc <__aeabi_dmul>
 80893d6:	a358      	add	r3, pc, #352	; (adr r3, 8089538 <__ieee754_pow+0x898>)
 80893d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80893dc:	f000 fbc0 	bl	8089b60 <__adddf3>
 80893e0:	4622      	mov	r2, r4
 80893e2:	462b      	mov	r3, r5
 80893e4:	f000 fd72 	bl	8089ecc <__aeabi_dmul>
 80893e8:	a355      	add	r3, pc, #340	; (adr r3, 8089540 <__ieee754_pow+0x8a0>)
 80893ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80893ee:	f000 fbb5 	bl	8089b5c <__aeabi_dsub>
 80893f2:	4622      	mov	r2, r4
 80893f4:	462b      	mov	r3, r5
 80893f6:	f000 fd69 	bl	8089ecc <__aeabi_dmul>
 80893fa:	a353      	add	r3, pc, #332	; (adr r3, 8089548 <__ieee754_pow+0x8a8>)
 80893fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8089400:	f000 fbae 	bl	8089b60 <__adddf3>
 8089404:	4622      	mov	r2, r4
 8089406:	462b      	mov	r3, r5
 8089408:	f000 fd60 	bl	8089ecc <__aeabi_dmul>
 808940c:	4602      	mov	r2, r0
 808940e:	460b      	mov	r3, r1
 8089410:	4630      	mov	r0, r6
 8089412:	4639      	mov	r1, r7
 8089414:	f000 fba2 	bl	8089b5c <__aeabi_dsub>
 8089418:	4604      	mov	r4, r0
 808941a:	460d      	mov	r5, r1
 808941c:	4622      	mov	r2, r4
 808941e:	462b      	mov	r3, r5
 8089420:	4630      	mov	r0, r6
 8089422:	4639      	mov	r1, r7
 8089424:	f000 fd52 	bl	8089ecc <__aeabi_dmul>
 8089428:	4602      	mov	r2, r0
 808942a:	460b      	mov	r3, r1
 808942c:	4620      	mov	r0, r4
 808942e:	4629      	mov	r1, r5
 8089430:	4614      	mov	r4, r2
 8089432:	461d      	mov	r5, r3
 8089434:	2200      	movs	r2, #0
 8089436:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 808943a:	f000 fb8f 	bl	8089b5c <__aeabi_dsub>
 808943e:	4602      	mov	r2, r0
 8089440:	460b      	mov	r3, r1
 8089442:	4620      	mov	r0, r4
 8089444:	4629      	mov	r1, r5
 8089446:	f000 fe6b 	bl	808a120 <__aeabi_ddiv>
 808944a:	4642      	mov	r2, r8
 808944c:	4604      	mov	r4, r0
 808944e:	460d      	mov	r5, r1
 8089450:	464b      	mov	r3, r9
 8089452:	4630      	mov	r0, r6
 8089454:	4639      	mov	r1, r7
 8089456:	f000 fd39 	bl	8089ecc <__aeabi_dmul>
 808945a:	4642      	mov	r2, r8
 808945c:	464b      	mov	r3, r9
 808945e:	f000 fb7f 	bl	8089b60 <__adddf3>
 8089462:	4602      	mov	r2, r0
 8089464:	460b      	mov	r3, r1
 8089466:	4620      	mov	r0, r4
 8089468:	4629      	mov	r1, r5
 808946a:	f000 fb77 	bl	8089b5c <__aeabi_dsub>
 808946e:	4632      	mov	r2, r6
 8089470:	463b      	mov	r3, r7
 8089472:	f000 fb73 	bl	8089b5c <__aeabi_dsub>
 8089476:	4602      	mov	r2, r0
 8089478:	460b      	mov	r3, r1
 808947a:	2000      	movs	r0, #0
 808947c:	4937      	ldr	r1, [pc, #220]	; (808955c <__ieee754_pow+0x8bc>)
 808947e:	f000 fb6d 	bl	8089b5c <__aeabi_dsub>
 8089482:	448a      	add	sl, r1
 8089484:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
 8089488:	f2c0 8135 	blt.w	80896f6 <__ieee754_pow+0xa56>
 808948c:	4651      	mov	r1, sl
 808948e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8089492:	f000 fd1b 	bl	8089ecc <__aeabi_dmul>
 8089496:	e9cd 0100 	strd	r0, r1, [sp]
 808949a:	e447      	b.n	8088d2c <__ieee754_pow+0x8c>
 808949c:	2e00      	cmp	r6, #0
 808949e:	f6ff acb1 	blt.w	8088e04 <__ieee754_pow+0x164>
 80894a2:	2300      	movs	r3, #0
 80894a4:	2400      	movs	r4, #0
 80894a6:	e9cd 3400 	strd	r3, r4, [sp]
 80894aa:	e43f      	b.n	8088d2c <__ieee754_pow+0x8c>
 80894ac:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 8089568 <__ieee754_pow+0x8c8>
 80894b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80894b4:	4563      	cmp	r3, ip
 80894b6:	f340 80da 	ble.w	808966e <__ieee754_pow+0x9ce>
 80894ba:	4b2c      	ldr	r3, [pc, #176]	; (808956c <__ieee754_pow+0x8cc>)
 80894bc:	440b      	add	r3, r1
 80894be:	4303      	orrs	r3, r0
 80894c0:	d10a      	bne.n	80894d8 <__ieee754_pow+0x838>
 80894c2:	4622      	mov	r2, r4
 80894c4:	462b      	mov	r3, r5
 80894c6:	f000 fb49 	bl	8089b5c <__aeabi_dsub>
 80894ca:	4632      	mov	r2, r6
 80894cc:	463b      	mov	r3, r7
 80894ce:	f000 ff83 	bl	808a3d8 <__aeabi_dcmpge>
 80894d2:	2800      	cmp	r0, #0
 80894d4:	f43f aef7 	beq.w	80892c6 <__ieee754_pow+0x626>
 80894d8:	a31d      	add	r3, pc, #116	; (adr r3, 8089550 <__ieee754_pow+0x8b0>)
 80894da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80894de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80894e2:	f000 fcf3 	bl	8089ecc <__aeabi_dmul>
 80894e6:	a31a      	add	r3, pc, #104	; (adr r3, 8089550 <__ieee754_pow+0x8b0>)
 80894e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80894ec:	f000 fcee 	bl	8089ecc <__aeabi_dmul>
 80894f0:	e9cd 0100 	strd	r0, r1, [sp]
 80894f4:	e41a      	b.n	8088d2c <__ieee754_pow+0x8c>
 80894f6:	2e00      	cmp	r6, #0
 80894f8:	dad3      	bge.n	80894a2 <__ieee754_pow+0x802>
 80894fa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80894fe:	f8cd 8000 	str.w	r8, [sp]
 8089502:	9301      	str	r3, [sp, #4]
 8089504:	e412      	b.n	8088d2c <__ieee754_pow+0x8c>
 8089506:	bf00      	nop
 8089508:	652b82fe 	.word	0x652b82fe
 808950c:	3c971547 	.word	0x3c971547
 8089510:	00000000 	.word	0x00000000
 8089514:	3fe62e43 	.word	0x3fe62e43
 8089518:	fefa39ef 	.word	0xfefa39ef
 808951c:	3fe62e42 	.word	0x3fe62e42
 8089520:	0ca86c39 	.word	0x0ca86c39
 8089524:	be205c61 	.word	0xbe205c61
 8089528:	72bea4d0 	.word	0x72bea4d0
 808952c:	3e663769 	.word	0x3e663769
 8089530:	c5d26bf1 	.word	0xc5d26bf1
 8089534:	3ebbbd41 	.word	0x3ebbbd41
 8089538:	af25de2c 	.word	0xaf25de2c
 808953c:	3f11566a 	.word	0x3f11566a
 8089540:	16bebd93 	.word	0x16bebd93
 8089544:	3f66c16c 	.word	0x3f66c16c
 8089548:	5555553e 	.word	0x5555553e
 808954c:	3fc55555 	.word	0x3fc55555
 8089550:	c2f8f359 	.word	0xc2f8f359
 8089554:	01a56e1f 	.word	0x01a56e1f
 8089558:	bff00000 	.word	0xbff00000
 808955c:	3ff00000 	.word	0x3ff00000
 8089560:	408fffff 	.word	0x408fffff
 8089564:	000fffff 	.word	0x000fffff
 8089568:	4090cbff 	.word	0x4090cbff
 808956c:	3f6f3400 	.word	0x3f6f3400
 8089570:	429c      	cmp	r4, r3
 8089572:	db93      	blt.n	808949c <__ieee754_pow+0x7fc>
 8089574:	4b7a      	ldr	r3, [pc, #488]	; (8089760 <__ieee754_pow+0xac0>)
 8089576:	429c      	cmp	r4, r3
 8089578:	f73f ac41 	bgt.w	8088dfe <__ieee754_pow+0x15e>
 808957c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8089580:	2200      	movs	r2, #0
 8089582:	4b77      	ldr	r3, [pc, #476]	; (8089760 <__ieee754_pow+0xac0>)
 8089584:	f000 faea 	bl	8089b5c <__aeabi_dsub>
 8089588:	a367      	add	r3, pc, #412	; (adr r3, 8089728 <__ieee754_pow+0xa88>)
 808958a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808958e:	4604      	mov	r4, r0
 8089590:	460d      	mov	r5, r1
 8089592:	f000 fc9b 	bl	8089ecc <__aeabi_dmul>
 8089596:	a366      	add	r3, pc, #408	; (adr r3, 8089730 <__ieee754_pow+0xa90>)
 8089598:	e9d3 2300 	ldrd	r2, r3, [r3]
 808959c:	4682      	mov	sl, r0
 808959e:	468b      	mov	fp, r1
 80895a0:	4620      	mov	r0, r4
 80895a2:	4629      	mov	r1, r5
 80895a4:	f000 fc92 	bl	8089ecc <__aeabi_dmul>
 80895a8:	2200      	movs	r2, #0
 80895aa:	e9cd 0100 	strd	r0, r1, [sp]
 80895ae:	4b6d      	ldr	r3, [pc, #436]	; (8089764 <__ieee754_pow+0xac4>)
 80895b0:	4620      	mov	r0, r4
 80895b2:	4629      	mov	r1, r5
 80895b4:	f000 fc8a 	bl	8089ecc <__aeabi_dmul>
 80895b8:	4602      	mov	r2, r0
 80895ba:	460b      	mov	r3, r1
 80895bc:	a15e      	add	r1, pc, #376	; (adr r1, 8089738 <__ieee754_pow+0xa98>)
 80895be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80895c2:	f000 facb 	bl	8089b5c <__aeabi_dsub>
 80895c6:	4622      	mov	r2, r4
 80895c8:	462b      	mov	r3, r5
 80895ca:	f000 fc7f 	bl	8089ecc <__aeabi_dmul>
 80895ce:	4602      	mov	r2, r0
 80895d0:	460b      	mov	r3, r1
 80895d2:	2000      	movs	r0, #0
 80895d4:	4964      	ldr	r1, [pc, #400]	; (8089768 <__ieee754_pow+0xac8>)
 80895d6:	f000 fac1 	bl	8089b5c <__aeabi_dsub>
 80895da:	4622      	mov	r2, r4
 80895dc:	4606      	mov	r6, r0
 80895de:	460f      	mov	r7, r1
 80895e0:	462b      	mov	r3, r5
 80895e2:	4620      	mov	r0, r4
 80895e4:	4629      	mov	r1, r5
 80895e6:	f000 fc71 	bl	8089ecc <__aeabi_dmul>
 80895ea:	4602      	mov	r2, r0
 80895ec:	460b      	mov	r3, r1
 80895ee:	4630      	mov	r0, r6
 80895f0:	4639      	mov	r1, r7
 80895f2:	f000 fc6b 	bl	8089ecc <__aeabi_dmul>
 80895f6:	a352      	add	r3, pc, #328	; (adr r3, 8089740 <__ieee754_pow+0xaa0>)
 80895f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80895fc:	f000 fc66 	bl	8089ecc <__aeabi_dmul>
 8089600:	4602      	mov	r2, r0
 8089602:	460b      	mov	r3, r1
 8089604:	e9dd 0100 	ldrd	r0, r1, [sp]
 8089608:	f000 faa8 	bl	8089b5c <__aeabi_dsub>
 808960c:	4606      	mov	r6, r0
 808960e:	460f      	mov	r7, r1
 8089610:	4632      	mov	r2, r6
 8089612:	463b      	mov	r3, r7
 8089614:	4650      	mov	r0, sl
 8089616:	4659      	mov	r1, fp
 8089618:	f000 faa2 	bl	8089b60 <__adddf3>
 808961c:	2400      	movs	r4, #0
 808961e:	4652      	mov	r2, sl
 8089620:	465b      	mov	r3, fp
 8089622:	460d      	mov	r5, r1
 8089624:	4620      	mov	r0, r4
 8089626:	e5e3      	b.n	80891f0 <__ieee754_pow+0x550>
 8089628:	2500      	movs	r5, #0
 808962a:	e43b      	b.n	8088ea4 <__ieee754_pow+0x204>
 808962c:	465a      	mov	r2, fp
 808962e:	2000      	movs	r0, #0
 8089630:	4653      	mov	r3, sl
 8089632:	494b      	ldr	r1, [pc, #300]	; (8089760 <__ieee754_pow+0xac0>)
 8089634:	f000 fd74 	bl	808a120 <__aeabi_ddiv>
 8089638:	e9cd 0100 	strd	r0, r1, [sp]
 808963c:	f7ff bb76 	b.w	8088d2c <__ieee754_pow+0x8c>
 8089640:	465a      	mov	r2, fp
 8089642:	4658      	mov	r0, fp
 8089644:	4653      	mov	r3, sl
 8089646:	4651      	mov	r1, sl
 8089648:	f000 fc40 	bl	8089ecc <__aeabi_dmul>
 808964c:	e9cd 0100 	strd	r0, r1, [sp]
 8089650:	f7ff bb6c 	b.w	8088d2c <__ieee754_pow+0x8c>
 8089654:	2b00      	cmp	r3, #0
 8089656:	d140      	bne.n	80896da <__ieee754_pow+0xa3a>
 8089658:	f1c2 0214 	rsb	r2, r2, #20
 808965c:	fa45 f102 	asr.w	r1, r5, r2
 8089660:	fa01 f202 	lsl.w	r2, r1, r2
 8089664:	42aa      	cmp	r2, r5
 8089666:	d054      	beq.n	8089712 <__ieee754_pow+0xa72>
 8089668:	9302      	str	r3, [sp, #8]
 808966a:	f7ff bb3e 	b.w	8088cea <__ieee754_pow+0x4a>
 808966e:	4a3e      	ldr	r2, [pc, #248]	; (8089768 <__ieee754_pow+0xac8>)
 8089670:	4293      	cmp	r3, r2
 8089672:	dc55      	bgt.n	8089720 <__ieee754_pow+0xa80>
 8089674:	e9dd 2300 	ldrd	r2, r3, [sp]
 8089678:	4692      	mov	sl, r2
 808967a:	4693      	mov	fp, r2
 808967c:	e654      	b.n	8089328 <__ieee754_pow+0x688>
 808967e:	a332      	add	r3, pc, #200	; (adr r3, 8089748 <__ieee754_pow+0xaa8>)
 8089680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8089684:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8089688:	f000 fc20 	bl	8089ecc <__aeabi_dmul>
 808968c:	a32e      	add	r3, pc, #184	; (adr r3, 8089748 <__ieee754_pow+0xaa8>)
 808968e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8089692:	f000 fc1b 	bl	8089ecc <__aeabi_dmul>
 8089696:	e9cd 0100 	strd	r0, r1, [sp]
 808969a:	f7ff bb47 	b.w	8088d2c <__ieee754_pow+0x8c>
 808969e:	9b02      	ldr	r3, [sp, #8]
 80896a0:	2b01      	cmp	r3, #1
 80896a2:	f47f ab43 	bne.w	8088d2c <__ieee754_pow+0x8c>
 80896a6:	e9dd 4500 	ldrd	r4, r5, [sp]
 80896aa:	4622      	mov	r2, r4
 80896ac:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80896b0:	e9cd 2300 	strd	r2, r3, [sp]
 80896b4:	f7ff bb3a 	b.w	8088d2c <__ieee754_pow+0x8c>
 80896b8:	2200      	movs	r2, #0
 80896ba:	4b2c      	ldr	r3, [pc, #176]	; (808976c <__ieee754_pow+0xacc>)
 80896bc:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 80896c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80896c4:	a322      	add	r3, pc, #136	; (adr r3, 8089750 <__ieee754_pow+0xab0>)
 80896c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80896ca:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80896ce:	a322      	add	r3, pc, #136	; (adr r3, 8089758 <__ieee754_pow+0xab8>)
 80896d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80896d4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80896d8:	e405      	b.n	8088ee6 <__ieee754_pow+0x246>
 80896da:	4658      	mov	r0, fp
 80896dc:	4651      	mov	r1, sl
 80896de:	f000 f90d 	bl	80898fc <fabs>
 80896e2:	465b      	mov	r3, fp
 80896e4:	e9cd 0100 	strd	r0, r1, [sp]
 80896e8:	2b00      	cmp	r3, #0
 80896ea:	f47f abb2 	bne.w	8088e52 <__ieee754_pow+0x1b2>
 80896ee:	f8cd b008 	str.w	fp, [sp, #8]
 80896f2:	f7ff bb4b 	b.w	8088d8c <__ieee754_pow+0xec>
 80896f6:	465a      	mov	r2, fp
 80896f8:	f000 f9ae 	bl	8089a58 <scalbn>
 80896fc:	e6c7      	b.n	808948e <__ieee754_pow+0x7ee>
 80896fe:	f001 0101 	and.w	r1, r1, #1
 8089702:	f1c1 0202 	rsb	r2, r1, #2
 8089706:	9202      	str	r2, [sp, #8]
 8089708:	2b00      	cmp	r3, #0
 808970a:	f43f aaee 	beq.w	8088cea <__ieee754_pow+0x4a>
 808970e:	f7ff bb35 	b.w	8088d7c <__ieee754_pow+0xdc>
 8089712:	f001 0101 	and.w	r1, r1, #1
 8089716:	f1c1 0302 	rsb	r3, r1, #2
 808971a:	9302      	str	r3, [sp, #8]
 808971c:	f7ff bae5 	b.w	8088cea <__ieee754_pow+0x4a>
 8089720:	151b      	asrs	r3, r3, #20
 8089722:	e5d2      	b.n	80892ca <__ieee754_pow+0x62a>
 8089724:	f3af 8000 	nop.w
 8089728:	60000000 	.word	0x60000000
 808972c:	3ff71547 	.word	0x3ff71547
 8089730:	f85ddf44 	.word	0xf85ddf44
 8089734:	3e54ae0b 	.word	0x3e54ae0b
 8089738:	55555555 	.word	0x55555555
 808973c:	3fd55555 	.word	0x3fd55555
 8089740:	652b82fe 	.word	0x652b82fe
 8089744:	3ff71547 	.word	0x3ff71547
 8089748:	8800759c 	.word	0x8800759c
 808974c:	7e37e43c 	.word	0x7e37e43c
 8089750:	40000000 	.word	0x40000000
 8089754:	3fe2b803 	.word	0x3fe2b803
 8089758:	43cfd006 	.word	0x43cfd006
 808975c:	3e4cfdeb 	.word	0x3e4cfdeb
 8089760:	3ff00000 	.word	0x3ff00000
 8089764:	3fd00000 	.word	0x3fd00000
 8089768:	3fe00000 	.word	0x3fe00000
 808976c:	3ff80000 	.word	0x3ff80000

08089770 <__ieee754_sqrt>:
 8089770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8089774:	4e60      	ldr	r6, [pc, #384]	; (80898f8 <__ieee754_sqrt+0x188>)
 8089776:	4605      	mov	r5, r0
 8089778:	ea36 0201 	bics.w	r2, r6, r1
 808977c:	460c      	mov	r4, r1
 808977e:	f000 809e 	beq.w	80898be <__ieee754_sqrt+0x14e>
 8089782:	2900      	cmp	r1, #0
 8089784:	460b      	mov	r3, r1
 8089786:	4684      	mov	ip, r0
 8089788:	dd54      	ble.n	8089834 <__ieee754_sqrt+0xc4>
 808978a:	1509      	asrs	r1, r1, #20
 808978c:	d062      	beq.n	8089854 <__ieee754_sqrt+0xe4>
 808978e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8089792:	07c8      	lsls	r0, r1, #31
 8089794:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8089798:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 808979c:	d404      	bmi.n	80897a8 <__ieee754_sqrt+0x38>
 808979e:	005b      	lsls	r3, r3, #1
 80897a0:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
 80897a4:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80897a8:	2600      	movs	r6, #0
 80897aa:	ea4f 72dc 	mov.w	r2, ip, lsr #31
 80897ae:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80897b2:	f04f 0e16 	mov.w	lr, #22
 80897b6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80897ba:	4634      	mov	r4, r6
 80897bc:	107f      	asrs	r7, r7, #1
 80897be:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80897c2:	18a1      	adds	r1, r4, r2
 80897c4:	4299      	cmp	r1, r3
 80897c6:	dc02      	bgt.n	80897ce <__ieee754_sqrt+0x5e>
 80897c8:	1a5b      	subs	r3, r3, r1
 80897ca:	188c      	adds	r4, r1, r2
 80897cc:	4416      	add	r6, r2
 80897ce:	005b      	lsls	r3, r3, #1
 80897d0:	f1be 0e01 	subs.w	lr, lr, #1
 80897d4:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
 80897d8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80897dc:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80897e0:	d1ef      	bne.n	80897c2 <__ieee754_sqrt+0x52>
 80897e2:	4675      	mov	r5, lr
 80897e4:	2020      	movs	r0, #32
 80897e6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80897ea:	e00a      	b.n	8089802 <__ieee754_sqrt+0x92>
 80897ec:	d043      	beq.n	8089876 <__ieee754_sqrt+0x106>
 80897ee:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 80897f2:	3801      	subs	r0, #1
 80897f4:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80897f8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80897fc:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8089800:	d042      	beq.n	8089888 <__ieee754_sqrt+0x118>
 8089802:	42a3      	cmp	r3, r4
 8089804:	eb02 010e 	add.w	r1, r2, lr
 8089808:	ddf0      	ble.n	80897ec <__ieee754_sqrt+0x7c>
 808980a:	2900      	cmp	r1, #0
 808980c:	eb01 0e02 	add.w	lr, r1, r2
 8089810:	db0a      	blt.n	8089828 <__ieee754_sqrt+0xb8>
 8089812:	46a0      	mov	r8, r4
 8089814:	1b1b      	subs	r3, r3, r4
 8089816:	4561      	cmp	r1, ip
 8089818:	bf88      	it	hi
 808981a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 808981e:	4644      	mov	r4, r8
 8089820:	ebac 0c01 	sub.w	ip, ip, r1
 8089824:	4415      	add	r5, r2
 8089826:	e7e2      	b.n	80897ee <__ieee754_sqrt+0x7e>
 8089828:	f1be 0f00 	cmp.w	lr, #0
 808982c:	dbf1      	blt.n	8089812 <__ieee754_sqrt+0xa2>
 808982e:	f104 0801 	add.w	r8, r4, #1
 8089832:	e7ef      	b.n	8089814 <__ieee754_sqrt+0xa4>
 8089834:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8089838:	4302      	orrs	r2, r0
 808983a:	d036      	beq.n	80898aa <__ieee754_sqrt+0x13a>
 808983c:	2900      	cmp	r1, #0
 808983e:	d14c      	bne.n	80898da <__ieee754_sqrt+0x16a>
 8089840:	ea4f 22dc 	mov.w	r2, ip, lsr #11
 8089844:	4613      	mov	r3, r2
 8089846:	3915      	subs	r1, #21
 8089848:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
 808984c:	2a00      	cmp	r2, #0
 808984e:	d0f7      	beq.n	8089840 <__ieee754_sqrt+0xd0>
 8089850:	02d6      	lsls	r6, r2, #11
 8089852:	d44c      	bmi.n	80898ee <__ieee754_sqrt+0x17e>
 8089854:	2000      	movs	r0, #0
 8089856:	005b      	lsls	r3, r3, #1
 8089858:	02dd      	lsls	r5, r3, #11
 808985a:	4604      	mov	r4, r0
 808985c:	f100 0001 	add.w	r0, r0, #1
 8089860:	d5f9      	bpl.n	8089856 <__ieee754_sqrt+0xe6>
 8089862:	461a      	mov	r2, r3
 8089864:	4663      	mov	r3, ip
 8089866:	fa0c fc00 	lsl.w	ip, ip, r0
 808986a:	f1c0 0020 	rsb	r0, r0, #32
 808986e:	40c3      	lsrs	r3, r0
 8089870:	1b09      	subs	r1, r1, r4
 8089872:	4313      	orrs	r3, r2
 8089874:	e78b      	b.n	808978e <__ieee754_sqrt+0x1e>
 8089876:	4561      	cmp	r1, ip
 8089878:	d8b9      	bhi.n	80897ee <__ieee754_sqrt+0x7e>
 808987a:	2900      	cmp	r1, #0
 808987c:	eb01 0e02 	add.w	lr, r1, r2
 8089880:	dbd2      	blt.n	8089828 <__ieee754_sqrt+0xb8>
 8089882:	4698      	mov	r8, r3
 8089884:	2300      	movs	r3, #0
 8089886:	e7ca      	b.n	808981e <__ieee754_sqrt+0xae>
 8089888:	ea53 030c 	orrs.w	r3, r3, ip
 808988c:	d111      	bne.n	80898b2 <__ieee754_sqrt+0x142>
 808988e:	0868      	lsrs	r0, r5, #1
 8089890:	1073      	asrs	r3, r6, #1
 8089892:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8089896:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 808989a:	07f2      	lsls	r2, r6, #31
 808989c:	bf48      	it	mi
 808989e:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
 80898a2:	eb03 5907 	add.w	r9, r3, r7, lsl #20
 80898a6:	4605      	mov	r5, r0
 80898a8:	464c      	mov	r4, r9
 80898aa:	4628      	mov	r0, r5
 80898ac:	4621      	mov	r1, r4
 80898ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80898b2:	1c69      	adds	r1, r5, #1
 80898b4:	bf16      	itet	ne
 80898b6:	1c68      	addne	r0, r5, #1
 80898b8:	3601      	addeq	r6, #1
 80898ba:	0840      	lsrne	r0, r0, #1
 80898bc:	e7e8      	b.n	8089890 <__ieee754_sqrt+0x120>
 80898be:	4602      	mov	r2, r0
 80898c0:	460b      	mov	r3, r1
 80898c2:	f000 fb03 	bl	8089ecc <__aeabi_dmul>
 80898c6:	462a      	mov	r2, r5
 80898c8:	4623      	mov	r3, r4
 80898ca:	f000 f949 	bl	8089b60 <__adddf3>
 80898ce:	4605      	mov	r5, r0
 80898d0:	460c      	mov	r4, r1
 80898d2:	4628      	mov	r0, r5
 80898d4:	4621      	mov	r1, r4
 80898d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80898da:	4602      	mov	r2, r0
 80898dc:	f000 f93e 	bl	8089b5c <__aeabi_dsub>
 80898e0:	4602      	mov	r2, r0
 80898e2:	460b      	mov	r3, r1
 80898e4:	f000 fc1c 	bl	808a120 <__aeabi_ddiv>
 80898e8:	4605      	mov	r5, r0
 80898ea:	460c      	mov	r4, r1
 80898ec:	e7dd      	b.n	80898aa <__ieee754_sqrt+0x13a>
 80898ee:	4663      	mov	r3, ip
 80898f0:	2020      	movs	r0, #32
 80898f2:	f04f 34ff 	mov.w	r4, #4294967295
 80898f6:	e7ba      	b.n	808986e <__ieee754_sqrt+0xfe>
 80898f8:	7ff00000 	.word	0x7ff00000

080898fc <fabs>:
 80898fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8089900:	4770      	bx	lr
 8089902:	bf00      	nop

08089904 <finite>:
 8089904:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8089908:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 808990c:	0fc0      	lsrs	r0, r0, #31
 808990e:	4770      	bx	lr

08089910 <nan>:
 8089910:	2000      	movs	r0, #0
 8089912:	4901      	ldr	r1, [pc, #4]	; (8089918 <nan+0x8>)
 8089914:	4770      	bx	lr
 8089916:	bf00      	nop
 8089918:	7ff80000 	.word	0x7ff80000

0808991c <rint>:
 808991c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808991e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8089922:	f2a5 3cff 	subw	ip, r5, #1023	; 0x3ff
 8089926:	f1bc 0f13 	cmp.w	ip, #19
 808992a:	4602      	mov	r2, r0
 808992c:	460b      	mov	r3, r1
 808992e:	460c      	mov	r4, r1
 8089930:	4686      	mov	lr, r0
 8089932:	b083      	sub	sp, #12
 8089934:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 8089938:	dc65      	bgt.n	8089a06 <rint+0xea>
 808993a:	f1bc 0f00 	cmp.w	ip, #0
 808993e:	db30      	blt.n	80899a2 <rint+0x86>
 8089940:	4942      	ldr	r1, [pc, #264]	; (8089a4c <rint+0x130>)
 8089942:	fa41 f10c 	asr.w	r1, r1, ip
 8089946:	ea03 0001 	and.w	r0, r3, r1
 808994a:	4310      	orrs	r0, r2
 808994c:	d061      	beq.n	8089a12 <rint+0xf6>
 808994e:	ea03 0351 	and.w	r3, r3, r1, lsr #1
 8089952:	ea52 0e03 	orrs.w	lr, r2, r3
 8089956:	ea4f 0151 	mov.w	r1, r1, lsr #1
 808995a:	d00d      	beq.n	8089978 <rint+0x5c>
 808995c:	ea24 0101 	bic.w	r1, r4, r1
 8089960:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8089964:	f1bc 0f13 	cmp.w	ip, #19
 8089968:	bf0c      	ite	eq
 808996a:	f04f 4e00 	moveq.w	lr, #2147483648	; 0x80000000
 808996e:	f04f 0e00 	movne.w	lr, #0
 8089972:	fa44 f40c 	asr.w	r4, r4, ip
 8089976:	430c      	orrs	r4, r1
 8089978:	4935      	ldr	r1, [pc, #212]	; (8089a50 <rint+0x134>)
 808997a:	4623      	mov	r3, r4
 808997c:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 8089980:	e9d6 6700 	ldrd	r6, r7, [r6]
 8089984:	4672      	mov	r2, lr
 8089986:	4630      	mov	r0, r6
 8089988:	4639      	mov	r1, r7
 808998a:	f000 f8e9 	bl	8089b60 <__adddf3>
 808998e:	e9cd 0100 	strd	r0, r1, [sp]
 8089992:	e9dd 0100 	ldrd	r0, r1, [sp]
 8089996:	4632      	mov	r2, r6
 8089998:	463b      	mov	r3, r7
 808999a:	f000 f8df 	bl	8089b5c <__aeabi_dsub>
 808999e:	b003      	add	sp, #12
 80899a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80899a2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80899a6:	4301      	orrs	r1, r0
 80899a8:	4619      	mov	r1, r3
 80899aa:	d0f8      	beq.n	808999e <rint+0x82>
 80899ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80899b0:	ea43 0e00 	orr.w	lr, r3, r0
 80899b4:	f1ce 0300 	rsb	r3, lr, #0
 80899b8:	ea43 030e 	orr.w	r3, r3, lr
 80899bc:	0c62      	lsrs	r2, r4, #17
 80899be:	0b1b      	lsrs	r3, r3, #12
 80899c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80899c4:	0452      	lsls	r2, r2, #17
 80899c6:	ea43 0102 	orr.w	r1, r3, r2
 80899ca:	460b      	mov	r3, r1
 80899cc:	4920      	ldr	r1, [pc, #128]	; (8089a50 <rint+0x134>)
 80899ce:	4602      	mov	r2, r0
 80899d0:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 80899d4:	e9d6 6700 	ldrd	r6, r7, [r6]
 80899d8:	4630      	mov	r0, r6
 80899da:	4639      	mov	r1, r7
 80899dc:	f000 f8c0 	bl	8089b60 <__adddf3>
 80899e0:	e9cd 0100 	strd	r0, r1, [sp]
 80899e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80899e8:	4632      	mov	r2, r6
 80899ea:	463b      	mov	r3, r7
 80899ec:	f000 f8b6 	bl	8089b5c <__aeabi_dsub>
 80899f0:	4602      	mov	r2, r0
 80899f2:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 80899f6:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80899fa:	ea41 0304 	orr.w	r3, r1, r4
 80899fe:	4610      	mov	r0, r2
 8089a00:	4619      	mov	r1, r3
 8089a02:	b003      	add	sp, #12
 8089a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8089a06:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 8089a0a:	dd06      	ble.n	8089a1a <rint+0xfe>
 8089a0c:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 8089a10:	d018      	beq.n	8089a44 <rint+0x128>
 8089a12:	4610      	mov	r0, r2
 8089a14:	4619      	mov	r1, r3
 8089a16:	b003      	add	sp, #12
 8089a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8089a1a:	f04f 31ff 	mov.w	r1, #4294967295
 8089a1e:	f2a5 4513 	subw	r5, r5, #1043	; 0x413
 8089a22:	40e9      	lsrs	r1, r5
 8089a24:	4208      	tst	r0, r1
 8089a26:	d0f4      	beq.n	8089a12 <rint+0xf6>
 8089a28:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 8089a2c:	ea4f 0351 	mov.w	r3, r1, lsr #1
 8089a30:	d0a2      	beq.n	8089978 <rint+0x5c>
 8089a32:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
 8089a36:	ea20 0303 	bic.w	r3, r0, r3
 8089a3a:	fa4e f505 	asr.w	r5, lr, r5
 8089a3e:	ea43 0e05 	orr.w	lr, r3, r5
 8089a42:	e799      	b.n	8089978 <rint+0x5c>
 8089a44:	f000 f88c 	bl	8089b60 <__adddf3>
 8089a48:	e7a9      	b.n	808999e <rint+0x82>
 8089a4a:	bf00      	nop
 8089a4c:	000fffff 	.word	0x000fffff
 8089a50:	0808bda0 	.word	0x0808bda0
 8089a54:	00000000 	.word	0x00000000

08089a58 <scalbn>:
 8089a58:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8089a5c:	b570      	push	{r4, r5, r6, lr}
 8089a5e:	468c      	mov	ip, r1
 8089a60:	4604      	mov	r4, r0
 8089a62:	460d      	mov	r5, r1
 8089a64:	4616      	mov	r6, r2
 8089a66:	bb7b      	cbnz	r3, 8089ac8 <scalbn+0x70>
 8089a68:	4603      	mov	r3, r0
 8089a6a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8089a6e:	ea5c 0303 	orrs.w	r3, ip, r3
 8089a72:	d028      	beq.n	8089ac6 <scalbn+0x6e>
 8089a74:	4b32      	ldr	r3, [pc, #200]	; (8089b40 <scalbn+0xe8>)
 8089a76:	2200      	movs	r2, #0
 8089a78:	f000 fa28 	bl	8089ecc <__aeabi_dmul>
 8089a7c:	4b31      	ldr	r3, [pc, #196]	; (8089b44 <scalbn+0xec>)
 8089a7e:	4604      	mov	r4, r0
 8089a80:	429e      	cmp	r6, r3
 8089a82:	460d      	mov	r5, r1
 8089a84:	db1a      	blt.n	8089abc <scalbn+0x64>
 8089a86:	468c      	mov	ip, r1
 8089a88:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8089a8c:	3b36      	subs	r3, #54	; 0x36
 8089a8e:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8089a92:	4433      	add	r3, r6
 8089a94:	4293      	cmp	r3, r2
 8089a96:	dc20      	bgt.n	8089ada <scalbn+0x82>
 8089a98:	2b00      	cmp	r3, #0
 8089a9a:	dc3e      	bgt.n	8089b1a <scalbn+0xc2>
 8089a9c:	f113 0f35 	cmn.w	r3, #53	; 0x35
 8089aa0:	da2c      	bge.n	8089afc <scalbn+0xa4>
 8089aa2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8089aa6:	429e      	cmp	r6, r3
 8089aa8:	dc17      	bgt.n	8089ada <scalbn+0x82>
 8089aaa:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8089aae:	f043 71d2 	orr.w	r1, r3, #27525120	; 0x1a40000
 8089ab2:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8089ab6:	4824      	ldr	r0, [pc, #144]	; (8089b48 <scalbn+0xf0>)
 8089ab8:	f041 011f 	orr.w	r1, r1, #31
 8089abc:	a31c      	add	r3, pc, #112	; (adr r3, 8089b30 <scalbn+0xd8>)
 8089abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8089ac2:	f000 fa03 	bl	8089ecc <__aeabi_dmul>
 8089ac6:	bd70      	pop	{r4, r5, r6, pc}
 8089ac8:	f240 7eff 	movw	lr, #2047	; 0x7ff
 8089acc:	4573      	cmp	r3, lr
 8089ace:	d1de      	bne.n	8089a8e <scalbn+0x36>
 8089ad0:	4602      	mov	r2, r0
 8089ad2:	460b      	mov	r3, r1
 8089ad4:	f000 f844 	bl	8089b60 <__adddf3>
 8089ad8:	bd70      	pop	{r4, r5, r6, pc}
 8089ada:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8089ade:	f043 41fc 	orr.w	r1, r3, #2113929216	; 0x7e000000
 8089ae2:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8089ae6:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8089aea:	a313      	add	r3, pc, #76	; (adr r3, 8089b38 <scalbn+0xe0>)
 8089aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8089af0:	4816      	ldr	r0, [pc, #88]	; (8089b4c <scalbn+0xf4>)
 8089af2:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8089af6:	f000 f9e9 	bl	8089ecc <__aeabi_dmul>
 8089afa:	bd70      	pop	{r4, r5, r6, pc}
 8089afc:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
 8089b00:	f103 0136 	add.w	r1, r3, #54	; 0x36
 8089b04:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
 8089b08:	ea4c 5501 	orr.w	r5, ip, r1, lsl #20
 8089b0c:	2200      	movs	r2, #0
 8089b0e:	4620      	mov	r0, r4
 8089b10:	4629      	mov	r1, r5
 8089b12:	4b0f      	ldr	r3, [pc, #60]	; (8089b50 <scalbn+0xf8>)
 8089b14:	f000 f9da 	bl	8089ecc <__aeabi_dmul>
 8089b18:	bd70      	pop	{r4, r5, r6, pc}
 8089b1a:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
 8089b1e:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
 8089b22:	4620      	mov	r0, r4
 8089b24:	ea4c 5103 	orr.w	r1, ip, r3, lsl #20
 8089b28:	bd70      	pop	{r4, r5, r6, pc}
 8089b2a:	bf00      	nop
 8089b2c:	f3af 8000 	nop.w
 8089b30:	c2f8f359 	.word	0xc2f8f359
 8089b34:	01a56e1f 	.word	0x01a56e1f
 8089b38:	8800759c 	.word	0x8800759c
 8089b3c:	7e37e43c 	.word	0x7e37e43c
 8089b40:	43500000 	.word	0x43500000
 8089b44:	ffff3cb0 	.word	0xffff3cb0
 8089b48:	c2f8f359 	.word	0xc2f8f359
 8089b4c:	8800759c 	.word	0x8800759c
 8089b50:	3c900000 	.word	0x3c900000

08089b54 <__aeabi_drsub>:
 8089b54:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8089b58:	e002      	b.n	8089b60 <__adddf3>
 8089b5a:	bf00      	nop

08089b5c <__aeabi_dsub>:
 8089b5c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08089b60 <__adddf3>:
 8089b60:	b530      	push	{r4, r5, lr}
 8089b62:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8089b66:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8089b6a:	ea94 0f05 	teq	r4, r5
 8089b6e:	bf08      	it	eq
 8089b70:	ea90 0f02 	teqeq	r0, r2
 8089b74:	bf1f      	itttt	ne
 8089b76:	ea54 0c00 	orrsne.w	ip, r4, r0
 8089b7a:	ea55 0c02 	orrsne.w	ip, r5, r2
 8089b7e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8089b82:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8089b86:	f000 80e2 	beq.w	8089d4e <__adddf3+0x1ee>
 8089b8a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8089b8e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8089b92:	bfb8      	it	lt
 8089b94:	426d      	neglt	r5, r5
 8089b96:	dd0c      	ble.n	8089bb2 <__adddf3+0x52>
 8089b98:	442c      	add	r4, r5
 8089b9a:	ea80 0202 	eor.w	r2, r0, r2
 8089b9e:	ea81 0303 	eor.w	r3, r1, r3
 8089ba2:	ea82 0000 	eor.w	r0, r2, r0
 8089ba6:	ea83 0101 	eor.w	r1, r3, r1
 8089baa:	ea80 0202 	eor.w	r2, r0, r2
 8089bae:	ea81 0303 	eor.w	r3, r1, r3
 8089bb2:	2d36      	cmp	r5, #54	; 0x36
 8089bb4:	bf88      	it	hi
 8089bb6:	bd30      	pophi	{r4, r5, pc}
 8089bb8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8089bbc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8089bc0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8089bc4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8089bc8:	d002      	beq.n	8089bd0 <__adddf3+0x70>
 8089bca:	4240      	negs	r0, r0
 8089bcc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8089bd0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8089bd4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8089bd8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8089bdc:	d002      	beq.n	8089be4 <__adddf3+0x84>
 8089bde:	4252      	negs	r2, r2
 8089be0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8089be4:	ea94 0f05 	teq	r4, r5
 8089be8:	f000 80a7 	beq.w	8089d3a <__adddf3+0x1da>
 8089bec:	f1a4 0401 	sub.w	r4, r4, #1
 8089bf0:	f1d5 0e20 	rsbs	lr, r5, #32
 8089bf4:	db0d      	blt.n	8089c12 <__adddf3+0xb2>
 8089bf6:	fa02 fc0e 	lsl.w	ip, r2, lr
 8089bfa:	fa22 f205 	lsr.w	r2, r2, r5
 8089bfe:	1880      	adds	r0, r0, r2
 8089c00:	f141 0100 	adc.w	r1, r1, #0
 8089c04:	fa03 f20e 	lsl.w	r2, r3, lr
 8089c08:	1880      	adds	r0, r0, r2
 8089c0a:	fa43 f305 	asr.w	r3, r3, r5
 8089c0e:	4159      	adcs	r1, r3
 8089c10:	e00e      	b.n	8089c30 <__adddf3+0xd0>
 8089c12:	f1a5 0520 	sub.w	r5, r5, #32
 8089c16:	f10e 0e20 	add.w	lr, lr, #32
 8089c1a:	2a01      	cmp	r2, #1
 8089c1c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8089c20:	bf28      	it	cs
 8089c22:	f04c 0c02 	orrcs.w	ip, ip, #2
 8089c26:	fa43 f305 	asr.w	r3, r3, r5
 8089c2a:	18c0      	adds	r0, r0, r3
 8089c2c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8089c30:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8089c34:	d507      	bpl.n	8089c46 <__adddf3+0xe6>
 8089c36:	f04f 0e00 	mov.w	lr, #0
 8089c3a:	f1dc 0c00 	rsbs	ip, ip, #0
 8089c3e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8089c42:	eb6e 0101 	sbc.w	r1, lr, r1
 8089c46:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8089c4a:	d31b      	bcc.n	8089c84 <__adddf3+0x124>
 8089c4c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8089c50:	d30c      	bcc.n	8089c6c <__adddf3+0x10c>
 8089c52:	0849      	lsrs	r1, r1, #1
 8089c54:	ea5f 0030 	movs.w	r0, r0, rrx
 8089c58:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8089c5c:	f104 0401 	add.w	r4, r4, #1
 8089c60:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8089c64:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8089c68:	f080 809a 	bcs.w	8089da0 <__adddf3+0x240>
 8089c6c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8089c70:	bf08      	it	eq
 8089c72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8089c76:	f150 0000 	adcs.w	r0, r0, #0
 8089c7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8089c7e:	ea41 0105 	orr.w	r1, r1, r5
 8089c82:	bd30      	pop	{r4, r5, pc}
 8089c84:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8089c88:	4140      	adcs	r0, r0
 8089c8a:	eb41 0101 	adc.w	r1, r1, r1
 8089c8e:	3c01      	subs	r4, #1
 8089c90:	bf28      	it	cs
 8089c92:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8089c96:	d2e9      	bcs.n	8089c6c <__adddf3+0x10c>
 8089c98:	f091 0f00 	teq	r1, #0
 8089c9c:	bf04      	itt	eq
 8089c9e:	4601      	moveq	r1, r0
 8089ca0:	2000      	moveq	r0, #0
 8089ca2:	fab1 f381 	clz	r3, r1
 8089ca6:	bf08      	it	eq
 8089ca8:	3320      	addeq	r3, #32
 8089caa:	f1a3 030b 	sub.w	r3, r3, #11
 8089cae:	f1b3 0220 	subs.w	r2, r3, #32
 8089cb2:	da0c      	bge.n	8089cce <__adddf3+0x16e>
 8089cb4:	320c      	adds	r2, #12
 8089cb6:	dd08      	ble.n	8089cca <__adddf3+0x16a>
 8089cb8:	f102 0c14 	add.w	ip, r2, #20
 8089cbc:	f1c2 020c 	rsb	r2, r2, #12
 8089cc0:	fa01 f00c 	lsl.w	r0, r1, ip
 8089cc4:	fa21 f102 	lsr.w	r1, r1, r2
 8089cc8:	e00c      	b.n	8089ce4 <__adddf3+0x184>
 8089cca:	f102 0214 	add.w	r2, r2, #20
 8089cce:	bfd8      	it	le
 8089cd0:	f1c2 0c20 	rsble	ip, r2, #32
 8089cd4:	fa01 f102 	lsl.w	r1, r1, r2
 8089cd8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8089cdc:	bfdc      	itt	le
 8089cde:	ea41 010c 	orrle.w	r1, r1, ip
 8089ce2:	4090      	lslle	r0, r2
 8089ce4:	1ae4      	subs	r4, r4, r3
 8089ce6:	bfa2      	ittt	ge
 8089ce8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8089cec:	4329      	orrge	r1, r5
 8089cee:	bd30      	popge	{r4, r5, pc}
 8089cf0:	ea6f 0404 	mvn.w	r4, r4
 8089cf4:	3c1f      	subs	r4, #31
 8089cf6:	da1c      	bge.n	8089d32 <__adddf3+0x1d2>
 8089cf8:	340c      	adds	r4, #12
 8089cfa:	dc0e      	bgt.n	8089d1a <__adddf3+0x1ba>
 8089cfc:	f104 0414 	add.w	r4, r4, #20
 8089d00:	f1c4 0220 	rsb	r2, r4, #32
 8089d04:	fa20 f004 	lsr.w	r0, r0, r4
 8089d08:	fa01 f302 	lsl.w	r3, r1, r2
 8089d0c:	ea40 0003 	orr.w	r0, r0, r3
 8089d10:	fa21 f304 	lsr.w	r3, r1, r4
 8089d14:	ea45 0103 	orr.w	r1, r5, r3
 8089d18:	bd30      	pop	{r4, r5, pc}
 8089d1a:	f1c4 040c 	rsb	r4, r4, #12
 8089d1e:	f1c4 0220 	rsb	r2, r4, #32
 8089d22:	fa20 f002 	lsr.w	r0, r0, r2
 8089d26:	fa01 f304 	lsl.w	r3, r1, r4
 8089d2a:	ea40 0003 	orr.w	r0, r0, r3
 8089d2e:	4629      	mov	r1, r5
 8089d30:	bd30      	pop	{r4, r5, pc}
 8089d32:	fa21 f004 	lsr.w	r0, r1, r4
 8089d36:	4629      	mov	r1, r5
 8089d38:	bd30      	pop	{r4, r5, pc}
 8089d3a:	f094 0f00 	teq	r4, #0
 8089d3e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8089d42:	bf06      	itte	eq
 8089d44:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8089d48:	3401      	addeq	r4, #1
 8089d4a:	3d01      	subne	r5, #1
 8089d4c:	e74e      	b.n	8089bec <__adddf3+0x8c>
 8089d4e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8089d52:	bf18      	it	ne
 8089d54:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8089d58:	d029      	beq.n	8089dae <__adddf3+0x24e>
 8089d5a:	ea94 0f05 	teq	r4, r5
 8089d5e:	bf08      	it	eq
 8089d60:	ea90 0f02 	teqeq	r0, r2
 8089d64:	d005      	beq.n	8089d72 <__adddf3+0x212>
 8089d66:	ea54 0c00 	orrs.w	ip, r4, r0
 8089d6a:	bf04      	itt	eq
 8089d6c:	4619      	moveq	r1, r3
 8089d6e:	4610      	moveq	r0, r2
 8089d70:	bd30      	pop	{r4, r5, pc}
 8089d72:	ea91 0f03 	teq	r1, r3
 8089d76:	bf1e      	ittt	ne
 8089d78:	2100      	movne	r1, #0
 8089d7a:	2000      	movne	r0, #0
 8089d7c:	bd30      	popne	{r4, r5, pc}
 8089d7e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8089d82:	d105      	bne.n	8089d90 <__adddf3+0x230>
 8089d84:	0040      	lsls	r0, r0, #1
 8089d86:	4149      	adcs	r1, r1
 8089d88:	bf28      	it	cs
 8089d8a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8089d8e:	bd30      	pop	{r4, r5, pc}
 8089d90:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8089d94:	bf3c      	itt	cc
 8089d96:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8089d9a:	bd30      	popcc	{r4, r5, pc}
 8089d9c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8089da0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8089da4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8089da8:	f04f 0000 	mov.w	r0, #0
 8089dac:	bd30      	pop	{r4, r5, pc}
 8089dae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8089db2:	bf1a      	itte	ne
 8089db4:	4619      	movne	r1, r3
 8089db6:	4610      	movne	r0, r2
 8089db8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8089dbc:	bf1c      	itt	ne
 8089dbe:	460b      	movne	r3, r1
 8089dc0:	4602      	movne	r2, r0
 8089dc2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8089dc6:	bf06      	itte	eq
 8089dc8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8089dcc:	ea91 0f03 	teqeq	r1, r3
 8089dd0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8089dd4:	bd30      	pop	{r4, r5, pc}
 8089dd6:	bf00      	nop

08089dd8 <__aeabi_ui2d>:
 8089dd8:	f090 0f00 	teq	r0, #0
 8089ddc:	bf04      	itt	eq
 8089dde:	2100      	moveq	r1, #0
 8089de0:	4770      	bxeq	lr
 8089de2:	b530      	push	{r4, r5, lr}
 8089de4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8089de8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8089dec:	f04f 0500 	mov.w	r5, #0
 8089df0:	f04f 0100 	mov.w	r1, #0
 8089df4:	e750      	b.n	8089c98 <__adddf3+0x138>
 8089df6:	bf00      	nop

08089df8 <__aeabi_i2d>:
 8089df8:	f090 0f00 	teq	r0, #0
 8089dfc:	bf04      	itt	eq
 8089dfe:	2100      	moveq	r1, #0
 8089e00:	4770      	bxeq	lr
 8089e02:	b530      	push	{r4, r5, lr}
 8089e04:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8089e08:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8089e0c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8089e10:	bf48      	it	mi
 8089e12:	4240      	negmi	r0, r0
 8089e14:	f04f 0100 	mov.w	r1, #0
 8089e18:	e73e      	b.n	8089c98 <__adddf3+0x138>
 8089e1a:	bf00      	nop

08089e1c <__aeabi_f2d>:
 8089e1c:	0042      	lsls	r2, r0, #1
 8089e1e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8089e22:	ea4f 0131 	mov.w	r1, r1, rrx
 8089e26:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8089e2a:	bf1f      	itttt	ne
 8089e2c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8089e30:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8089e34:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8089e38:	4770      	bxne	lr
 8089e3a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8089e3e:	bf08      	it	eq
 8089e40:	4770      	bxeq	lr
 8089e42:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8089e46:	bf04      	itt	eq
 8089e48:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8089e4c:	4770      	bxeq	lr
 8089e4e:	b530      	push	{r4, r5, lr}
 8089e50:	f44f 7460 	mov.w	r4, #896	; 0x380
 8089e54:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8089e58:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8089e5c:	e71c      	b.n	8089c98 <__adddf3+0x138>
 8089e5e:	bf00      	nop

08089e60 <__aeabi_ul2d>:
 8089e60:	ea50 0201 	orrs.w	r2, r0, r1
 8089e64:	bf08      	it	eq
 8089e66:	4770      	bxeq	lr
 8089e68:	b530      	push	{r4, r5, lr}
 8089e6a:	f04f 0500 	mov.w	r5, #0
 8089e6e:	e00a      	b.n	8089e86 <__aeabi_l2d+0x16>

08089e70 <__aeabi_l2d>:
 8089e70:	ea50 0201 	orrs.w	r2, r0, r1
 8089e74:	bf08      	it	eq
 8089e76:	4770      	bxeq	lr
 8089e78:	b530      	push	{r4, r5, lr}
 8089e7a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8089e7e:	d502      	bpl.n	8089e86 <__aeabi_l2d+0x16>
 8089e80:	4240      	negs	r0, r0
 8089e82:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8089e86:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8089e8a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8089e8e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8089e92:	f43f aed8 	beq.w	8089c46 <__adddf3+0xe6>
 8089e96:	f04f 0203 	mov.w	r2, #3
 8089e9a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8089e9e:	bf18      	it	ne
 8089ea0:	3203      	addne	r2, #3
 8089ea2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8089ea6:	bf18      	it	ne
 8089ea8:	3203      	addne	r2, #3
 8089eaa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8089eae:	f1c2 0320 	rsb	r3, r2, #32
 8089eb2:	fa00 fc03 	lsl.w	ip, r0, r3
 8089eb6:	fa20 f002 	lsr.w	r0, r0, r2
 8089eba:	fa01 fe03 	lsl.w	lr, r1, r3
 8089ebe:	ea40 000e 	orr.w	r0, r0, lr
 8089ec2:	fa21 f102 	lsr.w	r1, r1, r2
 8089ec6:	4414      	add	r4, r2
 8089ec8:	e6bd      	b.n	8089c46 <__adddf3+0xe6>
 8089eca:	bf00      	nop

08089ecc <__aeabi_dmul>:
 8089ecc:	b570      	push	{r4, r5, r6, lr}
 8089ece:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8089ed2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8089ed6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8089eda:	bf1d      	ittte	ne
 8089edc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8089ee0:	ea94 0f0c 	teqne	r4, ip
 8089ee4:	ea95 0f0c 	teqne	r5, ip
 8089ee8:	f000 f8de 	bleq	808a0a8 <__aeabi_dmul+0x1dc>
 8089eec:	442c      	add	r4, r5
 8089eee:	ea81 0603 	eor.w	r6, r1, r3
 8089ef2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8089ef6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8089efa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8089efe:	bf18      	it	ne
 8089f00:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8089f04:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8089f08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8089f0c:	d038      	beq.n	8089f80 <__aeabi_dmul+0xb4>
 8089f0e:	fba0 ce02 	umull	ip, lr, r0, r2
 8089f12:	f04f 0500 	mov.w	r5, #0
 8089f16:	fbe1 e502 	umlal	lr, r5, r1, r2
 8089f1a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8089f1e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8089f22:	f04f 0600 	mov.w	r6, #0
 8089f26:	fbe1 5603 	umlal	r5, r6, r1, r3
 8089f2a:	f09c 0f00 	teq	ip, #0
 8089f2e:	bf18      	it	ne
 8089f30:	f04e 0e01 	orrne.w	lr, lr, #1
 8089f34:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8089f38:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8089f3c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8089f40:	d204      	bcs.n	8089f4c <__aeabi_dmul+0x80>
 8089f42:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8089f46:	416d      	adcs	r5, r5
 8089f48:	eb46 0606 	adc.w	r6, r6, r6
 8089f4c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8089f50:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8089f54:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8089f58:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8089f5c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8089f60:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8089f64:	bf88      	it	hi
 8089f66:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8089f6a:	d81e      	bhi.n	8089faa <__aeabi_dmul+0xde>
 8089f6c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8089f70:	bf08      	it	eq
 8089f72:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8089f76:	f150 0000 	adcs.w	r0, r0, #0
 8089f7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8089f7e:	bd70      	pop	{r4, r5, r6, pc}
 8089f80:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8089f84:	ea46 0101 	orr.w	r1, r6, r1
 8089f88:	ea40 0002 	orr.w	r0, r0, r2
 8089f8c:	ea81 0103 	eor.w	r1, r1, r3
 8089f90:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8089f94:	bfc2      	ittt	gt
 8089f96:	ebd4 050c 	rsbsgt	r5, r4, ip
 8089f9a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8089f9e:	bd70      	popgt	{r4, r5, r6, pc}
 8089fa0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8089fa4:	f04f 0e00 	mov.w	lr, #0
 8089fa8:	3c01      	subs	r4, #1
 8089faa:	f300 80ab 	bgt.w	808a104 <__aeabi_dmul+0x238>
 8089fae:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8089fb2:	bfde      	ittt	le
 8089fb4:	2000      	movle	r0, #0
 8089fb6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8089fba:	bd70      	pople	{r4, r5, r6, pc}
 8089fbc:	f1c4 0400 	rsb	r4, r4, #0
 8089fc0:	3c20      	subs	r4, #32
 8089fc2:	da35      	bge.n	808a030 <__aeabi_dmul+0x164>
 8089fc4:	340c      	adds	r4, #12
 8089fc6:	dc1b      	bgt.n	808a000 <__aeabi_dmul+0x134>
 8089fc8:	f104 0414 	add.w	r4, r4, #20
 8089fcc:	f1c4 0520 	rsb	r5, r4, #32
 8089fd0:	fa00 f305 	lsl.w	r3, r0, r5
 8089fd4:	fa20 f004 	lsr.w	r0, r0, r4
 8089fd8:	fa01 f205 	lsl.w	r2, r1, r5
 8089fdc:	ea40 0002 	orr.w	r0, r0, r2
 8089fe0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8089fe4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8089fe8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8089fec:	fa21 f604 	lsr.w	r6, r1, r4
 8089ff0:	eb42 0106 	adc.w	r1, r2, r6
 8089ff4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8089ff8:	bf08      	it	eq
 8089ffa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8089ffe:	bd70      	pop	{r4, r5, r6, pc}
 808a000:	f1c4 040c 	rsb	r4, r4, #12
 808a004:	f1c4 0520 	rsb	r5, r4, #32
 808a008:	fa00 f304 	lsl.w	r3, r0, r4
 808a00c:	fa20 f005 	lsr.w	r0, r0, r5
 808a010:	fa01 f204 	lsl.w	r2, r1, r4
 808a014:	ea40 0002 	orr.w	r0, r0, r2
 808a018:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808a01c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 808a020:	f141 0100 	adc.w	r1, r1, #0
 808a024:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808a028:	bf08      	it	eq
 808a02a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808a02e:	bd70      	pop	{r4, r5, r6, pc}
 808a030:	f1c4 0520 	rsb	r5, r4, #32
 808a034:	fa00 f205 	lsl.w	r2, r0, r5
 808a038:	ea4e 0e02 	orr.w	lr, lr, r2
 808a03c:	fa20 f304 	lsr.w	r3, r0, r4
 808a040:	fa01 f205 	lsl.w	r2, r1, r5
 808a044:	ea43 0302 	orr.w	r3, r3, r2
 808a048:	fa21 f004 	lsr.w	r0, r1, r4
 808a04c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808a050:	fa21 f204 	lsr.w	r2, r1, r4
 808a054:	ea20 0002 	bic.w	r0, r0, r2
 808a058:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 808a05c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808a060:	bf08      	it	eq
 808a062:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808a066:	bd70      	pop	{r4, r5, r6, pc}
 808a068:	f094 0f00 	teq	r4, #0
 808a06c:	d10f      	bne.n	808a08e <__aeabi_dmul+0x1c2>
 808a06e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 808a072:	0040      	lsls	r0, r0, #1
 808a074:	eb41 0101 	adc.w	r1, r1, r1
 808a078:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808a07c:	bf08      	it	eq
 808a07e:	3c01      	subeq	r4, #1
 808a080:	d0f7      	beq.n	808a072 <__aeabi_dmul+0x1a6>
 808a082:	ea41 0106 	orr.w	r1, r1, r6
 808a086:	f095 0f00 	teq	r5, #0
 808a08a:	bf18      	it	ne
 808a08c:	4770      	bxne	lr
 808a08e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 808a092:	0052      	lsls	r2, r2, #1
 808a094:	eb43 0303 	adc.w	r3, r3, r3
 808a098:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 808a09c:	bf08      	it	eq
 808a09e:	3d01      	subeq	r5, #1
 808a0a0:	d0f7      	beq.n	808a092 <__aeabi_dmul+0x1c6>
 808a0a2:	ea43 0306 	orr.w	r3, r3, r6
 808a0a6:	4770      	bx	lr
 808a0a8:	ea94 0f0c 	teq	r4, ip
 808a0ac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808a0b0:	bf18      	it	ne
 808a0b2:	ea95 0f0c 	teqne	r5, ip
 808a0b6:	d00c      	beq.n	808a0d2 <__aeabi_dmul+0x206>
 808a0b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808a0bc:	bf18      	it	ne
 808a0be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808a0c2:	d1d1      	bne.n	808a068 <__aeabi_dmul+0x19c>
 808a0c4:	ea81 0103 	eor.w	r1, r1, r3
 808a0c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808a0cc:	f04f 0000 	mov.w	r0, #0
 808a0d0:	bd70      	pop	{r4, r5, r6, pc}
 808a0d2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808a0d6:	bf06      	itte	eq
 808a0d8:	4610      	moveq	r0, r2
 808a0da:	4619      	moveq	r1, r3
 808a0dc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808a0e0:	d019      	beq.n	808a116 <__aeabi_dmul+0x24a>
 808a0e2:	ea94 0f0c 	teq	r4, ip
 808a0e6:	d102      	bne.n	808a0ee <__aeabi_dmul+0x222>
 808a0e8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 808a0ec:	d113      	bne.n	808a116 <__aeabi_dmul+0x24a>
 808a0ee:	ea95 0f0c 	teq	r5, ip
 808a0f2:	d105      	bne.n	808a100 <__aeabi_dmul+0x234>
 808a0f4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 808a0f8:	bf1c      	itt	ne
 808a0fa:	4610      	movne	r0, r2
 808a0fc:	4619      	movne	r1, r3
 808a0fe:	d10a      	bne.n	808a116 <__aeabi_dmul+0x24a>
 808a100:	ea81 0103 	eor.w	r1, r1, r3
 808a104:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808a108:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 808a10c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 808a110:	f04f 0000 	mov.w	r0, #0
 808a114:	bd70      	pop	{r4, r5, r6, pc}
 808a116:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 808a11a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 808a11e:	bd70      	pop	{r4, r5, r6, pc}

0808a120 <__aeabi_ddiv>:
 808a120:	b570      	push	{r4, r5, r6, lr}
 808a122:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808a126:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 808a12a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808a12e:	bf1d      	ittte	ne
 808a130:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 808a134:	ea94 0f0c 	teqne	r4, ip
 808a138:	ea95 0f0c 	teqne	r5, ip
 808a13c:	f000 f8a7 	bleq	808a28e <__aeabi_ddiv+0x16e>
 808a140:	eba4 0405 	sub.w	r4, r4, r5
 808a144:	ea81 0e03 	eor.w	lr, r1, r3
 808a148:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 808a14c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 808a150:	f000 8088 	beq.w	808a264 <__aeabi_ddiv+0x144>
 808a154:	ea4f 3303 	mov.w	r3, r3, lsl #12
 808a158:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 808a15c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 808a160:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 808a164:	ea4f 2202 	mov.w	r2, r2, lsl #8
 808a168:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 808a16c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 808a170:	ea4f 2600 	mov.w	r6, r0, lsl #8
 808a174:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 808a178:	429d      	cmp	r5, r3
 808a17a:	bf08      	it	eq
 808a17c:	4296      	cmpeq	r6, r2
 808a17e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 808a182:	f504 7440 	add.w	r4, r4, #768	; 0x300
 808a186:	d202      	bcs.n	808a18e <__aeabi_ddiv+0x6e>
 808a188:	085b      	lsrs	r3, r3, #1
 808a18a:	ea4f 0232 	mov.w	r2, r2, rrx
 808a18e:	1ab6      	subs	r6, r6, r2
 808a190:	eb65 0503 	sbc.w	r5, r5, r3
 808a194:	085b      	lsrs	r3, r3, #1
 808a196:	ea4f 0232 	mov.w	r2, r2, rrx
 808a19a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 808a19e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 808a1a2:	ebb6 0e02 	subs.w	lr, r6, r2
 808a1a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 808a1aa:	bf22      	ittt	cs
 808a1ac:	1ab6      	subcs	r6, r6, r2
 808a1ae:	4675      	movcs	r5, lr
 808a1b0:	ea40 000c 	orrcs.w	r0, r0, ip
 808a1b4:	085b      	lsrs	r3, r3, #1
 808a1b6:	ea4f 0232 	mov.w	r2, r2, rrx
 808a1ba:	ebb6 0e02 	subs.w	lr, r6, r2
 808a1be:	eb75 0e03 	sbcs.w	lr, r5, r3
 808a1c2:	bf22      	ittt	cs
 808a1c4:	1ab6      	subcs	r6, r6, r2
 808a1c6:	4675      	movcs	r5, lr
 808a1c8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808a1cc:	085b      	lsrs	r3, r3, #1
 808a1ce:	ea4f 0232 	mov.w	r2, r2, rrx
 808a1d2:	ebb6 0e02 	subs.w	lr, r6, r2
 808a1d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 808a1da:	bf22      	ittt	cs
 808a1dc:	1ab6      	subcs	r6, r6, r2
 808a1de:	4675      	movcs	r5, lr
 808a1e0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808a1e4:	085b      	lsrs	r3, r3, #1
 808a1e6:	ea4f 0232 	mov.w	r2, r2, rrx
 808a1ea:	ebb6 0e02 	subs.w	lr, r6, r2
 808a1ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 808a1f2:	bf22      	ittt	cs
 808a1f4:	1ab6      	subcs	r6, r6, r2
 808a1f6:	4675      	movcs	r5, lr
 808a1f8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808a1fc:	ea55 0e06 	orrs.w	lr, r5, r6
 808a200:	d018      	beq.n	808a234 <__aeabi_ddiv+0x114>
 808a202:	ea4f 1505 	mov.w	r5, r5, lsl #4
 808a206:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 808a20a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 808a20e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 808a212:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 808a216:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 808a21a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 808a21e:	d1c0      	bne.n	808a1a2 <__aeabi_ddiv+0x82>
 808a220:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808a224:	d10b      	bne.n	808a23e <__aeabi_ddiv+0x11e>
 808a226:	ea41 0100 	orr.w	r1, r1, r0
 808a22a:	f04f 0000 	mov.w	r0, #0
 808a22e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 808a232:	e7b6      	b.n	808a1a2 <__aeabi_ddiv+0x82>
 808a234:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808a238:	bf04      	itt	eq
 808a23a:	4301      	orreq	r1, r0
 808a23c:	2000      	moveq	r0, #0
 808a23e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808a242:	bf88      	it	hi
 808a244:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 808a248:	f63f aeaf 	bhi.w	8089faa <__aeabi_dmul+0xde>
 808a24c:	ebb5 0c03 	subs.w	ip, r5, r3
 808a250:	bf04      	itt	eq
 808a252:	ebb6 0c02 	subseq.w	ip, r6, r2
 808a256:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 808a25a:	f150 0000 	adcs.w	r0, r0, #0
 808a25e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808a262:	bd70      	pop	{r4, r5, r6, pc}
 808a264:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 808a268:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 808a26c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 808a270:	bfc2      	ittt	gt
 808a272:	ebd4 050c 	rsbsgt	r5, r4, ip
 808a276:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 808a27a:	bd70      	popgt	{r4, r5, r6, pc}
 808a27c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808a280:	f04f 0e00 	mov.w	lr, #0
 808a284:	3c01      	subs	r4, #1
 808a286:	e690      	b.n	8089faa <__aeabi_dmul+0xde>
 808a288:	ea45 0e06 	orr.w	lr, r5, r6
 808a28c:	e68d      	b.n	8089faa <__aeabi_dmul+0xde>
 808a28e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808a292:	ea94 0f0c 	teq	r4, ip
 808a296:	bf08      	it	eq
 808a298:	ea95 0f0c 	teqeq	r5, ip
 808a29c:	f43f af3b 	beq.w	808a116 <__aeabi_dmul+0x24a>
 808a2a0:	ea94 0f0c 	teq	r4, ip
 808a2a4:	d10a      	bne.n	808a2bc <__aeabi_ddiv+0x19c>
 808a2a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 808a2aa:	f47f af34 	bne.w	808a116 <__aeabi_dmul+0x24a>
 808a2ae:	ea95 0f0c 	teq	r5, ip
 808a2b2:	f47f af25 	bne.w	808a100 <__aeabi_dmul+0x234>
 808a2b6:	4610      	mov	r0, r2
 808a2b8:	4619      	mov	r1, r3
 808a2ba:	e72c      	b.n	808a116 <__aeabi_dmul+0x24a>
 808a2bc:	ea95 0f0c 	teq	r5, ip
 808a2c0:	d106      	bne.n	808a2d0 <__aeabi_ddiv+0x1b0>
 808a2c2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 808a2c6:	f43f aefd 	beq.w	808a0c4 <__aeabi_dmul+0x1f8>
 808a2ca:	4610      	mov	r0, r2
 808a2cc:	4619      	mov	r1, r3
 808a2ce:	e722      	b.n	808a116 <__aeabi_dmul+0x24a>
 808a2d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808a2d4:	bf18      	it	ne
 808a2d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808a2da:	f47f aec5 	bne.w	808a068 <__aeabi_dmul+0x19c>
 808a2de:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 808a2e2:	f47f af0d 	bne.w	808a100 <__aeabi_dmul+0x234>
 808a2e6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 808a2ea:	f47f aeeb 	bne.w	808a0c4 <__aeabi_dmul+0x1f8>
 808a2ee:	e712      	b.n	808a116 <__aeabi_dmul+0x24a>

0808a2f0 <__gedf2>:
 808a2f0:	f04f 3cff 	mov.w	ip, #4294967295
 808a2f4:	e006      	b.n	808a304 <__cmpdf2+0x4>
 808a2f6:	bf00      	nop

0808a2f8 <__ledf2>:
 808a2f8:	f04f 0c01 	mov.w	ip, #1
 808a2fc:	e002      	b.n	808a304 <__cmpdf2+0x4>
 808a2fe:	bf00      	nop

0808a300 <__cmpdf2>:
 808a300:	f04f 0c01 	mov.w	ip, #1
 808a304:	f84d cd04 	str.w	ip, [sp, #-4]!
 808a308:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808a30c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808a310:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808a314:	bf18      	it	ne
 808a316:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 808a31a:	d01b      	beq.n	808a354 <__cmpdf2+0x54>
 808a31c:	b001      	add	sp, #4
 808a31e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 808a322:	bf0c      	ite	eq
 808a324:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 808a328:	ea91 0f03 	teqne	r1, r3
 808a32c:	bf02      	ittt	eq
 808a32e:	ea90 0f02 	teqeq	r0, r2
 808a332:	2000      	moveq	r0, #0
 808a334:	4770      	bxeq	lr
 808a336:	f110 0f00 	cmn.w	r0, #0
 808a33a:	ea91 0f03 	teq	r1, r3
 808a33e:	bf58      	it	pl
 808a340:	4299      	cmppl	r1, r3
 808a342:	bf08      	it	eq
 808a344:	4290      	cmpeq	r0, r2
 808a346:	bf2c      	ite	cs
 808a348:	17d8      	asrcs	r0, r3, #31
 808a34a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 808a34e:	f040 0001 	orr.w	r0, r0, #1
 808a352:	4770      	bx	lr
 808a354:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808a358:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808a35c:	d102      	bne.n	808a364 <__cmpdf2+0x64>
 808a35e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808a362:	d107      	bne.n	808a374 <__cmpdf2+0x74>
 808a364:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808a368:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808a36c:	d1d6      	bne.n	808a31c <__cmpdf2+0x1c>
 808a36e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 808a372:	d0d3      	beq.n	808a31c <__cmpdf2+0x1c>
 808a374:	f85d 0b04 	ldr.w	r0, [sp], #4
 808a378:	4770      	bx	lr
 808a37a:	bf00      	nop

0808a37c <__aeabi_cdrcmple>:
 808a37c:	4684      	mov	ip, r0
 808a37e:	4610      	mov	r0, r2
 808a380:	4662      	mov	r2, ip
 808a382:	468c      	mov	ip, r1
 808a384:	4619      	mov	r1, r3
 808a386:	4663      	mov	r3, ip
 808a388:	e000      	b.n	808a38c <__aeabi_cdcmpeq>
 808a38a:	bf00      	nop

0808a38c <__aeabi_cdcmpeq>:
 808a38c:	b501      	push	{r0, lr}
 808a38e:	f7ff ffb7 	bl	808a300 <__cmpdf2>
 808a392:	2800      	cmp	r0, #0
 808a394:	bf48      	it	mi
 808a396:	f110 0f00 	cmnmi.w	r0, #0
 808a39a:	bd01      	pop	{r0, pc}

0808a39c <__aeabi_dcmpeq>:
 808a39c:	f84d ed08 	str.w	lr, [sp, #-8]!
 808a3a0:	f7ff fff4 	bl	808a38c <__aeabi_cdcmpeq>
 808a3a4:	bf0c      	ite	eq
 808a3a6:	2001      	moveq	r0, #1
 808a3a8:	2000      	movne	r0, #0
 808a3aa:	f85d fb08 	ldr.w	pc, [sp], #8
 808a3ae:	bf00      	nop

0808a3b0 <__aeabi_dcmplt>:
 808a3b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 808a3b4:	f7ff ffea 	bl	808a38c <__aeabi_cdcmpeq>
 808a3b8:	bf34      	ite	cc
 808a3ba:	2001      	movcc	r0, #1
 808a3bc:	2000      	movcs	r0, #0
 808a3be:	f85d fb08 	ldr.w	pc, [sp], #8
 808a3c2:	bf00      	nop

0808a3c4 <__aeabi_dcmple>:
 808a3c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 808a3c8:	f7ff ffe0 	bl	808a38c <__aeabi_cdcmpeq>
 808a3cc:	bf94      	ite	ls
 808a3ce:	2001      	movls	r0, #1
 808a3d0:	2000      	movhi	r0, #0
 808a3d2:	f85d fb08 	ldr.w	pc, [sp], #8
 808a3d6:	bf00      	nop

0808a3d8 <__aeabi_dcmpge>:
 808a3d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 808a3dc:	f7ff ffce 	bl	808a37c <__aeabi_cdrcmple>
 808a3e0:	bf94      	ite	ls
 808a3e2:	2001      	movls	r0, #1
 808a3e4:	2000      	movhi	r0, #0
 808a3e6:	f85d fb08 	ldr.w	pc, [sp], #8
 808a3ea:	bf00      	nop

0808a3ec <__aeabi_dcmpgt>:
 808a3ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 808a3f0:	f7ff ffc4 	bl	808a37c <__aeabi_cdrcmple>
 808a3f4:	bf34      	ite	cc
 808a3f6:	2001      	movcc	r0, #1
 808a3f8:	2000      	movcs	r0, #0
 808a3fa:	f85d fb08 	ldr.w	pc, [sp], #8
 808a3fe:	bf00      	nop

0808a400 <__aeabi_dcmpun>:
 808a400:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808a404:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808a408:	d102      	bne.n	808a410 <__aeabi_dcmpun+0x10>
 808a40a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808a40e:	d10a      	bne.n	808a426 <__aeabi_dcmpun+0x26>
 808a410:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808a414:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808a418:	d102      	bne.n	808a420 <__aeabi_dcmpun+0x20>
 808a41a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 808a41e:	d102      	bne.n	808a426 <__aeabi_dcmpun+0x26>
 808a420:	f04f 0000 	mov.w	r0, #0
 808a424:	4770      	bx	lr
 808a426:	f04f 0001 	mov.w	r0, #1
 808a42a:	4770      	bx	lr

0808a42c <__aeabi_d2iz>:
 808a42c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 808a430:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 808a434:	d215      	bcs.n	808a462 <__aeabi_d2iz+0x36>
 808a436:	d511      	bpl.n	808a45c <__aeabi_d2iz+0x30>
 808a438:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 808a43c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 808a440:	d912      	bls.n	808a468 <__aeabi_d2iz+0x3c>
 808a442:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808a446:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808a44a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808a44e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808a452:	fa23 f002 	lsr.w	r0, r3, r2
 808a456:	bf18      	it	ne
 808a458:	4240      	negne	r0, r0
 808a45a:	4770      	bx	lr
 808a45c:	f04f 0000 	mov.w	r0, #0
 808a460:	4770      	bx	lr
 808a462:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808a466:	d105      	bne.n	808a474 <__aeabi_d2iz+0x48>
 808a468:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 808a46c:	bf08      	it	eq
 808a46e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808a472:	4770      	bx	lr
 808a474:	f04f 0000 	mov.w	r0, #0
 808a478:	4770      	bx	lr
 808a47a:	bf00      	nop

0808a47c <__aeabi_d2uiz>:
 808a47c:	004a      	lsls	r2, r1, #1
 808a47e:	d211      	bcs.n	808a4a4 <__aeabi_d2uiz+0x28>
 808a480:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 808a484:	d211      	bcs.n	808a4aa <__aeabi_d2uiz+0x2e>
 808a486:	d50d      	bpl.n	808a4a4 <__aeabi_d2uiz+0x28>
 808a488:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 808a48c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 808a490:	d40e      	bmi.n	808a4b0 <__aeabi_d2uiz+0x34>
 808a492:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808a496:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808a49a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808a49e:	fa23 f002 	lsr.w	r0, r3, r2
 808a4a2:	4770      	bx	lr
 808a4a4:	f04f 0000 	mov.w	r0, #0
 808a4a8:	4770      	bx	lr
 808a4aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808a4ae:	d102      	bne.n	808a4b6 <__aeabi_d2uiz+0x3a>
 808a4b0:	f04f 30ff 	mov.w	r0, #4294967295
 808a4b4:	4770      	bx	lr
 808a4b6:	f04f 0000 	mov.w	r0, #0
 808a4ba:	4770      	bx	lr

0808a4bc <__aeabi_d2f>:
 808a4bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 808a4c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 808a4c4:	bf24      	itt	cs
 808a4c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 808a4ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 808a4ce:	d90d      	bls.n	808a4ec <__aeabi_d2f+0x30>
 808a4d0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808a4d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 808a4d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 808a4dc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 808a4e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 808a4e4:	bf08      	it	eq
 808a4e6:	f020 0001 	biceq.w	r0, r0, #1
 808a4ea:	4770      	bx	lr
 808a4ec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 808a4f0:	d121      	bne.n	808a536 <__aeabi_d2f+0x7a>
 808a4f2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 808a4f6:	bfbc      	itt	lt
 808a4f8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 808a4fc:	4770      	bxlt	lr
 808a4fe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808a502:	ea4f 5252 	mov.w	r2, r2, lsr #21
 808a506:	f1c2 0218 	rsb	r2, r2, #24
 808a50a:	f1c2 0c20 	rsb	ip, r2, #32
 808a50e:	fa10 f30c 	lsls.w	r3, r0, ip
 808a512:	fa20 f002 	lsr.w	r0, r0, r2
 808a516:	bf18      	it	ne
 808a518:	f040 0001 	orrne.w	r0, r0, #1
 808a51c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808a520:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 808a524:	fa03 fc0c 	lsl.w	ip, r3, ip
 808a528:	ea40 000c 	orr.w	r0, r0, ip
 808a52c:	fa23 f302 	lsr.w	r3, r3, r2
 808a530:	ea4f 0343 	mov.w	r3, r3, lsl #1
 808a534:	e7cc      	b.n	808a4d0 <__aeabi_d2f+0x14>
 808a536:	ea7f 5362 	mvns.w	r3, r2, asr #21
 808a53a:	d107      	bne.n	808a54c <__aeabi_d2f+0x90>
 808a53c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 808a540:	bf1e      	ittt	ne
 808a542:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 808a546:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 808a54a:	4770      	bxne	lr
 808a54c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 808a550:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808a554:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808a558:	4770      	bx	lr
 808a55a:	bf00      	nop

0808a55c <__aeabi_frsub>:
 808a55c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 808a560:	e002      	b.n	808a568 <__addsf3>
 808a562:	bf00      	nop

0808a564 <__aeabi_fsub>:
 808a564:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0808a568 <__addsf3>:
 808a568:	0042      	lsls	r2, r0, #1
 808a56a:	bf1f      	itttt	ne
 808a56c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 808a570:	ea92 0f03 	teqne	r2, r3
 808a574:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 808a578:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808a57c:	d06a      	beq.n	808a654 <__addsf3+0xec>
 808a57e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 808a582:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 808a586:	bfc1      	itttt	gt
 808a588:	18d2      	addgt	r2, r2, r3
 808a58a:	4041      	eorgt	r1, r0
 808a58c:	4048      	eorgt	r0, r1
 808a58e:	4041      	eorgt	r1, r0
 808a590:	bfb8      	it	lt
 808a592:	425b      	neglt	r3, r3
 808a594:	2b19      	cmp	r3, #25
 808a596:	bf88      	it	hi
 808a598:	4770      	bxhi	lr
 808a59a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 808a59e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808a5a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 808a5a6:	bf18      	it	ne
 808a5a8:	4240      	negne	r0, r0
 808a5aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808a5ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 808a5b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 808a5b6:	bf18      	it	ne
 808a5b8:	4249      	negne	r1, r1
 808a5ba:	ea92 0f03 	teq	r2, r3
 808a5be:	d03f      	beq.n	808a640 <__addsf3+0xd8>
 808a5c0:	f1a2 0201 	sub.w	r2, r2, #1
 808a5c4:	fa41 fc03 	asr.w	ip, r1, r3
 808a5c8:	eb10 000c 	adds.w	r0, r0, ip
 808a5cc:	f1c3 0320 	rsb	r3, r3, #32
 808a5d0:	fa01 f103 	lsl.w	r1, r1, r3
 808a5d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 808a5d8:	d502      	bpl.n	808a5e0 <__addsf3+0x78>
 808a5da:	4249      	negs	r1, r1
 808a5dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 808a5e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 808a5e4:	d313      	bcc.n	808a60e <__addsf3+0xa6>
 808a5e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 808a5ea:	d306      	bcc.n	808a5fa <__addsf3+0x92>
 808a5ec:	0840      	lsrs	r0, r0, #1
 808a5ee:	ea4f 0131 	mov.w	r1, r1, rrx
 808a5f2:	f102 0201 	add.w	r2, r2, #1
 808a5f6:	2afe      	cmp	r2, #254	; 0xfe
 808a5f8:	d251      	bcs.n	808a69e <__addsf3+0x136>
 808a5fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 808a5fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808a602:	bf08      	it	eq
 808a604:	f020 0001 	biceq.w	r0, r0, #1
 808a608:	ea40 0003 	orr.w	r0, r0, r3
 808a60c:	4770      	bx	lr
 808a60e:	0049      	lsls	r1, r1, #1
 808a610:	eb40 0000 	adc.w	r0, r0, r0
 808a614:	3a01      	subs	r2, #1
 808a616:	bf28      	it	cs
 808a618:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 808a61c:	d2ed      	bcs.n	808a5fa <__addsf3+0x92>
 808a61e:	fab0 fc80 	clz	ip, r0
 808a622:	f1ac 0c08 	sub.w	ip, ip, #8
 808a626:	ebb2 020c 	subs.w	r2, r2, ip
 808a62a:	fa00 f00c 	lsl.w	r0, r0, ip
 808a62e:	bfaa      	itet	ge
 808a630:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 808a634:	4252      	neglt	r2, r2
 808a636:	4318      	orrge	r0, r3
 808a638:	bfbc      	itt	lt
 808a63a:	40d0      	lsrlt	r0, r2
 808a63c:	4318      	orrlt	r0, r3
 808a63e:	4770      	bx	lr
 808a640:	f092 0f00 	teq	r2, #0
 808a644:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 808a648:	bf06      	itte	eq
 808a64a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 808a64e:	3201      	addeq	r2, #1
 808a650:	3b01      	subne	r3, #1
 808a652:	e7b5      	b.n	808a5c0 <__addsf3+0x58>
 808a654:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808a658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808a65c:	bf18      	it	ne
 808a65e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808a662:	d021      	beq.n	808a6a8 <__addsf3+0x140>
 808a664:	ea92 0f03 	teq	r2, r3
 808a668:	d004      	beq.n	808a674 <__addsf3+0x10c>
 808a66a:	f092 0f00 	teq	r2, #0
 808a66e:	bf08      	it	eq
 808a670:	4608      	moveq	r0, r1
 808a672:	4770      	bx	lr
 808a674:	ea90 0f01 	teq	r0, r1
 808a678:	bf1c      	itt	ne
 808a67a:	2000      	movne	r0, #0
 808a67c:	4770      	bxne	lr
 808a67e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 808a682:	d104      	bne.n	808a68e <__addsf3+0x126>
 808a684:	0040      	lsls	r0, r0, #1
 808a686:	bf28      	it	cs
 808a688:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 808a68c:	4770      	bx	lr
 808a68e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 808a692:	bf3c      	itt	cc
 808a694:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 808a698:	4770      	bxcc	lr
 808a69a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 808a69e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 808a6a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808a6a6:	4770      	bx	lr
 808a6a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 808a6ac:	bf16      	itet	ne
 808a6ae:	4608      	movne	r0, r1
 808a6b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 808a6b4:	4601      	movne	r1, r0
 808a6b6:	0242      	lsls	r2, r0, #9
 808a6b8:	bf06      	itte	eq
 808a6ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 808a6be:	ea90 0f01 	teqeq	r0, r1
 808a6c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 808a6c6:	4770      	bx	lr

0808a6c8 <__aeabi_ui2f>:
 808a6c8:	f04f 0300 	mov.w	r3, #0
 808a6cc:	e004      	b.n	808a6d8 <__aeabi_i2f+0x8>
 808a6ce:	bf00      	nop

0808a6d0 <__aeabi_i2f>:
 808a6d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 808a6d4:	bf48      	it	mi
 808a6d6:	4240      	negmi	r0, r0
 808a6d8:	ea5f 0c00 	movs.w	ip, r0
 808a6dc:	bf08      	it	eq
 808a6de:	4770      	bxeq	lr
 808a6e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 808a6e4:	4601      	mov	r1, r0
 808a6e6:	f04f 0000 	mov.w	r0, #0
 808a6ea:	e01c      	b.n	808a726 <__aeabi_l2f+0x2a>

0808a6ec <__aeabi_ul2f>:
 808a6ec:	ea50 0201 	orrs.w	r2, r0, r1
 808a6f0:	bf08      	it	eq
 808a6f2:	4770      	bxeq	lr
 808a6f4:	f04f 0300 	mov.w	r3, #0
 808a6f8:	e00a      	b.n	808a710 <__aeabi_l2f+0x14>
 808a6fa:	bf00      	nop

0808a6fc <__aeabi_l2f>:
 808a6fc:	ea50 0201 	orrs.w	r2, r0, r1
 808a700:	bf08      	it	eq
 808a702:	4770      	bxeq	lr
 808a704:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 808a708:	d502      	bpl.n	808a710 <__aeabi_l2f+0x14>
 808a70a:	4240      	negs	r0, r0
 808a70c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808a710:	ea5f 0c01 	movs.w	ip, r1
 808a714:	bf02      	ittt	eq
 808a716:	4684      	moveq	ip, r0
 808a718:	4601      	moveq	r1, r0
 808a71a:	2000      	moveq	r0, #0
 808a71c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 808a720:	bf08      	it	eq
 808a722:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 808a726:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 808a72a:	fabc f28c 	clz	r2, ip
 808a72e:	3a08      	subs	r2, #8
 808a730:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 808a734:	db10      	blt.n	808a758 <__aeabi_l2f+0x5c>
 808a736:	fa01 fc02 	lsl.w	ip, r1, r2
 808a73a:	4463      	add	r3, ip
 808a73c:	fa00 fc02 	lsl.w	ip, r0, r2
 808a740:	f1c2 0220 	rsb	r2, r2, #32
 808a744:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 808a748:	fa20 f202 	lsr.w	r2, r0, r2
 808a74c:	eb43 0002 	adc.w	r0, r3, r2
 808a750:	bf08      	it	eq
 808a752:	f020 0001 	biceq.w	r0, r0, #1
 808a756:	4770      	bx	lr
 808a758:	f102 0220 	add.w	r2, r2, #32
 808a75c:	fa01 fc02 	lsl.w	ip, r1, r2
 808a760:	f1c2 0220 	rsb	r2, r2, #32
 808a764:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 808a768:	fa21 f202 	lsr.w	r2, r1, r2
 808a76c:	eb43 0002 	adc.w	r0, r3, r2
 808a770:	bf08      	it	eq
 808a772:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808a776:	4770      	bx	lr

0808a778 <__aeabi_fmul>:
 808a778:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808a77c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 808a780:	bf1e      	ittt	ne
 808a782:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808a786:	ea92 0f0c 	teqne	r2, ip
 808a78a:	ea93 0f0c 	teqne	r3, ip
 808a78e:	d06f      	beq.n	808a870 <__aeabi_fmul+0xf8>
 808a790:	441a      	add	r2, r3
 808a792:	ea80 0c01 	eor.w	ip, r0, r1
 808a796:	0240      	lsls	r0, r0, #9
 808a798:	bf18      	it	ne
 808a79a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 808a79e:	d01e      	beq.n	808a7de <__aeabi_fmul+0x66>
 808a7a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 808a7a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 808a7a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 808a7ac:	fba0 3101 	umull	r3, r1, r0, r1
 808a7b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808a7b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 808a7b8:	bf3e      	ittt	cc
 808a7ba:	0049      	lslcc	r1, r1, #1
 808a7bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 808a7c0:	005b      	lslcc	r3, r3, #1
 808a7c2:	ea40 0001 	orr.w	r0, r0, r1
 808a7c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 808a7ca:	2afd      	cmp	r2, #253	; 0xfd
 808a7cc:	d81d      	bhi.n	808a80a <__aeabi_fmul+0x92>
 808a7ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 808a7d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808a7d6:	bf08      	it	eq
 808a7d8:	f020 0001 	biceq.w	r0, r0, #1
 808a7dc:	4770      	bx	lr
 808a7de:	f090 0f00 	teq	r0, #0
 808a7e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808a7e6:	bf08      	it	eq
 808a7e8:	0249      	lsleq	r1, r1, #9
 808a7ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808a7ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 808a7f2:	3a7f      	subs	r2, #127	; 0x7f
 808a7f4:	bfc2      	ittt	gt
 808a7f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808a7fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808a7fe:	4770      	bxgt	lr
 808a800:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808a804:	f04f 0300 	mov.w	r3, #0
 808a808:	3a01      	subs	r2, #1
 808a80a:	dc5d      	bgt.n	808a8c8 <__aeabi_fmul+0x150>
 808a80c:	f112 0f19 	cmn.w	r2, #25
 808a810:	bfdc      	itt	le
 808a812:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 808a816:	4770      	bxle	lr
 808a818:	f1c2 0200 	rsb	r2, r2, #0
 808a81c:	0041      	lsls	r1, r0, #1
 808a81e:	fa21 f102 	lsr.w	r1, r1, r2
 808a822:	f1c2 0220 	rsb	r2, r2, #32
 808a826:	fa00 fc02 	lsl.w	ip, r0, r2
 808a82a:	ea5f 0031 	movs.w	r0, r1, rrx
 808a82e:	f140 0000 	adc.w	r0, r0, #0
 808a832:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 808a836:	bf08      	it	eq
 808a838:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808a83c:	4770      	bx	lr
 808a83e:	f092 0f00 	teq	r2, #0
 808a842:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808a846:	bf02      	ittt	eq
 808a848:	0040      	lsleq	r0, r0, #1
 808a84a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808a84e:	3a01      	subeq	r2, #1
 808a850:	d0f9      	beq.n	808a846 <__aeabi_fmul+0xce>
 808a852:	ea40 000c 	orr.w	r0, r0, ip
 808a856:	f093 0f00 	teq	r3, #0
 808a85a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808a85e:	bf02      	ittt	eq
 808a860:	0049      	lsleq	r1, r1, #1
 808a862:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808a866:	3b01      	subeq	r3, #1
 808a868:	d0f9      	beq.n	808a85e <__aeabi_fmul+0xe6>
 808a86a:	ea41 010c 	orr.w	r1, r1, ip
 808a86e:	e78f      	b.n	808a790 <__aeabi_fmul+0x18>
 808a870:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 808a874:	ea92 0f0c 	teq	r2, ip
 808a878:	bf18      	it	ne
 808a87a:	ea93 0f0c 	teqne	r3, ip
 808a87e:	d00a      	beq.n	808a896 <__aeabi_fmul+0x11e>
 808a880:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 808a884:	bf18      	it	ne
 808a886:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808a88a:	d1d8      	bne.n	808a83e <__aeabi_fmul+0xc6>
 808a88c:	ea80 0001 	eor.w	r0, r0, r1
 808a890:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 808a894:	4770      	bx	lr
 808a896:	f090 0f00 	teq	r0, #0
 808a89a:	bf17      	itett	ne
 808a89c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 808a8a0:	4608      	moveq	r0, r1
 808a8a2:	f091 0f00 	teqne	r1, #0
 808a8a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 808a8aa:	d014      	beq.n	808a8d6 <__aeabi_fmul+0x15e>
 808a8ac:	ea92 0f0c 	teq	r2, ip
 808a8b0:	d101      	bne.n	808a8b6 <__aeabi_fmul+0x13e>
 808a8b2:	0242      	lsls	r2, r0, #9
 808a8b4:	d10f      	bne.n	808a8d6 <__aeabi_fmul+0x15e>
 808a8b6:	ea93 0f0c 	teq	r3, ip
 808a8ba:	d103      	bne.n	808a8c4 <__aeabi_fmul+0x14c>
 808a8bc:	024b      	lsls	r3, r1, #9
 808a8be:	bf18      	it	ne
 808a8c0:	4608      	movne	r0, r1
 808a8c2:	d108      	bne.n	808a8d6 <__aeabi_fmul+0x15e>
 808a8c4:	ea80 0001 	eor.w	r0, r0, r1
 808a8c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 808a8cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808a8d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808a8d4:	4770      	bx	lr
 808a8d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808a8da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 808a8de:	4770      	bx	lr

0808a8e0 <__aeabi_fdiv>:
 808a8e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808a8e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 808a8e8:	bf1e      	ittt	ne
 808a8ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808a8ee:	ea92 0f0c 	teqne	r2, ip
 808a8f2:	ea93 0f0c 	teqne	r3, ip
 808a8f6:	d069      	beq.n	808a9cc <__aeabi_fdiv+0xec>
 808a8f8:	eba2 0203 	sub.w	r2, r2, r3
 808a8fc:	ea80 0c01 	eor.w	ip, r0, r1
 808a900:	0249      	lsls	r1, r1, #9
 808a902:	ea4f 2040 	mov.w	r0, r0, lsl #9
 808a906:	d037      	beq.n	808a978 <__aeabi_fdiv+0x98>
 808a908:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 808a90c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 808a910:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 808a914:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808a918:	428b      	cmp	r3, r1
 808a91a:	bf38      	it	cc
 808a91c:	005b      	lslcc	r3, r3, #1
 808a91e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 808a922:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 808a926:	428b      	cmp	r3, r1
 808a928:	bf24      	itt	cs
 808a92a:	1a5b      	subcs	r3, r3, r1
 808a92c:	ea40 000c 	orrcs.w	r0, r0, ip
 808a930:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 808a934:	bf24      	itt	cs
 808a936:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 808a93a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808a93e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 808a942:	bf24      	itt	cs
 808a944:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 808a948:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808a94c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 808a950:	bf24      	itt	cs
 808a952:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 808a956:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808a95a:	011b      	lsls	r3, r3, #4
 808a95c:	bf18      	it	ne
 808a95e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 808a962:	d1e0      	bne.n	808a926 <__aeabi_fdiv+0x46>
 808a964:	2afd      	cmp	r2, #253	; 0xfd
 808a966:	f63f af50 	bhi.w	808a80a <__aeabi_fmul+0x92>
 808a96a:	428b      	cmp	r3, r1
 808a96c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808a970:	bf08      	it	eq
 808a972:	f020 0001 	biceq.w	r0, r0, #1
 808a976:	4770      	bx	lr
 808a978:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808a97c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808a980:	327f      	adds	r2, #127	; 0x7f
 808a982:	bfc2      	ittt	gt
 808a984:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808a988:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808a98c:	4770      	bxgt	lr
 808a98e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808a992:	f04f 0300 	mov.w	r3, #0
 808a996:	3a01      	subs	r2, #1
 808a998:	e737      	b.n	808a80a <__aeabi_fmul+0x92>
 808a99a:	f092 0f00 	teq	r2, #0
 808a99e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808a9a2:	bf02      	ittt	eq
 808a9a4:	0040      	lsleq	r0, r0, #1
 808a9a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808a9aa:	3a01      	subeq	r2, #1
 808a9ac:	d0f9      	beq.n	808a9a2 <__aeabi_fdiv+0xc2>
 808a9ae:	ea40 000c 	orr.w	r0, r0, ip
 808a9b2:	f093 0f00 	teq	r3, #0
 808a9b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808a9ba:	bf02      	ittt	eq
 808a9bc:	0049      	lsleq	r1, r1, #1
 808a9be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808a9c2:	3b01      	subeq	r3, #1
 808a9c4:	d0f9      	beq.n	808a9ba <__aeabi_fdiv+0xda>
 808a9c6:	ea41 010c 	orr.w	r1, r1, ip
 808a9ca:	e795      	b.n	808a8f8 <__aeabi_fdiv+0x18>
 808a9cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 808a9d0:	ea92 0f0c 	teq	r2, ip
 808a9d4:	d108      	bne.n	808a9e8 <__aeabi_fdiv+0x108>
 808a9d6:	0242      	lsls	r2, r0, #9
 808a9d8:	f47f af7d 	bne.w	808a8d6 <__aeabi_fmul+0x15e>
 808a9dc:	ea93 0f0c 	teq	r3, ip
 808a9e0:	f47f af70 	bne.w	808a8c4 <__aeabi_fmul+0x14c>
 808a9e4:	4608      	mov	r0, r1
 808a9e6:	e776      	b.n	808a8d6 <__aeabi_fmul+0x15e>
 808a9e8:	ea93 0f0c 	teq	r3, ip
 808a9ec:	d104      	bne.n	808a9f8 <__aeabi_fdiv+0x118>
 808a9ee:	024b      	lsls	r3, r1, #9
 808a9f0:	f43f af4c 	beq.w	808a88c <__aeabi_fmul+0x114>
 808a9f4:	4608      	mov	r0, r1
 808a9f6:	e76e      	b.n	808a8d6 <__aeabi_fmul+0x15e>
 808a9f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 808a9fc:	bf18      	it	ne
 808a9fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808aa02:	d1ca      	bne.n	808a99a <__aeabi_fdiv+0xba>
 808aa04:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 808aa08:	f47f af5c 	bne.w	808a8c4 <__aeabi_fmul+0x14c>
 808aa0c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 808aa10:	f47f af3c 	bne.w	808a88c <__aeabi_fmul+0x114>
 808aa14:	e75f      	b.n	808a8d6 <__aeabi_fmul+0x15e>
 808aa16:	bf00      	nop

0808aa18 <__gesf2>:
 808aa18:	f04f 3cff 	mov.w	ip, #4294967295
 808aa1c:	e006      	b.n	808aa2c <__cmpsf2+0x4>
 808aa1e:	bf00      	nop

0808aa20 <__lesf2>:
 808aa20:	f04f 0c01 	mov.w	ip, #1
 808aa24:	e002      	b.n	808aa2c <__cmpsf2+0x4>
 808aa26:	bf00      	nop

0808aa28 <__cmpsf2>:
 808aa28:	f04f 0c01 	mov.w	ip, #1
 808aa2c:	f84d cd04 	str.w	ip, [sp, #-4]!
 808aa30:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808aa34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808aa38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808aa3c:	bf18      	it	ne
 808aa3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808aa42:	d011      	beq.n	808aa68 <__cmpsf2+0x40>
 808aa44:	b001      	add	sp, #4
 808aa46:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 808aa4a:	bf18      	it	ne
 808aa4c:	ea90 0f01 	teqne	r0, r1
 808aa50:	bf58      	it	pl
 808aa52:	ebb2 0003 	subspl.w	r0, r2, r3
 808aa56:	bf88      	it	hi
 808aa58:	17c8      	asrhi	r0, r1, #31
 808aa5a:	bf38      	it	cc
 808aa5c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 808aa60:	bf18      	it	ne
 808aa62:	f040 0001 	orrne.w	r0, r0, #1
 808aa66:	4770      	bx	lr
 808aa68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808aa6c:	d102      	bne.n	808aa74 <__cmpsf2+0x4c>
 808aa6e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 808aa72:	d105      	bne.n	808aa80 <__cmpsf2+0x58>
 808aa74:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 808aa78:	d1e4      	bne.n	808aa44 <__cmpsf2+0x1c>
 808aa7a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 808aa7e:	d0e1      	beq.n	808aa44 <__cmpsf2+0x1c>
 808aa80:	f85d 0b04 	ldr.w	r0, [sp], #4
 808aa84:	4770      	bx	lr
 808aa86:	bf00      	nop

0808aa88 <__aeabi_cfrcmple>:
 808aa88:	4684      	mov	ip, r0
 808aa8a:	4608      	mov	r0, r1
 808aa8c:	4661      	mov	r1, ip
 808aa8e:	e7ff      	b.n	808aa90 <__aeabi_cfcmpeq>

0808aa90 <__aeabi_cfcmpeq>:
 808aa90:	b50f      	push	{r0, r1, r2, r3, lr}
 808aa92:	f7ff ffc9 	bl	808aa28 <__cmpsf2>
 808aa96:	2800      	cmp	r0, #0
 808aa98:	bf48      	it	mi
 808aa9a:	f110 0f00 	cmnmi.w	r0, #0
 808aa9e:	bd0f      	pop	{r0, r1, r2, r3, pc}

0808aaa0 <__aeabi_fcmpeq>:
 808aaa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 808aaa4:	f7ff fff4 	bl	808aa90 <__aeabi_cfcmpeq>
 808aaa8:	bf0c      	ite	eq
 808aaaa:	2001      	moveq	r0, #1
 808aaac:	2000      	movne	r0, #0
 808aaae:	f85d fb08 	ldr.w	pc, [sp], #8
 808aab2:	bf00      	nop

0808aab4 <__aeabi_fcmplt>:
 808aab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 808aab8:	f7ff ffea 	bl	808aa90 <__aeabi_cfcmpeq>
 808aabc:	bf34      	ite	cc
 808aabe:	2001      	movcc	r0, #1
 808aac0:	2000      	movcs	r0, #0
 808aac2:	f85d fb08 	ldr.w	pc, [sp], #8
 808aac6:	bf00      	nop

0808aac8 <__aeabi_fcmple>:
 808aac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 808aacc:	f7ff ffe0 	bl	808aa90 <__aeabi_cfcmpeq>
 808aad0:	bf94      	ite	ls
 808aad2:	2001      	movls	r0, #1
 808aad4:	2000      	movhi	r0, #0
 808aad6:	f85d fb08 	ldr.w	pc, [sp], #8
 808aada:	bf00      	nop

0808aadc <__aeabi_fcmpge>:
 808aadc:	f84d ed08 	str.w	lr, [sp, #-8]!
 808aae0:	f7ff ffd2 	bl	808aa88 <__aeabi_cfrcmple>
 808aae4:	bf94      	ite	ls
 808aae6:	2001      	movls	r0, #1
 808aae8:	2000      	movhi	r0, #0
 808aaea:	f85d fb08 	ldr.w	pc, [sp], #8
 808aaee:	bf00      	nop

0808aaf0 <__aeabi_fcmpgt>:
 808aaf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 808aaf4:	f7ff ffc8 	bl	808aa88 <__aeabi_cfrcmple>
 808aaf8:	bf34      	ite	cc
 808aafa:	2001      	movcc	r0, #1
 808aafc:	2000      	movcs	r0, #0
 808aafe:	f85d fb08 	ldr.w	pc, [sp], #8
 808ab02:	bf00      	nop

0808ab04 <__aeabi_fcmpun>:
 808ab04:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808ab08:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808ab0c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808ab10:	d102      	bne.n	808ab18 <__aeabi_fcmpun+0x14>
 808ab12:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 808ab16:	d108      	bne.n	808ab2a <__aeabi_fcmpun+0x26>
 808ab18:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 808ab1c:	d102      	bne.n	808ab24 <__aeabi_fcmpun+0x20>
 808ab1e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 808ab22:	d102      	bne.n	808ab2a <__aeabi_fcmpun+0x26>
 808ab24:	f04f 0000 	mov.w	r0, #0
 808ab28:	4770      	bx	lr
 808ab2a:	f04f 0001 	mov.w	r0, #1
 808ab2e:	4770      	bx	lr

0808ab30 <__aeabi_f2iz>:
 808ab30:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808ab34:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 808ab38:	d30f      	bcc.n	808ab5a <__aeabi_f2iz+0x2a>
 808ab3a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 808ab3e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 808ab42:	d90d      	bls.n	808ab60 <__aeabi_f2iz+0x30>
 808ab44:	ea4f 2300 	mov.w	r3, r0, lsl #8
 808ab48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808ab4c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 808ab50:	fa23 f002 	lsr.w	r0, r3, r2
 808ab54:	bf18      	it	ne
 808ab56:	4240      	negne	r0, r0
 808ab58:	4770      	bx	lr
 808ab5a:	f04f 0000 	mov.w	r0, #0
 808ab5e:	4770      	bx	lr
 808ab60:	f112 0f61 	cmn.w	r2, #97	; 0x61
 808ab64:	d101      	bne.n	808ab6a <__aeabi_f2iz+0x3a>
 808ab66:	0242      	lsls	r2, r0, #9
 808ab68:	d105      	bne.n	808ab76 <__aeabi_f2iz+0x46>
 808ab6a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 808ab6e:	bf08      	it	eq
 808ab70:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808ab74:	4770      	bx	lr
 808ab76:	f04f 0000 	mov.w	r0, #0
 808ab7a:	4770      	bx	lr

0808ab7c <asctime_r>:
 808ab7c:	b510      	push	{r4, lr}
 808ab7e:	460c      	mov	r4, r1
 808ab80:	6941      	ldr	r1, [r0, #20]
 808ab82:	b086      	sub	sp, #24
 808ab84:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 808ab88:	6903      	ldr	r3, [r0, #16]
 808ab8a:	6982      	ldr	r2, [r0, #24]
 808ab8c:	9104      	str	r1, [sp, #16]
 808ab8e:	6801      	ldr	r1, [r0, #0]
 808ab90:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 808ab94:	9103      	str	r1, [sp, #12]
 808ab96:	6841      	ldr	r1, [r0, #4]
 808ab98:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 808ab9c:	9102      	str	r1, [sp, #8]
 808ab9e:	6881      	ldr	r1, [r0, #8]
 808aba0:	9101      	str	r1, [sp, #4]
 808aba2:	68c1      	ldr	r1, [r0, #12]
 808aba4:	4620      	mov	r0, r4
 808aba6:	9100      	str	r1, [sp, #0]
 808aba8:	4904      	ldr	r1, [pc, #16]	; (808abbc <asctime_r+0x40>)
 808abaa:	440b      	add	r3, r1
 808abac:	4904      	ldr	r1, [pc, #16]	; (808abc0 <asctime_r+0x44>)
 808abae:	440a      	add	r2, r1
 808abb0:	4904      	ldr	r1, [pc, #16]	; (808abc4 <asctime_r+0x48>)
 808abb2:	f7fa fad5 	bl	8085160 <siprintf>
 808abb6:	4620      	mov	r0, r4
 808abb8:	b006      	add	sp, #24
 808abba:	bd10      	pop	{r4, pc}
 808abbc:	0808bde5 	.word	0x0808bde5
 808abc0:	0808bdd0 	.word	0x0808bdd0
 808abc4:	0808bdb0 	.word	0x0808bdb0

0808abc8 <atoi>:
 808abc8:	220a      	movs	r2, #10
 808abca:	2100      	movs	r1, #0
 808abcc:	f000 b9d0 	b.w	808af70 <strtol>

0808abd0 <atol>:
 808abd0:	220a      	movs	r2, #10
 808abd2:	2100      	movs	r1, #0
 808abd4:	f000 b9cc 	b.w	808af70 <strtol>

0808abd8 <__cxa_atexit>:
 808abd8:	b510      	push	{r4, lr}
 808abda:	4604      	mov	r4, r0
 808abdc:	4804      	ldr	r0, [pc, #16]	; (808abf0 <__cxa_atexit+0x18>)
 808abde:	4613      	mov	r3, r2
 808abe0:	b120      	cbz	r0, 808abec <__cxa_atexit+0x14>
 808abe2:	460a      	mov	r2, r1
 808abe4:	2002      	movs	r0, #2
 808abe6:	4621      	mov	r1, r4
 808abe8:	f3af 8000 	nop.w
 808abec:	bd10      	pop	{r4, pc}
 808abee:	bf00      	nop
 808abf0:	00000000 	.word	0x00000000

0808abf4 <memcpy>:
 808abf4:	440a      	add	r2, r1
 808abf6:	4291      	cmp	r1, r2
 808abf8:	f100 33ff 	add.w	r3, r0, #4294967295
 808abfc:	d100      	bne.n	808ac00 <memcpy+0xc>
 808abfe:	4770      	bx	lr
 808ac00:	b510      	push	{r4, lr}
 808ac02:	f811 4b01 	ldrb.w	r4, [r1], #1
 808ac06:	4291      	cmp	r1, r2
 808ac08:	f803 4f01 	strb.w	r4, [r3, #1]!
 808ac0c:	d1f9      	bne.n	808ac02 <memcpy+0xe>
 808ac0e:	bd10      	pop	{r4, pc}

0808ac10 <memmove>:
 808ac10:	4288      	cmp	r0, r1
 808ac12:	b510      	push	{r4, lr}
 808ac14:	eb01 0402 	add.w	r4, r1, r2
 808ac18:	d902      	bls.n	808ac20 <memmove+0x10>
 808ac1a:	4284      	cmp	r4, r0
 808ac1c:	4623      	mov	r3, r4
 808ac1e:	d807      	bhi.n	808ac30 <memmove+0x20>
 808ac20:	1e43      	subs	r3, r0, #1
 808ac22:	42a1      	cmp	r1, r4
 808ac24:	d008      	beq.n	808ac38 <memmove+0x28>
 808ac26:	f811 2b01 	ldrb.w	r2, [r1], #1
 808ac2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 808ac2e:	e7f8      	b.n	808ac22 <memmove+0x12>
 808ac30:	4601      	mov	r1, r0
 808ac32:	4402      	add	r2, r0
 808ac34:	428a      	cmp	r2, r1
 808ac36:	d100      	bne.n	808ac3a <memmove+0x2a>
 808ac38:	bd10      	pop	{r4, pc}
 808ac3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 808ac3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 808ac42:	e7f7      	b.n	808ac34 <memmove+0x24>

0808ac44 <memset>:
 808ac44:	4603      	mov	r3, r0
 808ac46:	4402      	add	r2, r0
 808ac48:	4293      	cmp	r3, r2
 808ac4a:	d100      	bne.n	808ac4e <memset+0xa>
 808ac4c:	4770      	bx	lr
 808ac4e:	f803 1b01 	strb.w	r1, [r3], #1
 808ac52:	e7f9      	b.n	808ac48 <memset+0x4>

0808ac54 <srand>:
 808ac54:	b538      	push	{r3, r4, r5, lr}
 808ac56:	4b10      	ldr	r3, [pc, #64]	; (808ac98 <srand+0x44>)
 808ac58:	4604      	mov	r4, r0
 808ac5a:	681d      	ldr	r5, [r3, #0]
 808ac5c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 808ac5e:	b9b3      	cbnz	r3, 808ac8e <srand+0x3a>
 808ac60:	2018      	movs	r0, #24
 808ac62:	f7fa fa65 	bl	8085130 <malloc>
 808ac66:	4602      	mov	r2, r0
 808ac68:	63a8      	str	r0, [r5, #56]	; 0x38
 808ac6a:	b920      	cbnz	r0, 808ac76 <srand+0x22>
 808ac6c:	2142      	movs	r1, #66	; 0x42
 808ac6e:	4b0b      	ldr	r3, [pc, #44]	; (808ac9c <srand+0x48>)
 808ac70:	480b      	ldr	r0, [pc, #44]	; (808aca0 <srand+0x4c>)
 808ac72:	f7fa faa5 	bl	80851c0 <__assert_func>
 808ac76:	490b      	ldr	r1, [pc, #44]	; (808aca4 <srand+0x50>)
 808ac78:	4b0b      	ldr	r3, [pc, #44]	; (808aca8 <srand+0x54>)
 808ac7a:	e9c0 1300 	strd	r1, r3, [r0]
 808ac7e:	4b0b      	ldr	r3, [pc, #44]	; (808acac <srand+0x58>)
 808ac80:	2100      	movs	r1, #0
 808ac82:	6083      	str	r3, [r0, #8]
 808ac84:	230b      	movs	r3, #11
 808ac86:	8183      	strh	r3, [r0, #12]
 808ac88:	2001      	movs	r0, #1
 808ac8a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 808ac8e:	2200      	movs	r2, #0
 808ac90:	6bab      	ldr	r3, [r5, #56]	; 0x38
 808ac92:	611c      	str	r4, [r3, #16]
 808ac94:	615a      	str	r2, [r3, #20]
 808ac96:	bd38      	pop	{r3, r4, r5, pc}
 808ac98:	200000cc 	.word	0x200000cc
 808ac9c:	0808be09 	.word	0x0808be09
 808aca0:	0808be20 	.word	0x0808be20
 808aca4:	abcd330e 	.word	0xabcd330e
 808aca8:	e66d1234 	.word	0xe66d1234
 808acac:	0005deec 	.word	0x0005deec

0808acb0 <strchr>:
 808acb0:	4603      	mov	r3, r0
 808acb2:	b2c9      	uxtb	r1, r1
 808acb4:	4618      	mov	r0, r3
 808acb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 808acba:	b112      	cbz	r2, 808acc2 <strchr+0x12>
 808acbc:	428a      	cmp	r2, r1
 808acbe:	d1f9      	bne.n	808acb4 <strchr+0x4>
 808acc0:	4770      	bx	lr
 808acc2:	2900      	cmp	r1, #0
 808acc4:	bf18      	it	ne
 808acc6:	2000      	movne	r0, #0
 808acc8:	4770      	bx	lr

0808acca <strchrnul>:
 808acca:	b510      	push	{r4, lr}
 808accc:	4604      	mov	r4, r0
 808acce:	f7ff ffef 	bl	808acb0 <strchr>
 808acd2:	b918      	cbnz	r0, 808acdc <strchrnul+0x12>
 808acd4:	4620      	mov	r0, r4
 808acd6:	f000 f830 	bl	808ad3a <strlen>
 808acda:	4420      	add	r0, r4
 808acdc:	bd10      	pop	{r4, pc}

0808acde <strcmp>:
 808acde:	f810 2b01 	ldrb.w	r2, [r0], #1
 808ace2:	f811 3b01 	ldrb.w	r3, [r1], #1
 808ace6:	2a01      	cmp	r2, #1
 808ace8:	bf28      	it	cs
 808acea:	429a      	cmpcs	r2, r3
 808acec:	d0f7      	beq.n	808acde <strcmp>
 808acee:	1ad0      	subs	r0, r2, r3
 808acf0:	4770      	bx	lr

0808acf2 <strcpy>:
 808acf2:	4603      	mov	r3, r0
 808acf4:	f811 2b01 	ldrb.w	r2, [r1], #1
 808acf8:	f803 2b01 	strb.w	r2, [r3], #1
 808acfc:	2a00      	cmp	r2, #0
 808acfe:	d1f9      	bne.n	808acf4 <strcpy+0x2>
 808ad00:	4770      	bx	lr
	...

0808ad04 <strdup>:
 808ad04:	4b02      	ldr	r3, [pc, #8]	; (808ad10 <strdup+0xc>)
 808ad06:	4601      	mov	r1, r0
 808ad08:	6818      	ldr	r0, [r3, #0]
 808ad0a:	f000 b803 	b.w	808ad14 <_strdup_r>
 808ad0e:	bf00      	nop
 808ad10:	200000cc 	.word	0x200000cc

0808ad14 <_strdup_r>:
 808ad14:	b570      	push	{r4, r5, r6, lr}
 808ad16:	4604      	mov	r4, r0
 808ad18:	4608      	mov	r0, r1
 808ad1a:	460d      	mov	r5, r1
 808ad1c:	f000 f80d 	bl	808ad3a <strlen>
 808ad20:	1c46      	adds	r6, r0, #1
 808ad22:	4631      	mov	r1, r6
 808ad24:	4620      	mov	r0, r4
 808ad26:	f7fa fa3b 	bl	80851a0 <_malloc_r>
 808ad2a:	4604      	mov	r4, r0
 808ad2c:	b118      	cbz	r0, 808ad36 <_strdup_r+0x22>
 808ad2e:	4632      	mov	r2, r6
 808ad30:	4629      	mov	r1, r5
 808ad32:	f7ff ff5f 	bl	808abf4 <memcpy>
 808ad36:	4620      	mov	r0, r4
 808ad38:	bd70      	pop	{r4, r5, r6, pc}

0808ad3a <strlen>:
 808ad3a:	4603      	mov	r3, r0
 808ad3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 808ad40:	2a00      	cmp	r2, #0
 808ad42:	d1fb      	bne.n	808ad3c <strlen+0x2>
 808ad44:	1a18      	subs	r0, r3, r0
 808ad46:	3801      	subs	r0, #1
 808ad48:	4770      	bx	lr

0808ad4a <strncmp>:
 808ad4a:	4603      	mov	r3, r0
 808ad4c:	b510      	push	{r4, lr}
 808ad4e:	b172      	cbz	r2, 808ad6e <strncmp+0x24>
 808ad50:	3901      	subs	r1, #1
 808ad52:	1884      	adds	r4, r0, r2
 808ad54:	f813 0b01 	ldrb.w	r0, [r3], #1
 808ad58:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 808ad5c:	4290      	cmp	r0, r2
 808ad5e:	d101      	bne.n	808ad64 <strncmp+0x1a>
 808ad60:	42a3      	cmp	r3, r4
 808ad62:	d101      	bne.n	808ad68 <strncmp+0x1e>
 808ad64:	1a80      	subs	r0, r0, r2
 808ad66:	bd10      	pop	{r4, pc}
 808ad68:	2800      	cmp	r0, #0
 808ad6a:	d1f3      	bne.n	808ad54 <strncmp+0xa>
 808ad6c:	e7fa      	b.n	808ad64 <strncmp+0x1a>
 808ad6e:	4610      	mov	r0, r2
 808ad70:	e7f9      	b.n	808ad66 <strncmp+0x1c>

0808ad72 <strncpy>:
 808ad72:	4603      	mov	r3, r0
 808ad74:	b510      	push	{r4, lr}
 808ad76:	3901      	subs	r1, #1
 808ad78:	b132      	cbz	r2, 808ad88 <strncpy+0x16>
 808ad7a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 808ad7e:	3a01      	subs	r2, #1
 808ad80:	f803 4b01 	strb.w	r4, [r3], #1
 808ad84:	2c00      	cmp	r4, #0
 808ad86:	d1f7      	bne.n	808ad78 <strncpy+0x6>
 808ad88:	2100      	movs	r1, #0
 808ad8a:	441a      	add	r2, r3
 808ad8c:	4293      	cmp	r3, r2
 808ad8e:	d100      	bne.n	808ad92 <strncpy+0x20>
 808ad90:	bd10      	pop	{r4, pc}
 808ad92:	f803 1b01 	strb.w	r1, [r3], #1
 808ad96:	e7f9      	b.n	808ad8c <strncpy+0x1a>

0808ad98 <strrchr>:
 808ad98:	b538      	push	{r3, r4, r5, lr}
 808ad9a:	4603      	mov	r3, r0
 808ad9c:	460c      	mov	r4, r1
 808ad9e:	b969      	cbnz	r1, 808adbc <strrchr+0x24>
 808ada0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 808ada4:	f7ff bf84 	b.w	808acb0 <strchr>
 808ada8:	4605      	mov	r5, r0
 808adaa:	1c43      	adds	r3, r0, #1
 808adac:	4621      	mov	r1, r4
 808adae:	4618      	mov	r0, r3
 808adb0:	f7ff ff7e 	bl	808acb0 <strchr>
 808adb4:	2800      	cmp	r0, #0
 808adb6:	d1f7      	bne.n	808ada8 <strrchr+0x10>
 808adb8:	4628      	mov	r0, r5
 808adba:	bd38      	pop	{r3, r4, r5, pc}
 808adbc:	2500      	movs	r5, #0
 808adbe:	e7f5      	b.n	808adac <strrchr+0x14>

0808adc0 <strtok>:
 808adc0:	4b16      	ldr	r3, [pc, #88]	; (808ae1c <strtok+0x5c>)
 808adc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808adc6:	681f      	ldr	r7, [r3, #0]
 808adc8:	4605      	mov	r5, r0
 808adca:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 808adcc:	460e      	mov	r6, r1
 808adce:	b9ec      	cbnz	r4, 808ae0c <strtok+0x4c>
 808add0:	2050      	movs	r0, #80	; 0x50
 808add2:	f7fa f9ad 	bl	8085130 <malloc>
 808add6:	4602      	mov	r2, r0
 808add8:	65b8      	str	r0, [r7, #88]	; 0x58
 808adda:	b920      	cbnz	r0, 808ade6 <strtok+0x26>
 808addc:	2157      	movs	r1, #87	; 0x57
 808adde:	4b10      	ldr	r3, [pc, #64]	; (808ae20 <strtok+0x60>)
 808ade0:	4810      	ldr	r0, [pc, #64]	; (808ae24 <strtok+0x64>)
 808ade2:	f7fa f9ed 	bl	80851c0 <__assert_func>
 808ade6:	e9c0 4400 	strd	r4, r4, [r0]
 808adea:	e9c0 4402 	strd	r4, r4, [r0, #8]
 808adee:	e9c0 4404 	strd	r4, r4, [r0, #16]
 808adf2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 808adf6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 808adfa:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 808adfe:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 808ae02:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 808ae06:	6184      	str	r4, [r0, #24]
 808ae08:	7704      	strb	r4, [r0, #28]
 808ae0a:	6244      	str	r4, [r0, #36]	; 0x24
 808ae0c:	4631      	mov	r1, r6
 808ae0e:	4628      	mov	r0, r5
 808ae10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 808ae12:	2301      	movs	r3, #1
 808ae14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 808ae18:	f000 b806 	b.w	808ae28 <__strtok_r>
 808ae1c:	200000cc 	.word	0x200000cc
 808ae20:	0808be09 	.word	0x0808be09
 808ae24:	0808be9d 	.word	0x0808be9d

0808ae28 <__strtok_r>:
 808ae28:	b5f0      	push	{r4, r5, r6, r7, lr}
 808ae2a:	b908      	cbnz	r0, 808ae30 <__strtok_r+0x8>
 808ae2c:	6810      	ldr	r0, [r2, #0]
 808ae2e:	b188      	cbz	r0, 808ae54 <__strtok_r+0x2c>
 808ae30:	4604      	mov	r4, r0
 808ae32:	460f      	mov	r7, r1
 808ae34:	4620      	mov	r0, r4
 808ae36:	f814 5b01 	ldrb.w	r5, [r4], #1
 808ae3a:	f817 6b01 	ldrb.w	r6, [r7], #1
 808ae3e:	b91e      	cbnz	r6, 808ae48 <__strtok_r+0x20>
 808ae40:	b965      	cbnz	r5, 808ae5c <__strtok_r+0x34>
 808ae42:	4628      	mov	r0, r5
 808ae44:	6015      	str	r5, [r2, #0]
 808ae46:	e005      	b.n	808ae54 <__strtok_r+0x2c>
 808ae48:	42b5      	cmp	r5, r6
 808ae4a:	d1f6      	bne.n	808ae3a <__strtok_r+0x12>
 808ae4c:	2b00      	cmp	r3, #0
 808ae4e:	d1f0      	bne.n	808ae32 <__strtok_r+0xa>
 808ae50:	6014      	str	r4, [r2, #0]
 808ae52:	7003      	strb	r3, [r0, #0]
 808ae54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808ae56:	461c      	mov	r4, r3
 808ae58:	e00c      	b.n	808ae74 <__strtok_r+0x4c>
 808ae5a:	b915      	cbnz	r5, 808ae62 <__strtok_r+0x3a>
 808ae5c:	460e      	mov	r6, r1
 808ae5e:	f814 3b01 	ldrb.w	r3, [r4], #1
 808ae62:	f816 5b01 	ldrb.w	r5, [r6], #1
 808ae66:	42ab      	cmp	r3, r5
 808ae68:	d1f7      	bne.n	808ae5a <__strtok_r+0x32>
 808ae6a:	2b00      	cmp	r3, #0
 808ae6c:	d0f3      	beq.n	808ae56 <__strtok_r+0x2e>
 808ae6e:	2300      	movs	r3, #0
 808ae70:	f804 3c01 	strb.w	r3, [r4, #-1]
 808ae74:	6014      	str	r4, [r2, #0]
 808ae76:	e7ed      	b.n	808ae54 <__strtok_r+0x2c>

0808ae78 <_strtol_l.constprop.0>:
 808ae78:	2b01      	cmp	r3, #1
 808ae7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808ae7e:	4680      	mov	r8, r0
 808ae80:	d001      	beq.n	808ae86 <_strtol_l.constprop.0+0xe>
 808ae82:	2b24      	cmp	r3, #36	; 0x24
 808ae84:	d906      	bls.n	808ae94 <_strtol_l.constprop.0+0x1c>
 808ae86:	f7fa f993 	bl	80851b0 <__errno>
 808ae8a:	2316      	movs	r3, #22
 808ae8c:	6003      	str	r3, [r0, #0]
 808ae8e:	2000      	movs	r0, #0
 808ae90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808ae94:	460d      	mov	r5, r1
 808ae96:	4f35      	ldr	r7, [pc, #212]	; (808af6c <_strtol_l.constprop.0+0xf4>)
 808ae98:	4628      	mov	r0, r5
 808ae9a:	f815 4b01 	ldrb.w	r4, [r5], #1
 808ae9e:	5de6      	ldrb	r6, [r4, r7]
 808aea0:	f016 0608 	ands.w	r6, r6, #8
 808aea4:	d1f8      	bne.n	808ae98 <_strtol_l.constprop.0+0x20>
 808aea6:	2c2d      	cmp	r4, #45	; 0x2d
 808aea8:	d12f      	bne.n	808af0a <_strtol_l.constprop.0+0x92>
 808aeaa:	2601      	movs	r6, #1
 808aeac:	782c      	ldrb	r4, [r5, #0]
 808aeae:	1c85      	adds	r5, r0, #2
 808aeb0:	2b00      	cmp	r3, #0
 808aeb2:	d057      	beq.n	808af64 <_strtol_l.constprop.0+0xec>
 808aeb4:	2b10      	cmp	r3, #16
 808aeb6:	d109      	bne.n	808aecc <_strtol_l.constprop.0+0x54>
 808aeb8:	2c30      	cmp	r4, #48	; 0x30
 808aeba:	d107      	bne.n	808aecc <_strtol_l.constprop.0+0x54>
 808aebc:	7828      	ldrb	r0, [r5, #0]
 808aebe:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 808aec2:	2858      	cmp	r0, #88	; 0x58
 808aec4:	d149      	bne.n	808af5a <_strtol_l.constprop.0+0xe2>
 808aec6:	2310      	movs	r3, #16
 808aec8:	786c      	ldrb	r4, [r5, #1]
 808aeca:	3502      	adds	r5, #2
 808aecc:	2700      	movs	r7, #0
 808aece:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 808aed2:	f10e 3eff 	add.w	lr, lr, #4294967295
 808aed6:	fbbe f9f3 	udiv	r9, lr, r3
 808aeda:	4638      	mov	r0, r7
 808aedc:	fb03 ea19 	mls	sl, r3, r9, lr
 808aee0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 808aee4:	f1bc 0f09 	cmp.w	ip, #9
 808aee8:	d814      	bhi.n	808af14 <_strtol_l.constprop.0+0x9c>
 808aeea:	4664      	mov	r4, ip
 808aeec:	42a3      	cmp	r3, r4
 808aeee:	dd22      	ble.n	808af36 <_strtol_l.constprop.0+0xbe>
 808aef0:	2f00      	cmp	r7, #0
 808aef2:	db1d      	blt.n	808af30 <_strtol_l.constprop.0+0xb8>
 808aef4:	4581      	cmp	r9, r0
 808aef6:	d31b      	bcc.n	808af30 <_strtol_l.constprop.0+0xb8>
 808aef8:	d101      	bne.n	808aefe <_strtol_l.constprop.0+0x86>
 808aefa:	45a2      	cmp	sl, r4
 808aefc:	db18      	blt.n	808af30 <_strtol_l.constprop.0+0xb8>
 808aefe:	2701      	movs	r7, #1
 808af00:	fb00 4003 	mla	r0, r0, r3, r4
 808af04:	f815 4b01 	ldrb.w	r4, [r5], #1
 808af08:	e7ea      	b.n	808aee0 <_strtol_l.constprop.0+0x68>
 808af0a:	2c2b      	cmp	r4, #43	; 0x2b
 808af0c:	bf04      	itt	eq
 808af0e:	782c      	ldrbeq	r4, [r5, #0]
 808af10:	1c85      	addeq	r5, r0, #2
 808af12:	e7cd      	b.n	808aeb0 <_strtol_l.constprop.0+0x38>
 808af14:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 808af18:	f1bc 0f19 	cmp.w	ip, #25
 808af1c:	d801      	bhi.n	808af22 <_strtol_l.constprop.0+0xaa>
 808af1e:	3c37      	subs	r4, #55	; 0x37
 808af20:	e7e4      	b.n	808aeec <_strtol_l.constprop.0+0x74>
 808af22:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 808af26:	f1bc 0f19 	cmp.w	ip, #25
 808af2a:	d804      	bhi.n	808af36 <_strtol_l.constprop.0+0xbe>
 808af2c:	3c57      	subs	r4, #87	; 0x57
 808af2e:	e7dd      	b.n	808aeec <_strtol_l.constprop.0+0x74>
 808af30:	f04f 37ff 	mov.w	r7, #4294967295
 808af34:	e7e6      	b.n	808af04 <_strtol_l.constprop.0+0x8c>
 808af36:	2f00      	cmp	r7, #0
 808af38:	da07      	bge.n	808af4a <_strtol_l.constprop.0+0xd2>
 808af3a:	2322      	movs	r3, #34	; 0x22
 808af3c:	4670      	mov	r0, lr
 808af3e:	f8c8 3000 	str.w	r3, [r8]
 808af42:	2a00      	cmp	r2, #0
 808af44:	d0a4      	beq.n	808ae90 <_strtol_l.constprop.0+0x18>
 808af46:	1e69      	subs	r1, r5, #1
 808af48:	e005      	b.n	808af56 <_strtol_l.constprop.0+0xde>
 808af4a:	b106      	cbz	r6, 808af4e <_strtol_l.constprop.0+0xd6>
 808af4c:	4240      	negs	r0, r0
 808af4e:	2a00      	cmp	r2, #0
 808af50:	d09e      	beq.n	808ae90 <_strtol_l.constprop.0+0x18>
 808af52:	2f00      	cmp	r7, #0
 808af54:	d1f7      	bne.n	808af46 <_strtol_l.constprop.0+0xce>
 808af56:	6011      	str	r1, [r2, #0]
 808af58:	e79a      	b.n	808ae90 <_strtol_l.constprop.0+0x18>
 808af5a:	2430      	movs	r4, #48	; 0x30
 808af5c:	2b00      	cmp	r3, #0
 808af5e:	d1b5      	bne.n	808aecc <_strtol_l.constprop.0+0x54>
 808af60:	2308      	movs	r3, #8
 808af62:	e7b3      	b.n	808aecc <_strtol_l.constprop.0+0x54>
 808af64:	2c30      	cmp	r4, #48	; 0x30
 808af66:	d0a9      	beq.n	808aebc <_strtol_l.constprop.0+0x44>
 808af68:	230a      	movs	r3, #10
 808af6a:	e7af      	b.n	808aecc <_strtol_l.constprop.0+0x54>
 808af6c:	0808bf1d 	.word	0x0808bf1d

0808af70 <strtol>:
 808af70:	4613      	mov	r3, r2
 808af72:	460a      	mov	r2, r1
 808af74:	4601      	mov	r1, r0
 808af76:	4802      	ldr	r0, [pc, #8]	; (808af80 <strtol+0x10>)
 808af78:	6800      	ldr	r0, [r0, #0]
 808af7a:	f7ff bf7d 	b.w	808ae78 <_strtol_l.constprop.0>
 808af7e:	bf00      	nop
 808af80:	200000cc 	.word	0x200000cc

0808af84 <dynalib_user>:
 808af84:	08080041 08080081 080800a9 080800ad     A...............
 808af94:	00000000 65746e69 6c616e72 74786500     ....internal.ext
 808afa4:	616e7265 6e69006c 6f437469 656c706d     ernal.initComple
 808afb4:	203a6574 756f6800 00203a72 756e696d     te: .hour: .minu
 808afc4:	203a6574 6e6f6d00 203a6874 79616400     te: .month: .day
 808afd4:	7900203a 3a726165 696d0020 73696c6c     : .year: .millis
 808afe4:	6e6f6365 203a7364 74616c00 64757469     econds: .latitud
 808aff4:	00203a65 676e6f6c 64757469 00203a65     e: .longitude: .
 808b004:	6974616c 65647574 72676544 3a736565     latitudeDegrees:
 808b014:	6f6c0020 7469676e 44656475 65726765      .longitudeDegre
 808b024:	203a7365 6f656700 65686469 74686769     es: .geoidheight
 808b034:	6100203a 7469746c 3a656475 70730020     : .altitude: .sp
 808b044:	3a646565 69660020 61757178 7974696c     eed: .fixquality
 808b054:	7300203a 6c657461 6574696c 00203a73     : .satellites: .
 808b064:	7a726f68 3a636341 65760020 63417472     horzAcc: .vertAc
 808b074:	00203a63 4e6c6576 7600203a 3a456c65     c: .velN: .velE:
 808b084:	65760020 203a446c 70536700 3a646565      .velD: .gSpeed:
 808b094:	646f0020 6972546f 00203a70 546f646f      .odoTrip: .odoT
 808b0a4:	6c61746f 7200203a 3a657461 6e200020     otal: .rate: . n
 808b0b4:	203a7661 74756200 206e6f74 20736177     av: .button was 
 808b0c4:	63696c63 2064656b 74206425 73656d69     clicked %d times
 808b0d4:	6c227b00 253a2261 6c222c66 253a226f     .{"la":%f,"lo":%
 808b0e4:	68222c66 253a2274 61222c66 253a2263     f,"ht":%f,"ac":%
 808b0f4:	74222c66 223a226d 7d227325 474a4c00     f,"tm":"%s"}.LJG
 808b104:	49465350 227b0058 203a2273 222c6425     PSFIX.{"s": %d,"
 808b114:	203a226e 76222c30 2e253a22 222c6632     n": 0,"v":%.2f,"
 808b124:	253a2263 7d66322e 504a4c00 54535257     c":%.2f}.LJPWRST
 808b134:	7b005441 3a227822 222c6425 253a2279     AT.{"x":%d,"y":%
 808b144:	7a222c64 64253a22 226d222c 7d64253a     d,"z":%d,"m":%d}
 808b154:	414a4c00 524c4543 227b0054 253a2274     .LJACELRT.{"t":%
 808b164:	2c66322e 3a226822 66322e25 4a4c007d     .2f,"h":%.2f}.LJ
 808b174:	4d564e45 61460054 64656c69 206f7420     ENVMT.Failed to 
 808b184:	64616572 6f726620 4844206d 65732054     read from DHT se
 808b194:	726f736e 77700021 70670072 63610073     nsor!.pwr.gps.ac
 808b1a4:	6e650063 227b0076 22646d63 7325223a     c.env.{"cmd":"%s
 808b1b4:	4c007d22 444d434a 00525245 2273227b     "}.LJCMDERR.{"s"
 808b1c4:	6425203a 226e222c 2c31203a 3a227622     : %d,"n": 1,"v":
 808b1d4:	66322e25 2263222c 322e253a 0d007d66     %.2f,"c":%.2f}..
 808b1e4:	7465520a 76656972 20676e69 6f666e69     .Retrieving info
 808b1f4:	74616d72 206e6f69 6d6f7266 54484420     rmation from DHT
 808b204:	6e657320 2e726f73 65520020 73206461      sensor. .Read s
 808b214:	6f736e65 00203a72 45004b4f 726f7272     ensor: .OK.Error
 808b224:	43090d0a 6b636568 206d7573 6f727265     ...Checksum erro
 808b234:	72450072 0a726f72 5349090d 69742052     r.Error...ISR ti
 808b244:	6f20656d 65207475 726f7272 72724500     me out error.Err
 808b254:	0d0a726f 73655209 736e6f70 69742065     or...Response ti
 808b264:	6f20656d 65207475 726f7272 72724500     me out error.Err
 808b274:	0d0a726f 74614409 69742061 6f20656d     or...Data time o
 808b284:	65207475 726f7272 72724500 0d0a726f     ut error.Error..
 808b294:	71634109 69726975 4500676e 726f7272     .Acquiring.Error
 808b2a4:	44090d0a 61746c65 6d697420 6f742065     ...Delta time to
 808b2b4:	616d7320 45006c6c 726f7272 4e090d0a      small.Error...N
 808b2c4:	7320746f 74726174 55006465 6f6e6b6e     ot started.Unkno
 808b2d4:	65206e77 726f7272 6d754800 74696469     wn error.Humidit
 808b2e4:	25282079 203a2925 66322e25 6d655400     y (%%): %.2f.Tem
 808b2f4:	61726570 65727574 436f2820 25203a29     perature (oC): %
 808b304:	0066322e 706d6554 74617265 20657275     .2f.Temperature 
 808b314:	29466f28 2e25203a 54006632 65706d65     (oF): %.2f.Tempe
 808b324:	75746172 28206572 203a294b 66322e25     rature (K): %.2f
 808b334:	77654400 696f5020 2820746e 3a29436f     .Dew Point (oC):
 808b344:	322e2520 65440066 6f502077 20746e69      %.2f.Dew Point 
 808b354:	776f6c53 436f2820 25203a29 0066322e     Slow (oC): %.2f.
 808b364:	20646e45 6c20664f 28706f6f 75662029     End Of loop() fu
 808b374:	6974636e 69006e6f 4374696e 6c706d6f     nction.initCompl
 808b384:	00657465 72756f68 6e696d00 00657475     ete.hour.minute.
 808b394:	746e6f6d 61640068 65790079 6d007261     month.day.year.m
 808b3a4:	696c6c69 6f636573 0073646e 6974616c     illiseconds.lati
 808b3b4:	65647574 6e6f6c00 75746967 6c006564     tude.longitude.l
 808b3c4:	74697461 44656475 65726765 6c007365     atitudeDegrees.l
 808b3d4:	69676e6f 65647574 72676544 00736565     ongitudeDegrees.
 808b3e4:	696f6567 69656864 00746867 69746c61     geoidheight.alti
 808b3f4:	65647574 65707300 66006465 75717869     tude.speed.fixqu
 808b404:	74696c61 61730079 6c6c6574 73657469     ality.satellites
 808b414:	726f6800 6363417a 756c2500 72657600     .horzAcc.%lu.ver
 808b424:	63634174 6c657600 6c25004e 65760064     tAcc.velN.%ld.ve
 808b434:	7600456c 00446c65 65705367 6f006465     lE.velD.gSpeed.o
 808b444:	72546f64 6f007069 6f546f64 006c6174     doTrip.odoTotal.
 808b454:	276e6f44 6e6b2074 7420776f 20746168     Don't know that 
 808b464:	2e656e6f 65684320 73206b63 6c6c6570     one. Check spell
 808b474:	2e676e69 434a4c00 4156444d 7570004c     ing..LJCMDVAL.pu
 808b484:	6c615662 74657300 54434341 73007268     bVal.setACCThr.s
 808b494:	50477465 796c4453 74657300 44434341     etGPSDly.setACCD
 808b4a4:	7300796c 48447465 796c4454 73706700     ly.setDHTDly.gps
 808b4b4:	65746152 73657200 444f7465 6873004f     Rate.resetODO.sh
 808b4c4:	6c41776f 6f70006c 61567473 0065756c     owAll.postValue.
 808b4d4:	69676964 726c6174 00646165 69676964     digitalread.digi
 808b4e4:	776c6174 65746972 616e6100 72676f6c     talwrite.analogr
 808b4f4:	00646165 6c616e61 7277676f 00657469     ead.analogwrite.
 808b504:	7473616c 65776f50 63610072 546c6563     lastPower.accelT
 808b514:	73657268 72740068 6d736e61 614d7469     hresh.transmitMa
 808b524:	6c006b73 47747361 75505350 616c0062     sk.lastGPSPub.la
 808b534:	43417473 62755043 73616c00 54484474     stACCPub.lastDHT
 808b544:	00627550 616c6564 53504779 006e694d     Pub.delayGPSMin.
 808b554:	616c6564 43434179 006e694d 616c6564     delayACCMin.dela
 808b564:	54484479 006e694d 45737067 72657478     yDHTMin.gpsExter
 808b574:	006c616e 20646e45 7320666f 70757465     nal.End of setup
 808b584:	66202928 74636e75 006e6f69 67746573     () function.setg
 808b594:	6e617370 6f630074 76456e6e 53746e65     psant.connEventS
 808b5a4:	73746174 73657300 6e6f6973 63656843     tats.sessionChec
 808b5b4:	6574006b 72657473 00006e46              k.testerFn..

0808b5c0 <_ZTV5Timer>:
	...
 808b5c8:	08080811 08080865 08080105              ....e.......

0808b5d4 <_ZTVN5spark10LogHandlerE>:
	...
 808b5e4:	080800c9 080800ed                       ........

0808b5ec <_ZTVN5spark16SerialLogHandlerE>:
	...
 808b5f4:	08080339 0808036d 080867bd 080800ef     9...m....g......

0808b604 <_ZTV12BatteryCheck>:
	...
 808b60c:	08081cb9 08081cbb 65736572 6f6d0074     ........reset.mo
 808b61c:	526d6564 74657365 73657200 65537465     demReset.resetSe
 808b62c:	6f697373 7073006e 2f6b7261 69766564     ssion.spark/devi
 808b63c:	732f6563 69737365 652f6e6f 7300646e     ce/session/end.s
 808b64c:	4d656661 0065646f 57707061 68637461     afeMode.appWatch
 808b65c:	00676f64 65656c73 65640070 64007065     dog.sleep.deep.d
 808b66c:	53706565 646e6174 73007962 00706f74     eepStandby.stop.
 808b67c:	706f7473 6e617453 00796264 676e6970     stopStandby.ping
 808b68c:	61747300 00007472                       .start..

0808b694 <_ZTV6Tester>:
	...
 808b69c:	08081dad 08081daf 552b5441 474e4950     ........AT+UPING
 808b6ac:	2e38223d 2e382e38 0a0d2238 2b544100     ="8.8.8.8"...AT+
 808b6bc:	4e495055 61223d47 702e6970 69747261     UPING="api.parti
 808b6cc:	2e656c63 0d226f69 6572000a 74746573     cle.io"...resett
 808b6dc:	20676e69 65646f6d 5441006d 5546432b     ing modem.AT+CFU
 808b6ec:	36313d4e 75000a0d 6f640070 63006e77     N=16...up.down.c
 808b6fc:	756c6c65 2072616c 63007325 64756f6c     ellular %s.cloud
 808b70c:	6e6f6320 7463656e 206e6f69 65007325      connection %s.e
 808b71c:	7265746e 6c206465 65747369 676e696e     ntered listening
 808b72c:	646f6d20 00000065                        mode...

0808b734 <_ZTV15ConnectionCheck>:
	...
 808b73c:	080821ad 080821af 77707061 00007464     .!...!..appwdt..

0808b74c <_ZTV18AppWatchdogWrapper>:
	...
 808b754:	080824a9 080824f5 7570002f 73696c62     .$...$../.publis
 808b764:	676e6968 73657320 6e6f6973 65686320     hing session che
 808b774:	65206b63 746e6576 00732520              ck event %s.

0808b780 <_ZTV12SessionCheck>:
	...
 808b788:	0808268d 080826ad 2c756c25 2c756c25     .&...&..%lu,%lu,
 808b798:	252c6425 63003b64 646c756f 2074276e     %d,%d;.couldn't 
 808b7a8:	646e6573 6c6c6120 65766520 2c73746e     send all events,
 808b7b8:	76617320 20676e69 66206425 6c20726f      saving %d for l
 808b7c8:	72657461 6e657300 64252074 65766520     ater.sent %d eve
 808b7d8:	0073746e 63736964 69647261 6f20676e     nts.discarding o
 808b7e8:	6520646c 746e6576 6e6f6300 7463656e     ld event.connect
 808b7f8:	456e6f69 746e6576 65766520 253d746e     ionEvent event=%
 808b808:	61642064 253d6174 6e690064 61697469     d data=%d.initia
 808b818:	697a696c 6320676e 656e6e6f 6f697463     lizing connectio
 808b828:	7665206e 20746e65 61746572 64656e69     n event retained
 808b838:	6d656d20 0079726f                        memory.

0808b840 <_ZTV16ConnectionEvents>:
	...
 808b848:	080829d9 080829db                       .)...)..

0808b850 <_ZTV10PowerCheck>:
	...
 808b858:	08082c0d 08082c25 252c6625 70670066     .,..%,..%f,%f.gp
 808b868:	65622e73 206e6967 6c696166 203a6465     s.begin failed: 
 808b878:	53504700 61747320 64657472 53494c00     .GPS started.LIS
 808b888:	00484433                                3DH.

0808b88c <_ZTV15Adafruit_LIS3DH>:
	...
 808b894:	08082d37 08083029 08083069 08083475     7-..)0..i0..u4..
 808b8a4:	0808307d 6954003e 20646572 7720666f     }0..>.Tired of w
 808b8b4:	69746961 6620676e 7420726f 47206568     aiting for the G
 808b8c4:	202e5350 206d2749 6e696f67 68732067     PS. I'm going sh
 808b8d4:	69207475 666f2074 6e612066 65722064     ut it off and re
 808b8e4:	746f6f62 6572002e 42556461 67736d58     boot..readUBXmsg
 808b8f4:	64616220 6e656c20 3a687467 65720020      bad length: .re
 808b904:	42556461 67736d58 64616220 65686320     adUBXmsg bad che
 808b914:	73206b63 00206d75 5024002c 2c584255     ck sum .,.$PUBX,
 808b924:	312c3134 312c332c 3036392c 2a302c30     41,1,3,1,9600,0*
 808b934:	0a0d3631 67656200 66206e69 656c6961     16...begin faile
 808b944:	73202c64 65746174 2000203a 6f727265     d, state: . erro
 808b954:	00203a72 73726170 41203a65 545f4b43     r: .parse: ACK_T
 808b964:	3a455059 656d0020 67617373 63612065     YPE: .message ac
 808b974:	3a64656b 61700020 3a657372 4b414e20     ked: .parse: NAK
 808b984:	5059545f 00203a45 7373656d 20656761     _TYPE: .message 
 808b994:	654b414e 00203a64 73726170 55203a65     NAKed: .parse: U
 808b9a4:	6f6e6b6e 74206e77 3a657079 70670020     nknown type: .gp
 808b9b4:	65722e73 67206461 7520746f 41427862     s.read got ubxBA
 808b9c4:	454c5f44 4854474e 73706700 6165722e     D_LENGTH.gps.rea
 808b9d4:	6f672064 62752074 44414278 4548435f     d got ubxBAD_CHE
 808b9e4:	535f4b43 77004d55 65746972 3a584255     CK_SUM.writeUBX:
 808b9f4:	70797420 00203a65 2e737067 646e6573      type: .gps.send
 808ba04:	6d6d6f43 20646e61 20746f67 42786275     Command got ubxB
 808ba14:	4c5f4441 54474e45 70670048 65732e73     AD_LENGTH.gps.se
 808ba24:	6f43646e 6e616d6d 6f672064 62752074     ndCommand got ub
 808ba34:	44414278 4548435f 535f4b43 67004d55     xBAD_CHECK_SUM.g
 808ba44:	732e7370 43646e65 616d6d6f 6720646e     ps.sendCommand g
 808ba54:	7520746f 4f4e7862 4b43415f 74657300     ot ubxNO_ACK.set
 808ba64:	65746152 6863203a 65676e61 656d2064     Rate: changed me
 808ba74:	72757361 6e656d65 6f742074 6e696d20     asurement to min
 808ba84:	6d756d69 20303120 7300736d 61527465     imum 10 ms.setRa
 808ba94:	203a6574 6e616863 20646567 6976616e     te: changed navi
 808baa4:	69746167 6f536e6f 6f74206c 6e696d20     gationSol to min
 808bab4:	6d756d69 73003120 61527465 203a6574     imum 1.setRate: 
 808bac4:	6e616863 20646567 6976616e 69746167     changed navigati
 808bad4:	6f536e6f 6f74206c 78616d20 6d756d69     onSol to maximum
 808bae4:	37323120 74657300 65746152 656d203a      127.setRate: me
 808baf4:	72757361 6e656d65 00203a74 52746573     asurement: .setR
 808bb04:	3a657461 76616e20 74616769 536e6f69     ate: navigationS
 808bb14:	203a6c6f 74657300 65746152 6275203a     ol: .setRate: ub
 808bb24:	74615778 6f646863 00203a67 49480041     xWatchdog: .A.HI
 808bb34:	4c004847                                 GH.LOW.

0808bb3b <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 808bb3b:	18100800 38302820 006e616e 00666e69     .... (08nan.inf.
 808bb4b:	0066766f 64756162 72655300 006c6169     ovf.baud.Serial.
 808bb5b:	53425355 61697265 4a00316c 534e4f53     USBSerial1.JSONS
 808bb6b:	61657274 676f4c6d 646e6148 0072656c     treamLogHandler.
 808bb7b:	00707061 30313025 5d002075 202c0020     app.%010u .] ., 
 808bb8b:	3a292800 5b200020 646f6300 203d2065     .(): . [.code = 
 808bb9b:	00692500 61746564 20736c69 6c00203d     .%i.details = .l
 808bbab:	6e66006e 646f6300 65640065 6c696174     n.fn.code.detail
	...

0808bbbc <_ZTVN5spark16JSONStreamWriterE>:
	...
 808bbc4:	08085ba9 08085bcf 08085b8f 08087e0b     .[...[...[...~..

0808bbd4 <_ZTVN5spark16StreamLogHandlerE>:
	...
 808bbdc:	08086079 08086091 080867bd 080800ef     y`...`...g......

0808bbec <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 808bbf4:	080860a5 080860b9 08086965 08085b97     .`...`..ei...[..

0808bc04 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 808bc0c:	08085ba7 08085bdd 08086721 08085b99     .[...[..!g...[..

0808bc1c <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 808bc24:	08085ba5 08085beb 08085f99 08085c0b     .[...[..._...\..
 808bc34:	2b25005a 3a643330 75323025 2d592500     Z.%+03d:%02u.%Y-
 808bc44:	252d6d25 48255464 3a4d253a 7a255325     %m-%dT%H:%M:%S%z
 808bc54:	63736100 656d6974 00000000              .asctime....

0808bc60 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 808bc68:	08087045 0808704b 08087089 08087059     Ep..Kp...p..Yp..
 808bc78:	08087047                                Gp..

0808bc7c <_ZTV9IPAddress>:
	...
 808bc84:	08087643 08087641 08087675              Cv..Av..uv..

0808bc90 <_ZTV9USBSerial>:
	...
 808bc98:	080876e5 0808774b 08087723 080858b1     .v..Kw..#w...X..
 808bca8:	08087715 080876e7 080876f7 08087745     .w...v...v..Ew..
 808bcb8:	08087707 080876e1                       .w...v..

0808bcc0 <_ZTVN5spark13CellularClassE>:
	...
 808bcc8:	08087a27 08087a1d 08087a13 0808798d     'z...z...z...y..
 808bcd8:	08087a07 080879fb 08087d49 08087d51     .z...y..I}..Q}..
 808bce8:	080879ef 080879e7 080879dd 080879d3     .y...y...y...y..
 808bcf8:	08087997                                .y..

0808bcfc <_ZTV11USARTSerial>:
	...
 808bd04:	08087a61 08087ac9 08087aa5 080858b1     az...z...z...X..
 808bd14:	08087a75 08087a91 08087a83 08087a9f     uz...z...z...z..
 808bd24:	08087a63 08087a67                       cz..gz..

0808bd2c <_ZTV7TwoWire>:
	...
 808bd34:	08087b91 08087bdb 08087bb3 08087b93     .{...{...{...{..
 808bd44:	08087bbb 08087bc3 08087bcb 08087bd3     .{...{...{...{..

0808bd54 <_ZTVN5spark12NetworkClassE>:
	...
 808bd5c:	08087d09 08087d13 08087d1d 08087d27     .}...}...}..'}..
 808bd6c:	08087d31 08087d3d 08087d49 08087d51     1}..=}..I}..Q}..
 808bd7c:	08087d59 08087d65 08087d6d 08087d77     Y}..e}..m}..w}..
 808bd8c:	08087d81 75007525 78343025               .}..%u.u%04x.

0808bd99 <_ZSt7nothrow>:
 808bd99:	00000000                                 .......

0808bda0 <TWO52>:
 808bda0:	00000000 43300000 00000000 c3300000     ......0C......0.
 808bdb0:	73332e25 332e2520 64332573 322e2520     %.3s %.3s%3d %.2
 808bdc0:	2e253a64 253a6432 2064322e 000a6425     d:%.2d:%.2d %d..

0808bdd0 <day_name.1>:
 808bdd0:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
 808bde0:	61536972                                 riSat

0808bde5 <mon_name.0>:
 808bde5:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
 808bdf5:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
 808be05:	63654476 4e454552 616d2054 636f6c6c     vDecREENT malloc
 808be15:	63757320 64656563 2f006465 2f746e6d      succeeded./mnt/
 808be25:	6b726f77 63617073 6f772f65 70736b72     workspace/worksp
 808be35:	2f656361 2d434347 702d3031 6c657069     ace/GCC-10-pipel
 808be45:	2f656e69 6b6e656a 2d736e69 2d434347     ine/jenkins-GCC-
 808be55:	702d3031 6c657069 2d656e69 325f3834     10-pipeline-48_2
 808be65:	31303230 5f343231 36303631 36303831     0201124_16061806
 808be75:	732f3134 6e2f6372 696c7765 656e2f62     41/src/newlib/ne
 808be85:	62696c77 62696c2f 74732f63 62696c64     wlib/libc/stdlib
 808be95:	6e61722f 00632e64 746e6d2f 726f772f     /rand.c./mnt/wor
 808bea5:	6170736b 772f6563 736b726f 65636170     kspace/workspace
 808beb5:	4343472f 2d30312d 65706970 656e696c     /GCC-10-pipeline
 808bec5:	6e656a2f 736e696b 4343472d 2d30312d     /jenkins-GCC-10-
 808bed5:	65706970 656e696c 5f38342d 30323032     pipeline-48_2020
 808bee5:	34323131 3036315f 30383136 2f313436     1124_1606180641/
 808bef5:	2f637273 6c77656e 6e2f6269 696c7765     src/newlib/newli
 808bf05:	696c2f62 732f6362 6e697274 74732f67     b/libc/string/st
 808bf15:	6b6f7472                                 rtok.c.

0808bf1c <_ctype_>:
 808bf1c:	20202000 20202020 28282020 20282828     .         ((((( 
 808bf2c:	20202020 20202020 20202020 20202020                     
 808bf3c:	10108820 10101010 10101010 10101010      ...............
 808bf4c:	04040410 04040404 10040404 10101010     ................
 808bf5c:	41411010 41414141 01010101 01010101     ..AAAAAA........
 808bf6c:	01010101 01010101 01010101 10101010     ................
 808bf7c:	42421010 42424242 02020202 02020202     ..BBBBBB........
 808bf8c:	02020202 02020202 02020202 10101010     ................
 808bf9c:	00000020 00000000 00000000 00000000      ...............
	...

0808c01d <link_const_variable_data_end>:
 808c01d:	00          	.byte	0x00
	...

0808c020 <link_constructors_location>:
 808c020:	08081a31 	.word	0x08081a31
 808c024:	08081d5d 	.word	0x08081d5d
 808c028:	0808218d 	.word	0x0808218d
 808c02c:	08082439 	.word	0x08082439
 808c030:	080829cd 	.word	0x080829cd
 808c034:	08082c01 	.word	0x08082c01
 808c038:	08083039 	.word	0x08083039
 808c03c:	08083f69 	.word	0x08083f69
 808c040:	08085551 	.word	0x08085551
 808c044:	080867ad 	.word	0x080867ad
 808c048:	08086d21 	.word	0x08086d21
 808c04c:	08086d49 	.word	0x08086d49
 808c050:	08087a31 	.word	0x08087a31
 808c054:	08087dc9 	.word	0x08087dc9
 808c058:	08088391 	.word	0x08088391

0808c05c <link_constructors_end>:
 808c05c:	00000000 	.word	0x00000000
