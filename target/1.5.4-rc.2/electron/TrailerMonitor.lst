
c:/Users/Mitch/Documents/Particle/projects/TrailerMonitor/target/1.5.4-rc.2/electron/TrailerMonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000b9e0  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       0000021c  40024000  0808ba00  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000180  20000000  0808bc1c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000060c  20000180  20000180  00040180  2**2
                  ALLOC
  6 .module_info_suffix 00000028  0808bd9c  0808bd9c  0003bd9c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  0808bdc4  0808bdc4  0003bdc4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0015a34e  00000000  00000000  0003bdc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001c274  00000000  00000000  00196116  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00020f4a  00000000  00000000  001b238a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002de0  00000000  00000000  001d32d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004c38  00000000  00000000  001d60b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00035a71  00000000  00000000  001dacec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00041f1f  00000000  00000000  0021075d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000bef0c  00000000  00000000  0025267c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000e9e0  00000000  00000000  00311588  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080020:	4809      	ldr	r0, [pc, #36]	; (8080048 <module_user_pre_init+0x28>)
 8080022:	490a      	ldr	r1, [pc, #40]	; (808004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080026:	4288      	cmp	r0, r1
 8080028:	d005      	beq.n	8080036 <module_user_pre_init+0x16>
 808002a:	4a09      	ldr	r2, [pc, #36]	; (8080050 <module_user_pre_init+0x30>)
 808002c:	4282      	cmp	r2, r0
 808002e:	d002      	beq.n	8080036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 8080030:	1a12      	subs	r2, r2, r0
 8080032:	f009 f8d9 	bl	80891e8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080036:	4807      	ldr	r0, [pc, #28]	; (8080054 <module_user_pre_init+0x34>)
 8080038:	4a07      	ldr	r2, [pc, #28]	; (8080058 <module_user_pre_init+0x38>)
 808003a:	2100      	movs	r1, #0
 808003c:	1a12      	subs	r2, r2, r0
 808003e:	f009 f8f9 	bl	8089234 <memset>
    return &link_heap_start;
}
 8080042:	4806      	ldr	r0, [pc, #24]	; (808005c <module_user_pre_init+0x3c>)
 8080044:	bd08      	pop	{r3, pc}
 8080046:	bf00      	nop
 8080048:	20000000 	.word	0x20000000
 808004c:	0808bc1c 	.word	0x0808bc1c
 8080050:	20000180 	.word	0x20000180
 8080054:	20000180 	.word	0x20000180
 8080058:	2000078c 	.word	0x2000078c
 808005c:	2000078c 	.word	0x2000078c

08080060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 8080060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 8080062:	f006 fa8f 	bl	8086584 <module_user_init_hook>
 8080066:	4b07      	ldr	r3, [pc, #28]	; (8080084 <module_user_init+0x24>)
 8080068:	4c07      	ldr	r4, [pc, #28]	; (8080088 <module_user_init+0x28>)
 808006a:	461e      	mov	r6, r3
 808006c:	1ae4      	subs	r4, r4, r3
 808006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080070:	2500      	movs	r5, #0
 8080072:	42a5      	cmp	r5, r4
 8080074:	d004      	beq.n	8080080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 808007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808007c:	3501      	adds	r5, #1
 808007e:	e7f8      	b.n	8080072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080080:	bd70      	pop	{r4, r5, r6, pc}
 8080082:	bf00      	nop
 8080084:	0808b9a0 	.word	0x0808b9a0
 8080088:	0808ba00 	.word	0x0808ba00

0808008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 808008c:	f000 beea 	b.w	8080e64 <setup>

08080090 <module_user_loop>:
}

void module_user_loop() {
 8080090:	b508      	push	{r3, lr}
    loop();
 8080092:	f000 fcd3 	bl	8080a3c <loop>
    _post_loop();
}
 8080096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 808009a:	f006 ba35 	b.w	8086508 <_post_loop>

0808009e <_Znwj>:
 808009e:	f004 bb47 	b.w	8084730 <malloc>

080800a2 <_ZdlPv>:
 80800a2:	f004 bb4d 	b.w	8084740 <free>
	...

080800a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
 80800a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80800aa:	4a03      	ldr	r2, [pc, #12]	; (80800b8 <__cxa_pure_virtual+0x10>)
 80800ac:	2100      	movs	r1, #0
 80800ae:	200c      	movs	r0, #12
 80800b0:	f004 fa10 	bl	80844d4 <panic_>
 80800b4:	e7fe      	b.n	80800b4 <__cxa_pure_virtual+0xc>
 80800b6:	bf00      	nop
 80800b8:	08084155 	.word	0x08084155

080800bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800bc:	7800      	ldrb	r0, [r0, #0]
 80800be:	fab0 f080 	clz	r0, r0
 80800c2:	0940      	lsrs	r0, r0, #5
 80800c4:	4770      	bx	lr

080800c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800c6:	2301      	movs	r3, #1
 80800c8:	7003      	strb	r3, [r0, #0]
 80800ca:	4770      	bx	lr

080800cc <_ZN5spark10LogHandler5writeEPKcj>:
    if (level >= filter_.level(category)) {
        write(data, size);
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
 80800cc:	4770      	bx	lr

080800ce <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
 80800ce:	6a00      	ldr	r0, [r0, #32]
 80800d0:	6803      	ldr	r3, [r0, #0]
 80800d2:	68db      	ldr	r3, [r3, #12]
 80800d4:	4718      	bx	r3

080800d6 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
 80800d6:	6803      	ldr	r3, [r0, #0]
 80800d8:	4718      	bx	r3

080800da <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80800da:	2a01      	cmp	r2, #1
 80800dc:	d002      	beq.n	80800e4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
 80800de:	2a02      	cmp	r2, #2
 80800e0:	d002      	beq.n	80800e8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
 80800e2:	e004      	b.n	80800ee <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80800e4:	6001      	str	r1, [r0, #0]
	      break;
 80800e6:	e002      	b.n	80800ee <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80800e8:	680b      	ldr	r3, [r1, #0]
 80800ea:	b100      	cbz	r0, 80800ee <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
 80800ec:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80800ee:	2000      	movs	r0, #0
 80800f0:	4770      	bx	lr

080800f2 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80800f2:	2a01      	cmp	r2, #1
 80800f4:	d002      	beq.n	80800fc <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xa>
 80800f6:	2a02      	cmp	r2, #2
 80800f8:	d002      	beq.n	8080100 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>
 80800fa:	e004      	b.n	8080106 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80800fc:	6001      	str	r1, [r0, #0]
	      break;
 80800fe:	e002      	b.n	8080106 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8080100:	680b      	ldr	r3, [r1, #0]
 8080102:	b100      	cbz	r0, 8080106 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
 8080104:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8080106:	2000      	movs	r0, #0
 8080108:	4770      	bx	lr
	...

0808010c <_Z7callGPSv>:
int transmittingData = ( TRANSMITTINGGPSDATA | TRANSMITTINGACCDATA | TRANSMITTINGPWRDATA | TRANSMITTINGDHTDATA );
// Run the GPS off a timer interrupt.
// read all bytes available, if an entire message was received,
// parse it store the data for access by the get routines.
void callGPS() {
     t.updateGPS();
 808010c:	4801      	ldr	r0, [pc, #4]	; (8080114 <_Z7callGPSv+0x8>)
 808010e:	f002 bd09 	b.w	8082b24 <_ZN13AssetTracker29updateGPSEv>
 8080112:	bf00      	nop
 8080114:	2000025d 	.word	0x2000025d

08080118 <_ZNSt17_Function_handlerIFi6StringEPFbS0_EE9_M_invokeERKSt9_Any_dataOS0_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

    public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8080118:	b51f      	push	{r0, r1, r2, r3, r4, lr}
      {
	return (*_Base::_M_get_pointer(__functor))(
 808011a:	6804      	ldr	r4, [r0, #0]
 808011c:	4668      	mov	r0, sp
 808011e:	f004 fd25 	bl	8084b6c <_ZN6StringC1EOS_>
 8080122:	4668      	mov	r0, sp
 8080124:	47a0      	blx	r4
 8080126:	4604      	mov	r4, r0
 8080128:	4668      	mov	r0, sp
 808012a:	f004 fd2f 	bl	8084b8c <_ZN6StringD1Ev>
	    std::forward<_ArgTypes>(__args)...);
      }
 808012e:	4620      	mov	r0, r4
 8080130:	b004      	add	sp, #16
 8080132:	bd10      	pop	{r4, pc}

08080134 <_Z14button_clickedyi>:




void button_clicked(system_event_t event, int param)
{
 8080134:	b538      	push	{r3, r4, r5, lr}
    int times = system_button_clicks(param);
		if ((transmittingData & SERIALBTNDATA) == SERIALBTNDATA)
 8080136:	490c      	ldr	r1, [pc, #48]	; (8080168 <_Z14button_clickedyi+0x34>)




void button_clicked(system_event_t event, int param)
{
 8080138:	4615      	mov	r5, r2
    int times = system_button_clicks(param);
		if ((transmittingData & SERIALBTNDATA) == SERIALBTNDATA)
 808013a:	680b      	ldr	r3, [r1, #0]
 808013c:	460c      	mov	r4, r1
 808013e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8080142:	d007      	beq.n	8080154 <_Z14button_clickedyi+0x20>
    	Serial.printlnf("button was clicked %d times", times);
 8080144:	f006 fe12 	bl	8086d6c <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
 8080148:	f005 030f 	and.w	r3, r5, #15
 808014c:	4a07      	ldr	r2, [pc, #28]	; (808016c <_Z14button_clickedyi+0x38>)
 808014e:	2101      	movs	r1, #1
 8080150:	f004 ffd6 	bl	8085100 <_ZN5Print11printf_implEbPKcz>
		if ((transmittingData & SERIALLOOPDATA) == 0)
 8080154:	6823      	ldr	r3, [r4, #0]
 8080156:	4a04      	ldr	r2, [pc, #16]	; (8080168 <_Z14button_clickedyi+0x34>)
 8080158:	0119      	lsls	r1, r3, #4
		 	transmittingData |= ( SERIALBTNDATA | SERIALCONNDATA | SERIALLOOPDATA | SERIALSETUPDATA | SERIALGPSDATA | SERIALACCDATA | SERIALPWRDATA | SERIALDHTDATA );
 808015a:	bf54      	ite	pl
 808015c:	f043 437f 	orrpl.w	r3, r3, #4278190080	; 0xff000000
		else
		  transmittingData &= ~( SERIALBTNDATA | SERIALCONNDATA | SERIALLOOPDATA | SERIALSETUPDATA | SERIALGPSDATA | SERIALACCDATA | SERIALPWRDATA | SERIALDHTDATA );
 8080160:	f023 437f 	bicmi.w	r3, r3, #4278190080	; 0xff000000
 8080164:	6013      	str	r3, [r2, #0]
 8080166:	bd38      	pop	{r3, r4, r5, pc}
 8080168:	20000008 	.word	0x20000008
 808016c:	0808a764 	.word	0x0808a764

08080170 <_Z16accelThresholder6String>:
}

// Remotely change the trigger threshold!
int accelThresholder(String command) {
 8080170:	b508      	push	{r3, lr}
    accelThreshold = atoi(command);
 8080172:	6800      	ldr	r0, [r0, #0]
 8080174:	f008 ff2a 	bl	8088fcc <atoi>
 8080178:	4b01      	ldr	r3, [pc, #4]	; (8080180 <_Z16accelThresholder6String+0x10>)
 808017a:	6018      	str	r0, [r3, #0]
    return accelThreshold;
}
 808017c:	bd08      	pop	{r3, pc}
 808017e:	bf00      	nop
 8080180:	20000000 	.word	0x20000000

08080184 <_Z18setDelayGPSMinutes6String>:
// Remotely change the publishing delay for GPS!
int setDelayGPSMinutes(String command) {
 8080184:	b508      	push	{r3, lr}
    delayGPSMinutes = atoi(command);
 8080186:	6800      	ldr	r0, [r0, #0]
 8080188:	f008 ff20 	bl	8088fcc <atoi>
 808018c:	4b01      	ldr	r3, [pc, #4]	; (8080194 <_Z18setDelayGPSMinutes6String+0x10>)
 808018e:	6018      	str	r0, [r3, #0]
    return delayGPSMinutes;
}
 8080190:	bd08      	pop	{r3, pc}
 8080192:	bf00      	nop
 8080194:	2000000c 	.word	0x2000000c

08080198 <_Z18setDelayACCMinutes6String>:

// Remotely change the publishing delay for ACC!
int setDelayACCMinutes(String command) {
 8080198:	b508      	push	{r3, lr}
    delayACCMinutes = atoi(command);
 808019a:	6800      	ldr	r0, [r0, #0]
 808019c:	f008 ff16 	bl	8088fcc <atoi>
 80801a0:	4b01      	ldr	r3, [pc, #4]	; (80801a8 <_Z18setDelayACCMinutes6String+0x10>)
 80801a2:	6018      	str	r0, [r3, #0]
    return delayACCMinutes;
}
 80801a4:	bd08      	pop	{r3, pc}
 80801a6:	bf00      	nop
 80801a8:	20000004 	.word	0x20000004

080801ac <_Z18setDelayDHTMinutes6String>:

// Remotely change the publishing delay for DHT!
int setDelayDHTMinutes(String command) {
 80801ac:	b508      	push	{r3, lr}
    delayDHTMinutes = atoi(command);
 80801ae:	6800      	ldr	r0, [r0, #0]
 80801b0:	f008 ff0c 	bl	8088fcc <atoi>
 80801b4:	4b01      	ldr	r3, [pc, #4]	; (80801bc <_Z18setDelayDHTMinutes6String+0x10>)
 80801b6:	6018      	str	r0, [r3, #0]
    return delayDHTMinutes;
}
 80801b8:	bd08      	pop	{r3, pc}
 80801ba:	bf00      	nop
 80801bc:	20000014 	.word	0x20000014

080801c0 <_Z12transmitMode6String>:

// Allows you to remotely change whether a device is publishing to the cloud
// or is only reporting data over Serial. Saves data when using only Serial!
// Change the default at the top of the code.
int transmitMode(String command) {
 80801c0:	b508      	push	{r3, lr}
    transmittingData = atoi(command);
 80801c2:	6800      	ldr	r0, [r0, #0]
 80801c4:	f008 ff02 	bl	8088fcc <atoi>
 80801c8:	4b01      	ldr	r3, [pc, #4]	; (80801d0 <_Z12transmitMode6String+0x10>)
 80801ca:	6018      	str	r0, [r3, #0]
    return transmittingData;
}
 80801cc:	bd08      	pop	{r3, pc}
 80801ce:	bf00      	nop
 80801d0:	20000008 	.word	0x20000008

080801d4 <_Z8resetODO6String>:
      }
}


// Reset the trip odometer
int resetODO(String command) {
 80801d4:	b508      	push	{r3, lr}
    t.gpsResetODO();
 80801d6:	4802      	ldr	r0, [pc, #8]	; (80801e0 <_Z8resetODO6String+0xc>)
 80801d8:	f002 fcb0 	bl	8082b3c <_ZN13AssetTracker211gpsResetODOEv>
    return 1;
}
 80801dc:	2001      	movs	r0, #1
 80801de:	bd08      	pop	{r3, pc}
 80801e0:	2000025d 	.word	0x2000025d

080801e4 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
 80801e4:	6943      	ldr	r3, [r0, #20]
 80801e6:	b113      	cbz	r3, 80801ee <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80801e8:	6983      	ldr	r3, [r0, #24]
 80801ea:	300c      	adds	r0, #12
 80801ec:	4718      	bx	r3
 80801ee:	4770      	bx	lr

080801f0 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
 80801f0:	b513      	push	{r0, r1, r4, lr}
 80801f2:	4604      	mov	r4, r0
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
 80801f4:	2100      	movs	r1, #0
 80801f6:	4608      	mov	r0, r1
 80801f8:	f004 f80c 	bl	8084214 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
 80801fc:	a902      	add	r1, sp, #8
 80801fe:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
 8080200:	4620      	mov	r0, r4

    static void invoke_timer(os_timer_t timer)
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
 8080202:	f841 3d04 	str.w	r3, [r1, #-4]!
            os_timer_get_id(timer, &id);
 8080206:	f004 f81d 	bl	8084244 <os_timer_get_id>
            t = static_cast<Timer*>(id);
 808020a:	9c01      	ldr	r4, [sp, #4]
            if (t) {
 808020c:	b10c      	cbz	r4, 8080212 <_ZN5Timer12invoke_timerEPv+0x22>
                t->running = true;
 808020e:	2301      	movs	r3, #1
 8080210:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
 8080212:	2100      	movs	r1, #0
 8080214:	2001      	movs	r0, #1
 8080216:	f003 fffd 	bl	8084214 <os_thread_scheduling>
            }
        }
        if (t) {
 808021a:	b12c      	cbz	r4, 8080228 <_ZN5Timer12invoke_timerEPv+0x38>
            t->timeout();
 808021c:	6823      	ldr	r3, [r4, #0]
 808021e:	4620      	mov	r0, r4
 8080220:	689b      	ldr	r3, [r3, #8]
 8080222:	4798      	blx	r3
            t->running = false;
 8080224:	2300      	movs	r3, #0
 8080226:	7123      	strb	r3, [r4, #4]
        }
    }
 8080228:	b002      	add	sp, #8
 808022a:	bd10      	pop	{r4, pc}

0808022c <_Z13SetGPSAntenna6String>:
int transmitMode(String command) {
    transmittingData = atoi(command);
    return transmittingData;
}

bool SetGPSAntenna(String command) {
 808022c:	b510      	push	{r4, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 808022e:	490d      	ldr	r1, [pc, #52]	; (8080264 <_Z13SetGPSAntenna6String+0x38>)
 8080230:	4604      	mov	r4, r0
 8080232:	f004 fd8a 	bl	8084d4a <_ZNK6String6equalsEPKc>
  if (command == "internal") {
 8080236:	b138      	cbz	r0, 8080248 <_Z13SetGPSAntenna6String+0x1c>
    gpsAntennaExternal = false;
 8080238:	4b0b      	ldr	r3, [pc, #44]	; (8080268 <_Z13SetGPSAntenna6String+0x3c>)
 808023a:	2200      	movs	r2, #0
 808023c:	701a      	strb	r2, [r3, #0]
    return t.antennaInternal();
 808023e:	480b      	ldr	r0, [pc, #44]	; (808026c <_Z13SetGPSAntenna6String+0x40>)
    gpsAntennaExternal = true;
    return t.antennaExternal();
  } else {
    return false;
  }
}
 8080240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

bool SetGPSAntenna(String command) {
  if (command == "internal") {
    gpsAntennaExternal = false;
    return t.antennaInternal();
 8080244:	f002 bc4e 	b.w	8082ae4 <_ZN13AssetTracker215antennaInternalEv>
 8080248:	4909      	ldr	r1, [pc, #36]	; (8080270 <_Z13SetGPSAntenna6String+0x44>)
 808024a:	4620      	mov	r0, r4
 808024c:	f004 fd7d 	bl	8084d4a <_ZNK6String6equalsEPKc>
  } else if (command == "external") {
 8080250:	b138      	cbz	r0, 8080262 <_Z13SetGPSAntenna6String+0x36>
    gpsAntennaExternal = true;
 8080252:	4b05      	ldr	r3, [pc, #20]	; (8080268 <_Z13SetGPSAntenna6String+0x3c>)
 8080254:	2201      	movs	r2, #1
 8080256:	701a      	strb	r2, [r3, #0]
    return t.antennaExternal();
 8080258:	4804      	ldr	r0, [pc, #16]	; (808026c <_Z13SetGPSAntenna6String+0x40>)
  } else {
    return false;
  }
}
 808025a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if (command == "internal") {
    gpsAntennaExternal = false;
    return t.antennaInternal();
  } else if (command == "external") {
    gpsAntennaExternal = true;
    return t.antennaExternal();
 808025e:	f002 bc51 	b.w	8082b04 <_ZN13AssetTracker215antennaExternalEv>
  } else {
    return false;
  }
}
 8080262:	bd10      	pop	{r4, pc}
 8080264:	0808a780 	.word	0x0808a780
 8080268:	20000011 	.word	0x20000011
 808026c:	2000025d 	.word	0x2000025d
 8080270:	0808a789 	.word	0x0808a789

08080274 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 8080274:	b510      	push	{r4, lr}
 8080276:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
 8080278:	6800      	ldr	r0, [r0, #0]
 808027a:	b108      	cbz	r0, 8080280 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 808027c:	f004 fa60 	bl	8084740 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 8080280:	4620      	mov	r0, r4
 8080282:	bd10      	pop	{r4, pc}

08080284 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 8080284:	b510      	push	{r4, lr}
 8080286:	4604      	mov	r4, r0
 8080288:	4b09      	ldr	r3, [pc, #36]	; (80802b0 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 808028a:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 808028c:	f005 f8b8 	bl	8085400 <_ZN5spark10LogManager8instanceEv>
 8080290:	4621      	mov	r1, r4
 8080292:	f005 fabc 	bl	808580e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 8080296:	f006 fd69 	bl	8086d6c <_Z16_fetch_usbserialv>
 808029a:	f006 fd5b 	bl	8086d54 <_ZN9USBSerial3endEv>
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
 808029e:	4620      	mov	r0, r4
 80802a0:	4b04      	ldr	r3, [pc, #16]	; (80802b4 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 80802a2:	f840 3b04 	str.w	r3, [r0], #4
 80802a6:	f005 f9b9 	bl	808561c <_ZN5spark6detail9LogFilterD1Ev>
    }
 80802aa:	4620      	mov	r0, r4
 80802ac:	bd10      	pop	{r4, pc}
 80802ae:	bf00      	nop
 80802b0:	0808a754 	.word	0x0808a754
 80802b4:	0808a73c 	.word	0x0808a73c

080802b8 <_ZN5spark16SerialLogHandlerD0Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 80802b8:	b510      	push	{r4, lr}
 80802ba:	4604      	mov	r4, r0
        LogManager::instance()->removeHandler(this);
        Serial.end();
    }
 80802bc:	f7ff ffe2 	bl	8080284 <_ZN5spark16SerialLogHandlerD1Ev>
 80802c0:	4620      	mov	r0, r4
 80802c2:	2124      	movs	r1, #36	; 0x24
 80802c4:	f007 fbb6 	bl	8087a34 <_ZdlPvj>
 80802c8:	4620      	mov	r0, r4
 80802ca:	bd10      	pop	{r4, pc}

080802cc <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80802cc:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80802ce:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80802d0:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80802d2:	b113      	cbz	r3, 80802da <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80802d4:	2203      	movs	r2, #3
 80802d6:	4601      	mov	r1, r0
 80802d8:	4798      	blx	r3
    }
 80802da:	4620      	mov	r0, r4
 80802dc:	bd10      	pop	{r4, pc}

080802de <_ZN5Timer5_stopEjb>:
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
 80802de:	b507      	push	{r0, r1, r2, lr}
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
 80802e0:	6880      	ldr	r0, [r0, #8]
 80802e2:	2300      	movs	r3, #0
 80802e4:	b138      	cbz	r0, 80802f6 <_ZN5Timer5_stopEjb+0x18>
 80802e6:	e88d 000a 	stmia.w	sp, {r1, r3}
 80802ea:	2102      	movs	r1, #2
 80802ec:	f003 ffb2 	bl	8084254 <os_timer_change>
 80802f0:	fab0 f080 	clz	r0, r0
 80802f4:	0940      	lsrs	r0, r0, #5
    }
 80802f6:	b003      	add	sp, #12
 80802f8:	f85d fb04 	ldr.w	pc, [sp], #4

080802fc <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
 80802fc:	b538      	push	{r3, r4, r5, lr}
 80802fe:	4b10      	ldr	r3, [pc, #64]	; (8080340 <_ZN5TimerD1Ev+0x44>)
 8080300:	4604      	mov	r4, r0
 8080302:	6003      	str	r3, [r0, #0]
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
 8080304:	6883      	ldr	r3, [r0, #8]
 8080306:	b1a3      	cbz	r3, 8080332 <_ZN5TimerD1Ev+0x36>
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
 8080308:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 808030c:	2200      	movs	r2, #0
 808030e:	f7ff ffe6 	bl	80802de <_ZN5Timer5_stopEjb>
    {
        if (handle) {
            stop();
            // Make sure the callback will not be called after this object is destroyed.
            // TODO: Consider assigning a higher priority to the timer thread
            os_timer_set_id(handle, nullptr);
 8080312:	2100      	movs	r1, #0
 8080314:	68a0      	ldr	r0, [r4, #8]
 8080316:	f003 ffcd 	bl	80842b4 <os_timer_set_id>
            while (running) {
 808031a:	7923      	ldrb	r3, [r4, #4]
 808031c:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8080320:	b113      	cbz	r3, 8080328 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
 8080322:	f003 ff5f 	bl	80841e4 <os_thread_yield>
 8080326:	e7f8      	b.n	808031a <_ZN5TimerD1Ev+0x1e>
            }
            os_timer_destroy(handle, nullptr);
 8080328:	4629      	mov	r1, r5
 808032a:	68a0      	ldr	r0, [r4, #8]
 808032c:	f003 ff82 	bl	8084234 <os_timer_destroy>
            handle = nullptr;
 8080330:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8080332:	f104 000c 	add.w	r0, r4, #12
 8080336:	f7ff ffc9 	bl	80802cc <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
 808033a:	4620      	mov	r0, r4
 808033c:	bd38      	pop	{r3, r4, r5, pc}
 808033e:	bf00      	nop
 8080340:	0808a728 	.word	0x0808a728

08080344 <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
 8080344:	b510      	push	{r4, lr}
 8080346:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
 8080348:	f7ff ffd8 	bl	80802fc <_ZN5TimerD1Ev>
 808034c:	4620      	mov	r0, r4
 808034e:	211c      	movs	r1, #28
 8080350:	f007 fb70 	bl	8087a34 <_ZdlPvj>
 8080354:	4620      	mov	r0, r4
 8080356:	bd10      	pop	{r4, pc}

08080358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8080358:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 808035a:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 808035c:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 808035e:	b17c      	cbz	r4, 8080380 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 8080360:	6863      	ldr	r3, [r4, #4]
 8080362:	3b01      	subs	r3, #1
 8080364:	6063      	str	r3, [r4, #4]
 8080366:	b95b      	cbnz	r3, 8080380 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 8080368:	6823      	ldr	r3, [r4, #0]
 808036a:	4620      	mov	r0, r4
 808036c:	689b      	ldr	r3, [r3, #8]
 808036e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8080370:	68a3      	ldr	r3, [r4, #8]
 8080372:	3b01      	subs	r3, #1
 8080374:	60a3      	str	r3, [r4, #8]
 8080376:	b91b      	cbnz	r3, 8080380 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 8080378:	6823      	ldr	r3, [r4, #0]
 808037a:	4620      	mov	r0, r4
 808037c:	68db      	ldr	r3, [r3, #12]
 808037e:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 8080380:	4628      	mov	r0, r5
 8080382:	bd38      	pop	{r3, r4, r5, pc}

08080384 <_Z10gpsPublish6String>:
	  Particle.publish("LJCMDERR", String::format("{\"cmd\":\"%s\"}", command), 60, PRIVATE);
    return 0;
}
// Actively ask for a GPS reading if you're impatient. Only publishes if there's
// a GPS fix, otherwise returns '0'
int gpsPublish(String command) {
 8080384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (t.gpsFix()) {
 8080388:	482d      	ldr	r0, [pc, #180]	; (8080440 <_Z10gpsPublish6String+0xbc>)
	  Particle.publish("LJCMDERR", String::format("{\"cmd\":\"%s\"}", command), 60, PRIVATE);
    return 0;
}
// Actively ask for a GPS reading if you're impatient. Only publishes if there's
// a GPS fix, otherwise returns '0'
int gpsPublish(String command) {
 808038a:	b092      	sub	sp, #72	; 0x48
    if (t.gpsFix()) {
 808038c:	f002 fba4 	bl	8082ad8 <_ZN13AssetTracker26gpsFixEv>
 8080390:	2800      	cmp	r0, #0
 8080392:	d050      	beq.n	8080436 <_Z10gpsPublish6String+0xb2>
			  time_t time = Time.now();
 8080394:	f005 ffaf 	bl	80862f6 <_ZN9TimeClass3nowEv>
 8080398:	4605      	mov	r5, r0
				// Short publish names save data!
			  Particle.publish("LJGPSFIX", String::format("{\"la\":%f,\"lo\":%f,\"ht\":%f,\"ac\":%f,\"tm\":\"%s\"}",t.readLatDeg(),t.readLonDeg(),(t.getAltitude() / 1000),(t.getGpsAccuracy() / 1000),Time.format(time, TIME_FORMAT_ISO8601_FULL).c_str()), 60, PRIVATE);
 808039a:	4829      	ldr	r0, [pc, #164]	; (8080440 <_Z10gpsPublish6String+0xbc>)
 808039c:	f002 fab8 	bl	8082910 <_ZN13AssetTracker210readLatDegEv>
 80803a0:	4604      	mov	r4, r0
 80803a2:	4827      	ldr	r0, [pc, #156]	; (8080440 <_Z10gpsPublish6String+0xbc>)
 80803a4:	f002 faba 	bl	808291c <_ZN13AssetTracker210readLonDegEv>
 80803a8:	4606      	mov	r6, r0
 80803aa:	4825      	ldr	r0, [pc, #148]	; (8080440 <_Z10gpsPublish6String+0xbc>)
 80803ac:	f002 fb36 	bl	8082a1c <_ZN13AssetTracker211getAltitudeEv>
 80803b0:	4607      	mov	r7, r0
 80803b2:	4823      	ldr	r0, [pc, #140]	; (8080440 <_Z10gpsPublish6String+0xbc>)
 80803b4:	f002 fab8 	bl	8082928 <_ZN13AssetTracker214getGpsAccuracyEv>
 80803b8:	4b22      	ldr	r3, [pc, #136]	; (8080444 <_Z10gpsPublish6String+0xc0>)
 80803ba:	462a      	mov	r2, r5
 80803bc:	681b      	ldr	r3, [r3, #0]
 80803be:	4680      	mov	r8, r0
 80803c0:	4921      	ldr	r1, [pc, #132]	; (8080448 <_Z10gpsPublish6String+0xc4>)
 80803c2:	a80e      	add	r0, sp, #56	; 0x38
 80803c4:	f005 ff44 	bl	8086250 <_ZN9TimeClass6formatElPKc>
 80803c8:	4620      	mov	r0, r4
 80803ca:	f007 ff17 	bl	80881fc <__aeabi_f2d>
 80803ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80803d0:	4604      	mov	r4, r0
 80803d2:	460d      	mov	r5, r1
 80803d4:	4640      	mov	r0, r8
 80803d6:	491d      	ldr	r1, [pc, #116]	; (808044c <_Z10gpsPublish6String+0xc8>)
 80803d8:	9306      	str	r3, [sp, #24]
 80803da:	f008 fc6d 	bl	8088cb8 <__aeabi_fdiv>
 80803de:	f007 ff0d 	bl	80881fc <__aeabi_f2d>
 80803e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80803e6:	4919      	ldr	r1, [pc, #100]	; (808044c <_Z10gpsPublish6String+0xc8>)
 80803e8:	4638      	mov	r0, r7
 80803ea:	f008 fc65 	bl	8088cb8 <__aeabi_fdiv>
 80803ee:	f007 ff05 	bl	80881fc <__aeabi_f2d>
 80803f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80803f6:	4630      	mov	r0, r6
 80803f8:	f007 ff00 	bl	80881fc <__aeabi_f2d>
 80803fc:	4622      	mov	r2, r4
 80803fe:	e9cd 0100 	strd	r0, r1, [sp]
 8080402:	462b      	mov	r3, r5
 8080404:	4912      	ldr	r1, [pc, #72]	; (8080450 <_Z10gpsPublish6String+0xcc>)
 8080406:	a80a      	add	r0, sp, #40	; 0x28
 8080408:	f004 fd1a 	bl	8084e40 <_ZN6String6formatEPKcz>
 808040c:	4b11      	ldr	r3, [pc, #68]	; (8080454 <_Z10gpsPublish6String+0xd0>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 808040e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8080410:	781b      	ldrb	r3, [r3, #0]
 8080412:	4911      	ldr	r1, [pc, #68]	; (8080458 <_Z10gpsPublish6String+0xd4>)
 8080414:	f88d 3000 	strb.w	r3, [sp]
 8080418:	a808      	add	r0, sp, #32
 808041a:	233c      	movs	r3, #60	; 0x3c
 808041c:	f006 fa6e 	bl	80868fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8080420:	a809      	add	r0, sp, #36	; 0x24
 8080422:	f7ff ff99 	bl	8080358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080426:	a80a      	add	r0, sp, #40	; 0x28
 8080428:	f004 fbb0 	bl	8084b8c <_ZN6StringD1Ev>
 808042c:	a80e      	add	r0, sp, #56	; 0x38
 808042e:	f004 fbad 	bl	8084b8c <_ZN6StringD1Ev>
 8080432:	2001      	movs	r0, #1
 8080434:	e000      	b.n	8080438 <_Z10gpsPublish6String+0xb4>
        return 1;
    } else {
        return 2;
 8080436:	2002      	movs	r0, #2
    }
}
 8080438:	b012      	add	sp, #72	; 0x48
 808043a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808043e:	bf00      	nop
 8080440:	2000025d 	.word	0x2000025d
 8080444:	200000c0 	.word	0x200000c0
 8080448:	20000424 	.word	0x20000424
 808044c:	447a0000 	.word	0x447a0000
 8080450:	0808a792 	.word	0x0808a792
 8080454:	2000025c 	.word	0x2000025c
 8080458:	0808a7be 	.word	0x0808a7be

0808045c <_Z10pwrPublish6String>:

// Lets you remotely check the battery status by calling the function "batt"
// Triggers a publish with the info (so subscribe or watch the dashboard)
// and also returns a '1' if there's >10% battery left and a '0' if below
int pwrPublish(String command){
 808045c:	b530      	push	{r4, r5, lr}
    // Publish the battery voltage and percentage of battery remaining
    // if you want to be really efficient, just report one of these
    // the String::format("%f.2") part gives us a string to publish,
    // but with only 2 decimal points to save space
    Particle.publish("LJPWRSTAT", String::format("{\"s\": %d,\"n\": 0,\"v\":%.2f,\"c\":%.2f}",pc.getHasPower(),fuel.getVCell(),fuel.getSoC()), 60, PRIVATE );
 808045e:	481b      	ldr	r0, [pc, #108]	; (80804cc <_Z10pwrPublish6String+0x70>)
}

// Lets you remotely check the battery status by calling the function "batt"
// Triggers a publish with the info (so subscribe or watch the dashboard)
// and also returns a '1' if there's >10% battery left and a '0' if below
int pwrPublish(String command){
 8080460:	b08b      	sub	sp, #44	; 0x2c
    // Publish the battery voltage and percentage of battery remaining
    // if you want to be really efficient, just report one of these
    // the String::format("%f.2") part gives us a string to publish,
    // but with only 2 decimal points to save space
    Particle.publish("LJPWRSTAT", String::format("{\"s\": %d,\"n\": 0,\"v\":%.2f,\"c\":%.2f}",pc.getHasPower(),fuel.getVCell(),fuel.getSoC()), 60, PRIVATE );
 8080462:	f002 fa2b 	bl	80828bc <_ZN10PowerCheck11getHasPowerEv>
 8080466:	4604      	mov	r4, r0
 8080468:	4819      	ldr	r0, [pc, #100]	; (80804d0 <_Z10pwrPublish6String+0x74>)
 808046a:	f005 ffd5 	bl	8086418 <_ZN9FuelGauge8getVCellEv>
 808046e:	4605      	mov	r5, r0
 8080470:	4817      	ldr	r0, [pc, #92]	; (80804d0 <_Z10pwrPublish6String+0x74>)
 8080472:	f005 ffe7 	bl	8086444 <_ZN9FuelGauge6getSoCEv>
 8080476:	f007 fec1 	bl	80881fc <__aeabi_f2d>
 808047a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 808047e:	4628      	mov	r0, r5
 8080480:	f007 febc 	bl	80881fc <__aeabi_f2d>
 8080484:	4622      	mov	r2, r4
 8080486:	e9cd 0100 	strd	r0, r1, [sp]
 808048a:	a806      	add	r0, sp, #24
 808048c:	4911      	ldr	r1, [pc, #68]	; (80804d4 <_Z10pwrPublish6String+0x78>)
 808048e:	f004 fcd7 	bl	8084e40 <_ZN6String6formatEPKcz>
 8080492:	4b11      	ldr	r3, [pc, #68]	; (80804d8 <_Z10pwrPublish6String+0x7c>)
 8080494:	9a06      	ldr	r2, [sp, #24]
 8080496:	781b      	ldrb	r3, [r3, #0]
 8080498:	4910      	ldr	r1, [pc, #64]	; (80804dc <_Z10pwrPublish6String+0x80>)
 808049a:	f88d 3000 	strb.w	r3, [sp]
 808049e:	a804      	add	r0, sp, #16
 80804a0:	233c      	movs	r3, #60	; 0x3c
 80804a2:	f006 fa2b 	bl	80868fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80804a6:	a805      	add	r0, sp, #20
 80804a8:	f7ff ff56 	bl	8080358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80804ac:	a806      	add	r0, sp, #24
 80804ae:	f004 fb6d 	bl	8084b8c <_ZN6StringD1Ev>
    // if there's more than 10% of the battery left, then return 1
    if (fuel.getSoC()>10){ return 1;}
 80804b2:	4807      	ldr	r0, [pc, #28]	; (80804d0 <_Z10pwrPublish6String+0x74>)
 80804b4:	f005 ffc6 	bl	8086444 <_ZN9FuelGauge6getSoCEv>
 80804b8:	4909      	ldr	r1, [pc, #36]	; (80804e0 <_Z10pwrPublish6String+0x84>)
 80804ba:	f008 fd05 	bl	8088ec8 <__aeabi_fcmpgt>
 80804be:	2800      	cmp	r0, #0
    // if you're running out of battery, return 2
    else { return 2;}
}
 80804c0:	bf14      	ite	ne
 80804c2:	2001      	movne	r0, #1
 80804c4:	2002      	moveq	r0, #2
 80804c6:	b00b      	add	sp, #44	; 0x2c
 80804c8:	bd30      	pop	{r4, r5, pc}
 80804ca:	bf00      	nop
 80804cc:	20000230 	.word	0x20000230
 80804d0:	20000190 	.word	0x20000190
 80804d4:	0808a7c7 	.word	0x0808a7c7
 80804d8:	2000025c 	.word	0x2000025c
 80804dc:	0808a7ea 	.word	0x0808a7ea
 80804e0:	41200000 	.word	0x41200000

080804e4 <_Z10accPublish6String>:

// Lets you remotely check the accelleration status by calling the function "readXYZmagnitude"
// Triggers a publish with the info (so subscribe or watch the dashboard)
int accPublish(String command){
 80804e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  Particle.publish("LJACELRT", String::format("{\"x\":%d,\"y\":%d,\"z\":%d,\"m\":%d}", t.readX(), t.readY(), t.readZ(), t.readXYZmagnitude()), 60, PRIVATE);
 80804e6:	4c16      	ldr	r4, [pc, #88]	; (8080540 <_Z10accPublish6String+0x5c>)
    else { return 2;}
}

// Lets you remotely check the accelleration status by calling the function "readXYZmagnitude"
// Triggers a publish with the info (so subscribe or watch the dashboard)
int accPublish(String command){
 80804e8:	b089      	sub	sp, #36	; 0x24
  Particle.publish("LJACELRT", String::format("{\"x\":%d,\"y\":%d,\"z\":%d,\"m\":%d}", t.readX(), t.readY(), t.readZ(), t.readXYZmagnitude()), 60, PRIVATE);
 80804ea:	4620      	mov	r0, r4
 80804ec:	f002 fb2c 	bl	8082b48 <_ZN13AssetTracker25readXEv>
 80804f0:	4605      	mov	r5, r0
 80804f2:	4620      	mov	r0, r4
 80804f4:	f002 fb32 	bl	8082b5c <_ZN13AssetTracker25readYEv>
 80804f8:	4606      	mov	r6, r0
 80804fa:	4620      	mov	r0, r4
 80804fc:	f002 fb38 	bl	8082b70 <_ZN13AssetTracker25readZEv>
 8080500:	4607      	mov	r7, r0
 8080502:	4620      	mov	r0, r4
 8080504:	f002 fb3e 	bl	8082b84 <_ZN13AssetTracker216readXYZmagnitudeEv>
 8080508:	4633      	mov	r3, r6
 808050a:	9001      	str	r0, [sp, #4]
 808050c:	462a      	mov	r2, r5
 808050e:	a804      	add	r0, sp, #16
 8080510:	9700      	str	r7, [sp, #0]
 8080512:	490c      	ldr	r1, [pc, #48]	; (8080544 <_Z10accPublish6String+0x60>)
 8080514:	f004 fc94 	bl	8084e40 <_ZN6String6formatEPKcz>
 8080518:	4b0b      	ldr	r3, [pc, #44]	; (8080548 <_Z10accPublish6String+0x64>)
 808051a:	9a04      	ldr	r2, [sp, #16]
 808051c:	781b      	ldrb	r3, [r3, #0]
 808051e:	490b      	ldr	r1, [pc, #44]	; (808054c <_Z10accPublish6String+0x68>)
 8080520:	f88d 3000 	strb.w	r3, [sp]
 8080524:	a802      	add	r0, sp, #8
 8080526:	233c      	movs	r3, #60	; 0x3c
 8080528:	f006 f9e8 	bl	80868fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 808052c:	a803      	add	r0, sp, #12
 808052e:	f7ff ff13 	bl	8080358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080532:	a804      	add	r0, sp, #16
 8080534:	f004 fb2a 	bl	8084b8c <_ZN6StringD1Ev>
  return 1;
}
 8080538:	2001      	movs	r0, #1
 808053a:	b009      	add	sp, #36	; 0x24
 808053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808053e:	bf00      	nop
 8080540:	2000025d 	.word	0x2000025d
 8080544:	0808a7f4 	.word	0x0808a7f4
 8080548:	2000025c 	.word	0x2000025c
 808054c:	0808a812 	.word	0x0808a812

08080550 <_Z10envPublish6String>:

// Lets you remotely check the accelleration status by calling the functions "getHumidity" and "getTempFarenheit"
// Triggers a publish with the info (so subscribe or watch the dashboard)
int envPublish(String command){
 8080550:	b5f0      	push	{r4, r5, r6, r7, lr}
		delay(2000); // DHT 22 minumum sampling period
 8080552:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  return 1;
}

// Lets you remotely check the accelleration status by calling the functions "getHumidity" and "getTempFarenheit"
// Triggers a publish with the info (so subscribe or watch the dashboard)
int envPublish(String command){
 8080556:	b089      	sub	sp, #36	; 0x24
		delay(2000); // DHT 22 minumum sampling period
 8080558:	f005 fede 	bl	8086318 <delay>
  // Reading temperature or humidity takes about 250 milliseconds!
  // Sensor readings may also be up to 2 seconds 'old' (its a
  // very slow sensor)
  	float h = dht.getHumidity();
 808055c:	4820      	ldr	r0, [pc, #128]	; (80805e0 <_Z10envPublish6String+0x90>)
 808055e:	f002 fc4b 	bl	8082df8 <_ZN3DHT11getHumidityEv>
 8080562:	4604      	mov	r4, r0
  // Read temperature as Farenheit
  	float f = dht.getTempFarenheit();
 8080564:	481e      	ldr	r0, [pc, #120]	; (80805e0 <_Z10envPublish6String+0x90>)
 8080566:	f002 fc0d 	bl	8082d84 <_ZN3DHT16getTempFarenheitEv>

  // Check if any reads failed and exit early (to try again).
  	if (isnan(h) || isnan(f)) {
 808056a:	4621      	mov	r1, r4
  // Reading temperature or humidity takes about 250 milliseconds!
  // Sensor readings may also be up to 2 seconds 'old' (its a
  // very slow sensor)
  	float h = dht.getHumidity();
  // Read temperature as Farenheit
  	float f = dht.getTempFarenheit();
 808056c:	4605      	mov	r5, r0

  // Check if any reads failed and exit early (to try again).
  	if (isnan(h) || isnan(f)) {
 808056e:	4620      	mov	r0, r4
 8080570:	f008 fcb4 	bl	8088edc <__aeabi_fcmpun>
 8080574:	b920      	cbnz	r0, 8080580 <_Z10envPublish6String+0x30>
 8080576:	4629      	mov	r1, r5
 8080578:	4628      	mov	r0, r5
 808057a:	f008 fcaf 	bl	8088edc <__aeabi_fcmpun>
 808057e:	b148      	cbz	r0, 8080594 <_Z10envPublish6String+0x44>
			if ((transmittingData & SERIALDHTDATA) == SERIALDHTDATA)
 8080580:	4b18      	ldr	r3, [pc, #96]	; (80805e4 <_Z10envPublish6String+0x94>)
 8080582:	681b      	ldr	r3, [r3, #0]
 8080584:	2b00      	cmp	r3, #0
 8080586:	da27      	bge.n	80805d8 <_Z10envPublish6String+0x88>
      	Serial.println("Failed to read from DHT sensor!");
 8080588:	f006 fbf0 	bl	8086d6c <_Z16_fetch_usbserialv>
 808058c:	4916      	ldr	r1, [pc, #88]	; (80805e8 <_Z10envPublish6String+0x98>)
 808058e:	f004 fcb8 	bl	8084f02 <_ZN5Print7printlnEPKc>
 8080592:	e021      	b.n	80805d8 <_Z10envPublish6String+0x88>
  		return 2;
  	}

    Particle.publish("LJENVMT", String::format("{\"t\":%.2f,\"h\":%.2f}",f,h), 60, PRIVATE);
 8080594:	4628      	mov	r0, r5
 8080596:	f007 fe31 	bl	80881fc <__aeabi_f2d>
 808059a:	4606      	mov	r6, r0
 808059c:	4620      	mov	r0, r4
 808059e:	460f      	mov	r7, r1
 80805a0:	f007 fe2c 	bl	80881fc <__aeabi_f2d>
 80805a4:	4632      	mov	r2, r6
 80805a6:	e9cd 0100 	strd	r0, r1, [sp]
 80805aa:	463b      	mov	r3, r7
 80805ac:	490f      	ldr	r1, [pc, #60]	; (80805ec <_Z10envPublish6String+0x9c>)
 80805ae:	a804      	add	r0, sp, #16
 80805b0:	f004 fc46 	bl	8084e40 <_ZN6String6formatEPKcz>
 80805b4:	4b0e      	ldr	r3, [pc, #56]	; (80805f0 <_Z10envPublish6String+0xa0>)
 80805b6:	9a04      	ldr	r2, [sp, #16]
 80805b8:	781b      	ldrb	r3, [r3, #0]
 80805ba:	490e      	ldr	r1, [pc, #56]	; (80805f4 <_Z10envPublish6String+0xa4>)
 80805bc:	f88d 3000 	strb.w	r3, [sp]
 80805c0:	a802      	add	r0, sp, #8
 80805c2:	233c      	movs	r3, #60	; 0x3c
 80805c4:	f006 f99a 	bl	80868fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80805c8:	a803      	add	r0, sp, #12
 80805ca:	f7ff fec5 	bl	8080358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80805ce:	a804      	add	r0, sp, #16
 80805d0:	f004 fadc 	bl	8084b8c <_ZN6StringD1Ev>
    return 1;
 80805d4:	2001      	movs	r0, #1
 80805d6:	e000      	b.n	80805da <_Z10envPublish6String+0x8a>

  // Check if any reads failed and exit early (to try again).
  	if (isnan(h) || isnan(f)) {
			if ((transmittingData & SERIALDHTDATA) == SERIALDHTDATA)
      	Serial.println("Failed to read from DHT sensor!");
  		return 2;
 80805d8:	2002      	movs	r0, #2
  	}

    Particle.publish("LJENVMT", String::format("{\"t\":%.2f,\"h\":%.2f}",f,h), 60, PRIVATE);
    return 1;
}
 80805da:	b009      	add	sp, #36	; 0x24
 80805dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80805de:	bf00      	nop
 80805e0:	20000284 	.word	0x20000284
 80805e4:	20000008 	.word	0x20000008
 80805e8:	0808a81b 	.word	0x0808a81b
 80805ec:	0808a83b 	.word	0x0808a83b
 80805f0:	2000025c 	.word	0x2000025c
 80805f4:	0808a84f 	.word	0x0808a84f

080805f8 <_Z8pubValue6String>:
    return false;
  }
}


int pubValue(String command) {
 80805f8:	b530      	push	{r4, r5, lr}
 80805fa:	4927      	ldr	r1, [pc, #156]	; (8080698 <_Z8pubValue6String+0xa0>)
 80805fc:	b089      	sub	sp, #36	; 0x24
 80805fe:	4605      	mov	r5, r0
 8080600:	f004 fba3 	bl	8084d4a <_ZNK6String6equalsEPKc>
  if (command == "pwr") {
 8080604:	b138      	cbz	r0, 8080616 <_Z8pubValue6String+0x1e>
    return pwrPublish(command);
 8080606:	4629      	mov	r1, r5
 8080608:	a804      	add	r0, sp, #16
 808060a:	f004 fb45 	bl	8084c98 <_ZN6StringC1ERKS_>
 808060e:	a804      	add	r0, sp, #16
 8080610:	f7ff ff24 	bl	808045c <_Z10pwrPublish6String>
 8080614:	e026      	b.n	8080664 <_Z8pubValue6String+0x6c>
 8080616:	4921      	ldr	r1, [pc, #132]	; (808069c <_Z8pubValue6String+0xa4>)
 8080618:	4628      	mov	r0, r5
 808061a:	f004 fb96 	bl	8084d4a <_ZNK6String6equalsEPKc>
  } else if (command == "gps") {
 808061e:	b138      	cbz	r0, 8080630 <_Z8pubValue6String+0x38>
    return gpsPublish(command);
 8080620:	4629      	mov	r1, r5
 8080622:	a804      	add	r0, sp, #16
 8080624:	f004 fb38 	bl	8084c98 <_ZN6StringC1ERKS_>
 8080628:	a804      	add	r0, sp, #16
 808062a:	f7ff feab 	bl	8080384 <_Z10gpsPublish6String>
 808062e:	e019      	b.n	8080664 <_Z8pubValue6String+0x6c>
 8080630:	491b      	ldr	r1, [pc, #108]	; (80806a0 <_Z8pubValue6String+0xa8>)
 8080632:	4628      	mov	r0, r5
 8080634:	f004 fb89 	bl	8084d4a <_ZNK6String6equalsEPKc>
  } else if (command == "acc") {
 8080638:	b138      	cbz	r0, 808064a <_Z8pubValue6String+0x52>
    return accPublish(command);
 808063a:	4629      	mov	r1, r5
 808063c:	a804      	add	r0, sp, #16
 808063e:	f004 fb2b 	bl	8084c98 <_ZN6StringC1ERKS_>
 8080642:	a804      	add	r0, sp, #16
 8080644:	f7ff ff4e 	bl	80804e4 <_Z10accPublish6String>
 8080648:	e00c      	b.n	8080664 <_Z8pubValue6String+0x6c>
 808064a:	4916      	ldr	r1, [pc, #88]	; (80806a4 <_Z8pubValue6String+0xac>)
 808064c:	4628      	mov	r0, r5
 808064e:	f004 fb7c 	bl	8084d4a <_ZNK6String6equalsEPKc>
  } else if (command == "env") {
 8080652:	4604      	mov	r4, r0
 8080654:	b140      	cbz	r0, 8080668 <_Z8pubValue6String+0x70>
    return envPublish(command);
 8080656:	4629      	mov	r1, r5
 8080658:	a804      	add	r0, sp, #16
 808065a:	f004 fb1d 	bl	8084c98 <_ZN6StringC1ERKS_>
 808065e:	a804      	add	r0, sp, #16
 8080660:	f7ff ff76 	bl	8080550 <_Z10envPublish6String>
 8080664:	4604      	mov	r4, r0
 8080666:	e011      	b.n	808068c <_Z8pubValue6String+0x94>
  } else
	  Particle.publish("LJCMDERR", String::format("{\"cmd\":\"%s\"}", command), 60, PRIVATE);
 8080668:	462a      	mov	r2, r5
 808066a:	490f      	ldr	r1, [pc, #60]	; (80806a8 <_Z8pubValue6String+0xb0>)
 808066c:	a804      	add	r0, sp, #16
 808066e:	f004 fbe7 	bl	8084e40 <_ZN6String6formatEPKcz>
 8080672:	4b0e      	ldr	r3, [pc, #56]	; (80806ac <_Z8pubValue6String+0xb4>)
 8080674:	a802      	add	r0, sp, #8
 8080676:	781b      	ldrb	r3, [r3, #0]
 8080678:	9a04      	ldr	r2, [sp, #16]
 808067a:	f88d 3000 	strb.w	r3, [sp]
 808067e:	490c      	ldr	r1, [pc, #48]	; (80806b0 <_Z8pubValue6String+0xb8>)
 8080680:	233c      	movs	r3, #60	; 0x3c
 8080682:	f006 f93b 	bl	80868fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8080686:	a803      	add	r0, sp, #12
 8080688:	f7ff fe66 	bl	8080358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808068c:	a804      	add	r0, sp, #16
 808068e:	f004 fa7d 	bl	8084b8c <_ZN6StringD1Ev>
    return 0;
}
 8080692:	4620      	mov	r0, r4
 8080694:	b009      	add	sp, #36	; 0x24
 8080696:	bd30      	pop	{r4, r5, pc}
 8080698:	0808a857 	.word	0x0808a857
 808069c:	0808a85b 	.word	0x0808a85b
 80806a0:	0808a85f 	.word	0x0808a85f
 80806a4:	0808a863 	.word	0x0808a863
 80806a8:	0808a867 	.word	0x0808a867
 80806ac:	2000025c 	.word	0x2000025c
 80806b0:	0808a874 	.word	0x0808a874

080806b4 <_Z16checkPowerStatusv>:
    Particle.publish("LJENVMT", String::format("{\"t\":%.2f,\"h\":%.2f}",f,h), 60, PRIVATE);
    return 1;
}


int checkPowerStatus() {
 80806b4:	b570      	push	{r4, r5, r6, lr}
    bool currentPower = pc.getHasPower();
 80806b6:	481b      	ldr	r0, [pc, #108]	; (8080724 <_Z16checkPowerStatusv+0x70>)
    Particle.publish("LJENVMT", String::format("{\"t\":%.2f,\"h\":%.2f}",f,h), 60, PRIVATE);
    return 1;
}


int checkPowerStatus() {
 80806b8:	b08a      	sub	sp, #40	; 0x28
    bool currentPower = pc.getHasPower();
 80806ba:	f002 f8ff 	bl	80828bc <_ZN10PowerCheck11getHasPowerEv>
    if (lastPower != currentPower) {
 80806be:	4d1a      	ldr	r5, [pc, #104]	; (8080728 <_Z16checkPowerStatusv+0x74>)
    return 1;
}


int checkPowerStatus() {
    bool currentPower = pc.getHasPower();
 80806c0:	4604      	mov	r4, r0
    if (lastPower != currentPower) {
 80806c2:	782b      	ldrb	r3, [r5, #0]
 80806c4:	4283      	cmp	r3, r0
 80806c6:	d029      	beq.n	808071c <_Z16checkPowerStatusv+0x68>
      // Only publish if we're in transmittingData mode 1;
      if ((transmittingData & TRANSMITTINGPWRDATA) == TRANSMITTINGPWRDATA) {
 80806c8:	4b18      	ldr	r3, [pc, #96]	; (808072c <_Z16checkPowerStatusv+0x78>)
 80806ca:	681b      	ldr	r3, [r3, #0]
 80806cc:	075b      	lsls	r3, r3, #29
 80806ce:	d525      	bpl.n	808071c <_Z16checkPowerStatusv+0x68>
        Particle.publish("LJPWRSTAT", String::format("{\"s\": %d,\"n\": 1,\"v\":%.2f,\"c\":%.2f}",currentPower,fuel.getVCell(),fuel.getSoC()), 60, PRIVATE );
 80806d0:	4817      	ldr	r0, [pc, #92]	; (8080730 <_Z16checkPowerStatusv+0x7c>)
 80806d2:	f005 fea1 	bl	8086418 <_ZN9FuelGauge8getVCellEv>
 80806d6:	4606      	mov	r6, r0
 80806d8:	4815      	ldr	r0, [pc, #84]	; (8080730 <_Z16checkPowerStatusv+0x7c>)
 80806da:	f005 feb3 	bl	8086444 <_ZN9FuelGauge6getSoCEv>
 80806de:	f007 fd8d 	bl	80881fc <__aeabi_f2d>
 80806e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80806e6:	4630      	mov	r0, r6
 80806e8:	f007 fd88 	bl	80881fc <__aeabi_f2d>
 80806ec:	4622      	mov	r2, r4
 80806ee:	e9cd 0100 	strd	r0, r1, [sp]
 80806f2:	4910      	ldr	r1, [pc, #64]	; (8080734 <_Z16checkPowerStatusv+0x80>)
 80806f4:	a806      	add	r0, sp, #24
 80806f6:	f004 fba3 	bl	8084e40 <_ZN6String6formatEPKcz>
 80806fa:	4b0f      	ldr	r3, [pc, #60]	; (8080738 <_Z16checkPowerStatusv+0x84>)
 80806fc:	9a06      	ldr	r2, [sp, #24]
 80806fe:	781b      	ldrb	r3, [r3, #0]
 8080700:	490e      	ldr	r1, [pc, #56]	; (808073c <_Z16checkPowerStatusv+0x88>)
 8080702:	f88d 3000 	strb.w	r3, [sp]
 8080706:	a804      	add	r0, sp, #16
 8080708:	233c      	movs	r3, #60	; 0x3c
 808070a:	f006 f8f7 	bl	80868fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 808070e:	a805      	add	r0, sp, #20
 8080710:	f7ff fe22 	bl	8080358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080714:	a806      	add	r0, sp, #24
 8080716:	f004 fa39 	bl	8084b8c <_ZN6StringD1Ev>
        lastPower = currentPower; // note that we only update power status if we actually transmitted data so that when data is turned back on we will report
 808071a:	702c      	strb	r4, [r5, #0]
      }
    }
    return 1;
}
 808071c:	2001      	movs	r0, #1
 808071e:	b00a      	add	sp, #40	; 0x28
 8080720:	bd70      	pop	{r4, r5, r6, pc}
 8080722:	bf00      	nop
 8080724:	20000230 	.word	0x20000230
 8080728:	20000010 	.word	0x20000010
 808072c:	20000008 	.word	0x20000008
 8080730:	20000190 	.word	0x20000190
 8080734:	0808a87d 	.word	0x0808a87d
 8080738:	2000025c 	.word	0x2000025c
 808073c:	0808a7ea 	.word	0x0808a7ea

08080740 <_Z14checkGPSStatusv>:

void checkGPSStatus() {
 8080740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080744:	b093      	sub	sp, #76	; 0x4c

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8080746:	f003 fd0d 	bl	8084164 <HAL_Timer_Get_Milli_Seconds>
    // if the current time - the last time we published is greater than your set delay...
    if (millis()-lastGPSPublish > ((unsigned long) delayGPSMinutes*60*1000)) {
 808074a:	4d41      	ldr	r5, [pc, #260]	; (8080850 <_Z14checkGPSStatusv+0x110>)
 808074c:	682b      	ldr	r3, [r5, #0]
 808074e:	1ac0      	subs	r0, r0, r3
 8080750:	4b40      	ldr	r3, [pc, #256]	; (8080854 <_Z14checkGPSStatusv+0x114>)
 8080752:	681a      	ldr	r2, [r3, #0]
 8080754:	f64e 2360 	movw	r3, #60000	; 0xea60
 8080758:	4353      	muls	r3, r2
 808075a:	4298      	cmp	r0, r3
 808075c:	d974      	bls.n	8080848 <_Z14checkGPSStatusv+0x108>

        // GPS requires a "fix" on the satellites to give good data,
        // so we should only publish data if there's a fix
        if (t.gpsFix()) {
 808075e:	483e      	ldr	r0, [pc, #248]	; (8080858 <_Z14checkGPSStatusv+0x118>)
 8080760:	f002 f9ba 	bl	8082ad8 <_ZN13AssetTracker26gpsFixEv>
 8080764:	2800      	cmp	r0, #0
 8080766:	d06f      	beq.n	8080848 <_Z14checkGPSStatusv+0x108>
            // Only publish if we're in transmittingData mode 1;
            if ((transmittingData & TRANSMITTINGGPSDATA) == TRANSMITTINGGPSDATA) {
 8080768:	4c3c      	ldr	r4, [pc, #240]	; (808085c <_Z14checkGPSStatusv+0x11c>)
 808076a:	6823      	ldr	r3, [r4, #0]
 808076c:	07da      	lsls	r2, r3, #31
 808076e:	d55a      	bpl.n	8080826 <_Z14checkGPSStatusv+0xe6>
							time_t time = Time.now();
 8080770:	f005 fdc1 	bl	80862f6 <_ZN9TimeClass3nowEv>
							Time.format(time, TIME_FORMAT_ISO8601_FULL); // 2004-01-10T08:22:04-05:15
 8080774:	4f3a      	ldr	r7, [pc, #232]	; (8080860 <_Z14checkGPSStatusv+0x120>)
 8080776:	4602      	mov	r2, r0
 8080778:	683b      	ldr	r3, [r7, #0]
 808077a:	493a      	ldr	r1, [pc, #232]	; (8080864 <_Z14checkGPSStatusv+0x124>)
        // GPS requires a "fix" on the satellites to give good data,
        // so we should only publish data if there's a fix
        if (t.gpsFix()) {
            // Only publish if we're in transmittingData mode 1;
            if ((transmittingData & TRANSMITTINGGPSDATA) == TRANSMITTINGGPSDATA) {
							time_t time = Time.now();
 808077c:	4606      	mov	r6, r0
							Time.format(time, TIME_FORMAT_ISO8601_FULL); // 2004-01-10T08:22:04-05:15
 808077e:	a80e      	add	r0, sp, #56	; 0x38
 8080780:	f005 fd66 	bl	8086250 <_ZN9TimeClass6formatElPKc>
 8080784:	a80e      	add	r0, sp, #56	; 0x38
 8080786:	f004 fa01 	bl	8084b8c <_ZN6StringD1Ev>
                // Short publish names save data!
              Particle.publish("LJGPSFIX", String::format("{\"la\":%f,\"lo\":%f,\"ht\":%f,\"ac\":%f,\"tm\":\"%s\"}",t.readLatDeg(),t.readLonDeg(),(t.getAltitude() / 1000),(t.getGpsAccuracy() / 1000),Time.format(time, TIME_FORMAT_ISO8601_FULL).c_str()), 60, PRIVATE);
 808078a:	4833      	ldr	r0, [pc, #204]	; (8080858 <_Z14checkGPSStatusv+0x118>)
 808078c:	f002 f8c0 	bl	8082910 <_ZN13AssetTracker210readLatDegEv>
 8080790:	4683      	mov	fp, r0
 8080792:	4831      	ldr	r0, [pc, #196]	; (8080858 <_Z14checkGPSStatusv+0x118>)
 8080794:	f002 f8c2 	bl	808291c <_ZN13AssetTracker210readLonDegEv>
 8080798:	4680      	mov	r8, r0
 808079a:	482f      	ldr	r0, [pc, #188]	; (8080858 <_Z14checkGPSStatusv+0x118>)
 808079c:	f002 f93e 	bl	8082a1c <_ZN13AssetTracker211getAltitudeEv>
 80807a0:	4681      	mov	r9, r0
 80807a2:	482d      	ldr	r0, [pc, #180]	; (8080858 <_Z14checkGPSStatusv+0x118>)
 80807a4:	f002 f8c0 	bl	8082928 <_ZN13AssetTracker214getGpsAccuracyEv>
 80807a8:	4632      	mov	r2, r6
 80807aa:	683b      	ldr	r3, [r7, #0]
 80807ac:	4682      	mov	sl, r0
 80807ae:	492d      	ldr	r1, [pc, #180]	; (8080864 <_Z14checkGPSStatusv+0x124>)
 80807b0:	a80e      	add	r0, sp, #56	; 0x38
 80807b2:	f005 fd4d 	bl	8086250 <_ZN9TimeClass6formatElPKc>
 80807b6:	4658      	mov	r0, fp
 80807b8:	f007 fd20 	bl	80881fc <__aeabi_f2d>
 80807bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80807be:	4606      	mov	r6, r0
 80807c0:	460f      	mov	r7, r1
 80807c2:	4650      	mov	r0, sl
 80807c4:	4928      	ldr	r1, [pc, #160]	; (8080868 <_Z14checkGPSStatusv+0x128>)
 80807c6:	9306      	str	r3, [sp, #24]
 80807c8:	f008 fa76 	bl	8088cb8 <__aeabi_fdiv>
 80807cc:	f007 fd16 	bl	80881fc <__aeabi_f2d>
 80807d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80807d4:	4924      	ldr	r1, [pc, #144]	; (8080868 <_Z14checkGPSStatusv+0x128>)
 80807d6:	4648      	mov	r0, r9
 80807d8:	f008 fa6e 	bl	8088cb8 <__aeabi_fdiv>
 80807dc:	f007 fd0e 	bl	80881fc <__aeabi_f2d>
 80807e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80807e4:	4640      	mov	r0, r8
 80807e6:	f007 fd09 	bl	80881fc <__aeabi_f2d>
 80807ea:	4632      	mov	r2, r6
 80807ec:	e9cd 0100 	strd	r0, r1, [sp]
 80807f0:	463b      	mov	r3, r7
 80807f2:	491e      	ldr	r1, [pc, #120]	; (808086c <_Z14checkGPSStatusv+0x12c>)
 80807f4:	a80a      	add	r0, sp, #40	; 0x28
 80807f6:	f004 fb23 	bl	8084e40 <_ZN6String6formatEPKcz>
 80807fa:	4b1d      	ldr	r3, [pc, #116]	; (8080870 <_Z14checkGPSStatusv+0x130>)
 80807fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80807fe:	781b      	ldrb	r3, [r3, #0]
 8080800:	491c      	ldr	r1, [pc, #112]	; (8080874 <_Z14checkGPSStatusv+0x134>)
 8080802:	f88d 3000 	strb.w	r3, [sp]
 8080806:	a808      	add	r0, sp, #32
 8080808:	233c      	movs	r3, #60	; 0x3c
 808080a:	f006 f877 	bl	80868fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 808080e:	a809      	add	r0, sp, #36	; 0x24
 8080810:	f7ff fda2 	bl	8080358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080814:	a80a      	add	r0, sp, #40	; 0x28
 8080816:	f004 f9b9 	bl	8084b8c <_ZN6StringD1Ev>
 808081a:	a80e      	add	r0, sp, #56	; 0x38
 808081c:	f004 f9b6 	bl	8084b8c <_ZN6StringD1Ev>
 8080820:	f003 fca0 	bl	8084164 <HAL_Timer_Get_Milli_Seconds>
                // Remember when we published
              lastGPSPublish = millis();
 8080824:	6028      	str	r0, [r5, #0]
            }
            // but always report the data over serial for local development
						if ((transmittingData & SERIALGPSDATA) == SERIALGPSDATA)
 8080826:	6823      	ldr	r3, [r4, #0]
 8080828:	00db      	lsls	r3, r3, #3
 808082a:	d50d      	bpl.n	8080848 <_Z14checkGPSStatusv+0x108>
            	Serial.println(t.readLatLon());
 808082c:	f006 fa9e 	bl	8086d6c <_Z16_fetch_usbserialv>
 8080830:	4604      	mov	r4, r0
 8080832:	4909      	ldr	r1, [pc, #36]	; (8080858 <_Z14checkGPSStatusv+0x118>)
 8080834:	a80e      	add	r0, sp, #56	; 0x38
 8080836:	f002 f8f7 	bl	8082a28 <_ZN13AssetTracker210readLatLonEv>
 808083a:	990e      	ldr	r1, [sp, #56]	; 0x38
 808083c:	4620      	mov	r0, r4
 808083e:	f004 fb60 	bl	8084f02 <_ZN5Print7printlnEPKc>
 8080842:	a80e      	add	r0, sp, #56	; 0x38
 8080844:	f004 f9a2 	bl	8084b8c <_ZN6StringD1Ev>
        }
    }
}
 8080848:	b013      	add	sp, #76	; 0x4c
 808084a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808084e:	bf00      	nop
 8080850:	200001cc 	.word	0x200001cc
 8080854:	2000000c 	.word	0x2000000c
 8080858:	2000025d 	.word	0x2000025d
 808085c:	20000008 	.word	0x20000008
 8080860:	200000c0 	.word	0x200000c0
 8080864:	20000424 	.word	0x20000424
 8080868:	447a0000 	.word	0x447a0000
 808086c:	0808a792 	.word	0x0808a792
 8080870:	2000025c 	.word	0x2000025c
 8080874:	0808a7be 	.word	0x0808a7be

08080878 <_Z16checkAccelStatusv>:

void checkAccelStatus() {
 8080878:	b570      	push	{r4, r5, r6, lr}
      // Check if there's been a big acceleration
      int readMagnitude = t.readXYZmagnitude();
 808087a:	4831      	ldr	r0, [pc, #196]	; (8080940 <_Z16checkAccelStatusv+0xc8>)
            	Serial.println(t.readLatLon());
        }
    }
}

void checkAccelStatus() {
 808087c:	b086      	sub	sp, #24
      // Check if there's been a big acceleration
      int readMagnitude = t.readXYZmagnitude();
 808087e:	f002 f981 	bl	8082b84 <_ZN13AssetTracker216readXYZmagnitudeEv>
      if (readMagnitude > accelThreshold) {
 8080882:	4b30      	ldr	r3, [pc, #192]	; (8080944 <_Z16checkAccelStatusv+0xcc>)
    }
}

void checkAccelStatus() {
      // Check if there's been a big acceleration
      int readMagnitude = t.readXYZmagnitude();
 8080884:	4604      	mov	r4, r0
      if (readMagnitude > accelThreshold) {
 8080886:	681b      	ldr	r3, [r3, #0]
 8080888:	4298      	cmp	r0, r3
 808088a:	dd23      	ble.n	80808d4 <_Z16checkAccelStatusv+0x5c>
          pubAccel = String::format("{\"x\":%d,\"y\":%d,\"z\":%d,\"m\":%d}", t.readX(), t.readY(), t.readZ(), readMagnitude);
 808088c:	482c      	ldr	r0, [pc, #176]	; (8080940 <_Z16checkAccelStatusv+0xc8>)
 808088e:	f002 f95b 	bl	8082b48 <_ZN13AssetTracker25readXEv>
 8080892:	4605      	mov	r5, r0
 8080894:	482a      	ldr	r0, [pc, #168]	; (8080940 <_Z16checkAccelStatusv+0xc8>)
 8080896:	f002 f961 	bl	8082b5c <_ZN13AssetTracker25readYEv>
 808089a:	4606      	mov	r6, r0
 808089c:	4828      	ldr	r0, [pc, #160]	; (8080940 <_Z16checkAccelStatusv+0xc8>)
 808089e:	f002 f967 	bl	8082b70 <_ZN13AssetTracker25readZEv>
 80808a2:	e88d 0011 	stmia.w	sp, {r0, r4}
 80808a6:	4c28      	ldr	r4, [pc, #160]	; (8080948 <_Z16checkAccelStatusv+0xd0>)
 80808a8:	4633      	mov	r3, r6
 80808aa:	462a      	mov	r2, r5
 80808ac:	4927      	ldr	r1, [pc, #156]	; (808094c <_Z16checkAccelStatusv+0xd4>)
 80808ae:	a802      	add	r0, sp, #8
 80808b0:	f004 fac6 	bl	8084e40 <_ZN6String6formatEPKcz>
 80808b4:	a902      	add	r1, sp, #8
 80808b6:	4620      	mov	r0, r4
 80808b8:	f004 f9f9 	bl	8084cae <_ZN6StringaSEOS_>
 80808bc:	a802      	add	r0, sp, #8
 80808be:	f004 f965 	bl	8084b8c <_ZN6StringD1Ev>
					if ((transmittingData & SERIALACCDATA) == SERIALACCDATA)
 80808c2:	4b23      	ldr	r3, [pc, #140]	; (8080950 <_Z16checkAccelStatusv+0xd8>)
 80808c4:	681b      	ldr	r3, [r3, #0]
 80808c6:	009a      	lsls	r2, r3, #2
 80808c8:	d504      	bpl.n	80808d4 <_Z16checkAccelStatusv+0x5c>
          	Serial.println(pubAccel);
 80808ca:	f006 fa4f 	bl	8086d6c <_Z16_fetch_usbserialv>
 80808ce:	6821      	ldr	r1, [r4, #0]
 80808d0:	f004 fb17 	bl	8084f02 <_ZN5Print7printlnEPKc>
 80808d4:	f003 fc46 	bl	8084164 <HAL_Timer_Get_Milli_Seconds>
      }
      // if the current time - the last time we published is greater than your set delay...
      if (millis()-lastACCPublish > ((unsigned long) delayACCMinutes*60*1000)) {
 80808d8:	4d1e      	ldr	r5, [pc, #120]	; (8080954 <_Z16checkAccelStatusv+0xdc>)
 80808da:	682b      	ldr	r3, [r5, #0]
 80808dc:	1ac0      	subs	r0, r0, r3
 80808de:	4b1e      	ldr	r3, [pc, #120]	; (8080958 <_Z16checkAccelStatusv+0xe0>)
 80808e0:	681a      	ldr	r2, [r3, #0]
 80808e2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80808e6:	4353      	muls	r3, r2
 80808e8:	4298      	cmp	r0, r3
 80808ea:	d927      	bls.n	808093c <_Z16checkAccelStatusv+0xc4>
          if ((transmittingData & TRANSMITTINGACCDATA) == TRANSMITTINGACCDATA) {
 80808ec:	4b18      	ldr	r3, [pc, #96]	; (8080950 <_Z16checkAccelStatusv+0xd8>)
 80808ee:	681b      	ldr	r3, [r3, #0]
 80808f0:	079b      	lsls	r3, r3, #30
 80808f2:	d523      	bpl.n	808093c <_Z16checkAccelStatusv+0xc4>
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 80808f4:	4c14      	ldr	r4, [pc, #80]	; (8080948 <_Z16checkAccelStatusv+0xd0>)
 80808f6:	4919      	ldr	r1, [pc, #100]	; (808095c <_Z16checkAccelStatusv+0xe4>)
 80808f8:	4620      	mov	r0, r4
 80808fa:	f004 fa26 	bl	8084d4a <_ZNK6String6equalsEPKc>
            // only publish if we had an accelleration event occur since our last publication time
            if (pubAccel != "") {
 80808fe:	b9e8      	cbnz	r0, 808093c <_Z16checkAccelStatusv+0xc4>
 8080900:	4b17      	ldr	r3, [pc, #92]	; (8080960 <_Z16checkAccelStatusv+0xe8>)
 8080902:	4918      	ldr	r1, [pc, #96]	; (8080964 <_Z16checkAccelStatusv+0xec>)
 8080904:	781b      	ldrb	r3, [r3, #0]
 8080906:	a802      	add	r0, sp, #8
 8080908:	f88d 3000 	strb.w	r3, [sp]
 808090c:	6822      	ldr	r2, [r4, #0]
 808090e:	233c      	movs	r3, #60	; 0x3c
 8080910:	f005 fff4 	bl	80868fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8080914:	a803      	add	r0, sp, #12
 8080916:	f7ff fd1f 	bl	8080358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
              // Short publish names save data!
              Particle.publish("LJACELRT", pubAccel, 60, PRIVATE);
							gpsPublish(""); // publish position if we get an accelleration alert
 808091a:	4910      	ldr	r1, [pc, #64]	; (808095c <_Z16checkAccelStatusv+0xe4>)
 808091c:	a802      	add	r0, sp, #8
 808091e:	f004 f97c 	bl	8084c1a <_ZN6StringC1EPK19__FlashStringHelper>
 8080922:	a802      	add	r0, sp, #8
 8080924:	f7ff fd2e 	bl	8080384 <_Z10gpsPublish6String>
 8080928:	a802      	add	r0, sp, #8
 808092a:	f004 f92f 	bl	8084b8c <_ZN6StringD1Ev>
 808092e:	f003 fc19 	bl	8084164 <HAL_Timer_Get_Milli_Seconds>
              // Remember when we published
              lastACCPublish = millis();
              pubAccel = "";
 8080932:	490a      	ldr	r1, [pc, #40]	; (808095c <_Z16checkAccelStatusv+0xe4>)
            if (pubAccel != "") {
              // Short publish names save data!
              Particle.publish("LJACELRT", pubAccel, 60, PRIVATE);
							gpsPublish(""); // publish position if we get an accelleration alert
              // Remember when we published
              lastACCPublish = millis();
 8080934:	6028      	str	r0, [r5, #0]
              pubAccel = "";
 8080936:	4620      	mov	r0, r4
 8080938:	f004 f9c1 	bl	8084cbe <_ZN6StringaSEPKc>
            }
          }
      }
}
 808093c:	b006      	add	sp, #24
 808093e:	bd70      	pop	{r4, r5, r6, pc}
 8080940:	2000025d 	.word	0x2000025d
 8080944:	20000000 	.word	0x20000000
 8080948:	2000021c 	.word	0x2000021c
 808094c:	0808a7f4 	.word	0x0808a7f4
 8080950:	20000008 	.word	0x20000008
 8080954:	200001ec 	.word	0x200001ec
 8080958:	20000004 	.word	0x20000004
 808095c:	0808acc4 	.word	0x0808acc4
 8080960:	2000025c 	.word	0x2000025c
 8080964:	0808a812 	.word	0x0808a812

08080968 <_Z14checkDHTStatusv>:

void checkDHTStatus() {
 8080968:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	delay(2000); // DHT 22 minumum sampling period
 808096c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
            }
          }
      }
}

void checkDHTStatus() {
 8080970:	b088      	sub	sp, #32
	delay(2000); // DHT 22 minumum sampling period
 8080972:	f005 fcd1 	bl	8086318 <delay>
// Reading temperature or humidity takes about 250 milliseconds!
// Sensor readings may also be up to 2 seconds 'old' (its a
// very slow sensor)
	float h = dht.getHumidity();
 8080976:	4829      	ldr	r0, [pc, #164]	; (8080a1c <_Z14checkDHTStatusv+0xb4>)
 8080978:	f002 fa3e 	bl	8082df8 <_ZN3DHT11getHumidityEv>
 808097c:	4604      	mov	r4, r0
// Read temperature as Farenheit
	float f = dht.getTempFarenheit();
 808097e:	4827      	ldr	r0, [pc, #156]	; (8080a1c <_Z14checkDHTStatusv+0xb4>)
 8080980:	f002 fa00 	bl	8082d84 <_ZN3DHT16getTempFarenheitEv>

// Check if any reads failed and exit early (to try again).
	if (isnan(h) || isnan(f)) {
 8080984:	4621      	mov	r1, r4
// Reading temperature or humidity takes about 250 milliseconds!
// Sensor readings may also be up to 2 seconds 'old' (its a
// very slow sensor)
	float h = dht.getHumidity();
// Read temperature as Farenheit
	float f = dht.getTempFarenheit();
 8080986:	4605      	mov	r5, r0

// Check if any reads failed and exit early (to try again).
	if (isnan(h) || isnan(f)) {
 8080988:	4620      	mov	r0, r4
 808098a:	f008 faa7 	bl	8088edc <__aeabi_fcmpun>
 808098e:	b920      	cbnz	r0, 808099a <_Z14checkDHTStatusv+0x32>
 8080990:	4629      	mov	r1, r5
 8080992:	4628      	mov	r0, r5
 8080994:	f008 faa2 	bl	8088edc <__aeabi_fcmpun>
 8080998:	b148      	cbz	r0, 80809ae <_Z14checkDHTStatusv+0x46>
		if ((transmittingData & SERIALDHTDATA) == SERIALDHTDATA)
 808099a:	4b21      	ldr	r3, [pc, #132]	; (8080a20 <_Z14checkDHTStatusv+0xb8>)
 808099c:	681b      	ldr	r3, [r3, #0]
 808099e:	2b00      	cmp	r3, #0
 80809a0:	da38      	bge.n	8080a14 <_Z14checkDHTStatusv+0xac>
			Serial.println("Failed to read from DHT sensor!");
 80809a2:	f006 f9e3 	bl	8086d6c <_Z16_fetch_usbserialv>
 80809a6:	491f      	ldr	r1, [pc, #124]	; (8080a24 <_Z14checkDHTStatusv+0xbc>)
 80809a8:	f004 faab 	bl	8084f02 <_ZN5Print7printlnEPKc>
 80809ac:	e032      	b.n	8080a14 <_Z14checkDHTStatusv+0xac>
 80809ae:	f003 fbd9 	bl	8084164 <HAL_Timer_Get_Milli_Seconds>
		return;
	}
  // if the current time - the last time we published is greater than your set delay...
  if (millis()-lastDHTPublish > ((unsigned long) delayDHTMinutes*60*1000)) {
 80809b2:	4e1d      	ldr	r6, [pc, #116]	; (8080a28 <_Z14checkDHTStatusv+0xc0>)
 80809b4:	6833      	ldr	r3, [r6, #0]
 80809b6:	1ac0      	subs	r0, r0, r3
 80809b8:	4b1c      	ldr	r3, [pc, #112]	; (8080a2c <_Z14checkDHTStatusv+0xc4>)
 80809ba:	681a      	ldr	r2, [r3, #0]
 80809bc:	f64e 2360 	movw	r3, #60000	; 0xea60
 80809c0:	4353      	muls	r3, r2
 80809c2:	4298      	cmp	r0, r3
 80809c4:	d926      	bls.n	8080a14 <_Z14checkDHTStatusv+0xac>
      if ((transmittingData & TRANSMITTINGDHTDATA) == TRANSMITTINGDHTDATA) {
 80809c6:	4b16      	ldr	r3, [pc, #88]	; (8080a20 <_Z14checkDHTStatusv+0xb8>)
 80809c8:	681b      	ldr	r3, [r3, #0]
 80809ca:	071b      	lsls	r3, r3, #28
 80809cc:	d522      	bpl.n	8080a14 <_Z14checkDHTStatusv+0xac>
          // Short publish names save data!
          Particle.publish("LJENVMT", String::format("{\"t\":%.2f,\"h\":%.2f}",f,h), 60, PRIVATE);
 80809ce:	4628      	mov	r0, r5
 80809d0:	f007 fc14 	bl	80881fc <__aeabi_f2d>
 80809d4:	4680      	mov	r8, r0
 80809d6:	4620      	mov	r0, r4
 80809d8:	4689      	mov	r9, r1
 80809da:	f007 fc0f 	bl	80881fc <__aeabi_f2d>
 80809de:	4642      	mov	r2, r8
 80809e0:	e9cd 0100 	strd	r0, r1, [sp]
 80809e4:	464b      	mov	r3, r9
 80809e6:	4912      	ldr	r1, [pc, #72]	; (8080a30 <_Z14checkDHTStatusv+0xc8>)
 80809e8:	a804      	add	r0, sp, #16
 80809ea:	f004 fa29 	bl	8084e40 <_ZN6String6formatEPKcz>
 80809ee:	4b11      	ldr	r3, [pc, #68]	; (8080a34 <_Z14checkDHTStatusv+0xcc>)
 80809f0:	9a04      	ldr	r2, [sp, #16]
 80809f2:	781b      	ldrb	r3, [r3, #0]
 80809f4:	4910      	ldr	r1, [pc, #64]	; (8080a38 <_Z14checkDHTStatusv+0xd0>)
 80809f6:	f88d 3000 	strb.w	r3, [sp]
 80809fa:	a802      	add	r0, sp, #8
 80809fc:	233c      	movs	r3, #60	; 0x3c
 80809fe:	f005 ff7d 	bl	80868fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8080a02:	a803      	add	r0, sp, #12
 8080a04:	f7ff fca8 	bl	8080358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080a08:	a804      	add	r0, sp, #16
 8080a0a:	f004 f8bf 	bl	8084b8c <_ZN6StringD1Ev>
 8080a0e:	f003 fba9 	bl	8084164 <HAL_Timer_Get_Milli_Seconds>
          // Remember when we published
          lastDHTPublish = millis();
 8080a12:	6030      	str	r0, [r6, #0]
        }
      }
}
 8080a14:	b008      	add	sp, #32
 8080a16:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8080a1a:	bf00      	nop
 8080a1c:	20000284 	.word	0x20000284
 8080a20:	20000008 	.word	0x20000008
 8080a24:	0808a81b 	.word	0x0808a81b
 8080a28:	2000022c 	.word	0x2000022c
 8080a2c:	20000014 	.word	0x20000014
 8080a30:	0808a83b 	.word	0x0808a83b
 8080a34:	2000025c 	.word	0x2000025c
 8080a38:	0808a84f 	.word	0x0808a84f

08080a3c <loop>:

	if ((transmittingData & SERIALSETUPDATA) == SERIALSETUPDATA)
		Serial.println("End of setup() function");
}

void loop() {
 8080a3c:	b508      	push	{r3, lr}
	batteryCheck.loop();
 8080a3e:	4811      	ldr	r0, [pc, #68]	; (8080a84 <loop+0x48>)
 8080a40:	f000 ff96 	bl	8081970 <_ZN12BatteryCheck4loopEv>
	sessionCheck.loop();
 8080a44:	4810      	ldr	r0, [pc, #64]	; (8080a88 <loop+0x4c>)
 8080a46:	f001 fc73 	bl	8082330 <_ZN12SessionCheck4loopEv>
	connectionCheck.loop();
 8080a4a:	4810      	ldr	r0, [pc, #64]	; (8080a8c <loop+0x50>)
 8080a4c:	f001 fa60 	bl	8081f10 <_ZN15ConnectionCheck4loopEv>
	connectionEvents.loop();
 8080a50:	480f      	ldr	r0, [pc, #60]	; (8080a90 <loop+0x54>)
 8080a52:	f001 fdb3 	bl	80825bc <_ZN16ConnectionEvents4loopEv>
	tester.loop();
 8080a56:	480f      	ldr	r0, [pc, #60]	; (8080a94 <loop+0x58>)
 8080a58:	f001 f986 	bl	8081d68 <_ZN6Tester4loopEv>

  checkAccelStatus();
 8080a5c:	f7ff ff0c 	bl	8080878 <_Z16checkAccelStatusv>
  checkGPSStatus();
 8080a60:	f7ff fe6e 	bl	8080740 <_Z14checkGPSStatusv>
  checkPowerStatus();
 8080a64:	f7ff fe26 	bl	80806b4 <_Z16checkPowerStatusv>
  checkDHTStatus();
 8080a68:	f7ff ff7e 	bl	8080968 <_Z14checkDHTStatusv>

  if ((transmittingData & SERIALLOOPDATA) == SERIALLOOPDATA)
 8080a6c:	4b0a      	ldr	r3, [pc, #40]	; (8080a98 <loop+0x5c>)
 8080a6e:	681b      	ldr	r3, [r3, #0]
 8080a70:	011b      	lsls	r3, r3, #4
 8080a72:	d506      	bpl.n	8080a82 <loop+0x46>
    Serial.println("End Of loop() function");
 8080a74:	f006 f97a 	bl	8086d6c <_Z16_fetch_usbserialv>
}
 8080a78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  checkGPSStatus();
  checkPowerStatus();
  checkDHTStatus();

  if ((transmittingData & SERIALLOOPDATA) == SERIALLOOPDATA)
    Serial.println("End Of loop() function");
 8080a7c:	4907      	ldr	r1, [pc, #28]	; (8080a9c <loop+0x60>)
 8080a7e:	f004 ba40 	b.w	8084f02 <_ZN5Print7printlnEPKc>
 8080a82:	bd08      	pop	{r3, pc}
 8080a84:	2000020c 	.word	0x2000020c
 8080a88:	20000198 	.word	0x20000198
 8080a8c:	2000023c 	.word	0x2000023c
 8080a90:	20000298 	.word	0x20000298
 8080a94:	200001d0 	.word	0x200001d0
 8080a98:	20000008 	.word	0x20000008
 8080a9c:	0808a8a0 	.word	0x0808a8a0

08080aa0 <_Z9postValue6String>:

// Type the name of the value you want to see into the console function
// argument and it will be published.
// See showAll() above for names of values and units.
int postValue(String cmd)
{
 8080aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080aa4:	b0a1      	sub	sp, #132	; 0x84
    String buf; // for publishing values
 8080aa6:	ae18      	add	r6, sp, #96	; 0x60
 8080aa8:	499c      	ldr	r1, [pc, #624]	; (8080d1c <_Z9postValue6String+0x27c>)

// Type the name of the value you want to see into the console function
// argument and it will be published.
// See showAll() above for names of values and units.
int postValue(String cmd)
{
 8080aaa:	4605      	mov	r5, r0
    String buf; // for publishing values
 8080aac:	4630      	mov	r0, r6
 8080aae:	f004 f8b4 	bl	8084c1a <_ZN6StringC1EPK19__FlashStringHelper>

    bool initComplete = t.gpsInitComplete();
 8080ab2:	489b      	ldr	r0, [pc, #620]	; (8080d20 <_Z9postValue6String+0x280>)
 8080ab4:	f002 f80a 	bl	8082acc <_ZN13AssetTracker215gpsInitCompleteEv>
 8080ab8:	9015      	str	r0, [sp, #84]	; 0x54
    uint8_t hour = t.getHour();
 8080aba:	4899      	ldr	r0, [pc, #612]	; (8080d20 <_Z9postValue6String+0x280>)
 8080abc:	f001 ff6c 	bl	8082998 <_ZN13AssetTracker27getHourEv>
 8080ac0:	4683      	mov	fp, r0
    uint8_t minute = t.getMinute();
 8080ac2:	4897      	ldr	r0, [pc, #604]	; (8080d20 <_Z9postValue6String+0x280>)
 8080ac4:	f001 ff6e 	bl	80829a4 <_ZN13AssetTracker29getMinuteEv>
 8080ac8:	4682      	mov	sl, r0
    uint8_t seconds = t.getSeconds();
 8080aca:	4895      	ldr	r0, [pc, #596]	; (8080d20 <_Z9postValue6String+0x280>)
 8080acc:	f001 ff70 	bl	80829b0 <_ZN13AssetTracker210getSecondsEv>
 8080ad0:	4681      	mov	r9, r0
    uint8_t month = t.getMonth();
 8080ad2:	4893      	ldr	r0, [pc, #588]	; (8080d20 <_Z9postValue6String+0x280>)
 8080ad4:	f001 ff7e 	bl	80829d4 <_ZN13AssetTracker28getMonthEv>
 8080ad8:	4680      	mov	r8, r0
    uint8_t day = t.getDay();
 8080ada:	4891      	ldr	r0, [pc, #580]	; (8080d20 <_Z9postValue6String+0x280>)
 8080adc:	f001 ff80 	bl	80829e0 <_ZN13AssetTracker26getDayEv>
 8080ae0:	4607      	mov	r7, r0
    uint16_t year = t.getYear();
 8080ae2:	488f      	ldr	r0, [pc, #572]	; (8080d20 <_Z9postValue6String+0x280>)
 8080ae4:	f001 ff70 	bl	80829c8 <_ZN13AssetTracker27getYearEv>
 8080ae8:	9014      	str	r0, [sp, #80]	; 0x50
    uint16_t milliseconds = t.getMilliseconds();
 8080aea:	488d      	ldr	r0, [pc, #564]	; (8080d20 <_Z9postValue6String+0x280>)
 8080aec:	f001 ff66 	bl	80829bc <_ZN13AssetTracker215getMillisecondsEv>
 8080af0:	9002      	str	r0, [sp, #8]
    float latitude = t.readLat();
 8080af2:	488b      	ldr	r0, [pc, #556]	; (8080d20 <_Z9postValue6String+0x280>)
 8080af4:	f001 ff00 	bl	80828f8 <_ZN13AssetTracker27readLatEv>
 8080af8:	9003      	str	r0, [sp, #12]
    float longitude = t.readLon();
 8080afa:	4889      	ldr	r0, [pc, #548]	; (8080d20 <_Z9postValue6String+0x280>)
 8080afc:	f001 ff02 	bl	8082904 <_ZN13AssetTracker27readLonEv>
 8080b00:	9004      	str	r0, [sp, #16]
    float latitudeDegrees = t.readLatDeg();
 8080b02:	4887      	ldr	r0, [pc, #540]	; (8080d20 <_Z9postValue6String+0x280>)
 8080b04:	f001 ff04 	bl	8082910 <_ZN13AssetTracker210readLatDegEv>
 8080b08:	9005      	str	r0, [sp, #20]
    float longitudeDegrees = t.readLonDeg();
 8080b0a:	4885      	ldr	r0, [pc, #532]	; (8080d20 <_Z9postValue6String+0x280>)
 8080b0c:	f001 ff06 	bl	808291c <_ZN13AssetTracker210readLonDegEv>
 8080b10:	9006      	str	r0, [sp, #24]
    float geoidheight = t.getGeoIdHeight();
 8080b12:	4883      	ldr	r0, [pc, #524]	; (8080d20 <_Z9postValue6String+0x280>)
 8080b14:	f001 ff7c 	bl	8082a10 <_ZN13AssetTracker214getGeoIdHeightEv>
 8080b18:	9007      	str	r0, [sp, #28]
    float altitude = t.getAltitude();
 8080b1a:	4881      	ldr	r0, [pc, #516]	; (8080d20 <_Z9postValue6String+0x280>)
 8080b1c:	f001 ff7e 	bl	8082a1c <_ZN13AssetTracker211getAltitudeEv>
 8080b20:	9008      	str	r0, [sp, #32]
    float speed = t.getSpeed();
 8080b22:	487f      	ldr	r0, [pc, #508]	; (8080d20 <_Z9postValue6String+0x280>)
 8080b24:	f001 ff6e 	bl	8082a04 <_ZN13AssetTracker28getSpeedEv>
 8080b28:	9009      	str	r0, [sp, #36]	; 0x24
    uint8_t fixquality = t.getFixQuality();
 8080b2a:	487d      	ldr	r0, [pc, #500]	; (8080d20 <_Z9postValue6String+0x280>)
 8080b2c:	f001 ff64 	bl	80829f8 <_ZN13AssetTracker213getFixQualityEv>
 8080b30:	900a      	str	r0, [sp, #40]	; 0x28
    uint8_t satellites = t.getSatellites();
 8080b32:	487b      	ldr	r0, [pc, #492]	; (8080d20 <_Z9postValue6String+0x280>)
 8080b34:	f001 ff5a 	bl	80829ec <_ZN13AssetTracker213getSatellitesEv>
 8080b38:	900b      	str	r0, [sp, #44]	; 0x2c
    uint32_t horzAcc = t.getHaccuracy();
 8080b3a:	4879      	ldr	r0, [pc, #484]	; (8080d20 <_Z9postValue6String+0x280>)
 8080b3c:	f001 fefc 	bl	8082938 <_ZN13AssetTracker212getHaccuracyEv>
 8080b40:	900c      	str	r0, [sp, #48]	; 0x30
    uint32_t vertAcc = t.getVaccuracy();
 8080b42:	4877      	ldr	r0, [pc, #476]	; (8080d20 <_Z9postValue6String+0x280>)
 8080b44:	f001 fefe 	bl	8082944 <_ZN13AssetTracker212getVaccuracyEv>
 8080b48:	900d      	str	r0, [sp, #52]	; 0x34
    int32_t velN = t.getVelN();
 8080b4a:	4875      	ldr	r0, [pc, #468]	; (8080d20 <_Z9postValue6String+0x280>)
 8080b4c:	f001 ff00 	bl	8082950 <_ZN13AssetTracker27getVelNEv>
 8080b50:	900e      	str	r0, [sp, #56]	; 0x38
    uint32_t velE = t.getVelE();
 8080b52:	4873      	ldr	r0, [pc, #460]	; (8080d20 <_Z9postValue6String+0x280>)
 8080b54:	f001 ff02 	bl	808295c <_ZN13AssetTracker27getVelEEv>
 8080b58:	900f      	str	r0, [sp, #60]	; 0x3c
    uint32_t velD = t.getVelD();
 8080b5a:	4871      	ldr	r0, [pc, #452]	; (8080d20 <_Z9postValue6String+0x280>)
 8080b5c:	f001 ff04 	bl	8082968 <_ZN13AssetTracker27getVelDEv>
 8080b60:	9010      	str	r0, [sp, #64]	; 0x40
    int32_t gSpeed = t.getGspeed();
 8080b62:	486f      	ldr	r0, [pc, #444]	; (8080d20 <_Z9postValue6String+0x280>)
 8080b64:	f001 ff12 	bl	808298c <_ZN13AssetTracker29getGspeedEv>
 8080b68:	9011      	str	r0, [sp, #68]	; 0x44
    int32_t odoTrip = t.getOdoTrip();
 8080b6a:	486d      	ldr	r0, [pc, #436]	; (8080d20 <_Z9postValue6String+0x280>)
 8080b6c:	f001 ff02 	bl	8082974 <_ZN13AssetTracker210getOdoTripEv>
 8080b70:	9012      	str	r0, [sp, #72]	; 0x48
    int32_t odoTotal = t.getOdoTotal();
 8080b72:	486b      	ldr	r0, [pc, #428]	; (8080d20 <_Z9postValue6String+0x280>)
 8080b74:	f001 ff04 	bl	8082980 <_ZN13AssetTracker211getOdoTotalEv>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8080b78:	496a      	ldr	r1, [pc, #424]	; (8080d24 <_Z9postValue6String+0x284>)
 8080b7a:	9013      	str	r0, [sp, #76]	; 0x4c
 8080b7c:	4628      	mov	r0, r5
 8080b7e:	f004 f8e4 	bl	8084d4a <_ZNK6String6equalsEPKc>
 8080b82:	ac1c      	add	r4, sp, #112	; 0x70



    // This implementation is a bit crude but it was easy to implement
    // and simple to read.
    if (cmd == "initComplete"){
 8080b84:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8080b86:	b928      	cbnz	r0, 8080b94 <_Z9postValue6String+0xf4>
 8080b88:	4967      	ldr	r1, [pc, #412]	; (8080d28 <_Z9postValue6String+0x288>)
 8080b8a:	4628      	mov	r0, r5
 8080b8c:	f004 f8dd 	bl	8084d4a <_ZNK6String6equalsEPKc>
        buf = String::format("%d", initComplete);
    } else if (cmd == "hour"){
 8080b90:	b160      	cbz	r0, 8080bac <_Z9postValue6String+0x10c>
        buf = String::format("%d", hour);
 8080b92:	465a      	mov	r2, fp
 8080b94:	4965      	ldr	r1, [pc, #404]	; (8080d2c <_Z9postValue6String+0x28c>)
 8080b96:	4620      	mov	r0, r4
 8080b98:	f004 f952 	bl	8084e40 <_ZN6String6formatEPKcz>
 8080b9c:	4621      	mov	r1, r4
 8080b9e:	4630      	mov	r0, r6
 8080ba0:	f004 f885 	bl	8084cae <_ZN6StringaSEOS_>
 8080ba4:	4620      	mov	r0, r4
 8080ba6:	f003 fff1 	bl	8084b8c <_ZN6StringD1Ev>
 8080baa:	e10c      	b.n	8080dc6 <_Z9postValue6String+0x326>
 8080bac:	4960      	ldr	r1, [pc, #384]	; (8080d30 <_Z9postValue6String+0x290>)
 8080bae:	4628      	mov	r0, r5
 8080bb0:	f004 f8cb 	bl	8084d4a <_ZNK6String6equalsEPKc>
    } else if (cmd == "minute"){
 8080bb4:	b108      	cbz	r0, 8080bba <_Z9postValue6String+0x11a>
        buf = String::format("%d", minute);
 8080bb6:	4652      	mov	r2, sl
 8080bb8:	e7ec      	b.n	8080b94 <_Z9postValue6String+0xf4>
 8080bba:	495e      	ldr	r1, [pc, #376]	; (8080d34 <_Z9postValue6String+0x294>)
 8080bbc:	4628      	mov	r0, r5
 8080bbe:	f004 f8c4 	bl	8084d4a <_ZNK6String6equalsEPKc>
    } else if (cmd == "seconds"){
 8080bc2:	b108      	cbz	r0, 8080bc8 <_Z9postValue6String+0x128>
        buf = String::format("%d", seconds);
 8080bc4:	464a      	mov	r2, r9
 8080bc6:	e7e5      	b.n	8080b94 <_Z9postValue6String+0xf4>
 8080bc8:	495b      	ldr	r1, [pc, #364]	; (8080d38 <_Z9postValue6String+0x298>)
 8080bca:	4628      	mov	r0, r5
 8080bcc:	f004 f8bd 	bl	8084d4a <_ZNK6String6equalsEPKc>
    } else if (cmd == "month"){
 8080bd0:	b108      	cbz	r0, 8080bd6 <_Z9postValue6String+0x136>
        buf = String::format("%d", month);
 8080bd2:	4642      	mov	r2, r8
 8080bd4:	e7de      	b.n	8080b94 <_Z9postValue6String+0xf4>
 8080bd6:	4959      	ldr	r1, [pc, #356]	; (8080d3c <_Z9postValue6String+0x29c>)
 8080bd8:	4628      	mov	r0, r5
 8080bda:	f004 f8b6 	bl	8084d4a <_ZNK6String6equalsEPKc>
    } else if (cmd == "day"){
 8080bde:	b108      	cbz	r0, 8080be4 <_Z9postValue6String+0x144>
        buf = String::format("%d", day);
 8080be0:	463a      	mov	r2, r7
 8080be2:	e7d7      	b.n	8080b94 <_Z9postValue6String+0xf4>
 8080be4:	4956      	ldr	r1, [pc, #344]	; (8080d40 <_Z9postValue6String+0x2a0>)
 8080be6:	4628      	mov	r0, r5
 8080be8:	f004 f8af 	bl	8084d4a <_ZNK6String6equalsEPKc>
    } else if (cmd == "year"){
 8080bec:	b108      	cbz	r0, 8080bf2 <_Z9postValue6String+0x152>
        buf = String::format("%d", year);
 8080bee:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8080bf0:	e7d0      	b.n	8080b94 <_Z9postValue6String+0xf4>
 8080bf2:	4954      	ldr	r1, [pc, #336]	; (8080d44 <_Z9postValue6String+0x2a4>)
 8080bf4:	4628      	mov	r0, r5
 8080bf6:	f004 f8a8 	bl	8084d4a <_ZNK6String6equalsEPKc>
    } else if (cmd == "milliseconds"){
 8080bfa:	b110      	cbz	r0, 8080c02 <_Z9postValue6String+0x162>
        buf = String::format("%d", milliseconds);
 8080bfc:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8080c00:	e7c8      	b.n	8080b94 <_Z9postValue6String+0xf4>
 8080c02:	4951      	ldr	r1, [pc, #324]	; (8080d48 <_Z9postValue6String+0x2a8>)
 8080c04:	4628      	mov	r0, r5
 8080c06:	f004 f8a0 	bl	8084d4a <_ZNK6String6equalsEPKc>
    } else if (cmd == "latitude"){
 8080c0a:	b148      	cbz	r0, 8080c20 <_Z9postValue6String+0x180>
        buf = String::format("%f", latitude);
 8080c0c:	9803      	ldr	r0, [sp, #12]
 8080c0e:	f007 faf5 	bl	80881fc <__aeabi_f2d>
 8080c12:	4602      	mov	r2, r0
 8080c14:	460b      	mov	r3, r1
 8080c16:	4620      	mov	r0, r4
 8080c18:	494c      	ldr	r1, [pc, #304]	; (8080d4c <_Z9postValue6String+0x2ac>)
 8080c1a:	f004 f911 	bl	8084e40 <_ZN6String6formatEPKcz>
 8080c1e:	e7bd      	b.n	8080b9c <_Z9postValue6String+0xfc>
 8080c20:	494b      	ldr	r1, [pc, #300]	; (8080d50 <_Z9postValue6String+0x2b0>)
 8080c22:	4628      	mov	r0, r5
 8080c24:	f004 f891 	bl	8084d4a <_ZNK6String6equalsEPKc>
 8080c28:	46b0      	mov	r8, r6
 8080c2a:	4627      	mov	r7, r4
    } else if (cmd == "longitude"){
 8080c2c:	b108      	cbz	r0, 8080c32 <_Z9postValue6String+0x192>
        buf = String::format("%f", longitude);
 8080c2e:	9804      	ldr	r0, [sp, #16]
 8080c30:	e005      	b.n	8080c3e <_Z9postValue6String+0x19e>
 8080c32:	4948      	ldr	r1, [pc, #288]	; (8080d54 <_Z9postValue6String+0x2b4>)
 8080c34:	4628      	mov	r0, r5
 8080c36:	f004 f888 	bl	8084d4a <_ZNK6String6equalsEPKc>
    } else if (cmd == "latitudeDegrees"){
 8080c3a:	b148      	cbz	r0, 8080c50 <_Z9postValue6String+0x1b0>
        buf = String::format("%f", latitudeDegrees);
 8080c3c:	9805      	ldr	r0, [sp, #20]
 8080c3e:	f007 fadd 	bl	80881fc <__aeabi_f2d>
 8080c42:	4602      	mov	r2, r0
 8080c44:	460b      	mov	r3, r1
 8080c46:	4638      	mov	r0, r7
 8080c48:	4940      	ldr	r1, [pc, #256]	; (8080d4c <_Z9postValue6String+0x2ac>)
 8080c4a:	f004 f8f9 	bl	8084e40 <_ZN6String6formatEPKcz>
 8080c4e:	e040      	b.n	8080cd2 <_Z9postValue6String+0x232>
 8080c50:	4941      	ldr	r1, [pc, #260]	; (8080d58 <_Z9postValue6String+0x2b8>)
 8080c52:	4628      	mov	r0, r5
 8080c54:	f004 f879 	bl	8084d4a <_ZNK6String6equalsEPKc>
 8080c58:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    } else if (cmd == "longitudeDegrees"){
 8080c5c:	b108      	cbz	r0, 8080c62 <_Z9postValue6String+0x1c2>
        buf = String::format("%f", longitudeDegrees);
 8080c5e:	9806      	ldr	r0, [sp, #24]
 8080c60:	e7ed      	b.n	8080c3e <_Z9postValue6String+0x19e>
 8080c62:	493e      	ldr	r1, [pc, #248]	; (8080d5c <_Z9postValue6String+0x2bc>)
 8080c64:	4628      	mov	r0, r5
 8080c66:	f004 f870 	bl	8084d4a <_ZNK6String6equalsEPKc>
 8080c6a:	af1c      	add	r7, sp, #112	; 0x70
    } else if (cmd == "geoidheight"){
 8080c6c:	b108      	cbz	r0, 8080c72 <_Z9postValue6String+0x1d2>
        buf = String::format("%f", geoidheight);
 8080c6e:	9807      	ldr	r0, [sp, #28]
 8080c70:	e7e5      	b.n	8080c3e <_Z9postValue6String+0x19e>
 8080c72:	493b      	ldr	r1, [pc, #236]	; (8080d60 <_Z9postValue6String+0x2c0>)
 8080c74:	4628      	mov	r0, r5
 8080c76:	f004 f868 	bl	8084d4a <_ZNK6String6equalsEPKc>
    } else if (cmd == "altitude"){
 8080c7a:	b108      	cbz	r0, 8080c80 <_Z9postValue6String+0x1e0>
        buf = String::format("%f", altitude);
 8080c7c:	9808      	ldr	r0, [sp, #32]
 8080c7e:	e7de      	b.n	8080c3e <_Z9postValue6String+0x19e>
 8080c80:	4938      	ldr	r1, [pc, #224]	; (8080d64 <_Z9postValue6String+0x2c4>)
 8080c82:	4628      	mov	r0, r5
 8080c84:	f004 f861 	bl	8084d4a <_ZNK6String6equalsEPKc>
    } else if (cmd == "speed"){
 8080c88:	b108      	cbz	r0, 8080c8e <_Z9postValue6String+0x1ee>
        buf = String::format("%f", speed);
 8080c8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8080c8c:	e7d7      	b.n	8080c3e <_Z9postValue6String+0x19e>
 8080c8e:	4936      	ldr	r1, [pc, #216]	; (8080d68 <_Z9postValue6String+0x2c8>)
 8080c90:	4628      	mov	r0, r5
 8080c92:	f004 f85a 	bl	8084d4a <_ZNK6String6equalsEPKc>
 8080c96:	46c2      	mov	sl, r8
 8080c98:	46b9      	mov	r9, r7
    } else if (cmd == "fixquality"){
 8080c9a:	b108      	cbz	r0, 8080ca0 <_Z9postValue6String+0x200>
        buf = String::format("%d", fixquality);
 8080c9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8080c9e:	e005      	b.n	8080cac <_Z9postValue6String+0x20c>
 8080ca0:	4932      	ldr	r1, [pc, #200]	; (8080d6c <_Z9postValue6String+0x2cc>)
 8080ca2:	4628      	mov	r0, r5
 8080ca4:	f004 f851 	bl	8084d4a <_ZNK6String6equalsEPKc>
    } else if (cmd == "satellites"){
 8080ca8:	b110      	cbz	r0, 8080cb0 <_Z9postValue6String+0x210>
        buf = String::format("%d", satellites);
 8080caa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8080cac:	491f      	ldr	r1, [pc, #124]	; (8080d2c <_Z9postValue6String+0x28c>)
 8080cae:	e00d      	b.n	8080ccc <_Z9postValue6String+0x22c>
 8080cb0:	492f      	ldr	r1, [pc, #188]	; (8080d70 <_Z9postValue6String+0x2d0>)
 8080cb2:	4628      	mov	r0, r5
 8080cb4:	f004 f849 	bl	8084d4a <_ZNK6String6equalsEPKc>
    } else if (cmd == "horzAcc"){
 8080cb8:	b108      	cbz	r0, 8080cbe <_Z9postValue6String+0x21e>
        buf = String::format("%lu", horzAcc);
 8080cba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8080cbc:	e005      	b.n	8080cca <_Z9postValue6String+0x22a>
 8080cbe:	492d      	ldr	r1, [pc, #180]	; (8080d74 <_Z9postValue6String+0x2d4>)
 8080cc0:	4628      	mov	r0, r5
 8080cc2:	f004 f842 	bl	8084d4a <_ZNK6String6equalsEPKc>
    } else if (cmd == "vertAcc"){
 8080cc6:	b150      	cbz	r0, 8080cde <_Z9postValue6String+0x23e>
        buf = String::format("%lu", vertAcc);
 8080cc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8080cca:	492b      	ldr	r1, [pc, #172]	; (8080d78 <_Z9postValue6String+0x2d8>)
 8080ccc:	4638      	mov	r0, r7
 8080cce:	f004 f8b7 	bl	8084e40 <_ZN6String6formatEPKcz>
 8080cd2:	4639      	mov	r1, r7
 8080cd4:	4640      	mov	r0, r8
 8080cd6:	f003 ffea 	bl	8084cae <_ZN6StringaSEOS_>
 8080cda:	4638      	mov	r0, r7
 8080cdc:	e763      	b.n	8080ba6 <_Z9postValue6String+0x106>
 8080cde:	4927      	ldr	r1, [pc, #156]	; (8080d7c <_Z9postValue6String+0x2dc>)
 8080ce0:	4628      	mov	r0, r5
 8080ce2:	f004 f832 	bl	8084d4a <_ZNK6String6equalsEPKc>
    } else if (cmd == "velN"){
 8080ce6:	b108      	cbz	r0, 8080cec <_Z9postValue6String+0x24c>
        buf = String::format("%ld", velN);
 8080ce8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8080cea:	e005      	b.n	8080cf8 <_Z9postValue6String+0x258>
 8080cec:	4924      	ldr	r1, [pc, #144]	; (8080d80 <_Z9postValue6String+0x2e0>)
 8080cee:	4628      	mov	r0, r5
 8080cf0:	f004 f82b 	bl	8084d4a <_ZNK6String6equalsEPKc>
    } else if (cmd == "velE"){
 8080cf4:	b110      	cbz	r0, 8080cfc <_Z9postValue6String+0x25c>
        buf = String::format("%ld", velE);
 8080cf6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8080cf8:	4922      	ldr	r1, [pc, #136]	; (8080d84 <_Z9postValue6String+0x2e4>)
 8080cfa:	e057      	b.n	8080dac <_Z9postValue6String+0x30c>
 8080cfc:	4922      	ldr	r1, [pc, #136]	; (8080d88 <_Z9postValue6String+0x2e8>)
 8080cfe:	4628      	mov	r0, r5
 8080d00:	f004 f823 	bl	8084d4a <_ZNK6String6equalsEPKc>
    } else if (cmd == "velD"){
 8080d04:	b108      	cbz	r0, 8080d0a <_Z9postValue6String+0x26a>
        buf = String::format("%ld", velD);
 8080d06:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8080d08:	e7f6      	b.n	8080cf8 <_Z9postValue6String+0x258>
 8080d0a:	4920      	ldr	r1, [pc, #128]	; (8080d8c <_Z9postValue6String+0x2ec>)
 8080d0c:	4628      	mov	r0, r5
 8080d0e:	f004 f81c 	bl	8084d4a <_ZNK6String6equalsEPKc>
    } else if (cmd == "gSpeed"){
 8080d12:	2800      	cmp	r0, #0
 8080d14:	d03c      	beq.n	8080d90 <_Z9postValue6String+0x2f0>
        buf = String::format("%lu", gSpeed);
 8080d16:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8080d18:	e047      	b.n	8080daa <_Z9postValue6String+0x30a>
 8080d1a:	bf00      	nop
 8080d1c:	0808acc4 	.word	0x0808acc4
 8080d20:	2000025d 	.word	0x2000025d
 8080d24:	0808a8b7 	.word	0x0808a8b7
 8080d28:	0808a8c4 	.word	0x0808a8c4
 8080d2c:	0808b70b 	.word	0x0808b70b
 8080d30:	0808a8c9 	.word	0x0808a8c9
 8080d34:	0808a8e0 	.word	0x0808a8e0
 8080d38:	0808a8d0 	.word	0x0808a8d0
 8080d3c:	0808b809 	.word	0x0808b809
 8080d40:	0808a8d6 	.word	0x0808a8d6
 8080d44:	0808a8db 	.word	0x0808a8db
 8080d48:	0808a8e8 	.word	0x0808a8e8
 8080d4c:	0808ae5f 	.word	0x0808ae5f
 8080d50:	0808a8f1 	.word	0x0808a8f1
 8080d54:	0808a8fb 	.word	0x0808a8fb
 8080d58:	0808a90b 	.word	0x0808a90b
 8080d5c:	0808a91c 	.word	0x0808a91c
 8080d60:	0808a928 	.word	0x0808a928
 8080d64:	0808a931 	.word	0x0808a931
 8080d68:	0808a937 	.word	0x0808a937
 8080d6c:	0808a942 	.word	0x0808a942
 8080d70:	0808a94d 	.word	0x0808a94d
 8080d74:	0808a959 	.word	0x0808a959
 8080d78:	0808a955 	.word	0x0808a955
 8080d7c:	0808a961 	.word	0x0808a961
 8080d80:	0808a96a 	.word	0x0808a96a
 8080d84:	0808a966 	.word	0x0808a966
 8080d88:	0808a96f 	.word	0x0808a96f
 8080d8c:	0808a974 	.word	0x0808a974
 8080d90:	491e      	ldr	r1, [pc, #120]	; (8080e0c <_Z9postValue6String+0x36c>)
 8080d92:	4628      	mov	r0, r5
 8080d94:	f003 ffd9 	bl	8084d4a <_ZNK6String6equalsEPKc>
    } else if (cmd == "odoTrip"){
 8080d98:	b108      	cbz	r0, 8080d9e <_Z9postValue6String+0x2fe>
        buf = String::format("%lu", odoTrip);
 8080d9a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8080d9c:	e005      	b.n	8080daa <_Z9postValue6String+0x30a>
 8080d9e:	491c      	ldr	r1, [pc, #112]	; (8080e10 <_Z9postValue6String+0x370>)
 8080da0:	4628      	mov	r0, r5
 8080da2:	f003 ffd2 	bl	8084d4a <_ZNK6String6equalsEPKc>
    } else if (cmd == "odoTotal"){
 8080da6:	b150      	cbz	r0, 8080dbe <_Z9postValue6String+0x31e>
        buf = String::format("%lu", odoTotal);
 8080da8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8080daa:	491a      	ldr	r1, [pc, #104]	; (8080e14 <_Z9postValue6String+0x374>)
 8080dac:	4648      	mov	r0, r9
 8080dae:	f004 f847 	bl	8084e40 <_ZN6String6formatEPKcz>
 8080db2:	4649      	mov	r1, r9
 8080db4:	4650      	mov	r0, sl
 8080db6:	f003 ff7a 	bl	8084cae <_ZN6StringaSEOS_>
 8080dba:	4648      	mov	r0, r9
 8080dbc:	e6f3      	b.n	8080ba6 <_Z9postValue6String+0x106>
    } else {
        buf = "Don't know that one. Check spelling.";
 8080dbe:	4916      	ldr	r1, [pc, #88]	; (8080e18 <_Z9postValue6String+0x378>)
 8080dc0:	4640      	mov	r0, r8
 8080dc2:	f003 ff7c 	bl	8084cbe <_ZN6StringaSEPKc>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8080dc6:	4629      	mov	r1, r5
 8080dc8:	4620      	mov	r0, r4
 8080dca:	f003 ff65 	bl	8084c98 <_ZN6StringC1ERKS_>
    }
    Particle.publish("LJCMDVAL", cmd + ": " + buf, 60, PRIVATE);
 8080dce:	4913      	ldr	r1, [pc, #76]	; (8080e1c <_Z9postValue6String+0x37c>)
 8080dd0:	4620      	mov	r0, r4
 8080dd2:	f003 ffa8 	bl	8084d26 <_ZplRK15StringSumHelperPKc>
 8080dd6:	4631      	mov	r1, r6
 8080dd8:	f003 ff99 	bl	8084d0e <_ZplRK15StringSumHelperRK6String>
 8080ddc:	4b10      	ldr	r3, [pc, #64]	; (8080e20 <_Z9postValue6String+0x380>)
 8080dde:	6802      	ldr	r2, [r0, #0]
 8080de0:	781b      	ldrb	r3, [r3, #0]
 8080de2:	4910      	ldr	r1, [pc, #64]	; (8080e24 <_Z9postValue6String+0x384>)
 8080de4:	f88d 3000 	strb.w	r3, [sp]
 8080de8:	a816      	add	r0, sp, #88	; 0x58
 8080dea:	233c      	movs	r3, #60	; 0x3c
 8080dec:	f005 fd86 	bl	80868fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8080df0:	a817      	add	r0, sp, #92	; 0x5c
 8080df2:	f7ff fab1 	bl	8080358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8080df6:	4620      	mov	r0, r4
 8080df8:	f003 fec8 	bl	8084b8c <_ZN6StringD1Ev>
// Type the name of the value you want to see into the console function
// argument and it will be published.
// See showAll() above for names of values and units.
int postValue(String cmd)
{
    String buf; // for publishing values
 8080dfc:	4630      	mov	r0, r6
 8080dfe:	f003 fec5 	bl	8084b8c <_ZN6StringD1Ev>
    }
    Particle.publish("LJCMDVAL", cmd + ": " + buf, 60, PRIVATE);


    return 1;
}
 8080e02:	2001      	movs	r0, #1
 8080e04:	b021      	add	sp, #132	; 0x84
 8080e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8080e0a:	bf00      	nop
 8080e0c:	0808a97b 	.word	0x0808a97b
 8080e10:	0808a983 	.word	0x0808a983
 8080e14:	0808a955 	.word	0x0808a955
 8080e18:	0808a98c 	.word	0x0808a98c
 8080e1c:	0808b2ad 	.word	0x0808b2ad
 8080e20:	2000025c 	.word	0x2000025c
 8080e24:	0808a9b1 	.word	0x0808a9b1

08080e28 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 8080e28:	b570      	push	{r4, r5, r6, lr}
 8080e2a:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
 8080e2c:	6804      	ldr	r4, [r0, #0]
 8080e2e:	6843      	ldr	r3, [r0, #4]
 8080e30:	2614      	movs	r6, #20
 8080e32:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
 8080e36:	42a6      	cmp	r6, r4
 8080e38:	d004      	beq.n	8080e44 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
    static int nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found);
};

} // namespace spark::detail

class LogCategoryFilter {
 8080e3a:	4620      	mov	r0, r4
 8080e3c:	f003 fea6 	bl	8084b8c <_ZN6StringD1Ev>
 8080e40:	3414      	adds	r4, #20
 8080e42:	e7f8      	b.n	8080e36 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 8080e44:	6828      	ldr	r0, [r5, #0]
 8080e46:	f003 fc7b 	bl	8084740 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
 8080e4a:	4628      	mov	r0, r5
 8080e4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08080e50 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
 8080e50:	4602      	mov	r2, r0
 8080e52:	4801      	ldr	r0, [pc, #4]	; (8080e58 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
 8080e54:	f005 bc42 	b.w	80866dc <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 8080e58:	0808666d 	.word	0x0808666d

08080e5c <_ZN10CloudClass8variableIA11_cIRlEEEbRKT_DpOT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 8080e5c:	2300      	movs	r3, #0
 8080e5e:	2202      	movs	r2, #2
 8080e60:	f003 bc0e 	b.w	8084680 <spark_variable>

08080e64 <setup>:
Timer timer(50, callGPS);

//
//
//
void setup() {
 8080e64:	b510      	push	{r4, lr}
 8080e66:	b086      	sub	sp, #24
	//
	Serial.begin(9600);
 8080e68:	f005 ff80 	bl	8086d6c <_Z16_fetch_usbserialv>
 8080e6c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8080e70:	f005 ff6c 	bl	8086d4c <_ZN9USBSerial5beginEl>

  interrupts(); // attempt to get DHT22 working on versions 2.00 and greater
 8080e74:	f005 ffd9 	bl	8086e2a <_Z10interruptsv>
  
	// Wait to allow particle serial monitor to get connected
  // This lets you see the version info from the ublox receiver
  delay(10000);
 8080e78:	f242 7010 	movw	r0, #10000	; 0x2710
 8080e7c:	f005 fa4c 	bl	8086318 <delay>

  // Set up power monitoring routines.
  pc.setup();
 8080e80:	4867      	ldr	r0, [pc, #412]	; (8081020 <setup+0x1bc>)
 8080e82:	f001 fcf3 	bl	808286c <_ZN10PowerCheck5setupEv>
  // Set up temperature and humidity sensor routines
  dht.begin();
 8080e86:	4867      	ldr	r0, [pc, #412]	; (8081024 <setup+0x1c0>)
 8080e88:	f001 febf 	bl	8082c0a <_ZN3DHT5beginEv>
  // Sets up all the necessary AssetTracker bits
  t.begin();
 8080e8c:	4866      	ldr	r0, [pc, #408]	; (8081028 <setup+0x1c4>)
 8080e8e:	f001 fd21 	bl	80828d4 <_ZN13AssetTracker25beginEv>
  // Enable the GPS module. Defaults to off to save power.
  // Takes 1.5s or so because of delays.
  t.gpsOn();
 8080e92:	4865      	ldr	r0, [pc, #404]	; (8081028 <setup+0x1c4>)
 8080e94:	f001 fde2 	bl	8082a5c <_ZN13AssetTracker25gpsOnEv>

  SetGPSAntenna("external"); // set up for external antenna
 8080e98:	4964      	ldr	r1, [pc, #400]	; (808102c <setup+0x1c8>)
 8080e9a:	a802      	add	r0, sp, #8
 8080e9c:	f003 febd 	bl	8084c1a <_ZN6StringC1EPK19__FlashStringHelper>
 8080ea0:	a802      	add	r0, sp, #8
 8080ea2:	f7ff f9c3 	bl	808022c <_Z13SetGPSAntenna6String>
 8080ea6:	a802      	add	r0, sp, #8
 8080ea8:	f003 fe70 	bl	8084b8c <_ZN6StringD1Ev>
	// maybe 10 - 20 minutes so if there is a problem like SIM paused or a network or cloud failure, the
	// Electron won't continuously try and fail to connect, depleting the battery.
	// connectionCheck.withFailureSleepSec(15 * 60);

	// We store connection events in retained memory. Do this early because things like batteryCheck will generate events.
	connectionEvents.setup();
 8080eac:	4860      	ldr	r0, [pc, #384]	; (8081030 <setup+0x1cc>)
 8080eae:	f001 fc3d 	bl	808272c <_ZN16ConnectionEvents5setupEv>

	// Check if there's sufficient battery power. If not, go to sleep immediately, before powering up the modem.
	batteryCheck.setup();
 8080eb2:	4860      	ldr	r0, [pc, #384]	; (8081034 <setup+0x1d0>)
 8080eb4:	f000 fd5a 	bl	808196c <_ZN12BatteryCheck5setupEv>

	// Set up the other modules
	sessionCheck.setup();
 8080eb8:	485f      	ldr	r0, [pc, #380]	; (8081038 <setup+0x1d4>)
 8080eba:	f001 fa53 	bl	8082364 <_ZN12SessionCheck5setupEv>
	connectionCheck.setup();
 8080ebe:	485f      	ldr	r0, [pc, #380]	; (808103c <setup+0x1d8>)
 8080ec0:	f000 ffcc 	bl	8081e5c <_ZN15ConnectionCheck5setupEv>
	tester.setup();
 8080ec4:	485e      	ldr	r0, [pc, #376]	; (8081040 <setup+0x1dc>)
 8080ec6:	f000 fde7 	bl	8081a98 <_ZN6Tester5setupEv>

	// These functions are useful for remote diagnostics. Read more below.
  Particle.function("tMask", transmitMode);
 8080eca:	495e      	ldr	r1, [pc, #376]	; (8081044 <setup+0x1e0>)
 8080ecc:	485e      	ldr	r0, [pc, #376]	; (8081048 <setup+0x1e4>)
 8080ece:	f7ff ffbf 	bl	8080e50 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 8080ed2:	4b5e      	ldr	r3, [pc, #376]	; (808104c <setup+0x1e8>)
    static bool _function(const char *funcKey, user_std_function_int_str_t func, void* reserved=NULL)
    {
        bool success = false;
        if (func) // if the call-wrapper has wrapped a callable object
        {
            auto wrapper = new user_std_function_int_str_t(func);
 8080ed4:	2010      	movs	r0, #16
 8080ed6:	9302      	str	r3, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8080ed8:	4b5d      	ldr	r3, [pc, #372]	; (8081050 <setup+0x1ec>)
 8080eda:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 8080edc:	4b5d      	ldr	r3, [pc, #372]	; (8081054 <setup+0x1f0>)
 8080ede:	9304      	str	r3, [sp, #16]
 8080ee0:	f7ff f8dd 	bl	808009e <_Znwj>
 8080ee4:	4604      	mov	r4, r0
 8080ee6:	b178      	cbz	r0, 8080f08 <setup+0xa4>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8080ee8:	2300      	movs	r3, #0
 8080eea:	6083      	str	r3, [r0, #8]
 8080eec:	9b04      	ldr	r3, [sp, #16]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8080eee:	b133      	cbz	r3, 8080efe <setup+0x9a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8080ef0:	2202      	movs	r2, #2
 8080ef2:	a902      	add	r1, sp, #8
 8080ef4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8080ef6:	9b05      	ldr	r3, [sp, #20]
 8080ef8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8080efa:	9b04      	ldr	r3, [sp, #16]
 8080efc:	60a3      	str	r3, [r4, #8]
            if (wrapper) {
                success = register_function(call_std_user_function, wrapper, funcKey);
 8080efe:	4a56      	ldr	r2, [pc, #344]	; (8081058 <setup+0x1f4>)
 8080f00:	4621      	mov	r1, r4
 8080f02:	4856      	ldr	r0, [pc, #344]	; (808105c <setup+0x1f8>)
 8080f04:	f005 fbea 	bl	80866dc <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8080f08:	a802      	add	r0, sp, #8
 8080f0a:	f7ff f9df 	bl	80802cc <_ZNSt14_Function_baseD1Ev>
  Particle.function("setgpsant", SetGPSAntenna);
  Particle.function("pubVal", pubValue);
 8080f0e:	4954      	ldr	r1, [pc, #336]	; (8081060 <setup+0x1fc>)
 8080f10:	4854      	ldr	r0, [pc, #336]	; (8081064 <setup+0x200>)
 8080f12:	f7ff ff9d 	bl	8080e50 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("setACCThr", accelThresholder);
 8080f16:	4954      	ldr	r1, [pc, #336]	; (8081068 <setup+0x204>)
 8080f18:	4854      	ldr	r0, [pc, #336]	; (808106c <setup+0x208>)
 8080f1a:	f7ff ff99 	bl	8080e50 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("setGPSDly", setDelayGPSMinutes);
 8080f1e:	4954      	ldr	r1, [pc, #336]	; (8081070 <setup+0x20c>)
 8080f20:	4854      	ldr	r0, [pc, #336]	; (8081074 <setup+0x210>)
 8080f22:	f7ff ff95 	bl	8080e50 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("setACCDly", setDelayACCMinutes);
 8080f26:	4954      	ldr	r1, [pc, #336]	; (8081078 <setup+0x214>)
 8080f28:	4854      	ldr	r0, [pc, #336]	; (808107c <setup+0x218>)
 8080f2a:	f7ff ff91 	bl	8080e50 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("setDHTDly", setDelayDHTMinutes);
 8080f2e:	4954      	ldr	r1, [pc, #336]	; (8081080 <setup+0x21c>)
 8080f30:	4854      	ldr	r0, [pc, #336]	; (8081084 <setup+0x220>)
 8080f32:	f7ff ff8d 	bl	8080e50 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("gpsRate", gpsRate);
 8080f36:	4954      	ldr	r1, [pc, #336]	; (8081088 <setup+0x224>)
 8080f38:	4854      	ldr	r0, [pc, #336]	; (808108c <setup+0x228>)
 8080f3a:	f7ff ff89 	bl	8080e50 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("resetODO", resetODO);
 8080f3e:	4954      	ldr	r1, [pc, #336]	; (8081090 <setup+0x22c>)
 8080f40:	4854      	ldr	r0, [pc, #336]	; (8081094 <setup+0x230>)
 8080f42:	f7ff ff85 	bl	8080e50 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("showAll", showAll);
 8080f46:	4954      	ldr	r1, [pc, #336]	; (8081098 <setup+0x234>)
 8080f48:	4854      	ldr	r0, [pc, #336]	; (808109c <setup+0x238>)
 8080f4a:	f7ff ff81 	bl	8080e50 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("postValue", postValue);
 8080f4e:	4954      	ldr	r1, [pc, #336]	; (80810a0 <setup+0x23c>)
 8080f50:	4854      	ldr	r0, [pc, #336]	; (80810a4 <setup+0x240>)
 8080f52:	f7ff ff7d 	bl	8080e50 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  // Register all the Tinker functions
  Particle.function("digitalread", tinkerDigitalRead);
 8080f56:	4954      	ldr	r1, [pc, #336]	; (80810a8 <setup+0x244>)
 8080f58:	4854      	ldr	r0, [pc, #336]	; (80810ac <setup+0x248>)
 8080f5a:	f7ff ff79 	bl	8080e50 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("digitalwrite", tinkerDigitalWrite);
 8080f5e:	4954      	ldr	r1, [pc, #336]	; (80810b0 <setup+0x24c>)
 8080f60:	4854      	ldr	r0, [pc, #336]	; (80810b4 <setup+0x250>)
 8080f62:	f7ff ff75 	bl	8080e50 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("analogread", tinkerAnalogRead);
 8080f66:	4954      	ldr	r1, [pc, #336]	; (80810b8 <setup+0x254>)
 8080f68:	4854      	ldr	r0, [pc, #336]	; (80810bc <setup+0x258>)
 8080f6a:	f7ff ff71 	bl	8080e50 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("analogwrite", tinkerAnalogWrite);
 8080f6e:	4954      	ldr	r1, [pc, #336]	; (80810c0 <setup+0x25c>)
 8080f70:	4854      	ldr	r0, [pc, #336]	; (80810c4 <setup+0x260>)
 8080f72:	f7ff ff6d 	bl	8080e50 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 8080f76:	2300      	movs	r3, #0
 8080f78:	2201      	movs	r2, #1
 8080f7a:	4953      	ldr	r1, [pc, #332]	; (80810c8 <setup+0x264>)
 8080f7c:	4853      	ldr	r0, [pc, #332]	; (80810cc <setup+0x268>)
 8080f7e:	f003 fb7f 	bl	8084680 <spark_variable>
  // These variables are useful for remote diagnostics. Read more below.
  Particle.variable("lastPower", lastPower);
  Particle.variable("accelThresh", accelThreshold);
 8080f82:	4953      	ldr	r1, [pc, #332]	; (80810d0 <setup+0x26c>)
 8080f84:	4853      	ldr	r0, [pc, #332]	; (80810d4 <setup+0x270>)
 8080f86:	f7ff ff69 	bl	8080e5c <_ZN10CloudClass8variableIA11_cIRlEEEbRKT_DpOT0_>
  Particle.variable("transmitMask", transmittingData);
 8080f8a:	4953      	ldr	r1, [pc, #332]	; (80810d8 <setup+0x274>)
 8080f8c:	4853      	ldr	r0, [pc, #332]	; (80810dc <setup+0x278>)
 8080f8e:	f7ff ff65 	bl	8080e5c <_ZN10CloudClass8variableIA11_cIRlEEEbRKT_DpOT0_>
  Particle.variable("lastGPSPub", lastGPSPublish);
 8080f92:	4953      	ldr	r1, [pc, #332]	; (80810e0 <setup+0x27c>)
 8080f94:	4853      	ldr	r0, [pc, #332]	; (80810e4 <setup+0x280>)
 8080f96:	f7ff ff61 	bl	8080e5c <_ZN10CloudClass8variableIA11_cIRlEEEbRKT_DpOT0_>
  Particle.variable("lastACCPub", lastACCPublish);
 8080f9a:	4953      	ldr	r1, [pc, #332]	; (80810e8 <setup+0x284>)
 8080f9c:	4853      	ldr	r0, [pc, #332]	; (80810ec <setup+0x288>)
 8080f9e:	f7ff ff5d 	bl	8080e5c <_ZN10CloudClass8variableIA11_cIRlEEEbRKT_DpOT0_>
  Particle.variable("lastDHTPub", lastDHTPublish);
 8080fa2:	4953      	ldr	r1, [pc, #332]	; (80810f0 <setup+0x28c>)
 8080fa4:	4853      	ldr	r0, [pc, #332]	; (80810f4 <setup+0x290>)
 8080fa6:	f7ff ff59 	bl	8080e5c <_ZN10CloudClass8variableIA11_cIRlEEEbRKT_DpOT0_>
  Particle.variable("delayGPSMin", delayGPSMinutes);
 8080faa:	4953      	ldr	r1, [pc, #332]	; (80810f8 <setup+0x294>)
 8080fac:	4853      	ldr	r0, [pc, #332]	; (80810fc <setup+0x298>)
 8080fae:	f7ff ff55 	bl	8080e5c <_ZN10CloudClass8variableIA11_cIRlEEEbRKT_DpOT0_>
  Particle.variable("delayACCMin", delayACCMinutes);
 8080fb2:	4953      	ldr	r1, [pc, #332]	; (8081100 <setup+0x29c>)
 8080fb4:	4853      	ldr	r0, [pc, #332]	; (8081104 <setup+0x2a0>)
 8080fb6:	f7ff ff51 	bl	8080e5c <_ZN10CloudClass8variableIA11_cIRlEEEbRKT_DpOT0_>
  Particle.variable("delayDHTMin", delayDHTMinutes);
 8080fba:	4953      	ldr	r1, [pc, #332]	; (8081108 <setup+0x2a4>)
 8080fbc:	4853      	ldr	r0, [pc, #332]	; (808110c <setup+0x2a8>)
 8080fbe:	f7ff ff4d 	bl	8080e5c <_ZN10CloudClass8variableIA11_cIRlEEEbRKT_DpOT0_>
 8080fc2:	2300      	movs	r3, #0
 8080fc4:	2201      	movs	r2, #1
 8080fc6:	4952      	ldr	r1, [pc, #328]	; (8081110 <setup+0x2ac>)
 8080fc8:	4852      	ldr	r0, [pc, #328]	; (8081114 <setup+0x2b0>)
 8080fca:	f003 fb59 	bl	8084680 <spark_variable>
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
 8080fce:	4c52      	ldr	r4, [pc, #328]	; (8081118 <setup+0x2b4>)
    static bool on(system_event_t events, void(*handler)(system_event_t, int,void*)) {
        return !system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), nullptr);
    }

    static bool on(system_event_t events, void(*handler)(system_event_t, int)) {
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
 8080fd0:	2300      	movs	r3, #0
 8080fd2:	4a52      	ldr	r2, [pc, #328]	; (808111c <setup+0x2b8>)
 8080fd4:	2100      	movs	r1, #0
 8080fd6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8080fda:	f003 fabb 	bl	8084554 <system_subscribe_event>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 8080fde:	f003 fb67 	bl	80846b0 <spark_cloud_flag_connect>
 8080fe2:	2200      	movs	r2, #0
 8080fe4:	4611      	mov	r1, r2
 8080fe6:	4620      	mov	r0, r4
 8080fe8:	f7ff f979 	bl	80802de <_ZN5Timer5_stopEjb>
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
 8080fec:	68a0      	ldr	r0, [r4, #8]
 8080fee:	b140      	cbz	r0, 8081002 <setup+0x19e>
 8080ff0:	2300      	movs	r3, #0
 8080ff2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8080ff6:	e88d 000c 	stmia.w	sp, {r2, r3}
 8080ffa:	4619      	mov	r1, r3
 8080ffc:	461a      	mov	r2, r3
 8080ffe:	f003 f929 	bl	8084254 <os_timer_change>
	Particle.connect();

	// Start reading from the gps
	timer.start();

	delay(2000); // DHT 22 minumum sampling period
 8081002:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8081006:	f005 f987 	bl	8086318 <delay>

	if ((transmittingData & SERIALSETUPDATA) == SERIALSETUPDATA)
 808100a:	4b33      	ldr	r3, [pc, #204]	; (80810d8 <setup+0x274>)
 808100c:	681b      	ldr	r3, [r3, #0]
 808100e:	015b      	lsls	r3, r3, #5
 8081010:	d504      	bpl.n	808101c <setup+0x1b8>
		Serial.println("End of setup() function");
 8081012:	f005 feab 	bl	8086d6c <_Z16_fetch_usbserialv>
 8081016:	4942      	ldr	r1, [pc, #264]	; (8081120 <setup+0x2bc>)
 8081018:	f003 ff73 	bl	8084f02 <_ZN5Print7printlnEPKc>
}
 808101c:	b006      	add	sp, #24
 808101e:	bd10      	pop	{r4, pc}
 8081020:	20000230 	.word	0x20000230
 8081024:	20000284 	.word	0x20000284
 8081028:	2000025d 	.word	0x2000025d
 808102c:	0808a789 	.word	0x0808a789
 8081030:	20000298 	.word	0x20000298
 8081034:	2000020c 	.word	0x2000020c
 8081038:	20000198 	.word	0x20000198
 808103c:	2000023c 	.word	0x2000023c
 8081040:	200001d0 	.word	0x200001d0
 8081044:	080801c1 	.word	0x080801c1
 8081048:	0808aa59 	.word	0x0808aa59
 808104c:	0808022d 	.word	0x0808022d
 8081050:	08080119 	.word	0x08080119
 8081054:	080800f3 	.word	0x080800f3
 8081058:	0808aac8 	.word	0x0808aac8
 808105c:	08086699 	.word	0x08086699
 8081060:	080805f9 	.word	0x080805f9
 8081064:	0808a9ba 	.word	0x0808a9ba
 8081068:	08080171 	.word	0x08080171
 808106c:	0808a9c1 	.word	0x0808a9c1
 8081070:	08080185 	.word	0x08080185
 8081074:	0808a9cb 	.word	0x0808a9cb
 8081078:	08080199 	.word	0x08080199
 808107c:	0808a9d5 	.word	0x0808a9d5
 8081080:	080801ad 	.word	0x080801ad
 8081084:	0808a9df 	.word	0x0808a9df
 8081088:	08081519 	.word	0x08081519
 808108c:	0808a9e9 	.word	0x0808a9e9
 8081090:	080801d5 	.word	0x080801d5
 8081094:	0808a9f1 	.word	0x0808a9f1
 8081098:	08081189 	.word	0x08081189
 808109c:	0808a9fa 	.word	0x0808a9fa
 80810a0:	08080aa1 	.word	0x08080aa1
 80810a4:	0808aa02 	.word	0x0808aa02
 80810a8:	08083d81 	.word	0x08083d81
 80810ac:	0808aa0c 	.word	0x0808aa0c
 80810b0:	08083df9 	.word	0x08083df9
 80810b4:	0808aa18 	.word	0x0808aa18
 80810b8:	08083ebd 	.word	0x08083ebd
 80810bc:	0808aa25 	.word	0x0808aa25
 80810c0:	08083f39 	.word	0x08083f39
 80810c4:	0808aa30 	.word	0x0808aa30
 80810c8:	20000010 	.word	0x20000010
 80810cc:	0808aa3c 	.word	0x0808aa3c
 80810d0:	20000000 	.word	0x20000000
 80810d4:	0808aa46 	.word	0x0808aa46
 80810d8:	20000008 	.word	0x20000008
 80810dc:	0808aa52 	.word	0x0808aa52
 80810e0:	200001cc 	.word	0x200001cc
 80810e4:	0808aa5f 	.word	0x0808aa5f
 80810e8:	200001ec 	.word	0x200001ec
 80810ec:	0808aa6a 	.word	0x0808aa6a
 80810f0:	2000022c 	.word	0x2000022c
 80810f4:	0808aa75 	.word	0x0808aa75
 80810f8:	2000000c 	.word	0x2000000c
 80810fc:	0808aa80 	.word	0x0808aa80
 8081100:	20000004 	.word	0x20000004
 8081104:	0808aa8c 	.word	0x0808aa8c
 8081108:	20000014 	.word	0x20000014
 808110c:	0808aa98 	.word	0x0808aa98
 8081110:	20000011 	.word	0x20000011
 8081114:	0808aaa4 	.word	0x0808aaa4
 8081118:	200001f0 	.word	0x200001f0
 808111c:	08080135 	.word	0x08080135
 8081120:	0808aab0 	.word	0x0808aab0

08081124 <_ZN5Print7printlnIhLi0EEEjT_i>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
 8081124:	b538      	push	{r3, r4, r5, lr}
 8081126:	4605      	mov	r5, r0

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
 8081128:	b91a      	cbnz	r2, 8081132 <_ZN5Print7printlnIhLi0EEEjT_i+0xe>
        return write(n);
 808112a:	6803      	ldr	r3, [r0, #0]
 808112c:	689b      	ldr	r3, [r3, #8]
 808112e:	4798      	blx	r3
 8081130:	e002      	b.n	8081138 <_ZN5Print7printlnIhLi0EEEjT_i+0x14>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 8081132:	b2d2      	uxtb	r2, r2
 8081134:	f003 feef 	bl	8084f16 <_ZN5Print11printNumberEmh>
 8081138:	4604      	mov	r4, r0
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
 808113a:	4628      	mov	r0, r5
 808113c:	f003 fed5 	bl	8084eea <_ZN5Print7printlnEv>
        return n;
    }
 8081140:	4420      	add	r0, r4
 8081142:	bd38      	pop	{r3, r4, r5, pc}

08081144 <_ZN5Print7printlnIlLi0EEEjT_i>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
 8081144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081146:	4606      	mov	r6, r0
 8081148:	460c      	mov	r4, r1

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
 808114a:	4617      	mov	r7, r2
 808114c:	b92a      	cbnz	r2, 808115a <_ZN5Print7printlnIlLi0EEEjT_i+0x16>
        return write(n);
 808114e:	6803      	ldr	r3, [r0, #0]
 8081150:	b2c9      	uxtb	r1, r1
 8081152:	689b      	ldr	r3, [r3, #8]
 8081154:	4798      	blx	r3
 8081156:	4605      	mov	r5, r0
 8081158:	e010      	b.n	808117c <_ZN5Print7printlnIlLi0EEEjT_i+0x38>
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
 808115a:	2900      	cmp	r1, #0
 808115c:	da07      	bge.n	808116e <_ZN5Print7printlnIlLi0EEEjT_i+0x2a>
 808115e:	2a0a      	cmp	r2, #10
 8081160:	d105      	bne.n	808116e <_ZN5Print7printlnIlLi0EEEjT_i+0x2a>
            t = print('-');
 8081162:	212d      	movs	r1, #45	; 0x2d
 8081164:	f003 febe 	bl	8084ee4 <_ZN5Print5printEc>
            val = -n;
 8081168:	4261      	negs	r1, r4
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
 808116a:	4605      	mov	r5, r0
 808116c:	e001      	b.n	8081172 <_ZN5Print7printlnIlLi0EEEjT_i+0x2e>
            val = -n;
        } else {
            val = n;
 808116e:	4621      	mov	r1, r4
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
 8081170:	2500      	movs	r5, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 8081172:	b2fa      	uxtb	r2, r7
 8081174:	4630      	mov	r0, r6
 8081176:	f003 fece 	bl	8084f16 <_ZN5Print11printNumberEmh>
 808117a:	4405      	add	r5, r0
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
 808117c:	4630      	mov	r0, r6
 808117e:	f003 feb4 	bl	8084eea <_ZN5Print7printlnEv>
        return n;
    }
 8081182:	4428      	add	r0, r5
 8081184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08081188 <_Z7showAll6String>:
// then call the postValue routine passing it the name of one of these
// vales.
// For details on all values see the ublox spec:
// https://www.u-blox.com/sites/default/files/products/documents/u-blox8-M8_ReceiverDescrProtSpec_(UBX-13003221)_Public.pdf
int showAll(String cmd)
{
 8081188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    bool initComplete = t.gpsInitComplete();
 808118c:	4cc8      	ldr	r4, [pc, #800]	; (80814b0 <_Z7showAll6String+0x328>)
// then call the postValue routine passing it the name of one of these
// vales.
// For details on all values see the ublox spec:
// https://www.u-blox.com/sites/default/files/products/documents/u-blox8-M8_ReceiverDescrProtSpec_(UBX-13003221)_Public.pdf
int showAll(String cmd)
{
 808118e:	b093      	sub	sp, #76	; 0x4c

    bool initComplete = t.gpsInitComplete();
 8081190:	4620      	mov	r0, r4
 8081192:	f001 fc9b 	bl	8082acc <_ZN13AssetTracker215gpsInitCompleteEv>
 8081196:	9011      	str	r0, [sp, #68]	; 0x44
    uint8_t hour = t.getHour(); // Time is UTC
 8081198:	4620      	mov	r0, r4
 808119a:	f001 fbfd 	bl	8082998 <_ZN13AssetTracker27getHourEv>
 808119e:	4683      	mov	fp, r0
    uint8_t minute = t.getMinute();
 80811a0:	4620      	mov	r0, r4
 80811a2:	f001 fbff 	bl	80829a4 <_ZN13AssetTracker29getMinuteEv>
 80811a6:	4682      	mov	sl, r0
    uint8_t seconds = t.getSeconds();
 80811a8:	4620      	mov	r0, r4
 80811aa:	f001 fc01 	bl	80829b0 <_ZN13AssetTracker210getSecondsEv>
 80811ae:	4681      	mov	r9, r0
    uint8_t month = t.getMonth();
 80811b0:	4620      	mov	r0, r4
 80811b2:	f001 fc0f 	bl	80829d4 <_ZN13AssetTracker28getMonthEv>
 80811b6:	4680      	mov	r8, r0
    uint8_t day = t.getDay();
 80811b8:	4620      	mov	r0, r4
 80811ba:	f001 fc11 	bl	80829e0 <_ZN13AssetTracker26getDayEv>
 80811be:	4607      	mov	r7, r0
    uint16_t year = t.getYear();
 80811c0:	4620      	mov	r0, r4
 80811c2:	f001 fc01 	bl	80829c8 <_ZN13AssetTracker27getYearEv>
 80811c6:	4606      	mov	r6, r0
    uint16_t milliseconds = t.getMilliseconds(); // Since last measurement
 80811c8:	4620      	mov	r0, r4
 80811ca:	f001 fbf7 	bl	80829bc <_ZN13AssetTracker215getMillisecondsEv>
 80811ce:	4605      	mov	r5, r0
    float latitude = t.readLat(); // degrees
 80811d0:	4620      	mov	r0, r4
 80811d2:	f001 fb91 	bl	80828f8 <_ZN13AssetTracker27readLatEv>
 80811d6:	9000      	str	r0, [sp, #0]
    float longitude = t.readLon(); // degrees
 80811d8:	4620      	mov	r0, r4
 80811da:	f001 fb93 	bl	8082904 <_ZN13AssetTracker27readLonEv>
 80811de:	9001      	str	r0, [sp, #4]
    float latitudeDegrees = t.readLatDeg(); // degrees
 80811e0:	4620      	mov	r0, r4
 80811e2:	f001 fb95 	bl	8082910 <_ZN13AssetTracker210readLatDegEv>
 80811e6:	9002      	str	r0, [sp, #8]
    float longitudeDegrees = t.readLonDeg(); // degrees
 80811e8:	4620      	mov	r0, r4
 80811ea:	f001 fb97 	bl	808291c <_ZN13AssetTracker210readLonDegEv>
 80811ee:	9003      	str	r0, [sp, #12]
    float geoidheight = t.getGeoIdHeight(); // Height above ellipsoid, mm
 80811f0:	4620      	mov	r0, r4
 80811f2:	f001 fc0d 	bl	8082a10 <_ZN13AssetTracker214getGeoIdHeightEv>
 80811f6:	9004      	str	r0, [sp, #16]
    float altitude = t.getAltitude(); // Height above mean sea level, mm
 80811f8:	4620      	mov	r0, r4
 80811fa:	f001 fc0f 	bl	8082a1c <_ZN13AssetTracker211getAltitudeEv>
 80811fe:	9005      	str	r0, [sp, #20]
    float speed = t.getSpeed();  // m/s
 8081200:	4620      	mov	r0, r4
 8081202:	f001 fbff 	bl	8082a04 <_ZN13AssetTracker28getSpeedEv>
 8081206:	9006      	str	r0, [sp, #24]
    uint8_t fixquality = t.getFixQuality(); // 0:no fix,1:dead rec,2:2d,3:3d,4:gnss+dead rec,5:time only
 8081208:	4620      	mov	r0, r4
 808120a:	f001 fbf5 	bl	80829f8 <_ZN13AssetTracker213getFixQualityEv>
 808120e:	900f      	str	r0, [sp, #60]	; 0x3c
    uint8_t satellites = t.getSatellites(); // how many
 8081210:	4620      	mov	r0, r4
 8081212:	f001 fbeb 	bl	80829ec <_ZN13AssetTracker213getSatellitesEv>
 8081216:	9010      	str	r0, [sp, #64]	; 0x40
    uint32_t horzAcc = t.getHaccuracy(); // estimate, mm
 8081218:	4620      	mov	r0, r4
 808121a:	f001 fb8d 	bl	8082938 <_ZN13AssetTracker212getHaccuracyEv>
 808121e:	9007      	str	r0, [sp, #28]
    uint32_t vertAcc = t.getVaccuracy(); // estimate, mm
 8081220:	4620      	mov	r0, r4
 8081222:	f001 fb8f 	bl	8082944 <_ZN13AssetTracker212getVaccuracyEv>
 8081226:	9008      	str	r0, [sp, #32]
    int32_t velN = t.getVelN(); // North velocity, mm/s
 8081228:	4620      	mov	r0, r4
 808122a:	f001 fb91 	bl	8082950 <_ZN13AssetTracker27getVelNEv>
 808122e:	9009      	str	r0, [sp, #36]	; 0x24
    int32_t velE = t.getVelE(); // East velocity, mm/s
 8081230:	4620      	mov	r0, r4
 8081232:	f001 fb93 	bl	808295c <_ZN13AssetTracker27getVelEEv>
 8081236:	900a      	str	r0, [sp, #40]	; 0x28
    int32_t velD = t.getVelD(); // Down velocity, mm/s
 8081238:	4620      	mov	r0, r4
 808123a:	f001 fb95 	bl	8082968 <_ZN13AssetTracker27getVelDEv>
 808123e:	900b      	str	r0, [sp, #44]	; 0x2c
    int32_t gSpeed = t.getGspeed(); // Ground speed, mm/s
 8081240:	4620      	mov	r0, r4
 8081242:	f001 fba3 	bl	808298c <_ZN13AssetTracker29getGspeedEv>
 8081246:	900c      	str	r0, [sp, #48]	; 0x30
    int32_t odoTrip = t.getOdoTrip(); // m
 8081248:	4620      	mov	r0, r4
 808124a:	f001 fb93 	bl	8082974 <_ZN13AssetTracker210getOdoTripEv>
 808124e:	900d      	str	r0, [sp, #52]	; 0x34
    int32_t odoTotal = t.getOdoTotal(); // m
 8081250:	4620      	mov	r0, r4
 8081252:	f001 fb95 	bl	8082980 <_ZN13AssetTracker211getOdoTotalEv>
 8081256:	900e      	str	r0, [sp, #56]	; 0x38



    Serial.print("initComplete: ");
 8081258:	f005 fd88 	bl	8086d6c <_Z16_fetch_usbserialv>
 808125c:	4995      	ldr	r1, [pc, #596]	; (80814b4 <_Z7showAll6String+0x32c>)
 808125e:	f003 fe3d 	bl	8084edc <_ZN5Print5printEPKc>
    Serial.println(initComplete);
 8081262:	f005 fd83 	bl	8086d6c <_Z16_fetch_usbserialv>
 8081266:	4604      	mov	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 8081268:	9b11      	ldr	r3, [sp, #68]	; 0x44
 808126a:	220a      	movs	r2, #10
 808126c:	4619      	mov	r1, r3
 808126e:	f003 fe52 	bl	8084f16 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
 8081272:	4620      	mov	r0, r4
 8081274:	f003 fe39 	bl	8084eea <_ZN5Print7printlnEv>
    Serial.print("hour: ");
 8081278:	f005 fd78 	bl	8086d6c <_Z16_fetch_usbserialv>
 808127c:	498e      	ldr	r1, [pc, #568]	; (80814b8 <_Z7showAll6String+0x330>)
 808127e:	f003 fe2d 	bl	8084edc <_ZN5Print5printEPKc>
    Serial.println(hour);
 8081282:	f005 fd73 	bl	8086d6c <_Z16_fetch_usbserialv>
 8081286:	220a      	movs	r2, #10
 8081288:	4659      	mov	r1, fp
 808128a:	f7ff ff4b 	bl	8081124 <_ZN5Print7printlnIhLi0EEEjT_i>
    Serial.print("minute: ");
 808128e:	f005 fd6d 	bl	8086d6c <_Z16_fetch_usbserialv>
 8081292:	498a      	ldr	r1, [pc, #552]	; (80814bc <_Z7showAll6String+0x334>)
 8081294:	f003 fe22 	bl	8084edc <_ZN5Print5printEPKc>
    Serial.println(minute);
 8081298:	f005 fd68 	bl	8086d6c <_Z16_fetch_usbserialv>
 808129c:	220a      	movs	r2, #10
 808129e:	4651      	mov	r1, sl
 80812a0:	f7ff ff40 	bl	8081124 <_ZN5Print7printlnIhLi0EEEjT_i>
    Serial.print("seconds: ");
 80812a4:	f005 fd62 	bl	8086d6c <_Z16_fetch_usbserialv>
 80812a8:	4985      	ldr	r1, [pc, #532]	; (80814c0 <_Z7showAll6String+0x338>)
 80812aa:	f003 fe17 	bl	8084edc <_ZN5Print5printEPKc>
    Serial.println(seconds);
 80812ae:	f005 fd5d 	bl	8086d6c <_Z16_fetch_usbserialv>
 80812b2:	220a      	movs	r2, #10
 80812b4:	4649      	mov	r1, r9
 80812b6:	f7ff ff35 	bl	8081124 <_ZN5Print7printlnIhLi0EEEjT_i>
    Serial.print("month: ");
 80812ba:	f005 fd57 	bl	8086d6c <_Z16_fetch_usbserialv>
 80812be:	4981      	ldr	r1, [pc, #516]	; (80814c4 <_Z7showAll6String+0x33c>)
 80812c0:	f003 fe0c 	bl	8084edc <_ZN5Print5printEPKc>
    Serial.println(month);
 80812c4:	f005 fd52 	bl	8086d6c <_Z16_fetch_usbserialv>
 80812c8:	220a      	movs	r2, #10
 80812ca:	4641      	mov	r1, r8
 80812cc:	f7ff ff2a 	bl	8081124 <_ZN5Print7printlnIhLi0EEEjT_i>
    Serial.print("day: ");
 80812d0:	f005 fd4c 	bl	8086d6c <_Z16_fetch_usbserialv>
 80812d4:	497c      	ldr	r1, [pc, #496]	; (80814c8 <_Z7showAll6String+0x340>)
 80812d6:	f003 fe01 	bl	8084edc <_ZN5Print5printEPKc>
    Serial.println(day);
 80812da:	f005 fd47 	bl	8086d6c <_Z16_fetch_usbserialv>
 80812de:	220a      	movs	r2, #10
 80812e0:	4639      	mov	r1, r7
 80812e2:	f7ff ff1f 	bl	8081124 <_ZN5Print7printlnIhLi0EEEjT_i>
    Serial.print("year: ");
 80812e6:	f005 fd41 	bl	8086d6c <_Z16_fetch_usbserialv>
 80812ea:	4978      	ldr	r1, [pc, #480]	; (80814cc <_Z7showAll6String+0x344>)
 80812ec:	f003 fdf6 	bl	8084edc <_ZN5Print5printEPKc>
    Serial.println(year);
 80812f0:	f005 fd3c 	bl	8086d6c <_Z16_fetch_usbserialv>
 80812f4:	4604      	mov	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80812f6:	220a      	movs	r2, #10
 80812f8:	4631      	mov	r1, r6
 80812fa:	f003 fe0c 	bl	8084f16 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
 80812fe:	4620      	mov	r0, r4
 8081300:	f003 fdf3 	bl	8084eea <_ZN5Print7printlnEv>
    Serial.print("milliseconds: ");
 8081304:	f005 fd32 	bl	8086d6c <_Z16_fetch_usbserialv>
 8081308:	4971      	ldr	r1, [pc, #452]	; (80814d0 <_Z7showAll6String+0x348>)
 808130a:	f003 fde7 	bl	8084edc <_ZN5Print5printEPKc>
    Serial.println(milliseconds);
 808130e:	f005 fd2d 	bl	8086d6c <_Z16_fetch_usbserialv>
 8081312:	4604      	mov	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 8081314:	220a      	movs	r2, #10
 8081316:	b2a9      	uxth	r1, r5
 8081318:	f003 fdfd 	bl	8084f16 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
 808131c:	4620      	mov	r0, r4
 808131e:	f003 fde4 	bl	8084eea <_ZN5Print7printlnEv>
    Serial.print("latitude: ");
 8081322:	f005 fd23 	bl	8086d6c <_Z16_fetch_usbserialv>
 8081326:	496b      	ldr	r1, [pc, #428]	; (80814d4 <_Z7showAll6String+0x34c>)
 8081328:	f003 fdd8 	bl	8084edc <_ZN5Print5printEPKc>
    Serial.println(latitude);
 808132c:	f005 fd1e 	bl	8086d6c <_Z16_fetch_usbserialv>
 8081330:	2202      	movs	r2, #2
 8081332:	9900      	ldr	r1, [sp, #0]
 8081334:	f003 fed6 	bl	80850e4 <_ZN5Print7printlnEfi>
    Serial.print("longitude: ");
 8081338:	f005 fd18 	bl	8086d6c <_Z16_fetch_usbserialv>
 808133c:	4966      	ldr	r1, [pc, #408]	; (80814d8 <_Z7showAll6String+0x350>)
 808133e:	f003 fdcd 	bl	8084edc <_ZN5Print5printEPKc>
    Serial.println(longitude);
 8081342:	f005 fd13 	bl	8086d6c <_Z16_fetch_usbserialv>
 8081346:	2202      	movs	r2, #2
 8081348:	9901      	ldr	r1, [sp, #4]
 808134a:	f003 fecb 	bl	80850e4 <_ZN5Print7printlnEfi>
    Serial.print("latitudeDegrees: ");
 808134e:	f005 fd0d 	bl	8086d6c <_Z16_fetch_usbserialv>
 8081352:	4962      	ldr	r1, [pc, #392]	; (80814dc <_Z7showAll6String+0x354>)
 8081354:	f003 fdc2 	bl	8084edc <_ZN5Print5printEPKc>
    Serial.println(latitudeDegrees);
 8081358:	f005 fd08 	bl	8086d6c <_Z16_fetch_usbserialv>
 808135c:	2202      	movs	r2, #2
 808135e:	9902      	ldr	r1, [sp, #8]
 8081360:	f003 fec0 	bl	80850e4 <_ZN5Print7printlnEfi>
    Serial.print("longitudeDegrees: ");
 8081364:	f005 fd02 	bl	8086d6c <_Z16_fetch_usbserialv>
 8081368:	495d      	ldr	r1, [pc, #372]	; (80814e0 <_Z7showAll6String+0x358>)
 808136a:	f003 fdb7 	bl	8084edc <_ZN5Print5printEPKc>
    Serial.println(longitudeDegrees);
 808136e:	f005 fcfd 	bl	8086d6c <_Z16_fetch_usbserialv>
 8081372:	2202      	movs	r2, #2
 8081374:	9903      	ldr	r1, [sp, #12]
 8081376:	f003 feb5 	bl	80850e4 <_ZN5Print7printlnEfi>
    Serial.print("geoidheight: ");
 808137a:	f005 fcf7 	bl	8086d6c <_Z16_fetch_usbserialv>
 808137e:	4959      	ldr	r1, [pc, #356]	; (80814e4 <_Z7showAll6String+0x35c>)
 8081380:	f003 fdac 	bl	8084edc <_ZN5Print5printEPKc>
    Serial.println(geoidheight);
 8081384:	f005 fcf2 	bl	8086d6c <_Z16_fetch_usbserialv>
 8081388:	2202      	movs	r2, #2
 808138a:	9904      	ldr	r1, [sp, #16]
 808138c:	f003 feaa 	bl	80850e4 <_ZN5Print7printlnEfi>
    Serial.print("altitude: ");
 8081390:	f005 fcec 	bl	8086d6c <_Z16_fetch_usbserialv>
 8081394:	4954      	ldr	r1, [pc, #336]	; (80814e8 <_Z7showAll6String+0x360>)
 8081396:	f003 fda1 	bl	8084edc <_ZN5Print5printEPKc>
    Serial.println(altitude);
 808139a:	f005 fce7 	bl	8086d6c <_Z16_fetch_usbserialv>
 808139e:	2202      	movs	r2, #2
 80813a0:	9905      	ldr	r1, [sp, #20]
 80813a2:	f003 fe9f 	bl	80850e4 <_ZN5Print7printlnEfi>
    Serial.print("speed: ");
 80813a6:	f005 fce1 	bl	8086d6c <_Z16_fetch_usbserialv>
 80813aa:	4950      	ldr	r1, [pc, #320]	; (80814ec <_Z7showAll6String+0x364>)
 80813ac:	f003 fd96 	bl	8084edc <_ZN5Print5printEPKc>
    Serial.println(speed);
 80813b0:	f005 fcdc 	bl	8086d6c <_Z16_fetch_usbserialv>
 80813b4:	2202      	movs	r2, #2
 80813b6:	9906      	ldr	r1, [sp, #24]
 80813b8:	f003 fe94 	bl	80850e4 <_ZN5Print7printlnEfi>
    Serial.print("fixquality: ");
 80813bc:	f005 fcd6 	bl	8086d6c <_Z16_fetch_usbserialv>
 80813c0:	494b      	ldr	r1, [pc, #300]	; (80814f0 <_Z7showAll6String+0x368>)
 80813c2:	f003 fd8b 	bl	8084edc <_ZN5Print5printEPKc>
    Serial.println(fixquality);
 80813c6:	f005 fcd1 	bl	8086d6c <_Z16_fetch_usbserialv>
 80813ca:	220a      	movs	r2, #10
 80813cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80813ce:	f7ff fea9 	bl	8081124 <_ZN5Print7printlnIhLi0EEEjT_i>
    Serial.print("satellites: ");
 80813d2:	f005 fccb 	bl	8086d6c <_Z16_fetch_usbserialv>
 80813d6:	4947      	ldr	r1, [pc, #284]	; (80814f4 <_Z7showAll6String+0x36c>)
 80813d8:	f003 fd80 	bl	8084edc <_ZN5Print5printEPKc>
    Serial.println(satellites);
 80813dc:	f005 fcc6 	bl	8086d6c <_Z16_fetch_usbserialv>
 80813e0:	220a      	movs	r2, #10
 80813e2:	9910      	ldr	r1, [sp, #64]	; 0x40
 80813e4:	f7ff fe9e 	bl	8081124 <_ZN5Print7printlnIhLi0EEEjT_i>
    Serial.print("horzAcc: ");
 80813e8:	f005 fcc0 	bl	8086d6c <_Z16_fetch_usbserialv>
 80813ec:	4942      	ldr	r1, [pc, #264]	; (80814f8 <_Z7showAll6String+0x370>)
 80813ee:	f003 fd75 	bl	8084edc <_ZN5Print5printEPKc>
    Serial.println(horzAcc);
 80813f2:	f005 fcbb 	bl	8086d6c <_Z16_fetch_usbserialv>
 80813f6:	4604      	mov	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80813f8:	220a      	movs	r2, #10
 80813fa:	9907      	ldr	r1, [sp, #28]
 80813fc:	f003 fd8b 	bl	8084f16 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
 8081400:	4620      	mov	r0, r4
 8081402:	f003 fd72 	bl	8084eea <_ZN5Print7printlnEv>
    Serial.print("vertAcc: ");
 8081406:	f005 fcb1 	bl	8086d6c <_Z16_fetch_usbserialv>
 808140a:	493c      	ldr	r1, [pc, #240]	; (80814fc <_Z7showAll6String+0x374>)
 808140c:	f003 fd66 	bl	8084edc <_ZN5Print5printEPKc>
    Serial.println(vertAcc);
 8081410:	f005 fcac 	bl	8086d6c <_Z16_fetch_usbserialv>
 8081414:	4604      	mov	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 8081416:	220a      	movs	r2, #10
 8081418:	9908      	ldr	r1, [sp, #32]
 808141a:	f003 fd7c 	bl	8084f16 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
 808141e:	4620      	mov	r0, r4
 8081420:	f003 fd63 	bl	8084eea <_ZN5Print7printlnEv>
    Serial.print("velN: ");
 8081424:	f005 fca2 	bl	8086d6c <_Z16_fetch_usbserialv>
 8081428:	4935      	ldr	r1, [pc, #212]	; (8081500 <_Z7showAll6String+0x378>)
 808142a:	f003 fd57 	bl	8084edc <_ZN5Print5printEPKc>
    Serial.println(velN);
 808142e:	f005 fc9d 	bl	8086d6c <_Z16_fetch_usbserialv>
 8081432:	220a      	movs	r2, #10
 8081434:	9909      	ldr	r1, [sp, #36]	; 0x24
 8081436:	f7ff fe85 	bl	8081144 <_ZN5Print7printlnIlLi0EEEjT_i>
    Serial.print("velE: ");
 808143a:	f005 fc97 	bl	8086d6c <_Z16_fetch_usbserialv>
 808143e:	4931      	ldr	r1, [pc, #196]	; (8081504 <_Z7showAll6String+0x37c>)
 8081440:	f003 fd4c 	bl	8084edc <_ZN5Print5printEPKc>
    Serial.println(velE);
 8081444:	f005 fc92 	bl	8086d6c <_Z16_fetch_usbserialv>
 8081448:	220a      	movs	r2, #10
 808144a:	990a      	ldr	r1, [sp, #40]	; 0x28
 808144c:	f7ff fe7a 	bl	8081144 <_ZN5Print7printlnIlLi0EEEjT_i>
    Serial.print("velD: ");
 8081450:	f005 fc8c 	bl	8086d6c <_Z16_fetch_usbserialv>
 8081454:	492c      	ldr	r1, [pc, #176]	; (8081508 <_Z7showAll6String+0x380>)
 8081456:	f003 fd41 	bl	8084edc <_ZN5Print5printEPKc>
    Serial.println(velD);
 808145a:	f005 fc87 	bl	8086d6c <_Z16_fetch_usbserialv>
 808145e:	220a      	movs	r2, #10
 8081460:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8081462:	f7ff fe6f 	bl	8081144 <_ZN5Print7printlnIlLi0EEEjT_i>
    Serial.print("gSpeed: ");
 8081466:	f005 fc81 	bl	8086d6c <_Z16_fetch_usbserialv>
 808146a:	4928      	ldr	r1, [pc, #160]	; (808150c <_Z7showAll6String+0x384>)
 808146c:	f003 fd36 	bl	8084edc <_ZN5Print5printEPKc>
    Serial.println(gSpeed);
 8081470:	f005 fc7c 	bl	8086d6c <_Z16_fetch_usbserialv>
 8081474:	220a      	movs	r2, #10
 8081476:	990c      	ldr	r1, [sp, #48]	; 0x30
 8081478:	f7ff fe64 	bl	8081144 <_ZN5Print7printlnIlLi0EEEjT_i>
    Serial.print("odoTrip: ");
 808147c:	f005 fc76 	bl	8086d6c <_Z16_fetch_usbserialv>
 8081480:	4923      	ldr	r1, [pc, #140]	; (8081510 <_Z7showAll6String+0x388>)
 8081482:	f003 fd2b 	bl	8084edc <_ZN5Print5printEPKc>
    Serial.println(odoTrip);
 8081486:	f005 fc71 	bl	8086d6c <_Z16_fetch_usbserialv>
 808148a:	220a      	movs	r2, #10
 808148c:	990d      	ldr	r1, [sp, #52]	; 0x34
 808148e:	f7ff fe59 	bl	8081144 <_ZN5Print7printlnIlLi0EEEjT_i>
    Serial.print("odoTotal: ");
 8081492:	f005 fc6b 	bl	8086d6c <_Z16_fetch_usbserialv>
 8081496:	491f      	ldr	r1, [pc, #124]	; (8081514 <_Z7showAll6String+0x38c>)
 8081498:	f003 fd20 	bl	8084edc <_ZN5Print5printEPKc>
    Serial.println(odoTotal);
 808149c:	f005 fc66 	bl	8086d6c <_Z16_fetch_usbserialv>
 80814a0:	220a      	movs	r2, #10
 80814a2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80814a4:	f7ff fe4e 	bl	8081144 <_ZN5Print7printlnIlLi0EEEjT_i>

    return 1;
}
 80814a8:	2001      	movs	r0, #1
 80814aa:	b013      	add	sp, #76	; 0x4c
 80814ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80814b0:	2000025d 	.word	0x2000025d
 80814b4:	0808aad2 	.word	0x0808aad2
 80814b8:	0808aae1 	.word	0x0808aae1
 80814bc:	0808aae8 	.word	0x0808aae8
 80814c0:	0808ab0b 	.word	0x0808ab0b
 80814c4:	0808aaf1 	.word	0x0808aaf1
 80814c8:	0808aaf9 	.word	0x0808aaf9
 80814cc:	0808aaff 	.word	0x0808aaff
 80814d0:	0808ab06 	.word	0x0808ab06
 80814d4:	0808ab15 	.word	0x0808ab15
 80814d8:	0808ab20 	.word	0x0808ab20
 80814dc:	0808ab2c 	.word	0x0808ab2c
 80814e0:	0808ab3e 	.word	0x0808ab3e
 80814e4:	0808ab51 	.word	0x0808ab51
 80814e8:	0808ab5f 	.word	0x0808ab5f
 80814ec:	0808b0c6 	.word	0x0808b0c6
 80814f0:	0808ab6a 	.word	0x0808ab6a
 80814f4:	0808ab77 	.word	0x0808ab77
 80814f8:	0808ab84 	.word	0x0808ab84
 80814fc:	0808ab8e 	.word	0x0808ab8e
 8081500:	0808ab98 	.word	0x0808ab98
 8081504:	0808ab9f 	.word	0x0808ab9f
 8081508:	0808aba6 	.word	0x0808aba6
 808150c:	0808abad 	.word	0x0808abad
 8081510:	0808abb6 	.word	0x0808abb6
 8081514:	0808abc0 	.word	0x0808abc0

08081518 <_Z7gpsRate6String>:
int resetODO(String command) {
    t.gpsResetODO();
    return 1;
}
// Allows changing the measurement rate
int gpsRate(String command) {
 8081518:	b530      	push	{r4, r5, lr}
 808151a:	4604      	mov	r4, r0
 808151c:	b085      	sub	sp, #20
    uint16_t rate = atoi(command);
 808151e:	6800      	ldr	r0, [r0, #0]
 8081520:	f007 fd54 	bl	8088fcc <atoi>
    int nav = atoi(command.substring(command.indexOf(' ')));
 8081524:	2120      	movs	r1, #32
    t.gpsResetODO();
    return 1;
}
// Allows changing the measurement rate
int gpsRate(String command) {
    uint16_t rate = atoi(command);
 8081526:	b285      	uxth	r5, r0
    int nav = atoi(command.substring(command.indexOf(' ')));
 8081528:	4620      	mov	r0, r4
 808152a:	f003 fc58 	bl	8084dde <_ZNK6String7indexOfEc>
 808152e:	4621      	mov	r1, r4
 8081530:	4602      	mov	r2, r0
 8081532:	4668      	mov	r0, sp
 8081534:	f003 fc78 	bl	8084e28 <_ZNK6String9substringEj>
 8081538:	9800      	ldr	r0, [sp, #0]
 808153a:	f007 fd47 	bl	8088fcc <atoi>
 808153e:	4604      	mov	r4, r0
 8081540:	4668      	mov	r0, sp
 8081542:	f003 fb23 	bl	8084b8c <_ZN6StringD1Ev>
		if ((transmittingData & SERIALGPSDATA) == SERIALGPSDATA) {
 8081546:	4b11      	ldr	r3, [pc, #68]	; (808158c <_Z7gpsRate6String+0x74>)
 8081548:	681b      	ldr	r3, [r3, #0]
 808154a:	00db      	lsls	r3, r3, #3
 808154c:	d515      	bpl.n	808157a <_Z7gpsRate6String+0x62>
			Serial.print("rate: ");
 808154e:	f005 fc0d 	bl	8086d6c <_Z16_fetch_usbserialv>
 8081552:	490f      	ldr	r1, [pc, #60]	; (8081590 <_Z7gpsRate6String+0x78>)
 8081554:	f003 fcc2 	bl	8084edc <_ZN5Print5printEPKc>
	    Serial.print(rate);
 8081558:	f005 fc08 	bl	8086d6c <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 808155c:	220a      	movs	r2, #10
 808155e:	4629      	mov	r1, r5
 8081560:	f003 fcd9 	bl	8084f16 <_ZN5Print11printNumberEmh>
	    Serial.print(" nav: ");
 8081564:	f005 fc02 	bl	8086d6c <_Z16_fetch_usbserialv>
 8081568:	490a      	ldr	r1, [pc, #40]	; (8081594 <_Z7gpsRate6String+0x7c>)
 808156a:	f003 fcb7 	bl	8084edc <_ZN5Print5printEPKc>
	    Serial.println(nav);
 808156e:	f005 fbfd 	bl	8086d6c <_Z16_fetch_usbserialv>
 8081572:	220a      	movs	r2, #10
 8081574:	4621      	mov	r1, r4
 8081576:	f7ff fde5 	bl	8081144 <_ZN5Print7printlnIlLi0EEEjT_i>
		}
    t.gpsRate(rate, nav);
 808157a:	4622      	mov	r2, r4
 808157c:	4629      	mov	r1, r5
 808157e:	4806      	ldr	r0, [pc, #24]	; (8081598 <_Z7gpsRate6String+0x80>)
 8081580:	f001 fad6 	bl	8082b30 <_ZN13AssetTracker27gpsRateEti>
    return 1;
}
 8081584:	2001      	movs	r0, #1
 8081586:	b005      	add	sp, #20
 8081588:	bd30      	pop	{r4, r5, pc}
 808158a:	bf00      	nop
 808158c:	20000008 	.word	0x20000008
 8081590:	0808abcb 	.word	0x0808abcb
 8081594:	0808abd2 	.word	0x0808abd2
 8081598:	2000025d 	.word	0x2000025d

0808159c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
 808159c:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
 808159e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80815a0:	4606      	mov	r6, r0
 80815a2:	460c      	mov	r4, r1
 80815a4:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
 80815a6:	d916      	bls.n	80815d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 80815a8:	4290      	cmp	r0, r2
 80815aa:	d215      	bcs.n	80815d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            // Move elements in reverse order
            --p;
            --end;
 80815ac:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
 80815b0:	1a6c      	subs	r4, r5, r1
 80815b2:	f1a1 0714 	sub.w	r7, r1, #20
 80815b6:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
 80815b8:	42af      	cmp	r7, r5
 80815ba:	d01c      	beq.n	80815f6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 80815bc:	b12c      	cbz	r4, 80815ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 80815be:	4629      	mov	r1, r5
 80815c0:	4620      	mov	r0, r4
 80815c2:	f003 fad3 	bl	8084b6c <_ZN6StringC1EOS_>
 80815c6:	7c2b      	ldrb	r3, [r5, #16]
 80815c8:	7423      	strb	r3, [r4, #16]
 80815ca:	4628      	mov	r0, r5
 80815cc:	f003 fade 	bl	8084b8c <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
 80815d0:	3d14      	subs	r5, #20
 80815d2:	3c14      	subs	r4, #20
 80815d4:	e7f0      	b.n	80815b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
 80815d6:	d00e      	beq.n	80815f6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 80815d8:	42ac      	cmp	r4, r5
 80815da:	d00c      	beq.n	80815f6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 80815dc:	b12e      	cbz	r6, 80815ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 80815de:	4621      	mov	r1, r4
 80815e0:	4630      	mov	r0, r6
 80815e2:	f003 fac3 	bl	8084b6c <_ZN6StringC1EOS_>
 80815e6:	7c23      	ldrb	r3, [r4, #16]
 80815e8:	7433      	strb	r3, [r6, #16]
 80815ea:	4620      	mov	r0, r4
 80815ec:	f003 face 	bl	8084b8c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
 80815f0:	3414      	adds	r4, #20
 80815f2:	3614      	adds	r6, #20
 80815f4:	e7f0      	b.n	80815d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
 80815f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080815f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80815f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80815fc:	2300      	movs	r3, #0
 80815fe:	6003      	str	r3, [r0, #0]
 8081600:	6043      	str	r3, [r0, #4]
 8081602:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
 8081604:	684e      	ldr	r6, [r1, #4]
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 8081606:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 8081608:	429e      	cmp	r6, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 808160a:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 808160c:	dd24      	ble.n	8081658 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
 808160e:	f04f 0814 	mov.w	r8, #20
 8081612:	fb08 f006 	mul.w	r0, r8, r6
 8081616:	f003 f88b 	bl	8084730 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
 808161a:	4605      	mov	r5, r0
 808161c:	b1e0      	cbz	r0, 8081658 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
                return false;
            }
            move(d, data_, data_ + size_);
 808161e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8081622:	fb08 1202 	mla	r2, r8, r2, r1
 8081626:	f7ff ffb9 	bl	808159c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 808162a:	6820      	ldr	r0, [r4, #0]
 808162c:	f003 f888 	bl	8084740 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
 8081630:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 8081632:	60a6      	str	r6, [r4, #8]
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
 8081634:	683e      	ldr	r6, [r7, #0]
 8081636:	687b      	ldr	r3, [r7, #4]
 8081638:	fb08 6803 	mla	r8, r8, r3, r6
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
 808163c:	4546      	cmp	r6, r8
 808163e:	d009      	beq.n	8081654 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
            new(dest) T(*it);
 8081640:	b12d      	cbz	r5, 808164e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x56>
 8081642:	4631      	mov	r1, r6
 8081644:	4628      	mov	r0, r5
 8081646:	f003 fb27 	bl	8084c98 <_ZN6StringC1ERKS_>
 808164a:	7c33      	ldrb	r3, [r6, #16]
 808164c:	742b      	strb	r3, [r5, #16]
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
 808164e:	3614      	adds	r6, #20
 8081650:	3514      	adds	r5, #20
 8081652:	e7f3      	b.n	808163c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
 8081654:	687b      	ldr	r3, [r7, #4]
 8081656:	6063      	str	r3, [r4, #4]
    }
}
 8081658:	4620      	mov	r0, r4
 808165a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08081660 <_GLOBAL__sub_I_logHandler>:
    }
    Particle.publish("LJCMDVAL", cmd + ": " + buf, 60, PRIVATE);


    return 1;
}
 8081660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 8081664:	4b7a      	ldr	r3, [pc, #488]	; (8081850 <_GLOBAL__sub_I_logHandler+0x1f0>)
 8081666:	b090      	sub	sp, #64	; 0x40
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 8081668:	2400      	movs	r4, #0
 808166a:	f04f 0901 	mov.w	r9, #1
 808166e:	f883 9000 	strb.w	r9, [r3]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 8081672:	f002 fcb7 	bl	8083fe4 <HAL_Pin_Map>
 8081676:	9403      	str	r4, [sp, #12]
 8081678:	9404      	str	r4, [sp, #16]
 808167a:	9405      	str	r4, [sp, #20]
namespace spark {

class SerialLogHandler: public StreamLogHandler {
public:
    explicit SerialLogHandler(LogLevel level = LOG_LEVEL_INFO, LogCategoryFilters filters = {}) :
            StreamLogHandler(Serial, level, filters) {
 808167c:	f005 fb76 	bl	8086d6c <_Z16_fetch_usbserialv>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
 8081680:	4e74      	ldr	r6, [pc, #464]	; (8081854 <_GLOBAL__sub_I_logHandler+0x1f4>)
 8081682:	4682      	mov	sl, r0
 8081684:	4635      	mov	r5, r6
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
 8081686:	f10d 0824 	add.w	r8, sp, #36	; 0x24
 808168a:	a903      	add	r1, sp, #12
 808168c:	a806      	add	r0, sp, #24
 808168e:	f7ff ffb3 	bl	80815f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 8081692:	a906      	add	r1, sp, #24
 8081694:	4640      	mov	r0, r8
 8081696:	f7ff ffaf 	bl	80815f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
 808169a:	4b6f      	ldr	r3, [pc, #444]	; (8081858 <_GLOBAL__sub_I_logHandler+0x1f8>)
 808169c:	af0c      	add	r7, sp, #48	; 0x30
 808169e:	f845 3b04 	str.w	r3, [r5], #4
 80816a2:	4641      	mov	r1, r8
 80816a4:	4638      	mov	r0, r7
 80816a6:	f7ff ffa7 	bl	80815f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80816aa:	463a      	mov	r2, r7
 80816ac:	211e      	movs	r1, #30
 80816ae:	4628      	mov	r0, r5
 80816b0:	f004 fa13 	bl	8085ada <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80816b4:	4638      	mov	r0, r7
 80816b6:	f7ff fbb7 	bl	8080e28 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
 80816ba:	4640      	mov	r0, r8
 80816bc:	f7ff fbb4 	bl	8080e28 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80816c0:	4b66      	ldr	r3, [pc, #408]	; (808185c <_GLOBAL__sub_I_logHandler+0x1fc>)
 80816c2:	f8c6 a020 	str.w	sl, [r6, #32]
 80816c6:	6033      	str	r3, [r6, #0]
 80816c8:	a806      	add	r0, sp, #24
 80816ca:	f7ff fbad 	bl	8080e28 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80816ce:	4b64      	ldr	r3, [pc, #400]	; (8081860 <_GLOBAL__sub_I_logHandler+0x200>)

// If you are using a 3rd party SIM card, put your APN here. See also
// the call to Particle.keepAlive in setup()
// STARTUP(cellular_credentials_set("YOUR_APN_GOES_HERE", "", "", NULL));

SerialLogHandler logHandler;
 80816d0:	4d64      	ldr	r5, [pc, #400]	; (8081864 <_GLOBAL__sub_I_logHandler+0x204>)
 80816d2:	6033      	str	r3, [r6, #0]
        Serial.begin();
 80816d4:	f005 fb4a 	bl	8086d6c <_Z16_fetch_usbserialv>
 80816d8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80816dc:	f005 fb36 	bl	8086d4c <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 80816e0:	f003 fe8e 	bl	8085400 <_ZN5spark10LogManager8instanceEv>
 80816e4:	4631      	mov	r1, r6
 80816e6:	f004 f98c 	bl	8085a02 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
 80816ea:	a803      	add	r0, sp, #12
 80816ec:	f7ff fb9c 	bl	8080e28 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80816f0:	462a      	mov	r2, r5
 80816f2:	495d      	ldr	r1, [pc, #372]	; (8081868 <_GLOBAL__sub_I_logHandler+0x208>)
 80816f4:	4630      	mov	r0, r6
 80816f6:	f006 f98f 	bl	8087a18 <__aeabi_atexit>
}
STARTUP(startup);

// System threaded mode is not required here, but it's a good idea with 0.6.0 and later.
// https://docs.particle.io/reference/firmware/electron/#system-thread
SYSTEM_THREAD(ENABLED);
 80816fa:	4621      	mov	r1, r4
 80816fc:	4648      	mov	r0, r9
 80816fe:	f002 ff31 	bl	8084564 <system_thread_set_state>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 8081702:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 8081706:	4e59      	ldr	r6, [pc, #356]	; (808186c <_GLOBAL__sub_I_logHandler+0x20c>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8081708:	2002      	movs	r0, #2
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 808170a:	8173      	strh	r3, [r6, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 808170c:	6034      	str	r4, [r6, #0]
 808170e:	80b4      	strh	r4, [r6, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 8081710:	71b4      	strb	r4, [r6, #6]
 8081712:	8134      	strh	r4, [r6, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8081714:	f002 ff06 	bl	8084524 <set_system_mode>

// SEMI_AUTOMATIC mode or system thread enabled is required here, otherwise we can't
// detect a failure to connect
// https://docs.particle.io/reference/firmware/electron/#semi-automatic-mode
SYSTEM_MODE(SEMI_AUTOMATIC);
 8081718:	4630      	mov	r0, r6


// Manage connection-related events with this object. Publish with the event name "connEventStats" and store up to 32 events
// in retained memory. This provides better visibility into what your Electron is using but doesn't use too much data.
ConnectionEvents connectionEvents("connEventStats");
 808171a:	4e55      	ldr	r6, [pc, #340]	; (8081870 <_GLOBAL__sub_I_logHandler+0x210>)
SYSTEM_THREAD(ENABLED);

// SEMI_AUTOMATIC mode or system thread enabled is required here, otherwise we can't
// detect a failure to connect
// https://docs.particle.io/reference/firmware/electron/#semi-automatic-mode
SYSTEM_MODE(SEMI_AUTOMATIC);
 808171c:	462a      	mov	r2, r5
 808171e:	4955      	ldr	r1, [pc, #340]	; (8081874 <_GLOBAL__sub_I_logHandler+0x214>)
 8081720:	f006 f97a 	bl	8087a18 <__aeabi_atexit>


// Manage connection-related events with this object. Publish with the event name "connEventStats" and store up to 32 events
// in retained memory. This provides better visibility into what your Electron is using but doesn't use too much data.
ConnectionEvents connectionEvents("connEventStats");
 8081724:	4954      	ldr	r1, [pc, #336]	; (8081878 <_GLOBAL__sub_I_logHandler+0x218>)
 8081726:	4630      	mov	r0, r6
 8081728:	f000 ff3c 	bl	80825a4 <_ZN16ConnectionEventsC1EPKc>
 808172c:	4630      	mov	r0, r6

// Check session by sending and receiving an event every hour. This can help troubleshoot problems where
// your Electron is online but not communicating
SessionCheck sessionCheck(3600);
 808172e:	4e53      	ldr	r6, [pc, #332]	; (808187c <_GLOBAL__sub_I_logHandler+0x21c>)
SYSTEM_MODE(SEMI_AUTOMATIC);


// Manage connection-related events with this object. Publish with the event name "connEventStats" and store up to 32 events
// in retained memory. This provides better visibility into what your Electron is using but doesn't use too much data.
ConnectionEvents connectionEvents("connEventStats");
 8081730:	462a      	mov	r2, r5
 8081732:	4953      	ldr	r1, [pc, #332]	; (8081880 <_GLOBAL__sub_I_logHandler+0x220>)
 8081734:	f006 f970 	bl	8087a18 <__aeabi_atexit>

// Check session by sending and receiving an event every hour. This can help troubleshoot problems where
// your Electron is online but not communicating
SessionCheck sessionCheck(3600);
 8081738:	4a52      	ldr	r2, [pc, #328]	; (8081884 <_GLOBAL__sub_I_logHandler+0x224>)
 808173a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 808173e:	4630      	mov	r0, r6
 8081740:	f000 fdb6 	bl	80822b0 <_ZN12SessionCheckC1ElPKc>
 8081744:	4630      	mov	r0, r6

// Monitors the state of the connection, and sends this data using the ConnectionEvents.
// Handy for visibility.
ConnectionCheck connectionCheck;
 8081746:	4e50      	ldr	r6, [pc, #320]	; (8081888 <_GLOBAL__sub_I_logHandler+0x228>)
// in retained memory. This provides better visibility into what your Electron is using but doesn't use too much data.
ConnectionEvents connectionEvents("connEventStats");

// Check session by sending and receiving an event every hour. This can help troubleshoot problems where
// your Electron is online but not communicating
SessionCheck sessionCheck(3600);
 8081748:	462a      	mov	r2, r5
 808174a:	4950      	ldr	r1, [pc, #320]	; (808188c <_GLOBAL__sub_I_logHandler+0x22c>)
 808174c:	f006 f964 	bl	8087a18 <__aeabi_atexit>

// Monitors the state of the connection, and sends this data using the ConnectionEvents.
// Handy for visibility.
ConnectionCheck connectionCheck;
 8081750:	4630      	mov	r0, r6
 8081752:	f000 fb5d 	bl	8081e10 <_ZN15ConnectionCheckC1Ev>
 8081756:	4630      	mov	r0, r6

// Tester adds a function that makes it possible exercise some of the feature remotely using functions.
// testerFn is the function and and the second parameter that's a pin to test pin sleep modes.
Tester tester("testerFn", D2);
 8081758:	4e4d      	ldr	r6, [pc, #308]	; (8081890 <_GLOBAL__sub_I_logHandler+0x230>)
// your Electron is online but not communicating
SessionCheck sessionCheck(3600);

// Monitors the state of the connection, and sends this data using the ConnectionEvents.
// Handy for visibility.
ConnectionCheck connectionCheck;
 808175a:	462a      	mov	r2, r5
 808175c:	494d      	ldr	r1, [pc, #308]	; (8081894 <_GLOBAL__sub_I_logHandler+0x234>)
 808175e:	f006 f95b 	bl	8087a18 <__aeabi_atexit>

// Tester adds a function that makes it possible exercise some of the feature remotely using functions.
// testerFn is the function and and the second parameter that's a pin to test pin sleep modes.
Tester tester("testerFn", D2);
 8081762:	2202      	movs	r2, #2
 8081764:	494c      	ldr	r1, [pc, #304]	; (8081898 <_GLOBAL__sub_I_logHandler+0x238>)
 8081766:	4630      	mov	r0, r6
 8081768:	f000 f988 	bl	8081a7c <_ZN6TesterC1EPKci>
 808176c:	4630      	mov	r0, r6

// BatteryCheck is used to put the device to sleep immediately when the battery is low.
// 15.0 is the minimum SoC, if it's lower than that and not externally powered, it will
// sleep for the number of seconds in the second parameter, in this case, 3600 seconds = 1 hour.
BatteryCheck batteryCheck(15.0, 3600);
 808176e:	4e4b      	ldr	r6, [pc, #300]	; (808189c <_GLOBAL__sub_I_logHandler+0x23c>)
// Handy for visibility.
ConnectionCheck connectionCheck;

// Tester adds a function that makes it possible exercise some of the feature remotely using functions.
// testerFn is the function and and the second parameter that's a pin to test pin sleep modes.
Tester tester("testerFn", D2);
 8081770:	462a      	mov	r2, r5
 8081772:	494b      	ldr	r1, [pc, #300]	; (80818a0 <_GLOBAL__sub_I_logHandler+0x240>)
 8081774:	f006 f950 	bl	8087a18 <__aeabi_atexit>

// BatteryCheck is used to put the device to sleep immediately when the battery is low.
// 15.0 is the minimum SoC, if it's lower than that and not externally powered, it will
// sleep for the number of seconds in the second parameter, in this case, 3600 seconds = 1 hour.
BatteryCheck batteryCheck(15.0, 3600);
 8081778:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 808177c:	4949      	ldr	r1, [pc, #292]	; (80818a4 <_GLOBAL__sub_I_logHandler+0x244>)
 808177e:	4630      	mov	r0, r6
 8081780:	f000 f8c0 	bl	8081904 <_ZN12BatteryCheckC1Efl>
 8081784:	4630      	mov	r0, r6

// This is a wrapper around the ApplicationWatchdog. It just makes using it easier. It writes
// a ConnectionEvents event to retained memory then does System.reset().
AppWatchdogWrapper watchdog(APP_WATCHDOG_TIMEOUT);
 8081786:	4e48      	ldr	r6, [pc, #288]	; (80818a8 <_GLOBAL__sub_I_logHandler+0x248>)
Tester tester("testerFn", D2);

// BatteryCheck is used to put the device to sleep immediately when the battery is low.
// 15.0 is the minimum SoC, if it's lower than that and not externally powered, it will
// sleep for the number of seconds in the second parameter, in this case, 3600 seconds = 1 hour.
BatteryCheck batteryCheck(15.0, 3600);
 8081788:	462a      	mov	r2, r5
 808178a:	4948      	ldr	r1, [pc, #288]	; (80818ac <_GLOBAL__sub_I_logHandler+0x24c>)
 808178c:	f006 f944 	bl	8087a18 <__aeabi_atexit>

// This is a wrapper around the ApplicationWatchdog. It just makes using it easier. It writes
// a ConnectionEvents event to retained memory then does System.reset().
AppWatchdogWrapper watchdog(APP_WATCHDOG_TIMEOUT);
 8081790:	f64e 2160 	movw	r1, #60000	; 0xea60
 8081794:	4630      	mov	r0, r6
 8081796:	f000 fcc5 	bl	8082124 <_ZN18AppWatchdogWrapperC1Em>
 808179a:	462a      	mov	r2, r5
 808179c:	4944      	ldr	r1, [pc, #272]	; (80818b0 <_GLOBAL__sub_I_logHandler+0x250>)
 808179e:	4630      	mov	r0, r6


// Creating an AssetTracker named 't' for us to reference
AssetTracker2 t = AssetTracker2();
// A FuelGauge named 'fuel' for checking on the battery state
FuelGauge fuel = FuelGauge();
 80817a0:	4e44      	ldr	r6, [pc, #272]	; (80818b4 <_GLOBAL__sub_I_logHandler+0x254>)
// sleep for the number of seconds in the second parameter, in this case, 3600 seconds = 1 hour.
BatteryCheck batteryCheck(15.0, 3600);

// This is a wrapper around the ApplicationWatchdog. It just makes using it easier. It writes
// a ConnectionEvents event to retained memory then does System.reset().
AppWatchdogWrapper watchdog(APP_WATCHDOG_TIMEOUT);
 80817a2:	f006 f939 	bl	8087a18 <__aeabi_atexit>
//  Trailer Monitor Code Starts Here
//


// Creating an AssetTracker named 't' for us to reference
AssetTracker2 t = AssetTracker2();
 80817a6:	4844      	ldr	r0, [pc, #272]	; (80818b8 <_GLOBAL__sub_I_logHandler+0x258>)
 80817a8:	f001 f893 	bl	80828d2 <_ZN13AssetTracker2C1Ev>
// A FuelGauge named 'fuel' for checking on the battery state
FuelGauge fuel = FuelGauge();
 80817ac:	4621      	mov	r1, r4
 80817ae:	4630      	mov	r0, r6
 80817b0:	f004 fdf2 	bl	8086398 <_ZN9FuelGaugeC1Eb>
 80817b4:	4630      	mov	r0, r6
// A PowerCheck object named 'pc' for watching the power state of the usb socket
PowerCheck pc = PowerCheck();
 80817b6:	4e41      	ldr	r6, [pc, #260]	; (80818bc <_GLOBAL__sub_I_logHandler+0x25c>)


// Creating an AssetTracker named 't' for us to reference
AssetTracker2 t = AssetTracker2();
// A FuelGauge named 'fuel' for checking on the battery state
FuelGauge fuel = FuelGauge();
 80817b8:	462a      	mov	r2, r5
 80817ba:	4941      	ldr	r1, [pc, #260]	; (80818c0 <_GLOBAL__sub_I_logHandler+0x260>)
 80817bc:	f006 f92c 	bl	8087a18 <__aeabi_atexit>
// A PowerCheck object named 'pc' for watching the power state of the usb socket
PowerCheck pc = PowerCheck();
 80817c0:	4630      	mov	r0, r6
 80817c2:	f001 f843 	bl	808284c <_ZN10PowerCheckC1Ev>
 80817c6:	462a      	mov	r2, r5
 80817c8:	493e      	ldr	r1, [pc, #248]	; (80818c4 <_GLOBAL__sub_I_logHandler+0x264>)
 80817ca:	4630      	mov	r0, r6
int delayDHTMinutes = 10;
// Threshold to trigger a publish
// 9000 is VERY sensitive, 12000 will still detect small bumps
int accelThreshold = 9000;
// string that will hold the accelleration values from the last over threshold event
String pubAccel = "";
 80817cc:	4e3e      	ldr	r6, [pc, #248]	; (80818c8 <_GLOBAL__sub_I_logHandler+0x268>)
// Creating an AssetTracker named 't' for us to reference
AssetTracker2 t = AssetTracker2();
// A FuelGauge named 'fuel' for checking on the battery state
FuelGauge fuel = FuelGauge();
// A PowerCheck object named 'pc' for watching the power state of the usb socket
PowerCheck pc = PowerCheck();
 80817ce:	f006 f923 	bl	8087a18 <__aeabi_atexit>
// A DHT object named dht to access the DHT22 temperature and humidity sensor
DHT dht(DHTPIN, DHTTYPE);
 80817d2:	2306      	movs	r3, #6
 80817d4:	2216      	movs	r2, #22
 80817d6:	2103      	movs	r1, #3
 80817d8:	483c      	ldr	r0, [pc, #240]	; (80818cc <_GLOBAL__sub_I_logHandler+0x26c>)
 80817da:	f001 fa0f 	bl	8082bfc <_ZN3DHTC1Ehhh>
int delayDHTMinutes = 10;
// Threshold to trigger a publish
// 9000 is VERY sensitive, 12000 will still detect small bumps
int accelThreshold = 9000;
// string that will hold the accelleration values from the last over threshold event
String pubAccel = "";
 80817de:	493c      	ldr	r1, [pc, #240]	; (80818d0 <_GLOBAL__sub_I_logHandler+0x270>)
 80817e0:	4630      	mov	r0, r6
 80817e2:	f003 fa1a 	bl	8084c1a <_ZN6StringC1EPK19__FlashStringHelper>
 80817e6:	462a      	mov	r2, r5
 80817e8:	493a      	ldr	r1, [pc, #232]	; (80818d4 <_GLOBAL__sub_I_logHandler+0x274>)
 80817ea:	4630      	mov	r0, r6
 80817ec:	f006 f914 	bl	8087a18 <__aeabi_atexit>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 80817f0:	4b39      	ldr	r3, [pc, #228]	; (80818d8 <_GLOBAL__sub_I_logHandler+0x278>)
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
 80817f2:	4e3a      	ldr	r6, [pc, #232]	; (80818dc <_GLOBAL__sub_I_logHandler+0x27c>)
 80817f4:	930c      	str	r3, [sp, #48]	; 0x30
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80817f6:	e897 0003 	ldmia.w	r7, {r0, r1}
 80817fa:	4b39      	ldr	r3, [pc, #228]	; (80818e0 <_GLOBAL__sub_I_logHandler+0x280>)
 80817fc:	e888 0003 	stmia.w	r8, {r0, r1}
 8081800:	6033      	str	r3, [r6, #0]
      __a = _GLIBCXX_MOVE(__b);
 8081802:	f106 030c 	add.w	r3, r6, #12
 8081806:	e893 0003 	ldmia.w	r3, {r0, r1}
 808180a:	e887 0003 	stmia.w	r7, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 808180e:	e898 0003 	ldmia.w	r8, {r0, r1}
 8081812:	e883 0003 	stmia.w	r3, {r0, r1}
 8081816:	4b33      	ldr	r3, [pc, #204]	; (80818e4 <_GLOBAL__sub_I_logHandler+0x284>)
 8081818:	7134      	strb	r4, [r6, #4]
 808181a:	6173      	str	r3, [r6, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808181c:	69b3      	ldr	r3, [r6, #24]
 808181e:	60b4      	str	r4, [r6, #8]
 8081820:	930f      	str	r3, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
 8081822:	4b31      	ldr	r3, [pc, #196]	; (80818e8 <_GLOBAL__sub_I_logHandler+0x288>)
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
 8081824:	4a31      	ldr	r2, [pc, #196]	; (80818ec <_GLOBAL__sub_I_logHandler+0x28c>)
 8081826:	61b3      	str	r3, [r6, #24]
 8081828:	2132      	movs	r1, #50	; 0x32
 808182a:	4633      	mov	r3, r6
 808182c:	9401      	str	r4, [sp, #4]
 808182e:	9400      	str	r4, [sp, #0]
 8081830:	f106 0008 	add.w	r0, r6, #8
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8081834:	940e      	str	r4, [sp, #56]	; 0x38
 8081836:	f002 fcf5 	bl	8084224 <os_timer_create>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808183a:	4638      	mov	r0, r7
 808183c:	f7fe fd46 	bl	80802cc <_ZNSt14_Function_baseD1Ev>
void callGPS() {
     t.updateGPS();
}
// The period is based on the baud rate of the serial port
// connected to the gps.
Timer timer(50, callGPS);
 8081840:	462a      	mov	r2, r5
 8081842:	492b      	ldr	r1, [pc, #172]	; (80818f0 <_GLOBAL__sub_I_logHandler+0x290>)
 8081844:	4630      	mov	r0, r6
 8081846:	f006 f8e7 	bl	8087a18 <__aeabi_atexit>
    }
    Particle.publish("LJCMDVAL", cmd + ": " + buf, 60, PRIVATE);


    return 1;
}
 808184a:	b010      	add	sp, #64	; 0x40
 808184c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8081850:	2000025c 	.word	0x2000025c
 8081854:	20000260 	.word	0x20000260
 8081858:	0808a73c 	.word	0x0808a73c
 808185c:	0808b308 	.word	0x0808b308
 8081860:	0808a754 	.word	0x0808a754
 8081864:	20000180 	.word	0x20000180
 8081868:	08080285 	.word	0x08080285
 808186c:	20000184 	.word	0x20000184
 8081870:	20000298 	.word	0x20000298
 8081874:	08080275 	.word	0x08080275
 8081878:	0808abd9 	.word	0x0808abd9
 808187c:	20000198 	.word	0x20000198
 8081880:	08082595 	.word	0x08082595
 8081884:	0808abe8 	.word	0x0808abe8
 8081888:	2000023c 	.word	0x2000023c
 808188c:	0808227d 	.word	0x0808227d
 8081890:	200001d0 	.word	0x200001d0
 8081894:	08081dd1 	.word	0x08081dd1
 8081898:	0808abf5 	.word	0x0808abf5
 808189c:	2000020c 	.word	0x2000020c
 80818a0:	080819ed 	.word	0x080819ed
 80818a4:	41700000 	.word	0x41700000
 80818a8:	200002a4 	.word	0x200002a4
 80818ac:	080818f5 	.word	0x080818f5
 80818b0:	080820c5 	.word	0x080820c5
 80818b4:	20000190 	.word	0x20000190
 80818b8:	2000025d 	.word	0x2000025d
 80818bc:	20000230 	.word	0x20000230
 80818c0:	080863b7 	.word	0x080863b7
 80818c4:	080827c9 	.word	0x080827c9
 80818c8:	2000021c 	.word	0x2000021c
 80818cc:	20000284 	.word	0x20000284
 80818d0:	0808acc4 	.word	0x0808acc4
 80818d4:	08084b8d 	.word	0x08084b8d
 80818d8:	0808010d 	.word	0x0808010d
 80818dc:	200001f0 	.word	0x200001f0
 80818e0:	0808a728 	.word	0x0808a728
 80818e4:	080800db 	.word	0x080800db
 80818e8:	080800d7 	.word	0x080800d7
 80818ec:	080801f1 	.word	0x080801f1
 80818f0:	080802fd 	.word	0x080802fd

080818f4 <_ZN12BatteryCheckD1Ev>:


}
BatteryCheck::~BatteryCheck() {

}
 80818f4:	4770      	bx	lr

080818f6 <_ZN12BatteryCheckD0Ev>:

BatteryCheck::BatteryCheck(float minimumSoC, long sleepTimeSecs) : minimumSoC(minimumSoC), sleepTimeSecs(sleepTimeSecs) {


}
BatteryCheck::~BatteryCheck() {
 80818f6:	b510      	push	{r4, lr}
 80818f8:	4604      	mov	r4, r0

}
 80818fa:	2110      	movs	r1, #16
 80818fc:	f006 f89a 	bl	8087a34 <_ZdlPvj>
 8081900:	4620      	mov	r0, r4
 8081902:	bd10      	pop	{r4, pc}

08081904 <_ZN12BatteryCheckC1Efl>:
#include "ConnectionEvents.h"

static FuelGauge fuel;
static PMIC pmic;

BatteryCheck::BatteryCheck(float minimumSoC, long sleepTimeSecs) : minimumSoC(minimumSoC), sleepTimeSecs(sleepTimeSecs) {
 8081904:	b510      	push	{r4, lr}
 8081906:	4c03      	ldr	r4, [pc, #12]	; (8081914 <_ZN12BatteryCheckC1Efl+0x10>)
 8081908:	6082      	str	r2, [r0, #8]
 808190a:	2200      	movs	r2, #0
 808190c:	6004      	str	r4, [r0, #0]
 808190e:	6041      	str	r1, [r0, #4]
 8081910:	60c2      	str	r2, [r0, #12]


}
 8081912:	bd10      	pop	{r4, pc}
 8081914:	0808ac08 	.word	0x0808ac08

08081918 <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv>:
		lastCheckMs = millis();
		checkAndSleepIfNecessary();
	}
}

void BatteryCheck::checkAndSleepIfNecessary() {
 8081918:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808191a:	4604      	mov	r4, r0
	float soc = fuel.getSoC();
 808191c:	4810      	ldr	r0, [pc, #64]	; (8081960 <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv+0x48>)
 808191e:	f004 fd91 	bl	8086444 <_ZN9FuelGauge6getSoCEv>

	// There is an SoC, it's less than the minimum, and there's no external power (USB or VIN)
	if (soc != 0.0 && soc < minimumSoC && !pmic.isPowerGood()) {
 8081922:	2100      	movs	r1, #0
		checkAndSleepIfNecessary();
	}
}

void BatteryCheck::checkAndSleepIfNecessary() {
	float soc = fuel.getSoC();
 8081924:	4605      	mov	r5, r0

	// There is an SoC, it's less than the minimum, and there's no external power (USB or VIN)
	if (soc != 0.0 && soc < minimumSoC && !pmic.isPowerGood()) {
 8081926:	f007 faa7 	bl	8088e78 <__aeabi_fcmpeq>
 808192a:	b9b0      	cbnz	r0, 808195a <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv+0x42>
 808192c:	6861      	ldr	r1, [r4, #4]
 808192e:	4628      	mov	r0, r5
 8081930:	f007 faac 	bl	8088e8c <__aeabi_fcmplt>
 8081934:	b188      	cbz	r0, 808195a <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv+0x42>
 8081936:	480b      	ldr	r0, [pc, #44]	; (8081964 <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv+0x4c>)
 8081938:	f002 ffa1 	bl	808487e <_ZN4PMIC11isPowerGoodEv>
 808193c:	b968      	cbnz	r0, 808195a <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv+0x42>
		ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_LOW_BATTERY_SLEEP, static_cast<int>(soc));
 808193e:	4628      	mov	r0, r5
 8081940:	f007 fae2 	bl	8088f08 <__aeabi_f2iz>
 8081944:	4601      	mov	r1, r0
 8081946:	200d      	movs	r0, #13
 8081948:	f000 ff1c 	bl	8082784 <_ZN16ConnectionEvents8addEventEii>

		System.sleep(SLEEP_MODE_DEEP, sleepTimeSecs);
 808194c:	4b06      	ldr	r3, [pc, #24]	; (8081968 <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv+0x50>)
 808194e:	68a2      	ldr	r2, [r4, #8]
 8081950:	681b      	ldr	r3, [r3, #0]
 8081952:	2101      	movs	r1, #1
 8081954:	4668      	mov	r0, sp
 8081956:	f003 f879 	bl	8084a4c <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
	}

}
 808195a:	b003      	add	sp, #12
 808195c:	bd30      	pop	{r4, r5, pc}
 808195e:	bf00      	nop
 8081960:	200002c0 	.word	0x200002c0
 8081964:	200002cc 	.word	0x200002cc
 8081968:	200002c8 	.word	0x200002c8

0808196c <_ZN12BatteryCheck5setupEv>:
BatteryCheck::~BatteryCheck() {

}

void BatteryCheck::setup() {
	checkAndSleepIfNecessary();
 808196c:	f7ff bfd4 	b.w	8081918 <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv>

08081970 <_ZN12BatteryCheck4loopEv>:
}

void BatteryCheck::loop() {
 8081970:	b510      	push	{r4, lr}
 8081972:	4604      	mov	r4, r0
 8081974:	f002 fbf6 	bl	8084164 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastCheckMs >= CHECK_PERIOD_MS) {
 8081978:	68e3      	ldr	r3, [r4, #12]
 808197a:	1ac0      	subs	r0, r0, r3
 808197c:	f64e 235f 	movw	r3, #59999	; 0xea5f
 8081980:	4298      	cmp	r0, r3
 8081982:	d907      	bls.n	8081994 <_ZN12BatteryCheck4loopEv+0x24>
 8081984:	f002 fbee 	bl	8084164 <HAL_Timer_Get_Milli_Seconds>
		lastCheckMs = millis();
 8081988:	60e0      	str	r0, [r4, #12]
		checkAndSleepIfNecessary();
 808198a:	4620      	mov	r0, r4
	}
}
 808198c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void BatteryCheck::loop() {
	if (millis() - lastCheckMs >= CHECK_PERIOD_MS) {
		lastCheckMs = millis();
		checkAndSleepIfNecessary();
 8081990:	f7ff bfc2 	b.w	8081918 <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv>
 8081994:	bd10      	pop	{r4, pc}
	...

08081998 <_GLOBAL__sub_I__ZN12BatteryCheckC2Efl>:
		ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_LOW_BATTERY_SLEEP, static_cast<int>(soc));

		System.sleep(SLEEP_MODE_DEEP, sleepTimeSecs);
	}

}
 8081998:	b570      	push	{r4, r5, r6, lr}
 808199a:	4b0e      	ldr	r3, [pc, #56]	; (80819d4 <_GLOBAL__sub_I__ZN12BatteryCheckC2Efl+0x3c>)
#include "BatteryCheck.h"

#include "ConnectionEvents.h"

static FuelGauge fuel;
 808199c:	4d0e      	ldr	r5, [pc, #56]	; (80819d8 <_GLOBAL__sub_I__ZN12BatteryCheckC2Efl+0x40>)
 808199e:	2400      	movs	r4, #0
 80819a0:	601c      	str	r4, [r3, #0]
 80819a2:	4e0e      	ldr	r6, [pc, #56]	; (80819dc <_GLOBAL__sub_I__ZN12BatteryCheckC2Efl+0x44>)
 80819a4:	f002 fb1e 	bl	8083fe4 <HAL_Pin_Map>
 80819a8:	4621      	mov	r1, r4
 80819aa:	4628      	mov	r0, r5
 80819ac:	f004 fcf4 	bl	8086398 <_ZN9FuelGaugeC1Eb>
 80819b0:	4628      	mov	r0, r5
static PMIC pmic;
 80819b2:	4d0b      	ldr	r5, [pc, #44]	; (80819e0 <_GLOBAL__sub_I__ZN12BatteryCheckC2Efl+0x48>)
#include "BatteryCheck.h"

#include "ConnectionEvents.h"

static FuelGauge fuel;
 80819b4:	4632      	mov	r2, r6
 80819b6:	490b      	ldr	r1, [pc, #44]	; (80819e4 <_GLOBAL__sub_I__ZN12BatteryCheckC2Efl+0x4c>)
 80819b8:	f006 f82e 	bl	8087a18 <__aeabi_atexit>
static PMIC pmic;
 80819bc:	4621      	mov	r1, r4
 80819be:	4628      	mov	r0, r5
 80819c0:	f002 ff15 	bl	80847ee <_ZN4PMICC1Eb>
 80819c4:	4632      	mov	r2, r6
 80819c6:	4628      	mov	r0, r5
		ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_LOW_BATTERY_SLEEP, static_cast<int>(soc));

		System.sleep(SLEEP_MODE_DEEP, sleepTimeSecs);
	}

}
 80819c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
#include "BatteryCheck.h"

#include "ConnectionEvents.h"

static FuelGauge fuel;
static PMIC pmic;
 80819cc:	4906      	ldr	r1, [pc, #24]	; (80819e8 <_GLOBAL__sub_I__ZN12BatteryCheckC2Efl+0x50>)
 80819ce:	f006 b823 	b.w	8087a18 <__aeabi_atexit>
 80819d2:	bf00      	nop
 80819d4:	200002c8 	.word	0x200002c8
 80819d8:	200002c0 	.word	0x200002c0
 80819dc:	20000180 	.word	0x20000180
 80819e0:	200002cc 	.word	0x200002cc
 80819e4:	080863b7 	.word	0x080863b7
 80819e8:	0808480d 	.word	0x0808480d

080819ec <_ZN6TesterD1Ev>:
}


Tester::~Tester() {

}
 80819ec:	4770      	bx	lr

080819ee <_ZN6TesterD0Ev>:
	functionName(functionName), sleepTestPin(sleepTestPin) {

}


Tester::~Tester() {
 80819ee:	b510      	push	{r4, lr}
 80819f0:	4604      	mov	r4, r0

}
 80819f2:	211c      	movs	r1, #28
 80819f4:	f006 f81e 	bl	8087a34 <_ZdlPvj>
 80819f8:	4620      	mov	r0, r4
 80819fa:	bd10      	pop	{r4, pc}

080819fc <_ZNSt17_Function_handlerIFi6StringESt5_BindIFSt7_Mem_fnIM6TesterFiS0_EEPS4_St12_PlaceholderILi1EEEEE9_M_invokeERKSt9_Any_dataOS0_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

    public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80819fc:	b530      	push	{r4, r5, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80819fe:	6802      	ldr	r2, [r0, #0]
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

    public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8081a00:	b085      	sub	sp, #20
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
 8081a02:	6853      	ldr	r3, [r2, #4]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8081a04:	6894      	ldr	r4, [r2, #8]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
 8081a06:	f013 0f01 	tst.w	r3, #1
 8081a0a:	ea4f 0363 	mov.w	r3, r3, asr #1
 8081a0e:	6815      	ldr	r5, [r2, #0]
 8081a10:	bf18      	it	ne
 8081a12:	58e2      	ldrne	r2, [r4, r3]
 8081a14:	4668      	mov	r0, sp
 8081a16:	441c      	add	r4, r3
 8081a18:	bf18      	it	ne
 8081a1a:	5955      	ldrne	r5, [r2, r5]
 8081a1c:	f003 f8a6 	bl	8084b6c <_ZN6StringC1EOS_>
 8081a20:	4669      	mov	r1, sp
 8081a22:	4620      	mov	r0, r4
 8081a24:	47a8      	blx	r5
 8081a26:	4604      	mov	r4, r0
 8081a28:	4668      	mov	r0, sp
 8081a2a:	f003 f8af 	bl	8084b8c <_ZN6StringD1Ev>
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	return (*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
 8081a2e:	4620      	mov	r0, r4
 8081a30:	b005      	add	sp, #20
 8081a32:	bd30      	pop	{r4, r5, pc}

08081a34 <_ZN6Tester15functionHandlerE6String>:

// This is the function registered with Particle.function(). Just copy the data and return so
// the successful response can be returned to the caller. Since we do things like reset, or
// enter an infinite loop, or sleep, doing this right from the callback causes the caller to
// time out because the response will never be received.
int Tester::functionHandler(String argStr) {
 8081a34:	b510      	push	{r4, lr}
 8081a36:	4604      	mov	r4, r0
	// Process this in loop so the function won't time out
	functionData = strdup(argStr.c_str());
 8081a38:	6808      	ldr	r0, [r1, #0]
 8081a3a:	f007 fc55 	bl	80892e8 <strdup>
 8081a3e:	60e0      	str	r0, [r4, #12]

	return 0;
}
 8081a40:	2000      	movs	r0, #0
 8081a42:	bd10      	pop	{r4, pc}

08081a44 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM6TesterFi6StringEEPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8081a44:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8081a46:	b538      	push	{r3, r4, r5, lr}
 8081a48:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8081a4a:	d005      	beq.n	8081a58 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM6TesterFi6StringEEPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
 8081a4c:	2a03      	cmp	r2, #3
 8081a4e:	d00f      	beq.n	8081a70 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM6TesterFi6StringEEPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x2c>
 8081a50:	2a01      	cmp	r2, #1
 8081a52:	d111      	bne.n	8081a78 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM6TesterFi6StringEEPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x34>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8081a54:	680b      	ldr	r3, [r1, #0]
 8081a56:	e009      	b.n	8081a6c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM6TesterFi6StringEEPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x28>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8081a58:	200c      	movs	r0, #12
 8081a5a:	680d      	ldr	r5, [r1, #0]
 8081a5c:	f7fe fb1f 	bl	808009e <_Znwj>
 8081a60:	4603      	mov	r3, r0
 8081a62:	b118      	cbz	r0, 8081a6c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM6TesterFi6StringEEPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x28>
 8081a64:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8081a68:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8081a6c:	6023      	str	r3, [r4, #0]
 8081a6e:	e003      	b.n	8081a78 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM6TesterFi6StringEEPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x34>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8081a70:	210c      	movs	r1, #12
 8081a72:	6800      	ldr	r0, [r0, #0]
 8081a74:	f005 ffde 	bl	8087a34 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8081a78:	2000      	movs	r0, #0
 8081a7a:	bd38      	pop	{r3, r4, r5, pc}

08081a7c <_ZN6TesterC1EPKci>:
#include "Tester.h"

#include "ConnectionCheck.h"
#include "ConnectionEvents.h"

Tester::Tester(const char *functionName, int sleepTestPin) :
 8081a7c:	b510      	push	{r4, lr}
	functionName(functionName), sleepTestPin(sleepTestPin) {
 8081a7e:	4c05      	ldr	r4, [pc, #20]	; (8081a94 <_ZN6TesterC1EPKci+0x18>)
 8081a80:	6082      	str	r2, [r0, #8]
 8081a82:	2200      	movs	r2, #0
 8081a84:	6004      	str	r4, [r0, #0]
 8081a86:	6041      	str	r1, [r0, #4]
 8081a88:	60c2      	str	r2, [r0, #12]
 8081a8a:	6102      	str	r2, [r0, #16]
 8081a8c:	6142      	str	r2, [r0, #20]
 8081a8e:	6182      	str	r2, [r0, #24]

}
 8081a90:	bd10      	pop	{r4, pc}
 8081a92:	bf00      	nop
 8081a94:	0808ac18 	.word	0x0808ac18

08081a98 <_ZN6Tester5setupEv>:

Tester::~Tester() {

}

void Tester::setup() {
 8081a98:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8081a9a:	4605      	mov	r5, r0
    static inline bool function(const T &name, Types ... args)
    {
        static_assert(!is_string_literal<T>::value || sizeof(name) <= USER_FUNC_KEY_LENGTH + 1,
            "\n\nIn Particle.function, name must be " __XSTRING(USER_FUNC_KEY_LENGTH) " characters or less\n\n");

        return _function(name, args...);
 8081a9c:	6846      	ldr	r6, [r0, #4]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081a9e:	2400      	movs	r4, #0
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081aa0:	200c      	movs	r0, #12
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081aa2:	9402      	str	r4, [sp, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081aa4:	f7fe fafb 	bl	808009e <_Znwj>
 8081aa8:	b110      	cbz	r0, 8081ab0 <_ZN6Tester5setupEv+0x18>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
 8081aaa:	4b16      	ldr	r3, [pc, #88]	; (8081b04 <_ZN6Tester5setupEv+0x6c>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8081aac:	e880 0038 	stmia.w	r0, {r3, r4, r5}
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8081ab0:	4b15      	ldr	r3, [pc, #84]	; (8081b08 <_ZN6Tester5setupEv+0x70>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081ab2:	9000      	str	r0, [sp, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8081ab4:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 8081ab6:	4b15      	ldr	r3, [pc, #84]	; (8081b0c <_ZN6Tester5setupEv+0x74>)
    static bool _function(const char *funcKey, user_std_function_int_str_t func, void* reserved=NULL)
    {
        bool success = false;
        if (func) // if the call-wrapper has wrapped a callable object
        {
            auto wrapper = new user_std_function_int_str_t(func);
 8081ab8:	2010      	movs	r0, #16
 8081aba:	9302      	str	r3, [sp, #8]
 8081abc:	f7fe faef 	bl	808009e <_Znwj>
 8081ac0:	4604      	mov	r4, r0
 8081ac2:	b178      	cbz	r0, 8081ae4 <_ZN6Tester5setupEv+0x4c>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081ac4:	2300      	movs	r3, #0
 8081ac6:	6083      	str	r3, [r0, #8]
 8081ac8:	9b02      	ldr	r3, [sp, #8]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8081aca:	b133      	cbz	r3, 8081ada <_ZN6Tester5setupEv+0x42>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8081acc:	2202      	movs	r2, #2
 8081ace:	4669      	mov	r1, sp
 8081ad0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8081ad2:	9b03      	ldr	r3, [sp, #12]
 8081ad4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8081ad6:	9b02      	ldr	r3, [sp, #8]
 8081ad8:	60a3      	str	r3, [r4, #8]
            if (wrapper) {
                success = register_function(call_std_user_function, wrapper, funcKey);
 8081ada:	4632      	mov	r2, r6
 8081adc:	4621      	mov	r1, r4
 8081ade:	480c      	ldr	r0, [pc, #48]	; (8081b10 <_ZN6Tester5setupEv+0x78>)
 8081ae0:	f004 fdfc 	bl	80866dc <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 8081ae4:	9b02      	ldr	r3, [sp, #8]
 8081ae6:	b11b      	cbz	r3, 8081af0 <_ZN6Tester5setupEv+0x58>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8081ae8:	2203      	movs	r2, #3
 8081aea:	4669      	mov	r1, sp
 8081aec:	4668      	mov	r0, sp
 8081aee:	4798      	blx	r3
	Particle.function(functionName, &Tester::functionHandler, this);
	if (sleepTestPin >= 0) {
 8081af0:	68a8      	ldr	r0, [r5, #8]
 8081af2:	2800      	cmp	r0, #0
 8081af4:	db03      	blt.n	8081afe <_ZN6Tester5setupEv+0x66>
		pinMode(sleepTestPin, INPUT_PULLUP);
 8081af6:	2102      	movs	r1, #2
 8081af8:	b280      	uxth	r0, r0
 8081afa:	f005 fe45 	bl	8087788 <pinMode>
	}
}
 8081afe:	b004      	add	sp, #16
 8081b00:	bd70      	pop	{r4, r5, r6, pc}
 8081b02:	bf00      	nop
 8081b04:	08081a35 	.word	0x08081a35
 8081b08:	080819fd 	.word	0x080819fd
 8081b0c:	08081a45 	.word	0x08081a45
 8081b10:	08086699 	.word	0x08086699

08081b14 <_ZN6Tester14processOptionsEPc>:

	return 0;
}

// This does the actual work from the Particle.function(). It's called from looo().
void Tester::processOptions(char *mutableData) {
 8081b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081b16:	4606      	mov	r6, r0
 8081b18:	b08f      	sub	sp, #60	; 0x3c
 8081b1a:	4608      	mov	r0, r1
	// Parse argument into space-separated fields
	const char *argv[MAX_ARGS];
	size_t argc = 0;

	char *cp = strtok(mutableData, " ");
 8081b1c:	497f      	ldr	r1, [pc, #508]	; (8081d1c <_ZN6Tester14processOptionsEPc+0x208>)
 8081b1e:	f008 f957 	bl	8089dd0 <strtok>
 8081b22:	2400      	movs	r4, #0
	while(cp && argc < MAX_ARGS) {
 8081b24:	b150      	cbz	r0, 8081b3c <_ZN6Tester14processOptionsEPc+0x28>
 8081b26:	2c05      	cmp	r4, #5
 8081b28:	d00b      	beq.n	8081b42 <_ZN6Tester14processOptionsEPc+0x2e>
		argv[argc++] = cp;
 8081b2a:	ab09      	add	r3, sp, #36	; 0x24
 8081b2c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
		cp = strtok(NULL, " ");
 8081b30:	497a      	ldr	r1, [pc, #488]	; (8081d1c <_ZN6Tester14processOptionsEPc+0x208>)
 8081b32:	2000      	movs	r0, #0
 8081b34:	f008 f94c 	bl	8089dd0 <strtok>
 8081b38:	3401      	adds	r4, #1
	// Parse argument into space-separated fields
	const char *argv[MAX_ARGS];
	size_t argc = 0;

	char *cp = strtok(mutableData, " ");
	while(cp && argc < MAX_ARGS) {
 8081b3a:	e7f3      	b.n	8081b24 <_ZN6Tester14processOptionsEPc+0x10>
		argv[argc++] = cp;
		cp = strtok(NULL, " ");
	}
	if (argc == 0) {
 8081b3c:	2c00      	cmp	r4, #0
 8081b3e:	f000 80ea 	beq.w	8081d16 <_ZN6Tester14processOptionsEPc+0x202>
		return;
	}

	// Delay a bit here to make sure the function result is returned, otherwise if we
	// immediately go to sleep the function may return a timeout error.
	delay(500);
 8081b42:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8081b46:	f004 fbe7 	bl	8086318 <delay>

	// Process options here
	if (strcmp(argv[0], "reset") == 0) {
 8081b4a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8081b4c:	4974      	ldr	r1, [pc, #464]	; (8081d20 <_ZN6Tester14processOptionsEPc+0x20c>)
 8081b4e:	4628      	mov	r0, r5
 8081b50:	f007 fbb8 	bl	80892c4 <strcmp>
 8081b54:	b930      	cbnz	r0, 8081b64 <_ZN6Tester14processOptionsEPc+0x50>
		ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_TESTER_RESET);
 8081b56:	2100      	movs	r1, #0
 8081b58:	200a      	movs	r0, #10
 8081b5a:	f000 fe13 	bl	8082784 <_ZN16ConnectionEvents8addEventEii>
		System.reset();
 8081b5e:	f002 ff71 	bl	8084a44 <_ZN11SystemClass5resetEv>
 8081b62:	e0d8      	b.n	8081d16 <_ZN6Tester14processOptionsEPc+0x202>
	}
	else
	if (strcmp(argv[0], "modemReset") == 0) {
 8081b64:	496f      	ldr	r1, [pc, #444]	; (8081d24 <_ZN6Tester14processOptionsEPc+0x210>)
 8081b66:	4628      	mov	r0, r5
 8081b68:	f007 fbac 	bl	80892c4 <strcmp>
 8081b6c:	4601      	mov	r1, r0
 8081b6e:	b950      	cbnz	r0, 8081b86 <_ZN6Tester14processOptionsEPc+0x72>
	inline ConnectionCheck &withListenWaitForReboot(unsigned long value) { listenWaitForReboot = value; return *this; };
	inline ConnectionCheck &withCloudWaitForReboot(unsigned long value) { cloudWaitForReboot = value; return *this; };
	inline ConnectionCheck &withPingTimeout(unsigned long value) { pingTimeout = value; return *this; };
	inline ConnectionCheck &withFailureSleepSec(unsigned long value) { failureSleepSec = value; return *this; };

	static inline ConnectionCheck *getInstance() { return instance; };
 8081b70:	4c6d      	ldr	r4, [pc, #436]	; (8081d28 <_ZN6Tester14processOptionsEPc+0x214>)
		if (ConnectionCheck::getInstance()) {
 8081b72:	6823      	ldr	r3, [r4, #0]
 8081b74:	2b00      	cmp	r3, #0
 8081b76:	d0ee      	beq.n	8081b56 <_ZN6Tester14processOptionsEPc+0x42>
			ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_TESTER_RESET_MODEM);
 8081b78:	2011      	movs	r0, #17
 8081b7a:	f000 fe03 	bl	8082784 <_ZN16ConnectionEvents8addEventEii>
			ConnectionCheck::getInstance()->fullModemReset();
 8081b7e:	6820      	ldr	r0, [r4, #0]
 8081b80:	f000 f98e 	bl	8081ea0 <_ZN15ConnectionCheck14fullModemResetEv>
 8081b84:	e0c7      	b.n	8081d16 <_ZN6Tester14processOptionsEPc+0x202>
			ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_TESTER_RESET);
			System.reset();
		}
	}
	else
	if (strcmp(argv[0], "resetSession") == 0) {
 8081b86:	4969      	ldr	r1, [pc, #420]	; (8081d2c <_ZN6Tester14processOptionsEPc+0x218>)
 8081b88:	4628      	mov	r0, r5
 8081b8a:	f007 fb9b 	bl	80892c4 <strcmp>
 8081b8e:	4601      	mov	r1, r0
 8081b90:	bb28      	cbnz	r0, 8081bde <_ZN6Tester14processOptionsEPc+0xca>
		ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_TESTER_RESET_SESSION);
 8081b92:	2010      	movs	r0, #16
 8081b94:	f000 fdf6 	bl	8082784 <_ZN16ConnectionEvents8addEventEii>
 8081b98:	4b65      	ldr	r3, [pc, #404]	; (8081d30 <_ZN6Tester14processOptionsEPc+0x21c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8081b9a:	4a66      	ldr	r2, [pc, #408]	; (8081d34 <_ZN6Tester14processOptionsEPc+0x220>)
 8081b9c:	781b      	ldrb	r3, [r3, #0]
 8081b9e:	4966      	ldr	r1, [pc, #408]	; (8081d38 <_ZN6Tester14processOptionsEPc+0x224>)
 8081ba0:	f88d 3000 	strb.w	r3, [sp]
 8081ba4:	a807      	add	r0, sp, #28
 8081ba6:	233c      	movs	r3, #60	; 0x3c
 8081ba8:	f004 fea8 	bl	80868fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 8081bac:	9c08      	ldr	r4, [sp, #32]
 8081bae:	2c00      	cmp	r4, #0
 8081bb0:	f000 80b1 	beq.w	8081d16 <_ZN6Tester14processOptionsEPc+0x202>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 8081bb4:	6863      	ldr	r3, [r4, #4]
 8081bb6:	3b01      	subs	r3, #1
 8081bb8:	6063      	str	r3, [r4, #4]
 8081bba:	2b00      	cmp	r3, #0
 8081bbc:	f040 80ab 	bne.w	8081d16 <_ZN6Tester14processOptionsEPc+0x202>
        {
          _M_dispose();
 8081bc0:	6823      	ldr	r3, [r4, #0]
 8081bc2:	4620      	mov	r0, r4
 8081bc4:	689b      	ldr	r3, [r3, #8]
 8081bc6:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8081bc8:	68a3      	ldr	r3, [r4, #8]
 8081bca:	3b01      	subs	r3, #1
 8081bcc:	60a3      	str	r3, [r4, #8]
 8081bce:	2b00      	cmp	r3, #0
 8081bd0:	f040 80a1 	bne.w	8081d16 <_ZN6Tester14processOptionsEPc+0x202>
            _M_destroy();
 8081bd4:	6823      	ldr	r3, [r4, #0]
 8081bd6:	4620      	mov	r0, r4
 8081bd8:	68db      	ldr	r3, [r3, #12]
 8081bda:	4798      	blx	r3
 8081bdc:	e09b      	b.n	8081d16 <_ZN6Tester14processOptionsEPc+0x202>
		Particle.publish("spark/device/session/end", "", PRIVATE);
	}
	else
	if (strcmp(argv[0], "safeMode") == 0) {
 8081bde:	4957      	ldr	r1, [pc, #348]	; (8081d3c <_ZN6Tester14processOptionsEPc+0x228>)
 8081be0:	4628      	mov	r0, r5
 8081be2:	f007 fb6f 	bl	80892c4 <strcmp>
 8081be6:	4607      	mov	r7, r0
 8081be8:	b938      	cbnz	r0, 8081bfa <_ZN6Tester14processOptionsEPc+0xe6>
		ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_TESTER_SAFE_MODE);
 8081bea:	4601      	mov	r1, r0
 8081bec:	2013      	movs	r0, #19
 8081bee:	f000 fdc9 	bl	8082784 <_ZN16ConnectionEvents8addEventEii>
    static void dfu(bool persist=false);
    static void reset(void);
    static void reset(uint32_t data);

    static void enterSafeMode(void) {
        HAL_Core_Enter_Safe_Mode(NULL);
 8081bf2:	4638      	mov	r0, r7
 8081bf4:	f002 face 	bl	8084194 <HAL_Core_Enter_Safe_Mode>
 8081bf8:	e08d      	b.n	8081d16 <_ZN6Tester14processOptionsEPc+0x202>
		System.enterSafeMode();
	}
	else
	if (strcmp(argv[0], "appWatchdog") == 0) {
 8081bfa:	4951      	ldr	r1, [pc, #324]	; (8081d40 <_ZN6Tester14processOptionsEPc+0x22c>)
 8081bfc:	4628      	mov	r0, r5
 8081bfe:	f007 fb61 	bl	80892c4 <strcmp>
 8081c02:	4601      	mov	r1, r0
 8081c04:	b918      	cbnz	r0, 8081c0e <_ZN6Tester14processOptionsEPc+0xfa>
		ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_TESTER_APP_WATCHDOG, 0);
 8081c06:	200b      	movs	r0, #11
 8081c08:	f000 fdbc 	bl	8082784 <_ZN16ConnectionEvents8addEventEii>
 8081c0c:	e7fe      	b.n	8081c0c <_ZN6Tester14processOptionsEPc+0xf8>
		while(true) {
			// Infinite loop!
		}
	}
	else
	if (strcmp(argv[0], "sleep") == 0 && argc >= 2) {
 8081c0e:	494d      	ldr	r1, [pc, #308]	; (8081d44 <_ZN6Tester14processOptionsEPc+0x230>)
 8081c10:	4628      	mov	r0, r5
 8081c12:	f007 fb57 	bl	80892c4 <strcmp>
 8081c16:	2800      	cmp	r0, #0
 8081c18:	d161      	bne.n	8081cde <_ZN6Tester14processOptionsEPc+0x1ca>
 8081c1a:	2c01      	cmp	r4, #1
 8081c1c:	d05f      	beq.n	8081cde <_ZN6Tester14processOptionsEPc+0x1ca>
		// example usage from the Particle CLI:
		// particle call electron2 testerFn "sleep networkStandby 15"

		// optional duration in seconds, if not specified the default is 30
		int duration = 30;
		if (argc >= 3) {
 8081c1e:	2c02      	cmp	r4, #2
 8081c20:	d101      	bne.n	8081c26 <_ZN6Tester14processOptionsEPc+0x112>
	if (strcmp(argv[0], "sleep") == 0 && argc >= 2) {
		// example usage from the Particle CLI:
		// particle call electron2 testerFn "sleep networkStandby 15"

		// optional duration in seconds, if not specified the default is 30
		int duration = 30;
 8081c22:	241e      	movs	r4, #30
 8081c24:	e005      	b.n	8081c32 <_ZN6Tester14processOptionsEPc+0x11e>
		if (argc >= 3) {
			duration = atoi(argv[2]);
 8081c26:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8081c28:	f007 f9d0 	bl	8088fcc <atoi>
			if (duration == 0) {
 8081c2c:	4604      	mov	r4, r0
 8081c2e:	2800      	cmp	r0, #0
 8081c30:	d0f7      	beq.n	8081c22 <_ZN6Tester14processOptionsEPc+0x10e>
				duration = 30;
			}
		}

		ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_TESTER_SLEEP, duration);
 8081c32:	4621      	mov	r1, r4
 8081c34:	200c      	movs	r0, #12
 8081c36:	f000 fda5 	bl	8082784 <_ZN16ConnectionEvents8addEventEii>

		if (strcmp(argv[1], "deep") == 0) {
 8081c3a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8081c3c:	4942      	ldr	r1, [pc, #264]	; (8081d48 <_ZN6Tester14processOptionsEPc+0x234>)
 8081c3e:	4628      	mov	r0, r5
 8081c40:	f007 fb40 	bl	80892c4 <strcmp>
 8081c44:	b908      	cbnz	r0, 8081c4a <_ZN6Tester14processOptionsEPc+0x136>
			// SLEEP_MODE_DEEP requires cellular handshaking again (blinking green) and also
			// restarts running setup() again, so you'll get an event 0 (CONNECTION_EVENT_SETUP_STARTED)
			System.sleep(SLEEP_MODE_DEEP, duration);
 8081c46:	4b41      	ldr	r3, [pc, #260]	; (8081d4c <_ZN6Tester14processOptionsEPc+0x238>)
 8081c48:	e005      	b.n	8081c56 <_ZN6Tester14processOptionsEPc+0x142>
		}
		else
		if (strcmp(argv[1], "deepStandby") == 0) {
 8081c4a:	4941      	ldr	r1, [pc, #260]	; (8081d50 <_ZN6Tester14processOptionsEPc+0x23c>)
 8081c4c:	4628      	mov	r0, r5
 8081c4e:	f007 fb39 	bl	80892c4 <strcmp>
 8081c52:	b938      	cbnz	r0, 8081c64 <_ZN6Tester14processOptionsEPc+0x150>
			// SLEEP_MODE_DEEP requires cellular handshaking again (blinking green) and also
			// restarts running setup() again, so you'll get an event 0 (CONNECTION_EVENT_SETUP_STARTED)
			System.sleep(SLEEP_MODE_DEEP, duration, SLEEP_NETWORK_STANDBY);
 8081c54:	4b3f      	ldr	r3, [pc, #252]	; (8081d54 <_ZN6Tester14processOptionsEPc+0x240>)
 8081c56:	681b      	ldr	r3, [r3, #0]
 8081c58:	4622      	mov	r2, r4
 8081c5a:	2101      	movs	r1, #1
 8081c5c:	a807      	add	r0, sp, #28
 8081c5e:	f002 fef5 	bl	8084a4c <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
 8081c62:	e058      	b.n	8081d16 <_ZN6Tester14processOptionsEPc+0x202>
		}
		else
		if (strcmp(argv[1], "stop") == 0) {
 8081c64:	493c      	ldr	r1, [pc, #240]	; (8081d58 <_ZN6Tester14processOptionsEPc+0x244>)
 8081c66:	4628      	mov	r0, r5
 8081c68:	f007 fb2c 	bl	80892c4 <strcmp>
 8081c6c:	4607      	mov	r7, r0
 8081c6e:	b9a8      	cbnz	r0, 8081c9c <_ZN6Tester14processOptionsEPc+0x188>
			// stop mode sleep stops the processor but execution will continue in loop() without going through setup again
			// This mode will shut down the cellular modem to save power so upon wake it requires cellular handshaking
			// again (blinking green)
			if (sleepTestPin >= 0) {
 8081c70:	68b3      	ldr	r3, [r6, #8]
 8081c72:	2b00      	cmp	r3, #0
 8081c74:	db4f      	blt.n	8081d16 <_ZN6Tester14processOptionsEPc+0x202>
 8081c76:	4a35      	ldr	r2, [pc, #212]	; (8081d4c <_ZN6Tester14processOptionsEPc+0x238>)
 8081c78:	f8ad 3018 	strh.w	r3, [sp, #24]
 8081c7c:	6812      	ldr	r2, [r2, #0]
 8081c7e:	2302      	movs	r3, #2
    inline static SleepResult sleep(Spark_Sleep_TypeDef sleepMode, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(sleepMode, flag, s.count()); }

    inline static SleepResult sleep(long seconds) { return sleep(SLEEP_MODE_WLAN, seconds); }
    inline static SleepResult sleep(std::chrono::seconds s) { return sleep(s.count()); }

    inline static SleepResult sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF) { return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag); }
 8081c80:	9202      	str	r2, [sp, #8]
 8081c82:	2201      	movs	r2, #1
 8081c84:	f88d 3016 	strb.w	r3, [sp, #22]
 8081c88:	a906      	add	r1, sp, #24
 8081c8a:	9401      	str	r4, [sp, #4]
 8081c8c:	9200      	str	r2, [sp, #0]
 8081c8e:	f10d 0316 	add.w	r3, sp, #22
 8081c92:	a807      	add	r0, sp, #28
 8081c94:	f002 ff18 	bl	8084ac8 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
				System.sleep(sleepTestPin, FALLING, duration);

				ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_STOP_SLEEP_WAKE, 0);
 8081c98:	4639      	mov	r1, r7
 8081c9a:	e01c      	b.n	8081cd6 <_ZN6Tester14processOptionsEPc+0x1c2>
			}
		}
		else
		if (strcmp(argv[1], "stopStandby") == 0) {
 8081c9c:	4628      	mov	r0, r5
 8081c9e:	492f      	ldr	r1, [pc, #188]	; (8081d5c <_ZN6Tester14processOptionsEPc+0x248>)
 8081ca0:	f007 fb10 	bl	80892c4 <strcmp>
 8081ca4:	4605      	mov	r5, r0
 8081ca6:	2800      	cmp	r0, #0
 8081ca8:	d135      	bne.n	8081d16 <_ZN6Tester14processOptionsEPc+0x202>
			// stop mode sleep stops the processor but execution will continue in loop() without going through setup again
			// This mode keeps the cellular modem alive, so you should go right back into blinking cyan to handshake
			// to the cloud only
			if (sleepTestPin >= 0) {
 8081caa:	68b3      	ldr	r3, [r6, #8]
 8081cac:	2b00      	cmp	r3, #0
 8081cae:	db32      	blt.n	8081d16 <_ZN6Tester14processOptionsEPc+0x202>
 8081cb0:	4a28      	ldr	r2, [pc, #160]	; (8081d54 <_ZN6Tester14processOptionsEPc+0x240>)
 8081cb2:	f8ad 301a 	strh.w	r3, [sp, #26]
 8081cb6:	6812      	ldr	r2, [r2, #0]
 8081cb8:	2302      	movs	r3, #2
 8081cba:	9202      	str	r2, [sp, #8]
 8081cbc:	2201      	movs	r2, #1
 8081cbe:	f88d 3017 	strb.w	r3, [sp, #23]
 8081cc2:	f10d 011a 	add.w	r1, sp, #26
 8081cc6:	9401      	str	r4, [sp, #4]
 8081cc8:	9200      	str	r2, [sp, #0]
 8081cca:	f10d 0317 	add.w	r3, sp, #23
 8081cce:	a807      	add	r0, sp, #28
 8081cd0:	f002 fefa 	bl	8084ac8 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
				System.sleep(sleepTestPin, FALLING, duration, SLEEP_NETWORK_STANDBY);

				ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_STOP_SLEEP_WAKE, 0);
 8081cd4:	4629      	mov	r1, r5
 8081cd6:	2015      	movs	r0, #21
 8081cd8:	f000 fd54 	bl	8082784 <_ZN16ConnectionEvents8addEventEii>
 8081cdc:	e01b      	b.n	8081d16 <_ZN6Tester14processOptionsEPc+0x202>
			}
		}
	}
	else
	if (strcmp(argv[0], "ping") == 0 && argc >= 2) {
 8081cde:	4920      	ldr	r1, [pc, #128]	; (8081d60 <_ZN6Tester14processOptionsEPc+0x24c>)
 8081ce0:	4628      	mov	r0, r5
 8081ce2:	f007 faef 	bl	80892c4 <strcmp>
 8081ce6:	b9b0      	cbnz	r0, 8081d16 <_ZN6Tester14processOptionsEPc+0x202>
 8081ce8:	2c01      	cmp	r4, #1
 8081cea:	d014      	beq.n	8081d16 <_ZN6Tester14processOptionsEPc+0x202>
		// example usage from the Particle CLI:
		// particle call electron2 testerFn "ping start 30"
		// particle call electron2 testerFn "ping stop"
		if (strcmp(argv[1], "start") == 0) {
 8081cec:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8081cee:	491d      	ldr	r1, [pc, #116]	; (8081d64 <_ZN6Tester14processOptionsEPc+0x250>)
 8081cf0:	4628      	mov	r0, r5
 8081cf2:	f007 fae7 	bl	80892c4 <strcmp>
 8081cf6:	b940      	cbnz	r0, 8081d0a <_ZN6Tester14processOptionsEPc+0x1f6>
			if (argc >= 3) {
 8081cf8:	2c02      	cmp	r4, #2
 8081cfa:	d003      	beq.n	8081d04 <_ZN6Tester14processOptionsEPc+0x1f0>
				pingInterval = (unsigned long) atoi(argv[2]);
 8081cfc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8081cfe:	f007 f965 	bl	8088fcc <atoi>
 8081d02:	e007      	b.n	8081d14 <_ZN6Tester14processOptionsEPc+0x200>
			}
			else {
				pingInterval = 30;
 8081d04:	231e      	movs	r3, #30
 8081d06:	6173      	str	r3, [r6, #20]
 8081d08:	e005      	b.n	8081d16 <_ZN6Tester14processOptionsEPc+0x202>
			}
		}
		else
		if (strcmp(argv[1], "stop") == 0) {
 8081d0a:	4913      	ldr	r1, [pc, #76]	; (8081d58 <_ZN6Tester14processOptionsEPc+0x244>)
 8081d0c:	4628      	mov	r0, r5
 8081d0e:	f007 fad9 	bl	80892c4 <strcmp>
 8081d12:	b900      	cbnz	r0, 8081d16 <_ZN6Tester14processOptionsEPc+0x202>
			pingInterval = 0;
 8081d14:	6170      	str	r0, [r6, #20]
		}

	}

}
 8081d16:	b00f      	add	sp, #60	; 0x3c
 8081d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8081d1a:	bf00      	nop
 8081d1c:	0808b2a9 	.word	0x0808b2a9
 8081d20:	0808ac20 	.word	0x0808ac20
 8081d24:	0808ac26 	.word	0x0808ac26
 8081d28:	200002dc 	.word	0x200002dc
 8081d2c:	0808ac31 	.word	0x0808ac31
 8081d30:	200002cd 	.word	0x200002cd
 8081d34:	0808acc4 	.word	0x0808acc4
 8081d38:	0808ac3e 	.word	0x0808ac3e
 8081d3c:	0808ac57 	.word	0x0808ac57
 8081d40:	0808ac60 	.word	0x0808ac60
 8081d44:	0808ac6c 	.word	0x0808ac6c
 8081d48:	0808ac72 	.word	0x0808ac72
 8081d4c:	200002d0 	.word	0x200002d0
 8081d50:	0808ac77 	.word	0x0808ac77
 8081d54:	200002d4 	.word	0x200002d4
 8081d58:	0808ac83 	.word	0x0808ac83
 8081d5c:	0808ac88 	.word	0x0808ac88
 8081d60:	0808ac94 	.word	0x0808ac94
 8081d64:	0808ac99 	.word	0x0808ac99

08081d68 <_ZN6Tester4loopEv>:
	if (sleepTestPin >= 0) {
		pinMode(sleepTestPin, INPUT_PULLUP);
	}
}

void Tester::loop() {
 8081d68:	b510      	push	{r4, lr}

	if (functionData) {
 8081d6a:	68c1      	ldr	r1, [r0, #12]
	if (sleepTestPin >= 0) {
		pinMode(sleepTestPin, INPUT_PULLUP);
	}
}

void Tester::loop() {
 8081d6c:	4604      	mov	r4, r0

	if (functionData) {
 8081d6e:	b131      	cbz	r1, 8081d7e <_ZN6Tester4loopEv+0x16>
		processOptions(functionData);
 8081d70:	f7ff fed0 	bl	8081b14 <_ZN6Tester14processOptionsEPc>
		free(functionData);
 8081d74:	68e0      	ldr	r0, [r4, #12]
 8081d76:	f002 fce3 	bl	8084740 <free>
		functionData = NULL;
 8081d7a:	2300      	movs	r3, #0
 8081d7c:	60e3      	str	r3, [r4, #12]
	}

	if (pingInterval > 0) {
 8081d7e:	6963      	ldr	r3, [r4, #20]
 8081d80:	2b00      	cmp	r3, #0
 8081d82:	dd14      	ble.n	8081dae <_ZN6Tester4loopEv+0x46>
 8081d84:	f002 f9ee 	bl	8084164 <HAL_Timer_Get_Milli_Seconds>
		if (millis() - lastPing >= (unsigned long) (pingInterval * 1000)) {
 8081d88:	6923      	ldr	r3, [r4, #16]
 8081d8a:	6962      	ldr	r2, [r4, #20]
 8081d8c:	1ac0      	subs	r0, r0, r3
 8081d8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8081d92:	4353      	muls	r3, r2
 8081d94:	4298      	cmp	r0, r3
 8081d96:	d30a      	bcc.n	8081dae <_ZN6Tester4loopEv+0x46>
 8081d98:	f002 f9e4 	bl	8084164 <HAL_Timer_Get_Milli_Seconds>
			lastPing = millis();

			ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_TESTER_PING, ++pingCounter);
 8081d9c:	69a1      	ldr	r1, [r4, #24]
		functionData = NULL;
	}

	if (pingInterval > 0) {
		if (millis() - lastPing >= (unsigned long) (pingInterval * 1000)) {
			lastPing = millis();
 8081d9e:	6120      	str	r0, [r4, #16]

			ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_TESTER_PING, ++pingCounter);
 8081da0:	3101      	adds	r1, #1
 8081da2:	61a1      	str	r1, [r4, #24]
 8081da4:	2014      	movs	r0, #20
		}
	}
}
 8081da6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

	if (pingInterval > 0) {
		if (millis() - lastPing >= (unsigned long) (pingInterval * 1000)) {
			lastPing = millis();

			ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_TESTER_PING, ++pingCounter);
 8081daa:	f000 bceb 	b.w	8082784 <_ZN16ConnectionEvents8addEventEii>
 8081dae:	bd10      	pop	{r4, pc}

08081db0 <_GLOBAL__sub_I__ZN6TesterC2EPKci>:
 8081db0:	4b04      	ldr	r3, [pc, #16]	; (8081dc4 <_GLOBAL__sub_I__ZN6TesterC2EPKci+0x14>)
 8081db2:	2200      	movs	r2, #0
 8081db4:	601a      	str	r2, [r3, #0]
 8081db6:	4a04      	ldr	r2, [pc, #16]	; (8081dc8 <_GLOBAL__sub_I__ZN6TesterC2EPKci+0x18>)
 8081db8:	2301      	movs	r3, #1
 8081dba:	6013      	str	r3, [r2, #0]
 8081dbc:	4a03      	ldr	r2, [pc, #12]	; (8081dcc <_GLOBAL__sub_I__ZN6TesterC2EPKci+0x1c>)
 8081dbe:	7013      	strb	r3, [r2, #0]
 8081dc0:	f002 b910 	b.w	8083fe4 <HAL_Pin_Map>
 8081dc4:	200002d0 	.word	0x200002d0
 8081dc8:	200002d4 	.word	0x200002d4
 8081dcc:	200002cd 	.word	0x200002cd

08081dd0 <_ZN15ConnectionCheckD1Ev>:
		connectionCheckRetainedData.numFailures = 0;
	}
}
ConnectionCheck::~ConnectionCheck() {

}
 8081dd0:	4770      	bx	lr

08081dd2 <_ZN15ConnectionCheckD0Ev>:
	if (connectionCheckRetainedData.magic != CONNECTION_CHECK_MAGIC) {
		connectionCheckRetainedData.magic = CONNECTION_CHECK_MAGIC;
		connectionCheckRetainedData.numFailures = 0;
	}
}
ConnectionCheck::~ConnectionCheck() {
 8081dd2:	b510      	push	{r4, lr}
 8081dd4:	4604      	mov	r4, r0

}
 8081dd6:	2120      	movs	r1, #32
 8081dd8:	f005 fe2c 	bl	8087a34 <_ZdlPvj>
 8081ddc:	4620      	mov	r0, r4
 8081dde:	bd10      	pop	{r4, pc}

08081de0 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 8081de0:	b40e      	push	{r1, r2, r3}
 8081de2:	b500      	push	{lr}
 8081de4:	b08c      	sub	sp, #48	; 0x30
 8081de6:	aa0d      	add	r2, sp, #52	; 0x34
 8081de8:	f852 1b04 	ldr.w	r1, [r2], #4
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 8081dec:	2320      	movs	r3, #32
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8081dee:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
 8081df2:	9203      	str	r2, [sp, #12]
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 8081df4:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8081df6:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 8081df8:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8081dfa:	aa04      	add	r2, sp, #16
 8081dfc:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 8081dfe:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8081e00:	f002 fb70 	bl	80844e4 <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
 8081e04:	b00c      	add	sp, #48	; 0x30
 8081e06:	f85d eb04 	ldr.w	lr, [sp], #4
 8081e0a:	b003      	add	sp, #12
 8081e0c:	4770      	bx	lr
	...

08081e10 <_ZN15ConnectionCheckC1Ev>:

ConnectionCheck *ConnectionCheck::instance;

retained ConnectionCheckRetainedData ConnectionCheck::connectionCheckRetainedData;

ConnectionCheck::ConnectionCheck()  {
 8081e10:	4b0d      	ldr	r3, [pc, #52]	; (8081e48 <_ZN15ConnectionCheckC1Ev+0x38>)
 8081e12:	b510      	push	{r4, lr}
 8081e14:	6003      	str	r3, [r0, #0]
 8081e16:	f247 5330 	movw	r3, #30000	; 0x7530
 8081e1a:	6043      	str	r3, [r0, #4]
 8081e1c:	4b0b      	ldr	r3, [pc, #44]	; (8081e4c <_ZN15ConnectionCheckC1Ev+0x3c>)
	instance = this;
 8081e1e:	4a0c      	ldr	r2, [pc, #48]	; (8081e50 <_ZN15ConnectionCheckC1Ev+0x40>)

ConnectionCheck *ConnectionCheck::instance;

retained ConnectionCheckRetainedData ConnectionCheck::connectionCheckRetainedData;

ConnectionCheck::ConnectionCheck()  {
 8081e20:	6083      	str	r3, [r0, #8]
 8081e22:	f242 7310 	movw	r3, #10000	; 0x2710
	instance = this;
 8081e26:	6010      	str	r0, [r2, #0]
	if (connectionCheckRetainedData.magic != CONNECTION_CHECK_MAGIC) {
 8081e28:	4a0a      	ldr	r2, [pc, #40]	; (8081e54 <_ZN15ConnectionCheckC1Ev+0x44>)
 8081e2a:	490b      	ldr	r1, [pc, #44]	; (8081e58 <_ZN15ConnectionCheckC1Ev+0x48>)
 8081e2c:	6814      	ldr	r4, [r2, #0]

ConnectionCheck *ConnectionCheck::instance;

retained ConnectionCheckRetainedData ConnectionCheck::connectionCheckRetainedData;

ConnectionCheck::ConnectionCheck()  {
 8081e2e:	60c3      	str	r3, [r0, #12]
	instance = this;
	if (connectionCheckRetainedData.magic != CONNECTION_CHECK_MAGIC) {
 8081e30:	428c      	cmp	r4, r1

ConnectionCheck *ConnectionCheck::instance;

retained ConnectionCheckRetainedData ConnectionCheck::connectionCheckRetainedData;

ConnectionCheck::ConnectionCheck()  {
 8081e32:	f04f 0300 	mov.w	r3, #0
	instance = this;
	if (connectionCheckRetainedData.magic != CONNECTION_CHECK_MAGIC) {
		connectionCheckRetainedData.magic = CONNECTION_CHECK_MAGIC;
		connectionCheckRetainedData.numFailures = 0;
 8081e36:	bf18      	it	ne
 8081e38:	e882 000a 	stmiane.w	r2, {r1, r3}

ConnectionCheck *ConnectionCheck::instance;

retained ConnectionCheckRetainedData ConnectionCheck::connectionCheckRetainedData;

ConnectionCheck::ConnectionCheck()  {
 8081e3c:	6103      	str	r3, [r0, #16]
 8081e3e:	7503      	strb	r3, [r0, #20]
 8081e40:	7543      	strb	r3, [r0, #21]
 8081e42:	6183      	str	r3, [r0, #24]
 8081e44:	61c3      	str	r3, [r0, #28]
	instance = this;
	if (connectionCheckRetainedData.magic != CONNECTION_CHECK_MAGIC) {
		connectionCheckRetainedData.magic = CONNECTION_CHECK_MAGIC;
		connectionCheckRetainedData.numFailures = 0;
	}
}
 8081e46:	bd10      	pop	{r4, pc}
 8081e48:	0808aca8 	.word	0x0808aca8
 8081e4c:	0002bf20 	.word	0x0002bf20
 8081e50:	200002dc 	.word	0x200002dc
 8081e54:	40024000 	.word	0x40024000
 8081e58:	2e4ec594 	.word	0x2e4ec594

08081e5c <_ZN15ConnectionCheck5setupEv>:
ConnectionCheck::~ConnectionCheck() {

}

void ConnectionCheck::setup() {
 8081e5c:	4770      	bx	lr
	...

08081e60 <_ZN15ConnectionCheck17cloudConnectDebugEv>:


// This is called when timing out connecting to the cloud. It adds some debugging events to
// help log the current state for debugging purposes.
// It returns true to force a modem reset immediately, false to use the normal logic for whether to reset the modem.
bool ConnectionCheck::cloudConnectDebug() {
 8081e60:	b510      	push	{r4, lr}
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
 8081e62:	2100      	movs	r1, #0
 8081e64:	68c2      	ldr	r2, [r0, #12]
 8081e66:	4604      	mov	r4, r0
 8081e68:	4b0b      	ldr	r3, [pc, #44]	; (8081e98 <_ZN15ConnectionCheck17cloudConnectDebugEv+0x38>)
 8081e6a:	4608      	mov	r0, r1
 8081e6c:	f002 faea 	bl	8084444 <cellular_command>
	int res = Cellular.command(pingTimeout, "AT+UPING=\"8.8.8.8\"\r\n");
	ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_PING_DNS, res);
 8081e70:	4601      	mov	r1, r0
 8081e72:	2007      	movs	r0, #7
 8081e74:	f000 fc86 	bl	8082784 <_ZN16ConnectionEvents8addEventEii>
 8081e78:	2100      	movs	r1, #0
 8081e7a:	68e2      	ldr	r2, [r4, #12]
 8081e7c:	4b07      	ldr	r3, [pc, #28]	; (8081e9c <_ZN15ConnectionCheck17cloudConnectDebugEv+0x3c>)
 8081e7e:	4608      	mov	r0, r1
 8081e80:	f002 fae0 	bl	8084444 <cellular_command>
 8081e84:	4604      	mov	r4, r0

	res = Cellular.command(pingTimeout, "AT+UPING=\"api.particle.io\"\r\n");
	ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_PING_API, res);
 8081e86:	4601      	mov	r1, r0
 8081e88:	2008      	movs	r0, #8
 8081e8a:	f000 fc7b 	bl	8082784 <_ZN16ConnectionEvents8addEventEii>

	// If pinging api.particle.io does not succeed, then reboot the modem right away
	return (res != RESP_OK);
}
 8081e8e:	1ca0      	adds	r0, r4, #2
 8081e90:	bf18      	it	ne
 8081e92:	2001      	movne	r0, #1
 8081e94:	bd10      	pop	{r4, pc}
 8081e96:	bf00      	nop
 8081e98:	0808acb0 	.word	0x0808acb0
 8081e9c:	0808acc5 	.word	0x0808acc5

08081ea0 <_ZN15ConnectionCheck14fullModemResetEv>:


// reason is the reason code, one of the ConnectionEvents::CONNECTION_EVENT_* constants
// forceResetMode will reset the modem even immediately instead of waiting for multiple failures
void ConnectionCheck::fullModemReset() {
 8081ea0:	b537      	push	{r0, r1, r2, r4, r5, lr}

	Log.info("resetting modem");
 8081ea2:	4917      	ldr	r1, [pc, #92]	; (8081f00 <_ZN15ConnectionCheck14fullModemResetEv+0x60>)
 8081ea4:	4817      	ldr	r0, [pc, #92]	; (8081f04 <_ZN15ConnectionCheck14fullModemResetEv+0x64>)
 8081ea6:	f7ff ff9b 	bl	8081de0 <_ZNK5spark6Logger4infoEPKcz>

	ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_MODEM_RESET);
 8081eaa:	2100      	movs	r1, #0
 8081eac:	2004      	movs	r0, #4
 8081eae:	f000 fc69 	bl	8082784 <_ZN16ConnectionEvents8addEventEii>
    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
 8081eb2:	f002 fc05 	bl	80846c0 <spark_cloud_flag_disconnect>
 8081eb6:	f002 f955 	bl	8084164 <HAL_Timer_Get_Milli_Seconds>
	// Disconnect from the cloud
	Particle.disconnect();

	// Wait up to 15 seconds to disconnect
	unsigned long startTime = millis();
	while(Particle.connected() && millis() - startTime < 15000) {
 8081eba:	f643 2597 	movw	r5, #14999	; 0x3a97
 8081ebe:	4604      	mov	r4, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8081ec0:	f002 fc06 	bl	80846d0 <spark_cloud_flag_connected>
 8081ec4:	b140      	cbz	r0, 8081ed8 <_ZN15ConnectionCheck14fullModemResetEv+0x38>
 8081ec6:	f002 f94d 	bl	8084164 <HAL_Timer_Get_Milli_Seconds>
 8081eca:	1b00      	subs	r0, r0, r4
 8081ecc:	42a8      	cmp	r0, r5
 8081ece:	d803      	bhi.n	8081ed8 <_ZN15ConnectionCheck14fullModemResetEv+0x38>
		delay(100);
 8081ed0:	2064      	movs	r0, #100	; 0x64
 8081ed2:	f004 fa21 	bl	8086318 <delay>
	// Disconnect from the cloud
	Particle.disconnect();

	// Wait up to 15 seconds to disconnect
	unsigned long startTime = millis();
	while(Particle.connected() && millis() - startTime < 15000) {
 8081ed6:	e7f3      	b.n	8081ec0 <_ZN15ConnectionCheck14fullModemResetEv+0x20>
 8081ed8:	2100      	movs	r1, #0
 8081eda:	4b0b      	ldr	r3, [pc, #44]	; (8081f08 <_ZN15ConnectionCheck14fullModemResetEv+0x68>)
 8081edc:	f247 5230 	movw	r2, #30000	; 0x7530
 8081ee0:	4608      	mov	r0, r1
 8081ee2:	f002 faaf 	bl	8084444 <cellular_command>

	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");

	delay(1000);
 8081ee6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8081eea:	f004 fa15 	bl	8086318 <delay>

	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
 8081eee:	4b07      	ldr	r3, [pc, #28]	; (8081f0c <_ZN15ConnectionCheck14fullModemResetEv+0x6c>)
 8081ef0:	220a      	movs	r2, #10
 8081ef2:	681b      	ldr	r3, [r3, #0]
 8081ef4:	2101      	movs	r1, #1
 8081ef6:	4668      	mov	r0, sp
 8081ef8:	f002 fda8 	bl	8084a4c <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
 8081efc:	b003      	add	sp, #12
 8081efe:	bd30      	pop	{r4, r5, pc}
 8081f00:	0808ace2 	.word	0x0808ace2
 8081f04:	20000414 	.word	0x20000414
 8081f08:	0808acf2 	.word	0x0808acf2
 8081f0c:	200002d8 	.word	0x200002d8

08081f10 <_ZN15ConnectionCheck4loopEv>:

void ConnectionCheck::setup() {

}

void ConnectionCheck::loop() {
 8081f10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8081f12:	4d45      	ldr	r5, [pc, #276]	; (8082028 <_ZN15ConnectionCheck4loopEv+0x118>)
 8081f14:	4604      	mov	r4, r0
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8081f16:	2200      	movs	r2, #0
 8081f18:	4611      	mov	r1, r2
 8081f1a:	6868      	ldr	r0, [r5, #4]
 8081f1c:	f002 fb78 	bl	8084610 <network_ready>
	// Check cellular status - used for event logging mostly
	bool temp = Cellular.ready();
	if (temp != isCellularReady) {
 8081f20:	7d23      	ldrb	r3, [r4, #20]
 8081f22:	4601      	mov	r1, r0
 8081f24:	4283      	cmp	r3, r0
 8081f26:	d00d      	beq.n	8081f44 <_ZN15ConnectionCheck4loopEv+0x34>
		// Cellular state changed
		isCellularReady = temp;
 8081f28:	7520      	strb	r0, [r4, #20]
		ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_CELLULAR_READY, isCellularReady);
 8081f2a:	2001      	movs	r0, #1
 8081f2c:	f000 fc2a 	bl	8082784 <_ZN16ConnectionEvents8addEventEii>

		Log.info("cellular %s", isCellularReady ? "up" : "down");
 8081f30:	7d21      	ldrb	r1, [r4, #20]
 8081f32:	4b3e      	ldr	r3, [pc, #248]	; (808202c <_ZN15ConnectionCheck4loopEv+0x11c>)
 8081f34:	4a3e      	ldr	r2, [pc, #248]	; (8082030 <_ZN15ConnectionCheck4loopEv+0x120>)
 8081f36:	483f      	ldr	r0, [pc, #252]	; (8082034 <_ZN15ConnectionCheck4loopEv+0x124>)
 8081f38:	2900      	cmp	r1, #0
 8081f3a:	bf08      	it	eq
 8081f3c:	461a      	moveq	r2, r3
 8081f3e:	493e      	ldr	r1, [pc, #248]	; (8082038 <_ZN15ConnectionCheck4loopEv+0x128>)
 8081f40:	f7ff ff4e 	bl	8081de0 <_ZNK5spark6Logger4infoEPKcz>
 8081f44:	f002 fbc4 	bl	80846d0 <spark_cloud_flag_connected>
	}

	// Check cloud connection status
	temp = Particle.connected();
	if (temp != isCloudConnected) {
 8081f48:	7d63      	ldrb	r3, [r4, #21]
 8081f4a:	4601      	mov	r1, r0
 8081f4c:	4283      	cmp	r3, r0
 8081f4e:	d016      	beq.n	8081f7e <_ZN15ConnectionCheck4loopEv+0x6e>
		// Cloud connection state changed
		isCloudConnected = temp;
 8081f50:	7560      	strb	r0, [r4, #21]
		ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_CLOUD_CONNECTED, isCloudConnected);
 8081f52:	2002      	movs	r0, #2
 8081f54:	f000 fc16 	bl	8082784 <_ZN16ConnectionEvents8addEventEii>
		Log.info("cloud connection %s", isCloudConnected ? "up" : "down");
 8081f58:	7d61      	ldrb	r1, [r4, #21]
 8081f5a:	4b34      	ldr	r3, [pc, #208]	; (808202c <_ZN15ConnectionCheck4loopEv+0x11c>)
 8081f5c:	4a34      	ldr	r2, [pc, #208]	; (8082030 <_ZN15ConnectionCheck4loopEv+0x120>)
 8081f5e:	4835      	ldr	r0, [pc, #212]	; (8082034 <_ZN15ConnectionCheck4loopEv+0x124>)
 8081f60:	2900      	cmp	r1, #0
 8081f62:	bf08      	it	eq
 8081f64:	461a      	moveq	r2, r3
 8081f66:	4935      	ldr	r1, [pc, #212]	; (808203c <_ZN15ConnectionCheck4loopEv+0x12c>)
 8081f68:	f7ff ff3a 	bl	8081de0 <_ZNK5spark6Logger4infoEPKcz>

		if (isCloudConnected) {
 8081f6c:	7d63      	ldrb	r3, [r4, #21]
 8081f6e:	b11b      	cbz	r3, 8081f78 <_ZN15ConnectionCheck4loopEv+0x68>
			// Upon succesful connection, clear the failure count
			connectionCheckRetainedData.numFailures = 0;
 8081f70:	4b33      	ldr	r3, [pc, #204]	; (8082040 <_ZN15ConnectionCheck4loopEv+0x130>)
 8081f72:	2200      	movs	r2, #0
 8081f74:	605a      	str	r2, [r3, #4]
 8081f76:	e002      	b.n	8081f7e <_ZN15ConnectionCheck4loopEv+0x6e>
 8081f78:	f002 f8f4 	bl	8084164 <HAL_Timer_Get_Milli_Seconds>
		}
		else {
			// Cloud just disconnected, start measuring how long we've been disconnected
			cloudCheckStart = millis();
 8081f7c:	61e0      	str	r0, [r4, #28]
		}
	}

	if (!isCloudConnected) {
 8081f7e:	7d63      	ldrb	r3, [r4, #21]
 8081f80:	b9d3      	cbnz	r3, 8081fb8 <_ZN15ConnectionCheck4loopEv+0xa8>
		// Not connected to the cloud - check to see if we've spent long enough in this state to reboot
		if (cloudWaitForReboot != 0 && millis() - cloudCheckStart >= cloudWaitForReboot) {
 8081f82:	68a3      	ldr	r3, [r4, #8]
 8081f84:	b1c3      	cbz	r3, 8081fb8 <_ZN15ConnectionCheck4loopEv+0xa8>
 8081f86:	f002 f8ed 	bl	8084164 <HAL_Timer_Get_Milli_Seconds>
 8081f8a:	69e3      	ldr	r3, [r4, #28]
 8081f8c:	1ac0      	subs	r0, r0, r3
 8081f8e:	68a3      	ldr	r3, [r4, #8]
 8081f90:	4298      	cmp	r0, r3
 8081f92:	d311      	bcc.n	8081fb8 <_ZN15ConnectionCheck4loopEv+0xa8>
			// The time to wait to connect to the cloud has expired, reboot

			if (isCellularReady) {
 8081f94:	7d23      	ldrb	r3, [r4, #20]
 8081f96:	b113      	cbz	r3, 8081f9e <_ZN15ConnectionCheck4loopEv+0x8e>
				// Generate events about the state of the connection before rebooting.
				cloudConnectDebug();
 8081f98:	4620      	mov	r0, r4
 8081f9a:	f7ff ff61 	bl	8081e60 <_ZN15ConnectionCheck17cloudConnectDebugEv>
			}

			// Keep the number of failures in a retained variable
			connectionCheckRetainedData.numFailures++;
 8081f9e:	4a28      	ldr	r2, [pc, #160]	; (8082040 <_ZN15ConnectionCheck4loopEv+0x130>)
 8081fa0:	6853      	ldr	r3, [r2, #4]
 8081fa2:	3301      	adds	r3, #1
 8081fa4:	6053      	str	r3, [r2, #4]

			if (failureSleepSec > 0 && connectionCheckRetainedData.numFailures > 1) {
 8081fa6:	6922      	ldr	r2, [r4, #16]
 8081fa8:	bb6a      	cbnz	r2, 8082006 <_ZN15ConnectionCheck4loopEv+0xf6>
				ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_FAILURE_SLEEP);
				System.sleep(SLEEP_MODE_DEEP, failureSleepSec);
			}

			// Reboot
			ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_REBOOT_NO_CLOUD);
 8081faa:	2006      	movs	r0, #6
 8081fac:	2100      	movs	r1, #0
 8081fae:	f000 fbe9 	bl	8082784 <_ZN16ConnectionEvents8addEventEii>
			fullModemReset();
 8081fb2:	4620      	mov	r0, r4
 8081fb4:	f7ff ff74 	bl	8081ea0 <_ZN15ConnectionCheck14fullModemResetEv>
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 8081fb8:	2200      	movs	r2, #0
 8081fba:	4611      	mov	r1, r2
 8081fbc:	6868      	ldr	r0, [r5, #4]
 8081fbe:	f002 fb47 	bl	8084650 <network_listening>
		}
	}


	if (Cellular.listening()) {
 8081fc2:	b370      	cbz	r0, 8082022 <_ZN15ConnectionCheck4loopEv+0x112>
		// Entered listening mode (blinking blue). Could be from holding down the MODE button, or
		// by repeated connection failures, see: https://github.com/spark/firmware/issues/687
		if (listeningStart == 0) {
 8081fc4:	69a5      	ldr	r5, [r4, #24]
 8081fc6:	b95d      	cbnz	r5, 8081fe0 <_ZN15ConnectionCheck4loopEv+0xd0>
 8081fc8:	f002 f8cc 	bl	8084164 <HAL_Timer_Get_Milli_Seconds>
			listeningStart = millis();
			ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_LISTENING_ENTERED);
 8081fcc:	4629      	mov	r1, r5

	if (Cellular.listening()) {
		// Entered listening mode (blinking blue). Could be from holding down the MODE button, or
		// by repeated connection failures, see: https://github.com/spark/firmware/issues/687
		if (listeningStart == 0) {
			listeningStart = millis();
 8081fce:	61a0      	str	r0, [r4, #24]
			ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_LISTENING_ENTERED);
 8081fd0:	2003      	movs	r0, #3
 8081fd2:	f000 fbd7 	bl	8082784 <_ZN16ConnectionEvents8addEventEii>

			Log.info("entered listening mode");
 8081fd6:	491b      	ldr	r1, [pc, #108]	; (8082044 <_ZN15ConnectionCheck4loopEv+0x134>)
 8081fd8:	4816      	ldr	r0, [pc, #88]	; (8082034 <_ZN15ConnectionCheck4loopEv+0x124>)
 8081fda:	f7ff ff01 	bl	8081de0 <_ZNK5spark6Logger4infoEPKcz>
 8081fde:	e020      	b.n	8082022 <_ZN15ConnectionCheck4loopEv+0x112>
		}
		else {
			if (listenWaitForReboot != 0 && millis() - listeningStart >= listenWaitForReboot) {
 8081fe0:	6863      	ldr	r3, [r4, #4]
 8081fe2:	b1f3      	cbz	r3, 8082022 <_ZN15ConnectionCheck4loopEv+0x112>
 8081fe4:	f002 f8be 	bl	8084164 <HAL_Timer_Get_Milli_Seconds>
 8081fe8:	69a3      	ldr	r3, [r4, #24]
 8081fea:	1ac0      	subs	r0, r0, r3
 8081fec:	6863      	ldr	r3, [r4, #4]
 8081fee:	4298      	cmp	r0, r3
 8081ff0:	d317      	bcc.n	8082022 <_ZN15ConnectionCheck4loopEv+0x112>
				// Reboot
				ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_REBOOT_LISTENING);
 8081ff2:	2100      	movs	r1, #0
 8081ff4:	2005      	movs	r0, #5
 8081ff6:	f000 fbc5 	bl	8082784 <_ZN16ConnectionEvents8addEventEii>
				fullModemReset();
 8081ffa:	4620      	mov	r0, r4
			}
		}
	}
}
 8081ffc:	b003      	add	sp, #12
 8081ffe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		}
		else {
			if (listenWaitForReboot != 0 && millis() - listeningStart >= listenWaitForReboot) {
				// Reboot
				ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_REBOOT_LISTENING);
				fullModemReset();
 8082002:	f7ff bf4d 	b.w	8081ea0 <_ZN15ConnectionCheck14fullModemResetEv>
			}

			// Keep the number of failures in a retained variable
			connectionCheckRetainedData.numFailures++;

			if (failureSleepSec > 0 && connectionCheckRetainedData.numFailures > 1) {
 8082006:	2b01      	cmp	r3, #1
 8082008:	d9cf      	bls.n	8081faa <_ZN15ConnectionCheck4loopEv+0x9a>
				// many seconds after the first fullModemReset.
				// This is useful when battery powered if the SIM has been paused or something
				// is wrong with the SIM data or cloud such that a connection can be made.
				// It sleeps for some period (maybe 10 - 15 minutes?) before trying again to
				// avoid draining the battery continuously trying and failing to connect.
				ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_FAILURE_SLEEP);
 808200a:	2100      	movs	r1, #0
 808200c:	2016      	movs	r0, #22
 808200e:	f000 fbb9 	bl	8082784 <_ZN16ConnectionEvents8addEventEii>
				System.sleep(SLEEP_MODE_DEEP, failureSleepSec);
 8082012:	4b0d      	ldr	r3, [pc, #52]	; (8082048 <_ZN15ConnectionCheck4loopEv+0x138>)
 8082014:	6922      	ldr	r2, [r4, #16]
 8082016:	681b      	ldr	r3, [r3, #0]
 8082018:	2101      	movs	r1, #1
 808201a:	4668      	mov	r0, sp
 808201c:	f002 fd16 	bl	8084a4c <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
 8082020:	e7c3      	b.n	8081faa <_ZN15ConnectionCheck4loopEv+0x9a>
				ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_REBOOT_LISTENING);
				fullModemReset();
			}
		}
	}
}
 8082022:	b003      	add	sp, #12
 8082024:	bd30      	pop	{r4, r5, pc}
 8082026:	bf00      	nop
 8082028:	2000052c 	.word	0x2000052c
 808202c:	0808ad02 	.word	0x0808ad02
 8082030:	0808acff 	.word	0x0808acff
 8082034:	20000414 	.word	0x20000414
 8082038:	0808ad07 	.word	0x0808ad07
 808203c:	0808ad13 	.word	0x0808ad13
 8082040:	40024000 	.word	0x40024000
 8082044:	0808ad27 	.word	0x0808ad27
 8082048:	200002d8 	.word	0x200002d8

0808204c <_GLOBAL__sub_I__ZN15ConnectionCheck8instanceE>:
 808204c:	4b02      	ldr	r3, [pc, #8]	; (8082058 <_GLOBAL__sub_I__ZN15ConnectionCheck8instanceE+0xc>)
 808204e:	2200      	movs	r2, #0
 8082050:	601a      	str	r2, [r3, #0]
 8082052:	f001 bfc7 	b.w	8083fe4 <HAL_Pin_Map>
 8082056:	bf00      	nop
 8082058:	200002d8 	.word	0x200002d8

0808205c <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
 808205c:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
 808205e:	2301      	movs	r3, #1
 8082060:	7403      	strb	r3, [r0, #16]
        if (th->func) {
 8082062:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
 8082064:	4604      	mov	r4, r0
        Data* th = (Data*)param;
        th->started = true;
        if (th->func) {
 8082066:	b10b      	cbz	r3, 808206c <_ZN6Thread3runEPv+0x10>
            (*(th->func))(th->func_param);
 8082068:	68c0      	ldr	r0, [r0, #12]
 808206a:	e006      	b.n	808207a <_ZN6Thread3runEPv+0x1e>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
 808206c:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
 808206e:	b128      	cbz	r0, 808207c <_ZN6Thread3runEPv+0x20>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8082070:	6883      	ldr	r3, [r0, #8]
 8082072:	b90b      	cbnz	r3, 8082078 <_ZN6Thread3runEPv+0x1c>
	__throw_bad_function_call();
 8082074:	f005 fcf1 	bl	8087a5a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082078:	68c3      	ldr	r3, [r0, #12]
 808207a:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited = true;
 808207c:	2301      	movs	r3, #1
 808207e:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
 8082080:	2000      	movs	r0, #0
    }
 8082082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func))(th->func_param);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
        os_thread_exit(nullptr);
 8082086:	f002 b90d 	b.w	80842a4 <os_thread_exit>

0808208a <_ZN18AppWatchdogWrapper16watchdogCallbackEv>:

}


// static
void AppWatchdogWrapper::watchdogCallback() {
 808208a:	b508      	push	{r3, lr}
	// This isn't quite safe; connectionEvents.add should only be called from the main loop thread,
	// but since by definition the main loop thread is stuck when the app watchdog fires, this is
	// probably not that unsafe. (The application watchdog runs in a separate thread.)
	ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_APP_WATCHDOG);
 808208c:	2100      	movs	r1, #0
 808208e:	2009      	movs	r0, #9
 8082090:	f000 fb78 	bl	8082784 <_ZN16ConnectionEvents8addEventEii>
	System.reset();
}
 8082094:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void AppWatchdogWrapper::watchdogCallback() {
	// This isn't quite safe; connectionEvents.add should only be called from the main loop thread,
	// but since by definition the main loop thread is stuck when the app watchdog fires, this is
	// probably not that unsafe. (The application watchdog runs in a separate thread.)
	ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_APP_WATCHDOG);
	System.reset();
 8082098:	f002 bcd4 	b.w	8084a44 <_ZN11SystemClass5resetEv>

0808209c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.3>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
 808209c:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
 808209e:	4604      	mov	r4, r0
 80820a0:	b170      	cbz	r0, 80820c0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.3+0x24>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
 80820a2:	6805      	ldr	r5, [r0, #0]
 80820a4:	b135      	cbz	r5, 80820b4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.3+0x18>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80820a6:	4628      	mov	r0, r5
 80820a8:	f7fe f910 	bl	80802cc <_ZNSt14_Function_baseD1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
 80820ac:	2110      	movs	r1, #16
 80820ae:	4628      	mov	r0, r5
 80820b0:	f005 fcc0 	bl	8087a34 <_ZdlPvj>
 80820b4:	4620      	mov	r0, r4
      }
 80820b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
 80820ba:	2114      	movs	r1, #20
 80820bc:	f005 bcba 	b.w	8087a34 <_ZdlPvj>
 80820c0:	bd38      	pop	{r3, r4, r5, pc}
	...

080820c4 <_ZN18AppWatchdogWrapperD1Ev>:
// Note: The 1800 parameter is because the default stack size is too small in 0.7.0
AppWatchdogWrapper::AppWatchdogWrapper(unsigned long timeoutMs) : wd(timeoutMs, watchdogCallback, 1800) {

}

AppWatchdogWrapper::~AppWatchdogWrapper() {
 80820c4:	b510      	push	{r4, lr}
 80820c6:	4b11      	ldr	r3, [pc, #68]	; (808210c <_ZN18AppWatchdogWrapperD1Ev+0x48>)
 80820c8:	4604      	mov	r4, r0
 80820ca:	6003      	str	r3, [r0, #0]
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
 80820cc:	6983      	ldr	r3, [r0, #24]
        dispose();
    }

    void dispose()
    {
        if (!isValid())
 80820ce:	b1bb      	cbz	r3, 8082100 <_ZN18AppWatchdogWrapperD1Ev+0x3c>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
 80820d0:	6858      	ldr	r0, [r3, #4]
 80820d2:	f002 f87f 	bl	80841d4 <os_thread_is_current>
 80820d6:	b978      	cbnz	r0, 80820f8 <_ZN18AppWatchdogWrapperD1Ev+0x34>
 80820d8:	69a3      	ldr	r3, [r4, #24]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
 80820da:	7c5a      	ldrb	r2, [r3, #17]
 80820dc:	b912      	cbnz	r2, 80820e4 <_ZN18AppWatchdogWrapperD1Ev+0x20>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
 80820de:	6858      	ldr	r0, [r3, #4]
 80820e0:	f002 f888 	bl	80841f4 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
 80820e4:	69a3      	ldr	r3, [r4, #24]
 80820e6:	6858      	ldr	r0, [r3, #4]
 80820e8:	f002 f88c 	bl	8084204 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80820ec:	69a0      	ldr	r0, [r4, #24]
      __a = _GLIBCXX_MOVE(__b);
 80820ee:	2300      	movs	r3, #0
 80820f0:	61a3      	str	r3, [r4, #24]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
 80820f2:	b128      	cbz	r0, 8082100 <_ZN18AppWatchdogWrapperD1Ev+0x3c>
	  get_deleter()(__p);
 80820f4:	f7ff ffd2 	bl	808209c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.3>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
 80820f8:	69a0      	ldr	r0, [r4, #24]
 80820fa:	b108      	cbz	r0, 8082100 <_ZN18AppWatchdogWrapperD1Ev+0x3c>
	  get_deleter()(__ptr);
 80820fc:	f7ff ffce 	bl	808209c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.3>
 8082100:	f104 0008 	add.w	r0, r4, #8
 8082104:	f7fe f8e2 	bl	80802cc <_ZNSt14_Function_baseD1Ev>

}
 8082108:	4620      	mov	r0, r4
 808210a:	bd10      	pop	{r4, pc}
 808210c:	0808ad50 	.word	0x0808ad50

08082110 <_ZN18AppWatchdogWrapperD0Ev>:
// Note: The 1800 parameter is because the default stack size is too small in 0.7.0
AppWatchdogWrapper::AppWatchdogWrapper(unsigned long timeoutMs) : wd(timeoutMs, watchdogCallback, 1800) {

}

AppWatchdogWrapper::~AppWatchdogWrapper() {
 8082110:	b510      	push	{r4, lr}
 8082112:	4604      	mov	r4, r0

}
 8082114:	f7ff ffd6 	bl	80820c4 <_ZN18AppWatchdogWrapperD1Ev>
 8082118:	4620      	mov	r0, r4
 808211a:	211c      	movs	r1, #28
 808211c:	f005 fc8a 	bl	8087a34 <_ZdlPvj>
 8082120:	4620      	mov	r0, r4
 8082122:	bd10      	pop	{r4, pc}

08082124 <_ZN18AppWatchdogWrapperC1Em>:
#include "AppWatchdogWrapper.h"

#include "ConnectionEvents.h"

// Note: The 1800 parameter is because the default stack size is too small in 0.7.0
AppWatchdogWrapper::AppWatchdogWrapper(unsigned long timeoutMs) : wd(timeoutMs, watchdogCallback, 1800) {
 8082124:	b570      	push	{r4, r5, r6, lr}
 8082126:	4606      	mov	r6, r0
 8082128:	4604      	mov	r4, r0
 808212a:	4b25      	ldr	r3, [pc, #148]	; (80821c0 <_ZN18AppWatchdogWrapperC1Em+0x9c>)
 808212c:	b086      	sub	sp, #24
 808212e:	f846 3b04 	str.w	r3, [r6], #4
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 8082132:	4b24      	ldr	r3, [pc, #144]	; (80821c4 <_ZN18AppWatchdogWrapperC1Em+0xa0>)
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082134:	2500      	movs	r5, #0
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 8082136:	9302      	str	r3, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8082138:	4b23      	ldr	r3, [pc, #140]	; (80821c8 <_ZN18AppWatchdogWrapperC1Em+0xa4>)
    static const unsigned DEFAULT_STACK_SIZE = 512;

	ApplicationWatchdog(unsigned timeout_ms, std::function<void(void)> fn, unsigned stack_size=DEFAULT_STACK_SIZE) :
		timeout(timeout_ms),
		timeout_fn(fn),
		thread("appwdt", start, this, OS_THREAD_PRIORITY_CRITICAL, stack_size)
 808213a:	6041      	str	r1, [r0, #4]
 808213c:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 808213e:	4b23      	ldr	r3, [pc, #140]	; (80821cc <_ZN18AppWatchdogWrapperC1Em+0xa8>)
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082140:	6105      	str	r5, [r0, #16]
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8082142:	a902      	add	r1, sp, #8
 8082144:	2202      	movs	r2, #2
 8082146:	3008      	adds	r0, #8

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
 8082148:	9304      	str	r3, [sp, #16]
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 808214a:	f7fd ffc6 	bl	80800da <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	  _M_invoker = __x._M_invoker;
 808214e:	9b05      	ldr	r3, [sp, #20]
    {
    }

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
 8082150:	491f      	ldr	r1, [pc, #124]	; (80821d0 <_ZN18AppWatchdogWrapperC1Em+0xac>)
 8082152:	6163      	str	r3, [r4, #20]
	  _M_manager = __x._M_manager;
 8082154:	9b04      	ldr	r3, [sp, #16]
 8082156:	2014      	movs	r0, #20
 8082158:	6123      	str	r3, [r4, #16]
 808215a:	f005 fc6f 	bl	8087a3c <_ZnwjRKSt9nothrow_t>
 808215e:	b128      	cbz	r0, 808216c <_ZN18AppWatchdogWrapperC1Em+0x48>
        Data() :
            handle(OS_THREAD_INVALID_HANDLE),
            func(nullptr),
            func_param(nullptr),
            started(false),
            exited(false) {
 8082160:	7405      	strb	r5, [r0, #16]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
 8082162:	6005      	str	r5, [r0, #0]
 8082164:	6045      	str	r5, [r0, #4]
 8082166:	6085      	str	r5, [r0, #8]
 8082168:	60c5      	str	r5, [r0, #12]
 808216a:	7445      	strb	r5, [r0, #17]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 808216c:	61a0      	str	r0, [r4, #24]

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
 808216e:	b1b0      	cbz	r0, 808219e <_ZN18AppWatchdogWrapperC1Em+0x7a>
            goto error;
        }
        d_->func = function;
 8082170:	4b18      	ldr	r3, [pc, #96]	; (80821d4 <_ZN18AppWatchdogWrapperC1Em+0xb0>)
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 8082172:	2209      	movs	r2, #9
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
 8082174:	6083      	str	r3, [r0, #8]
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
 8082176:	69a3      	ldr	r3, [r4, #24]
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 8082178:	4917      	ldr	r1, [pc, #92]	; (80821d8 <_ZN18AppWatchdogWrapperC1Em+0xb4>)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
        d_->func_param = function_param;
 808217a:	60de      	str	r6, [r3, #12]
 808217c:	69a0      	ldr	r0, [r4, #24]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 808217e:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8082182:	e88d 0009 	stmia.w	sp, {r0, r3}
 8082186:	4b15      	ldr	r3, [pc, #84]	; (80821dc <_ZN18AppWatchdogWrapperC1Em+0xb8>)
 8082188:	3004      	adds	r0, #4
 808218a:	f002 f81b 	bl	80841c4 <os_thread_create>
 808218e:	b930      	cbnz	r0, 808219e <_ZN18AppWatchdogWrapperC1Em+0x7a>
 8082190:	69a3      	ldr	r3, [r4, #24]
            goto error;
        }
        while (!d_->started) {
 8082192:	7c1b      	ldrb	r3, [r3, #16]
 8082194:	b94b      	cbnz	r3, 80821aa <_ZN18AppWatchdogWrapperC1Em+0x86>
            // FIXME: This used to be os_thread_yield() but for some unknown reasons sometimes
            // it doesn't let the new thread to run.
            HAL_Delay_Milliseconds(1);
 8082196:	2001      	movs	r0, #1
 8082198:	f001 ffd4 	bl	8084144 <HAL_Delay_Milliseconds>
 808219c:	e7f8      	b.n	8082190 <_ZN18AppWatchdogWrapperC1Em+0x6c>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808219e:	69a0      	ldr	r0, [r4, #24]
      __a = _GLIBCXX_MOVE(__b);
 80821a0:	2300      	movs	r3, #0
 80821a2:	61a3      	str	r3, [r4, #24]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
 80821a4:	b108      	cbz	r0, 80821aa <_ZN18AppWatchdogWrapperC1Em+0x86>
	  get_deleter()(__p);
 80821a6:	f7ff ff79 	bl	808209c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.3>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80821aa:	f001 ffdb 	bl	8084164 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80821ae:	4b0c      	ldr	r3, [pc, #48]	; (80821e0 <_ZN18AppWatchdogWrapperC1Em+0xbc>)
 80821b0:	6018      	str	r0, [r3, #0]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80821b2:	a802      	add	r0, sp, #8
 80821b4:	f7fe f88a 	bl	80802cc <_ZNSt14_Function_baseD1Ev>

}
 80821b8:	4620      	mov	r0, r4
 80821ba:	b006      	add	sp, #24
 80821bc:	bd70      	pop	{r4, r5, r6, pc}
 80821be:	bf00      	nop
 80821c0:	0808ad50 	.word	0x0808ad50
 80821c4:	0808208b 	.word	0x0808208b
 80821c8:	080800d7 	.word	0x080800d7
 80821cc:	080800db 	.word	0x080800db
 80821d0:	0808b4b6 	.word	0x0808b4b6
 80821d4:	080878f5 	.word	0x080878f5
 80821d8:	0808ad3e 	.word	0x0808ad3e
 80821dc:	0808205d 	.word	0x0808205d
 80821e0:	20000584 	.word	0x20000584

080821e4 <_GLOBAL__sub_I__ZN18AppWatchdogWrapperC2Em>:
 80821e4:	f001 befe 	b.w	8083fe4 <HAL_Pin_Map>

080821e8 <_ZN12SessionCheck19subscriptionHandlerEPKcS1_>:
void SessionCheck::loop() {
	stateHandler(*this);
}

void SessionCheck::subscriptionHandler(const char *eventName, const char *data) {
	gotResponse = true;
 80821e8:	2301      	movs	r3, #1
 80821ea:	7703      	strb	r3, [r0, #28]
 80821ec:	4770      	bx	lr

080821ee <_ZNSt17_Function_handlerIFvR12SessionCheckEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
	  }
	return false;
      }

      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80821ee:	6842      	ldr	r2, [r0, #4]
 80821f0:	6803      	ldr	r3, [r0, #0]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class& __object, _Args&&... __args) const
	{ return (__object.*_M_pmf)(std::forward<_Args>(__args)...); }
 80821f2:	f012 0f01 	tst.w	r2, #1
 80821f6:	ea4f 0062 	mov.w	r0, r2, asr #1
 80821fa:	bf18      	it	ne
 80821fc:	580a      	ldrne	r2, [r1, r0]
 80821fe:	4408      	add	r0, r1
 8082200:	bf18      	it	ne
 8082202:	58d3      	ldrne	r3, [r2, r3]
 8082204:	4718      	bx	r3

08082206 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFSt7_Mem_fnIM12SessionCheckFvS1_S1_EEPS5_St12_PlaceholderILi1EESA_ILi2EEEEE9_M_invokeERKSt9_Any_dataOS1_SJ_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8082206:	b430      	push	{r4, r5}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8082208:	6803      	ldr	r3, [r0, #0]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
 808220a:	6812      	ldr	r2, [r2, #0]
 808220c:	6858      	ldr	r0, [r3, #4]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 808220e:	689c      	ldr	r4, [r3, #8]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
 8082210:	f010 0f01 	tst.w	r0, #1
 8082214:	ea4f 0060 	mov.w	r0, r0, asr #1
 8082218:	bf18      	it	ne
 808221a:	5825      	ldrne	r5, [r4, r0]
 808221c:	681b      	ldr	r3, [r3, #0]
 808221e:	4420      	add	r0, r4
 8082220:	bf18      	it	ne
 8082222:	58eb      	ldrne	r3, [r5, r3]
 8082224:	6809      	ldr	r1, [r1, #0]
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
 8082226:	bc30      	pop	{r4, r5}
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
 8082228:	4718      	bx	r3

0808222a <_ZNSt17_Function_handlerIFvR12SessionCheckEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
    public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
		 _Manager_operation __op)
      {
	switch (__op)
 808222a:	2a01      	cmp	r2, #1
      typedef _Simple_type_wrapper<_Functor> _Wrapper;
      typedef _Function_base::_Base_manager<_Wrapper> _Base;

    public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 808222c:	4603      	mov	r3, r0
		 _Manager_operation __op)
      {
	switch (__op)
 808222e:	d101      	bne.n	8082234 <_ZNSt17_Function_handlerIFvR12SessionCheckEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
	  case __get_type_info:
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
	    break;
#endif
	  case __get_functor_ptr:
	    __dest._M_access<_Functor*>() =
 8082230:	6001      	str	r1, [r0, #0]
	      &_Base::_M_get_pointer(__source)->__value;
	    break;
 8082232:	e005      	b.n	8082240 <_ZNSt17_Function_handlerIFvR12SessionCheckEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x16>
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8082234:	2a02      	cmp	r2, #2
 8082236:	d103      	bne.n	8082240 <_ZNSt17_Function_handlerIFvR12SessionCheckEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x16>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8082238:	b110      	cbz	r0, 8082240 <_ZNSt17_Function_handlerIFvR12SessionCheckEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x16>
 808223a:	c903      	ldmia	r1, {r0, r1}
 808223c:	e883 0003 	stmia.w	r3, {r0, r1}

	  default:
	    _Base::_M_manager(__dest, __source, __op);
	  }
	return false;
      }
 8082240:	2000      	movs	r0, #0
 8082242:	4770      	bx	lr

08082244 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM12SessionCheckFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8082244:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8082246:	b538      	push	{r3, r4, r5, lr}
 8082248:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 808224a:	d005      	beq.n	8082258 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM12SessionCheckFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x14>
 808224c:	2a03      	cmp	r2, #3
 808224e:	d00f      	beq.n	8082270 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM12SessionCheckFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x2c>
 8082250:	2a01      	cmp	r2, #1
 8082252:	d111      	bne.n	8082278 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM12SessionCheckFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x34>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8082254:	680b      	ldr	r3, [r1, #0]
 8082256:	e009      	b.n	808226c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM12SessionCheckFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x28>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8082258:	200c      	movs	r0, #12
 808225a:	680d      	ldr	r5, [r1, #0]
 808225c:	f7fd ff1f 	bl	808009e <_Znwj>
 8082260:	4603      	mov	r3, r0
 8082262:	b118      	cbz	r0, 808226c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM12SessionCheckFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x28>
 8082264:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8082268:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 808226c:	6023      	str	r3, [r4, #0]
 808226e:	e003      	b.n	8082278 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM12SessionCheckFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x34>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8082270:	210c      	movs	r1, #12
 8082272:	6800      	ldr	r0, [r0, #0]
 8082274:	f005 fbde 	bl	8087a34 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8082278:	2000      	movs	r0, #0
 808227a:	bd38      	pop	{r3, r4, r5, pc}

0808227c <_ZN12SessionCheckD1Ev>:

SessionCheck::SessionCheck(time_t checkPeriodSecs, const char *eventSuffix) : checkPeriodSecs(checkPeriodSecs) {
	eventName = System.deviceID() + "/" + eventSuffix;
}

SessionCheck::~SessionCheck() {
 808227c:	b510      	push	{r4, lr}
 808227e:	4604      	mov	r4, r0
 8082280:	4b05      	ldr	r3, [pc, #20]	; (8082298 <_ZN12SessionCheckD1Ev+0x1c>)
 8082282:	f840 3b24 	str.w	r3, [r0], #36
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8082286:	f7fe f821 	bl	80802cc <_ZNSt14_Function_baseD1Ev>
 808228a:	f104 0008 	add.w	r0, r4, #8
 808228e:	f002 fc7d 	bl	8084b8c <_ZN6StringD1Ev>

}
 8082292:	4620      	mov	r0, r4
 8082294:	bd10      	pop	{r4, pc}
 8082296:	bf00      	nop
 8082298:	0808ad84 	.word	0x0808ad84

0808229c <_ZN12SessionCheckD0Ev>:

SessionCheck::SessionCheck(time_t checkPeriodSecs, const char *eventSuffix) : checkPeriodSecs(checkPeriodSecs) {
	eventName = System.deviceID() + "/" + eventSuffix;
}

SessionCheck::~SessionCheck() {
 808229c:	b510      	push	{r4, lr}
 808229e:	4604      	mov	r4, r0

}
 80822a0:	f7ff ffec 	bl	808227c <_ZN12SessionCheckD1Ev>
 80822a4:	4620      	mov	r0, r4
 80822a6:	2134      	movs	r1, #52	; 0x34
 80822a8:	f005 fbc4 	bl	8087a34 <_ZdlPvj>
 80822ac:	4620      	mov	r0, r4
 80822ae:	bd10      	pop	{r4, pc}

080822b0 <_ZN12SessionCheckC1ElPKc>:
#include "ConnectionCheck.h"

retained SessionRetainedData SessionCheck::sessionRetainedData;


SessionCheck::SessionCheck(time_t checkPeriodSecs, const char *eventSuffix) : checkPeriodSecs(checkPeriodSecs) {
 80822b0:	b570      	push	{r4, r5, r6, lr}
 80822b2:	4604      	mov	r4, r0
 80822b4:	4616      	mov	r6, r2
 80822b6:	4b18      	ldr	r3, [pc, #96]	; (8082318 <_ZN12SessionCheckC1ElPKc+0x68>)
 80822b8:	f100 0508 	add.w	r5, r0, #8
 80822bc:	b088      	sub	sp, #32
 80822be:	6003      	str	r3, [r0, #0]
 80822c0:	6041      	str	r1, [r0, #4]
 80822c2:	4916      	ldr	r1, [pc, #88]	; (808231c <_ZN12SessionCheckC1ElPKc+0x6c>)
 80822c4:	4628      	mov	r0, r5
 80822c6:	f002 fca8 	bl	8084c1a <_ZN6StringC1EPK19__FlashStringHelper>
 80822ca:	2300      	movs	r3, #0
 80822cc:	61a3      	str	r3, [r4, #24]
 80822ce:	7723      	strb	r3, [r4, #28]
 80822d0:	6223      	str	r3, [r4, #32]
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80822d2:	62a3      	str	r3, [r4, #40]	; 0x28
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80822d4:	4b12      	ldr	r3, [pc, #72]	; (8082320 <_ZN12SessionCheckC1ElPKc+0x70>)
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80822d6:	4a13      	ldr	r2, [pc, #76]	; (8082324 <_ZN12SessionCheckC1ElPKc+0x74>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80822d8:	6323      	str	r3, [r4, #48]	; 0x30
	    _M_manager = &_My_handler::_M_manager;
 80822da:	4b13      	ldr	r3, [pc, #76]	; (8082328 <_ZN12SessionCheckC1ElPKc+0x78>)
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80822dc:	6262      	str	r2, [r4, #36]	; 0x24

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
 80822de:	62e3      	str	r3, [r4, #44]	; 0x2c
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
 80822e0:	a804      	add	r0, sp, #16
 80822e2:	f002 f9fd 	bl	80846e0 <spark_deviceID>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80822e6:	a904      	add	r1, sp, #16
 80822e8:	4668      	mov	r0, sp
 80822ea:	f002 fcd5 	bl	8084c98 <_ZN6StringC1ERKS_>
	eventName = System.deviceID() + "/" + eventSuffix;
 80822ee:	490f      	ldr	r1, [pc, #60]	; (808232c <_ZN12SessionCheckC1ElPKc+0x7c>)
 80822f0:	4668      	mov	r0, sp
 80822f2:	f002 fd18 	bl	8084d26 <_ZplRK15StringSumHelperPKc>
 80822f6:	4631      	mov	r1, r6
 80822f8:	f002 fd15 	bl	8084d26 <_ZplRK15StringSumHelperPKc>
 80822fc:	4601      	mov	r1, r0
 80822fe:	4628      	mov	r0, r5
 8082300:	f002 fcbb 	bl	8084c7a <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8082304:	4668      	mov	r0, sp
 8082306:	f002 fc41 	bl	8084b8c <_ZN6StringD1Ev>
 808230a:	a804      	add	r0, sp, #16
 808230c:	f002 fc3e 	bl	8084b8c <_ZN6StringD1Ev>
}
 8082310:	4620      	mov	r0, r4
 8082312:	b008      	add	sp, #32
 8082314:	bd70      	pop	{r4, r5, r6, pc}
 8082316:	bf00      	nop
 8082318:	0808ad84 	.word	0x0808ad84
 808231c:	0808acc4 	.word	0x0808acc4
 8082320:	080821ef 	.word	0x080821ef
 8082324:	0808249d 	.word	0x0808249d
 8082328:	0808222b 	.word	0x0808222b
 808232c:	0808ad58 	.word	0x0808ad58

08082330 <_ZN12SessionCheck4loopEv>:


	Particle.subscribe(eventName, &SessionCheck::subscriptionHandler, this, MY_DEVICES);
}

void SessionCheck::loop() {
 8082330:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8082332:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8082334:	4601      	mov	r1, r0
 8082336:	b90b      	cbnz	r3, 808233c <_ZN12SessionCheck4loopEv+0xc>
	__throw_bad_function_call();
 8082338:	f005 fb8f 	bl	8087a5a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808233c:	6b03      	ldr	r3, [r0, #48]	; 0x30
	stateHandler(*this);
}
 808233e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8082342:	3024      	adds	r0, #36	; 0x24
 8082344:	4718      	bx	r3

08082346 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8082346:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082348:	2300      	movs	r3, #0
 808234a:	6083      	str	r3, [r0, #8]
 808234c:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 808234e:	4604      	mov	r4, r0
 8082350:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8082352:	b12b      	cbz	r3, 8082360 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8082354:	2202      	movs	r2, #2
 8082356:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8082358:	68eb      	ldr	r3, [r5, #12]
 808235a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 808235c:	68ab      	ldr	r3, [r5, #8]
 808235e:	60a3      	str	r3, [r4, #8]
	}
    }
 8082360:	4620      	mov	r0, r4
 8082362:	bd38      	pop	{r3, r4, r5, pc}

08082364 <_ZN12SessionCheck5setupEv>:

SessionCheck::~SessionCheck() {

}

void SessionCheck::setup() {
 8082364:	b570      	push	{r4, r5, r6, lr}
	if (sessionRetainedData.magic != SESSION_MAGIC) {
 8082366:	4b1e      	ldr	r3, [pc, #120]	; (80823e0 <_ZN12SessionCheck5setupEv+0x7c>)
 8082368:	4a1e      	ldr	r2, [pc, #120]	; (80823e4 <_ZN12SessionCheck5setupEv+0x80>)
 808236a:	6819      	ldr	r1, [r3, #0]

SessionCheck::~SessionCheck() {

}

void SessionCheck::setup() {
 808236c:	b08a      	sub	sp, #40	; 0x28
	if (sessionRetainedData.magic != SESSION_MAGIC) {
 808236e:	4291      	cmp	r1, r2
		sessionRetainedData.magic = SESSION_MAGIC;
 8082370:	bf18      	it	ne
 8082372:	601a      	strne	r2, [r3, #0]

SessionCheck::~SessionCheck() {

}

void SessionCheck::setup() {
 8082374:	4604      	mov	r4, r0
	if (sessionRetainedData.magic != SESSION_MAGIC) {
		sessionRetainedData.magic = SESSION_MAGIC;
		sessionRetainedData.lastCheckSecs = 0;
 8082376:	bf18      	it	ne
 8082378:	2200      	movne	r2, #0
 808237a:	6886      	ldr	r6, [r0, #8]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808237c:	f04f 0500 	mov.w	r5, #0
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082380:	f04f 000c 	mov.w	r0, #12
 8082384:	bf18      	it	ne
 8082386:	605a      	strne	r2, [r3, #4]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082388:	9504      	str	r5, [sp, #16]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808238a:	f7fd fe88 	bl	808009e <_Znwj>
 808238e:	b118      	cbz	r0, 8082398 <_ZN12SessionCheck5setupEv+0x34>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
 8082390:	4b15      	ldr	r3, [pc, #84]	; (80823e8 <_ZN12SessionCheck5setupEv+0x84>)
 8082392:	6084      	str	r4, [r0, #8]
 8082394:	e880 0028 	stmia.w	r0, {r3, r5}
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8082398:	4b14      	ldr	r3, [pc, #80]	; (80823ec <_ZN12SessionCheck5setupEv+0x88>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808239a:	9002      	str	r0, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 808239c:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 808239e:	4b14      	ldr	r3, [pc, #80]	; (80823f0 <_ZN12SessionCheck5setupEv+0x8c>)
        return spark_subscribe(eventName, handler, NULL, MY_DEVICES, deviceID, NULL);
    }

    bool subscribe(const char *eventName, wiring_event_handler_t handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return subscribe_wiring(eventName, handler, scope);
 80823a0:	a902      	add	r1, sp, #8
 80823a2:	a806      	add	r0, sp, #24
 80823a4:	9304      	str	r3, [sp, #16]
 80823a6:	f7ff ffce 	bl	8082346 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
    }

    bool subscribe_wiring(const char *eventName, wiring_event_handler_t handler, Spark_Subscription_Scope_TypeDef scope, const char *deviceID = NULL)
    {
        bool success = false;
        if (handler) // if the call-wrapper has wrapped a callable object
 80823aa:	9b08      	ldr	r3, [sp, #32]
 80823ac:	b17b      	cbz	r3, 80823ce <_ZN12SessionCheck5setupEv+0x6a>
        {
            auto wrapper = new wiring_event_handler_t(handler);
 80823ae:	2010      	movs	r0, #16
 80823b0:	f7fd fe75 	bl	808009e <_Znwj>
 80823b4:	4604      	mov	r4, r0
 80823b6:	b150      	cbz	r0, 80823ce <_ZN12SessionCheck5setupEv+0x6a>
 80823b8:	a906      	add	r1, sp, #24
 80823ba:	f7ff ffc4 	bl	8082346 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
            if (wrapper) {
                success = spark_subscribe(eventName, (EventHandler)call_wiring_event_handler, wrapper, scope, deviceID, NULL);
 80823be:	2300      	movs	r3, #0
 80823c0:	9301      	str	r3, [sp, #4]
 80823c2:	9300      	str	r3, [sp, #0]
 80823c4:	4622      	mov	r2, r4
 80823c6:	490b      	ldr	r1, [pc, #44]	; (80823f4 <_ZN12SessionCheck5setupEv+0x90>)
 80823c8:	4630      	mov	r0, r6
 80823ca:	f002 f999 	bl	8084700 <spark_subscribe>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80823ce:	a806      	add	r0, sp, #24
 80823d0:	f7fd ff7c 	bl	80802cc <_ZNSt14_Function_baseD1Ev>
 80823d4:	a802      	add	r0, sp, #8
 80823d6:	f7fd ff79 	bl	80802cc <_ZNSt14_Function_baseD1Ev>
	}


	Particle.subscribe(eventName, &SessionCheck::subscriptionHandler, this, MY_DEVICES);
}
 80823da:	b00a      	add	sp, #40	; 0x28
 80823dc:	bd70      	pop	{r4, r5, r6, pc}
 80823de:	bf00      	nop
 80823e0:	40024008 	.word	0x40024008
 80823e4:	4a6849fe 	.word	0x4a6849fe
 80823e8:	080821e9 	.word	0x080821e9
 80823ec:	08082207 	.word	0x08082207
 80823f0:	08082245 	.word	0x08082245
 80823f4:	080866c1 	.word	0x080866c1

080823f8 <_ZNSt8functionIFvR12SessionCheckEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSC_S1_EE4typeEEE5valueERS3_E4typeEOSA_>:
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
 80823f8:	b510      	push	{r4, lr}
 80823fa:	4604      	mov	r4, r0
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80823fc:	e891 000c 	ldmia.w	r1, {r2, r3}
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
 8082400:	b086      	sub	sp, #24
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8082402:	9202      	str	r2, [sp, #8]
 8082404:	68a2      	ldr	r2, [r4, #8]
 8082406:	9303      	str	r3, [sp, #12]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082408:	ab02      	add	r3, sp, #8
 808240a:	e893 0003 	ldmia.w	r3, {r0, r1}
 808240e:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8082412:	e894 0003 	ldmia.w	r4, {r0, r1}
 8082416:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 808241a:	e89d 0003 	ldmia.w	sp, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808241e:	9204      	str	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 8082420:	4a06      	ldr	r2, [pc, #24]	; (808243c <_ZNSt8functionIFvR12SessionCheckEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSC_S1_EE4typeEEE5valueERS3_E4typeEOSA_+0x44>)
 8082422:	e884 0003 	stmia.w	r4, {r0, r1}
 8082426:	60a2      	str	r2, [r4, #8]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8082428:	68e2      	ldr	r2, [r4, #12]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808242a:	4618      	mov	r0, r3
 808242c:	9205      	str	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 808242e:	4a04      	ldr	r2, [pc, #16]	; (8082440 <_ZNSt8functionIFvR12SessionCheckEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSC_S1_EE4typeEEE5valueERS3_E4typeEOSA_+0x48>)
 8082430:	60e2      	str	r2, [r4, #12]
 8082432:	f7fd ff4b 	bl	80802cc <_ZNSt14_Function_baseD1Ev>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
	{
	  function(std::forward<_Functor>(__f)).swap(*this);
	  return *this;
	}
 8082436:	4620      	mov	r0, r4
 8082438:	b006      	add	sp, #24
 808243a:	bd10      	pop	{r4, pc}
 808243c:	0808222b 	.word	0x0808222b
 8082440:	080821ef 	.word	0x080821ef

08082444 <_ZN12SessionCheck9sendEventEv>:
	numFailures = 0;

	sendEvent();
}

void SessionCheck::sendEvent() {
 8082444:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	gotResponse = false;
 8082446:	2300      	movs	r3, #0
	stateHandler = &SessionCheck::waitForResponseState;
 8082448:	4a0f      	ldr	r2, [pc, #60]	; (8082488 <_ZN12SessionCheck9sendEventEv+0x44>)
	numFailures = 0;

	sendEvent();
}

void SessionCheck::sendEvent() {
 808244a:	4604      	mov	r4, r0

	gotResponse = false;
 808244c:	7703      	strb	r3, [r0, #28]
	stateHandler = &SessionCheck::waitForResponseState;
 808244e:	a902      	add	r1, sp, #8
 8082450:	3024      	adds	r0, #36	; 0x24
 8082452:	9303      	str	r3, [sp, #12]
 8082454:	9202      	str	r2, [sp, #8]
 8082456:	f7ff ffcf 	bl	80823f8 <_ZNSt8functionIFvR12SessionCheckEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSC_S1_EE4typeEEE5valueERS3_E4typeEOSA_>
 808245a:	f001 fe83 	bl	8084164 <HAL_Timer_Get_Milli_Seconds>
	stateTime = millis();

	Log.info("publishing session check event %s", eventName.c_str());
 808245e:	68a2      	ldr	r2, [r4, #8]

void SessionCheck::sendEvent() {

	gotResponse = false;
	stateHandler = &SessionCheck::waitForResponseState;
	stateTime = millis();
 8082460:	61a0      	str	r0, [r4, #24]

	Log.info("publishing session check event %s", eventName.c_str());
 8082462:	490a      	ldr	r1, [pc, #40]	; (808248c <_ZN12SessionCheck9sendEventEv+0x48>)
 8082464:	480a      	ldr	r0, [pc, #40]	; (8082490 <_ZN12SessionCheck9sendEventEv+0x4c>)
 8082466:	f7ff fcbb 	bl	8081de0 <_ZNK5spark6Logger4infoEPKcz>
 808246a:	4b0a      	ldr	r3, [pc, #40]	; (8082494 <_ZN12SessionCheck9sendEventEv+0x50>)
 808246c:	68a1      	ldr	r1, [r4, #8]
 808246e:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8082470:	4a09      	ldr	r2, [pc, #36]	; (8082498 <_ZN12SessionCheck9sendEventEv+0x54>)
 8082472:	f88d 3000 	strb.w	r3, [sp]
 8082476:	a802      	add	r0, sp, #8
 8082478:	233c      	movs	r3, #60	; 0x3c
 808247a:	f004 fa3f 	bl	80868fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808247e:	a803      	add	r0, sp, #12
 8082480:	f7fd ff6a 	bl	8080358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

	// Post our event
	Particle.publish(eventName, "", PRIVATE);
}
 8082484:	b004      	add	sp, #16
 8082486:	bd10      	pop	{r4, pc}
 8082488:	080824e9 	.word	0x080824e9
 808248c:	0808ad5a 	.word	0x0808ad5a
 8082490:	20000414 	.word	0x20000414
 8082494:	200002e0 	.word	0x200002e0
 8082498:	0808acc4 	.word	0x0808acc4

0808249c <_ZN12SessionCheck15waitToSendStateEv>:

void SessionCheck::subscriptionHandler(const char *eventName, const char *data) {
	gotResponse = true;
}

void SessionCheck::waitToSendState() {
 808249c:	b510      	push	{r4, lr}
 808249e:	4604      	mov	r4, r0
 80824a0:	f001 fe60 	bl	8084164 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - stateTime < CHECK_PERIOD_MS) {
 80824a4:	69a3      	ldr	r3, [r4, #24]
 80824a6:	1ac0      	subs	r0, r0, r3
 80824a8:	f247 532f 	movw	r3, #29999	; 0x752f
 80824ac:	4298      	cmp	r0, r3
 80824ae:	d918      	bls.n	80824e2 <_ZN12SessionCheck15waitToSendStateEv+0x46>
 80824b0:	f001 fe58 	bl	8084164 <HAL_Timer_Get_Milli_Seconds>
		return;
	}
	stateTime = millis();
 80824b4:	61a0      	str	r0, [r4, #24]

	// Only do this check every 30 seconds. It's not time-critical and saves some unnecessary CPU cycles.

	if (!Time.isValid()) {
 80824b6:	f003 fefd 	bl	80862b4 <_ZN9TimeClass7isValidEv>
 80824ba:	b190      	cbz	r0, 80824e2 <_ZN12SessionCheck15waitToSendStateEv+0x46>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80824bc:	f002 f908 	bl	80846d0 <spark_cloud_flag_connected>
		// We use the real-time clock, so if the time is not set, we can't do this check.
		return;
	}

	if (!Particle.connected()) {
 80824c0:	b178      	cbz	r0, 80824e2 <_ZN12SessionCheck15waitToSendStateEv+0x46>
		// Can only do this if connected to the cloud as well
		return;
	}

	time_t now = Time.now();
 80824c2:	f003 ff18 	bl	80862f6 <_ZN9TimeClass3nowEv>

	if (now - sessionRetainedData.lastCheckSecs < checkPeriodSecs) {
 80824c6:	4a07      	ldr	r2, [pc, #28]	; (80824e4 <_ZN12SessionCheck15waitToSendStateEv+0x48>)
 80824c8:	6861      	ldr	r1, [r4, #4]
 80824ca:	6853      	ldr	r3, [r2, #4]
 80824cc:	1ac3      	subs	r3, r0, r3
 80824ce:	428b      	cmp	r3, r1
 80824d0:	db07      	blt.n	80824e2 <_ZN12SessionCheck15waitToSendStateEv+0x46>
		return;
	}

	// Time to check again
	sessionRetainedData.lastCheckSecs = now;
	numFailures = 0;
 80824d2:	2300      	movs	r3, #0
		// Not time to check yet
		return;
	}

	// Time to check again
	sessionRetainedData.lastCheckSecs = now;
 80824d4:	6050      	str	r0, [r2, #4]
	numFailures = 0;
 80824d6:	6223      	str	r3, [r4, #32]

	sendEvent();
 80824d8:	4620      	mov	r0, r4
}
 80824da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

	// Time to check again
	sessionRetainedData.lastCheckSecs = now;
	numFailures = 0;

	sendEvent();
 80824de:	f7ff bfb1 	b.w	8082444 <_ZN12SessionCheck9sendEventEv>
 80824e2:	bd10      	pop	{r4, pc}
 80824e4:	40024008 	.word	0x40024008

080824e8 <_ZN12SessionCheck20waitForResponseStateEv>:

	// Post our event
	Particle.publish(eventName, "", PRIVATE);
}

void SessionCheck::waitForResponseState() {
 80824e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (gotResponse) {
 80824ea:	7f03      	ldrb	r3, [r0, #28]

	// Post our event
	Particle.publish(eventName, "", PRIVATE);
}

void SessionCheck::waitForResponseState() {
 80824ec:	4604      	mov	r4, r0
	if (gotResponse) {
 80824ee:	b153      	cbz	r3, 8082506 <_ZN12SessionCheck20waitForResponseStateEv+0x1e>
		// Success
		stateHandler = &SessionCheck::waitToSendState;
 80824f0:	4b1f      	ldr	r3, [pc, #124]	; (8082570 <_ZN12SessionCheck20waitForResponseStateEv+0x88>)
 80824f2:	a902      	add	r1, sp, #8
 80824f4:	9302      	str	r3, [sp, #8]
 80824f6:	3024      	adds	r0, #36	; 0x24
 80824f8:	2300      	movs	r3, #0
 80824fa:	9303      	str	r3, [sp, #12]
 80824fc:	f7ff ff7c 	bl	80823f8 <_ZNSt8functionIFvR12SessionCheckEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSC_S1_EE4typeEEE5valueERS3_E4typeEOSA_>
 8082500:	f001 fe30 	bl	8084164 <HAL_Timer_Get_Milli_Seconds>
		stateTime = millis();
 8082504:	61a0      	str	r0, [r4, #24]
 8082506:	f001 fe2d 	bl	8084164 <HAL_Timer_Get_Milli_Seconds>
	}

	if (millis() - stateTime < RECEIVE_TIMEOUT_MS) {
 808250a:	69a3      	ldr	r3, [r4, #24]
 808250c:	1ac0      	subs	r0, r0, r3
 808250e:	f64a 73c7 	movw	r3, #44999	; 0xafc7
 8082512:	4298      	cmp	r0, r3
 8082514:	d929      	bls.n	808256a <_ZN12SessionCheck20waitForResponseStateEv+0x82>
		// Waiting still
		return;
	}

	ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_SESSION_EVENT_LOST);
 8082516:	2100      	movs	r1, #0
 8082518:	200e      	movs	r0, #14
 808251a:	f000 f933 	bl	8082784 <_ZN16ConnectionEvents8addEventEii>

	// Failed to receive event
	if (++numFailures < NUM_FAILURES_BEFORE_RESET_SESSION) {
 808251e:	6a23      	ldr	r3, [r4, #32]
 8082520:	3301      	adds	r3, #1
 8082522:	2b01      	cmp	r3, #1
 8082524:	6223      	str	r3, [r4, #32]
 8082526:	dc03      	bgt.n	8082530 <_ZN12SessionCheck20waitForResponseStateEv+0x48>
		// Try sending again just in case
		sendEvent();
 8082528:	4620      	mov	r0, r4
 808252a:	f7ff ff8b 	bl	8082444 <_ZN12SessionCheck9sendEventEv>
		return;
 808252e:	e01c      	b.n	808256a <_ZN12SessionCheck20waitForResponseStateEv+0x82>
	}

	ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_SESSION_RESET);
 8082530:	2100      	movs	r1, #0
 8082532:	200f      	movs	r0, #15
 8082534:	f000 f926 	bl	8082784 <_ZN16ConnectionEvents8addEventEii>
 8082538:	4b0e      	ldr	r3, [pc, #56]	; (8082574 <_ZN12SessionCheck20waitForResponseStateEv+0x8c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 808253a:	4a0f      	ldr	r2, [pc, #60]	; (8082578 <_ZN12SessionCheck20waitForResponseStateEv+0x90>)
 808253c:	781b      	ldrb	r3, [r3, #0]
 808253e:	490f      	ldr	r1, [pc, #60]	; (808257c <_ZN12SessionCheck20waitForResponseStateEv+0x94>)
 8082540:	f88d 3000 	strb.w	r3, [sp]
 8082544:	a802      	add	r0, sp, #8
 8082546:	233c      	movs	r3, #60	; 0x3c
 8082548:	f004 f9d8 	bl	80868fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 808254c:	a803      	add	r0, sp, #12
 808254e:	f7fd ff03 	bl	8080358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

	// Too many tries, reset the session
	Particle.publish("spark/device/session/end", "", PRIVATE);

	delay(2000);
 8082552:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8082556:	f003 fedf 	bl	8086318 <delay>
 808255a:	4b09      	ldr	r3, [pc, #36]	; (8082580 <_ZN12SessionCheck20waitForResponseStateEv+0x98>)
 808255c:	6818      	ldr	r0, [r3, #0]

	// Reset the whole device just in case. If ConnectionCheck is present, do a full modem reset,
	// otherwise just reset.
	if (ConnectionCheck::getInstance()) {
 808255e:	b110      	cbz	r0, 8082566 <_ZN12SessionCheck20waitForResponseStateEv+0x7e>
		ConnectionCheck::getInstance()->fullModemReset();
 8082560:	f7ff fc9e 	bl	8081ea0 <_ZN15ConnectionCheck14fullModemResetEv>
 8082564:	e001      	b.n	808256a <_ZN12SessionCheck20waitForResponseStateEv+0x82>
	}
	else {
		System.reset();
 8082566:	f002 fa6d 	bl	8084a44 <_ZN11SystemClass5resetEv>
	}
}
 808256a:	b004      	add	sp, #16
 808256c:	bd10      	pop	{r4, pc}
 808256e:	bf00      	nop
 8082570:	0808249d 	.word	0x0808249d
 8082574:	200002e0 	.word	0x200002e0
 8082578:	0808acc4 	.word	0x0808acc4
 808257c:	0808ac3e 	.word	0x0808ac3e
 8082580:	200002dc 	.word	0x200002dc

08082584 <_GLOBAL__sub_I__ZN12SessionCheck19sessionRetainedDataE>:
 8082584:	4b02      	ldr	r3, [pc, #8]	; (8082590 <_GLOBAL__sub_I__ZN12SessionCheck19sessionRetainedDataE+0xc>)
 8082586:	2201      	movs	r2, #1
 8082588:	701a      	strb	r2, [r3, #0]
 808258a:	f001 bd2b 	b.w	8083fe4 <HAL_Pin_Map>
 808258e:	bf00      	nop
 8082590:	200002e0 	.word	0x200002e0

08082594 <_ZN16ConnectionEventsD1Ev>:
	instance = this;
}

ConnectionEvents::~ConnectionEvents() {

}
 8082594:	4770      	bx	lr

08082596 <_ZN16ConnectionEventsD0Ev>:

ConnectionEvents::ConnectionEvents(const char *connectionEventName) : connectionEventName(connectionEventName) {
	instance = this;
}

ConnectionEvents::~ConnectionEvents() {
 8082596:	b510      	push	{r4, lr}
 8082598:	4604      	mov	r4, r0

}
 808259a:	210c      	movs	r1, #12
 808259c:	f005 fa4a 	bl	8087a34 <_ZdlPvj>
 80825a0:	4620      	mov	r0, r4
 80825a2:	bd10      	pop	{r4, pc}

080825a4 <_ZN16ConnectionEventsC1EPKc>:
retained ConnectionEventData ConnectionEvents::connectionEventData;

ConnectionEvents *ConnectionEvents::instance;


ConnectionEvents::ConnectionEvents(const char *connectionEventName) : connectionEventName(connectionEventName) {
 80825a4:	4a03      	ldr	r2, [pc, #12]	; (80825b4 <_ZN16ConnectionEventsC1EPKc+0x10>)
 80825a6:	6041      	str	r1, [r0, #4]
 80825a8:	6002      	str	r2, [r0, #0]
 80825aa:	2200      	movs	r2, #0
 80825ac:	6082      	str	r2, [r0, #8]
	instance = this;
 80825ae:	4a02      	ldr	r2, [pc, #8]	; (80825b8 <_ZN16ConnectionEventsC1EPKc+0x14>)
 80825b0:	6010      	str	r0, [r2, #0]
}
 80825b2:	4770      	bx	lr
 80825b4:	0808ae44 	.word	0x0808ae44
 80825b8:	200002e4 	.word	0x200002e4

080825bc <_ZN16ConnectionEvents4loopEv>:
	}
}

// This should be called from loop()
// If there are queued events and there is a cloud connection they're published, oldest first.
void ConnectionEvents::loop() {
 80825bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	if (connectionEventData.eventCount == 0) {
 80825c0:	4d38      	ldr	r5, [pc, #224]	; (80826a4 <_ZN16ConnectionEvents4loopEv+0xe8>)
	}
}

// This should be called from loop()
// If there are queued events and there is a cloud connection they're published, oldest first.
void ConnectionEvents::loop() {
 80825c2:	b0d5      	sub	sp, #340	; 0x154

	if (connectionEventData.eventCount == 0) {
 80825c4:	686b      	ldr	r3, [r5, #4]
	}
}

// This should be called from loop()
// If there are queued events and there is a cloud connection they're published, oldest first.
void ConnectionEvents::loop() {
 80825c6:	4607      	mov	r7, r0

	if (connectionEventData.eventCount == 0) {
 80825c8:	2b00      	cmp	r3, #0
 80825ca:	d067      	beq.n	808269c <_ZN16ConnectionEvents4loopEv+0xe0>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80825cc:	f002 f880 	bl	80846d0 <spark_cloud_flag_connected>
		// No events to send
		return;
	}

	if (!Particle.connected()) {
 80825d0:	2800      	cmp	r0, #0
 80825d2:	d063      	beq.n	808269c <_ZN16ConnectionEvents4loopEv+0xe0>
 80825d4:	f001 fdc6 	bl	8084164 <HAL_Timer_Get_Milli_Seconds>
		// Not cloud connected, can't publish
		return;
	}

	if (millis() - connectionEventLastSent < PUBLISH_MIN_PERIOD_MS) {
 80825d8:	68bb      	ldr	r3, [r7, #8]
 80825da:	1ac0      	subs	r0, r0, r3
 80825dc:	f240 33f1 	movw	r3, #1009	; 0x3f1
 80825e0:	4298      	cmp	r0, r3
 80825e2:	d95b      	bls.n	808269c <_ZN16ConnectionEvents4loopEv+0xe0>
 80825e4:	f04f 0800 	mov.w	r8, #0
 80825e8:	462e      	mov	r6, r5
 80825ea:	4644      	mov	r4, r8
	char buf[256]; // 255 data bytes, plus null-terminator
	size_t numHandled;
	size_t offset = 0;

	// Pack as many events as we have, up to what will fit in a 255 byte publish
	for(numHandled = 0; numHandled < connectionEventData.eventCount; numHandled++) {
 80825ec:	686b      	ldr	r3, [r5, #4]
 80825ee:	429c      	cmp	r4, r3
 80825f0:	d21b      	bcs.n	808262a <_ZN16ConnectionEvents4loopEv+0x6e>
		char entryBuf[64];

		ConnectionEventInfo *ev = &connectionEventData.events[numHandled];
		size_t len = snprintf(entryBuf, sizeof(entryBuf), "%lu,%lu,%d,%d;", ev->tsDate, ev->tsMillis, ev->eventCode, ev->data);
 80825f2:	6973      	ldr	r3, [r6, #20]
 80825f4:	4a2c      	ldr	r2, [pc, #176]	; (80826a8 <_ZN16ConnectionEvents4loopEv+0xec>)
 80825f6:	9302      	str	r3, [sp, #8]
 80825f8:	6933      	ldr	r3, [r6, #16]
 80825fa:	2140      	movs	r1, #64	; 0x40
 80825fc:	9301      	str	r3, [sp, #4]
 80825fe:	68f3      	ldr	r3, [r6, #12]
 8082600:	a804      	add	r0, sp, #16
 8082602:	9300      	str	r3, [sp, #0]
 8082604:	68b3      	ldr	r3, [r6, #8]
 8082606:	f002 f8bb 	bl	8084780 <snprintf>
		if ((offset + len) >= sizeof(buf)) {
 808260a:	eb00 0908 	add.w	r9, r0, r8
 808260e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8082612:	f106 0610 	add.w	r6, r6, #16
 8082616:	d808      	bhi.n	808262a <_ZN16ConnectionEvents4loopEv+0x6e>
			// Not enough buffer space to send in this publish; try again later
			break;
		}
		strcpy(&buf[offset], entryBuf);
 8082618:	ab14      	add	r3, sp, #80	; 0x50
 808261a:	eb03 0008 	add.w	r0, r3, r8
 808261e:	a904      	add	r1, sp, #16
 8082620:	f006 fe5a 	bl	80892d8 <strcpy>
	char buf[256]; // 255 data bytes, plus null-terminator
	size_t numHandled;
	size_t offset = 0;

	// Pack as many events as we have, up to what will fit in a 255 byte publish
	for(numHandled = 0; numHandled < connectionEventData.eventCount; numHandled++) {
 8082624:	3401      	adds	r4, #1
 8082626:	46c8      	mov	r8, r9
 8082628:	e7e0      	b.n	80825ec <_ZN16ConnectionEvents4loopEv+0x30>
			break;
		}
		strcpy(&buf[offset], entryBuf);
		offset += len;
	}
	connectionEventData.eventCount -= numHandled;
 808262a:	686a      	ldr	r2, [r5, #4]
 808262c:	4e1d      	ldr	r6, [pc, #116]	; (80826a4 <_ZN16ConnectionEvents4loopEv+0xe8>)
 808262e:	1b12      	subs	r2, r2, r4
 8082630:	606a      	str	r2, [r5, #4]
	if (connectionEventData.eventCount > 0) {
 8082632:	b17a      	cbz	r2, 8082654 <_ZN16ConnectionEvents4loopEv+0x98>
		Log.info("couldn't send all events, saving %d for later", connectionEventData.eventCount);
 8082634:	491d      	ldr	r1, [pc, #116]	; (80826ac <_ZN16ConnectionEvents4loopEv+0xf0>)
 8082636:	481e      	ldr	r0, [pc, #120]	; (80826b0 <_ZN16ConnectionEvents4loopEv+0xf4>)
 8082638:	f7ff fbd2 	bl	8081de0 <_ZNK5spark6Logger4infoEPKcz>
		memmove(&connectionEventData.events[0], &connectionEventData.events[numHandled], connectionEventData.eventCount * sizeof(ConnectionEventData));
 808263c:	6873      	ldr	r3, [r6, #4]
 808263e:	eb06 1104 	add.w	r1, r6, r4, lsl #4
 8082642:	f44f 7202 	mov.w	r2, #520	; 0x208
 8082646:	435a      	muls	r2, r3
 8082648:	3108      	adds	r1, #8
 808264a:	f106 0008 	add.w	r0, r6, #8
 808264e:	f006 fdd6 	bl	80891fe <memmove>
 8082652:	e004      	b.n	808265e <_ZN16ConnectionEvents4loopEv+0xa2>
	}
	else {
		Log.info("sent %d events", numHandled);
 8082654:	4622      	mov	r2, r4
 8082656:	4917      	ldr	r1, [pc, #92]	; (80826b4 <_ZN16ConnectionEvents4loopEv+0xf8>)
 8082658:	4815      	ldr	r0, [pc, #84]	; (80826b0 <_ZN16ConnectionEvents4loopEv+0xf4>)
 808265a:	f7ff fbc1 	bl	8081de0 <_ZNK5spark6Logger4infoEPKcz>
 808265e:	4b16      	ldr	r3, [pc, #88]	; (80826b8 <_ZN16ConnectionEvents4loopEv+0xfc>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8082660:	aa14      	add	r2, sp, #80	; 0x50
 8082662:	781b      	ldrb	r3, [r3, #0]
 8082664:	a804      	add	r0, sp, #16
 8082666:	f88d 3000 	strb.w	r3, [sp]
 808266a:	6879      	ldr	r1, [r7, #4]
 808266c:	233c      	movs	r3, #60	; 0x3c
 808266e:	f004 f945 	bl	80868fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 8082672:	9c05      	ldr	r4, [sp, #20]
 8082674:	b17c      	cbz	r4, 8082696 <_ZN16ConnectionEvents4loopEv+0xda>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 8082676:	6863      	ldr	r3, [r4, #4]
 8082678:	3b01      	subs	r3, #1
 808267a:	6063      	str	r3, [r4, #4]
 808267c:	b95b      	cbnz	r3, 8082696 <_ZN16ConnectionEvents4loopEv+0xda>
        {
          _M_dispose();
 808267e:	6823      	ldr	r3, [r4, #0]
 8082680:	4620      	mov	r0, r4
 8082682:	689b      	ldr	r3, [r3, #8]
 8082684:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8082686:	68a3      	ldr	r3, [r4, #8]
 8082688:	3b01      	subs	r3, #1
 808268a:	60a3      	str	r3, [r4, #8]
 808268c:	b91b      	cbnz	r3, 8082696 <_ZN16ConnectionEvents4loopEv+0xda>
            _M_destroy();
 808268e:	6823      	ldr	r3, [r4, #0]
 8082690:	4620      	mov	r0, r4
 8082692:	68db      	ldr	r3, [r3, #12]
 8082694:	4798      	blx	r3
 8082696:	f001 fd65 	bl	8084164 <HAL_Timer_Get_Milli_Seconds>
	}

	Particle.publish(connectionEventName, buf, PRIVATE);
	connectionEventLastSent = millis();
 808269a:	60b8      	str	r0, [r7, #8]
}
 808269c:	b055      	add	sp, #340	; 0x154
 808269e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80826a2:	bf00      	nop
 80826a4:	40024010 	.word	0x40024010
 80826a8:	0808ad8c 	.word	0x0808ad8c
 80826ac:	0808ad9b 	.word	0x0808ad9b
 80826b0:	20000414 	.word	0x20000414
 80826b4:	0808adc9 	.word	0x0808adc9
 80826b8:	200002e1 	.word	0x200002e1

080826bc <_ZN16ConnectionEvents3addEii>:

// Add a new event. This should only be called from the main loop thread.
// Do not call from other threads like the system thread, software timer, or interrupt service routine.
void ConnectionEvents::add(int eventCode, int data /* = 0 */) {
 80826bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (connectionEventData.eventCount >= CONNECTION_EVENTS_MAX_EVENTS) {
 80826c0:	4c16      	ldr	r4, [pc, #88]	; (808271c <_ZN16ConnectionEvents3addEii+0x60>)
	connectionEventLastSent = millis();
}

// Add a new event. This should only be called from the main loop thread.
// Do not call from other threads like the system thread, software timer, or interrupt service routine.
void ConnectionEvents::add(int eventCode, int data /* = 0 */) {
 80826c2:	460f      	mov	r7, r1
	if (connectionEventData.eventCount >= CONNECTION_EVENTS_MAX_EVENTS) {
 80826c4:	6863      	ldr	r3, [r4, #4]
	connectionEventLastSent = millis();
}

// Add a new event. This should only be called from the main loop thread.
// Do not call from other threads like the system thread, software timer, or interrupt service routine.
void ConnectionEvents::add(int eventCode, int data /* = 0 */) {
 80826c6:	4690      	mov	r8, r2
	if (connectionEventData.eventCount >= CONNECTION_EVENTS_MAX_EVENTS) {
 80826c8:	2b1f      	cmp	r3, #31
 80826ca:	d90f      	bls.n	80826ec <_ZN16ConnectionEvents3addEii+0x30>
		// Throw out oldest event
		Log.info("discarding old event");
 80826cc:	4914      	ldr	r1, [pc, #80]	; (8082720 <_ZN16ConnectionEvents3addEii+0x64>)
 80826ce:	4815      	ldr	r0, [pc, #84]	; (8082724 <_ZN16ConnectionEvents3addEii+0x68>)
 80826d0:	f7ff fb86 	bl	8081de0 <_ZNK5spark6Logger4infoEPKcz>
		connectionEventData.eventCount--;
 80826d4:	6863      	ldr	r3, [r4, #4]
		memmove(&connectionEventData.events[0], &connectionEventData.events[1], connectionEventData.eventCount * sizeof(ConnectionEventData));
 80826d6:	f44f 7202 	mov.w	r2, #520	; 0x208
// Do not call from other threads like the system thread, software timer, or interrupt service routine.
void ConnectionEvents::add(int eventCode, int data /* = 0 */) {
	if (connectionEventData.eventCount >= CONNECTION_EVENTS_MAX_EVENTS) {
		// Throw out oldest event
		Log.info("discarding old event");
		connectionEventData.eventCount--;
 80826da:	3b01      	subs	r3, #1
		memmove(&connectionEventData.events[0], &connectionEventData.events[1], connectionEventData.eventCount * sizeof(ConnectionEventData));
 80826dc:	435a      	muls	r2, r3
 80826de:	f104 0118 	add.w	r1, r4, #24
 80826e2:	f104 0008 	add.w	r0, r4, #8
// Do not call from other threads like the system thread, software timer, or interrupt service routine.
void ConnectionEvents::add(int eventCode, int data /* = 0 */) {
	if (connectionEventData.eventCount >= CONNECTION_EVENTS_MAX_EVENTS) {
		// Throw out oldest event
		Log.info("discarding old event");
		connectionEventData.eventCount--;
 80826e6:	6063      	str	r3, [r4, #4]
		memmove(&connectionEventData.events[0], &connectionEventData.events[1], connectionEventData.eventCount * sizeof(ConnectionEventData));
 80826e8:	f006 fd89 	bl	80891fe <memmove>
	}

	// Add new event
	ConnectionEventInfo *ev = &connectionEventData.events[connectionEventData.eventCount++];
 80826ec:	6866      	ldr	r6, [r4, #4]
 80826ee:	1c75      	adds	r5, r6, #1
 80826f0:	6065      	str	r5, [r4, #4]
	ev->tsDate = Time.now();
 80826f2:	f003 fe00 	bl	80862f6 <_ZN9TimeClass3nowEv>
 80826f6:	eb04 1606 	add.w	r6, r4, r6, lsl #4
 80826fa:	60b0      	str	r0, [r6, #8]
 80826fc:	f001 fd32 	bl	8084164 <HAL_Timer_Get_Milli_Seconds>
	ev->tsMillis = millis();
	ev->eventCode = eventCode;
 8082700:	012d      	lsls	r5, r5, #4
 8082702:	1963      	adds	r3, r4, r5
	}

	// Add new event
	ConnectionEventInfo *ev = &connectionEventData.events[connectionEventData.eventCount++];
	ev->tsDate = Time.now();
	ev->tsMillis = millis();
 8082704:	60f0      	str	r0, [r6, #12]
	ev->eventCode = eventCode;
	ev->data = data;
 8082706:	f8c3 8004 	str.w	r8, [r3, #4]

	// Add new event
	ConnectionEventInfo *ev = &connectionEventData.events[connectionEventData.eventCount++];
	ev->tsDate = Time.now();
	ev->tsMillis = millis();
	ev->eventCode = eventCode;
 808270a:	5167      	str	r7, [r4, r5]
	ev->data = data;

	Log.info("connectionEvent event=%d data=%d", eventCode, data);
 808270c:	4643      	mov	r3, r8
 808270e:	463a      	mov	r2, r7
 8082710:	4905      	ldr	r1, [pc, #20]	; (8082728 <_ZN16ConnectionEvents3addEii+0x6c>)
 8082712:	4804      	ldr	r0, [pc, #16]	; (8082724 <_ZN16ConnectionEvents3addEii+0x68>)
 8082714:	f7ff fb64 	bl	8081de0 <_ZNK5spark6Logger4infoEPKcz>
 8082718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808271c:	40024010 	.word	0x40024010
 8082720:	0808add8 	.word	0x0808add8
 8082724:	20000414 	.word	0x20000414
 8082728:	0808aded 	.word	0x0808aded

0808272c <_ZN16ConnectionEvents5setupEv>:
}



// This should be called during setup()
void ConnectionEvents::setup() {
 808272c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (connectionEventData.eventMagic != CONNECTION_EVENT_MAGIC ||
 808272e:	4c11      	ldr	r4, [pc, #68]	; (8082774 <_ZN16ConnectionEvents5setupEv+0x48>)
 8082730:	4b11      	ldr	r3, [pc, #68]	; (8082778 <_ZN16ConnectionEvents5setupEv+0x4c>)
 8082732:	6822      	ldr	r2, [r4, #0]
}



// This should be called during setup()
void ConnectionEvents::setup() {
 8082734:	4606      	mov	r6, r0
	if (connectionEventData.eventMagic != CONNECTION_EVENT_MAGIC ||
 8082736:	429a      	cmp	r2, r3
 8082738:	461d      	mov	r5, r3
 808273a:	d102      	bne.n	8082742 <_ZN16ConnectionEvents5setupEv+0x16>
 808273c:	6863      	ldr	r3, [r4, #4]
 808273e:	2b20      	cmp	r3, #32
 8082740:	d904      	bls.n	808274c <_ZN16ConnectionEvents5setupEv+0x20>
		connectionEventData.eventCount > CONNECTION_EVENTS_MAX_EVENTS) {
		//
		Log.info("initializing connection event retained memory");
 8082742:	490e      	ldr	r1, [pc, #56]	; (808277c <_ZN16ConnectionEvents5setupEv+0x50>)
 8082744:	480e      	ldr	r0, [pc, #56]	; (8082780 <_ZN16ConnectionEvents5setupEv+0x54>)
 8082746:	f7ff fb4b 	bl	8081de0 <_ZNK5spark6Logger4infoEPKcz>
		connectionEventData.eventMagic = CONNECTION_EVENT_MAGIC;
 808274a:	6025      	str	r5, [r4, #0]
	}
	add(CONNECTION_EVENT_SETUP_STARTED);
 808274c:	2200      	movs	r2, #0
 808274e:	4611      	mov	r1, r2
 8082750:	4630      	mov	r0, r6
 8082752:	f7ff ffb3 	bl	80826bc <_ZN16ConnectionEvents3addEii>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 8082756:	2200      	movs	r2, #0
 8082758:	a802      	add	r0, sp, #8
 808275a:	f840 2d04 	str.w	r2, [r0, #-4]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 808275e:	4611      	mov	r1, r2
 8082760:	f001 fd28 	bl	80841b4 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 8082764:	9a01      	ldr	r2, [sp, #4]

	int resetReason = System.resetReason();
	if (resetReason != RESET_REASON_NONE) {
 8082766:	b11a      	cbz	r2, 8082770 <_ZN16ConnectionEvents5setupEv+0x44>
		add(CONNECTION_EVENT_RESET_REASON, resetReason);
 8082768:	2112      	movs	r1, #18
 808276a:	4630      	mov	r0, r6
 808276c:	f7ff ffa6 	bl	80826bc <_ZN16ConnectionEvents3addEii>
	}
}
 8082770:	b002      	add	sp, #8
 8082772:	bd70      	pop	{r4, r5, r6, pc}
 8082774:	40024010 	.word	0x40024010
 8082778:	5c39d416 	.word	0x5c39d416
 808277c:	0808ae0e 	.word	0x0808ae0e
 8082780:	20000414 	.word	0x20000414

08082784 <_ZN16ConnectionEvents8addEventEii>:
	Log.info("connectionEvent event=%d data=%d", eventCode, data);
}

// static
void ConnectionEvents::addEvent(int eventCode, int data) {
	if (instance) {
 8082784:	4b04      	ldr	r3, [pc, #16]	; (8082798 <_ZN16ConnectionEvents8addEventEii+0x14>)

	Log.info("connectionEvent event=%d data=%d", eventCode, data);
}

// static
void ConnectionEvents::addEvent(int eventCode, int data) {
 8082786:	460a      	mov	r2, r1
	if (instance) {
 8082788:	681b      	ldr	r3, [r3, #0]
 808278a:	b11b      	cbz	r3, 8082794 <_ZN16ConnectionEvents8addEventEii+0x10>
		instance->add(eventCode, data);
 808278c:	4601      	mov	r1, r0
 808278e:	4618      	mov	r0, r3
 8082790:	f7ff bf94 	b.w	80826bc <_ZN16ConnectionEvents3addEii>
 8082794:	4770      	bx	lr
 8082796:	bf00      	nop
 8082798:	200002e4 	.word	0x200002e4

0808279c <_GLOBAL__sub_I__ZN16ConnectionEvents19connectionEventDataE>:
 808279c:	4b02      	ldr	r3, [pc, #8]	; (80827a8 <_GLOBAL__sub_I__ZN16ConnectionEvents19connectionEventDataE+0xc>)
 808279e:	2201      	movs	r2, #1
 80827a0:	701a      	strb	r2, [r3, #0]
 80827a2:	f001 bc1f 	b.w	8083fe4 <HAL_Pin_Map>
 80827a6:	bf00      	nop
 80827a8:	200002e1 	.word	0x200002e1

080827ac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt7_Mem_fnIM10PowerCheckFvvEEPS3_EEE9_M_invokeERKSt9_Any_data>:
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80827ac:	6803      	ldr	r3, [r0, #0]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
 80827ae:	685a      	ldr	r2, [r3, #4]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80827b0:	6898      	ldr	r0, [r3, #8]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
 80827b2:	f012 0f01 	tst.w	r2, #1
 80827b6:	ea4f 0262 	mov.w	r2, r2, asr #1
 80827ba:	bf18      	it	ne
 80827bc:	5881      	ldrne	r1, [r0, r2]
 80827be:	681b      	ldr	r3, [r3, #0]
 80827c0:	4410      	add	r0, r2
 80827c2:	bf18      	it	ne
 80827c4:	58cb      	ldrne	r3, [r1, r3]
 80827c6:	4718      	bx	r3

080827c8 <_ZN10PowerCheckD1Ev>:
#include "Particle.h"
#include "PowerCheck.h"
PowerCheck::PowerCheck() {
}

PowerCheck::~PowerCheck() {
 80827c8:	b510      	push	{r4, lr}
 80827ca:	4604      	mov	r4, r0
 80827cc:	4b03      	ldr	r3, [pc, #12]	; (80827dc <_ZN10PowerCheckD1Ev+0x14>)
 80827ce:	f840 3b04 	str.w	r3, [r0], #4
 80827d2:	f002 f81b 	bl	808480c <_ZN4PMICD1Ev>
}
 80827d6:	4620      	mov	r0, r4
 80827d8:	bd10      	pop	{r4, pc}
 80827da:	bf00      	nop
 80827dc:	0808ae54 	.word	0x0808ae54

080827e0 <_ZN10PowerCheckD0Ev>:
#include "Particle.h"
#include "PowerCheck.h"
PowerCheck::PowerCheck() {
}

PowerCheck::~PowerCheck() {
 80827e0:	b510      	push	{r4, lr}
 80827e2:	4604      	mov	r4, r0
}
 80827e4:	f7ff fff0 	bl	80827c8 <_ZN10PowerCheckD1Ev>
 80827e8:	4620      	mov	r0, r4
 80827ea:	210c      	movs	r1, #12
 80827ec:	f005 f922 	bl	8087a34 <_ZdlPvj>
 80827f0:	4620      	mov	r0, r4
 80827f2:	bd10      	pop	{r4, pc}

080827f4 <_ZN10PowerCheck16interruptHandlerEv>:
		// between charging and done when there is no battery.
		return false;
	}
}

void PowerCheck::interruptHandler() {
 80827f4:	b510      	push	{r4, lr}
 80827f6:	4604      	mov	r4, r0
 80827f8:	f001 fcb4 	bl	8084164 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastChange < 100) {
 80827fc:	68a3      	ldr	r3, [r4, #8]
 80827fe:	1ac0      	subs	r0, r0, r3
 8082800:	2863      	cmp	r0, #99	; 0x63
		// We very recently had a change; assume there is no battey and we're rapidly switching
		// between fast charge and charge done
		hasBattery = false;
 8082802:	bf94      	ite	ls
 8082804:	2300      	movls	r3, #0
	}
	else {
		// Note: It's quite possible that hasBattery will be false when there is a battery; the logic
		// in getHasBattery() takes this into account by checking lastChange as well.
		hasBattery = true;
 8082806:	2301      	movhi	r3, #1
 8082808:	7163      	strb	r3, [r4, #5]
 808280a:	f001 fcab 	bl	8084164 <HAL_Timer_Get_Milli_Seconds>
	}
	lastChange = millis();
 808280e:	60a0      	str	r0, [r4, #8]
 8082810:	bd10      	pop	{r4, pc}

08082812 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM10PowerCheckFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8082812:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8082814:	b538      	push	{r3, r4, r5, lr}
 8082816:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8082818:	d005      	beq.n	8082826 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM10PowerCheckFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>
 808281a:	2a03      	cmp	r2, #3
 808281c:	d00f      	beq.n	808283e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM10PowerCheckFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x2c>
 808281e:	2a01      	cmp	r2, #1
 8082820:	d111      	bne.n	8082846 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM10PowerCheckFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x34>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8082822:	680b      	ldr	r3, [r1, #0]
 8082824:	e009      	b.n	808283a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM10PowerCheckFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x28>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8082826:	200c      	movs	r0, #12
 8082828:	680d      	ldr	r5, [r1, #0]
 808282a:	f7fd fc38 	bl	808009e <_Znwj>
 808282e:	4603      	mov	r3, r0
 8082830:	b118      	cbz	r0, 808283a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM10PowerCheckFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x28>
 8082832:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8082836:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 808283a:	6023      	str	r3, [r4, #0]
 808283c:	e003      	b.n	8082846 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM10PowerCheckFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x34>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 808283e:	210c      	movs	r1, #12
 8082840:	6800      	ldr	r0, [r0, #0]
 8082842:	f005 f8f7 	bl	8087a34 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8082846:	2000      	movs	r0, #0
 8082848:	bd38      	pop	{r3, r4, r5, pc}
	...

0808284c <_ZN10PowerCheckC1Ev>:
#include "Particle.h"
#include "PowerCheck.h"
PowerCheck::PowerCheck() {
 808284c:	b510      	push	{r4, lr}
 808284e:	4604      	mov	r4, r0
 8082850:	4b05      	ldr	r3, [pc, #20]	; (8082868 <_ZN10PowerCheckC1Ev+0x1c>)
 8082852:	2100      	movs	r1, #0
 8082854:	f840 3b04 	str.w	r3, [r0], #4
 8082858:	f001 ffc9 	bl	80847ee <_ZN4PMICC1Eb>
 808285c:	2301      	movs	r3, #1
 808285e:	7163      	strb	r3, [r4, #5]
 8082860:	2300      	movs	r3, #0
 8082862:	60a3      	str	r3, [r4, #8]
}
 8082864:	4620      	mov	r0, r4
 8082866:	bd10      	pop	{r4, pc}
 8082868:	0808ae54 	.word	0x0808ae54

0808286c <_ZN10PowerCheck5setupEv>:

PowerCheck::~PowerCheck() {
}

void PowerCheck::setup() {
 808286c:	b530      	push	{r4, r5, lr}
 808286e:	4605      	mov	r5, r0
 8082870:	b087      	sub	sp, #28
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082872:	2400      	movs	r4, #0
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082874:	200c      	movs	r0, #12
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082876:	9404      	str	r4, [sp, #16]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082878:	f7fd fc11 	bl	808009e <_Znwj>
 808287c:	b110      	cbz	r0, 8082884 <_ZN10PowerCheck5setupEv+0x18>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
 808287e:	4b0c      	ldr	r3, [pc, #48]	; (80828b0 <_ZN10PowerCheck5setupEv+0x44>)
 8082880:	e880 0038 	stmia.w	r0, {r3, r4, r5}
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8082884:	4b0b      	ldr	r3, [pc, #44]	; (80828b4 <_ZN10PowerCheck5setupEv+0x48>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082886:	9002      	str	r0, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8082888:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 808288a:	4b0b      	ldr	r3, [pc, #44]	; (80828b8 <_ZN10PowerCheck5setupEv+0x4c>)
bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
template <typename T>
bool attachInterrupt(uint16_t pin, void (T::*handler)(), T *instance, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0) {
    using namespace std::placeholders;
    return attachInterrupt(pin, std::bind(handler, instance), mode, priority, subpriority);
 808288c:	2202      	movs	r2, #2
 808288e:	9304      	str	r3, [sp, #16]
 8082890:	2300      	movs	r3, #0
 8082892:	9300      	str	r3, [sp, #0]
 8082894:	a902      	add	r1, sp, #8
 8082896:	f04f 33ff 	mov.w	r3, #4294967295
 808289a:	202e      	movs	r0, #46	; 0x2e
 808289c:	f004 faf4 	bl	8086e88 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80828a0:	9b04      	ldr	r3, [sp, #16]
 80828a2:	b11b      	cbz	r3, 80828ac <_ZN10PowerCheck5setupEv+0x40>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80828a4:	a902      	add	r1, sp, #8
 80828a6:	2203      	movs	r2, #3
 80828a8:	4608      	mov	r0, r1
 80828aa:	4798      	blx	r3
	// This can't be part of the constructor because it's initialized too early.
	// Call this from setup() instead.

	// BATT_INT_PC13
	attachInterrupt(LOW_BAT_UC, &PowerCheck::interruptHandler, this, FALLING);
}
 80828ac:	b007      	add	sp, #28
 80828ae:	bd30      	pop	{r4, r5, pc}
 80828b0:	080827f5 	.word	0x080827f5
 80828b4:	080827ad 	.word	0x080827ad
 80828b8:	08082813 	.word	0x08082813

080828bc <_ZN10PowerCheck11getHasPowerEv>:

bool PowerCheck::getHasPower() {
 80828bc:	b508      	push	{r3, lr}
	// Bit 2 (mask 0x4) == PG_STAT. If non-zero, power is good
	// This means we're powered off USB or VIN, so we don't know for sure if there's a battery
	byte systemStatus = pmic.getSystemStatus();
 80828be:	3004      	adds	r0, #4
 80828c0:	f001 ffe4 	bl	808488c <_ZN4PMIC15getSystemStatusEv>
	return ((systemStatus & 0x04) != 0);
}
 80828c4:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80828c8:	bd08      	pop	{r3, pc}

080828ca <_GLOBAL__sub_I__ZN10PowerCheckC2Ev>:
 80828ca:	f001 bb8b 	b.w	8083fe4 <HAL_Pin_Map>

080828ce <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
 80828ce:	4770      	bx	lr

080828d0 <_ZN15Adafruit_LIS3DHD1Ev>:
  LIS3DH_INT1_SRC_YL = 0x04,
  LIS3DH_INT1_SRC_XH = 0x02,
  LIS3DH_INT1_SRC_XL = 0x01
} list3dh_ctrl_int2_src_t;

class Adafruit_LIS3DH : public Adafruit_Sensor {
 80828d0:	4770      	bx	lr

080828d2 <_ZN13AssetTracker2C1Ev>:
uint8_t internalANT[]={0xB5,0x62,0x06,0x13,0x04,0x00,0x00,0x00,0xF0,0x7D,0x8A,0x2A};
uint8_t externalANT[]={0xB5,0x62,0x06,0x13,0x04,0x00,0x01,0x00,0xF0,0x7D,0x8B,0x2E};

AssetTracker2::AssetTracker2() {

}
 80828d2:	4770      	bx	lr

080828d4 <_ZN13AssetTracker25beginEv>:

void AssetTracker2::begin() {
 80828d4:	b510      	push	{r4, lr}
    accel.begin(LIS3DH_DEFAULT_ADDRESS);
 80828d6:	4c07      	ldr	r4, [pc, #28]	; (80828f4 <_ZN13AssetTracker25beginEv+0x20>)
 80828d8:	2118      	movs	r1, #24
 80828da:	4620      	mov	r0, r4
 80828dc:	f000 fbdd 	bl	808309a <_ZN15Adafruit_LIS3DH5beginEh>

    // Default to 5kHz low-power sampling
    accel.setDataRate(LIS3DH_DATARATE_LOWPOWER_5KHZ);
 80828e0:	4620      	mov	r0, r4
 80828e2:	2109      	movs	r1, #9
 80828e4:	f000 fbc8 	bl	8083078 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>

    // Default to 4 gravities range
    accel.setRange(LIS3DH_RANGE_4_G);
 80828e8:	4620      	mov	r0, r4

}
 80828ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

    // Default to 5kHz low-power sampling
    accel.setDataRate(LIS3DH_DATARATE_LOWPOWER_5KHZ);

    // Default to 4 gravities range
    accel.setRange(LIS3DH_RANGE_4_G);
 80828ee:	2101      	movs	r1, #1
 80828f0:	f000 bbaa 	b.w	8083048 <_ZN15Adafruit_LIS3DH8setRangeE14lis3dh_range_t>
 80828f4:	200002e8 	.word	0x200002e8

080828f8 <_ZN13AssetTracker27readLatEv>:

}

float AssetTracker2::readLat() {
    return gps.latitude;
}
 80828f8:	4b01      	ldr	r3, [pc, #4]	; (8082900 <_ZN13AssetTracker27readLatEv+0x8>)
 80828fa:	6958      	ldr	r0, [r3, #20]
 80828fc:	4770      	bx	lr
 80828fe:	bf00      	nop
 8082900:	20000314 	.word	0x20000314

08082904 <_ZN13AssetTracker27readLonEv>:

float AssetTracker2::readLon() {
    return gps.longitude;
}
 8082904:	4b01      	ldr	r3, [pc, #4]	; (808290c <_ZN13AssetTracker27readLonEv+0x8>)
 8082906:	6998      	ldr	r0, [r3, #24]
 8082908:	4770      	bx	lr
 808290a:	bf00      	nop
 808290c:	20000314 	.word	0x20000314

08082910 <_ZN13AssetTracker210readLatDegEv>:

float AssetTracker2::readLatDeg() {
    return gps.latitudeDegrees;
}
 8082910:	4b01      	ldr	r3, [pc, #4]	; (8082918 <_ZN13AssetTracker210readLatDegEv+0x8>)
 8082912:	69d8      	ldr	r0, [r3, #28]
 8082914:	4770      	bx	lr
 8082916:	bf00      	nop
 8082918:	20000314 	.word	0x20000314

0808291c <_ZN13AssetTracker210readLonDegEv>:

float AssetTracker2::readLonDeg() {
    return gps.longitudeDegrees;
}
 808291c:	4b01      	ldr	r3, [pc, #4]	; (8082924 <_ZN13AssetTracker210readLonDegEv+0x8>)
 808291e:	6a18      	ldr	r0, [r3, #32]
 8082920:	4770      	bx	lr
 8082922:	bf00      	nop
 8082924:	20000314 	.word	0x20000314

08082928 <_ZN13AssetTracker214getGpsAccuracyEv>:

float AssetTracker2::getGpsAccuracy() {
 8082928:	b508      	push	{r3, lr}
  return (float)gps.horzAcc;
 808292a:	4b02      	ldr	r3, [pc, #8]	; (8082934 <_ZN13AssetTracker214getGpsAccuracyEv+0xc>)
 808292c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 808292e:	f006 f8b7 	bl	8088aa0 <__aeabi_ui2f>
}
 8082932:	bd08      	pop	{r3, pc}
 8082934:	20000314 	.word	0x20000314

08082938 <_ZN13AssetTracker212getHaccuracyEv>:
  return gps.headVehValid;
}

uint32_t AssetTracker2::getHaccuracy() {
  return gps.horzAcc;
}
 8082938:	4b01      	ldr	r3, [pc, #4]	; (8082940 <_ZN13AssetTracker212getHaccuracyEv+0x8>)
 808293a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 808293c:	4770      	bx	lr
 808293e:	bf00      	nop
 8082940:	20000314 	.word	0x20000314

08082944 <_ZN13AssetTracker212getVaccuracyEv>:
uint32_t AssetTracker2::getVaccuracy() {
  return gps.vertAcc;
}
 8082944:	4b01      	ldr	r3, [pc, #4]	; (808294c <_ZN13AssetTracker212getVaccuracyEv+0x8>)
 8082946:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8082948:	4770      	bx	lr
 808294a:	bf00      	nop
 808294c:	20000314 	.word	0x20000314

08082950 <_ZN13AssetTracker27getVelNEv>:
int32_t AssetTracker2::getVelN() {
  return gps.velN;
}
 8082950:	4b01      	ldr	r3, [pc, #4]	; (8082958 <_ZN13AssetTracker27getVelNEv+0x8>)
 8082952:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8082954:	4770      	bx	lr
 8082956:	bf00      	nop
 8082958:	20000314 	.word	0x20000314

0808295c <_ZN13AssetTracker27getVelEEv>:
int32_t AssetTracker2::getVelE() {
  return gps.velE;
}
 808295c:	4b01      	ldr	r3, [pc, #4]	; (8082964 <_ZN13AssetTracker27getVelEEv+0x8>)
 808295e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8082960:	4770      	bx	lr
 8082962:	bf00      	nop
 8082964:	20000314 	.word	0x20000314

08082968 <_ZN13AssetTracker27getVelDEv>:
int32_t AssetTracker2::getVelD() {
  return gps.velD;
}
 8082968:	4b01      	ldr	r3, [pc, #4]	; (8082970 <_ZN13AssetTracker27getVelDEv+0x8>)
 808296a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 808296c:	4770      	bx	lr
 808296e:	bf00      	nop
 8082970:	20000314 	.word	0x20000314

08082974 <_ZN13AssetTracker210getOdoTripEv>:
int32_t AssetTracker2::getOdoTrip() {
  return gps.odoTrip;
}
 8082974:	4b01      	ldr	r3, [pc, #4]	; (808297c <_ZN13AssetTracker210getOdoTripEv+0x8>)
 8082976:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8082978:	4770      	bx	lr
 808297a:	bf00      	nop
 808297c:	20000314 	.word	0x20000314

08082980 <_ZN13AssetTracker211getOdoTotalEv>:
int32_t AssetTracker2::getOdoTotal() {
  return gps.odoTotal;
}
 8082980:	4b01      	ldr	r3, [pc, #4]	; (8082988 <_ZN13AssetTracker211getOdoTotalEv+0x8>)
 8082982:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8082984:	4770      	bx	lr
 8082986:	bf00      	nop
 8082988:	20000314 	.word	0x20000314

0808298c <_ZN13AssetTracker29getGspeedEv>:
int32_t AssetTracker2::getGspeed() {
  return gps.gSpeed;
}
 808298c:	4b01      	ldr	r3, [pc, #4]	; (8082994 <_ZN13AssetTracker29getGspeedEv+0x8>)
 808298e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8082990:	4770      	bx	lr
 8082992:	bf00      	nop
 8082994:	20000314 	.word	0x20000314

08082998 <_ZN13AssetTracker27getHourEv>:

uint8_t AssetTracker2::getHour(){
  return gps.hour;
}
 8082998:	4b01      	ldr	r3, [pc, #4]	; (80829a0 <_ZN13AssetTracker27getHourEv+0x8>)
 808299a:	7858      	ldrb	r0, [r3, #1]
 808299c:	4770      	bx	lr
 808299e:	bf00      	nop
 80829a0:	20000314 	.word	0x20000314

080829a4 <_ZN13AssetTracker29getMinuteEv>:

uint8_t AssetTracker2::getMinute(){
  return gps.minute;
}
 80829a4:	4b01      	ldr	r3, [pc, #4]	; (80829ac <_ZN13AssetTracker29getMinuteEv+0x8>)
 80829a6:	7898      	ldrb	r0, [r3, #2]
 80829a8:	4770      	bx	lr
 80829aa:	bf00      	nop
 80829ac:	20000314 	.word	0x20000314

080829b0 <_ZN13AssetTracker210getSecondsEv>:

uint8_t AssetTracker2::getSeconds(){
  return gps.seconds;
}
 80829b0:	4b01      	ldr	r3, [pc, #4]	; (80829b8 <_ZN13AssetTracker210getSecondsEv+0x8>)
 80829b2:	78d8      	ldrb	r0, [r3, #3]
 80829b4:	4770      	bx	lr
 80829b6:	bf00      	nop
 80829b8:	20000314 	.word	0x20000314

080829bc <_ZN13AssetTracker215getMillisecondsEv>:

int32_t AssetTracker2::getMilliseconds(){
  return gps.milliseconds;
}
 80829bc:	4b01      	ldr	r3, [pc, #4]	; (80829c4 <_ZN13AssetTracker215getMillisecondsEv+0x8>)
 80829be:	6898      	ldr	r0, [r3, #8]
 80829c0:	4770      	bx	lr
 80829c2:	bf00      	nop
 80829c4:	20000314 	.word	0x20000314

080829c8 <_ZN13AssetTracker27getYearEv>:

uint16_t AssetTracker2::getYear(){
  return gps.year;
}
 80829c8:	4b01      	ldr	r3, [pc, #4]	; (80829d0 <_ZN13AssetTracker27getYearEv+0x8>)
 80829ca:	88d8      	ldrh	r0, [r3, #6]
 80829cc:	4770      	bx	lr
 80829ce:	bf00      	nop
 80829d0:	20000314 	.word	0x20000314

080829d4 <_ZN13AssetTracker28getMonthEv>:

uint8_t AssetTracker2::getMonth(){
  return gps.month;
}
 80829d4:	4b01      	ldr	r3, [pc, #4]	; (80829dc <_ZN13AssetTracker28getMonthEv+0x8>)
 80829d6:	7918      	ldrb	r0, [r3, #4]
 80829d8:	4770      	bx	lr
 80829da:	bf00      	nop
 80829dc:	20000314 	.word	0x20000314

080829e0 <_ZN13AssetTracker26getDayEv>:

uint8_t AssetTracker2::getDay(){
  return gps.day;
}
 80829e0:	4b01      	ldr	r3, [pc, #4]	; (80829e8 <_ZN13AssetTracker26getDayEv+0x8>)
 80829e2:	7958      	ldrb	r0, [r3, #5]
 80829e4:	4770      	bx	lr
 80829e6:	bf00      	nop
 80829e8:	20000314 	.word	0x20000314

080829ec <_ZN13AssetTracker213getSatellitesEv>:

uint8_t AssetTracker2::getSatellites(){
  return gps.satellites;
}
 80829ec:	4b01      	ldr	r3, [pc, #4]	; (80829f4 <_ZN13AssetTracker213getSatellitesEv+0x8>)
 80829ee:	f893 003b 	ldrb.w	r0, [r3, #59]	; 0x3b
 80829f2:	4770      	bx	lr
 80829f4:	20000314 	.word	0x20000314

080829f8 <_ZN13AssetTracker213getFixQualityEv>:

uint8_t AssetTracker2::getFixQuality(){
  return gps.fixquality;
}
 80829f8:	4b01      	ldr	r3, [pc, #4]	; (8082a00 <_ZN13AssetTracker213getFixQualityEv+0x8>)
 80829fa:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
 80829fe:	4770      	bx	lr
 8082a00:	20000314 	.word	0x20000314

08082a04 <_ZN13AssetTracker28getSpeedEv>:

float AssetTracker2::getSpeed(){
  return gps.speed;
}
 8082a04:	4b01      	ldr	r3, [pc, #4]	; (8082a0c <_ZN13AssetTracker28getSpeedEv+0x8>)
 8082a06:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8082a08:	4770      	bx	lr
 8082a0a:	bf00      	nop
 8082a0c:	20000314 	.word	0x20000314

08082a10 <_ZN13AssetTracker214getGeoIdHeightEv>:

float AssetTracker2::getGeoIdHeight(){
  return gps.geoidheight;
}
 8082a10:	4b01      	ldr	r3, [pc, #4]	; (8082a18 <_ZN13AssetTracker214getGeoIdHeightEv+0x8>)
 8082a12:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8082a14:	4770      	bx	lr
 8082a16:	bf00      	nop
 8082a18:	20000314 	.word	0x20000314

08082a1c <_ZN13AssetTracker211getAltitudeEv>:

float AssetTracker2::getAltitude(){
  return gps.altitude;
}
 8082a1c:	4b01      	ldr	r3, [pc, #4]	; (8082a24 <_ZN13AssetTracker211getAltitudeEv+0x8>)
 8082a1e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8082a20:	4770      	bx	lr
 8082a22:	bf00      	nop
 8082a24:	20000314 	.word	0x20000314

08082a28 <_ZN13AssetTracker210readLatLonEv>:

String AssetTracker2::readLatLon() {
 8082a28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    String latLon = String::format("%f,%f",gps.latitudeDegrees,gps.longitudeDegrees);
 8082a2a:	4d0a      	ldr	r5, [pc, #40]	; (8082a54 <_ZN13AssetTracker210readLatLonEv+0x2c>)

float AssetTracker2::getAltitude(){
  return gps.altitude;
}

String AssetTracker2::readLatLon() {
 8082a2c:	4604      	mov	r4, r0
    String latLon = String::format("%f,%f",gps.latitudeDegrees,gps.longitudeDegrees);
 8082a2e:	69e8      	ldr	r0, [r5, #28]
 8082a30:	f005 fbe4 	bl	80881fc <__aeabi_f2d>
 8082a34:	4606      	mov	r6, r0
 8082a36:	6a28      	ldr	r0, [r5, #32]
 8082a38:	460f      	mov	r7, r1
 8082a3a:	f005 fbdf 	bl	80881fc <__aeabi_f2d>
 8082a3e:	4632      	mov	r2, r6
 8082a40:	e9cd 0100 	strd	r0, r1, [sp]
 8082a44:	463b      	mov	r3, r7
 8082a46:	4620      	mov	r0, r4
 8082a48:	4903      	ldr	r1, [pc, #12]	; (8082a58 <_ZN13AssetTracker210readLatLonEv+0x30>)
 8082a4a:	f002 f9f9 	bl	8084e40 <_ZN6String6formatEPKcz>
    return latLon;
}
 8082a4e:	4620      	mov	r0, r4
 8082a50:	b003      	add	sp, #12
 8082a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8082a54:	20000314 	.word	0x20000314
 8082a58:	0808ae5c 	.word	0x0808ae5c

08082a5c <_ZN13AssetTracker25gpsOnEv>:

void AssetTracker2::gpsOn() {
 8082a5c:	b538      	push	{r3, r4, r5, lr}
    enum ubxReturn err;
    // Power to the GPS is controlled by a FET connected to D6
    pinMode(D6,OUTPUT);
 8082a5e:	2101      	movs	r1, #1
 8082a60:	2006      	movs	r0, #6
 8082a62:	f004 fe91 	bl	8087788 <pinMode>
    digitalWrite(D6,LOW);
 8082a66:	2100      	movs	r1, #0
 8082a68:	2006      	movs	r0, #6
 8082a6a:	f004 fe9e 	bl	80877aa <digitalWrite>
    Serial1.begin(9600);
 8082a6e:	f004 fb0f 	bl	8087090 <_Z22__fetch_global_Serial1v>
 8082a72:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8082a76:	f004 fb01 	bl	808707c <_ZN11USARTSerial5beginEm>
    delay(10);
 8082a7a:	200a      	movs	r0, #10
 8082a7c:	f003 fc4c 	bl	8086318 <delay>
	if (err != ubxPENDING ){
	    Serial.print("gps.begin failed: ");
	    Serial.println(err);
	    return;
	}
	err=gps.begin();
 8082a80:	480f      	ldr	r0, [pc, #60]	; (8082ac0 <_ZN13AssetTracker25gpsOnEv+0x64>)
 8082a82:	f001 f92f 	bl	8083ce4 <_ZN12UbloxM8Q_GPS5beginEv>
    pinMode(D6,OUTPUT);
    digitalWrite(D6,LOW);
    Serial1.begin(9600);
    delay(10);
    err = ubxPENDING;
    while (err != ubxSUCCESS){
 8082a86:	4604      	mov	r4, r0
 8082a88:	b190      	cbz	r0, 8082ab0 <_ZN13AssetTracker25gpsOnEv+0x54>
	if (err != ubxPENDING ){
 8082a8a:	2c01      	cmp	r4, #1
 8082a8c:	d0f8      	beq.n	8082a80 <_ZN13AssetTracker25gpsOnEv+0x24>
	    Serial.print("gps.begin failed: ");
 8082a8e:	f004 f96d 	bl	8086d6c <_Z16_fetch_usbserialv>
 8082a92:	490c      	ldr	r1, [pc, #48]	; (8082ac4 <_ZN13AssetTracker25gpsOnEv+0x68>)
 8082a94:	f002 fa22 	bl	8084edc <_ZN5Print5printEPKc>
	    Serial.println(err);
 8082a98:	f004 f968 	bl	8086d6c <_Z16_fetch_usbserialv>
 8082a9c:	4605      	mov	r5, r0
 8082a9e:	4621      	mov	r1, r4
 8082aa0:	220a      	movs	r2, #10
 8082aa2:	f002 fa38 	bl	8084f16 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
 8082aa6:	4628      	mov	r0, r5
	    return;
	}
	err=gps.begin();
    }
    Serial.println("GPS started");
}
 8082aa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8082aac:	f002 ba1d 	b.w	8084eea <_ZN5Print7printlnEv>
	    Serial.println(err);
	    return;
	}
	err=gps.begin();
    }
    Serial.println("GPS started");
 8082ab0:	f004 f95c 	bl	8086d6c <_Z16_fetch_usbserialv>
}
 8082ab4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	    Serial.println(err);
	    return;
	}
	err=gps.begin();
    }
    Serial.println("GPS started");
 8082ab8:	4903      	ldr	r1, [pc, #12]	; (8082ac8 <_ZN13AssetTracker25gpsOnEv+0x6c>)
 8082aba:	f002 ba22 	b.w	8084f02 <_ZN5Print7printlnEPKc>
 8082abe:	bf00      	nop
 8082ac0:	20000314 	.word	0x20000314
 8082ac4:	0808ae62 	.word	0x0808ae62
 8082ac8:	0808ae75 	.word	0x0808ae75

08082acc <_ZN13AssetTracker215gpsInitCompleteEv>:
    digitalWrite(D6,HIGH);
}

bool AssetTracker2::gpsInitComplete() {
    return gps.initComplete;
}
 8082acc:	4b01      	ldr	r3, [pc, #4]	; (8082ad4 <_ZN13AssetTracker215gpsInitCompleteEv+0x8>)
 8082ace:	7818      	ldrb	r0, [r3, #0]
 8082ad0:	4770      	bx	lr
 8082ad2:	bf00      	nop
 8082ad4:	20000314 	.word	0x20000314

08082ad8 <_ZN13AssetTracker26gpsFixEv>:

bool AssetTracker2::gpsFix() {
    return gps.fix;
}
 8082ad8:	4b01      	ldr	r3, [pc, #4]	; (8082ae0 <_ZN13AssetTracker26gpsFixEv+0x8>)
 8082ada:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 8082ade:	4770      	bx	lr
 8082ae0:	20000314 	.word	0x20000314

08082ae4 <_ZN13AssetTracker215antennaInternalEv>:

bool AssetTracker2::gpsTimeValid() {
    return gps.timeValid;
}

bool AssetTracker2::antennaInternal(){
 8082ae4:	b538      	push	{r3, r4, r5, lr}

  for(uint8_t i=0;i<12;i++)
    {
        Serial1.write(internalANT[i]); //send the command to gps modul
 8082ae6:	4d06      	ldr	r5, [pc, #24]	; (8082b00 <_ZN13AssetTracker215antennaInternalEv+0x1c>)

bool AssetTracker2::gpsTimeValid() {
    return gps.timeValid;
}

bool AssetTracker2::antennaInternal(){
 8082ae8:	2400      	movs	r4, #0

  for(uint8_t i=0;i<12;i++)
    {
        Serial1.write(internalANT[i]); //send the command to gps modul
 8082aea:	f004 fad1 	bl	8087090 <_Z22__fetch_global_Serial1v>
 8082aee:	6803      	ldr	r3, [r0, #0]
 8082af0:	5d29      	ldrb	r1, [r5, r4]
 8082af2:	689b      	ldr	r3, [r3, #8]
 8082af4:	3401      	adds	r4, #1
 8082af6:	4798      	blx	r3
    return gps.timeValid;
}

bool AssetTracker2::antennaInternal(){

  for(uint8_t i=0;i<12;i++)
 8082af8:	2c0c      	cmp	r4, #12
 8082afa:	d1f6      	bne.n	8082aea <_ZN13AssetTracker215antennaInternalEv+0x6>
    {
        Serial1.write(internalANT[i]); //send the command to gps modul
    }
  return true;

}
 8082afc:	2001      	movs	r0, #1
 8082afe:	bd38      	pop	{r3, r4, r5, pc}
 8082b00:	20000018 	.word	0x20000018

08082b04 <_ZN13AssetTracker215antennaExternalEv>:

bool AssetTracker2::antennaExternal(){
 8082b04:	b538      	push	{r3, r4, r5, lr}

  for(uint8_t i=0;i<12;i++)
    {
        Serial1.write(externalANT[i]); //send the command to gps modul
 8082b06:	4d06      	ldr	r5, [pc, #24]	; (8082b20 <_ZN13AssetTracker215antennaExternalEv+0x1c>)
    }
  return true;

}

bool AssetTracker2::antennaExternal(){
 8082b08:	2400      	movs	r4, #0

  for(uint8_t i=0;i<12;i++)
    {
        Serial1.write(externalANT[i]); //send the command to gps modul
 8082b0a:	f004 fac1 	bl	8087090 <_Z22__fetch_global_Serial1v>
 8082b0e:	6803      	ldr	r3, [r0, #0]
 8082b10:	5d29      	ldrb	r1, [r5, r4]
 8082b12:	689b      	ldr	r3, [r3, #8]
 8082b14:	3401      	adds	r4, #1
 8082b16:	4798      	blx	r3

}

bool AssetTracker2::antennaExternal(){

  for(uint8_t i=0;i<12;i++)
 8082b18:	2c0c      	cmp	r4, #12
 8082b1a:	d1f6      	bne.n	8082b0a <_ZN13AssetTracker215antennaExternalEv+0x6>
    {
        Serial1.write(externalANT[i]); //send the command to gps modul
    }
  return true;

}
 8082b1c:	2001      	movs	r0, #1
 8082b1e:	bd38      	pop	{r3, r4, r5, pc}
 8082b20:	20000024 	.word	0x20000024

08082b24 <_ZN13AssetTracker29updateGPSEv>:

void AssetTracker2::updateGPS() {
    gps.read();
 8082b24:	4801      	ldr	r0, [pc, #4]	; (8082b2c <_ZN13AssetTracker29updateGPSEv+0x8>)
 8082b26:	f000 bf89 	b.w	8083a3c <_ZN12UbloxM8Q_GPS4readEv>
 8082b2a:	bf00      	nop
 8082b2c:	20000314 	.word	0x20000314

08082b30 <_ZN13AssetTracker27gpsRateEti>:
}

void AssetTracker2::gpsRate(uint16_t measurement, int navigation) {
    gps.setRate(measurement, navigation);
 8082b30:	4801      	ldr	r0, [pc, #4]	; (8082b38 <_ZN13AssetTracker27gpsRateEti+0x8>)
 8082b32:	f001 b849 	b.w	8083bc8 <_ZN12UbloxM8Q_GPS7setRateEti>
 8082b36:	bf00      	nop
 8082b38:	20000314 	.word	0x20000314

08082b3c <_ZN13AssetTracker211gpsResetODOEv>:
}

void AssetTracker2::gpsResetODO(void) {
    gps.resetODO();
 8082b3c:	4801      	ldr	r0, [pc, #4]	; (8082b44 <_ZN13AssetTracker211gpsResetODOEv+0x8>)
 8082b3e:	f001 b83d 	b.w	8083bbc <_ZN12UbloxM8Q_GPS8resetODOEv>
 8082b42:	bf00      	nop
 8082b44:	20000314 	.word	0x20000314

08082b48 <_ZN13AssetTracker25readXEv>:

void AssetTracker2::gpsHoldThresh(int speed, uint16_t distance) {
    gps.setThresh(speed, distance);
}

int AssetTracker2::readX() {
 8082b48:	b510      	push	{r4, lr}
    accel.read();
 8082b4a:	4c03      	ldr	r4, [pc, #12]	; (8082b58 <_ZN13AssetTracker25readXEv+0x10>)
 8082b4c:	4620      	mov	r0, r4
 8082b4e:	f000 faf5 	bl	808313c <_ZN15Adafruit_LIS3DH4readEv>
    return accel.x;
}
 8082b52:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 8082b56:	bd10      	pop	{r4, pc}
 8082b58:	200002e8 	.word	0x200002e8

08082b5c <_ZN13AssetTracker25readYEv>:

int AssetTracker2::readY() {
 8082b5c:	b510      	push	{r4, lr}
    accel.read();
 8082b5e:	4c03      	ldr	r4, [pc, #12]	; (8082b6c <_ZN13AssetTracker25readYEv+0x10>)
 8082b60:	4620      	mov	r0, r4
 8082b62:	f000 faeb 	bl	808313c <_ZN15Adafruit_LIS3DH4readEv>
    return accel.y;
}
 8082b66:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8082b6a:	bd10      	pop	{r4, pc}
 8082b6c:	200002e8 	.word	0x200002e8

08082b70 <_ZN13AssetTracker25readZEv>:

int AssetTracker2::readZ() {
 8082b70:	b510      	push	{r4, lr}
    accel.read();
 8082b72:	4c03      	ldr	r4, [pc, #12]	; (8082b80 <_ZN13AssetTracker25readZEv+0x10>)
 8082b74:	4620      	mov	r0, r4
 8082b76:	f000 fae1 	bl	808313c <_ZN15Adafruit_LIS3DH4readEv>
    return accel.z;
}
 8082b7a:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
 8082b7e:	bd10      	pop	{r4, pc}
 8082b80:	200002e8 	.word	0x200002e8

08082b84 <_ZN13AssetTracker216readXYZmagnitudeEv>:
    *y = accel.y;
    *z = accel.z;
}


int AssetTracker2::readXYZmagnitude() {
 8082b84:	b510      	push	{r4, lr}
    accel.read();
 8082b86:	4c0b      	ldr	r4, [pc, #44]	; (8082bb4 <_ZN13AssetTracker216readXYZmagnitudeEv+0x30>)
 8082b88:	4620      	mov	r0, r4
 8082b8a:	f000 fad7 	bl	808313c <_ZN15Adafruit_LIS3DH4readEv>
    int magnitude = sqrt((accel.x*accel.x)+(accel.y*accel.y)+(accel.z*accel.z));
 8082b8e:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8082b92:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8082b96:	4352      	muls	r2, r2
 8082b98:	fb03 2303 	mla	r3, r3, r3, r2
 8082b9c:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
 8082ba0:	fb00 3000 	mla	r0, r0, r0, r3
 8082ba4:	f005 fb18 	bl	80881d8 <__aeabi_i2d>
 8082ba8:	f005 f8a2 	bl	8087cf0 <sqrt>
    return magnitude;
 8082bac:	f005 fe2a 	bl	8088804 <__aeabi_d2iz>
}
 8082bb0:	bd10      	pop	{r4, pc}
 8082bb2:	bf00      	nop
 8082bb4:	200002e8 	.word	0x200002e8

08082bb8 <_ZN15Adafruit_LIS3DHD0Ev>:
 8082bb8:	b510      	push	{r4, lr}
 8082bba:	4604      	mov	r4, r0
 8082bbc:	212c      	movs	r1, #44	; 0x2c
 8082bbe:	f004 ff39 	bl	8087a34 <_ZdlPvj>
 8082bc2:	4620      	mov	r0, r4
 8082bc4:	bd10      	pop	{r4, pc}
	...

08082bc8 <_GLOBAL__sub_I_gps>:
	return accel.setupLowPowerWakeMode(movementThreshold);
}

uint8_t AssetTracker2::clearAccelInterrupt() {
	return accel.clearInterrupt();
}
 8082bc8:	b510      	push	{r4, lr}
#include "math.h"

//----------------- Tracker ----------------//

UbloxM8Q_GPS gps = UbloxM8Q_GPS();
Adafruit_LIS3DH accel = Adafruit_LIS3DH(A2);
 8082bca:	4c08      	ldr	r4, [pc, #32]	; (8082bec <_GLOBAL__sub_I_gps+0x24>)
 8082bcc:	f001 fa0a 	bl	8083fe4 <HAL_Pin_Map>
#include "AssetTracker2.h"
#include "math.h"

//----------------- Tracker ----------------//

UbloxM8Q_GPS gps = UbloxM8Q_GPS();
 8082bd0:	4807      	ldr	r0, [pc, #28]	; (8082bf0 <_GLOBAL__sub_I_gps+0x28>)
 8082bd2:	f000 fbb1 	bl	8083338 <_ZN12UbloxM8Q_GPSC1Ev>
Adafruit_LIS3DH accel = Adafruit_LIS3DH(A2);
 8082bd6:	210c      	movs	r1, #12
 8082bd8:	4620      	mov	r0, r4
 8082bda:	f000 f939 	bl	8082e50 <_ZN15Adafruit_LIS3DHC1Ea>
 8082bde:	4620      	mov	r0, r4
	return accel.setupLowPowerWakeMode(movementThreshold);
}

uint8_t AssetTracker2::clearAccelInterrupt() {
	return accel.clearInterrupt();
}
 8082be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "math.h"

//----------------- Tracker ----------------//

UbloxM8Q_GPS gps = UbloxM8Q_GPS();
Adafruit_LIS3DH accel = Adafruit_LIS3DH(A2);
 8082be4:	4a03      	ldr	r2, [pc, #12]	; (8082bf4 <_GLOBAL__sub_I_gps+0x2c>)
 8082be6:	4904      	ldr	r1, [pc, #16]	; (8082bf8 <_GLOBAL__sub_I_gps+0x30>)
 8082be8:	f004 bf16 	b.w	8087a18 <__aeabi_atexit>
 8082bec:	200002e8 	.word	0x200002e8
 8082bf0:	20000314 	.word	0x20000314
 8082bf4:	20000180 	.word	0x20000180
 8082bf8:	080828d1 	.word	0x080828d1

08082bfc <_ZN3DHTC1Ehhh>:
 * modified for Spark Core by RussGrue
 * */

#include "Adafruit_DHT_Particle.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
 8082bfc:	b510      	push	{r4, lr}
	_pin = pin;
	_type = type;
	_count = count;
 8082bfe:	7203      	strb	r3, [r0, #8]
	firstreading = true;
 8082c00:	2301      	movs	r3, #1
 * */

#include "Adafruit_DHT_Particle.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
	_pin = pin;
 8082c02:	7181      	strb	r1, [r0, #6]
	_type = type;
 8082c04:	71c2      	strb	r2, [r0, #7]
	_count = count;
	firstreading = true;
 8082c06:	7403      	strb	r3, [r0, #16]
}
 8082c08:	bd10      	pop	{r4, pc}

08082c0a <_ZN3DHT5beginEv>:

void DHT::begin(void) {
 8082c0a:	b510      	push	{r4, lr}
 8082c0c:	4604      	mov	r4, r0
// set up the pins!
	pinMode(_pin, INPUT);
 8082c0e:	2100      	movs	r1, #0
 8082c10:	7980      	ldrb	r0, [r0, #6]
 8082c12:	f004 fdb9 	bl	8087788 <pinMode>
	digitalWrite(_pin, HIGH);
 8082c16:	2101      	movs	r1, #1
 8082c18:	79a0      	ldrb	r0, [r4, #6]
 8082c1a:	f004 fdc6 	bl	80877aa <digitalWrite>
	_lastreadtime = 0;
 8082c1e:	2300      	movs	r3, #0
 8082c20:	60e3      	str	r3, [r4, #12]
 8082c22:	bd10      	pop	{r4, pc}

08082c24 <_ZN3DHT4readEv>:
	double Td = (b * tC) / (a - tC);
	return Td;
}


boolean DHT::read(void) {
 8082c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8082c28:	4604      	mov	r4, r0
 8082c2a:	f001 fa9b 	bl	8084164 <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime) {
 8082c2e:	68e3      	ldr	r3, [r4, #12]
 8082c30:	4283      	cmp	r3, r0
// ie there was a rollover
		_lastreadtime = 0;
 8082c32:	bf84      	itt	hi
 8082c34:	2300      	movhi	r3, #0
 8082c36:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
 8082c38:	7c23      	ldrb	r3, [r4, #16]
 8082c3a:	b93b      	cbnz	r3, 8082c4c <_ZN3DHT4readEv+0x28>
 8082c3c:	68e3      	ldr	r3, [r4, #12]
 8082c3e:	1ac0      	subs	r0, r0, r3
 8082c40:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8082c44:	d202      	bcs.n	8082c4c <_ZN3DHT4readEv+0x28>
		return true; // return last correct measurement
 8082c46:	2001      	movs	r0, #1
 8082c48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
 8082c4c:	2500      	movs	r5, #0
 8082c4e:	7425      	strb	r5, [r4, #16]
 8082c50:	f001 fa88 	bl	8084164 <HAL_Timer_Get_Milli_Seconds>
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
  
// pull the pin high and wait 250 milliseconds
	digitalWrite(_pin, HIGH);
 8082c54:	2101      	movs	r1, #1
	firstreading = false;
/*
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.println(_lastreadtime);
*/
	_lastreadtime = millis();
 8082c56:	60e0      	str	r0, [r4, #12]

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
 8082c58:	7125      	strb	r5, [r4, #4]
  
// pull the pin high and wait 250 milliseconds
	digitalWrite(_pin, HIGH);
 8082c5a:	79a0      	ldrb	r0, [r4, #6]
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.println(_lastreadtime);
*/
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
 8082c5c:	70e5      	strb	r5, [r4, #3]
 8082c5e:	70a5      	strb	r5, [r4, #2]
 8082c60:	7065      	strb	r5, [r4, #1]
 8082c62:	7025      	strb	r5, [r4, #0]
  
// pull the pin high and wait 250 milliseconds
	digitalWrite(_pin, HIGH);
 8082c64:	f004 fda1 	bl	80877aa <digitalWrite>
	delay(250);
 8082c68:	20fa      	movs	r0, #250	; 0xfa
 8082c6a:	f003 fb55 	bl	8086318 <delay>

// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
 8082c6e:	2101      	movs	r1, #1
 8082c70:	79a0      	ldrb	r0, [r4, #6]
 8082c72:	f004 fd89 	bl	8087788 <pinMode>
	digitalWrite(_pin, LOW);
 8082c76:	4629      	mov	r1, r5
 8082c78:	79a0      	ldrb	r0, [r4, #6]
 8082c7a:	f004 fd96 	bl	80877aa <digitalWrite>
	delay(20);
 8082c7e:	2014      	movs	r0, #20
 8082c80:	f003 fb4a 	bl	8086318 <delay>
	noInterrupts();
 8082c84:	f004 f8cf 	bl	8086e26 <_Z12noInterruptsv>
	digitalWrite(_pin, HIGH);
 8082c88:	2101      	movs	r1, #1
 8082c8a:	79a0      	ldrb	r0, [r4, #6]
 8082c8c:	f004 fd8d 	bl	80877aa <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 8082c90:	2028      	movs	r0, #40	; 0x28
 8082c92:	f001 fa5f 	bl	8084154 <HAL_Delay_Microseconds>
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
 8082c96:	4629      	mov	r1, r5
 8082c98:	79a0      	ldrb	r0, [r4, #6]
 8082c9a:	f004 fd75 	bl	8087788 <pinMode>


boolean DHT::read(void) {
	uint8_t laststate = HIGH;
	uint8_t counter = 0;
	uint8_t j = 0, i;
 8082c9e:	462e      	mov	r6, r5
	return Td;
}


boolean DHT::read(void) {
	uint8_t laststate = HIGH;
 8082ca0:	2701      	movs	r7, #1
 8082ca2:	f04f 0800 	mov.w	r8, #0
	pinMode(_pin, INPUT);

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
		counter = 0;
		while (digitalRead(_pin) == laststate) {
 8082ca6:	79a0      	ldrb	r0, [r4, #6]
 8082ca8:	f004 fd98 	bl	80877dc <digitalRead>
 8082cac:	42b8      	cmp	r0, r7
 8082cae:	fa5f f988 	uxtb.w	r9, r8
 8082cb2:	d108      	bne.n	8082cc6 <_ZN3DHT4readEv+0xa2>
 8082cb4:	2001      	movs	r0, #1
 8082cb6:	f108 0801 	add.w	r8, r8, #1
 8082cba:	f001 fa4b 	bl	8084154 <HAL_Delay_Microseconds>
			counter++;
			delayMicroseconds(1);
			if (counter == 255) {
 8082cbe:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8082cc2:	d1f0      	bne.n	8082ca6 <_ZN3DHT4readEv+0x82>
 8082cc4:	46c1      	mov	r9, r8
				break;
			}
		}
		laststate = digitalRead(_pin);
 8082cc6:	79a0      	ldrb	r0, [r4, #6]
 8082cc8:	f004 fd88 	bl	80877dc <digitalRead>

		if (counter == 255) break;
 8082ccc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
			delayMicroseconds(1);
			if (counter == 255) {
				break;
			}
		}
		laststate = digitalRead(_pin);
 8082cd0:	b2c7      	uxtb	r7, r0

		if (counter == 255) break;
 8082cd2:	d014      	beq.n	8082cfe <_ZN3DHT4readEv+0xda>

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
 8082cd4:	2d03      	cmp	r5, #3
 8082cd6:	d90e      	bls.n	8082cf6 <_ZN3DHT4readEv+0xd2>
 8082cd8:	07eb      	lsls	r3, r5, #31
 8082cda:	d40c      	bmi.n	8082cf6 <_ZN3DHT4readEv+0xd2>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
 8082cdc:	08f2      	lsrs	r2, r6, #3
 8082cde:	5ca3      	ldrb	r3, [r4, r2]
			if (counter > _count)
				data[j/8] |= 1;
			j++;
 8082ce0:	3601      	adds	r6, #1
		if (counter == 255) break;

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
// shove each bit into the storage bytes
			data[j/8] <<= 1;
 8082ce2:	005b      	lsls	r3, r3, #1
 8082ce4:	b2db      	uxtb	r3, r3
 8082ce6:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
 8082ce8:	7a21      	ldrb	r1, [r4, #8]
				data[j/8] |= 1;
			j++;
 8082cea:	b2f6      	uxtb	r6, r6

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
// shove each bit into the storage bytes
			data[j/8] <<= 1;
			if (counter > _count)
 8082cec:	4549      	cmp	r1, r9
				data[j/8] |= 1;
 8082cee:	bf3c      	itt	cc
 8082cf0:	f043 0301 	orrcc.w	r3, r3, #1
 8082cf4:	54a3      	strbcc	r3, [r4, r2]
	digitalWrite(_pin, HIGH);
	delayMicroseconds(40);
	pinMode(_pin, INPUT);

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
 8082cf6:	3501      	adds	r5, #1
 8082cf8:	b2ed      	uxtb	r5, r5
 8082cfa:	2d55      	cmp	r5, #85	; 0x55
 8082cfc:	d1d1      	bne.n	8082ca2 <_ZN3DHT4readEv+0x7e>
			j++;
		}

	}

	interrupts();
 8082cfe:	f004 f894 	bl	8086e2a <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// check we read 40 bits and that the checksum matches
	if ((j >= 40) && 
 8082d02:	2e27      	cmp	r6, #39	; 0x27
 8082d04:	d90a      	bls.n	8082d1c <_ZN3DHT4readEv+0xf8>
 8082d06:	7822      	ldrb	r2, [r4, #0]
 8082d08:	7863      	ldrb	r3, [r4, #1]
 8082d0a:	7921      	ldrb	r1, [r4, #4]
 8082d0c:	4413      	add	r3, r2
 8082d0e:	78a2      	ldrb	r2, [r4, #2]
 8082d10:	4413      	add	r3, r2
 8082d12:	78e2      	ldrb	r2, [r4, #3]
 8082d14:	4413      	add	r3, r2
 8082d16:	b2db      	uxtb	r3, r3
 8082d18:	4299      	cmp	r1, r3
 8082d1a:	d094      	beq.n	8082c46 <_ZN3DHT4readEv+0x22>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
		return true;
	}
 
	return false;
 8082d1c:	2000      	movs	r0, #0

}
 8082d1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08082d24 <_ZN3DHT15readTemperatureEv>:
	pinMode(_pin, INPUT);
	digitalWrite(_pin, HIGH);
	_lastreadtime = 0;
}

float DHT::readTemperature() {
 8082d24:	b570      	push	{r4, r5, r6, lr}
 8082d26:	4604      	mov	r4, r0
	float f;

	if (read()) {
 8082d28:	f7ff ff7c 	bl	8082c24 <_ZN3DHT4readEv>
 8082d2c:	b318      	cbz	r0, 8082d76 <_ZN3DHT15readTemperatureEv+0x52>
		switch (_type) {
 8082d2e:	79e3      	ldrb	r3, [r4, #7]
 8082d30:	2b0b      	cmp	r3, #11
 8082d32:	d004      	beq.n	8082d3e <_ZN3DHT15readTemperatureEv+0x1a>
 8082d34:	d31f      	bcc.n	8082d76 <_ZN3DHT15readTemperatureEv+0x52>
 8082d36:	3b15      	subs	r3, #21
 8082d38:	2b01      	cmp	r3, #1
 8082d3a:	d904      	bls.n	8082d46 <_ZN3DHT15readTemperatureEv+0x22>
 8082d3c:	e01b      	b.n	8082d76 <_ZN3DHT15readTemperatureEv+0x52>
			case DHT11:
				f = data[2];
 8082d3e:	78a0      	ldrb	r0, [r4, #2]
 8082d40:	f005 feae 	bl	8088aa0 <__aeabi_ui2f>
				return f;
 8082d44:	bd70      	pop	{r4, r5, r6, pc}
			case DHT22:
			case DHT21:
				f = data[2] & 0x7F;
 8082d46:	78a5      	ldrb	r5, [r4, #2]
 8082d48:	f005 007f 	and.w	r0, r5, #127	; 0x7f
 8082d4c:	f005 feac 	bl	8088aa8 <__aeabi_i2f>
				f *= 256;
 8082d50:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8082d54:	f005 fefc 	bl	8088b50 <__aeabi_fmul>
 8082d58:	4606      	mov	r6, r0
				f += data[3];
 8082d5a:	78e0      	ldrb	r0, [r4, #3]
 8082d5c:	f005 fea4 	bl	8088aa8 <__aeabi_i2f>
 8082d60:	4631      	mov	r1, r6
 8082d62:	f005 fded 	bl	8088940 <__addsf3>
				f /= 10;
 8082d66:	4905      	ldr	r1, [pc, #20]	; (8082d7c <_ZN3DHT15readTemperatureEv+0x58>)
 8082d68:	f005 ffa6 	bl	8088cb8 <__aeabi_fdiv>
				if (data[2] & 0x80)
 8082d6c:	062b      	lsls	r3, r5, #24
 8082d6e:	d503      	bpl.n	8082d78 <_ZN3DHT15readTemperatureEv+0x54>
					f *= -1;
 8082d70:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8082d74:	bd70      	pop	{r4, r5, r6, pc}
				return f;
		}
	}
	return NAN;
 8082d76:	4802      	ldr	r0, [pc, #8]	; (8082d80 <_ZN3DHT15readTemperatureEv+0x5c>)
}
 8082d78:	bd70      	pop	{r4, r5, r6, pc}
 8082d7a:	bf00      	nop
 8082d7c:	41200000 	.word	0x41200000
 8082d80:	7fc00000 	.word	0x7fc00000

08082d84 <_ZN3DHT16getTempFarenheitEv>:

float DHT::getTempCelcius() {
	return readTemperature();
}

float DHT::getTempFarenheit() {
 8082d84:	b508      	push	{r3, lr}
	return convertCtoF(readTemperature());
 8082d86:	f7ff ffcd 	bl	8082d24 <_ZN3DHT15readTemperatureEv>
 8082d8a:	4905      	ldr	r1, [pc, #20]	; (8082da0 <_ZN3DHT16getTempFarenheitEv+0x1c>)
 8082d8c:	f005 fee0 	bl	8088b50 <__aeabi_fmul>
 8082d90:	4904      	ldr	r1, [pc, #16]	; (8082da4 <_ZN3DHT16getTempFarenheitEv+0x20>)
 8082d92:	f005 ff91 	bl	8088cb8 <__aeabi_fdiv>
 8082d96:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 8082d9a:	f005 fdd1 	bl	8088940 <__addsf3>
}
 8082d9e:	bd08      	pop	{r3, pc}
 8082da0:	41100000 	.word	0x41100000
 8082da4:	40a00000 	.word	0x40a00000

08082da8 <_ZN3DHT12readHumidityEv>:

float DHT::convertCtoK(float c) {
	return c + 273.15;
}

float DHT::readHumidity(void) {
 8082da8:	b538      	push	{r3, r4, r5, lr}
 8082daa:	4604      	mov	r4, r0
	float f;

	if (read()) {
 8082dac:	f7ff ff3a 	bl	8082c24 <_ZN3DHT4readEv>
 8082db0:	b1e0      	cbz	r0, 8082dec <_ZN3DHT12readHumidityEv+0x44>
		switch (_type) {
 8082db2:	79e3      	ldrb	r3, [r4, #7]
 8082db4:	2b0b      	cmp	r3, #11
 8082db6:	d015      	beq.n	8082de4 <_ZN3DHT12readHumidityEv+0x3c>
 8082db8:	d318      	bcc.n	8082dec <_ZN3DHT12readHumidityEv+0x44>
 8082dba:	3b15      	subs	r3, #21
 8082dbc:	2b01      	cmp	r3, #1
 8082dbe:	d815      	bhi.n	8082dec <_ZN3DHT12readHumidityEv+0x44>
			case DHT11:
				f = data[0];
				return f;
			case DHT22:
			case DHT21:
				f = data[0];
 8082dc0:	7820      	ldrb	r0, [r4, #0]
 8082dc2:	f005 fe6d 	bl	8088aa0 <__aeabi_ui2f>
				f *= 256;
 8082dc6:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8082dca:	f005 fec1 	bl	8088b50 <__aeabi_fmul>
 8082dce:	4605      	mov	r5, r0
				f += data[1];
 8082dd0:	7860      	ldrb	r0, [r4, #1]
 8082dd2:	f005 fe69 	bl	8088aa8 <__aeabi_i2f>
 8082dd6:	4629      	mov	r1, r5
 8082dd8:	f005 fdb2 	bl	8088940 <__addsf3>
				f /= 10;
 8082ddc:	4904      	ldr	r1, [pc, #16]	; (8082df0 <_ZN3DHT12readHumidityEv+0x48>)
 8082dde:	f005 ff6b 	bl	8088cb8 <__aeabi_fdiv>
 8082de2:	bd38      	pop	{r3, r4, r5, pc}
	float f;

	if (read()) {
		switch (_type) {
			case DHT11:
				f = data[0];
 8082de4:	7820      	ldrb	r0, [r4, #0]
 8082de6:	f005 fe5b 	bl	8088aa0 <__aeabi_ui2f>
				return f;
 8082dea:	bd38      	pop	{r3, r4, r5, pc}
				f += data[1];
				f /= 10;
				return f;
		}
	}
	return NAN;
 8082dec:	4801      	ldr	r0, [pc, #4]	; (8082df4 <_ZN3DHT12readHumidityEv+0x4c>)
}
 8082dee:	bd38      	pop	{r3, r4, r5, pc}
 8082df0:	41200000 	.word	0x41200000
 8082df4:	7fc00000 	.word	0x7fc00000

08082df8 <_ZN3DHT11getHumidityEv>:
	}
	return NAN;
}

float DHT::getHumidity() {
	return readHumidity();
 8082df8:	f7ff bfd6 	b.w	8082da8 <_ZN3DHT12readHumidityEv>

08082dfc <_GLOBAL__sub_I__ZN3DHTC2Ehhh>:
 8082dfc:	f001 b8f2 	b.w	8083fe4 <HAL_Pin_Map>

08082e00 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  ~SPIClass() = default;
 8082e00:	b510      	push	{r4, lr}
 8082e02:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 8082e04:	6880      	ldr	r0, [r0, #8]
 8082e06:	b108      	cbz	r0, 8082e0c <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 8082e08:	f001 fa34 	bl	8084274 <os_mutex_recursive_destroy>
 8082e0c:	4620      	mov	r0, r4
 8082e0e:	bd10      	pop	{r4, pc}

08082e10 <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data
*/
/**************************************************************************/
void Adafruit_LIS3DH::getSensor(sensor_t *sensor) {
 8082e10:	b538      	push	{r3, r4, r5, lr}
 8082e12:	460c      	mov	r4, r1
 8082e14:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
 8082e16:	2228      	movs	r2, #40	; 0x28
 8082e18:	2100      	movs	r1, #0
 8082e1a:	4620      	mov	r0, r4
 8082e1c:	f006 fa0a 	bl	8089234 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
 8082e20:	220b      	movs	r2, #11
 8082e22:	4908      	ldr	r1, [pc, #32]	; (8082e44 <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t+0x34>)
 8082e24:	4620      	mov	r0, r4
 8082e26:	f006 ffac 	bl	8089d82 <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
 8082e2a:	2300      	movs	r3, #0
  sensor->version     = 1;
 8082e2c:	2201      	movs	r2, #1
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name)- 1] = 0;
 8082e2e:	72e3      	strb	r3, [r4, #11]
  sensor->version     = 1;
 8082e30:	60e2      	str	r2, [r4, #12]
  sensor->sensor_id   = _sensorID;
 8082e32:	69a9      	ldr	r1, [r5, #24]
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
  sensor->min_delay   = 0;
 8082e34:	6263      	str	r3, [r4, #36]	; 0x24
  sensor->max_value   = 0;
 8082e36:	2300      	movs	r3, #0

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name)- 1] = 0;
  sensor->version     = 1;
  sensor->sensor_id   = _sensorID;
 8082e38:	6121      	str	r1, [r4, #16]
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
 8082e3a:	6162      	str	r2, [r4, #20]
  sensor->min_delay   = 0;
  sensor->max_value   = 0;
 8082e3c:	61a3      	str	r3, [r4, #24]
  sensor->min_value   = 0;
 8082e3e:	61e3      	str	r3, [r4, #28]
  sensor->resolution  = 0;
 8082e40:	6223      	str	r3, [r4, #32]
 8082e42:	bd38      	pop	{r3, r4, r5, pc}
 8082e44:	0808ae81 	.word	0x0808ae81

08082e48 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 8082e48:	6803      	ldr	r3, [r0, #0]
 8082e4a:	b2c9      	uxtb	r1, r1
 8082e4c:	689b      	ldr	r3, [r3, #8]
 8082e4e:	4718      	bx	r3

08082e50 <_ZN15Adafruit_LIS3DHC1Ea>:
  : _sensorID(-1), _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
{
}

Adafruit_LIS3DH::Adafruit_LIS3DH(int8_t cspin)
  : _sensorID(-1), _cs(cspin), _mosi(-1), _miso(-1), _sck(-1)
 8082e50:	4a06      	ldr	r2, [pc, #24]	; (8082e6c <_ZN15Adafruit_LIS3DHC1Ea+0x1c>)
 8082e52:	7741      	strb	r1, [r0, #29]
 8082e54:	6002      	str	r2, [r0, #0]
 8082e56:	f04f 32ff 	mov.w	r2, #4294967295
 8082e5a:	6182      	str	r2, [r0, #24]
 8082e5c:	7782      	strb	r2, [r0, #30]
 8082e5e:	21ff      	movs	r1, #255	; 0xff
 8082e60:	f880 2020 	strb.w	r2, [r0, #32]
 8082e64:	2211      	movs	r2, #17
 8082e66:	77c1      	strb	r1, [r0, #31]
 8082e68:	6242      	str	r2, [r0, #36]	; 0x24
{ }
 8082e6a:	4770      	bx	lr
 8082e6c:	0808ae90 	.word	0x0808ae90

08082e70 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
 8082e70:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
 8082e72:	4d0b      	ldr	r5, [pc, #44]	; (8082ea0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x30>)
 8082e74:	6829      	ldr	r1, [r5, #0]
 8082e76:	f011 0401 	ands.w	r4, r1, #1
 8082e7a:	d10f      	bne.n	8082e9c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>
 8082e7c:	4628      	mov	r0, r5
 8082e7e:	f7fd f91d 	bl	80800bc <__cxa_guard_acquire>
 8082e82:	b158      	cbz	r0, 8082e9c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>
 8082e84:	4621      	mov	r1, r4
 8082e86:	4807      	ldr	r0, [pc, #28]	; (8082ea4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x34>)
 8082e88:	f001 fd09 	bl	808489e <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8082e8c:	4628      	mov	r0, r5
 8082e8e:	f7fd f91a 	bl	80800c6 <__cxa_guard_release>
 8082e92:	4a05      	ldr	r2, [pc, #20]	; (8082ea8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x38>)
 8082e94:	4905      	ldr	r1, [pc, #20]	; (8082eac <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x3c>)
 8082e96:	4803      	ldr	r0, [pc, #12]	; (8082ea4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x34>)
 8082e98:	f004 fdbe 	bl	8087a18 <__aeabi_atexit>
        return instance;
    }
 8082e9c:	4801      	ldr	r0, [pc, #4]	; (8082ea4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x34>)
 8082e9e:	bd38      	pop	{r3, r4, r5, pc}
 8082ea0:	20000378 	.word	0x20000378
 8082ea4:	2000037c 	.word	0x2000037c
 8082ea8:	20000180 	.word	0x20000180
 8082eac:	08082e01 	.word	0x08082e01

08082eb0 <_ZN15Adafruit_LIS3DH7spixferEh>:
/*!
    @brief  Low level SPI
*/
/**************************************************************************/

uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
 8082eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  #ifndef __AVR_ATtiny85__
  if (_sck == -1)
 8082eb4:	f990 3020 	ldrsb.w	r3, [r0, #32]
/*!
    @brief  Low level SPI
*/
/**************************************************************************/

uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
 8082eb8:	4605      	mov	r5, r0
  #ifndef __AVR_ATtiny85__
  if (_sck == -1)
 8082eba:	3301      	adds	r3, #1
/*!
    @brief  Low level SPI
*/
/**************************************************************************/

uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
 8082ebc:	460f      	mov	r7, r1
  #ifndef __AVR_ATtiny85__
  if (_sck == -1)
 8082ebe:	d106      	bne.n	8082ece <_ZN15Adafruit_LIS3DH7spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
 8082ec0:	f7ff ffd6 	bl	8082e70 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
 8082ec4:	4639      	mov	r1, r7
    if (digitalRead(_miso))
      reply |= 1;
  }
  return reply;
  #endif
}
 8082ec6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8082eca:	f001 bd6e 	b.w	80849aa <_ZN8SPIClass8transferEh>
 8082ece:	2607      	movs	r6, #7
 8082ed0:	2400      	movs	r4, #0
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
    digitalWrite(_sck, LOW);
    digitalWrite(_mosi, x & (1<<i));
 8082ed2:	f04f 0801 	mov.w	r8, #1
  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
    digitalWrite(_sck, LOW);
 8082ed6:	f995 0020 	ldrsb.w	r0, [r5, #32]
 8082eda:	2100      	movs	r1, #0
 8082edc:	b280      	uxth	r0, r0
 8082ede:	f004 fc64 	bl	80877aa <digitalWrite>
    digitalWrite(_mosi, x & (1<<i));
 8082ee2:	f995 001e 	ldrsb.w	r0, [r5, #30]
 8082ee6:	fa08 f106 	lsl.w	r1, r8, r6
 8082eea:	4039      	ands	r1, r7
 8082eec:	b280      	uxth	r0, r0
 8082eee:	f004 fc5c 	bl	80877aa <digitalWrite>
    digitalWrite(_sck, HIGH);
 8082ef2:	f995 0020 	ldrsb.w	r0, [r5, #32]
 8082ef6:	2101      	movs	r1, #1
 8082ef8:	b280      	uxth	r0, r0
 8082efa:	f004 fc56 	bl	80877aa <digitalWrite>
    if (digitalRead(_miso))
 8082efe:	f995 001f 	ldrsb.w	r0, [r5, #31]

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
 8082f02:	0064      	lsls	r4, r4, #1
    digitalWrite(_sck, LOW);
    digitalWrite(_mosi, x & (1<<i));
    digitalWrite(_sck, HIGH);
    if (digitalRead(_miso))
 8082f04:	b280      	uxth	r0, r0

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
 8082f06:	b2e4      	uxtb	r4, r4
    digitalWrite(_sck, LOW);
    digitalWrite(_mosi, x & (1<<i));
    digitalWrite(_sck, HIGH);
    if (digitalRead(_miso))
 8082f08:	f004 fc68 	bl	80877dc <digitalRead>
 8082f0c:	b108      	cbz	r0, 8082f12 <_ZN15Adafruit_LIS3DH7spixferEh+0x62>
      reply |= 1;
 8082f0e:	f044 0401 	orr.w	r4, r4, #1
    return SPI.transfer(x);

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
 8082f12:	f116 36ff 	adds.w	r6, r6, #4294967295
 8082f16:	d2de      	bcs.n	8082ed6 <_ZN15Adafruit_LIS3DH7spixferEh+0x26>
    if (digitalRead(_miso))
      reply |= 1;
  }
  return reply;
  #endif
}
 8082f18:	4620      	mov	r0, r4
 8082f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08082f20 <_ZN15Adafruit_LIS3DH16beginTransactionEv>:
  #endif
  return value;
}


void Adafruit_LIS3DH::beginTransaction() {
 8082f20:	b508      	push	{r3, lr}
    }
    void end() {
        instance().end();
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
 8082f22:	f7ff ffa5 	bl	8082e70 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
 8082f26:	2101      	movs	r1, #1
 8082f28:	f001 fcd8 	bl	80848dc <_ZN8SPIClass11setBitOrderEh>
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
    }
    unsigned setClockSpeed(unsigned value, unsigned scale=HZ) {
        return instance().setClockSpeed(value, scale);
 8082f2c:	f7ff ffa0 	bl	8082e70 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
 8082f30:	4905      	ldr	r1, [pc, #20]	; (8082f48 <_ZN15Adafruit_LIS3DH16beginTransactionEv+0x28>)
 8082f32:	2201      	movs	r2, #1
 8082f34:	f001 fd08 	bl	8084948 <_ZN8SPIClass13setClockSpeedEjj>
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
    }
    void setDataMode(uint8_t mode) {
        instance().setDataMode(mode);
 8082f38:	f7ff ff9a 	bl	8082e70 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
    SPI.setClockSpeed(500000);
    SPI.setDataMode(SPI_MODE0);
#else
  SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
#endif
}
 8082f3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8082f40:	2100      	movs	r1, #0
 8082f42:	f001 bcdb 	b.w	80848fc <_ZN8SPIClass11setDataModeEh>
 8082f46:	bf00      	nop
 8082f48:	0007a120 	.word	0x0007a120

08082f4c <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>:
/**************************************************************************/
/*!
    @brief  Writes 8-bits to the specified destination register
*/
/**************************************************************************/
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
 8082f4c:	b570      	push	{r4, r5, r6, lr}
  if (_cs == -1) {
 8082f4e:	f990 301d 	ldrsb.w	r3, [r0, #29]
/**************************************************************************/
/*!
    @brief  Writes 8-bits to the specified destination register
*/
/**************************************************************************/
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
 8082f52:	4604      	mov	r4, r0
  if (_cs == -1) {
 8082f54:	3301      	adds	r3, #1
/**************************************************************************/
/*!
    @brief  Writes 8-bits to the specified destination register
*/
/**************************************************************************/
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
 8082f56:	460e      	mov	r6, r1
 8082f58:	4615      	mov	r5, r2
  if (_cs == -1) {
 8082f5a:	d116      	bne.n	8082f8a <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x3e>
    Wire.beginTransmission((uint8_t)_i2caddr);
 8082f5c:	f004 fd10 	bl	8087980 <_Z19__fetch_global_Wirev>
 8082f60:	7f21      	ldrb	r1, [r4, #28]
 8082f62:	f004 f95e 	bl	8087222 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
 8082f66:	f004 fd0b 	bl	8087980 <_Z19__fetch_global_Wirev>
 8082f6a:	6803      	ldr	r3, [r0, #0]
 8082f6c:	4631      	mov	r1, r6
 8082f6e:	689b      	ldr	r3, [r3, #8]
 8082f70:	4798      	blx	r3
    Wire.write((uint8_t)value);
 8082f72:	f004 fd05 	bl	8087980 <_Z19__fetch_global_Wirev>
 8082f76:	6803      	ldr	r3, [r0, #0]
 8082f78:	4629      	mov	r1, r5
 8082f7a:	689b      	ldr	r3, [r3, #8]
 8082f7c:	4798      	blx	r3
    Wire.endTransmission();
 8082f7e:	f004 fcff 	bl	8087980 <_Z19__fetch_global_Wirev>
    digitalWrite(_cs, HIGH);
    if (_sck == -1)
    	endTransaction();
  }
  #endif
}
 8082f82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
  if (_cs == -1) {
    Wire.beginTransmission((uint8_t)_i2caddr);
    Wire.write((uint8_t)reg);
    Wire.write((uint8_t)value);
    Wire.endTransmission();
 8082f86:	f004 b957 	b.w	8087238 <_ZN7TwoWire15endTransmissionEv>
  }
  #ifndef __AVR_ATtiny85__
  else {
	if (_sck == -1)
 8082f8a:	f990 3020 	ldrsb.w	r3, [r0, #32]
 8082f8e:	3301      	adds	r3, #1
 8082f90:	d101      	bne.n	8082f96 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x4a>
	  beginTransaction();
 8082f92:	f7ff ffc5 	bl	8082f20 <_ZN15Adafruit_LIS3DH16beginTransactionEv>

    digitalWrite(_cs, LOW);
 8082f96:	f994 001d 	ldrsb.w	r0, [r4, #29]
 8082f9a:	2100      	movs	r1, #0
 8082f9c:	b280      	uxth	r0, r0
 8082f9e:	f004 fc04 	bl	80877aa <digitalWrite>
    spixfer(reg & ~0x80); // write, bit 7 low
 8082fa2:	f006 017f 	and.w	r1, r6, #127	; 0x7f
 8082fa6:	4620      	mov	r0, r4
 8082fa8:	f7ff ff82 	bl	8082eb0 <_ZN15Adafruit_LIS3DH7spixferEh>
    spixfer(value);
 8082fac:	4629      	mov	r1, r5
 8082fae:	4620      	mov	r0, r4
 8082fb0:	f7ff ff7e 	bl	8082eb0 <_ZN15Adafruit_LIS3DH7spixferEh>
    digitalWrite(_cs, HIGH);
 8082fb4:	f994 001d 	ldrsb.w	r0, [r4, #29]
 8082fb8:	2101      	movs	r1, #1
 8082fba:	b280      	uxth	r0, r0
    if (_sck == -1)
    	endTransaction();
  }
  #endif
}
 8082fbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  beginTransaction();

    digitalWrite(_cs, LOW);
    spixfer(reg & ~0x80); // write, bit 7 low
    spixfer(value);
    digitalWrite(_cs, HIGH);
 8082fc0:	f004 bbf3 	b.w	80877aa <digitalWrite>

08082fc4 <_ZN15Adafruit_LIS3DH13readRegister8Eh>:
/**************************************************************************/
/*!
    @brief  Reads 8-bits from the specified register
*/
/**************************************************************************/
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
 8082fc4:	b538      	push	{r3, r4, r5, lr}
  uint8_t value;

  if (_cs == -1) {
 8082fc6:	f990 301d 	ldrsb.w	r3, [r0, #29]
/**************************************************************************/
/*!
    @brief  Reads 8-bits from the specified register
*/
/**************************************************************************/
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
 8082fca:	4604      	mov	r4, r0
  uint8_t value;

  if (_cs == -1) {
 8082fcc:	3301      	adds	r3, #1
/**************************************************************************/
/*!
    @brief  Reads 8-bits from the specified register
*/
/**************************************************************************/
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
 8082fce:	460d      	mov	r5, r1
  uint8_t value;

  if (_cs == -1) {
 8082fd0:	d11c      	bne.n	808300c <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x48>
    Wire.beginTransmission(_i2caddr);
 8082fd2:	f004 fcd5 	bl	8087980 <_Z19__fetch_global_Wirev>
 8082fd6:	f994 101c 	ldrsb.w	r1, [r4, #28]
 8082fda:	f004 f926 	bl	808722a <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((uint8_t)reg);
 8082fde:	f004 fccf 	bl	8087980 <_Z19__fetch_global_Wirev>
 8082fe2:	6803      	ldr	r3, [r0, #0]
 8082fe4:	4629      	mov	r1, r5
 8082fe6:	689b      	ldr	r3, [r3, #8]
 8082fe8:	4798      	blx	r3
    Wire.endTransmission();
 8082fea:	f004 fcc9 	bl	8087980 <_Z19__fetch_global_Wirev>
 8082fee:	f004 f923 	bl	8087238 <_ZN7TwoWire15endTransmissionEv>

    Wire.requestFrom(_i2caddr, 1);
 8082ff2:	f004 fcc5 	bl	8087980 <_Z19__fetch_global_Wirev>
 8082ff6:	2201      	movs	r2, #1
 8082ff8:	7f21      	ldrb	r1, [r4, #28]
 8082ffa:	f004 f90f 	bl	808721c <_ZN7TwoWire11requestFromEhj>
    value = Wire.read();
 8082ffe:	f004 fcbf 	bl	8087980 <_Z19__fetch_global_Wirev>
 8083002:	6803      	ldr	r3, [r0, #0]
 8083004:	695b      	ldr	r3, [r3, #20]
 8083006:	4798      	blx	r3
 8083008:	b2c5      	uxtb	r5, r0
 808300a:	e01b      	b.n	8083044 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x80>
  }
  #ifndef __AVR_ATtiny85__
  else {
	if (_sck == -1)
 808300c:	f990 3020 	ldrsb.w	r3, [r0, #32]
 8083010:	3301      	adds	r3, #1
 8083012:	d101      	bne.n	8083018 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x54>
	  beginTransaction();
 8083014:	f7ff ff84 	bl	8082f20 <_ZN15Adafruit_LIS3DH16beginTransactionEv>

	digitalWrite(_cs, LOW);
 8083018:	f994 001d 	ldrsb.w	r0, [r4, #29]
 808301c:	2100      	movs	r1, #0
 808301e:	b280      	uxth	r0, r0
 8083020:	f004 fbc3 	bl	80877aa <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
 8083024:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 8083028:	4620      	mov	r0, r4
 808302a:	f7ff ff41 	bl	8082eb0 <_ZN15Adafruit_LIS3DH7spixferEh>
    value = spixfer(0);
 808302e:	2100      	movs	r1, #0
 8083030:	4620      	mov	r0, r4
 8083032:	f7ff ff3d 	bl	8082eb0 <_ZN15Adafruit_LIS3DH7spixferEh>
 8083036:	4605      	mov	r5, r0
    digitalWrite(_cs, HIGH);
 8083038:	f994 001d 	ldrsb.w	r0, [r4, #29]
 808303c:	2101      	movs	r1, #1
 808303e:	b280      	uxth	r0, r0
 8083040:	f004 fbb3 	bl	80877aa <digitalWrite>
    if (_sck == -1)
    	endTransaction();
  }
  #endif
  return value;
}
 8083044:	4628      	mov	r0, r5
 8083046:	bd38      	pop	{r3, r4, r5, pc}

08083048 <_ZN15Adafruit_LIS3DH8setRangeE14lis3dh_range_t>:
/*!
    @brief  Sets the g range for the accelerometer
*/
/**************************************************************************/
void Adafruit_LIS3DH::setRange(lis3dh_range_t range)
{
 8083048:	b538      	push	{r3, r4, r5, lr}
 808304a:	460d      	mov	r5, r1
  uint8_t r = readRegister8(LIS3DH_REG_CTRL4);
 808304c:	2123      	movs	r1, #35	; 0x23
/*!
    @brief  Sets the g range for the accelerometer
*/
/**************************************************************************/
void Adafruit_LIS3DH::setRange(lis3dh_range_t range)
{
 808304e:	4604      	mov	r4, r0
  uint8_t r = readRegister8(LIS3DH_REG_CTRL4);
 8083050:	f7ff ffb8 	bl	8082fc4 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  r &= ~(0x30);
  r |= range << 4;
 8083054:	f020 0030 	bic.w	r0, r0, #48	; 0x30
 8083058:	ea40 1205 	orr.w	r2, r0, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL4, r);
 808305c:	b2d2      	uxtb	r2, r2
 808305e:	4620      	mov	r0, r4
}
 8083060:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void Adafruit_LIS3DH::setRange(lis3dh_range_t range)
{
  uint8_t r = readRegister8(LIS3DH_REG_CTRL4);
  r &= ~(0x30);
  r |= range << 4;
  writeRegister8(LIS3DH_REG_CTRL4, r);
 8083064:	2123      	movs	r1, #35	; 0x23
 8083066:	f7ff bf71 	b.w	8082f4c <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

0808306a <_ZN15Adafruit_LIS3DH8getRangeEv>:
/*!
    @brief  Sets the g range for the accelerometer
*/
/**************************************************************************/
lis3dh_range_t Adafruit_LIS3DH::getRange(void)
{
 808306a:	b508      	push	{r3, lr}
  /* Read the data format register to preserve bits */
  return (lis3dh_range_t)((readRegister8(LIS3DH_REG_CTRL4) >> 4) & 0x03);
 808306c:	2123      	movs	r1, #35	; 0x23
 808306e:	f7ff ffa9 	bl	8082fc4 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
}
 8083072:	f3c0 1001 	ubfx	r0, r0, #4, #2
 8083076:	bd08      	pop	{r3, pc}

08083078 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>:
/*!
    @brief  Sets the data rate for the LIS3DH (controls power consumption)
*/
/**************************************************************************/
void Adafruit_LIS3DH::setDataRate(lis3dh_dataRate_t dataRate)
{
 8083078:	b538      	push	{r3, r4, r5, lr}
 808307a:	460d      	mov	r5, r1
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
 808307c:	2120      	movs	r1, #32
/*!
    @brief  Sets the data rate for the LIS3DH (controls power consumption)
*/
/**************************************************************************/
void Adafruit_LIS3DH::setDataRate(lis3dh_dataRate_t dataRate)
{
 808307e:	4604      	mov	r4, r0
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
 8083080:	f7ff ffa0 	bl	8082fc4 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  ctl1 &= ~(0xF0); // mask off bits
  ctl1 |= (dataRate << 4);
 8083084:	f000 000f 	and.w	r0, r0, #15
 8083088:	ea40 1205 	orr.w	r2, r0, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
 808308c:	b2d2      	uxtb	r2, r2
 808308e:	4620      	mov	r0, r4
}
 8083090:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void Adafruit_LIS3DH::setDataRate(lis3dh_dataRate_t dataRate)
{
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
  ctl1 &= ~(0xF0); // mask off bits
  ctl1 |= (dataRate << 4);
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
 8083094:	2120      	movs	r1, #32
 8083096:	f7ff bf59 	b.w	8082f4c <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

0808309a <_ZN15Adafruit_LIS3DH5beginEh>:
/**************************************************************************/
/*!
    @brief  Setups the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
bool Adafruit_LIS3DH::begin(uint8_t i2caddr) {
 808309a:	b510      	push	{r4, lr}
 808309c:	4604      	mov	r4, r0
  _i2caddr = i2caddr;
 808309e:	7701      	strb	r1, [r0, #28]


  if (_cs == -1) {
 80830a0:	f990 001d 	ldrsb.w	r0, [r0, #29]
 80830a4:	1c42      	adds	r2, r0, #1
 80830a6:	d104      	bne.n	80830b2 <_ZN15Adafruit_LIS3DH5beginEh+0x18>
    // i2c
    Wire.begin();
 80830a8:	f004 fc6a 	bl	8087980 <_Z19__fetch_global_Wirev>
 80830ac:	f004 f882 	bl	80871b4 <_ZN7TwoWire5beginEv>
 80830b0:	e022      	b.n	80830f8 <_ZN15Adafruit_LIS3DH5beginEh+0x5e>
  } else {
    digitalWrite(_cs, HIGH);
 80830b2:	2101      	movs	r1, #1
 80830b4:	b280      	uxth	r0, r0
 80830b6:	f004 fb78 	bl	80877aa <digitalWrite>
    pinMode(_cs, OUTPUT);
 80830ba:	f994 001d 	ldrsb.w	r0, [r4, #29]
 80830be:	2101      	movs	r1, #1
 80830c0:	b280      	uxth	r0, r0
 80830c2:	f004 fb61 	bl	8087788 <pinMode>

#ifndef __AVR_ATtiny85__
    if (_sck == -1) {
 80830c6:	f994 0020 	ldrsb.w	r0, [r4, #32]
 80830ca:	1c43      	adds	r3, r0, #1
 80830cc:	d104      	bne.n	80830d8 <_ZN15Adafruit_LIS3DH5beginEh+0x3e>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
 80830ce:	f7ff fecf 	bl	8082e70 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
 80830d2:	f001 fbf3 	bl	80848bc <_ZN8SPIClass5beginEv>
 80830d6:	e00f      	b.n	80830f8 <_ZN15Adafruit_LIS3DH5beginEh+0x5e>
      // hardware SPI
      SPI.begin();
    } else {
      // software SPI
      pinMode(_sck, OUTPUT);
 80830d8:	2101      	movs	r1, #1
 80830da:	b280      	uxth	r0, r0
 80830dc:	f004 fb54 	bl	8087788 <pinMode>
      pinMode(_mosi, OUTPUT);
 80830e0:	f994 001e 	ldrsb.w	r0, [r4, #30]
 80830e4:	2101      	movs	r1, #1
 80830e6:	b280      	uxth	r0, r0
 80830e8:	f004 fb4e 	bl	8087788 <pinMode>
      pinMode(_miso, INPUT);
 80830ec:	f994 001f 	ldrsb.w	r0, [r4, #31]
 80830f0:	2100      	movs	r1, #0
 80830f2:	b280      	uxth	r0, r0
 80830f4:	f004 fb48 	bl	8087788 <pinMode>
    Serial.println(readRegister8(i), HEX);
  }
  */

  /* Check connection */
  uint8_t deviceid = readRegister8(LIS3DH_REG_WHOAMI);
 80830f8:	210f      	movs	r1, #15
 80830fa:	4620      	mov	r0, r4
 80830fc:	f7ff ff62 	bl	8082fc4 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  if (deviceid != 0x33)
 8083100:	2833      	cmp	r0, #51	; 0x33
 8083102:	d119      	bne.n	8083138 <_ZN15Adafruit_LIS3DH5beginEh+0x9e>
    //Serial.println(deviceid, HEX);
    return false;
  }

  // enable all axes, normal mode
  writeRegister8(LIS3DH_REG_CTRL1, 0x07);
 8083104:	2207      	movs	r2, #7
 8083106:	4620      	mov	r0, r4
 8083108:	2120      	movs	r1, #32
 808310a:	f7ff ff1f 	bl	8082f4c <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  // 400Hz rate
  setDataRate(LIS3DH_DATARATE_400_HZ);
 808310e:	4620      	mov	r0, r4
 8083110:	2107      	movs	r1, #7
 8083112:	f7ff ffb1 	bl	8083078 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>

  // High res & BDU enabled
  writeRegister8(LIS3DH_REG_CTRL4, 0x88);
 8083116:	4620      	mov	r0, r4
 8083118:	2288      	movs	r2, #136	; 0x88
 808311a:	2123      	movs	r1, #35	; 0x23
 808311c:	f7ff ff16 	bl	8082f4c <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

  // DRDY on INT1
  writeRegister8(LIS3DH_REG_CTRL3, 0x10);
 8083120:	4620      	mov	r0, r4
 8083122:	2210      	movs	r2, #16
 8083124:	2122      	movs	r1, #34	; 0x22
 8083126:	f7ff ff11 	bl	8082f4c <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

  // Turn on orientation config
  //writeRegister8(LIS3DH_REG_PL_CFG, 0x40);

  // enable adcs
  writeRegister8(LIS3DH_REG_TEMPCFG, 0x80);
 808312a:	4620      	mov	r0, r4
 808312c:	2280      	movs	r2, #128	; 0x80
 808312e:	211f      	movs	r1, #31
 8083130:	f7ff ff0c 	bl	8082f4c <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
    Serial.print(i, HEX); Serial.print(" = 0x");
    Serial.println(readRegister8(i), HEX);
  }
  */

  return true;
 8083134:	2001      	movs	r0, #1
 8083136:	bd10      	pop	{r4, pc}
  uint8_t deviceid = readRegister8(LIS3DH_REG_WHOAMI);
  if (deviceid != 0x33)
  {
    /* No LIS3DH detected ... return false */
    //Serial.println(deviceid, HEX);
    return false;
 8083138:	2000      	movs	r0, #0
    Serial.println(readRegister8(i), HEX);
  }
  */

  return true;
}
 808313a:	bd10      	pop	{r4, pc}

0808313c <_ZN15Adafruit_LIS3DH4readEv>:


void Adafruit_LIS3DH::read(void) {
 808313c:	b538      	push	{r3, r4, r5, lr}
  // read x y z at once

  if (_cs == -1) {
 808313e:	f990 301d 	ldrsb.w	r3, [r0, #29]

  return true;
}


void Adafruit_LIS3DH::read(void) {
 8083142:	4604      	mov	r4, r0
  // read x y z at once

  if (_cs == -1) {
 8083144:	3301      	adds	r3, #1
 8083146:	d142      	bne.n	80831ce <_ZN15Adafruit_LIS3DH4readEv+0x92>
    // i2c
    Wire.beginTransmission(_i2caddr);
 8083148:	f004 fc1a 	bl	8087980 <_Z19__fetch_global_Wirev>
 808314c:	f994 101c 	ldrsb.w	r1, [r4, #28]
 8083150:	f004 f86b 	bl	808722a <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(LIS3DH_REG_OUT_X_L | 0x80); // 0x80 for autoincrement
 8083154:	f004 fc14 	bl	8087980 <_Z19__fetch_global_Wirev>
 8083158:	21a8      	movs	r1, #168	; 0xa8
 808315a:	f7ff fe75 	bl	8082e48 <_ZN7TwoWire5writeEi>
    Wire.endTransmission();
 808315e:	f004 fc0f 	bl	8087980 <_Z19__fetch_global_Wirev>
 8083162:	f004 f869 	bl	8087238 <_ZN7TwoWire15endTransmissionEv>

    Wire.requestFrom(_i2caddr, 6);
 8083166:	f004 fc0b 	bl	8087980 <_Z19__fetch_global_Wirev>
 808316a:	2206      	movs	r2, #6
 808316c:	7f21      	ldrb	r1, [r4, #28]
 808316e:	f004 f855 	bl	808721c <_ZN7TwoWire11requestFromEhj>
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
 8083172:	f004 fc05 	bl	8087980 <_Z19__fetch_global_Wirev>
 8083176:	6803      	ldr	r3, [r0, #0]
 8083178:	695b      	ldr	r3, [r3, #20]
 808317a:	4798      	blx	r3
 808317c:	80e0      	strh	r0, [r4, #6]
 808317e:	f004 fbff 	bl	8087980 <_Z19__fetch_global_Wirev>
 8083182:	6803      	ldr	r3, [r0, #0]
 8083184:	695b      	ldr	r3, [r3, #20]
 8083186:	4798      	blx	r3
 8083188:	88e3      	ldrh	r3, [r4, #6]
 808318a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 808318e:	80e0      	strh	r0, [r4, #6]
    y = Wire.read(); y |= ((uint16_t)Wire.read()) << 8;
 8083190:	f004 fbf6 	bl	8087980 <_Z19__fetch_global_Wirev>
 8083194:	6803      	ldr	r3, [r0, #0]
 8083196:	695b      	ldr	r3, [r3, #20]
 8083198:	4798      	blx	r3
 808319a:	8120      	strh	r0, [r4, #8]
 808319c:	f004 fbf0 	bl	8087980 <_Z19__fetch_global_Wirev>
 80831a0:	6803      	ldr	r3, [r0, #0]
 80831a2:	695b      	ldr	r3, [r3, #20]
 80831a4:	4798      	blx	r3
 80831a6:	8923      	ldrh	r3, [r4, #8]
 80831a8:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80831ac:	8120      	strh	r0, [r4, #8]
    z = Wire.read(); z |= ((uint16_t)Wire.read()) << 8;
 80831ae:	f004 fbe7 	bl	8087980 <_Z19__fetch_global_Wirev>
 80831b2:	6803      	ldr	r3, [r0, #0]
 80831b4:	695b      	ldr	r3, [r3, #20]
 80831b6:	4798      	blx	r3
 80831b8:	8160      	strh	r0, [r4, #10]
 80831ba:	f004 fbe1 	bl	8087980 <_Z19__fetch_global_Wirev>
 80831be:	6803      	ldr	r3, [r0, #0]
 80831c0:	695b      	ldr	r3, [r3, #20]
 80831c2:	4798      	blx	r3
 80831c4:	8963      	ldrh	r3, [r4, #10]
 80831c6:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80831ca:	8160      	strh	r0, [r4, #10]
 80831cc:	e03c      	b.n	8083248 <_ZN15Adafruit_LIS3DH4readEv+0x10c>
  }
  #ifndef __AVR_ATtiny85__
  else {
    if (_sck == -1)
 80831ce:	f990 3020 	ldrsb.w	r3, [r0, #32]
 80831d2:	3301      	adds	r3, #1
 80831d4:	d101      	bne.n	80831da <_ZN15Adafruit_LIS3DH4readEv+0x9e>
      beginTransaction();
 80831d6:	f7ff fea3 	bl	8082f20 <_ZN15Adafruit_LIS3DH16beginTransactionEv>

    digitalWrite(_cs, LOW);
 80831da:	f994 001d 	ldrsb.w	r0, [r4, #29]
 80831de:	2100      	movs	r1, #0
 80831e0:	b280      	uxth	r0, r0
 80831e2:	f004 fae2 	bl	80877aa <digitalWrite>
    spixfer(LIS3DH_REG_OUT_X_L | 0x80 | 0x40); // read multiple, bit 7&6 high
 80831e6:	21e8      	movs	r1, #232	; 0xe8
 80831e8:	4620      	mov	r0, r4
 80831ea:	f7ff fe61 	bl	8082eb0 <_ZN15Adafruit_LIS3DH7spixferEh>

    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
 80831ee:	21ff      	movs	r1, #255	; 0xff
 80831f0:	4620      	mov	r0, r4
 80831f2:	f7ff fe5d 	bl	8082eb0 <_ZN15Adafruit_LIS3DH7spixferEh>
 80831f6:	21ff      	movs	r1, #255	; 0xff
 80831f8:	80e0      	strh	r0, [r4, #6]
 80831fa:	4620      	mov	r0, r4
 80831fc:	f7ff fe58 	bl	8082eb0 <_ZN15Adafruit_LIS3DH7spixferEh>
 8083200:	88e3      	ldrh	r3, [r4, #6]
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
 8083202:	21ff      	movs	r1, #255	; 0xff
      beginTransaction();

    digitalWrite(_cs, LOW);
    spixfer(LIS3DH_REG_OUT_X_L | 0x80 | 0x40); // read multiple, bit 7&6 high

    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
 8083204:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8083208:	80e0      	strh	r0, [r4, #6]
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
 808320a:	4620      	mov	r0, r4
 808320c:	f7ff fe50 	bl	8082eb0 <_ZN15Adafruit_LIS3DH7spixferEh>
 8083210:	21ff      	movs	r1, #255	; 0xff
 8083212:	8120      	strh	r0, [r4, #8]
 8083214:	4620      	mov	r0, r4
 8083216:	f7ff fe4b 	bl	8082eb0 <_ZN15Adafruit_LIS3DH7spixferEh>
 808321a:	8923      	ldrh	r3, [r4, #8]
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
 808321c:	21ff      	movs	r1, #255	; 0xff

    digitalWrite(_cs, LOW);
    spixfer(LIS3DH_REG_OUT_X_L | 0x80 | 0x40); // read multiple, bit 7&6 high

    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
 808321e:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8083222:	8120      	strh	r0, [r4, #8]
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
 8083224:	4620      	mov	r0, r4
 8083226:	f7ff fe43 	bl	8082eb0 <_ZN15Adafruit_LIS3DH7spixferEh>
 808322a:	21ff      	movs	r1, #255	; 0xff
 808322c:	8160      	strh	r0, [r4, #10]
 808322e:	4620      	mov	r0, r4
 8083230:	f7ff fe3e 	bl	8082eb0 <_ZN15Adafruit_LIS3DH7spixferEh>
 8083234:	8963      	ldrh	r3, [r4, #10]

    digitalWrite(_cs, HIGH);
 8083236:	2101      	movs	r1, #1
    digitalWrite(_cs, LOW);
    spixfer(LIS3DH_REG_OUT_X_L | 0x80 | 0x40); // read multiple, bit 7&6 high

    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
 8083238:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 808323c:	8160      	strh	r0, [r4, #10]

    digitalWrite(_cs, HIGH);
 808323e:	f994 001d 	ldrsb.w	r0, [r4, #29]
 8083242:	b280      	uxth	r0, r0
 8083244:	f004 fab1 	bl	80877aa <digitalWrite>
    if (_sck == -1)
    	endTransaction();

  }
  #endif
  uint8_t range = getRange();
 8083248:	4620      	mov	r0, r4
 808324a:	f7ff ff0e 	bl	808306a <_ZN15Adafruit_LIS3DH8getRangeEv>
  uint16_t divider = 1;
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
 808324e:	2803      	cmp	r0, #3
 8083250:	d009      	beq.n	8083266 <_ZN15Adafruit_LIS3DH4readEv+0x12a>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
 8083252:	2802      	cmp	r0, #2
 8083254:	d00a      	beq.n	808326c <_ZN15Adafruit_LIS3DH4readEv+0x130>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
 8083256:	2801      	cmp	r0, #1
 8083258:	d00b      	beq.n	8083272 <_ZN15Adafruit_LIS3DH4readEv+0x136>
  if (range == LIS3DH_RANGE_2_G) divider = 16380;
 808325a:	2800      	cmp	r0, #0
 808325c:	f643 70fc 	movw	r0, #16380	; 0x3ffc
 8083260:	bf18      	it	ne
 8083262:	2001      	movne	r0, #1
 8083264:	e007      	b.n	8083276 <_ZN15Adafruit_LIS3DH4readEv+0x13a>

  }
  #endif
  uint8_t range = getRange();
  uint16_t divider = 1;
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
 8083266:	f44f 6000 	mov.w	r0, #2048	; 0x800
 808326a:	e004      	b.n	8083276 <_ZN15Adafruit_LIS3DH4readEv+0x13a>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
 808326c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8083270:	e001      	b.n	8083276 <_ZN15Adafruit_LIS3DH4readEv+0x13a>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
 8083272:	f641 70fe 	movw	r0, #8190	; 0x1ffe
  if (range == LIS3DH_RANGE_2_G) divider = 16380;

  x_g = (float)x / divider;
 8083276:	f005 fc17 	bl	8088aa8 <__aeabi_i2f>
 808327a:	4605      	mov	r5, r0
 808327c:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 8083280:	f005 fc12 	bl	8088aa8 <__aeabi_i2f>
 8083284:	4629      	mov	r1, r5
 8083286:	f005 fd17 	bl	8088cb8 <__aeabi_fdiv>
 808328a:	60e0      	str	r0, [r4, #12]
  y_g = (float)y / divider;
 808328c:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8083290:	f005 fc0a 	bl	8088aa8 <__aeabi_i2f>
 8083294:	4629      	mov	r1, r5
 8083296:	f005 fd0f 	bl	8088cb8 <__aeabi_fdiv>
 808329a:	6120      	str	r0, [r4, #16]
  z_g = (float)z / divider;
 808329c:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
 80832a0:	f005 fc02 	bl	8088aa8 <__aeabi_i2f>
 80832a4:	4629      	mov	r1, r5
 80832a6:	f005 fd07 	bl	8088cb8 <__aeabi_fdiv>
 80832aa:	6160      	str	r0, [r4, #20]
 80832ac:	bd38      	pop	{r3, r4, r5, pc}

080832ae <_ZN15Adafruit_LIS3DH8getEventEP15sensors_event_t>:
/**************************************************************************/
/*!
    @brief  Gets the most recent sensor event
*/
/**************************************************************************/
bool Adafruit_LIS3DH::getEvent(sensors_event_t *event) {
 80832ae:	b570      	push	{r4, r5, r6, lr}
 80832b0:	460c      	mov	r4, r1
 80832b2:	4605      	mov	r5, r0
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
 80832b4:	2624      	movs	r6, #36	; 0x24
 80832b6:	4632      	mov	r2, r6
 80832b8:	2100      	movs	r1, #0
 80832ba:	4620      	mov	r0, r4
 80832bc:	f005 ffba 	bl	8089234 <memset>

  event->version   = sizeof(sensors_event_t);
 80832c0:	6026      	str	r6, [r4, #0]
  event->sensor_id = _sensorID;
 80832c2:	69ab      	ldr	r3, [r5, #24]
  event->type      = SENSOR_TYPE_ACCELEROMETER;
 80832c4:	2601      	movs	r6, #1
bool Adafruit_LIS3DH::getEvent(sensors_event_t *event) {
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));

  event->version   = sizeof(sensors_event_t);
  event->sensor_id = _sensorID;
 80832c6:	6063      	str	r3, [r4, #4]
  event->type      = SENSOR_TYPE_ACCELEROMETER;
  event->timestamp = 0;
 80832c8:	2300      	movs	r3, #0
 80832ca:	6123      	str	r3, [r4, #16]

  read();
 80832cc:	4628      	mov	r0, r5
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));

  event->version   = sizeof(sensors_event_t);
  event->sensor_id = _sensorID;
  event->type      = SENSOR_TYPE_ACCELEROMETER;
 80832ce:	60a6      	str	r6, [r4, #8]
  event->timestamp = 0;

  read();
 80832d0:	f7ff ff34 	bl	808313c <_ZN15Adafruit_LIS3DH4readEv>

  event->acceleration.x = x_g;
 80832d4:	68eb      	ldr	r3, [r5, #12]
  event->acceleration.y = y_g;
  event->acceleration.z = z_g;

  return true;
}
 80832d6:	4630      	mov	r0, r6
  event->type      = SENSOR_TYPE_ACCELEROMETER;
  event->timestamp = 0;

  read();

  event->acceleration.x = x_g;
 80832d8:	6163      	str	r3, [r4, #20]
  event->acceleration.y = y_g;
 80832da:	692b      	ldr	r3, [r5, #16]
 80832dc:	61a3      	str	r3, [r4, #24]
  event->acceleration.z = z_g;
 80832de:	696b      	ldr	r3, [r5, #20]
 80832e0:	61e3      	str	r3, [r4, #28]

  return true;
}
 80832e2:	bd70      	pop	{r4, r5, r6, pc}

080832e4 <_GLOBAL__sub_I__ZN15Adafruit_LIS3DHC2Ev>:
 80832e4:	f000 be7e 	b.w	8083fe4 <HAL_Pin_Map>

080832e8 <_ZN12UbloxM8Q_GPS11common_initEv>:
}

void
UbloxM8Q_GPS::common_init()
{
  initComplete = false;
 80832e8:	2300      	movs	r3, #0
  year = 0;
  milliseconds = tow = 0;
  dateValid = false;
  timeValid = false;
  // Floating point latitude and longitude value in degrees.
  latitude = longitude = 0.0;
 80832ea:	2200      	movs	r2, #0
}

void
UbloxM8Q_GPS::common_init()
{
  initComplete = false;
 80832ec:	7003      	strb	r3, [r0, #0]
  hour = minute = seconds = month = day = 0;
 80832ee:	7143      	strb	r3, [r0, #5]
 80832f0:	7103      	strb	r3, [r0, #4]
 80832f2:	70c3      	strb	r3, [r0, #3]
 80832f4:	7083      	strb	r3, [r0, #2]
 80832f6:	7043      	strb	r3, [r0, #1]
  year = 0;
 80832f8:	80c3      	strh	r3, [r0, #6]
  milliseconds = tow = 0;
 80832fa:	60c3      	str	r3, [r0, #12]
 80832fc:	6083      	str	r3, [r0, #8]
  dateValid = false;
 80832fe:	7403      	strb	r3, [r0, #16]
  timeValid = false;
 8083300:	7443      	strb	r3, [r0, #17]
  // Floating point latitude and longitude value in degrees.
  latitude = longitude = 0.0;
 8083302:	6182      	str	r2, [r0, #24]
 8083304:	6142      	str	r2, [r0, #20]
  latitudeDegrees = longitudeDegrees = 0.0;
 8083306:	6202      	str	r2, [r0, #32]
 8083308:	61c2      	str	r2, [r0, #28]
  geoidheight = altitude = 0.0;
 808330a:	6282      	str	r2, [r0, #40]	; 0x28
 808330c:	6242      	str	r2, [r0, #36]	; 0x24
  speed = 0.0; // m/s - its just gSpeed/1000.0
 808330e:	62c2      	str	r2, [r0, #44]	; 0x2c
  headingMot = headingVeh = 0.0; // degrees
 8083310:	6342      	str	r2, [r0, #52]	; 0x34
 8083312:	6302      	str	r2, [r0, #48]	; 0x30
  headVehValid = false;
 8083314:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  fix = false;
 8083318:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  fixquality = satellites = 0;
 808331c:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
 8083320:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  horzAcc = vertAcc = 0; // mm
 8083324:	6403      	str	r3, [r0, #64]	; 0x40
 8083326:	63c3      	str	r3, [r0, #60]	; 0x3c
  velN = velE = velD = 0; // north, east, down velocity, mm/s
 8083328:	64c3      	str	r3, [r0, #76]	; 0x4c
 808332a:	6483      	str	r3, [r0, #72]	; 0x48
 808332c:	6443      	str	r3, [r0, #68]	; 0x44
  gSpeed = 0; // ground speed, mm/s
 808332e:	6503      	str	r3, [r0, #80]	; 0x50
  odoTrip = 0; // odometer since last time commanded reset, m
 8083330:	6543      	str	r3, [r0, #84]	; 0x54
  odoTotal = 0; // odometer since last power up, m
 8083332:	6583      	str	r3, [r0, #88]	; 0x58
  odoAcc = 0; // odometer accuracy, m (1-sigma)
 8083334:	65c3      	str	r3, [r0, #92]	; 0x5c
 8083336:	4770      	bx	lr

08083338 <_ZN12UbloxM8Q_GPSC1Ev>:
};

// for simplifying ack detection
AckedMsg ackedMsg = AckedMsg();

UbloxM8Q_GPS::UbloxM8Q_GPS()
 8083338:	b508      	push	{r3, lr}
{
    common_init();
 808333a:	f7ff ffd5 	bl	80832e8 <_ZN12UbloxM8Q_GPS11common_initEv>
}
 808333e:	bd08      	pop	{r3, pc}

08083340 <_ZN12UbloxM8Q_GPS5ubxCSEPhS0_S0_>:
// Note that this is a different CS algorithm than is used for NMEA sentences.
// Sentence must include two extra bytes on the end that will be overwritten 
// by the check sum bytes.
void
UbloxM8Q_GPS::ubxCS( uint8_t *msg, uint8_t *ck_a, uint8_t *ck_b) 
{
 8083340:	b570      	push	{r4, r5, r6, lr}
    int i;
    *ck_a = 0, *ck_b = 0;
 8083342:	2000      	movs	r0, #0
 8083344:	7010      	strb	r0, [r2, #0]
 8083346:	7018      	strb	r0, [r3, #0]

  // set when receiver enabled
  bool gpsOn;
  // length is 2 bytes, little endian
  int ubx_length(uint8_t *m) {
        return( ((m[LENGTH_IDX])+(m[LENGTH_IDX+1]*256)));}
 8083348:	794d      	ldrb	r5, [r1, #5]
 808334a:	790c      	ldrb	r4, [r1, #4]
 808334c:	3101      	adds	r1, #1
 808334e:	eb04 2505 	add.w	r5, r4, r5, lsl #8
    // The CS doesn't include the first two bytes. The length field just 
    // gives the length of the payload. So the CS is calculated over 4 bytes 
    // (class, id, and length fields), plus the payload. 
    int length = ubx_length(msg);
    for(i=0;i < length + 4;i++)
 8083352:	3503      	adds	r5, #3
 8083354:	42a8      	cmp	r0, r5
 8083356:	dc0a      	bgt.n	808336e <_ZN12UbloxM8Q_GPS5ubxCSEPhS0_S0_+0x2e>
    {
	*ck_a = *ck_a + msg[i + 2]; // skip the 2 byte header
 8083358:	7816      	ldrb	r6, [r2, #0]
 808335a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    *ck_a = 0, *ck_b = 0;
    // The CS doesn't include the first two bytes. The length field just 
    // gives the length of the payload. So the CS is calculated over 4 bytes 
    // (class, id, and length fields), plus the payload. 
    int length = ubx_length(msg);
    for(i=0;i < length + 4;i++)
 808335e:	3001      	adds	r0, #1
    {
	*ck_a = *ck_a + msg[i + 2]; // skip the 2 byte header
 8083360:	4434      	add	r4, r6
 8083362:	b2e4      	uxtb	r4, r4
 8083364:	7014      	strb	r4, [r2, #0]
	*ck_b = *ck_b + *ck_a;
 8083366:	781e      	ldrb	r6, [r3, #0]
 8083368:	4434      	add	r4, r6
 808336a:	701c      	strb	r4, [r3, #0]
    *ck_a = 0, *ck_b = 0;
    // The CS doesn't include the first two bytes. The length field just 
    // gives the length of the payload. So the CS is calculated over 4 bytes 
    // (class, id, and length fields), plus the payload. 
    int length = ubx_length(msg);
    for(i=0;i < length + 4;i++)
 808336c:	e7f2      	b.n	8083354 <_ZN12UbloxM8Q_GPS5ubxCSEPhS0_S0_+0x14>
 808336e:	bd70      	pop	{r4, r5, r6, pc}

08083370 <_ZN12UbloxM8Q_GPS8ubxAddCSEPh>:
	*ck_b = *ck_b + *ck_a;
    }
}
void
UbloxM8Q_GPS::ubxAddCS(uint8_t *msg)
{
 8083370:	460a      	mov	r2, r1
 8083372:	b410      	push	{r4}
    int length = ubx_length(msg);
    ubxCS(msg, &msg[length+6], &msg[length+7]);
 8083374:	790b      	ldrb	r3, [r1, #4]
 8083376:	794c      	ldrb	r4, [r1, #5]
 8083378:	eb03 2404 	add.w	r4, r3, r4, lsl #8
 808337c:	1de3      	adds	r3, r4, #7
 808337e:	3406      	adds	r4, #6
 8083380:	4422      	add	r2, r4
 8083382:	440b      	add	r3, r1
}
 8083384:	bc10      	pop	{r4}
}
void
UbloxM8Q_GPS::ubxAddCS(uint8_t *msg)
{
    int length = ubx_length(msg);
    ubxCS(msg, &msg[length+6], &msg[length+7]);
 8083386:	f7ff bfdb 	b.w	8083340 <_ZN12UbloxM8Q_GPS5ubxCSEPhS0_S0_>
	...

0808338c <_ZN12UbloxM8Q_GPS7showUbxEPh>:
}
void
UbloxM8Q_GPS::showUbx(uint8_t *msg)
{
 808338c:	b570      	push	{r4, r5, r6, lr}
 808338e:	460d      	mov	r5, r1
 8083390:	460e      	mov	r6, r1
 8083392:	794c      	ldrb	r4, [r1, #5]
 8083394:	790b      	ldrb	r3, [r1, #4]
 8083396:	eb03 2404 	add.w	r4, r3, r4, lsl #8
    int i;
    int length = ubx_length(msg);

    // length plus header (2) + class (1) + id (1) + length field (2) + cs (2)
    for (i = 0; i < length + 8; i++){
 808339a:	3407      	adds	r4, #7
 808339c:	1b73      	subs	r3, r6, r5
 808339e:	429c      	cmp	r4, r3
 80833a0:	db0c      	blt.n	80833bc <_ZN12UbloxM8Q_GPS7showUbxEPh+0x30>
	Serial.print(msg[i], HEX); Serial.print(",");
 80833a2:	f003 fce3 	bl	8086d6c <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80833a6:	f816 1b01 	ldrb.w	r1, [r6], #1
 80833aa:	2210      	movs	r2, #16
 80833ac:	f001 fdb3 	bl	8084f16 <_ZN5Print11printNumberEmh>
 80833b0:	f003 fcdc 	bl	8086d6c <_Z16_fetch_usbserialv>
 80833b4:	4905      	ldr	r1, [pc, #20]	; (80833cc <_ZN12UbloxM8Q_GPS7showUbxEPh+0x40>)
 80833b6:	f001 fd91 	bl	8084edc <_ZN5Print5printEPKc>
{
    int i;
    int length = ubx_length(msg);

    // length plus header (2) + class (1) + id (1) + length field (2) + cs (2)
    for (i = 0; i < length + 8; i++){
 80833ba:	e7ef      	b.n	808339c <_ZN12UbloxM8Q_GPS7showUbxEPh+0x10>
	Serial.print(msg[i], HEX); Serial.print(",");
    }
    Serial.println(" ");
 80833bc:	f003 fcd6 	bl	8086d6c <_Z16_fetch_usbserialv>
}
 80833c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

    // length plus header (2) + class (1) + id (1) + length field (2) + cs (2)
    for (i = 0; i < length + 8; i++){
	Serial.print(msg[i], HEX); Serial.print(",");
    }
    Serial.println(" ");
 80833c4:	4902      	ldr	r1, [pc, #8]	; (80833d0 <_ZN12UbloxM8Q_GPS7showUbxEPh+0x44>)
 80833c6:	f001 bd9c 	b.w	8084f02 <_ZN5Print7printlnEPKc>
 80833ca:	bf00      	nop
 80833cc:	0808aea4 	.word	0x0808aea4
 80833d0:	0808b2a9 	.word	0x0808b2a9

080833d4 <_ZN12UbloxM8Q_GPS7getLongEPh>:
    return((m[1]*256)+(m[0]));
}
int32_t
UbloxM8Q_GPS::getLong(uint8_t *m)
{
    return((m[3]*(0xFFFFFF+1))+(m[2]*(0xFFFF+1))+(m[1]*(0xFF+1))+(m[0]));
 80833d4:	788b      	ldrb	r3, [r1, #2]
 80833d6:	78c8      	ldrb	r0, [r1, #3]
 80833d8:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 80833dc:	784b      	ldrb	r3, [r1, #1]
 80833de:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 80833e2:	7808      	ldrb	r0, [r1, #0]
}
 80833e4:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 80833e8:	4770      	bx	lr

080833ea <_ZN12UbloxM8Q_GPS8getULongEPh>:
uint32_t 
UbloxM8Q_GPS::getULong(uint8_t *m)
{
    return((m[3]*(0xFFFFFF+1))+(m[2]*(0xFFFF+1))+(m[1]*(0xFF+1))+(m[0]));
 80833ea:	788b      	ldrb	r3, [r1, #2]
 80833ec:	78c8      	ldrb	r0, [r1, #3]
 80833ee:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 80833f2:	784b      	ldrb	r3, [r1, #1]
 80833f4:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 80833f8:	7808      	ldrb	r0, [r1, #0]
}
 80833fa:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 80833fe:	4770      	bx	lr

08083400 <_ZN12UbloxM8Q_GPS11parsePOSLLHEPh>:
    }
}

void
UbloxM8Q_GPS::parsePOSLLH(uint8_t *msg)
{
 8083400:	b538      	push	{r3, r4, r5, lr}
 8083402:	460d      	mov	r5, r1
    // me to directly compare the code with the ublox spec.

    // skipping Time Of Week, better to use other timestamps. See ublox spec.
    longitude =              // Longitude, deg
    longitudeDegrees =
       ((float) getLong(&data[4])) * 0.0000001;
 8083404:	310a      	adds	r1, #10
    }
}

void
UbloxM8Q_GPS::parsePOSLLH(uint8_t *msg)
{
 8083406:	4604      	mov	r4, r0
    // me to directly compare the code with the ublox spec.

    // skipping Time Of Week, better to use other timestamps. See ublox spec.
    longitude =              // Longitude, deg
    longitudeDegrees =
       ((float) getLong(&data[4])) * 0.0000001;
 8083408:	f7ff ffe4 	bl	80833d4 <_ZN12UbloxM8Q_GPS7getLongEPh>
 808340c:	f005 fb4c 	bl	8088aa8 <__aeabi_i2f>
 8083410:	f004 fef4 	bl	80881fc <__aeabi_f2d>
 8083414:	a31c      	add	r3, pc, #112	; (adr r3, 8083488 <_ZN12UbloxM8Q_GPS11parsePOSLLHEPh+0x88>)
 8083416:	e9d3 2300 	ldrd	r2, r3, [r3]
 808341a:	f004 ff43 	bl	80882a4 <__aeabi_dmul>
 808341e:	f005 fa39 	bl	8088894 <__aeabi_d2f>
    latitude =              // Latitude, deg
    latitudeDegrees =
       ((float) getLong(&data[8])) * 0.0000001;
 8083422:	f105 010e 	add.w	r1, r5, #14
    // me to directly compare the code with the ublox spec.

    // skipping Time Of Week, better to use other timestamps. See ublox spec.
    longitude =              // Longitude, deg
    longitudeDegrees =
       ((float) getLong(&data[4])) * 0.0000001;
 8083426:	6220      	str	r0, [r4, #32]
 8083428:	61a0      	str	r0, [r4, #24]
    latitude =              // Latitude, deg
    latitudeDegrees =
       ((float) getLong(&data[8])) * 0.0000001;
 808342a:	4620      	mov	r0, r4
 808342c:	f7ff ffd2 	bl	80833d4 <_ZN12UbloxM8Q_GPS7getLongEPh>
 8083430:	f005 fb3a 	bl	8088aa8 <__aeabi_i2f>
 8083434:	f004 fee2 	bl	80881fc <__aeabi_f2d>
 8083438:	a313      	add	r3, pc, #76	; (adr r3, 8083488 <_ZN12UbloxM8Q_GPS11parsePOSLLHEPh+0x88>)
 808343a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808343e:	f004 ff31 	bl	80882a4 <__aeabi_dmul>
 8083442:	f005 fa27 	bl	8088894 <__aeabi_d2f>
    geoidheight =        // Height above ellipsoid, mm
       (float)getLong(&data[12]);  // WGS84 unless user altered. See ublox spec.
 8083446:	f105 0112 	add.w	r1, r5, #18
    longitude =              // Longitude, deg
    longitudeDegrees =
       ((float) getLong(&data[4])) * 0.0000001;
    latitude =              // Latitude, deg
    latitudeDegrees =
       ((float) getLong(&data[8])) * 0.0000001;
 808344a:	61e0      	str	r0, [r4, #28]
 808344c:	6160      	str	r0, [r4, #20]
    geoidheight =        // Height above ellipsoid, mm
       (float)getLong(&data[12]);  // WGS84 unless user altered. See ublox spec.
 808344e:	4620      	mov	r0, r4
 8083450:	f7ff ffc0 	bl	80833d4 <_ZN12UbloxM8Q_GPS7getLongEPh>
 8083454:	f005 fb28 	bl	8088aa8 <__aeabi_i2f>
    altitude =          // Height above Mean Sea Level, mm
       (float)getULong(&data[16]);
 8083458:	f105 0116 	add.w	r1, r5, #22
       ((float) getLong(&data[4])) * 0.0000001;
    latitude =              // Latitude, deg
    latitudeDegrees =
       ((float) getLong(&data[8])) * 0.0000001;
    geoidheight =        // Height above ellipsoid, mm
       (float)getLong(&data[12]);  // WGS84 unless user altered. See ublox spec.
 808345c:	6260      	str	r0, [r4, #36]	; 0x24
    altitude =          // Height above Mean Sea Level, mm
       (float)getULong(&data[16]);
 808345e:	4620      	mov	r0, r4
 8083460:	f7ff ffc3 	bl	80833ea <_ZN12UbloxM8Q_GPS8getULongEPh>
 8083464:	f005 fb1c 	bl	8088aa0 <__aeabi_ui2f>
    horzAcc =                // Horizontal Accuracy estimate, mm
       getULong(&data[20]);
 8083468:	f105 011a 	add.w	r1, r5, #26
    latitudeDegrees =
       ((float) getLong(&data[8])) * 0.0000001;
    geoidheight =        // Height above ellipsoid, mm
       (float)getLong(&data[12]);  // WGS84 unless user altered. See ublox spec.
    altitude =          // Height above Mean Sea Level, mm
       (float)getULong(&data[16]);
 808346c:	62a0      	str	r0, [r4, #40]	; 0x28
    horzAcc =                // Horizontal Accuracy estimate, mm
       getULong(&data[20]);
 808346e:	4620      	mov	r0, r4
 8083470:	f7ff ffbb 	bl	80833ea <_ZN12UbloxM8Q_GPS8getULongEPh>
    vertAcc =                // Vertical Accuracy extimate, mm
       getULong(&data[24]);
 8083474:	f105 011e 	add.w	r1, r5, #30
    geoidheight =        // Height above ellipsoid, mm
       (float)getLong(&data[12]);  // WGS84 unless user altered. See ublox spec.
    altitude =          // Height above Mean Sea Level, mm
       (float)getULong(&data[16]);
    horzAcc =                // Horizontal Accuracy estimate, mm
       getULong(&data[20]);
 8083478:	63e0      	str	r0, [r4, #60]	; 0x3c
    vertAcc =                // Vertical Accuracy extimate, mm
       getULong(&data[24]);
 808347a:	4620      	mov	r0, r4
 808347c:	f7ff ffb5 	bl	80833ea <_ZN12UbloxM8Q_GPS8getULongEPh>
 8083480:	6420      	str	r0, [r4, #64]	; 0x40
 8083482:	bd38      	pop	{r3, r4, r5, pc}
 8083484:	f3af 8000 	nop.w
 8083488:	9abcaf48 	.word	0x9abcaf48
 808348c:	3e7ad7f2 	.word	0x3e7ad7f2

08083490 <_ZN12UbloxM8Q_GPS8parsePVTEPh>:

}

void
UbloxM8Q_GPS::parsePVT(uint8_t *msg)
{
 8083490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8083492:	460d      	mov	r5, r1
    // The ublox specification for the data fields lists byte offests
    // into the message payload.
    // Setting this pointer and then using hardcoded indexes allows
    // me to directly compare the code with the ublox spec.

    tow = getULong(&data[0]);
 8083494:	3106      	adds	r1, #6

}

void
UbloxM8Q_GPS::parsePVT(uint8_t *msg)
{
 8083496:	4604      	mov	r4, r0
    // The ublox specification for the data fields lists byte offests
    // into the message payload.
    // Setting this pointer and then using hardcoded indexes allows
    // me to directly compare the code with the ublox spec.

    tow = getULong(&data[0]);
 8083498:	f7ff ffa7 	bl	80833ea <_ZN12UbloxM8Q_GPS8getULongEPh>
 808349c:	60e0      	str	r0, [r4, #12]
    // gnssFixOk bit in Bitfield Flags
    if ((data[21] & 0x01) == 0){
 808349e:	7eeb      	ldrb	r3, [r5, #27]
 80834a0:	07db      	lsls	r3, r3, #31
 80834a2:	f140 80c6 	bpl.w	8083632 <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x1a2>
	// Fix not Ok
	return;
    }
    uint8_t flags = data[11];
 80834a6:	7c6b      	ldrb	r3, [r5, #17]
    if ( flags & 0x01){
 80834a8:	f013 0201 	ands.w	r2, r3, #1
 80834ac:	d00b      	beq.n	80834c6 <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x36>
	dateValid = true;
 80834ae:	2201      	movs	r2, #1
 80834b0:	7422      	strb	r2, [r4, #16]
	year = getUInt(&data[4]);  // UTC
 80834b2:	7ae9      	ldrb	r1, [r5, #11]
 80834b4:	7aaa      	ldrb	r2, [r5, #10]
 80834b6:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 80834ba:	80e2      	strh	r2, [r4, #6]
	month = data[6];
 80834bc:	7b2a      	ldrb	r2, [r5, #12]
 80834be:	7122      	strb	r2, [r4, #4]
	day = data[7];
 80834c0:	7b6a      	ldrb	r2, [r5, #13]
 80834c2:	7162      	strb	r2, [r4, #5]
 80834c4:	e000      	b.n	80834c8 <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x38>
    } else {
	// If date is not valid, stick with date we already have
	dateValid = false;
 80834c6:	7422      	strb	r2, [r4, #16]
    }
    if ( flags & 0x02){
 80834c8:	f003 0302 	and.w	r3, r3, #2
 80834cc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80834d0:	b143      	cbz	r3, 80834e4 <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x54>
	timeValid = true;
 80834d2:	2301      	movs	r3, #1
 80834d4:	7463      	strb	r3, [r4, #17]
	hour = data[8];
 80834d6:	7bab      	ldrb	r3, [r5, #14]
 80834d8:	7063      	strb	r3, [r4, #1]
	minute = data[9];
 80834da:	7beb      	ldrb	r3, [r5, #15]
 80834dc:	70a3      	strb	r3, [r4, #2]
	seconds = data[10];
 80834de:	7c2b      	ldrb	r3, [r5, #16]
 80834e0:	70e3      	strb	r3, [r4, #3]
 80834e2:	e000      	b.n	80834e6 <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x56>
    } else {
	// If time is not valid, stick with time we already have
	timeValid = false;
 80834e4:	7462      	strb	r2, [r4, #17]

    // Calculating milliseconds from nanoseconds. Nanoseconds is actually
    // a +/- adjustment on time. Rather than try to decrement everything 
    // when nanoseconds is negative on Jan 1 at midnight, I'm going to ignore
    // it when it is negative and just use it when it is positive.
    int32_t nanoseconds = getLong(&data[16]);
 80834e6:	f105 0116 	add.w	r1, r5, #22
 80834ea:	4620      	mov	r0, r4
 80834ec:	f7ff ff72 	bl	80833d4 <_ZN12UbloxM8Q_GPS7getLongEPh>
    if (nanoseconds > 0){
 80834f0:	2800      	cmp	r0, #0
        milliseconds = nanoseconds/1000;
 80834f2:	bfc5      	ittet	gt
 80834f4:	f44f 737a 	movgt.w	r3, #1000	; 0x3e8
 80834f8:	fb90 f0f3 	sdivgt	r0, r0, r3
    } else {
        milliseconds = 0;
 80834fc:	2300      	movle	r3, #0
    // a +/- adjustment on time. Rather than try to decrement everything 
    // when nanoseconds is negative on Jan 1 at midnight, I'm going to ignore
    // it when it is negative and just use it when it is positive.
    int32_t nanoseconds = getLong(&data[16]);
    if (nanoseconds > 0){
        milliseconds = nanoseconds/1000;
 80834fe:	60a0      	strgt	r0, [r4, #8]
    } else {
        milliseconds = 0;
 8083500:	bfd8      	it	le
 8083502:	60a3      	strle	r3, [r4, #8]
    }

     // 0:none,1:dead reck,2:2d,3:3d,4:GNSS&reck,5:time only fix
    fixquality = data[20];
 8083504:	7eab      	ldrb	r3, [r5, #26]
    // I tried it with fixquality of 3 for a long time, now try 2 or 3
    fix =  ((fixquality == 3) || (fixquality == 2));
    satellites = data[23];
    longitude =              // Longitude, deg
    longitudeDegrees =
          ((float) getLong(&data[24]))*0.0000001;
 8083506:	f105 011e 	add.w	r1, r5, #30
    } else {
        milliseconds = 0;
    }

     // 0:none,1:dead reck,2:2d,3:3d,4:GNSS&reck,5:time only fix
    fixquality = data[20];
 808350a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    // I tried it with fixquality of 3 for a long time, now try 2 or 3
    fix =  ((fixquality == 3) || (fixquality == 2));
 808350e:	3b02      	subs	r3, #2
 8083510:	2b01      	cmp	r3, #1
 8083512:	bf8c      	ite	hi
 8083514:	2300      	movhi	r3, #0
 8083516:	2301      	movls	r3, #1
 8083518:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    satellites = data[23];
 808351c:	7f6b      	ldrb	r3, [r5, #29]
    longitude =              // Longitude, deg
    longitudeDegrees =
          ((float) getLong(&data[24]))*0.0000001;
 808351e:	4620      	mov	r0, r4

     // 0:none,1:dead reck,2:2d,3:3d,4:GNSS&reck,5:time only fix
    fixquality = data[20];
    // I tried it with fixquality of 3 for a long time, now try 2 or 3
    fix =  ((fixquality == 3) || (fixquality == 2));
    satellites = data[23];
 8083520:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
    longitude =              // Longitude, deg
    longitudeDegrees =
          ((float) getLong(&data[24]))*0.0000001;
 8083524:	f7ff ff56 	bl	80833d4 <_ZN12UbloxM8Q_GPS7getLongEPh>
 8083528:	f005 fabe 	bl	8088aa8 <__aeabi_i2f>
 808352c:	f004 fe66 	bl	80881fc <__aeabi_f2d>
 8083530:	a341      	add	r3, pc, #260	; (adr r3, 8083638 <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x1a8>)
 8083532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8083536:	f004 feb5 	bl	80882a4 <__aeabi_dmul>
 808353a:	f005 f9ab 	bl	8088894 <__aeabi_d2f>
    latitude =              // Latitude, deg
    latitudeDegrees =
       ((float) getLong(&data[28]))*0.0000001;
 808353e:	f105 0122 	add.w	r1, r5, #34	; 0x22
    // I tried it with fixquality of 3 for a long time, now try 2 or 3
    fix =  ((fixquality == 3) || (fixquality == 2));
    satellites = data[23];
    longitude =              // Longitude, deg
    longitudeDegrees =
          ((float) getLong(&data[24]))*0.0000001;
 8083542:	6220      	str	r0, [r4, #32]
 8083544:	61a0      	str	r0, [r4, #24]
    latitude =              // Latitude, deg
    latitudeDegrees =
       ((float) getLong(&data[28]))*0.0000001;
 8083546:	4620      	mov	r0, r4
 8083548:	f7ff ff44 	bl	80833d4 <_ZN12UbloxM8Q_GPS7getLongEPh>
 808354c:	f005 faac 	bl	8088aa8 <__aeabi_i2f>
 8083550:	f004 fe54 	bl	80881fc <__aeabi_f2d>
 8083554:	a338      	add	r3, pc, #224	; (adr r3, 8083638 <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x1a8>)
 8083556:	e9d3 2300 	ldrd	r2, r3, [r3]
 808355a:	f004 fea3 	bl	80882a4 <__aeabi_dmul>
 808355e:	f005 f999 	bl	8088894 <__aeabi_d2f>
    geoidheight = // Height above ellipsoid, mm
       (float)getLong(&data[32]); // WGS84 unless user altered. See ublox spec.
 8083562:	f105 0126 	add.w	r1, r5, #38	; 0x26
    longitude =              // Longitude, deg
    longitudeDegrees =
          ((float) getLong(&data[24]))*0.0000001;
    latitude =              // Latitude, deg
    latitudeDegrees =
       ((float) getLong(&data[28]))*0.0000001;
 8083566:	61e0      	str	r0, [r4, #28]
 8083568:	6160      	str	r0, [r4, #20]
    geoidheight = // Height above ellipsoid, mm
       (float)getLong(&data[32]); // WGS84 unless user altered. See ublox spec.
 808356a:	4620      	mov	r0, r4
 808356c:	f7ff ff32 	bl	80833d4 <_ZN12UbloxM8Q_GPS7getLongEPh>
 8083570:	f005 fa9a 	bl	8088aa8 <__aeabi_i2f>
    altitude =          // Height above Mean Sea Level, mm
       (float)getULong(&data[36]);
 8083574:	f105 012a 	add.w	r1, r5, #42	; 0x2a
          ((float) getLong(&data[24]))*0.0000001;
    latitude =              // Latitude, deg
    latitudeDegrees =
       ((float) getLong(&data[28]))*0.0000001;
    geoidheight = // Height above ellipsoid, mm
       (float)getLong(&data[32]); // WGS84 unless user altered. See ublox spec.
 8083578:	6260      	str	r0, [r4, #36]	; 0x24
    altitude =          // Height above Mean Sea Level, mm
       (float)getULong(&data[36]);
 808357a:	4620      	mov	r0, r4
 808357c:	f7ff ff35 	bl	80833ea <_ZN12UbloxM8Q_GPS8getULongEPh>
 8083580:	f005 fa8e 	bl	8088aa0 <__aeabi_ui2f>
    horzAcc =                // Horizontal Accuracy estimate, mm
       getULong(&data[40]);
 8083584:	f105 012e 	add.w	r1, r5, #46	; 0x2e
    latitudeDegrees =
       ((float) getLong(&data[28]))*0.0000001;
    geoidheight = // Height above ellipsoid, mm
       (float)getLong(&data[32]); // WGS84 unless user altered. See ublox spec.
    altitude =          // Height above Mean Sea Level, mm
       (float)getULong(&data[36]);
 8083588:	62a0      	str	r0, [r4, #40]	; 0x28
    horzAcc =                // Horizontal Accuracy estimate, mm
       getULong(&data[40]);
 808358a:	4620      	mov	r0, r4
 808358c:	f7ff ff2d 	bl	80833ea <_ZN12UbloxM8Q_GPS8getULongEPh>
    vertAcc =                // Vertical Accuracy extimate, mm
       getULong(&data[44]);
 8083590:	f105 0132 	add.w	r1, r5, #50	; 0x32
    geoidheight = // Height above ellipsoid, mm
       (float)getLong(&data[32]); // WGS84 unless user altered. See ublox spec.
    altitude =          // Height above Mean Sea Level, mm
       (float)getULong(&data[36]);
    horzAcc =                // Horizontal Accuracy estimate, mm
       getULong(&data[40]);
 8083594:	63e0      	str	r0, [r4, #60]	; 0x3c
    vertAcc =                // Vertical Accuracy extimate, mm
       getULong(&data[44]);
 8083596:	4620      	mov	r0, r4
 8083598:	f7ff ff27 	bl	80833ea <_ZN12UbloxM8Q_GPS8getULongEPh>
    velN =                   // North velocity, mm/s
        getLong(&data[48]);
 808359c:	f105 0136 	add.w	r1, r5, #54	; 0x36
    altitude =          // Height above Mean Sea Level, mm
       (float)getULong(&data[36]);
    horzAcc =                // Horizontal Accuracy estimate, mm
       getULong(&data[40]);
    vertAcc =                // Vertical Accuracy extimate, mm
       getULong(&data[44]);
 80835a0:	6420      	str	r0, [r4, #64]	; 0x40
    velN =                   // North velocity, mm/s
        getLong(&data[48]);
 80835a2:	4620      	mov	r0, r4
 80835a4:	f7ff ff16 	bl	80833d4 <_ZN12UbloxM8Q_GPS7getLongEPh>
    velE =                   // East velocity, mm/s
        getLong(&data[52]);
 80835a8:	f105 013a 	add.w	r1, r5, #58	; 0x3a
    horzAcc =                // Horizontal Accuracy estimate, mm
       getULong(&data[40]);
    vertAcc =                // Vertical Accuracy extimate, mm
       getULong(&data[44]);
    velN =                   // North velocity, mm/s
        getLong(&data[48]);
 80835ac:	6460      	str	r0, [r4, #68]	; 0x44
    velE =                   // East velocity, mm/s
        getLong(&data[52]);
 80835ae:	4620      	mov	r0, r4
 80835b0:	f7ff ff10 	bl	80833d4 <_ZN12UbloxM8Q_GPS7getLongEPh>
    velD =                   // Down velocity, mm/s
        getLong(&data[56]);
 80835b4:	f105 013e 	add.w	r1, r5, #62	; 0x3e
    vertAcc =                // Vertical Accuracy extimate, mm
       getULong(&data[44]);
    velN =                   // North velocity, mm/s
        getLong(&data[48]);
    velE =                   // East velocity, mm/s
        getLong(&data[52]);
 80835b8:	64a0      	str	r0, [r4, #72]	; 0x48
    velD =                   // Down velocity, mm/s
        getLong(&data[56]);
 80835ba:	4620      	mov	r0, r4
 80835bc:	f7ff ff0a 	bl	80833d4 <_ZN12UbloxM8Q_GPS7getLongEPh>
    gSpeed =                   // Ground speed, mm/s
        getLong(&data[60]);
 80835c0:	f105 0142 	add.w	r1, r5, #66	; 0x42
    velN =                   // North velocity, mm/s
        getLong(&data[48]);
    velE =                   // East velocity, mm/s
        getLong(&data[52]);
    velD =                   // Down velocity, mm/s
        getLong(&data[56]);
 80835c4:	64e0      	str	r0, [r4, #76]	; 0x4c
    gSpeed =                   // Ground speed, mm/s
        getLong(&data[60]);
 80835c6:	4620      	mov	r0, r4
 80835c8:	f7ff ff04 	bl	80833d4 <_ZN12UbloxM8Q_GPS7getLongEPh>
    headingMot =                   // heading of motion, degrees 1e-5
        (float) (getLong(&data[64])/100000.0);
 80835cc:	f105 0746 	add.w	r7, r5, #70	; 0x46
    velE =                   // East velocity, mm/s
        getLong(&data[52]);
    velD =                   // Down velocity, mm/s
        getLong(&data[56]);
    gSpeed =                   // Ground speed, mm/s
        getLong(&data[60]);
 80835d0:	6520      	str	r0, [r4, #80]	; 0x50
    headingMot =                   // heading of motion, degrees 1e-5
        (float) (getLong(&data[64])/100000.0);
 80835d2:	4639      	mov	r1, r7
    velE =                   // East velocity, mm/s
        getLong(&data[52]);
    velD =                   // Down velocity, mm/s
        getLong(&data[56]);
    gSpeed =                   // Ground speed, mm/s
        getLong(&data[60]);
 80835d4:	4606      	mov	r6, r0
    headingMot =                   // heading of motion, degrees 1e-5
        (float) (getLong(&data[64])/100000.0);
 80835d6:	4620      	mov	r0, r4
 80835d8:	f7ff fefc 	bl	80833d4 <_ZN12UbloxM8Q_GPS7getLongEPh>
 80835dc:	f004 fdfc 	bl	80881d8 <__aeabi_i2d>
 80835e0:	a317      	add	r3, pc, #92	; (adr r3, 8083640 <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x1b0>)
 80835e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80835e6:	f004 ff87 	bl	80884f8 <__aeabi_ddiv>
 80835ea:	f005 f953 	bl	8088894 <__aeabi_d2f>
    headingVeh =                   // heading of vehicle, degrees 1e-5
        (float) (getLong(&data[64])/100000.0);
 80835ee:	4639      	mov	r1, r7
    velD =                   // Down velocity, mm/s
        getLong(&data[56]);
    gSpeed =                   // Ground speed, mm/s
        getLong(&data[60]);
    headingMot =                   // heading of motion, degrees 1e-5
        (float) (getLong(&data[64])/100000.0);
 80835f0:	6320      	str	r0, [r4, #48]	; 0x30
    headingVeh =                   // heading of vehicle, degrees 1e-5
        (float) (getLong(&data[64])/100000.0);
 80835f2:	4620      	mov	r0, r4
 80835f4:	f7ff feee 	bl	80833d4 <_ZN12UbloxM8Q_GPS7getLongEPh>
 80835f8:	f004 fdee 	bl	80881d8 <__aeabi_i2d>
 80835fc:	a310      	add	r3, pc, #64	; (adr r3, 8083640 <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x1b0>)
 80835fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8083602:	f004 ff79 	bl	80884f8 <__aeabi_ddiv>
 8083606:	f005 f945 	bl	8088894 <__aeabi_d2f>
 808360a:	6360      	str	r0, [r4, #52]	; 0x34
    if (data[21] & 0x20){
 808360c:	7eeb      	ldrb	r3, [r5, #27]
 808360e:	f003 0320 	and.w	r3, r3, #32
 8083612:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8083616:	b11b      	cbz	r3, 8083620 <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x190>
	headVehValid = true;
 8083618:	2301      	movs	r3, #1
 808361a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 808361e:	e001      	b.n	8083624 <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x194>
    } else {
	headVehValid = false;
 8083620:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    }
    speed = ((float)gSpeed/1000.0); // from integer mm/s to float m/s
 8083624:	4630      	mov	r0, r6
 8083626:	f005 fa3f 	bl	8088aa8 <__aeabi_i2f>
 808362a:	4907      	ldr	r1, [pc, #28]	; (8083648 <_ZN12UbloxM8Q_GPS8parsePVTEPh+0x1b8>)
 808362c:	f005 fb44 	bl	8088cb8 <__aeabi_fdiv>
 8083630:	62e0      	str	r0, [r4, #44]	; 0x2c
 8083632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8083634:	f3af 8000 	nop.w
 8083638:	9abcaf48 	.word	0x9abcaf48
 808363c:	3e7ad7f2 	.word	0x3e7ad7f2
 8083640:	00000000 	.word	0x00000000
 8083644:	40f86a00 	.word	0x40f86a00
 8083648:	447a0000 	.word	0x447a0000

0808364c <_ZN12UbloxM8Q_GPS8parseODOEPh>:
}

// read the odometer data
void
UbloxM8Q_GPS::parseODO(uint8_t *msg)
{
 808364c:	b510      	push	{r4, lr}
 808364e:	460c      	mov	r4, r1
    // into the message payload.
    // Setting this pointer and then using hardcoded indexes allows
    // me to directly compare the code with the ublox spec.

    // Ignoring version, reserved, and iTOW
    odoTrip = getULong(&data[8]); // since reset, m
 8083650:	310e      	adds	r1, #14
}

// read the odometer data
void
UbloxM8Q_GPS::parseODO(uint8_t *msg)
{
 8083652:	4602      	mov	r2, r0
    // into the message payload.
    // Setting this pointer and then using hardcoded indexes allows
    // me to directly compare the code with the ublox spec.

    // Ignoring version, reserved, and iTOW
    odoTrip = getULong(&data[8]); // since reset, m
 8083654:	f7ff fec9 	bl	80833ea <_ZN12UbloxM8Q_GPS8getULongEPh>

//    Serial.print("odoTrip: ");
//    Serial.println(odoTrip);
    odoTotal = getULong(&data[12]); // since power up, m
 8083658:	f104 0112 	add.w	r1, r4, #18
    // into the message payload.
    // Setting this pointer and then using hardcoded indexes allows
    // me to directly compare the code with the ublox spec.

    // Ignoring version, reserved, and iTOW
    odoTrip = getULong(&data[8]); // since reset, m
 808365c:	6550      	str	r0, [r2, #84]	; 0x54

//    Serial.print("odoTrip: ");
//    Serial.println(odoTrip);
    odoTotal = getULong(&data[12]); // since power up, m
 808365e:	4610      	mov	r0, r2
 8083660:	f7ff fec3 	bl	80833ea <_ZN12UbloxM8Q_GPS8getULongEPh>
//    Serial.print("odoTotal: ");
//    Serial.println(odoTotal);
    odoAcc = getULong(&data[16]); // m 1-sigma
 8083664:	f104 0116 	add.w	r1, r4, #22
    // Ignoring version, reserved, and iTOW
    odoTrip = getULong(&data[8]); // since reset, m

//    Serial.print("odoTrip: ");
//    Serial.println(odoTrip);
    odoTotal = getULong(&data[12]); // since power up, m
 8083668:	6590      	str	r0, [r2, #88]	; 0x58
//    Serial.print("odoTotal: ");
//    Serial.println(odoTotal);
    odoAcc = getULong(&data[16]); // m 1-sigma
 808366a:	4610      	mov	r0, r2
 808366c:	f7ff febd 	bl	80833ea <_ZN12UbloxM8Q_GPS8getULongEPh>
 8083670:	65d0      	str	r0, [r2, #92]	; 0x5c
 8083672:	bd10      	pop	{r4, pc}

08083674 <_ZN12UbloxM8Q_GPS7readVerEv>:
// Used only by UbloxM8Q_GPS.begin() to read the initial report of version
// information from the receiver, write it to Serial, and then turn off
// the NMEA ascii messages.
void
UbloxM8Q_GPS::readVer()
{
 8083674:	b538      	push	{r3, r4, r5, lr}
    int linecnt = 0;
 8083676:	2400      	movs	r4, #0
    char c;
    while (linecnt < 10){
	while (Serial1.available()){
 8083678:	f003 fd0a 	bl	8087090 <_Z22__fetch_global_Serial1v>
 808367c:	6803      	ldr	r3, [r0, #0]
 808367e:	691b      	ldr	r3, [r3, #16]
 8083680:	4798      	blx	r3
 8083682:	b960      	cbnz	r0, 808369e <_ZN12UbloxM8Q_GPS7readVerEv+0x2a>
void
UbloxM8Q_GPS::readVer()
{
    int linecnt = 0;
    char c;
    while (linecnt < 10){
 8083684:	2c09      	cmp	r4, #9
 8083686:	ddf7      	ble.n	8083678 <_ZN12UbloxM8Q_GPS7readVerEv+0x4>
		linecnt++;
	    }
	    Serial.print(c);
	} 
    }
    Serial1.print("$PUBX,41,1,3,1,9600,0*16\r\n");  // Turn off nmea
 8083688:	f003 fd02 	bl	8087090 <_Z22__fetch_global_Serial1v>
 808368c:	490b      	ldr	r1, [pc, #44]	; (80836bc <_ZN12UbloxM8Q_GPS7readVerEv+0x48>)
 808368e:	f001 fc25 	bl	8084edc <_ZN5Print5printEPKc>
    // Must wait for nmea data to rattle out or it gets confused
    // with ubx data.
    delay(2000);
}
 8083692:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	} 
    }
    Serial1.print("$PUBX,41,1,3,1,9600,0*16\r\n");  // Turn off nmea
    // Must wait for nmea data to rattle out or it gets confused
    // with ubx data.
    delay(2000);
 8083696:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 808369a:	f002 be3d 	b.w	8086318 <delay>
{
    int linecnt = 0;
    char c;
    while (linecnt < 10){
	while (Serial1.available()){
	    c = Serial1.read();
 808369e:	f003 fcf7 	bl	8087090 <_Z22__fetch_global_Serial1v>
 80836a2:	6803      	ldr	r3, [r0, #0]
 80836a4:	695b      	ldr	r3, [r3, #20]
 80836a6:	4798      	blx	r3
 80836a8:	b2c5      	uxtb	r5, r0
	    if ( c == '\n'){
 80836aa:	2d0a      	cmp	r5, #10
		linecnt++;
 80836ac:	bf08      	it	eq
 80836ae:	3401      	addeq	r4, #1
	    }
	    Serial.print(c);
 80836b0:	f003 fb5c 	bl	8086d6c <_Z16_fetch_usbserialv>
 80836b4:	4629      	mov	r1, r5
 80836b6:	f001 fc15 	bl	8084ee4 <_ZN5Print5printEc>
UbloxM8Q_GPS::readVer()
{
    int linecnt = 0;
    char c;
    while (linecnt < 10){
	while (Serial1.available()){
 80836ba:	e7dd      	b.n	8083678 <_ZN12UbloxM8Q_GPS7readVerEv+0x4>
 80836bc:	0808aea6 	.word	0x0808aea6

080836c0 <_ZN8AckedMsgC1Ev>:
    Serial.println(ret);
}


// AckedMsg methods
AckedMsg::AckedMsg()
 80836c0:	1f03      	subs	r3, r0, #4
 80836c2:	f100 0224 	add.w	r2, r0, #36	; 0x24
{
    for(uint16_t i=0;i<sizeof(ackList)/sizeof(int);i++) {
	ackList[i] = 0;
 80836c6:	2100      	movs	r1, #0
 80836c8:	f843 1f04 	str.w	r1, [r3, #4]!


// AckedMsg methods
AckedMsg::AckedMsg()
{
    for(uint16_t i=0;i<sizeof(ackList)/sizeof(int);i++) {
 80836cc:	4293      	cmp	r3, r2
 80836ce:	d1fb      	bne.n	80836c8 <_ZN8AckedMsgC1Ev+0x8>
	ackList[i] = 0;
    }
}
 80836d0:	4770      	bx	lr

080836d2 <_ZN8AckedMsg6setAckEi>:
int 
AckedMsg::setAck(int msgType)
{
 80836d2:	2300      	movs	r3, #0
    for(uint16_t i=0;i<sizeof(ackList)/sizeof(int);i++) {
	if (!ackList[i]){
 80836d4:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 80836d8:	b912      	cbnz	r2, 80836e0 <_ZN8AckedMsg6setAckEi+0xe>
	    ackList[i] = msgType;
 80836da:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
	    return 0;
 80836de:	e004      	b.n	80836ea <_ZN8AckedMsg6setAckEi+0x18>
 80836e0:	3301      	adds	r3, #1
    }
}
int 
AckedMsg::setAck(int msgType)
{
    for(uint16_t i=0;i<sizeof(ackList)/sizeof(int);i++) {
 80836e2:	2b0a      	cmp	r3, #10
 80836e4:	d1f6      	bne.n	80836d4 <_ZN8AckedMsg6setAckEi+0x2>
	if (!ackList[i]){
	    ackList[i] = msgType;
	    return 0;
	}
    }
    return -1;
 80836e6:	f04f 32ff 	mov.w	r2, #4294967295
}
 80836ea:	4610      	mov	r0, r2
 80836ec:	4770      	bx	lr

080836ee <_ZN8AckedMsg8clearAckEi>:
void
AckedMsg::clearAck(int msgType)
{
 80836ee:	b510      	push	{r4, lr}
 80836f0:	1f03      	subs	r3, r0, #4
    for(uint16_t i=0;i<sizeof(ackList)/sizeof(int);i++) {
	if (ackList[i] == msgType){
	    ackList[i] = 0;
 80836f2:	2200      	movs	r2, #0
 80836f4:	3024      	adds	r0, #36	; 0x24
}
void
AckedMsg::clearAck(int msgType)
{
    for(uint16_t i=0;i<sizeof(ackList)/sizeof(int);i++) {
	if (ackList[i] == msgType){
 80836f6:	f853 4f04 	ldr.w	r4, [r3, #4]!
 80836fa:	428c      	cmp	r4, r1
	    ackList[i] = 0;
 80836fc:	bf08      	it	eq
 80836fe:	601a      	streq	r2, [r3, #0]
    return -1;
}
void
AckedMsg::clearAck(int msgType)
{
    for(uint16_t i=0;i<sizeof(ackList)/sizeof(int);i++) {
 8083700:	4283      	cmp	r3, r0
 8083702:	d1f8      	bne.n	80836f6 <_ZN8AckedMsg8clearAckEi+0x8>
	if (ackList[i] == msgType){
	    ackList[i] = 0;
	}
    }
}
 8083704:	bd10      	pop	{r4, pc}

08083706 <_ZN8AckedMsg7isAckedEi>:
bool
AckedMsg::isAcked(int msgType)
{
 8083706:	1f03      	subs	r3, r0, #4
 8083708:	3024      	adds	r0, #36	; 0x24
    for(uint16_t i=0;i<sizeof(ackList)/sizeof(int);i++) {
	if (ackList[i] == msgType){
 808370a:	f853 2f04 	ldr.w	r2, [r3, #4]!
 808370e:	428a      	cmp	r2, r1
 8083710:	d003      	beq.n	808371a <_ZN8AckedMsg7isAckedEi+0x14>
    }
}
bool
AckedMsg::isAcked(int msgType)
{
    for(uint16_t i=0;i<sizeof(ackList)/sizeof(int);i++) {
 8083712:	4283      	cmp	r3, r0
 8083714:	d1f9      	bne.n	808370a <_ZN8AckedMsg7isAckedEi+0x4>
	if (ackList[i] == msgType){
	    return true;
	}
    }
    return false;
 8083716:	2000      	movs	r0, #0
 8083718:	4770      	bx	lr
bool
AckedMsg::isAcked(int msgType)
{
    for(uint16_t i=0;i<sizeof(ackList)/sizeof(int);i++) {
	if (ackList[i] == msgType){
	    return true;
 808371a:	2001      	movs	r0, #1
	}
    }
    return false;
}
 808371c:	4770      	bx	lr

0808371e <_ZN5Print5printIiLi0EEEjT_i>:

};

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
 808371e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8083722:	4607      	mov	r7, r0
 8083724:	460c      	mov	r4, r1
{
    if (base == 0) {
 8083726:	4615      	mov	r5, r2
 8083728:	b92a      	cbnz	r2, 8083736 <_ZN5Print5printIiLi0EEEjT_i+0x18>
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
    }
}
 808372a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
 808372e:	6803      	ldr	r3, [r0, #0]
 8083730:	b2c9      	uxtb	r1, r1
 8083732:	689b      	ldr	r3, [r3, #8]
 8083734:	4718      	bx	r3
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
 8083736:	2900      	cmp	r1, #0
 8083738:	da07      	bge.n	808374a <_ZN5Print5printIiLi0EEEjT_i+0x2c>
 808373a:	2a0a      	cmp	r2, #10
 808373c:	d105      	bne.n	808374a <_ZN5Print5printIiLi0EEEjT_i+0x2c>
            t = print('-');
 808373e:	212d      	movs	r1, #45	; 0x2d
 8083740:	f001 fbd0 	bl	8084ee4 <_ZN5Print5printEc>
            val = -n;
 8083744:	4261      	negs	r1, r4
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
 8083746:	4606      	mov	r6, r0
            val = -n;
 8083748:	e001      	b.n	808374e <_ZN5Print5printIiLi0EEEjT_i+0x30>
        } else {
            val = n;
 808374a:	4621      	mov	r1, r4
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
 808374c:	2600      	movs	r6, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 808374e:	b2ea      	uxtb	r2, r5
 8083750:	4638      	mov	r0, r7
 8083752:	f001 fbe0 	bl	8084f16 <_ZN5Print11printNumberEmh>
    }
}
 8083756:	4430      	add	r0, r6
 8083758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808375c <_ZN5Print7printlnIiLi0EEEjT_i>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
 808375c:	b538      	push	{r3, r4, r5, lr}
 808375e:	4605      	mov	r5, r0
        size_t n = print(b, base);
 8083760:	f7ff ffdd 	bl	808371e <_ZN5Print5printIiLi0EEEjT_i>
 8083764:	4604      	mov	r4, r0
        n += println();
 8083766:	4628      	mov	r0, r5
 8083768:	f001 fbbf 	bl	8084eea <_ZN5Print7printlnEv>
        return n;
    }
 808376c:	4420      	add	r0, r4
 808376e:	bd38      	pop	{r3, r4, r5, pc}

08083770 <_ZN12UbloxM8Q_GPS5parseEPhii>:
UbloxM8Q_GPS::parse(uint8_t *msg, int type, int length)
{
    int typeAcked;

    // type is combination of class and id
    switch(type) {
 8083770:	f240 1309 	movw	r3, #265	; 0x109
 8083774:	429a      	cmp	r2, r3
}


void
UbloxM8Q_GPS::parse(uint8_t *msg, int type, int length)
{
 8083776:	b570      	push	{r4, r5, r6, lr}
 8083778:	4606      	mov	r6, r0
 808377a:	460d      	mov	r5, r1
 808377c:	4614      	mov	r4, r2
    int typeAcked;

    // type is combination of class and id
    switch(type) {
 808377e:	d042      	beq.n	8083806 <_ZN12UbloxM8Q_GPS5parseEPhii+0x96>
 8083780:	f5b2 7f85 	cmp.w	r2, #266	; 0x10a
 8083784:	da0a      	bge.n	808379c <_ZN12UbloxM8Q_GPS5parseEPhii+0x2c>
 8083786:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 808378a:	d038      	beq.n	80837fe <_ZN12UbloxM8Q_GPS5parseEPhii+0x8e>
 808378c:	f240 1307 	movw	r3, #263	; 0x107
 8083790:	429a      	cmp	r2, r3
 8083792:	d13c      	bne.n	808380e <_ZN12UbloxM8Q_GPS5parseEPhii+0x9e>
	Serial.print("parse: Unknown type: ");
	Serial.println(type, HEX);
	showUbx(msg);
	break;
    }
}
 8083794:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	break;
    case NAV_PVT_TYPE:
//	Serial.print("parse: type: NAV_PVT_TYPE ");
//	Serial.println(type, HEX);
//	showUbx(msg);
	parsePVT(msg);
 8083798:	f7ff be7a 	b.w	8083490 <_ZN12UbloxM8Q_GPS8parsePVTEPh>
UbloxM8Q_GPS::parse(uint8_t *msg, int type, int length)
{
    int typeAcked;

    // type is combination of class and id
    switch(type) {
 808379c:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 80837a0:	d014      	beq.n	80837cc <_ZN12UbloxM8Q_GPS5parseEPhii+0x5c>
 80837a2:	f240 5301 	movw	r3, #1281	; 0x501
 80837a6:	429a      	cmp	r2, r3
 80837a8:	d131      	bne.n	808380e <_ZN12UbloxM8Q_GPS5parseEPhii+0x9e>
  // type is the class and id combined
  int ubxMsgType(uint8_t *m) { return((m[CLASS_IDX]<<8)|(m[ID_IDX]));}
  // For extracting type from the payload of msg, parameter points into payload
  int ubxMsgParm(uint8_t *m) { return((m[0]<<8)|(m[1]));}
 80837aa:	79cb      	ldrb	r3, [r1, #7]
 80837ac:	798c      	ldrb	r4, [r1, #6]
    case ACK_TYPE:
	typeAcked = ubxMsgParm(&msg[PAYLOAD_IDX]);
	ackedMsg.setAck(typeAcked);
 80837ae:	4820      	ldr	r0, [pc, #128]	; (8083830 <_ZN12UbloxM8Q_GPS5parseEPhii+0xc0>)
 80837b0:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
 80837b4:	4621      	mov	r1, r4
 80837b6:	f7ff ff8c 	bl	80836d2 <_ZN8AckedMsg6setAckEi>
	Serial.print("parse: ACK_TYPE: ");
 80837ba:	f003 fad7 	bl	8086d6c <_Z16_fetch_usbserialv>
 80837be:	491d      	ldr	r1, [pc, #116]	; (8083834 <_ZN12UbloxM8Q_GPS5parseEPhii+0xc4>)
 80837c0:	f001 fb8c 	bl	8084edc <_ZN5Print5printEPKc>
	Serial.print("message acked: ");
 80837c4:	f003 fad2 	bl	8086d6c <_Z16_fetch_usbserialv>
 80837c8:	491b      	ldr	r1, [pc, #108]	; (8083838 <_ZN12UbloxM8Q_GPS5parseEPhii+0xc8>)
 80837ca:	e00f      	b.n	80837ec <_ZN12UbloxM8Q_GPS5parseEPhii+0x7c>
 80837cc:	79cb      	ldrb	r3, [r1, #7]
 80837ce:	798c      	ldrb	r4, [r1, #6]
	Serial.println(typeAcked, HEX);
	break;
    case NAK_TYPE:
	typeAcked = ubxMsgParm(&msg[PAYLOAD_IDX]);
	ackedMsg.clearAck(typeAcked);
 80837d0:	4817      	ldr	r0, [pc, #92]	; (8083830 <_ZN12UbloxM8Q_GPS5parseEPhii+0xc0>)
 80837d2:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
 80837d6:	4621      	mov	r1, r4
 80837d8:	f7ff ff89 	bl	80836ee <_ZN8AckedMsg8clearAckEi>
	Serial.print("parse: NAK_TYPE: ");
 80837dc:	f003 fac6 	bl	8086d6c <_Z16_fetch_usbserialv>
 80837e0:	4916      	ldr	r1, [pc, #88]	; (808383c <_ZN12UbloxM8Q_GPS5parseEPhii+0xcc>)
 80837e2:	f001 fb7b 	bl	8084edc <_ZN5Print5printEPKc>
	Serial.print("message NAKed: ");
 80837e6:	f003 fac1 	bl	8086d6c <_Z16_fetch_usbserialv>
 80837ea:	4915      	ldr	r1, [pc, #84]	; (8083840 <_ZN12UbloxM8Q_GPS5parseEPhii+0xd0>)
 80837ec:	f001 fb76 	bl	8084edc <_ZN5Print5printEPKc>
	Serial.println(typeAcked, HEX);
 80837f0:	f003 fabc 	bl	8086d6c <_Z16_fetch_usbserialv>
 80837f4:	2210      	movs	r2, #16
 80837f6:	4621      	mov	r1, r4
 80837f8:	f7ff ffb0 	bl	808375c <_ZN5Print7printlnIiLi0EEEjT_i>
	break;
 80837fc:	bd70      	pop	{r4, r5, r6, pc}
	Serial.print("parse: Unknown type: ");
	Serial.println(type, HEX);
	showUbx(msg);
	break;
    }
}
 80837fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	break;
    case NAV_POSLLH_TYPE:
//	Serial.print("parse: type: NAV_POSLLH_TYPE ");
//	Serial.println(type, HEX);
	// showUbx(msg);
	parsePOSLLH(msg);
 8083802:	f7ff bdfd 	b.w	8083400 <_ZN12UbloxM8Q_GPS11parsePOSLLHEPh>
	Serial.print("parse: Unknown type: ");
	Serial.println(type, HEX);
	showUbx(msg);
	break;
    }
}
 8083806:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	break;
    case NAV_ODO_TYPE:
//	Serial.print("parse: type: NAV_ODO_TYPE ");
//	Serial.println(type, HEX);
	// showUbx(msg);
	parseODO(msg);
 808380a:	f7ff bf1f 	b.w	808364c <_ZN12UbloxM8Q_GPS8parseODOEPh>
	break;
    default:
	Serial.print("parse: Unknown type: ");
 808380e:	f003 faad 	bl	8086d6c <_Z16_fetch_usbserialv>
 8083812:	490c      	ldr	r1, [pc, #48]	; (8083844 <_ZN12UbloxM8Q_GPS5parseEPhii+0xd4>)
 8083814:	f001 fb62 	bl	8084edc <_ZN5Print5printEPKc>
	Serial.println(type, HEX);
 8083818:	f003 faa8 	bl	8086d6c <_Z16_fetch_usbserialv>
 808381c:	4621      	mov	r1, r4
 808381e:	2210      	movs	r2, #16
 8083820:	f7ff ff9c 	bl	808375c <_ZN5Print7printlnIiLi0EEEjT_i>
	showUbx(msg);
 8083824:	4629      	mov	r1, r5
 8083826:	4630      	mov	r0, r6
	break;
    }
}
 8083828:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	parseODO(msg);
	break;
    default:
	Serial.print("parse: Unknown type: ");
	Serial.println(type, HEX);
	showUbx(msg);
 808382c:	f7ff bdae 	b.w	808338c <_ZN12UbloxM8Q_GPS7showUbxEPh>
 8083830:	200003ac 	.word	0x200003ac
 8083834:	0808aec1 	.word	0x0808aec1
 8083838:	0808aed3 	.word	0x0808aed3
 808383c:	0808aee3 	.word	0x0808aee3
 8083840:	0808aef5 	.word	0x0808aef5
 8083844:	0808af05 	.word	0x0808af05

08083848 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_>:
//    Serial.print("odoAcc: ");
//    Serial.println(odoAcc);
}
enum ubxReturn
UbloxM8Q_GPS::readUBXmsg(uint8_t *msg, int *type, int *length)
{
 8083848:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    static int i;
    uint32_t cur;
    static uint32_t startTime;
    static bool firstTime = true;

    switch (state){
 808384c:	4e72      	ldr	r6, [pc, #456]	; (8083a18 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1d0>)
//    Serial.print("odoAcc: ");
//    Serial.println(odoAcc);
}
enum ubxReturn
UbloxM8Q_GPS::readUBXmsg(uint8_t *msg, int *type, int *length)
{
 808384e:	461c      	mov	r4, r3
    static int i;
    uint32_t cur;
    static uint32_t startTime;
    static bool firstTime = true;

    switch (state){
 8083850:	7833      	ldrb	r3, [r6, #0]
//    Serial.print("odoAcc: ");
//    Serial.println(odoAcc);
}
enum ubxReturn
UbloxM8Q_GPS::readUBXmsg(uint8_t *msg, int *type, int *length)
{
 8083852:	4680      	mov	r8, r0
 8083854:	460d      	mov	r5, r1
 8083856:	4691      	mov	r9, r2
    static int i;
    uint32_t cur;
    static uint32_t startTime;
    static bool firstTime = true;

    switch (state){
 8083858:	2b03      	cmp	r3, #3
 808385a:	f200 80d8 	bhi.w	8083a0e <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1c6>
 808385e:	e8df f003 	tbb	[pc, r3]
 8083862:	4c02      	.short	0x4c02
 8083864:	9b80      	.short	0x9b80
    case waitB5:
	if (firstTime){
 8083866:	4c6d      	ldr	r4, [pc, #436]	; (8083a1c <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1d4>)
 8083868:	7823      	ldrb	r3, [r4, #0]
 808386a:	b12b      	cbz	r3, 8083878 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x30>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 808386c:	f000 fc7a 	bl	8084164 <HAL_Timer_Get_Milli_Seconds>
	    startTime = millis();
 8083870:	4b6b      	ldr	r3, [pc, #428]	; (8083a20 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1d8>)
 8083872:	6018      	str	r0, [r3, #0]
	    firstTime = false;
 8083874:	2300      	movs	r3, #0
 8083876:	7023      	strb	r3, [r4, #0]
	}
	if(Serial1.available()){
 8083878:	f003 fc0a 	bl	8087090 <_Z22__fetch_global_Serial1v>
 808387c:	6803      	ldr	r3, [r0, #0]
 808387e:	691b      	ldr	r3, [r3, #16]
 8083880:	4798      	blx	r3
 8083882:	b1c8      	cbz	r0, 80838b8 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x70>
	    msg[0] = Serial1.read();
 8083884:	f003 fc04 	bl	8087090 <_Z22__fetch_global_Serial1v>
 8083888:	6803      	ldr	r3, [r0, #0]
 808388a:	695b      	ldr	r3, [r3, #20]
 808388c:	4798      	blx	r3
 808388e:	b2c0      	uxtb	r0, r0
	    if (msg[0] == 0xb5){
 8083890:	28b5      	cmp	r0, #181	; 0xb5
	if (firstTime){
	    startTime = millis();
	    firstTime = false;
	}
	if(Serial1.available()){
	    msg[0] = Serial1.read();
 8083892:	7028      	strb	r0, [r5, #0]
	    if (msg[0] == 0xb5){
 8083894:	d105      	bne.n	80838a2 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x5a>
		i = 1;
 8083896:	4a63      	ldr	r2, [pc, #396]	; (8083a24 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1dc>)
 8083898:	2301      	movs	r3, #1
 808389a:	6013      	str	r3, [r2, #0]
		state = ubxLength;
 808389c:	7033      	strb	r3, [r6, #0]
		firstTime = true;
 808389e:	7023      	strb	r3, [r4, #0]
 80838a0:	e00a      	b.n	80838b8 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x70>
	    } else {
		Serial.print(">");
 80838a2:	f003 fa63 	bl	8086d6c <_Z16_fetch_usbserialv>
 80838a6:	4960      	ldr	r1, [pc, #384]	; (8083a28 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1e0>)
 80838a8:	f001 fb18 	bl	8084edc <_ZN5Print5printEPKc>
		Serial.print(msg[0], HEX);
 80838ac:	f003 fa5e 	bl	8086d6c <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80838b0:	2210      	movs	r2, #16
 80838b2:	7829      	ldrb	r1, [r5, #0]
 80838b4:	f001 fb2f 	bl	8084f16 <_ZN5Print11printNumberEmh>
 80838b8:	f000 fc54 	bl	8084164 <HAL_Timer_Get_Milli_Seconds>
	    }
	}
	cur = millis();
	// its supposed to be running. Give up after awhile
	if ((state == waitB5) && ((cur - startTime)> ubxWatchdog)){
 80838bc:	7834      	ldrb	r4, [r6, #0]
 80838be:	2c00      	cmp	r4, #0
 80838c0:	f040 80a5 	bne.w	8083a0e <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1c6>
 80838c4:	4b56      	ldr	r3, [pc, #344]	; (8083a20 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1d8>)
 80838c6:	681b      	ldr	r3, [r3, #0]
 80838c8:	1ac0      	subs	r0, r0, r3
 80838ca:	4b58      	ldr	r3, [pc, #352]	; (8083a2c <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1e4>)
 80838cc:	681b      	ldr	r3, [r3, #0]
 80838ce:	4298      	cmp	r0, r3
 80838d0:	f240 809d 	bls.w	8083a0e <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1c6>
	    void (* resetFunc) (void) = 0;
	    Serial.println("Tired of waiting for the GPS. I'm going shut it off and reboot.");
 80838d4:	f003 fa4a 	bl	8086d6c <_Z16_fetch_usbserialv>
 80838d8:	4955      	ldr	r1, [pc, #340]	; (8083a30 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1e8>)
 80838da:	f001 fb12 	bl	8084f02 <_ZN5Print7printlnEPKc>
	    delay(2000);
 80838de:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80838e2:	f002 fd19 	bl	8086318 <delay>
	    digitalWrite(D6,HIGH);
 80838e6:	2101      	movs	r1, #1
 80838e8:	2006      	movs	r0, #6
 80838ea:	f003 ff5e 	bl	80877aa <digitalWrite>
	    delay(2000);
 80838ee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80838f2:	f002 fd11 	bl	8086318 <delay>
	    resetFunc();
 80838f6:	47a0      	blx	r4
 80838f8:	e089      	b.n	8083a0e <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1c6>
	}
	return ubxPENDING;
	break;
    case ubxLength:
	// Read header, class, id, length
	if(Serial1.available()){
 80838fa:	f003 fbc9 	bl	8087090 <_Z22__fetch_global_Serial1v>
 80838fe:	6803      	ldr	r3, [r0, #0]
 8083900:	4f48      	ldr	r7, [pc, #288]	; (8083a24 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1dc>)
 8083902:	691b      	ldr	r3, [r3, #16]
 8083904:	4798      	blx	r3
 8083906:	b158      	cbz	r0, 8083920 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0xd8>
	    msg[i] = Serial1.read();
 8083908:	f8d7 8000 	ldr.w	r8, [r7]
 808390c:	f003 fbc0 	bl	8087090 <_Z22__fetch_global_Serial1v>
 8083910:	6803      	ldr	r3, [r0, #0]
 8083912:	695b      	ldr	r3, [r3, #20]
 8083914:	4798      	blx	r3
	    i++;
 8083916:	683b      	ldr	r3, [r7, #0]
	return ubxPENDING;
	break;
    case ubxLength:
	// Read header, class, id, length
	if(Serial1.available()){
	    msg[i] = Serial1.read();
 8083918:	f805 0008 	strb.w	r0, [r5, r8]
	    i++;
 808391c:	3301      	adds	r3, #1
 808391e:	603b      	str	r3, [r7, #0]
	}
	if (i == 6){ // read all the header
 8083920:	683b      	ldr	r3, [r7, #0]
 8083922:	2b06      	cmp	r3, #6
 8083924:	d173      	bne.n	8083a0e <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1c6>

  // set when receiver enabled
  bool gpsOn;
  // length is 2 bytes, little endian
  int ubx_length(uint8_t *m) {
        return( ((m[LENGTH_IDX])+(m[LENGTH_IDX+1]*256)));}
 8083926:	796a      	ldrb	r2, [r5, #5]
 8083928:	792b      	ldrb	r3, [r5, #4]
 808392a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	    *length = ubx_length(msg);
	    if ( *length > (256 - 8) ){
 808392e:	2bf8      	cmp	r3, #248	; 0xf8
	if(Serial1.available()){
	    msg[i] = Serial1.read();
	    i++;
	}
	if (i == 6){ // read all the header
	    *length = ubx_length(msg);
 8083930:	6023      	str	r3, [r4, #0]
	    if ( *length > (256 - 8) ){
 8083932:	dd0e      	ble.n	8083952 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x10a>
		Serial.print("readUBXmsg bad length: ");
 8083934:	f003 fa1a 	bl	8086d6c <_Z16_fetch_usbserialv>
 8083938:	493e      	ldr	r1, [pc, #248]	; (8083a34 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1ec>)
 808393a:	f001 facf 	bl	8084edc <_ZN5Print5printEPKc>
		Serial.println(*length);
 808393e:	f003 fa15 	bl	8086d6c <_Z16_fetch_usbserialv>
 8083942:	220a      	movs	r2, #10
 8083944:	6821      	ldr	r1, [r4, #0]
 8083946:	f7ff ff09 	bl	808375c <_ZN5Print7printlnIiLi0EEEjT_i>
		state = waitB5;
 808394a:	2300      	movs	r3, #0
 808394c:	7033      	strb	r3, [r6, #0]
		return ubxBAD_LENGTH;
 808394e:	2002      	movs	r0, #2
 8083950:	e05e      	b.n	8083a10 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1c8>
	    } else {
		*type = ubxMsgType(msg);
 8083952:	78aa      	ldrb	r2, [r5, #2]
 8083954:	78eb      	ldrb	r3, [r5, #3]
 8083956:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 808395a:	f8c9 3000 	str.w	r3, [r9]
		state = payload;
 808395e:	2302      	movs	r3, #2
 8083960:	e018      	b.n	8083994 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x14c>
	    }
	}
	return ubxPENDING;
	break;
    case payload:
	if(Serial1.available()){
 8083962:	f003 fb95 	bl	8087090 <_Z22__fetch_global_Serial1v>
 8083966:	6803      	ldr	r3, [r0, #0]
 8083968:	4f2e      	ldr	r7, [pc, #184]	; (8083a24 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1dc>)
 808396a:	691b      	ldr	r3, [r3, #16]
 808396c:	4798      	blx	r3
 808396e:	b158      	cbz	r0, 8083988 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x140>
	    msg[i] = Serial1.read();
 8083970:	f8d7 8000 	ldr.w	r8, [r7]
 8083974:	f003 fb8c 	bl	8087090 <_Z22__fetch_global_Serial1v>
 8083978:	6803      	ldr	r3, [r0, #0]
 808397a:	695b      	ldr	r3, [r3, #20]
 808397c:	4798      	blx	r3
	    i++;
 808397e:	683b      	ldr	r3, [r7, #0]
	}
	return ubxPENDING;
	break;
    case payload:
	if(Serial1.available()){
	    msg[i] = Serial1.read();
 8083980:	f805 0008 	strb.w	r0, [r5, r8]
	    i++;
 8083984:	3301      	adds	r3, #1
 8083986:	603b      	str	r3, [r7, #0]
	}
	if ( i == (6 + *length)){
 8083988:	6823      	ldr	r3, [r4, #0]
 808398a:	683a      	ldr	r2, [r7, #0]
 808398c:	3306      	adds	r3, #6
 808398e:	4293      	cmp	r3, r2
 8083990:	d13d      	bne.n	8083a0e <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1c6>
	    state = checksum;
 8083992:	2303      	movs	r3, #3
 8083994:	7033      	strb	r3, [r6, #0]
 8083996:	e03a      	b.n	8083a0e <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1c6>
	}
	return ubxPENDING;
	break;
    case checksum:
	if(Serial1.available()){
 8083998:	f003 fb7a 	bl	8087090 <_Z22__fetch_global_Serial1v>
 808399c:	6803      	ldr	r3, [r0, #0]
 808399e:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8083a24 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1dc>
 80839a2:	691b      	ldr	r3, [r3, #16]
 80839a4:	4798      	blx	r3
 80839a6:	b160      	cbz	r0, 80839c2 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x17a>
	    msg[i] = Serial1.read();
 80839a8:	f8d9 7000 	ldr.w	r7, [r9]
 80839ac:	f003 fb70 	bl	8087090 <_Z22__fetch_global_Serial1v>
 80839b0:	6803      	ldr	r3, [r0, #0]
 80839b2:	695b      	ldr	r3, [r3, #20]
 80839b4:	4798      	blx	r3
	    i++;
 80839b6:	f8d9 3000 	ldr.w	r3, [r9]
	}
	return ubxPENDING;
	break;
    case checksum:
	if(Serial1.available()){
	    msg[i] = Serial1.read();
 80839ba:	55e8      	strb	r0, [r5, r7]
	    i++;
 80839bc:	3301      	adds	r3, #1
 80839be:	f8c9 3000 	str.w	r3, [r9]
	}
	if ( i == (8 + *length)){
 80839c2:	6827      	ldr	r7, [r4, #0]
 80839c4:	f8d9 3000 	ldr.w	r3, [r9]
 80839c8:	3708      	adds	r7, #8
 80839ca:	429f      	cmp	r7, r3
 80839cc:	d11f      	bne.n	8083a0e <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1c6>
	    uint8_t ck_a, ck_b;
	    state = waitB5; // going to start over error or not
	    ubxCS(msg, &ck_a, &ck_b);
 80839ce:	f10d 0307 	add.w	r3, sp, #7
 80839d2:	f10d 0206 	add.w	r2, sp, #6
 80839d6:	4629      	mov	r1, r5
	    msg[i] = Serial1.read();
	    i++;
	}
	if ( i == (8 + *length)){
	    uint8_t ck_a, ck_b;
	    state = waitB5; // going to start over error or not
 80839d8:	2400      	movs	r4, #0
	    ubxCS(msg, &ck_a, &ck_b);
 80839da:	4640      	mov	r0, r8
	    if ( (msg[i-2] != ck_a) || (msg[i-1] != ck_b)){
 80839dc:	443d      	add	r5, r7
	    msg[i] = Serial1.read();
	    i++;
	}
	if ( i == (8 + *length)){
	    uint8_t ck_a, ck_b;
	    state = waitB5; // going to start over error or not
 80839de:	7034      	strb	r4, [r6, #0]
	    ubxCS(msg, &ck_a, &ck_b);
 80839e0:	f7ff fcae 	bl	8083340 <_ZN12UbloxM8Q_GPS5ubxCSEPhS0_S0_>
	    if ( (msg[i-2] != ck_a) || (msg[i-1] != ck_b)){
 80839e4:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 80839e8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80839ec:	429a      	cmp	r2, r3
 80839ee:	d105      	bne.n	80839fc <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1b4>
 80839f0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80839f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80839f8:	429a      	cmp	r2, r3
 80839fa:	d006      	beq.n	8083a0a <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1c2>
		Serial.println("readUBXmsg bad check sum ");
 80839fc:	f003 f9b6 	bl	8086d6c <_Z16_fetch_usbserialv>
 8083a00:	490d      	ldr	r1, [pc, #52]	; (8083a38 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1f0>)
 8083a02:	f001 fa7e 	bl	8084f02 <_ZN5Print7printlnEPKc>
		return ubxBAD_CHECK_SUM;
 8083a06:	2003      	movs	r0, #3
 8083a08:	e002      	b.n	8083a10 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1c8>
	    }
	    // c'est tout
	    return ubxSUCCESS;
 8083a0a:	4620      	mov	r0, r4
 8083a0c:	e000      	b.n	8083a10 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_+0x1c8>
	return ubxPENDING;
	break;
    default:
	break;
    }
    return ubxPENDING;
 8083a0e:	2001      	movs	r0, #1
}
 8083a10:	b003      	add	sp, #12
 8083a12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8083a16:	bf00      	nop
 8083a18:	20000390 	.word	0x20000390
 8083a1c:	200000ab 	.word	0x200000ab
 8083a20:	20000388 	.word	0x20000388
 8083a24:	200003a8 	.word	0x200003a8
 8083a28:	0808af1b 	.word	0x0808af1b
 8083a2c:	20000030 	.word	0x20000030
 8083a30:	0808af1d 	.word	0x0808af1d
 8083a34:	0808af5d 	.word	0x0808af5d
 8083a38:	0808af75 	.word	0x0808af75

08083a3c <_ZN12UbloxM8Q_GPS4readEv>:
// Must be called repeatedly. It does not return info about what was
// read. Caller must check other results such as data access methods or
// ackedMsg().
void
UbloxM8Q_GPS::read()
{
 8083a3c:	b570      	push	{r4, r5, r6, lr}
    uint8_t msg[256];
    static int type, length;
    enum ubxReturn r;

    if (gpsOn){
 8083a3e:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
// Must be called repeatedly. It does not return info about what was
// read. Caller must check other results such as data access methods or
// ackedMsg().
void
UbloxM8Q_GPS::read()
{
 8083a42:	b0c0      	sub	sp, #256	; 0x100
 8083a44:	4604      	mov	r4, r0
    uint8_t msg[256];
    static int type, length;
    enum ubxReturn r;

    if (gpsOn){
 8083a46:	b323      	cbz	r3, 8083a92 <_ZN12UbloxM8Q_GPS4readEv+0x56>
	while(Serial1.available()){
	    r = readUBXmsg(msg, &type, &length);
 8083a48:	4e13      	ldr	r6, [pc, #76]	; (8083a98 <_ZN12UbloxM8Q_GPS4readEv+0x5c>)
    uint8_t msg[256];
    static int type, length;
    enum ubxReturn r;

    if (gpsOn){
	while(Serial1.available()){
 8083a4a:	f003 fb21 	bl	8087090 <_Z22__fetch_global_Serial1v>
 8083a4e:	6803      	ldr	r3, [r0, #0]
 8083a50:	691b      	ldr	r3, [r3, #16]
 8083a52:	4798      	blx	r3
 8083a54:	b1e8      	cbz	r0, 8083a92 <_ZN12UbloxM8Q_GPS4readEv+0x56>
	    r = readUBXmsg(msg, &type, &length);
 8083a56:	4d11      	ldr	r5, [pc, #68]	; (8083a9c <_ZN12UbloxM8Q_GPS4readEv+0x60>)
 8083a58:	4b0f      	ldr	r3, [pc, #60]	; (8083a98 <_ZN12UbloxM8Q_GPS4readEv+0x5c>)
 8083a5a:	462a      	mov	r2, r5
 8083a5c:	4669      	mov	r1, sp
 8083a5e:	4620      	mov	r0, r4
 8083a60:	f7ff fef2 	bl	8083848 <_ZN12UbloxM8Q_GPS10readUBXmsgEPhPiS1_>
	    if (r == ubxBAD_LENGTH){
 8083a64:	2802      	cmp	r0, #2
 8083a66:	d103      	bne.n	8083a70 <_ZN12UbloxM8Q_GPS4readEv+0x34>
		Serial.println("gps.read got ubxBAD_LENGTH");
 8083a68:	f003 f980 	bl	8086d6c <_Z16_fetch_usbserialv>
 8083a6c:	490c      	ldr	r1, [pc, #48]	; (8083aa0 <_ZN12UbloxM8Q_GPS4readEv+0x64>)
 8083a6e:	e004      	b.n	8083a7a <_ZN12UbloxM8Q_GPS4readEv+0x3e>
	    }
	    if (r == ubxBAD_CHECK_SUM){
 8083a70:	2803      	cmp	r0, #3
 8083a72:	d105      	bne.n	8083a80 <_ZN12UbloxM8Q_GPS4readEv+0x44>
		Serial.println("gps.read got ubxBAD_CHECK_SUM");
 8083a74:	f003 f97a 	bl	8086d6c <_Z16_fetch_usbserialv>
 8083a78:	490a      	ldr	r1, [pc, #40]	; (8083aa4 <_ZN12UbloxM8Q_GPS4readEv+0x68>)
 8083a7a:	f001 fa42 	bl	8084f02 <_ZN5Print7printlnEPKc>
 8083a7e:	e7e4      	b.n	8083a4a <_ZN12UbloxM8Q_GPS4readEv+0xe>
	    }
	    if (r == ubxSUCCESS){
 8083a80:	2800      	cmp	r0, #0
 8083a82:	d1e2      	bne.n	8083a4a <_ZN12UbloxM8Q_GPS4readEv+0xe>
		// don't starve the cloud if we are getting frequent gps updates
		parse(msg, type, length);
 8083a84:	6833      	ldr	r3, [r6, #0]
 8083a86:	682a      	ldr	r2, [r5, #0]
 8083a88:	4669      	mov	r1, sp
 8083a8a:	4620      	mov	r0, r4
 8083a8c:	f7ff fe70 	bl	8083770 <_ZN12UbloxM8Q_GPS5parseEPhii>
 8083a90:	e7db      	b.n	8083a4a <_ZN12UbloxM8Q_GPS4readEv+0xe>
	    }
	    // else r == ubxPENDING, do nothing
	}
    }
}
 8083a92:	b040      	add	sp, #256	; 0x100
 8083a94:	bd70      	pop	{r4, r5, r6, pc}
 8083a96:	bf00      	nop
 8083a98:	2000038c 	.word	0x2000038c
 8083a9c:	20000394 	.word	0x20000394
 8083aa0:	0808af8f 	.word	0x0808af8f
 8083aa4:	0808afaa 	.word	0x0808afaa

08083aa8 <_ZN12UbloxM8Q_GPS8writeUBXEPh>:
//   for it, and it must be writable.
//   Calculates the check sum and writes the message, then checks for 
//   the ACK.
enum ubxReturn
UbloxM8Q_GPS::writeUBX(uint8_t *msg) // send a ubx format command
{
 8083aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    static unsigned long prev;
    unsigned long cur;
    static int msgType;
    static bool sent = false;

    if (!sent){
 8083aac:	4d2b      	ldr	r5, [pc, #172]	; (8083b5c <_ZN12UbloxM8Q_GPS8writeUBXEPh+0xb4>)
//   for it, and it must be writable.
//   Calculates the check sum and writes the message, then checks for 
//   the ACK.
enum ubxReturn
UbloxM8Q_GPS::writeUBX(uint8_t *msg) // send a ubx format command
{
 8083aae:	4680      	mov	r8, r0
    static unsigned long prev;
    unsigned long cur;
    static int msgType;
    static bool sent = false;

    if (!sent){
 8083ab0:	782b      	ldrb	r3, [r5, #0]
//   for it, and it must be writable.
//   Calculates the check sum and writes the message, then checks for 
//   the ACK.
enum ubxReturn
UbloxM8Q_GPS::writeUBX(uint8_t *msg) // send a ubx format command
{
 8083ab2:	460c      	mov	r4, r1
 8083ab4:	462e      	mov	r6, r5
 8083ab6:	4f2a      	ldr	r7, [pc, #168]	; (8083b60 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0xb8>)
    static unsigned long prev;
    unsigned long cur;
    static int msgType;
    static bool sent = false;

    if (!sent){
 8083ab8:	2b00      	cmp	r3, #0
 8083aba:	d133      	bne.n	8083b24 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0x7c>
  // type is the class and id combined
  int ubxMsgType(uint8_t *m) { return((m[CLASS_IDX]<<8)|(m[ID_IDX]));}
 8083abc:	78e3      	ldrb	r3, [r4, #3]
 8083abe:	7889      	ldrb	r1, [r1, #2]
	msgType = ubxMsgType(msg);

	ackedMsg.clearAck(msgType);
 8083ac0:	4828      	ldr	r0, [pc, #160]	; (8083b64 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0xbc>)
 8083ac2:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
    unsigned long cur;
    static int msgType;
    static bool sent = false;

    if (!sent){
	msgType = ubxMsgType(msg);
 8083ac6:	6039      	str	r1, [r7, #0]

	ackedMsg.clearAck(msgType);
 8083ac8:	f7ff fe11 	bl	80836ee <_ZN8AckedMsg8clearAckEi>

	ubxAddCS(msg);
 8083acc:	4621      	mov	r1, r4
 8083ace:	4640      	mov	r0, r8
 8083ad0:	f7ff fc4e 	bl	8083370 <_ZN12UbloxM8Q_GPS8ubxAddCSEPh>
	Serial.print("writeUBX: type: "); Serial.println(msgType,HEX);
 8083ad4:	f003 f94a 	bl	8086d6c <_Z16_fetch_usbserialv>
 8083ad8:	4923      	ldr	r1, [pc, #140]	; (8083b68 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0xc0>)
 8083ada:	f001 f9ff 	bl	8084edc <_ZN5Print5printEPKc>
 8083ade:	f003 f945 	bl	8086d6c <_Z16_fetch_usbserialv>
 8083ae2:	6839      	ldr	r1, [r7, #0]

  // set when receiver enabled
  bool gpsOn;
  // length is 2 bytes, little endian
  int ubx_length(uint8_t *m) {
        return( ((m[LENGTH_IDX])+(m[LENGTH_IDX+1]*256)));}
 8083ae4:	4627      	mov	r7, r4
 8083ae6:	2210      	movs	r2, #16
 8083ae8:	f7ff fe38 	bl	808375c <_ZN5Print7printlnIiLi0EEEjT_i>
	showUbx(msg);
 8083aec:	4621      	mov	r1, r4
 8083aee:	4640      	mov	r0, r8
 8083af0:	f7ff fc4c 	bl	808338c <_ZN12UbloxM8Q_GPS7showUbxEPh>
 8083af4:	7965      	ldrb	r5, [r4, #5]
 8083af6:	7923      	ldrb	r3, [r4, #4]
 8083af8:	eb03 2505 	add.w	r5, r3, r5, lsl #8
	length = ubx_length(msg);
	// length is just the payload, add 6 for header and 2 for CS
	for (i = 0; i < length + 8; i++ ){
 8083afc:	3507      	adds	r5, #7
 8083afe:	1b3b      	subs	r3, r7, r4
 8083b00:	429d      	cmp	r5, r3
 8083b02:	db07      	blt.n	8083b14 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0x6c>
	    Serial1.write(msg[i]);
 8083b04:	f003 fac4 	bl	8087090 <_Z22__fetch_global_Serial1v>
 8083b08:	6803      	ldr	r3, [r0, #0]
 8083b0a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8083b0e:	689b      	ldr	r3, [r3, #8]
 8083b10:	4798      	blx	r3
 8083b12:	e7f4      	b.n	8083afe <_ZN12UbloxM8Q_GPS8writeUBXEPh+0x56>
 8083b14:	f000 fb26 	bl	8084164 <HAL_Timer_Get_Milli_Seconds>
	}
	prev = millis();
 8083b18:	4b14      	ldr	r3, [pc, #80]	; (8083b6c <_ZN12UbloxM8Q_GPS8writeUBXEPh+0xc4>)
 8083b1a:	6018      	str	r0, [r3, #0]
	sent = true;
 8083b1c:	2001      	movs	r0, #1
 8083b1e:	7030      	strb	r0, [r6, #0]
 8083b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else {
	read();
 8083b24:	f7ff ff8a 	bl	8083a3c <_ZN12UbloxM8Q_GPS4readEv>
	if (!ackedMsg.isAcked(msgType)){
 8083b28:	6839      	ldr	r1, [r7, #0]
 8083b2a:	480e      	ldr	r0, [pc, #56]	; (8083b64 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0xbc>)
 8083b2c:	f7ff fdeb 	bl	8083706 <_ZN8AckedMsg7isAckedEi>
 8083b30:	4604      	mov	r4, r0
 8083b32:	b958      	cbnz	r0, 8083b4c <_ZN12UbloxM8Q_GPS8writeUBXEPh+0xa4>
 8083b34:	f000 fb16 	bl	8084164 <HAL_Timer_Get_Milli_Seconds>
	    cur = millis();
	    if (cur - prev > 2000){
 8083b38:	4b0c      	ldr	r3, [pc, #48]	; (8083b6c <_ZN12UbloxM8Q_GPS8writeUBXEPh+0xc4>)
 8083b3a:	681b      	ldr	r3, [r3, #0]
 8083b3c:	1ac0      	subs	r0, r0, r3
 8083b3e:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8083b42:	d907      	bls.n	8083b54 <_ZN12UbloxM8Q_GPS8writeUBXEPh+0xac>
		sent = false;
 8083b44:	702c      	strb	r4, [r5, #0]
		return ubxNO_ACK;
 8083b46:	2004      	movs	r0, #4
 8083b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    }
	} else {
	    sent = false;
 8083b4c:	2000      	movs	r0, #0
 8083b4e:	7028      	strb	r0, [r5, #0]
	    return ubxSUCCESS;
 8083b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}
    }
    return ubxPENDING;
 8083b54:	2001      	movs	r0, #1
}
 8083b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8083b5a:	bf00      	nop
 8083b5c:	20000398 	.word	0x20000398
 8083b60:	200003a0 	.word	0x200003a0
 8083b64:	200003ac 	.word	0x200003ac
 8083b68:	0808afc8 	.word	0x0808afc8
 8083b6c:	2000039c 	.word	0x2000039c

08083b70 <_ZN12UbloxM8Q_GPS11sendCommandEPh>:


// Won't return until command is ACKed or an error is detected.
void
UbloxM8Q_GPS::sendCommand(uint8_t *msg) // send a ubx format command
{
 8083b70:	b538      	push	{r3, r4, r5, lr}
 8083b72:	4604      	mov	r4, r0
 8083b74:	460d      	mov	r5, r1

    ubxReturn r = ubxPENDING;
    while( r == ubxPENDING ){
	r = writeUBX(msg);
 8083b76:	4629      	mov	r1, r5
 8083b78:	4620      	mov	r0, r4
 8083b7a:	f7ff ff95 	bl	8083aa8 <_ZN12UbloxM8Q_GPS8writeUBXEPh>
void
UbloxM8Q_GPS::sendCommand(uint8_t *msg) // send a ubx format command
{

    ubxReturn r = ubxPENDING;
    while( r == ubxPENDING ){
 8083b7e:	2801      	cmp	r0, #1
 8083b80:	d0f9      	beq.n	8083b76 <_ZN12UbloxM8Q_GPS11sendCommandEPh+0x6>
	r = writeUBX(msg);
    }
    if (r == ubxBAD_LENGTH){
 8083b82:	2802      	cmp	r0, #2
 8083b84:	d103      	bne.n	8083b8e <_ZN12UbloxM8Q_GPS11sendCommandEPh+0x1e>
	Serial.println("gps.sendCommand got ubxBAD_LENGTH");
 8083b86:	f003 f8f1 	bl	8086d6c <_Z16_fetch_usbserialv>
 8083b8a:	4909      	ldr	r1, [pc, #36]	; (8083bb0 <_ZN12UbloxM8Q_GPS11sendCommandEPh+0x40>)
 8083b8c:	e00a      	b.n	8083ba4 <_ZN12UbloxM8Q_GPS11sendCommandEPh+0x34>
    }
    if (r == ubxBAD_CHECK_SUM){
 8083b8e:	2803      	cmp	r0, #3
 8083b90:	d103      	bne.n	8083b9a <_ZN12UbloxM8Q_GPS11sendCommandEPh+0x2a>
	Serial.println("gps.sendCommand got ubxBAD_CHECK_SUM");
 8083b92:	f003 f8eb 	bl	8086d6c <_Z16_fetch_usbserialv>
 8083b96:	4907      	ldr	r1, [pc, #28]	; (8083bb4 <_ZN12UbloxM8Q_GPS11sendCommandEPh+0x44>)
 8083b98:	e004      	b.n	8083ba4 <_ZN12UbloxM8Q_GPS11sendCommandEPh+0x34>
    }
    if (r == ubxNO_ACK){
 8083b9a:	2804      	cmp	r0, #4
 8083b9c:	d106      	bne.n	8083bac <_ZN12UbloxM8Q_GPS11sendCommandEPh+0x3c>
	Serial.println("gps.sendCommand got ubxNO_ACK");
 8083b9e:	f003 f8e5 	bl	8086d6c <_Z16_fetch_usbserialv>
 8083ba2:	4905      	ldr	r1, [pc, #20]	; (8083bb8 <_ZN12UbloxM8Q_GPS11sendCommandEPh+0x48>)
    }
}
 8083ba4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }
    if (r == ubxBAD_CHECK_SUM){
	Serial.println("gps.sendCommand got ubxBAD_CHECK_SUM");
    }
    if (r == ubxNO_ACK){
	Serial.println("gps.sendCommand got ubxNO_ACK");
 8083ba8:	f001 b9ab 	b.w	8084f02 <_ZN5Print7printlnEPKc>
 8083bac:	bd38      	pop	{r3, r4, r5, pc}
 8083bae:	bf00      	nop
 8083bb0:	0808afd9 	.word	0x0808afd9
 8083bb4:	0808affb 	.word	0x0808affb
 8083bb8:	0808b020 	.word	0x0808b020

08083bbc <_ZN12UbloxM8Q_GPS8resetODOEv>:
    sendCommand(rateMsg);
}
void
UbloxM8Q_GPS::resetODO(void)
{
    sendCommand(resetODOmsg);
 8083bbc:	4901      	ldr	r1, [pc, #4]	; (8083bc4 <_ZN12UbloxM8Q_GPS8resetODOEv+0x8>)
 8083bbe:	f7ff bfd7 	b.w	8083b70 <_ZN12UbloxM8Q_GPS11sendCommandEPh>
 8083bc2:	bf00      	nop
 8083bc4:	200000a3 	.word	0x200000a3

08083bc8 <_ZN12UbloxM8Q_GPS7setRateEti>:
    0x00,0x00  // CK_A,CK_B - checksum bytes, set by ubxCS(sentence)
};
void
UbloxM8Q_GPS::setRate(uint16_t measurement, int navigationSol)
{
    if (measurement < 10){ // I don't know what the real minimum is
 8083bc8:	2909      	cmp	r1, #9
    0x00,0x00, // timeRef  time system 0: UTC, 1: GPS, 3,4,5: GLOSNASS, BeiDou, Galileo
    0x00,0x00  // CK_A,CK_B - checksum bytes, set by ubxCS(sentence)
};
void
UbloxM8Q_GPS::setRate(uint16_t measurement, int navigationSol)
{
 8083bca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8083bce:	4607      	mov	r7, r0
 8083bd0:	460c      	mov	r4, r1
 8083bd2:	4615      	mov	r5, r2
    if (measurement < 10){ // I don't know what the real minimum is
 8083bd4:	d805      	bhi.n	8083be2 <_ZN12UbloxM8Q_GPS7setRateEti+0x1a>
	measurement = 10;
	Serial.println("setRate: changed measurement to minimum 10 ms");
 8083bd6:	f003 f8c9 	bl	8086d6c <_Z16_fetch_usbserialv>
 8083bda:	4928      	ldr	r1, [pc, #160]	; (8083c7c <_ZN12UbloxM8Q_GPS7setRateEti+0xb4>)
 8083bdc:	f001 f991 	bl	8084f02 <_ZN5Print7printlnEPKc>
};
void
UbloxM8Q_GPS::setRate(uint16_t measurement, int navigationSol)
{
    if (measurement < 10){ // I don't know what the real minimum is
	measurement = 10;
 8083be0:	240a      	movs	r4, #10
	Serial.println("setRate: changed measurement to minimum 10 ms");
    }
    // maximum has to fit in 16 bits and since that is the size of the input
    // parameter I don't have to check it.
    if ( navigationSol < 1 ){ 
 8083be2:	2d00      	cmp	r5, #0
 8083be4:	dc06      	bgt.n	8083bf4 <_ZN12UbloxM8Q_GPS7setRateEti+0x2c>
	navigationSol = 1;
	Serial.println("setRate: changed navigationSol to minimum 1");
 8083be6:	f003 f8c1 	bl	8086d6c <_Z16_fetch_usbserialv>
 8083bea:	4925      	ldr	r1, [pc, #148]	; (8083c80 <_ZN12UbloxM8Q_GPS7setRateEti+0xb8>)
 8083bec:	f001 f989 	bl	8084f02 <_ZN5Print7printlnEPKc>
	Serial.println("setRate: changed measurement to minimum 10 ms");
    }
    // maximum has to fit in 16 bits and since that is the size of the input
    // parameter I don't have to check it.
    if ( navigationSol < 1 ){ 
	navigationSol = 1;
 8083bf0:	2501      	movs	r5, #1
 8083bf2:	e007      	b.n	8083c04 <_ZN12UbloxM8Q_GPS7setRateEti+0x3c>
	Serial.println("setRate: changed navigationSol to minimum 1");
    }
    if ( navigationSol > 127 ){ 
 8083bf4:	2d7f      	cmp	r5, #127	; 0x7f
 8083bf6:	dd05      	ble.n	8083c04 <_ZN12UbloxM8Q_GPS7setRateEti+0x3c>
	navigationSol = 127;
	Serial.println("setRate: changed navigationSol to maximum 127");
 8083bf8:	f003 f8b8 	bl	8086d6c <_Z16_fetch_usbserialv>
 8083bfc:	4921      	ldr	r1, [pc, #132]	; (8083c84 <_ZN12UbloxM8Q_GPS7setRateEti+0xbc>)
 8083bfe:	f001 f980 	bl	8084f02 <_ZN5Print7printlnEPKc>
    if ( navigationSol < 1 ){ 
	navigationSol = 1;
	Serial.println("setRate: changed navigationSol to minimum 1");
    }
    if ( navigationSol > 127 ){ 
	navigationSol = 127;
 8083c02:	257f      	movs	r5, #127	; 0x7f
	Serial.println("setRate: changed navigationSol to maximum 127");
    }
    ubxWatchdog = measurement * navigationSol * 5;
 8083c04:	fb05 f304 	mul.w	r3, r5, r4
 8083c08:	4e1f      	ldr	r6, [pc, #124]	; (8083c88 <_ZN12UbloxM8Q_GPS7setRateEti+0xc0>)
 8083c0a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8083c0e:	6033      	str	r3, [r6, #0]
    Serial.print("setRate: measurement: ");
 8083c10:	f003 f8ac 	bl	8086d6c <_Z16_fetch_usbserialv>
 8083c14:	491d      	ldr	r1, [pc, #116]	; (8083c8c <_ZN12UbloxM8Q_GPS7setRateEti+0xc4>)
 8083c16:	f001 f961 	bl	8084edc <_ZN5Print5printEPKc>
    Serial.println(measurement);
 8083c1a:	f003 f8a7 	bl	8086d6c <_Z16_fetch_usbserialv>
 8083c1e:	4680      	mov	r8, r0
 8083c20:	220a      	movs	r2, #10
 8083c22:	4621      	mov	r1, r4
 8083c24:	f001 f977 	bl	8084f16 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
 8083c28:	4640      	mov	r0, r8
 8083c2a:	f001 f95e 	bl	8084eea <_ZN5Print7printlnEv>
    Serial.print("setRate: navigationSol: ");
 8083c2e:	f003 f89d 	bl	8086d6c <_Z16_fetch_usbserialv>
 8083c32:	4917      	ldr	r1, [pc, #92]	; (8083c90 <_ZN12UbloxM8Q_GPS7setRateEti+0xc8>)
 8083c34:	f001 f952 	bl	8084edc <_ZN5Print5printEPKc>
    Serial.println(navigationSol);
 8083c38:	f003 f898 	bl	8086d6c <_Z16_fetch_usbserialv>
 8083c3c:	220a      	movs	r2, #10
 8083c3e:	4629      	mov	r1, r5
 8083c40:	f7ff fd8c 	bl	808375c <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.print("setRate: ubxWatchdog: ");
 8083c44:	f003 f892 	bl	8086d6c <_Z16_fetch_usbserialv>
 8083c48:	4912      	ldr	r1, [pc, #72]	; (8083c94 <_ZN12UbloxM8Q_GPS7setRateEti+0xcc>)
 8083c4a:	f001 f947 	bl	8084edc <_ZN5Print5printEPKc>
    Serial.println(ubxWatchdog);
 8083c4e:	f003 f88d 	bl	8086d6c <_Z16_fetch_usbserialv>
 8083c52:	4680      	mov	r8, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 8083c54:	6831      	ldr	r1, [r6, #0]
 8083c56:	220a      	movs	r2, #10
 8083c58:	f001 f95d 	bl	8084f16 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
 8083c5c:	4640      	mov	r0, r8
 8083c5e:	f001 f944 	bl	8084eea <_ZN5Print7printlnEv>
    rateMsg[PAYLOAD_IDX] = (measurement & 0xFF); // little endian
 8083c62:	490d      	ldr	r1, [pc, #52]	; (8083c98 <_ZN12UbloxM8Q_GPS7setRateEti+0xd0>)
    rateMsg[PAYLOAD_IDX + 1] = ((measurement/256) & 0xFF);
    rateMsg[PAYLOAD_IDX + 2] = (navigationSol & 0xFF);
    rateMsg[PAYLOAD_IDX + 3] = 0;
 8083c64:	2300      	movs	r3, #0
    Serial.println(measurement);
    Serial.print("setRate: navigationSol: ");
    Serial.println(navigationSol);
    Serial.print("setRate: ubxWatchdog: ");
    Serial.println(ubxWatchdog);
    rateMsg[PAYLOAD_IDX] = (measurement & 0xFF); // little endian
 8083c66:	718c      	strb	r4, [r1, #6]
    rateMsg[PAYLOAD_IDX + 1] = ((measurement/256) & 0xFF);
 8083c68:	0a24      	lsrs	r4, r4, #8
 8083c6a:	71cc      	strb	r4, [r1, #7]
    rateMsg[PAYLOAD_IDX + 2] = (navigationSol & 0xFF);
 8083c6c:	720d      	strb	r5, [r1, #8]
    rateMsg[PAYLOAD_IDX + 3] = 0;
 8083c6e:	724b      	strb	r3, [r1, #9]

    sendCommand(rateMsg);
 8083c70:	4638      	mov	r0, r7
}
 8083c72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    rateMsg[PAYLOAD_IDX] = (measurement & 0xFF); // little endian
    rateMsg[PAYLOAD_IDX + 1] = ((measurement/256) & 0xFF);
    rateMsg[PAYLOAD_IDX + 2] = (navigationSol & 0xFF);
    rateMsg[PAYLOAD_IDX + 3] = 0;

    sendCommand(rateMsg);
 8083c76:	f7ff bf7b 	b.w	8083b70 <_ZN12UbloxM8Q_GPS11sendCommandEPh>
 8083c7a:	bf00      	nop
 8083c7c:	0808b0e4 	.word	0x0808b0e4
 8083c80:	0808b112 	.word	0x0808b112
 8083c84:	0808b13e 	.word	0x0808b13e
 8083c88:	20000030 	.word	0x20000030
 8083c8c:	0808b16c 	.word	0x0808b16c
 8083c90:	0808b183 	.word	0x0808b183
 8083c94:	0808b19c 	.word	0x0808b19c
 8083c98:	20000050 	.word	0x20000050

08083c9c <_ZN12UbloxM8Q_GPS11reportErrorEi9ubxReturn>:
}

// report error from begin()
void
UbloxM8Q_GPS::reportError(int state, enum ubxReturn ret)
{
 8083c9c:	b538      	push	{r3, r4, r5, lr}
 8083c9e:	460c      	mov	r4, r1
 8083ca0:	4615      	mov	r5, r2
    Serial.print("begin failed, state: ");
 8083ca2:	f003 f863 	bl	8086d6c <_Z16_fetch_usbserialv>
 8083ca6:	490d      	ldr	r1, [pc, #52]	; (8083cdc <_ZN12UbloxM8Q_GPS11reportErrorEi9ubxReturn+0x40>)
 8083ca8:	f001 f918 	bl	8084edc <_ZN5Print5printEPKc>
    Serial.print(state);
 8083cac:	f003 f85e 	bl	8086d6c <_Z16_fetch_usbserialv>
 8083cb0:	220a      	movs	r2, #10
 8083cb2:	4621      	mov	r1, r4
 8083cb4:	f7ff fd33 	bl	808371e <_ZN5Print5printIiLi0EEEjT_i>
    Serial.print(" error: ");
 8083cb8:	f003 f858 	bl	8086d6c <_Z16_fetch_usbserialv>
 8083cbc:	4908      	ldr	r1, [pc, #32]	; (8083ce0 <_ZN12UbloxM8Q_GPS11reportErrorEi9ubxReturn+0x44>)
 8083cbe:	f001 f90d 	bl	8084edc <_ZN5Print5printEPKc>
    Serial.println(ret);
 8083cc2:	f003 f853 	bl	8086d6c <_Z16_fetch_usbserialv>
 8083cc6:	4604      	mov	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 8083cc8:	4629      	mov	r1, r5
 8083cca:	220a      	movs	r2, #10
 8083ccc:	f001 f923 	bl	8084f16 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
 8083cd0:	4620      	mov	r0, r4
}
 8083cd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8083cd6:	f001 b908 	b.w	8084eea <_ZN5Print7printlnEv>
 8083cda:	bf00      	nop
 8083cdc:	0808b1b3 	.word	0x0808b1b3
 8083ce0:	0808b1c9 	.word	0x0808b1c9

08083ce4 <_ZN12UbloxM8Q_GPS5beginEv>:
// to writeUBX(yourMsg) to the message you have defined. If you turn on a new
// report you also have to write a parsing routine for it and call the parser
// from UbloxM8Q_GPS::parse().
enum ubxReturn
UbloxM8Q_GPS::begin()
{
 8083ce4:	b570      	push	{r4, r5, r6, lr}
    static int state = 0;
    enum ubxReturn ret;

    switch (state){
 8083ce6:	4d1b      	ldr	r5, [pc, #108]	; (8083d54 <_ZN12UbloxM8Q_GPS5beginEv+0x70>)
// to writeUBX(yourMsg) to the message you have defined. If you turn on a new
// report you also have to write a parsing routine for it and call the parser
// from UbloxM8Q_GPS::parse().
enum ubxReturn
UbloxM8Q_GPS::begin()
{
 8083ce8:	4606      	mov	r6, r0
    static int state = 0;
    enum ubxReturn ret;

    switch (state){
 8083cea:	682b      	ldr	r3, [r5, #0]
 8083cec:	2b05      	cmp	r3, #5
 8083cee:	d82b      	bhi.n	8083d48 <_ZN12UbloxM8Q_GPS5beginEv+0x64>
 8083cf0:	e8df f003 	tbb	[pc, r3]
 8083cf4:	0f0d0b03 	.word	0x0f0d0b03
 8083cf8:	1917      	.short	0x1917
	case 0:
	    // Read the version report from the receiver, then turn off
	    // NMEA ascii messages. We still get some ascii that gets
	    // thrown out by readUBXmsg. The first periodic ubx message gets 
	    // corrupted but, not to worry, it sends more soon.
	    readVer();
 8083cfa:	f7ff fcbb 	bl	8083674 <_ZN12UbloxM8Q_GPS7readVerEv>
	    gpsOn = true;
 8083cfe:	2301      	movs	r3, #1
 8083d00:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60
	    state++;
 8083d04:	682b      	ldr	r3, [r5, #0]
 8083d06:	3301      	adds	r3, #1
 8083d08:	602b      	str	r3, [r5, #0]
	    // fall through to next case

	case 1:
	    ret = writeUBX(cfgRate) ;
 8083d0a:	4913      	ldr	r1, [pc, #76]	; (8083d58 <_ZN12UbloxM8Q_GPS5beginEv+0x74>)
 8083d0c:	e002      	b.n	8083d14 <_ZN12UbloxM8Q_GPS5beginEv+0x30>
		return ret;
	    }
	    return ubxPENDING;
	break;
	case 2:
	    ret = writeUBX(enablePVT) ;
 8083d0e:	4913      	ldr	r1, [pc, #76]	; (8083d5c <_ZN12UbloxM8Q_GPS5beginEv+0x78>)
 8083d10:	e000      	b.n	8083d14 <_ZN12UbloxM8Q_GPS5beginEv+0x30>
		return ret;
	    }
	    return ubxPENDING;
	break;
	case 3:
	    ret = writeUBX(cfgNav5) ;
 8083d12:	4913      	ldr	r1, [pc, #76]	; (8083d60 <_ZN12UbloxM8Q_GPS5beginEv+0x7c>)
 8083d14:	4630      	mov	r0, r6
 8083d16:	f7ff fec7 	bl	8083aa8 <_ZN12UbloxM8Q_GPS8writeUBXEPh>
	    if ( ret == ubxPENDING){
 8083d1a:	2801      	cmp	r0, #1
		return ret;
	    }
	    return ubxPENDING;
	break;
	case 3:
	    ret = writeUBX(cfgNav5) ;
 8083d1c:	4604      	mov	r4, r0
	    if ( ret == ubxPENDING){
 8083d1e:	d104      	bne.n	8083d2a <_ZN12UbloxM8Q_GPS5beginEv+0x46>
 8083d20:	e007      	b.n	8083d32 <_ZN12UbloxM8Q_GPS5beginEv+0x4e>
		return ret;
	    }
	    return ubxPENDING;
	break;
	case 4:
	    ret = writeUBX(cfgODOmsg) ;
 8083d22:	4910      	ldr	r1, [pc, #64]	; (8083d64 <_ZN12UbloxM8Q_GPS5beginEv+0x80>)
 8083d24:	e7f6      	b.n	8083d14 <_ZN12UbloxM8Q_GPS5beginEv+0x30>
		return ret;
	    }
	    return ubxPENDING;
	break;
	case 5:
	    ret = writeUBX(enableODO) ;
 8083d26:	4910      	ldr	r1, [pc, #64]	; (8083d68 <_ZN12UbloxM8Q_GPS5beginEv+0x84>)
 8083d28:	e7f4      	b.n	8083d14 <_ZN12UbloxM8Q_GPS5beginEv+0x30>
	    if ( ret == ubxPENDING){
		return ret;
	    }
	    if ( ret == ubxSUCCESS){
 8083d2a:	b920      	cbnz	r0, 8083d36 <_ZN12UbloxM8Q_GPS5beginEv+0x52>
		state++;
 8083d2c:	682b      	ldr	r3, [r5, #0]
 8083d2e:	3301      	adds	r3, #1
 8083d30:	602b      	str	r3, [r5, #0]
		return ubxPENDING;
 8083d32:	2001      	movs	r0, #1
 8083d34:	bd70      	pop	{r4, r5, r6, pc}
	    } else { // some error
		reportError(state, ret);
 8083d36:	4602      	mov	r2, r0
 8083d38:	6829      	ldr	r1, [r5, #0]
 8083d3a:	4630      	mov	r0, r6
 8083d3c:	f7ff ffae 	bl	8083c9c <_ZN12UbloxM8Q_GPS11reportErrorEi9ubxReturn>
		state = 0;
 8083d40:	2300      	movs	r3, #0
 8083d42:	602b      	str	r3, [r5, #0]
		return ret;
 8083d44:	4620      	mov	r0, r4
 8083d46:	bd70      	pop	{r4, r5, r6, pc}
	    return ubxPENDING;
	break;
	default:
	    // state eventually gets incremented beyond defined cases and
	    // we end up here. That means we are done!
	    initComplete = true;
 8083d48:	2301      	movs	r3, #1
 8083d4a:	7003      	strb	r3, [r0, #0]
	    state = 0;
 8083d4c:	2000      	movs	r0, #0
 8083d4e:	6028      	str	r0, [r5, #0]
	    return ubxSUCCESS;
	break;
    }
    return ubxSUCCESS;
}
 8083d50:	bd70      	pop	{r4, r5, r6, pc}
 8083d52:	bf00      	nop
 8083d54:	200003a4 	.word	0x200003a4
 8083d58:	2000005e 	.word	0x2000005e
 8083d5c:	200000ac 	.word	0x200000ac
 8083d60:	2000006c 	.word	0x2000006c
 8083d64:	20000034 	.word	0x20000034
 8083d68:	20000098 	.word	0x20000098

08083d6c <_GLOBAL__sub_I_enablePOSLLH>:
	if (ackList[i] == msgType){
	    return true;
	}
    }
    return false;
}
 8083d6c:	b508      	push	{r3, lr}
 8083d6e:	f000 f939 	bl	8083fe4 <HAL_Pin_Map>
 8083d72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
0x00,0x00, // length, no payload
0x00,0x00  // CK_A,CK_B - checksum bytes, set by ubxCS(sentence)
};

// for simplifying ack detection
AckedMsg ackedMsg = AckedMsg();
 8083d76:	4801      	ldr	r0, [pc, #4]	; (8083d7c <_GLOBAL__sub_I_enablePOSLLH+0x10>)
 8083d78:	f7ff bca2 	b.w	80836c0 <_ZN8AckedMsgC1Ev>
 8083d7c:	200003ac 	.word	0x200003ac

08083d80 <_Z17tinkerDigitalRead6String>:
 * Output         : None.
 * Return         : Value of the pin (0 or 1) in INT type
                    Returns a negative number on failure
 *******************************************************************************/
int tinkerDigitalRead(String pin)
{
 8083d80:	b5f0      	push	{r4, r5, r6, r7, lr}
	//convert ascii to integer
	int pinNumber = pin.charAt(1) - '0';
 8083d82:	2101      	movs	r1, #1
 * Output         : None.
 * Return         : Value of the pin (0 or 1) in INT type
                    Returns a negative number on failure
 *******************************************************************************/
int tinkerDigitalRead(String pin)
{
 8083d84:	b085      	sub	sp, #20
 8083d86:	4606      	mov	r6, r0
	//convert ascii to integer
	int pinNumber = pin.charAt(1) - '0';
 8083d88:	f001 f819 	bl	8084dbe <_ZNK6String6charAtEj>
 8083d8c:	f1a0 0530 	sub.w	r5, r0, #48	; 0x30
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 8083d90:	2d07      	cmp	r5, #7
                    Returns a negative number on failure
 *******************************************************************************/
int tinkerDigitalRead(String pin)
{
	//convert ascii to integer
	int pinNumber = pin.charAt(1) - '0';
 8083d92:	4604      	mov	r4, r0
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 8083d94:	d825      	bhi.n	8083de2 <_Z17tinkerDigitalRead6String+0x62>

	if(pin.startsWith("D"))
 8083d96:	4916      	ldr	r1, [pc, #88]	; (8083df0 <_Z17tinkerDigitalRead6String+0x70>)
 8083d98:	4668      	mov	r0, sp
 8083d9a:	f000 ff3e 	bl	8084c1a <_ZN6StringC1EPK19__FlashStringHelper>
 8083d9e:	4669      	mov	r1, sp
 8083da0:	4630      	mov	r0, r6
 8083da2:	f000 fffa 	bl	8084d9a <_ZNK6String10startsWithERKS_>
 8083da6:	4607      	mov	r7, r0
 8083da8:	4668      	mov	r0, sp
 8083daa:	f000 feef 	bl	8084b8c <_ZN6StringD1Ev>
 8083dae:	b10f      	cbz	r7, 8083db4 <_Z17tinkerDigitalRead6String+0x34>
	{
		pinMode(pinNumber, INPUT_PULLDOWN);
 8083db0:	b2ac      	uxth	r4, r5
 8083db2:	e00e      	b.n	8083dd2 <_Z17tinkerDigitalRead6String+0x52>
		return digitalRead(pinNumber);
	}
	else if (pin.startsWith("A"))
 8083db4:	490f      	ldr	r1, [pc, #60]	; (8083df4 <_Z17tinkerDigitalRead6String+0x74>)
 8083db6:	4668      	mov	r0, sp
 8083db8:	f000 ff2f 	bl	8084c1a <_ZN6StringC1EPK19__FlashStringHelper>
 8083dbc:	4669      	mov	r1, sp
 8083dbe:	4630      	mov	r0, r6
 8083dc0:	f000 ffeb 	bl	8084d9a <_ZNK6String10startsWithERKS_>
 8083dc4:	4605      	mov	r5, r0
 8083dc6:	4668      	mov	r0, sp
 8083dc8:	f000 fee0 	bl	8084b8c <_ZN6StringD1Ev>
 8083dcc:	b165      	cbz	r5, 8083de8 <_Z17tinkerDigitalRead6String+0x68>
	{
		pinMode(pinNumber+10, INPUT_PULLDOWN);
 8083dce:	3c26      	subs	r4, #38	; 0x26
 8083dd0:	b2a4      	uxth	r4, r4
 8083dd2:	4620      	mov	r0, r4
 8083dd4:	2103      	movs	r1, #3
 8083dd6:	f003 fcd7 	bl	8087788 <pinMode>
		return digitalRead(pinNumber+10);
 8083dda:	4620      	mov	r0, r4
 8083ddc:	f003 fcfe 	bl	80877dc <digitalRead>
 8083de0:	e004      	b.n	8083dec <_Z17tinkerDigitalRead6String+0x6c>
int tinkerDigitalRead(String pin)
{
	//convert ascii to integer
	int pinNumber = pin.charAt(1) - '0';
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 8083de2:	f04f 30ff 	mov.w	r0, #4294967295
 8083de6:	e001      	b.n	8083dec <_Z17tinkerDigitalRead6String+0x6c>
	else if (pin.startsWith("A"))
	{
		pinMode(pinNumber+10, INPUT_PULLDOWN);
		return digitalRead(pinNumber+10);
	}
	return -2;
 8083de8:	f06f 0001 	mvn.w	r0, #1
}
 8083dec:	b005      	add	sp, #20
 8083dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8083df0:	0808a972 	.word	0x0808a972
 8083df4:	0808b1d2 	.word	0x0808b1d2

08083df8 <_Z18tinkerDigitalWrite6String>:
 * Input          : Pin and value
 * Output         : None.
 * Return         : 1 on success and a negative number on failure
 *******************************************************************************/
int tinkerDigitalWrite(String command)
{
 8083df8:	b5f0      	push	{r4, r5, r6, r7, lr}
	bool value = 0;
	//convert ascii to integer
	int pinNumber = command.charAt(1) - '0';
 8083dfa:	2101      	movs	r1, #1
 * Input          : Pin and value
 * Output         : None.
 * Return         : 1 on success and a negative number on failure
 *******************************************************************************/
int tinkerDigitalWrite(String command)
{
 8083dfc:	b085      	sub	sp, #20
 8083dfe:	4606      	mov	r6, r0
	bool value = 0;
	//convert ascii to integer
	int pinNumber = command.charAt(1) - '0';
 8083e00:	f000 ffdd 	bl	8084dbe <_ZNK6String6charAtEj>
 8083e04:	f1a0 0430 	sub.w	r4, r0, #48	; 0x30
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 8083e08:	2c07      	cmp	r4, #7
 8083e0a:	d845      	bhi.n	8083e98 <_Z18tinkerDigitalWrite6String+0xa0>

	if(command.substring(3,7) == "HIGH") value = 1;
 8083e0c:	2307      	movs	r3, #7
 8083e0e:	2203      	movs	r2, #3
 8083e10:	4631      	mov	r1, r6
 8083e12:	4668      	mov	r0, sp
 8083e14:	f000 ffe6 	bl	8084de4 <_ZNK6String9substringEjj>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8083e18:	4924      	ldr	r1, [pc, #144]	; (8083eac <_Z18tinkerDigitalWrite6String+0xb4>)
 8083e1a:	4668      	mov	r0, sp
 8083e1c:	f000 ff95 	bl	8084d4a <_ZNK6String6equalsEPKc>
 8083e20:	4605      	mov	r5, r0
 8083e22:	4668      	mov	r0, sp
 8083e24:	f000 feb2 	bl	8084b8c <_ZN6StringD1Ev>
 8083e28:	b97d      	cbnz	r5, 8083e4a <_Z18tinkerDigitalWrite6String+0x52>
	else if(command.substring(3,6) == "LOW") value = 0;
 8083e2a:	2306      	movs	r3, #6
 8083e2c:	2203      	movs	r2, #3
 8083e2e:	4631      	mov	r1, r6
 8083e30:	4668      	mov	r0, sp
 8083e32:	f000 ffd7 	bl	8084de4 <_ZNK6String9substringEjj>
 8083e36:	491e      	ldr	r1, [pc, #120]	; (8083eb0 <_Z18tinkerDigitalWrite6String+0xb8>)
 8083e38:	4668      	mov	r0, sp
 8083e3a:	f000 ff86 	bl	8084d4a <_ZNK6String6equalsEPKc>
 8083e3e:	4607      	mov	r7, r0
 8083e40:	4668      	mov	r0, sp
 8083e42:	f000 fea3 	bl	8084b8c <_ZN6StringD1Ev>
 8083e46:	b90f      	cbnz	r7, 8083e4c <_Z18tinkerDigitalWrite6String+0x54>
 8083e48:	e029      	b.n	8083e9e <_Z18tinkerDigitalWrite6String+0xa6>
	//convert ascii to integer
	int pinNumber = command.charAt(1) - '0';
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;

	if(command.substring(3,7) == "HIGH") value = 1;
 8083e4a:	2501      	movs	r5, #1
	else if(command.substring(3,6) == "LOW") value = 0;
	else return -2;

	if(command.startsWith("D"))
 8083e4c:	4919      	ldr	r1, [pc, #100]	; (8083eb4 <_Z18tinkerDigitalWrite6String+0xbc>)
 8083e4e:	4668      	mov	r0, sp
 8083e50:	f000 fee3 	bl	8084c1a <_ZN6StringC1EPK19__FlashStringHelper>
 8083e54:	4669      	mov	r1, sp
 8083e56:	4630      	mov	r0, r6
 8083e58:	f000 ff9f 	bl	8084d9a <_ZNK6String10startsWithERKS_>
 8083e5c:	4607      	mov	r7, r0
 8083e5e:	4668      	mov	r0, sp
 8083e60:	f000 fe94 	bl	8084b8c <_ZN6StringD1Ev>
 8083e64:	b96f      	cbnz	r7, 8083e82 <_Z18tinkerDigitalWrite6String+0x8a>
	{
		pinMode(pinNumber, OUTPUT);
		digitalWrite(pinNumber, value);
		return 1;
	}
	else if(command.startsWith("A"))
 8083e66:	4914      	ldr	r1, [pc, #80]	; (8083eb8 <_Z18tinkerDigitalWrite6String+0xc0>)
 8083e68:	4668      	mov	r0, sp
 8083e6a:	f000 fed6 	bl	8084c1a <_ZN6StringC1EPK19__FlashStringHelper>
 8083e6e:	4630      	mov	r0, r6
 8083e70:	4669      	mov	r1, sp
 8083e72:	f000 ff92 	bl	8084d9a <_ZNK6String10startsWithERKS_>
 8083e76:	4606      	mov	r6, r0
 8083e78:	4668      	mov	r0, sp
 8083e7a:	f000 fe87 	bl	8084b8c <_ZN6StringD1Ev>
 8083e7e:	b18e      	cbz	r6, 8083ea4 <_Z18tinkerDigitalWrite6String+0xac>
	{
		pinMode(pinNumber+10, OUTPUT);
 8083e80:	340a      	adds	r4, #10
 8083e82:	b2a4      	uxth	r4, r4
 8083e84:	2101      	movs	r1, #1
 8083e86:	4620      	mov	r0, r4
 8083e88:	f003 fc7e 	bl	8087788 <pinMode>
		digitalWrite(pinNumber+10, value);
 8083e8c:	4620      	mov	r0, r4
 8083e8e:	4629      	mov	r1, r5
 8083e90:	f003 fc8b 	bl	80877aa <digitalWrite>
		return 1;
 8083e94:	2001      	movs	r0, #1
 8083e96:	e007      	b.n	8083ea8 <_Z18tinkerDigitalWrite6String+0xb0>
{
	bool value = 0;
	//convert ascii to integer
	int pinNumber = command.charAt(1) - '0';
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 8083e98:	f04f 30ff 	mov.w	r0, #4294967295
 8083e9c:	e004      	b.n	8083ea8 <_Z18tinkerDigitalWrite6String+0xb0>

	if(command.substring(3,7) == "HIGH") value = 1;
	else if(command.substring(3,6) == "LOW") value = 0;
	else return -2;
 8083e9e:	f06f 0001 	mvn.w	r0, #1
 8083ea2:	e001      	b.n	8083ea8 <_Z18tinkerDigitalWrite6String+0xb0>
	{
		pinMode(pinNumber+10, OUTPUT);
		digitalWrite(pinNumber+10, value);
		return 1;
	}
	else return -3;
 8083ea4:	f06f 0002 	mvn.w	r0, #2
}
 8083ea8:	b005      	add	sp, #20
 8083eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8083eac:	0808b1d4 	.word	0x0808b1d4
 8083eb0:	0808b1d9 	.word	0x0808b1d9
 8083eb4:	0808a972 	.word	0x0808a972
 8083eb8:	0808b1d2 	.word	0x0808b1d2

08083ebc <_Z16tinkerAnalogRead6String>:
 * Output         : None.
 * Return         : Returns the analog value in INT type (0 to 4095)
                    Returns a negative number on failure
 *******************************************************************************/
int tinkerAnalogRead(String pin)
{
 8083ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
	//convert ascii to integer
	int pinNumber = pin.charAt(1) - '0';
 8083ebe:	2101      	movs	r1, #1
 * Output         : None.
 * Return         : Returns the analog value in INT type (0 to 4095)
                    Returns a negative number on failure
 *******************************************************************************/
int tinkerAnalogRead(String pin)
{
 8083ec0:	b085      	sub	sp, #20
 8083ec2:	4607      	mov	r7, r0
	//convert ascii to integer
	int pinNumber = pin.charAt(1) - '0';
 8083ec4:	f000 ff7b 	bl	8084dbe <_ZNK6String6charAtEj>
 8083ec8:	f1a0 0530 	sub.w	r5, r0, #48	; 0x30
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 8083ecc:	2d07      	cmp	r5, #7
                    Returns a negative number on failure
 *******************************************************************************/
int tinkerAnalogRead(String pin)
{
	//convert ascii to integer
	int pinNumber = pin.charAt(1) - '0';
 8083ece:	4604      	mov	r4, r0
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 8083ed0:	d826      	bhi.n	8083f20 <_Z16tinkerAnalogRead6String+0x64>

	if(pin.startsWith("D"))
 8083ed2:	4917      	ldr	r1, [pc, #92]	; (8083f30 <_Z16tinkerAnalogRead6String+0x74>)
 8083ed4:	4668      	mov	r0, sp
 8083ed6:	f000 fea0 	bl	8084c1a <_ZN6StringC1EPK19__FlashStringHelper>
 8083eda:	4669      	mov	r1, sp
 8083edc:	4638      	mov	r0, r7
 8083ede:	f000 ff5c 	bl	8084d9a <_ZNK6String10startsWithERKS_>
 8083ee2:	4606      	mov	r6, r0
 8083ee4:	4668      	mov	r0, sp
 8083ee6:	f000 fe51 	bl	8084b8c <_ZN6StringD1Ev>
 8083eea:	b116      	cbz	r6, 8083ef2 <_Z16tinkerAnalogRead6String+0x36>
	{
		pinMode(pinNumber, INPUT);
 8083eec:	b2ac      	uxth	r4, r5
 8083eee:	2100      	movs	r1, #0
 8083ef0:	e00f      	b.n	8083f12 <_Z16tinkerAnalogRead6String+0x56>
		return analogRead(pinNumber);
	}
	else if (pin.startsWith("A"))
 8083ef2:	4910      	ldr	r1, [pc, #64]	; (8083f34 <_Z16tinkerAnalogRead6String+0x78>)
 8083ef4:	4668      	mov	r0, sp
 8083ef6:	f000 fe90 	bl	8084c1a <_ZN6StringC1EPK19__FlashStringHelper>
 8083efa:	4669      	mov	r1, sp
 8083efc:	4638      	mov	r0, r7
 8083efe:	f000 ff4c 	bl	8084d9a <_ZNK6String10startsWithERKS_>
 8083f02:	4605      	mov	r5, r0
 8083f04:	4668      	mov	r0, sp
 8083f06:	f000 fe41 	bl	8084b8c <_ZN6StringD1Ev>
 8083f0a:	b165      	cbz	r5, 8083f26 <_Z16tinkerAnalogRead6String+0x6a>
	{
		pinMode(pinNumber+10, INPUT);
 8083f0c:	4631      	mov	r1, r6
 8083f0e:	3c26      	subs	r4, #38	; 0x26
 8083f10:	b2a4      	uxth	r4, r4
 8083f12:	4620      	mov	r0, r4
 8083f14:	f003 fc38 	bl	8087788 <pinMode>
		return analogRead(pinNumber+10);
 8083f18:	4620      	mov	r0, r4
 8083f1a:	f003 fc72 	bl	8087802 <analogRead>
 8083f1e:	e004      	b.n	8083f2a <_Z16tinkerAnalogRead6String+0x6e>
int tinkerAnalogRead(String pin)
{
	//convert ascii to integer
	int pinNumber = pin.charAt(1) - '0';
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 8083f20:	f04f 30ff 	mov.w	r0, #4294967295
 8083f24:	e001      	b.n	8083f2a <_Z16tinkerAnalogRead6String+0x6e>
	else if (pin.startsWith("A"))
	{
		pinMode(pinNumber+10, INPUT);
		return analogRead(pinNumber+10);
	}
	return -2;
 8083f26:	f06f 0001 	mvn.w	r0, #1
}
 8083f2a:	b005      	add	sp, #20
 8083f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8083f2e:	bf00      	nop
 8083f30:	0808a972 	.word	0x0808a972
 8083f34:	0808b1d2 	.word	0x0808b1d2

08083f38 <_Z17tinkerAnalogWrite6String>:
 * Input          : Pin and Value (0 to 255)
 * Output         : None.
 * Return         : 1 on success and a negative number on failure
 *******************************************************************************/
int tinkerAnalogWrite(String command)
{
 8083f38:	b5f0      	push	{r4, r5, r6, r7, lr}
	//convert ascii to integer
	int pinNumber = command.charAt(1) - '0';
 8083f3a:	2101      	movs	r1, #1
 * Input          : Pin and Value (0 to 255)
 * Output         : None.
 * Return         : 1 on success and a negative number on failure
 *******************************************************************************/
int tinkerAnalogWrite(String command)
{
 8083f3c:	b089      	sub	sp, #36	; 0x24
 8083f3e:	4606      	mov	r6, r0
	//convert ascii to integer
	int pinNumber = command.charAt(1) - '0';
 8083f40:	f000 ff3d 	bl	8084dbe <_ZNK6String6charAtEj>
 8083f44:	f1a0 0530 	sub.w	r5, r0, #48	; 0x30
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 8083f48:	2d07      	cmp	r5, #7
 * Return         : 1 on success and a negative number on failure
 *******************************************************************************/
int tinkerAnalogWrite(String command)
{
	//convert ascii to integer
	int pinNumber = command.charAt(1) - '0';
 8083f4a:	4604      	mov	r4, r0
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 8083f4c:	d83e      	bhi.n	8083fcc <_Z17tinkerAnalogWrite6String+0x94>

	String value = command.substring(3);
 8083f4e:	2203      	movs	r2, #3
 8083f50:	4631      	mov	r1, r6
 8083f52:	4668      	mov	r0, sp
 8083f54:	f000 ff68 	bl	8084e28 <_ZNK6String9substringEj>

	if(command.startsWith("D"))
 8083f58:	491f      	ldr	r1, [pc, #124]	; (8083fd8 <_Z17tinkerAnalogWrite6String+0xa0>)
 8083f5a:	a804      	add	r0, sp, #16
 8083f5c:	f000 fe5d 	bl	8084c1a <_ZN6StringC1EPK19__FlashStringHelper>
 8083f60:	a904      	add	r1, sp, #16
 8083f62:	4630      	mov	r0, r6
 8083f64:	f000 ff19 	bl	8084d9a <_ZNK6String10startsWithERKS_>
 8083f68:	4607      	mov	r7, r0
 8083f6a:	a804      	add	r0, sp, #16
 8083f6c:	f000 fe0e 	bl	8084b8c <_ZN6StringD1Ev>
 8083f70:	b157      	cbz	r7, 8083f88 <_Z17tinkerAnalogWrite6String+0x50>
	{
		pinMode(pinNumber, OUTPUT);
 8083f72:	b2ad      	uxth	r5, r5
 8083f74:	2101      	movs	r1, #1
 8083f76:	4628      	mov	r0, r5
 8083f78:	f003 fc06 	bl	8087788 <pinMode>
		analogWrite(pinNumber, value.toInt());
 8083f7c:	4668      	mov	r0, sp
 8083f7e:	f000 ff5a 	bl	8084e36 <_ZNK6String5toIntEv>
 8083f82:	4601      	mov	r1, r0
 8083f84:	4628      	mov	r0, r5
 8083f86:	e017      	b.n	8083fb8 <_Z17tinkerAnalogWrite6String+0x80>
		return 1;
	}
	else if(command.startsWith("A"))
 8083f88:	4914      	ldr	r1, [pc, #80]	; (8083fdc <_Z17tinkerAnalogWrite6String+0xa4>)
 8083f8a:	a804      	add	r0, sp, #16
 8083f8c:	f000 fe45 	bl	8084c1a <_ZN6StringC1EPK19__FlashStringHelper>
 8083f90:	a904      	add	r1, sp, #16
 8083f92:	4630      	mov	r0, r6
 8083f94:	f000 ff01 	bl	8084d9a <_ZNK6String10startsWithERKS_>
 8083f98:	4605      	mov	r5, r0
 8083f9a:	a804      	add	r0, sp, #16
 8083f9c:	f000 fdf6 	bl	8084b8c <_ZN6StringD1Ev>
 8083fa0:	b175      	cbz	r5, 8083fc0 <_Z17tinkerAnalogWrite6String+0x88>
	{
		pinMode(pinNumber+10, OUTPUT);
 8083fa2:	3c26      	subs	r4, #38	; 0x26
 8083fa4:	b2a4      	uxth	r4, r4
 8083fa6:	2101      	movs	r1, #1
 8083fa8:	4620      	mov	r0, r4
 8083faa:	f003 fbed 	bl	8087788 <pinMode>
		analogWrite(pinNumber+10, value.toInt());
 8083fae:	4668      	mov	r0, sp
 8083fb0:	f000 ff41 	bl	8084e36 <_ZNK6String5toIntEv>
 8083fb4:	4601      	mov	r1, r0
 8083fb6:	4620      	mov	r0, r4
 8083fb8:	f003 fc3a 	bl	8087830 <_Z11analogWritetm>
		return 1;
 8083fbc:	2401      	movs	r4, #1
 8083fbe:	e001      	b.n	8083fc4 <_Z17tinkerAnalogWrite6String+0x8c>
	}
	else return -2;
 8083fc0:	f06f 0401 	mvn.w	r4, #1
	//convert ascii to integer
	int pinNumber = command.charAt(1) - '0';
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;

	String value = command.substring(3);
 8083fc4:	4668      	mov	r0, sp
 8083fc6:	f000 fde1 	bl	8084b8c <_ZN6StringD1Ev>
 8083fca:	e001      	b.n	8083fd0 <_Z17tinkerAnalogWrite6String+0x98>
int tinkerAnalogWrite(String command)
{
	//convert ascii to integer
	int pinNumber = command.charAt(1) - '0';
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 8083fcc:	f04f 34ff 	mov.w	r4, #4294967295
		pinMode(pinNumber+10, OUTPUT);
		analogWrite(pinNumber+10, value.toInt());
		return 1;
	}
	else return -2;
}
 8083fd0:	4620      	mov	r0, r4
 8083fd2:	b009      	add	sp, #36	; 0x24
 8083fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8083fd6:	bf00      	nop
 8083fd8:	0808a972 	.word	0x0808a972
 8083fdc:	0808b1d2 	.word	0x0808b1d2

08083fe0 <_GLOBAL__sub_I__Z17tinkerDigitalRead6String>:
 8083fe0:	f000 b800 	b.w	8083fe4 <HAL_Pin_Map>

08083fe4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 8083fe4:	b508      	push	{r3, lr}
 8083fe6:	4b02      	ldr	r3, [pc, #8]	; (8083ff0 <HAL_Pin_Map+0xc>)
 8083fe8:	681b      	ldr	r3, [r3, #0]
 8083fea:	681b      	ldr	r3, [r3, #0]
 8083fec:	9301      	str	r3, [sp, #4]
 8083fee:	bd08      	pop	{r3, pc}
 8083ff0:	080401b0 	.word	0x080401b0

08083ff4 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 8083ff4:	b508      	push	{r3, lr}
 8083ff6:	4b02      	ldr	r3, [pc, #8]	; (8084000 <HAL_Validate_Pin_Function+0xc>)
 8083ff8:	681b      	ldr	r3, [r3, #0]
 8083ffa:	685b      	ldr	r3, [r3, #4]
 8083ffc:	9301      	str	r3, [sp, #4]
 8083ffe:	bd08      	pop	{r3, pc}
 8084000:	080401b0 	.word	0x080401b0

08084004 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8084004:	b508      	push	{r3, lr}
 8084006:	4b02      	ldr	r3, [pc, #8]	; (8084010 <HAL_Pin_Mode+0xc>)
 8084008:	681b      	ldr	r3, [r3, #0]
 808400a:	689b      	ldr	r3, [r3, #8]
 808400c:	9301      	str	r3, [sp, #4]
 808400e:	bd08      	pop	{r3, pc}
 8084010:	080401b0 	.word	0x080401b0

08084014 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8084014:	b508      	push	{r3, lr}
 8084016:	4b02      	ldr	r3, [pc, #8]	; (8084020 <HAL_Get_Pin_Mode+0xc>)
 8084018:	681b      	ldr	r3, [r3, #0]
 808401a:	68db      	ldr	r3, [r3, #12]
 808401c:	9301      	str	r3, [sp, #4]
 808401e:	bd08      	pop	{r3, pc}
 8084020:	080401b0 	.word	0x080401b0

08084024 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8084024:	b508      	push	{r3, lr}
 8084026:	4b02      	ldr	r3, [pc, #8]	; (8084030 <HAL_GPIO_Write+0xc>)
 8084028:	681b      	ldr	r3, [r3, #0]
 808402a:	691b      	ldr	r3, [r3, #16]
 808402c:	9301      	str	r3, [sp, #4]
 808402e:	bd08      	pop	{r3, pc}
 8084030:	080401b0 	.word	0x080401b0

08084034 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 8084034:	b508      	push	{r3, lr}
 8084036:	4b02      	ldr	r3, [pc, #8]	; (8084040 <HAL_GPIO_Read+0xc>)
 8084038:	681b      	ldr	r3, [r3, #0]
 808403a:	695b      	ldr	r3, [r3, #20]
 808403c:	9301      	str	r3, [sp, #4]
 808403e:	bd08      	pop	{r3, pc}
 8084040:	080401b0 	.word	0x080401b0

08084044 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 8084044:	b508      	push	{r3, lr}
 8084046:	4b02      	ldr	r3, [pc, #8]	; (8084050 <HAL_Interrupts_Attach+0xc>)
 8084048:	681b      	ldr	r3, [r3, #0]
 808404a:	699b      	ldr	r3, [r3, #24]
 808404c:	9301      	str	r3, [sp, #4]
 808404e:	bd08      	pop	{r3, pc}
 8084050:	080401b0 	.word	0x080401b0

08084054 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
 8084054:	b508      	push	{r3, lr}
 8084056:	4b02      	ldr	r3, [pc, #8]	; (8084060 <HAL_Interrupts_Detach+0xc>)
 8084058:	681b      	ldr	r3, [r3, #0]
 808405a:	69db      	ldr	r3, [r3, #28]
 808405c:	9301      	str	r3, [sp, #4]
 808405e:	bd08      	pop	{r3, pc}
 8084060:	080401b0 	.word	0x080401b0

08084064 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
 8084064:	b508      	push	{r3, lr}
 8084066:	4b02      	ldr	r3, [pc, #8]	; (8084070 <HAL_Interrupts_Enable_All+0xc>)
 8084068:	681b      	ldr	r3, [r3, #0]
 808406a:	6a1b      	ldr	r3, [r3, #32]
 808406c:	9301      	str	r3, [sp, #4]
 808406e:	bd08      	pop	{r3, pc}
 8084070:	080401b0 	.word	0x080401b0

08084074 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
 8084074:	b508      	push	{r3, lr}
 8084076:	4b02      	ldr	r3, [pc, #8]	; (8084080 <HAL_Interrupts_Disable_All+0xc>)
 8084078:	681b      	ldr	r3, [r3, #0]
 808407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808407c:	9301      	str	r3, [sp, #4]
 808407e:	bd08      	pop	{r3, pc}
 8084080:	080401b0 	.word	0x080401b0

08084084 <HAL_DAC_Write>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
 8084084:	b508      	push	{r3, lr}
 8084086:	4b02      	ldr	r3, [pc, #8]	; (8084090 <HAL_DAC_Write+0xc>)
 8084088:	681b      	ldr	r3, [r3, #0]
 808408a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808408c:	9301      	str	r3, [sp, #4]
 808408e:	bd08      	pop	{r3, pc}
 8084090:	080401b0 	.word	0x080401b0

08084094 <HAL_ADC_Read>:
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 8084094:	b508      	push	{r3, lr}
 8084096:	4b02      	ldr	r3, [pc, #8]	; (80840a0 <HAL_ADC_Read+0xc>)
 8084098:	681b      	ldr	r3, [r3, #0]
 808409a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808409c:	9301      	str	r3, [sp, #4]
 808409e:	bd08      	pop	{r3, pc}
 80840a0:	080401b0 	.word	0x080401b0

080840a4 <HAL_PWM_Write_Ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, HAL_PWM_Get_Resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, HAL_PWM_Set_Resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, HAL_PWM_Write_Ext, void(uint16_t, uint32_t))
 80840a4:	b508      	push	{r3, lr}
 80840a6:	4b02      	ldr	r3, [pc, #8]	; (80840b0 <HAL_PWM_Write_Ext+0xc>)
 80840a8:	681b      	ldr	r3, [r3, #0]
 80840aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80840ac:	9301      	str	r3, [sp, #4]
 80840ae:	bd08      	pop	{r3, pc}
 80840b0:	080401b0 	.word	0x080401b0

080840b4 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80840b4:	b508      	push	{r3, lr}
 80840b6:	4b02      	ldr	r3, [pc, #8]	; (80840c0 <HAL_SPI_Begin+0xc>)
 80840b8:	681b      	ldr	r3, [r3, #0]
 80840ba:	681b      	ldr	r3, [r3, #0]
 80840bc:	9301      	str	r3, [sp, #4]
 80840be:	bd08      	pop	{r3, pc}
 80840c0:	080401b4 	.word	0x080401b4

080840c4 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
 80840c4:	b508      	push	{r3, lr}
 80840c6:	4b02      	ldr	r3, [pc, #8]	; (80840d0 <HAL_SPI_Set_Bit_Order+0xc>)
 80840c8:	681b      	ldr	r3, [r3, #0]
 80840ca:	689b      	ldr	r3, [r3, #8]
 80840cc:	9301      	str	r3, [sp, #4]
 80840ce:	bd08      	pop	{r3, pc}
 80840d0:	080401b4 	.word	0x080401b4

080840d4 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
 80840d4:	b508      	push	{r3, lr}
 80840d6:	4b02      	ldr	r3, [pc, #8]	; (80840e0 <HAL_SPI_Set_Data_Mode+0xc>)
 80840d8:	681b      	ldr	r3, [r3, #0]
 80840da:	68db      	ldr	r3, [r3, #12]
 80840dc:	9301      	str	r3, [sp, #4]
 80840de:	bd08      	pop	{r3, pc}
 80840e0:	080401b4 	.word	0x080401b4

080840e4 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
 80840e4:	b508      	push	{r3, lr}
 80840e6:	4b02      	ldr	r3, [pc, #8]	; (80840f0 <HAL_SPI_Set_Clock_Divider+0xc>)
 80840e8:	681b      	ldr	r3, [r3, #0]
 80840ea:	691b      	ldr	r3, [r3, #16]
 80840ec:	9301      	str	r3, [sp, #4]
 80840ee:	bd08      	pop	{r3, pc}
 80840f0:	080401b4 	.word	0x080401b4

080840f4 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80840f4:	b508      	push	{r3, lr}
 80840f6:	4b02      	ldr	r3, [pc, #8]	; (8084100 <HAL_SPI_Send_Receive_Data+0xc>)
 80840f8:	681b      	ldr	r3, [r3, #0]
 80840fa:	695b      	ldr	r3, [r3, #20]
 80840fc:	9301      	str	r3, [sp, #4]
 80840fe:	bd08      	pop	{r3, pc}
 8084100:	080401b4 	.word	0x080401b4

08084104 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 8084104:	b508      	push	{r3, lr}
 8084106:	4b02      	ldr	r3, [pc, #8]	; (8084110 <HAL_SPI_Init+0xc>)
 8084108:	681b      	ldr	r3, [r3, #0]
 808410a:	69db      	ldr	r3, [r3, #28]
 808410c:	9301      	str	r3, [sp, #4]
 808410e:	bd08      	pop	{r3, pc}
 8084110:	080401b4 	.word	0x080401b4

08084114 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 8084114:	b508      	push	{r3, lr}
 8084116:	4b02      	ldr	r3, [pc, #8]	; (8084120 <HAL_SPI_Is_Enabled+0xc>)
 8084118:	681b      	ldr	r3, [r3, #0]
 808411a:	6a1b      	ldr	r3, [r3, #32]
 808411c:	9301      	str	r3, [sp, #4]
 808411e:	bd08      	pop	{r3, pc}
 8084120:	080401b4 	.word	0x080401b4

08084124 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 8084124:	b508      	push	{r3, lr}
 8084126:	4b02      	ldr	r3, [pc, #8]	; (8084130 <HAL_SPI_Info+0xc>)
 8084128:	681b      	ldr	r3, [r3, #0]
 808412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808412c:	9301      	str	r3, [sp, #4]
 808412e:	bd08      	pop	{r3, pc}
 8084130:	080401b4 	.word	0x080401b4

08084134 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8084134:	b508      	push	{r3, lr}
 8084136:	4b02      	ldr	r3, [pc, #8]	; (8084140 <HAL_RNG_GetRandomNumber+0xc>)
 8084138:	681b      	ldr	r3, [r3, #0]
 808413a:	685b      	ldr	r3, [r3, #4]
 808413c:	9301      	str	r3, [sp, #4]
 808413e:	bd08      	pop	{r3, pc}
 8084140:	0804019c 	.word	0x0804019c

08084144 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
 8084144:	b508      	push	{r3, lr}
 8084146:	4b02      	ldr	r3, [pc, #8]	; (8084150 <HAL_Delay_Milliseconds+0xc>)
 8084148:	681b      	ldr	r3, [r3, #0]
 808414a:	689b      	ldr	r3, [r3, #8]
 808414c:	9301      	str	r3, [sp, #4]
 808414e:	bd08      	pop	{r3, pc}
 8084150:	0804019c 	.word	0x0804019c

08084154 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 8084154:	b508      	push	{r3, lr}
 8084156:	4b02      	ldr	r3, [pc, #8]	; (8084160 <HAL_Delay_Microseconds+0xc>)
 8084158:	681b      	ldr	r3, [r3, #0]
 808415a:	68db      	ldr	r3, [r3, #12]
 808415c:	9301      	str	r3, [sp, #4]
 808415e:	bd08      	pop	{r3, pc}
 8084160:	0804019c 	.word	0x0804019c

08084164 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8084164:	b508      	push	{r3, lr}
 8084166:	4b02      	ldr	r3, [pc, #8]	; (8084170 <HAL_Timer_Get_Milli_Seconds+0xc>)
 8084168:	681b      	ldr	r3, [r3, #0]
 808416a:	695b      	ldr	r3, [r3, #20]
 808416c:	9301      	str	r3, [sp, #4]
 808416e:	bd08      	pop	{r3, pc}
 8084170:	0804019c 	.word	0x0804019c

08084174 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 8084174:	b508      	push	{r3, lr}
 8084176:	4b02      	ldr	r3, [pc, #8]	; (8084180 <HAL_RTC_Get_UnixTime+0xc>)
 8084178:	681b      	ldr	r3, [r3, #0]
 808417a:	69db      	ldr	r3, [r3, #28]
 808417c:	9301      	str	r3, [sp, #4]
 808417e:	bd08      	pop	{r3, pc}
 8084180:	0804019c 	.word	0x0804019c

08084184 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 8084184:	b508      	push	{r3, lr}
 8084186:	4b02      	ldr	r3, [pc, #8]	; (8084190 <HAL_RTC_Time_Is_Valid+0xc>)
 8084188:	681b      	ldr	r3, [r3, #0]
 808418a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 808418c:	9301      	str	r3, [sp, #4]
 808418e:	bd08      	pop	{r3, pc}
 8084190:	0804019c 	.word	0x0804019c

08084194 <HAL_Core_Enter_Safe_Mode>:
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
 8084194:	b508      	push	{r3, lr}
 8084196:	4b02      	ldr	r3, [pc, #8]	; (80841a0 <HAL_Core_Enter_Safe_Mode+0xc>)
 8084198:	681b      	ldr	r3, [r3, #0]
 808419a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 808419c:	9301      	str	r3, [sp, #4]
 808419e:	bd08      	pop	{r3, pc}
 80841a0:	080401b8 	.word	0x080401b8

080841a4 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
 80841a4:	b508      	push	{r3, lr}
 80841a6:	4b02      	ldr	r3, [pc, #8]	; (80841b0 <HAL_Core_System_Reset_Ex+0xc>)
 80841a8:	681b      	ldr	r3, [r3, #0]
 80841aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80841ac:	9301      	str	r3, [sp, #4]
 80841ae:	bd08      	pop	{r3, pc}
 80841b0:	080401b8 	.word	0x080401b8

080841b4 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 80841b4:	b508      	push	{r3, lr}
 80841b6:	4b02      	ldr	r3, [pc, #8]	; (80841c0 <HAL_Core_Get_Last_Reset_Info+0xc>)
 80841b8:	681b      	ldr	r3, [r3, #0]
 80841ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80841bc:	9301      	str	r3, [sp, #4]
 80841be:	bd08      	pop	{r3, pc}
 80841c0:	080401b8 	.word	0x080401b8

080841c4 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
 80841c4:	b508      	push	{r3, lr}
 80841c6:	4b02      	ldr	r3, [pc, #8]	; (80841d0 <os_thread_create+0xc>)
 80841c8:	681b      	ldr	r3, [r3, #0]
 80841ca:	685b      	ldr	r3, [r3, #4]
 80841cc:	9301      	str	r3, [sp, #4]
 80841ce:	bd08      	pop	{r3, pc}
 80841d0:	080401d0 	.word	0x080401d0

080841d4 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
 80841d4:	b508      	push	{r3, lr}
 80841d6:	4b02      	ldr	r3, [pc, #8]	; (80841e0 <os_thread_is_current+0xc>)
 80841d8:	681b      	ldr	r3, [r3, #0]
 80841da:	689b      	ldr	r3, [r3, #8]
 80841dc:	9301      	str	r3, [sp, #4]
 80841de:	bd08      	pop	{r3, pc}
 80841e0:	080401d0 	.word	0x080401d0

080841e4 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
 80841e4:	b508      	push	{r3, lr}
 80841e6:	4b02      	ldr	r3, [pc, #8]	; (80841f0 <os_thread_yield+0xc>)
 80841e8:	681b      	ldr	r3, [r3, #0]
 80841ea:	68db      	ldr	r3, [r3, #12]
 80841ec:	9301      	str	r3, [sp, #4]
 80841ee:	bd08      	pop	{r3, pc}
 80841f0:	080401d0 	.word	0x080401d0

080841f4 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
 80841f4:	b508      	push	{r3, lr}
 80841f6:	4b02      	ldr	r3, [pc, #8]	; (8084200 <os_thread_join+0xc>)
 80841f8:	681b      	ldr	r3, [r3, #0]
 80841fa:	691b      	ldr	r3, [r3, #16]
 80841fc:	9301      	str	r3, [sp, #4]
 80841fe:	bd08      	pop	{r3, pc}
 8084200:	080401d0 	.word	0x080401d0

08084204 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
 8084204:	b508      	push	{r3, lr}
 8084206:	4b02      	ldr	r3, [pc, #8]	; (8084210 <os_thread_cleanup+0xc>)
 8084208:	681b      	ldr	r3, [r3, #0]
 808420a:	695b      	ldr	r3, [r3, #20]
 808420c:	9301      	str	r3, [sp, #4]
 808420e:	bd08      	pop	{r3, pc}
 8084210:	080401d0 	.word	0x080401d0

08084214 <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
 8084214:	b508      	push	{r3, lr}
 8084216:	4b02      	ldr	r3, [pc, #8]	; (8084220 <os_thread_scheduling+0xc>)
 8084218:	681b      	ldr	r3, [r3, #0]
 808421a:	69db      	ldr	r3, [r3, #28]
 808421c:	9301      	str	r3, [sp, #4]
 808421e:	bd08      	pop	{r3, pc}
 8084220:	080401d0 	.word	0x080401d0

08084224 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
 8084224:	b508      	push	{r3, lr}
 8084226:	4b02      	ldr	r3, [pc, #8]	; (8084230 <os_timer_create+0xc>)
 8084228:	681b      	ldr	r3, [r3, #0]
 808422a:	6a1b      	ldr	r3, [r3, #32]
 808422c:	9301      	str	r3, [sp, #4]
 808422e:	bd08      	pop	{r3, pc}
 8084230:	080401d0 	.word	0x080401d0

08084234 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
 8084234:	b508      	push	{r3, lr}
 8084236:	4b02      	ldr	r3, [pc, #8]	; (8084240 <os_timer_destroy+0xc>)
 8084238:	681b      	ldr	r3, [r3, #0]
 808423a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808423c:	9301      	str	r3, [sp, #4]
 808423e:	bd08      	pop	{r3, pc}
 8084240:	080401d0 	.word	0x080401d0

08084244 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
 8084244:	b508      	push	{r3, lr}
 8084246:	4b02      	ldr	r3, [pc, #8]	; (8084250 <os_timer_get_id+0xc>)
 8084248:	681b      	ldr	r3, [r3, #0]
 808424a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808424c:	9301      	str	r3, [sp, #4]
 808424e:	bd08      	pop	{r3, pc}
 8084250:	080401d0 	.word	0x080401d0

08084254 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
 8084254:	b508      	push	{r3, lr}
 8084256:	4b02      	ldr	r3, [pc, #8]	; (8084260 <os_timer_change+0xc>)
 8084258:	681b      	ldr	r3, [r3, #0]
 808425a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808425c:	9301      	str	r3, [sp, #4]
 808425e:	bd08      	pop	{r3, pc}
 8084260:	080401d0 	.word	0x080401d0

08084264 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 8084264:	b508      	push	{r3, lr}
 8084266:	4b02      	ldr	r3, [pc, #8]	; (8084270 <os_mutex_recursive_create+0xc>)
 8084268:	681b      	ldr	r3, [r3, #0]
 808426a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808426c:	9301      	str	r3, [sp, #4]
 808426e:	bd08      	pop	{r3, pc}
 8084270:	080401d0 	.word	0x080401d0

08084274 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 8084274:	b508      	push	{r3, lr}
 8084276:	4b02      	ldr	r3, [pc, #8]	; (8084280 <os_mutex_recursive_destroy+0xc>)
 8084278:	681b      	ldr	r3, [r3, #0]
 808427a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808427c:	9301      	str	r3, [sp, #4]
 808427e:	bd08      	pop	{r3, pc}
 8084280:	080401d0 	.word	0x080401d0

08084284 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 8084284:	b508      	push	{r3, lr}
 8084286:	4b02      	ldr	r3, [pc, #8]	; (8084290 <os_mutex_recursive_lock+0xc>)
 8084288:	681b      	ldr	r3, [r3, #0]
 808428a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808428c:	9301      	str	r3, [sp, #4]
 808428e:	bd08      	pop	{r3, pc}
 8084290:	080401d0 	.word	0x080401d0

08084294 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 8084294:	b508      	push	{r3, lr}
 8084296:	4b02      	ldr	r3, [pc, #8]	; (80842a0 <os_mutex_recursive_unlock+0xc>)
 8084298:	681b      	ldr	r3, [r3, #0]
 808429a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 808429c:	9301      	str	r3, [sp, #4]
 808429e:	bd08      	pop	{r3, pc}
 80842a0:	080401d0 	.word	0x080401d0

080842a4 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
 80842a4:	b508      	push	{r3, lr}
 80842a6:	4b02      	ldr	r3, [pc, #8]	; (80842b0 <os_thread_exit+0xc>)
 80842a8:	681b      	ldr	r3, [r3, #0]
 80842aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80842ac:	9301      	str	r3, [sp, #4]
 80842ae:	bd08      	pop	{r3, pc}
 80842b0:	080401d0 	.word	0x080401d0

080842b4 <os_timer_set_id>:

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
 80842b4:	b508      	push	{r3, lr}
 80842b6:	4b02      	ldr	r3, [pc, #8]	; (80842c0 <os_timer_set_id+0xc>)
 80842b8:	681b      	ldr	r3, [r3, #0]
 80842ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80842bc:	9301      	str	r3, [sp, #4]
 80842be:	bd08      	pop	{r3, pc}
 80842c0:	080401d0 	.word	0x080401d0

080842c4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80842c4:	b508      	push	{r3, lr}
 80842c6:	4b02      	ldr	r3, [pc, #8]	; (80842d0 <HAL_USART_Init+0xc>)
 80842c8:	681b      	ldr	r3, [r3, #0]
 80842ca:	699b      	ldr	r3, [r3, #24]
 80842cc:	9301      	str	r3, [sp, #4]
 80842ce:	bd08      	pop	{r3, pc}
 80842d0:	080401c4 	.word	0x080401c4

080842d4 <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
 80842d4:	b508      	push	{r3, lr}
 80842d6:	4b02      	ldr	r3, [pc, #8]	; (80842e0 <HAL_USART_End+0xc>)
 80842d8:	681b      	ldr	r3, [r3, #0]
 80842da:	6a1b      	ldr	r3, [r3, #32]
 80842dc:	9301      	str	r3, [sp, #4]
 80842de:	bd08      	pop	{r3, pc}
 80842e0:	080401c4 	.word	0x080401c4

080842e4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80842e4:	b508      	push	{r3, lr}
 80842e6:	4b02      	ldr	r3, [pc, #8]	; (80842f0 <HAL_USART_Write_Data+0xc>)
 80842e8:	681b      	ldr	r3, [r3, #0]
 80842ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80842ec:	9301      	str	r3, [sp, #4]
 80842ee:	bd08      	pop	{r3, pc}
 80842f0:	080401c4 	.word	0x080401c4

080842f4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80842f4:	b508      	push	{r3, lr}
 80842f6:	4b02      	ldr	r3, [pc, #8]	; (8084300 <HAL_USART_Available_Data+0xc>)
 80842f8:	681b      	ldr	r3, [r3, #0]
 80842fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80842fc:	9301      	str	r3, [sp, #4]
 80842fe:	bd08      	pop	{r3, pc}
 8084300:	080401c4 	.word	0x080401c4

08084304 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 8084304:	b508      	push	{r3, lr}
 8084306:	4b02      	ldr	r3, [pc, #8]	; (8084310 <HAL_USART_Read_Data+0xc>)
 8084308:	681b      	ldr	r3, [r3, #0]
 808430a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808430c:	9301      	str	r3, [sp, #4]
 808430e:	bd08      	pop	{r3, pc}
 8084310:	080401c4 	.word	0x080401c4

08084314 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 8084314:	b508      	push	{r3, lr}
 8084316:	4b02      	ldr	r3, [pc, #8]	; (8084320 <HAL_USART_Peek_Data+0xc>)
 8084318:	681b      	ldr	r3, [r3, #0]
 808431a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808431c:	9301      	str	r3, [sp, #4]
 808431e:	bd08      	pop	{r3, pc}
 8084320:	080401c4 	.word	0x080401c4

08084324 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 8084324:	b508      	push	{r3, lr}
 8084326:	4b02      	ldr	r3, [pc, #8]	; (8084330 <HAL_USART_Flush_Data+0xc>)
 8084328:	681b      	ldr	r3, [r3, #0]
 808432a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808432c:	9301      	str	r3, [sp, #4]
 808432e:	bd08      	pop	{r3, pc}
 8084330:	080401c4 	.word	0x080401c4

08084334 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 8084334:	b508      	push	{r3, lr}
 8084336:	4b02      	ldr	r3, [pc, #8]	; (8084340 <HAL_USART_Is_Enabled+0xc>)
 8084338:	681b      	ldr	r3, [r3, #0]
 808433a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808433c:	9301      	str	r3, [sp, #4]
 808433e:	bd08      	pop	{r3, pc}
 8084340:	080401c4 	.word	0x080401c4

08084344 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 8084344:	b508      	push	{r3, lr}
 8084346:	4b02      	ldr	r3, [pc, #8]	; (8084350 <HAL_USART_Available_Data_For_Write+0xc>)
 8084348:	681b      	ldr	r3, [r3, #0]
 808434a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808434c:	9301      	str	r3, [sp, #4]
 808434e:	bd08      	pop	{r3, pc}
 8084350:	080401c4 	.word	0x080401c4

08084354 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 8084354:	b508      	push	{r3, lr}
 8084356:	4b02      	ldr	r3, [pc, #8]	; (8084360 <HAL_USART_BeginConfig+0xc>)
 8084358:	681b      	ldr	r3, [r3, #0]
 808435a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808435c:	9301      	str	r3, [sp, #4]
 808435e:	bd08      	pop	{r3, pc}
 8084360:	080401c4 	.word	0x080401c4

08084364 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 8084364:	b508      	push	{r3, lr}
 8084366:	4b02      	ldr	r3, [pc, #8]	; (8084370 <HAL_I2C_Begin+0xc>)
 8084368:	681b      	ldr	r3, [r3, #0]
 808436a:	68db      	ldr	r3, [r3, #12]
 808436c:	9301      	str	r3, [sp, #4]
 808436e:	bd08      	pop	{r3, pc}
 8084370:	080401ac 	.word	0x080401ac

08084374 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
 8084374:	b508      	push	{r3, lr}
 8084376:	4b02      	ldr	r3, [pc, #8]	; (8084380 <HAL_I2C_Begin_Transmission+0xc>)
 8084378:	681b      	ldr	r3, [r3, #0]
 808437a:	699b      	ldr	r3, [r3, #24]
 808437c:	9301      	str	r3, [sp, #4]
 808437e:	bd08      	pop	{r3, pc}
 8084380:	080401ac 	.word	0x080401ac

08084384 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 8084384:	b508      	push	{r3, lr}
 8084386:	4b02      	ldr	r3, [pc, #8]	; (8084390 <HAL_I2C_End_Transmission+0xc>)
 8084388:	681b      	ldr	r3, [r3, #0]
 808438a:	69db      	ldr	r3, [r3, #28]
 808438c:	9301      	str	r3, [sp, #4]
 808438e:	bd08      	pop	{r3, pc}
 8084390:	080401ac 	.word	0x080401ac

08084394 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 8084394:	b508      	push	{r3, lr}
 8084396:	4b02      	ldr	r3, [pc, #8]	; (80843a0 <HAL_I2C_Write_Data+0xc>)
 8084398:	681b      	ldr	r3, [r3, #0]
 808439a:	6a1b      	ldr	r3, [r3, #32]
 808439c:	9301      	str	r3, [sp, #4]
 808439e:	bd08      	pop	{r3, pc}
 80843a0:	080401ac 	.word	0x080401ac

080843a4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80843a4:	b508      	push	{r3, lr}
 80843a6:	4b02      	ldr	r3, [pc, #8]	; (80843b0 <HAL_I2C_Available_Data+0xc>)
 80843a8:	681b      	ldr	r3, [r3, #0]
 80843aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80843ac:	9301      	str	r3, [sp, #4]
 80843ae:	bd08      	pop	{r3, pc}
 80843b0:	080401ac 	.word	0x080401ac

080843b4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80843b4:	b508      	push	{r3, lr}
 80843b6:	4b02      	ldr	r3, [pc, #8]	; (80843c0 <HAL_I2C_Read_Data+0xc>)
 80843b8:	681b      	ldr	r3, [r3, #0]
 80843ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80843bc:	9301      	str	r3, [sp, #4]
 80843be:	bd08      	pop	{r3, pc}
 80843c0:	080401ac 	.word	0x080401ac

080843c4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80843c4:	b508      	push	{r3, lr}
 80843c6:	4b02      	ldr	r3, [pc, #8]	; (80843d0 <HAL_I2C_Peek_Data+0xc>)
 80843c8:	681b      	ldr	r3, [r3, #0]
 80843ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80843cc:	9301      	str	r3, [sp, #4]
 80843ce:	bd08      	pop	{r3, pc}
 80843d0:	080401ac 	.word	0x080401ac

080843d4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80843d4:	b508      	push	{r3, lr}
 80843d6:	4b02      	ldr	r3, [pc, #8]	; (80843e0 <HAL_I2C_Flush_Data+0xc>)
 80843d8:	681b      	ldr	r3, [r3, #0]
 80843da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80843dc:	9301      	str	r3, [sp, #4]
 80843de:	bd08      	pop	{r3, pc}
 80843e0:	080401ac 	.word	0x080401ac

080843e4 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80843e4:	b508      	push	{r3, lr}
 80843e6:	4b02      	ldr	r3, [pc, #8]	; (80843f0 <HAL_I2C_Is_Enabled+0xc>)
 80843e8:	681b      	ldr	r3, [r3, #0]
 80843ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80843ec:	9301      	str	r3, [sp, #4]
 80843ee:	bd08      	pop	{r3, pc}
 80843f0:	080401ac 	.word	0x080401ac

080843f4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 80843f4:	b508      	push	{r3, lr}
 80843f6:	4b02      	ldr	r3, [pc, #8]	; (8084400 <HAL_I2C_Init+0xc>)
 80843f8:	681b      	ldr	r3, [r3, #0]
 80843fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80843fc:	9301      	str	r3, [sp, #4]
 80843fe:	bd08      	pop	{r3, pc}
 8084400:	080401ac 	.word	0x080401ac

08084404 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
 8084404:	b508      	push	{r3, lr}
 8084406:	4b02      	ldr	r3, [pc, #8]	; (8084410 <HAL_I2C_Acquire+0xc>)
 8084408:	681b      	ldr	r3, [r3, #0]
 808440a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808440c:	9301      	str	r3, [sp, #4]
 808440e:	bd08      	pop	{r3, pc}
 8084410:	080401ac 	.word	0x080401ac

08084414 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
 8084414:	b508      	push	{r3, lr}
 8084416:	4b02      	ldr	r3, [pc, #8]	; (8084420 <HAL_I2C_Release+0xc>)
 8084418:	681b      	ldr	r3, [r3, #0]
 808441a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808441c:	9301      	str	r3, [sp, #4]
 808441e:	bd08      	pop	{r3, pc}
 8084420:	080401ac 	.word	0x080401ac

08084424 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
 8084424:	b508      	push	{r3, lr}
 8084426:	4b02      	ldr	r3, [pc, #8]	; (8084430 <HAL_I2C_Request_Data_Ex+0xc>)
 8084428:	681b      	ldr	r3, [r3, #0]
 808442a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 808442c:	9301      	str	r3, [sp, #4]
 808442e:	bd08      	pop	{r3, pc}
 8084430:	080401ac 	.word	0x080401ac

08084434 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 8084434:	b508      	push	{r3, lr}
 8084436:	4b02      	ldr	r3, [pc, #8]	; (8084440 <inet_gethostbyname+0xc>)
 8084438:	681b      	ldr	r3, [r3, #0]
 808443a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 808443c:	9301      	str	r3, [sp, #4]
 808443e:	bd08      	pop	{r3, pc}
 8084440:	08060020 	.word	0x08060020

08084444 <cellular_command>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
 8084444:	b508      	push	{r3, lr}
 8084446:	4b02      	ldr	r3, [pc, #8]	; (8084450 <cellular_command+0xc>)
 8084448:	681b      	ldr	r3, [r3, #0]
 808444a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808444c:	9301      	str	r3, [sp, #4]
 808444e:	bd08      	pop	{r3, pc}
 8084450:	08060020 	.word	0x08060020

08084454 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8084454:	b508      	push	{r3, lr}
 8084456:	4b02      	ldr	r3, [pc, #8]	; (8084460 <HAL_USB_USART_Init+0xc>)
 8084458:	681b      	ldr	r3, [r3, #0]
 808445a:	681b      	ldr	r3, [r3, #0]
 808445c:	9301      	str	r3, [sp, #4]
 808445e:	bd08      	pop	{r3, pc}
 8084460:	0806001c 	.word	0x0806001c

08084464 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 8084464:	b508      	push	{r3, lr}
 8084466:	4b02      	ldr	r3, [pc, #8]	; (8084470 <HAL_USB_USART_Begin+0xc>)
 8084468:	681b      	ldr	r3, [r3, #0]
 808446a:	685b      	ldr	r3, [r3, #4]
 808446c:	9301      	str	r3, [sp, #4]
 808446e:	bd08      	pop	{r3, pc}
 8084470:	0806001c 	.word	0x0806001c

08084474 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 8084474:	b508      	push	{r3, lr}
 8084476:	4b02      	ldr	r3, [pc, #8]	; (8084480 <HAL_USB_USART_End+0xc>)
 8084478:	681b      	ldr	r3, [r3, #0]
 808447a:	689b      	ldr	r3, [r3, #8]
 808447c:	9301      	str	r3, [sp, #4]
 808447e:	bd08      	pop	{r3, pc}
 8084480:	0806001c 	.word	0x0806001c

08084484 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8084484:	b508      	push	{r3, lr}
 8084486:	4b02      	ldr	r3, [pc, #8]	; (8084490 <HAL_USB_USART_Available_Data+0xc>)
 8084488:	681b      	ldr	r3, [r3, #0]
 808448a:	691b      	ldr	r3, [r3, #16]
 808448c:	9301      	str	r3, [sp, #4]
 808448e:	bd08      	pop	{r3, pc}
 8084490:	0806001c 	.word	0x0806001c

08084494 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8084494:	b508      	push	{r3, lr}
 8084496:	4b02      	ldr	r3, [pc, #8]	; (80844a0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8084498:	681b      	ldr	r3, [r3, #0]
 808449a:	695b      	ldr	r3, [r3, #20]
 808449c:	9301      	str	r3, [sp, #4]
 808449e:	bd08      	pop	{r3, pc}
 80844a0:	0806001c 	.word	0x0806001c

080844a4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80844a4:	b508      	push	{r3, lr}
 80844a6:	4b02      	ldr	r3, [pc, #8]	; (80844b0 <HAL_USB_USART_Receive_Data+0xc>)
 80844a8:	681b      	ldr	r3, [r3, #0]
 80844aa:	699b      	ldr	r3, [r3, #24]
 80844ac:	9301      	str	r3, [sp, #4]
 80844ae:	bd08      	pop	{r3, pc}
 80844b0:	0806001c 	.word	0x0806001c

080844b4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80844b4:	b508      	push	{r3, lr}
 80844b6:	4b02      	ldr	r3, [pc, #8]	; (80844c0 <HAL_USB_USART_Send_Data+0xc>)
 80844b8:	681b      	ldr	r3, [r3, #0]
 80844ba:	69db      	ldr	r3, [r3, #28]
 80844bc:	9301      	str	r3, [sp, #4]
 80844be:	bd08      	pop	{r3, pc}
 80844c0:	0806001c 	.word	0x0806001c

080844c4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80844c4:	b508      	push	{r3, lr}
 80844c6:	4b02      	ldr	r3, [pc, #8]	; (80844d0 <HAL_USB_USART_Flush_Data+0xc>)
 80844c8:	681b      	ldr	r3, [r3, #0]
 80844ca:	6a1b      	ldr	r3, [r3, #32]
 80844cc:	9301      	str	r3, [sp, #4]
 80844ce:	bd08      	pop	{r3, pc}
 80844d0:	0806001c 	.word	0x0806001c

080844d4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 80844d4:	b508      	push	{r3, lr}
 80844d6:	4b02      	ldr	r3, [pc, #8]	; (80844e0 <panic_+0xc>)
 80844d8:	681b      	ldr	r3, [r3, #0]
 80844da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80844dc:	9301      	str	r3, [sp, #4]
 80844de:	bd08      	pop	{r3, pc}
 80844e0:	080201a0 	.word	0x080201a0

080844e4 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 80844e4:	b508      	push	{r3, lr}
 80844e6:	4b02      	ldr	r3, [pc, #8]	; (80844f0 <log_message_v+0xc>)
 80844e8:	681b      	ldr	r3, [r3, #0]
 80844ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80844ec:	9301      	str	r3, [sp, #4]
 80844ee:	bd08      	pop	{r3, pc}
 80844f0:	080201a0 	.word	0x080201a0

080844f4 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 80844f4:	b508      	push	{r3, lr}
 80844f6:	4b02      	ldr	r3, [pc, #8]	; (8084500 <log_level_name+0xc>)
 80844f8:	681b      	ldr	r3, [r3, #0]
 80844fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80844fc:	9301      	str	r3, [sp, #4]
 80844fe:	bd08      	pop	{r3, pc}
 8084500:	080201a0 	.word	0x080201a0

08084504 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 8084504:	b508      	push	{r3, lr}
 8084506:	4b02      	ldr	r3, [pc, #8]	; (8084510 <log_set_callbacks+0xc>)
 8084508:	681b      	ldr	r3, [r3, #0]
 808450a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 808450c:	9301      	str	r3, [sp, #4]
 808450e:	bd08      	pop	{r3, pc}
 8084510:	080201a0 	.word	0x080201a0

08084514 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 8084514:	b508      	push	{r3, lr}
 8084516:	4b02      	ldr	r3, [pc, #8]	; (8084520 <system_mode+0xc>)
 8084518:	681b      	ldr	r3, [r3, #0]
 808451a:	681b      	ldr	r3, [r3, #0]
 808451c:	9301      	str	r3, [sp, #4]
 808451e:	bd08      	pop	{r3, pc}
 8084520:	080401a4 	.word	0x080401a4

08084524 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8084524:	b508      	push	{r3, lr}
 8084526:	4b02      	ldr	r3, [pc, #8]	; (8084530 <set_system_mode+0xc>)
 8084528:	681b      	ldr	r3, [r3, #0]
 808452a:	685b      	ldr	r3, [r3, #4]
 808452c:	9301      	str	r3, [sp, #4]
 808452e:	bd08      	pop	{r3, pc}
 8084530:	080401a4 	.word	0x080401a4

08084534 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 8084534:	b508      	push	{r3, lr}
 8084536:	4b02      	ldr	r3, [pc, #8]	; (8084540 <system_delay_ms+0xc>)
 8084538:	681b      	ldr	r3, [r3, #0]
 808453a:	695b      	ldr	r3, [r3, #20]
 808453c:	9301      	str	r3, [sp, #4]
 808453e:	bd08      	pop	{r3, pc}
 8084540:	080401a4 	.word	0x080401a4

08084544 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
 8084544:	b508      	push	{r3, lr}
 8084546:	4b02      	ldr	r3, [pc, #8]	; (8084550 <system_sleep+0xc>)
 8084548:	681b      	ldr	r3, [r3, #0]
 808454a:	699b      	ldr	r3, [r3, #24]
 808454c:	9301      	str	r3, [sp, #4]
 808454e:	bd08      	pop	{r3, pc}
 8084550:	080401a4 	.word	0x080401a4

08084554 <system_subscribe_event>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
 8084554:	b508      	push	{r3, lr}
 8084556:	4b02      	ldr	r3, [pc, #8]	; (8084560 <system_subscribe_event+0xc>)
 8084558:	681b      	ldr	r3, [r3, #0]
 808455a:	6a1b      	ldr	r3, [r3, #32]
 808455c:	9301      	str	r3, [sp, #4]
 808455e:	bd08      	pop	{r3, pc}
 8084560:	080401a4 	.word	0x080401a4

08084564 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 8084564:	b508      	push	{r3, lr}
 8084566:	4b02      	ldr	r3, [pc, #8]	; (8084570 <system_thread_set_state+0xc>)
 8084568:	681b      	ldr	r3, [r3, #0]
 808456a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808456c:	9301      	str	r3, [sp, #4]
 808456e:	bd08      	pop	{r3, pc}
 8084570:	080401a4 	.word	0x080401a4

08084574 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 8084574:	b508      	push	{r3, lr}
 8084576:	4b02      	ldr	r3, [pc, #8]	; (8084580 <application_thread_current+0xc>)
 8084578:	681b      	ldr	r3, [r3, #0]
 808457a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808457c:	9301      	str	r3, [sp, #4]
 808457e:	bd08      	pop	{r3, pc}
 8084580:	080401a4 	.word	0x080401a4

08084584 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 8084584:	b508      	push	{r3, lr}
 8084586:	4b02      	ldr	r3, [pc, #8]	; (8084590 <application_thread_invoke+0xc>)
 8084588:	681b      	ldr	r3, [r3, #0]
 808458a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 808458c:	9301      	str	r3, [sp, #4]
 808458e:	bd08      	pop	{r3, pc}
 8084590:	080401a4 	.word	0x080401a4

08084594 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 8084594:	b508      	push	{r3, lr}
 8084596:	4b02      	ldr	r3, [pc, #8]	; (80845a0 <system_thread_get_state+0xc>)
 8084598:	681b      	ldr	r3, [r3, #0]
 808459a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 808459c:	9301      	str	r3, [sp, #4]
 808459e:	bd08      	pop	{r3, pc}
 80845a0:	080401a4 	.word	0x080401a4

080845a4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80845a4:	b508      	push	{r3, lr}
 80845a6:	4b03      	ldr	r3, [pc, #12]	; (80845b4 <system_ctrl_set_app_request_handler+0x10>)
 80845a8:	681b      	ldr	r3, [r3, #0]
 80845aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80845ae:	9301      	str	r3, [sp, #4]
 80845b0:	bd08      	pop	{r3, pc}
 80845b2:	0000      	.short	0x0000
 80845b4:	080401a4 	.word	0x080401a4

080845b8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80845b8:	b508      	push	{r3, lr}
 80845ba:	4b03      	ldr	r3, [pc, #12]	; (80845c8 <system_ctrl_set_result+0x10>)
 80845bc:	681b      	ldr	r3, [r3, #0]
 80845be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80845c2:	9301      	str	r3, [sp, #4]
 80845c4:	bd08      	pop	{r3, pc}
 80845c6:	0000      	.short	0x0000
 80845c8:	080401a4 	.word	0x080401a4

080845cc <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
 80845cc:	b508      	push	{r3, lr}
 80845ce:	4b03      	ldr	r3, [pc, #12]	; (80845dc <system_sleep_pins+0x10>)
 80845d0:	681b      	ldr	r3, [r3, #0]
 80845d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80845d6:	9301      	str	r3, [sp, #4]
 80845d8:	bd08      	pop	{r3, pc}
 80845da:	0000      	.short	0x0000
 80845dc:	080401a4 	.word	0x080401a4

080845e0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80845e0:	b508      	push	{r3, lr}
 80845e2:	4b02      	ldr	r3, [pc, #8]	; (80845ec <network_connect+0xc>)
 80845e4:	681b      	ldr	r3, [r3, #0]
 80845e6:	685b      	ldr	r3, [r3, #4]
 80845e8:	9301      	str	r3, [sp, #4]
 80845ea:	bd08      	pop	{r3, pc}
 80845ec:	080401c8 	.word	0x080401c8

080845f0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80845f0:	b508      	push	{r3, lr}
 80845f2:	4b02      	ldr	r3, [pc, #8]	; (80845fc <network_connecting+0xc>)
 80845f4:	681b      	ldr	r3, [r3, #0]
 80845f6:	689b      	ldr	r3, [r3, #8]
 80845f8:	9301      	str	r3, [sp, #4]
 80845fa:	bd08      	pop	{r3, pc}
 80845fc:	080401c8 	.word	0x080401c8

08084600 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 8084600:	b508      	push	{r3, lr}
 8084602:	4b02      	ldr	r3, [pc, #8]	; (808460c <network_disconnect+0xc>)
 8084604:	681b      	ldr	r3, [r3, #0]
 8084606:	68db      	ldr	r3, [r3, #12]
 8084608:	9301      	str	r3, [sp, #4]
 808460a:	bd08      	pop	{r3, pc}
 808460c:	080401c8 	.word	0x080401c8

08084610 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8084610:	b508      	push	{r3, lr}
 8084612:	4b02      	ldr	r3, [pc, #8]	; (808461c <network_ready+0xc>)
 8084614:	681b      	ldr	r3, [r3, #0]
 8084616:	691b      	ldr	r3, [r3, #16]
 8084618:	9301      	str	r3, [sp, #4]
 808461a:	bd08      	pop	{r3, pc}
 808461c:	080401c8 	.word	0x080401c8

08084620 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 8084620:	b508      	push	{r3, lr}
 8084622:	4b02      	ldr	r3, [pc, #8]	; (808462c <network_on+0xc>)
 8084624:	681b      	ldr	r3, [r3, #0]
 8084626:	695b      	ldr	r3, [r3, #20]
 8084628:	9301      	str	r3, [sp, #4]
 808462a:	bd08      	pop	{r3, pc}
 808462c:	080401c8 	.word	0x080401c8

08084630 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 8084630:	b508      	push	{r3, lr}
 8084632:	4b02      	ldr	r3, [pc, #8]	; (808463c <network_off+0xc>)
 8084634:	681b      	ldr	r3, [r3, #0]
 8084636:	699b      	ldr	r3, [r3, #24]
 8084638:	9301      	str	r3, [sp, #4]
 808463a:	bd08      	pop	{r3, pc}
 808463c:	080401c8 	.word	0x080401c8

08084640 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 8084640:	b508      	push	{r3, lr}
 8084642:	4b02      	ldr	r3, [pc, #8]	; (808464c <network_listen+0xc>)
 8084644:	681b      	ldr	r3, [r3, #0]
 8084646:	69db      	ldr	r3, [r3, #28]
 8084648:	9301      	str	r3, [sp, #4]
 808464a:	bd08      	pop	{r3, pc}
 808464c:	080401c8 	.word	0x080401c8

08084650 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 8084650:	b508      	push	{r3, lr}
 8084652:	4b02      	ldr	r3, [pc, #8]	; (808465c <network_listening+0xc>)
 8084654:	681b      	ldr	r3, [r3, #0]
 8084656:	6a1b      	ldr	r3, [r3, #32]
 8084658:	9301      	str	r3, [sp, #4]
 808465a:	bd08      	pop	{r3, pc}
 808465c:	080401c8 	.word	0x080401c8

08084660 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 8084660:	b508      	push	{r3, lr}
 8084662:	4b02      	ldr	r3, [pc, #8]	; (808466c <network_set_listen_timeout+0xc>)
 8084664:	681b      	ldr	r3, [r3, #0]
 8084666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8084668:	9301      	str	r3, [sp, #4]
 808466a:	bd08      	pop	{r3, pc}
 808466c:	080401c8 	.word	0x080401c8

08084670 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 8084670:	b508      	push	{r3, lr}
 8084672:	4b02      	ldr	r3, [pc, #8]	; (808467c <network_get_listen_timeout+0xc>)
 8084674:	681b      	ldr	r3, [r3, #0]
 8084676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8084678:	9301      	str	r3, [sp, #4]
 808467a:	bd08      	pop	{r3, pc}
 808467c:	080401c8 	.word	0x080401c8

08084680 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 8084680:	b508      	push	{r3, lr}
 8084682:	4b02      	ldr	r3, [pc, #8]	; (808468c <spark_variable+0xc>)
 8084684:	681b      	ldr	r3, [r3, #0]
 8084686:	681b      	ldr	r3, [r3, #0]
 8084688:	9301      	str	r3, [sp, #4]
 808468a:	bd08      	pop	{r3, pc}
 808468c:	080401cc 	.word	0x080401cc

08084690 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 8084690:	b508      	push	{r3, lr}
 8084692:	4b02      	ldr	r3, [pc, #8]	; (808469c <spark_function+0xc>)
 8084694:	681b      	ldr	r3, [r3, #0]
 8084696:	685b      	ldr	r3, [r3, #4]
 8084698:	9301      	str	r3, [sp, #4]
 808469a:	bd08      	pop	{r3, pc}
 808469c:	080401cc 	.word	0x080401cc

080846a0 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80846a0:	b508      	push	{r3, lr}
 80846a2:	4b02      	ldr	r3, [pc, #8]	; (80846ac <spark_process+0xc>)
 80846a4:	681b      	ldr	r3, [r3, #0]
 80846a6:	689b      	ldr	r3, [r3, #8]
 80846a8:	9301      	str	r3, [sp, #4]
 80846aa:	bd08      	pop	{r3, pc}
 80846ac:	080401cc 	.word	0x080401cc

080846b0 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 80846b0:	b508      	push	{r3, lr}
 80846b2:	4b02      	ldr	r3, [pc, #8]	; (80846bc <spark_cloud_flag_connect+0xc>)
 80846b4:	681b      	ldr	r3, [r3, #0]
 80846b6:	68db      	ldr	r3, [r3, #12]
 80846b8:	9301      	str	r3, [sp, #4]
 80846ba:	bd08      	pop	{r3, pc}
 80846bc:	080401cc 	.word	0x080401cc

080846c0 <spark_cloud_flag_disconnect>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
 80846c0:	b508      	push	{r3, lr}
 80846c2:	4b02      	ldr	r3, [pc, #8]	; (80846cc <spark_cloud_flag_disconnect+0xc>)
 80846c4:	681b      	ldr	r3, [r3, #0]
 80846c6:	691b      	ldr	r3, [r3, #16]
 80846c8:	9301      	str	r3, [sp, #4]
 80846ca:	bd08      	pop	{r3, pc}
 80846cc:	080401cc 	.word	0x080401cc

080846d0 <spark_cloud_flag_connected>:
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80846d0:	b508      	push	{r3, lr}
 80846d2:	4b02      	ldr	r3, [pc, #8]	; (80846dc <spark_cloud_flag_connected+0xc>)
 80846d4:	681b      	ldr	r3, [r3, #0]
 80846d6:	695b      	ldr	r3, [r3, #20]
 80846d8:	9301      	str	r3, [sp, #4]
 80846da:	bd08      	pop	{r3, pc}
 80846dc:	080401cc 	.word	0x080401cc

080846e0 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 80846e0:	b508      	push	{r3, lr}
 80846e2:	4b02      	ldr	r3, [pc, #8]	; (80846ec <spark_deviceID+0xc>)
 80846e4:	681b      	ldr	r3, [r3, #0]
 80846e6:	69db      	ldr	r3, [r3, #28]
 80846e8:	9301      	str	r3, [sp, #4]
 80846ea:	bd08      	pop	{r3, pc}
 80846ec:	080401cc 	.word	0x080401cc

080846f0 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80846f0:	b508      	push	{r3, lr}
 80846f2:	4b02      	ldr	r3, [pc, #8]	; (80846fc <spark_send_event+0xc>)
 80846f4:	681b      	ldr	r3, [r3, #0]
 80846f6:	6a1b      	ldr	r3, [r3, #32]
 80846f8:	9301      	str	r3, [sp, #4]
 80846fa:	bd08      	pop	{r3, pc}
 80846fc:	080401cc 	.word	0x080401cc

08084700 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 8084700:	b508      	push	{r3, lr}
 8084702:	4b02      	ldr	r3, [pc, #8]	; (808470c <spark_subscribe+0xc>)
 8084704:	681b      	ldr	r3, [r3, #0]
 8084706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8084708:	9301      	str	r3, [sp, #4]
 808470a:	bd08      	pop	{r3, pc}
 808470c:	080401cc 	.word	0x080401cc

08084710 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 8084710:	b508      	push	{r3, lr}
 8084712:	4b02      	ldr	r3, [pc, #8]	; (808471c <spark_sync_time_pending+0xc>)
 8084714:	681b      	ldr	r3, [r3, #0]
 8084716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8084718:	9301      	str	r3, [sp, #4]
 808471a:	bd08      	pop	{r3, pc}
 808471c:	080401cc 	.word	0x080401cc

08084720 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8084720:	b508      	push	{r3, lr}
 8084722:	4b02      	ldr	r3, [pc, #8]	; (808472c <spark_set_random_seed_from_cloud_handler+0xc>)
 8084724:	681b      	ldr	r3, [r3, #0]
 8084726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8084728:	9301      	str	r3, [sp, #4]
 808472a:	bd08      	pop	{r3, pc}
 808472c:	080401cc 	.word	0x080401cc

08084730 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8084730:	b508      	push	{r3, lr}
 8084732:	4b02      	ldr	r3, [pc, #8]	; (808473c <malloc+0xc>)
 8084734:	681b      	ldr	r3, [r3, #0]
 8084736:	681b      	ldr	r3, [r3, #0]
 8084738:	9301      	str	r3, [sp, #4]
 808473a:	bd08      	pop	{r3, pc}
 808473c:	080401a0 	.word	0x080401a0

08084740 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8084740:	b508      	push	{r3, lr}
 8084742:	4b02      	ldr	r3, [pc, #8]	; (808474c <free+0xc>)
 8084744:	681b      	ldr	r3, [r3, #0]
 8084746:	685b      	ldr	r3, [r3, #4]
 8084748:	9301      	str	r3, [sp, #4]
 808474a:	bd08      	pop	{r3, pc}
 808474c:	080401a0 	.word	0x080401a0

08084750 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 8084750:	b508      	push	{r3, lr}
 8084752:	4b02      	ldr	r3, [pc, #8]	; (808475c <realloc+0xc>)
 8084754:	681b      	ldr	r3, [r3, #0]
 8084756:	689b      	ldr	r3, [r3, #8]
 8084758:	9301      	str	r3, [sp, #4]
 808475a:	bd08      	pop	{r3, pc}
 808475c:	080401a0 	.word	0x080401a0

08084760 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 8084760:	b508      	push	{r3, lr}
 8084762:	4b02      	ldr	r3, [pc, #8]	; (808476c <siprintf+0xc>)
 8084764:	681b      	ldr	r3, [r3, #0]
 8084766:	691b      	ldr	r3, [r3, #16]
 8084768:	9301      	str	r3, [sp, #4]
 808476a:	bd08      	pop	{r3, pc}
 808476c:	080401a0 	.word	0x080401a0

08084770 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 8084770:	b508      	push	{r3, lr}
 8084772:	4b02      	ldr	r3, [pc, #8]	; (808477c <siscanf+0xc>)
 8084774:	681b      	ldr	r3, [r3, #0]
 8084776:	699b      	ldr	r3, [r3, #24]
 8084778:	9301      	str	r3, [sp, #4]
 808477a:	bd08      	pop	{r3, pc}
 808477c:	080401a0 	.word	0x080401a0

08084780 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 8084780:	b508      	push	{r3, lr}
 8084782:	4b02      	ldr	r3, [pc, #8]	; (808478c <snprintf+0xc>)
 8084784:	681b      	ldr	r3, [r3, #0]
 8084786:	69db      	ldr	r3, [r3, #28]
 8084788:	9301      	str	r3, [sp, #4]
 808478a:	bd08      	pop	{r3, pc}
 808478c:	080401a0 	.word	0x080401a0

08084790 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
 8084790:	b508      	push	{r3, lr}
 8084792:	4b02      	ldr	r3, [pc, #8]	; (808479c <sniprintf+0xc>)
 8084794:	681b      	ldr	r3, [r3, #0]
 8084796:	6a1b      	ldr	r3, [r3, #32]
 8084798:	9301      	str	r3, [sp, #4]
 808479a:	bd08      	pop	{r3, pc}
 808479c:	080401a0 	.word	0x080401a0

080847a0 <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80847a0:	b508      	push	{r3, lr}
 80847a2:	4b02      	ldr	r3, [pc, #8]	; (80847ac <vsnprintf+0xc>)
 80847a4:	681b      	ldr	r3, [r3, #0]
 80847a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80847a8:	9301      	str	r3, [sp, #4]
 80847aa:	bd08      	pop	{r3, pc}
 80847ac:	080401a0 	.word	0x080401a0

080847b0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80847b0:	b508      	push	{r3, lr}
 80847b2:	4b02      	ldr	r3, [pc, #8]	; (80847bc <abort+0xc>)
 80847b4:	681b      	ldr	r3, [r3, #0]
 80847b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80847b8:	9301      	str	r3, [sp, #4]
 80847ba:	bd08      	pop	{r3, pc}
 80847bc:	080401a0 	.word	0x080401a0

080847c0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80847c0:	b508      	push	{r3, lr}
 80847c2:	4b02      	ldr	r3, [pc, #8]	; (80847cc <_malloc_r+0xc>)
 80847c4:	681b      	ldr	r3, [r3, #0]
 80847c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80847c8:	9301      	str	r3, [sp, #4]
 80847ca:	bd08      	pop	{r3, pc}
 80847cc:	080401a0 	.word	0x080401a0

080847d0 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 80847d0:	b508      	push	{r3, lr}
 80847d2:	4b02      	ldr	r3, [pc, #8]	; (80847dc <__errno+0xc>)
 80847d4:	681b      	ldr	r3, [r3, #0]
 80847d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80847d8:	9301      	str	r3, [sp, #4]
 80847da:	bd08      	pop	{r3, pc}
 80847dc:	080401a0 	.word	0x080401a0

080847e0 <_ZN4PMIC4lockEv>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
 80847e0:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80847e2:	f003 f8f3 	bl	80879cc <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}
 80847e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
 80847ea:	f002 bd2c 	b.w	8087246 <_ZN7TwoWire4lockEv>

080847ee <_ZN4PMICC1Eb>:

} // anonymous

#include <mutex>

PMIC::PMIC(bool _lock) :
 80847ee:	b510      	push	{r4, lr}
 80847f0:	4604      	mov	r4, r0
    lock_(_lock)
 80847f2:	7001      	strb	r1, [r0, #0]
{
    if (lock_) {
 80847f4:	b109      	cbz	r1, 80847fa <_ZN4PMICC1Eb+0xc>
        lock();
 80847f6:	f7ff fff3 	bl	80847e0 <_ZN4PMIC4lockEv>
    }
}
 80847fa:	4620      	mov	r0, r4
 80847fc:	bd10      	pop	{r4, pc}

080847fe <_ZN4PMIC6unlockEv>:

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
 80847fe:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8084800:	f003 f8e4 	bl	80879cc <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
}
 8084804:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
 8084808:	f002 bd26 	b.w	8087258 <_ZN7TwoWire6unlockEv>

0808480c <_ZN4PMICD1Ev>:
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 808480c:	b510      	push	{r4, lr}
{
    if (lock_) {
 808480e:	7803      	ldrb	r3, [r0, #0]
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 8084810:	4604      	mov	r4, r0
{
    if (lock_) {
 8084812:	b10b      	cbz	r3, 8084818 <_ZN4PMICD1Ev+0xc>
        unlock();
 8084814:	f7ff fff3 	bl	80847fe <_ZN4PMIC6unlockEv>
    }
}
 8084818:	4620      	mov	r0, r4
 808481a:	bd10      	pop	{r4, pc}

0808481c <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 808481c:	b510      	push	{r4, lr}
 808481e:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 8084820:	6800      	ldr	r0, [r0, #0]
 8084822:	f7ff ffec 	bl	80847fe <_ZN4PMIC6unlockEv>
 8084826:	4620      	mov	r0, r4
 8084828:	bd10      	pop	{r4, pc}

0808482a <_ZN4PMIC12readRegisterEh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
 808482a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808482c:	ac02      	add	r4, sp, #8
 808482e:	460d      	mov	r5, r1
 8084830:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 8084834:	f7ff ffd4 	bl	80847e0 <_ZN4PMIC4lockEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8084838:	f003 f8c8 	bl	80879cc <_Z20__fetch_global_Wire3v>
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
 808483c:	216b      	movs	r1, #107	; 0x6b
 808483e:	f002 fcf4 	bl	808722a <_ZN7TwoWire17beginTransmissionEi>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8084842:	f003 f8c3 	bl	80879cc <_Z20__fetch_global_Wire3v>
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
 8084846:	6803      	ldr	r3, [r0, #0]
 8084848:	4629      	mov	r1, r5
 808484a:	689b      	ldr	r3, [r3, #8]
 808484c:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808484e:	f003 f8bd 	bl	80879cc <_Z20__fetch_global_Wire3v>
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);
 8084852:	2101      	movs	r1, #1
 8084854:	f002 fcec 	bl	8087230 <_ZN7TwoWire15endTransmissionEh>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8084858:	f003 f8b8 	bl	80879cc <_Z20__fetch_global_Wire3v>
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
 808485c:	2301      	movs	r3, #1
 808485e:	461a      	mov	r2, r3
 8084860:	216b      	movs	r1, #107	; 0x6b
 8084862:	f002 fcc9 	bl	80871f8 <_ZN7TwoWire11requestFromEhjh>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8084866:	f003 f8b1 	bl	80879cc <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
 808486a:	6803      	ldr	r3, [r0, #0]
 808486c:	695b      	ldr	r3, [r3, #20]
 808486e:	4798      	blx	r3
 8084870:	4605      	mov	r5, r0
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
 8084872:	4620      	mov	r0, r4
 8084874:	f7ff ffd2 	bl	808481c <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
    return DATA;
}
 8084878:	b2e8      	uxtb	r0, r5
 808487a:	b003      	add	sp, #12
 808487c:	bd30      	pop	{r4, r5, pc}

0808487e <_ZN4PMIC11isPowerGoodEv>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
bool PMIC::isPowerGood(void) {
 808487e:	b508      	push	{r3, lr}

    byte DATA = 0;
    DATA = readRegister(SYSTEM_STATUS_REGISTER);
 8084880:	2108      	movs	r1, #8
 8084882:	f7ff ffd2 	bl	808482a <_ZN4PMIC12readRegisterEh>
    if(DATA & 0b00000100) return 1;
    else return 0;
}
 8084886:	f3c0 0080 	ubfx	r0, r0, #2, #1
 808488a:	bd08      	pop	{r3, pc}

0808488c <_ZN4PMIC15getSystemStatusEv>:
 * Return         :
 *******************************************************************************/
byte PMIC::getSystemStatus() {

    byte DATA = 0;
    DATA = readRegister(SYSTEM_STATUS_REGISTER);
 808488c:	2108      	movs	r1, #8
 808488e:	f7ff bfcc 	b.w	808482a <_ZN4PMIC12readRegisterEh>

08084892 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 8084892:	6800      	ldr	r0, [r0, #0]
 8084894:	f7ff bcf6 	b.w	8084284 <os_mutex_recursive_lock>

08084898 <_ZN14RecursiveMutex6unlockEv>:
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 8084898:	6800      	ldr	r0, [r0, #0]
 808489a:	f7ff bcfb 	b.w	8084294 <os_mutex_recursive_unlock>

0808489e <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
 808489e:	b570      	push	{r4, r5, r6, lr}
 80848a0:	4604      	mov	r4, r0
 80848a2:	460e      	mov	r6, r1
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80848a4:	2500      	movs	r5, #0
 80848a6:	f840 5f08 	str.w	r5, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80848aa:	f7ff fcdb 	bl	8084264 <os_mutex_recursive_create>
{
    _spi = spi;
    HAL_SPI_Init(_spi);
 80848ae:	4630      	mov	r0, r6
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
    _spi = spi;
 80848b0:	7026      	strb	r6, [r4, #0]
    HAL_SPI_Init(_spi);
 80848b2:	f7ff fc27 	bl	8084104 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80848b6:	6065      	str	r5, [r4, #4]
}
 80848b8:	4620      	mov	r0, r4
 80848ba:	bd70      	pop	{r4, r5, r6, pc}

080848bc <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 80848bc:	b538      	push	{r3, r4, r5, lr}
 80848be:	4605      	mov	r5, r0
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 80848c0:	f100 0408 	add.w	r4, r0, #8
 80848c4:	4620      	mov	r0, r4
 80848c6:	f7ff ffe4 	bl	8084892 <_ZN14RecursiveMutex4lockEv>
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 80848ca:	7828      	ldrb	r0, [r5, #0]
 80848cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80848d0:	f7ff fbf0 	bl	80840b4 <HAL_SPI_Begin>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 80848d4:	4620      	mov	r0, r4
 80848d6:	f7ff ffdf 	bl	8084898 <_ZN14RecursiveMutex6unlockEv>
 80848da:	bd38      	pop	{r3, r4, r5, pc}

080848dc <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
 80848dc:	b570      	push	{r4, r5, r6, lr}
 80848de:	4605      	mov	r5, r0
 80848e0:	460e      	mov	r6, r1
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 80848e2:	f100 0408 	add.w	r4, r0, #8
 80848e6:	4620      	mov	r0, r4
 80848e8:	f7ff ffd3 	bl	8084892 <_ZN14RecursiveMutex4lockEv>
    if (!lock())
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
 80848ec:	7828      	ldrb	r0, [r5, #0]
 80848ee:	4631      	mov	r1, r6
 80848f0:	f7ff fbe8 	bl	80840c4 <HAL_SPI_Set_Bit_Order>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 80848f4:	4620      	mov	r0, r4
 80848f6:	f7ff ffcf 	bl	8084898 <_ZN14RecursiveMutex6unlockEv>
 80848fa:	bd70      	pop	{r4, r5, r6, pc}

080848fc <_ZN8SPIClass11setDataModeEh>:
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
 80848fc:	b570      	push	{r4, r5, r6, lr}
 80848fe:	4605      	mov	r5, r0
 8084900:	460e      	mov	r6, r1
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 8084902:	f100 0408 	add.w	r4, r0, #8
 8084906:	4620      	mov	r0, r4
 8084908:	f7ff ffc3 	bl	8084892 <_ZN14RecursiveMutex4lockEv>
    if (!lock())
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
 808490c:	7828      	ldrb	r0, [r5, #0]
 808490e:	4631      	mov	r1, r6
 8084910:	f7ff fbe0 	bl	80840d4 <HAL_SPI_Set_Data_Mode>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 8084914:	4620      	mov	r0, r4
 8084916:	f7ff ffbf 	bl	8084898 <_ZN14RecursiveMutex6unlockEv>
 808491a:	bd70      	pop	{r4, r5, r6, pc}

0808491c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 808491c:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 808491e:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 8084920:	6018      	str	r0, [r3, #0]
 8084922:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
 8084924:	6818      	ldr	r0, [r3, #0]
 8084926:	b2e5      	uxtb	r5, r4
 8084928:	4288      	cmp	r0, r1
 808492a:	d906      	bls.n	808493a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 808492c:	3401      	adds	r4, #1
 808492e:	2c08      	cmp	r4, #8
 8084930:	d002      	beq.n	8084938 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 8084932:	0840      	lsrs	r0, r0, #1
 8084934:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
 8084936:	e7f5      	b.n	8084924 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 8084938:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 808493a:	4b02      	ldr	r3, [pc, #8]	; (8084944 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 808493c:	5d5b      	ldrb	r3, [r3, r5]
 808493e:	7013      	strb	r3, [r2, #0]
 8084940:	bd30      	pop	{r4, r5, pc}
 8084942:	bf00      	nop
 8084944:	0808b1dd 	.word	0x0808b1dd

08084948 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 8084948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808494c:	4605      	mov	r5, r0
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 808494e:	f100 0608 	add.w	r6, r0, #8
 8084952:	b088      	sub	sp, #32
    unsigned clock = 0;
 8084954:	2400      	movs	r4, #0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;
 8084956:	fb02 f701 	mul.w	r7, r2, r1
 808495a:	4630      	mov	r0, r6
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
 808495c:	9402      	str	r4, [sp, #8]
 808495e:	f7ff ff98 	bl	8084892 <_ZN14RecursiveMutex4lockEv>

    if (!lock())
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
 8084962:	f895 8000 	ldrb.w	r8, [r5]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
 8084966:	4621      	mov	r1, r4
 8084968:	2214      	movs	r2, #20
 808496a:	a803      	add	r0, sp, #12
 808496c:	f004 fc62 	bl	8089234 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 8084970:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
 8084972:	4622      	mov	r2, r4
 8084974:	a903      	add	r1, sp, #12
 8084976:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
 8084978:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
 808497c:	f7ff fbd2 	bl	8084124 <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 8084980:	ab02      	add	r3, sp, #8
 8084982:	f10d 0207 	add.w	r2, sp, #7
 8084986:	4639      	mov	r1, r7
 8084988:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
 808498a:	f88d 4007 	strb.w	r4, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 808498e:	f7ff ffc5 	bl	808491c <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
 8084992:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8084996:	7828      	ldrb	r0, [r5, #0]
 8084998:	f7ff fba4 	bl	80840e4 <HAL_SPI_Set_Clock_Divider>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 808499c:	4630      	mov	r0, r6
 808499e:	f7ff ff7b 	bl	8084898 <_ZN14RecursiveMutex6unlockEv>
        unlock();
    }

    return clock;
}
 80849a2:	9802      	ldr	r0, [sp, #8]
 80849a4:	b008      	add	sp, #32
 80849a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080849aa <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
 80849aa:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
 80849ac:	7800      	ldrb	r0, [r0, #0]
 80849ae:	f7ff fba1 	bl	80840f4 <HAL_SPI_Send_Receive_Data>
}
 80849b2:	b2c0      	uxtb	r0, r0
 80849b4:	bd08      	pop	{r3, pc}

080849b6 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
 80849b6:	7800      	ldrb	r0, [r0, #0]
 80849b8:	f7ff bbac 	b.w	8084114 <HAL_SPI_Is_Enabled>

080849bc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80849bc:	b510      	push	{r4, lr}
 80849be:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80849c0:	6800      	ldr	r0, [r0, #0]
 80849c2:	b118      	cbz	r0, 80849cc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
 80849c4:	f7ff febc 	bl	8084740 <free>
            wakeupSource_ = nullptr;
 80849c8:	2300      	movs	r3, #0
 80849ca:	6023      	str	r3, [r4, #0]
 80849cc:	bd10      	pop	{r4, pc}

080849ce <_ZN17SystemSleepResultaSEOS_>:
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
 80849ce:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
 80849d0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
 80849d4:	460d      	mov	r5, r1
        error_ = result.error_;
 80849d6:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
 80849d8:	460b      	mov	r3, r1
 80849da:	f853 2f06 	ldr.w	r2, [r3, #6]!
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
 80849de:	4604      	mov	r4, r0
        error_ = result.error_;
        compatResult_ = result.compatResult_;
 80849e0:	f8c0 2006 	str.w	r2, [r0, #6]
 80849e4:	889b      	ldrh	r3, [r3, #4]
 80849e6:	8143      	strh	r3, [r0, #10]
        freeWakeupSourceMemory();
 80849e8:	f7ff ffe8 	bl	80849bc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (result.wakeupSource_) {
 80849ec:	682b      	ldr	r3, [r5, #0]
 80849ee:	b113      	cbz	r3, 80849f6 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
 80849f0:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
 80849f2:	2300      	movs	r3, #0
 80849f4:	602b      	str	r3, [r5, #0]
        }
        return *this;
    }
 80849f6:	4620      	mov	r0, r4
 80849f8:	bd38      	pop	{r3, r4, r5, pc}

080849fa <_ZN17SystemSleepResult13toSleepResultEv>:
    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
 80849fa:	f9b1 3004 	ldrsh.w	r3, [r1, #4]

    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
 80849fe:	b510      	push	{r4, lr}
        if (error_ || wakeupSource_) {
 8084a00:	b90b      	cbnz	r3, 8084a06 <_ZN17SystemSleepResult13toSleepResultEv+0xc>
 8084a02:	680a      	ldr	r2, [r1, #0]
 8084a04:	b19a      	cbz	r2, 8084a2e <_ZN17SystemSleepResult13toSleepResultEv+0x34>
 8084a06:	680c      	ldr	r4, [r1, #0]
    hal_wakeup_source_base_t** halWakeupSource() {
        return &wakeupSource_;
    }

    SystemSleepWakeupReason wakeupReason() const {
        if (wakeupSource_) {
 8084a08:	b15c      	cbz	r4, 8084a22 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
 8084a0a:	88a2      	ldrh	r2, [r4, #4]
 8084a0c:	2a01      	cmp	r2, #1
 8084a0e:	d003      	beq.n	8084a18 <_ZN17SystemSleepResult13toSleepResultEv+0x1e>
 8084a10:	2a04      	cmp	r2, #4
 8084a12:	d106      	bne.n	8084a22 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
                    break;
                }
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
 8084a14:	2202      	movs	r2, #2
 8084a16:	e005      	b.n	8084a24 <_ZN17SystemSleepResult13toSleepResultEv+0x2a>
        }
    }

    pin_t wakeupPin() const {
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
 8084a18:	89a4      	ldrh	r4, [r4, #12]

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
 8084a1a:	718a      	strb	r2, [r1, #6]
 8084a1c:	810b      	strh	r3, [r1, #8]
 8084a1e:	814c      	strh	r4, [r1, #10]
                    break;
 8084a20:	e005      	b.n	8084a2e <_ZN17SystemSleepResult13toSleepResultEv+0x34>
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
                    break;
                }
                default: {
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 8084a22:	2204      	movs	r2, #4
 8084a24:	810b      	strh	r3, [r1, #8]
 8084a26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8084a2a:	718a      	strb	r2, [r1, #6]
 8084a2c:	814b      	strh	r3, [r1, #10]
                    break;
                }
            }
        }
        return compatResult_;
 8084a2e:	f851 3f06 	ldr.w	r3, [r1, #6]!
 8084a32:	6003      	str	r3, [r0, #0]
 8084a34:	888b      	ldrh	r3, [r1, #4]
 8084a36:	8083      	strh	r3, [r0, #4]
    }
 8084a38:	bd10      	pop	{r4, pc}

08084a3a <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
 8084a3a:	4601      	mov	r1, r0
 8084a3c:	2200      	movs	r2, #0
 8084a3e:	208c      	movs	r0, #140	; 0x8c
 8084a40:	f7ff bbb0 	b.w	80841a4 <HAL_Core_System_Reset_Ex>

08084a44 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
 8084a44:	2000      	movs	r0, #0
 8084a46:	f7ff bff8 	b.w	8084a3a <_ZN11SystemClass5resetEm>
	...

08084a4c <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
    }
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
 8084a4c:	b530      	push	{r4, r5, lr}
 8084a4e:	4604      	mov	r4, r0
 8084a50:	b085      	sub	sp, #20
 8084a52:	4608      	mov	r0, r1
 8084a54:	4611      	mov	r1, r2
 8084a56:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
 8084a58:	2300      	movs	r3, #0
 8084a5a:	f7ff fd73 	bl	8084544 <system_sleep>
    }

    SystemSleepResult(SleepResult r)
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE),
              compatResult_(r) {
 8084a5e:	2300      	movs	r3, #0
 8084a60:	9301      	str	r3, [sp, #4]
 8084a62:	f8ad 3008 	strh.w	r3, [sp, #8]
 8084a66:	f88d 300a 	strb.w	r3, [sp, #10]
 8084a6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
 8084a6e:	4d09      	ldr	r5, [pc, #36]	; (8084a94 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
 8084a70:	a901      	add	r1, sp, #4
 8084a72:	f8ad 000c 	strh.w	r0, [sp, #12]
 8084a76:	4628      	mov	r0, r5
 8084a78:	f8ad 300e 	strh.w	r3, [sp, #14]
 8084a7c:	f7ff ffa7 	bl	80849ce <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 8084a80:	a801      	add	r0, sp, #4
 8084a82:	f7ff ff9b 	bl	80849bc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        }
        return compatResult_;
    }

    operator SleepResult() {
        return toSleepResult();
 8084a86:	4620      	mov	r0, r4
 8084a88:	4629      	mov	r1, r5
 8084a8a:	f7ff ffb6 	bl	80849fa <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
 8084a8e:	4620      	mov	r0, r4
 8084a90:	b005      	add	sp, #20
 8084a92:	bd30      	pop	{r4, r5, pc}
 8084a94:	200003d4 	.word	0x200003d4

08084a98 <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
 8084a98:	b510      	push	{r4, lr}
 8084a9a:	2400      	movs	r4, #0
 8084a9c:	7004      	strb	r4, [r0, #0]
 8084a9e:	8044      	strh	r4, [r0, #2]
 8084aa0:	f64f 74ff 	movw	r4, #65535	; 0xffff
    if (ret > 0) {
 8084aa4:	2900      	cmp	r1, #0
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
 8084aa6:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
 8084aa8:	dd07      	ble.n	8084aba <_ZN11SleepResultC1EiPKtj+0x22>
        // pin
        --ret;
        if ((size_t)ret < pinsSize) {
 8084aaa:	3901      	subs	r1, #1
 8084aac:	4299      	cmp	r1, r3
 8084aae:	d209      	bcs.n	8084ac4 <_ZN11SleepResultC1EiPKtj+0x2c>
            pin_ = pins[ret];
 8084ab0:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
 8084ab4:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
 8084ab6:	2301      	movs	r3, #1
 8084ab8:	e001      	b.n	8084abe <_ZN11SleepResultC1EiPKtj+0x26>
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
 8084aba:	d102      	bne.n	8084ac2 <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
 8084abc:	2302      	movs	r3, #2
 8084abe:	7003      	strb	r3, [r0, #0]
 8084ac0:	bd10      	pop	{r4, pc}
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
 8084ac2:	8041      	strh	r1, [r0, #2]
    }
}
 8084ac4:	bd10      	pop	{r4, pc}
	...

08084ac8 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 8084ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8084aca:	460e      	mov	r6, r1
 8084acc:	4617      	mov	r7, r2
 8084ace:	b08b      	sub	sp, #44	; 0x2c
 8084ad0:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 8084ad2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8084ad4:	2400      	movs	r4, #0
 8084ad6:	9301      	str	r3, [sp, #4]
 8084ad8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 8084ada:	4605      	mov	r5, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 8084adc:	9402      	str	r4, [sp, #8]
 8084ade:	9300      	str	r3, [sp, #0]
 8084ae0:	4639      	mov	r1, r7
 8084ae2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8084ae4:	4630      	mov	r0, r6
 8084ae6:	f7ff fd71 	bl	80845cc <system_sleep_pins>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
 8084aea:	463b      	mov	r3, r7
 8084aec:	4632      	mov	r2, r6
 8084aee:	4601      	mov	r1, r0
 8084af0:	a805      	add	r0, sp, #20
 8084af2:	f7ff ffd1 	bl	8084a98 <_ZN11SleepResultC1EiPKtj>
 8084af6:	f89d 1014 	ldrb.w	r1, [sp, #20]
    }

    SystemSleepResult(SleepResult r)
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE),
              compatResult_(r) {
 8084afa:	9407      	str	r4, [sp, #28]
 8084afc:	f8ad 4020 	strh.w	r4, [sp, #32]
 8084b00:	4c0c      	ldr	r4, [pc, #48]	; (8084b34 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x6c>)
 8084b02:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 8084b06:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8084b0a:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
 8084b0e:	4620      	mov	r0, r4
 8084b10:	a907      	add	r1, sp, #28
 8084b12:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8084b16:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8084b1a:	f7ff ff58 	bl	80849ce <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 8084b1e:	a807      	add	r0, sp, #28
 8084b20:	f7ff ff4c 	bl	80849bc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        }
        return compatResult_;
    }

    operator SleepResult() {
        return toSleepResult();
 8084b24:	4628      	mov	r0, r5
 8084b26:	4621      	mov	r1, r4
 8084b28:	f7ff ff67 	bl	80849fa <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
 8084b2c:	4628      	mov	r0, r5
 8084b2e:	b00b      	add	sp, #44	; 0x2c
 8084b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8084b32:	bf00      	nop
 8084b34:	200003d4 	.word	0x200003d4

08084b38 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 8084b38:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 8084b3c:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 8084b3e:	4c08      	ldr	r4, [pc, #32]	; (8084b60 <_GLOBAL__sub_I_System+0x28>)
 8084b40:	2000      	movs	r0, #0
 8084b42:	6020      	str	r0, [r4, #0]
 8084b44:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 8084b46:	71a0      	strb	r0, [r4, #6]
 8084b48:	8120      	strh	r0, [r4, #8]
 8084b4a:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8084b4c:	f7ff fcea 	bl	8084524 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 8084b50:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 8084b52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 8084b56:	4a03      	ldr	r2, [pc, #12]	; (8084b64 <_GLOBAL__sub_I_System+0x2c>)
 8084b58:	4903      	ldr	r1, [pc, #12]	; (8084b68 <_GLOBAL__sub_I_System+0x30>)
 8084b5a:	f002 bf5d 	b.w	8087a18 <__aeabi_atexit>
 8084b5e:	bf00      	nop
 8084b60:	200003d4 	.word	0x200003d4
 8084b64:	20000180 	.word	0x20000180
 8084b68:	08080275 	.word	0x08080275

08084b6c <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8084b6c:	2300      	movs	r3, #0
 8084b6e:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8084b70:	6043      	str	r3, [r0, #4]
	len = 0;
 8084b72:	6083      	str	r3, [r0, #8]
	flags = 0;
 8084b74:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
 8084b76:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
 8084b78:	680c      	ldr	r4, [r1, #0]
 8084b7a:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
 8084b7c:	684c      	ldr	r4, [r1, #4]
 8084b7e:	6044      	str	r4, [r0, #4]
	len = rhs.len;
 8084b80:	688c      	ldr	r4, [r1, #8]
 8084b82:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
 8084b84:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
 8084b86:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
 8084b88:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
 8084b8a:	bd10      	pop	{r4, pc}

08084b8c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8084b8c:	b510      	push	{r4, lr}
 8084b8e:	4604      	mov	r4, r0
{
	free(buffer);
 8084b90:	6800      	ldr	r0, [r0, #0]
 8084b92:	f7ff fdd5 	bl	8084740 <free>
}
 8084b96:	4620      	mov	r0, r4
 8084b98:	bd10      	pop	{r4, pc}

08084b9a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 8084b9a:	b510      	push	{r4, lr}
 8084b9c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 8084b9e:	6800      	ldr	r0, [r0, #0]
 8084ba0:	b108      	cbz	r0, 8084ba6 <_ZN6String10invalidateEv+0xc>
 8084ba2:	f7ff fdcd 	bl	8084740 <free>
	buffer = NULL;
 8084ba6:	2300      	movs	r3, #0
 8084ba8:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 8084baa:	60a3      	str	r3, [r4, #8]
 8084bac:	6063      	str	r3, [r4, #4]
 8084bae:	bd10      	pop	{r4, pc}

08084bb0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 8084bb0:	b538      	push	{r3, r4, r5, lr}
 8084bb2:	4604      	mov	r4, r0
 8084bb4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 8084bb6:	6800      	ldr	r0, [r0, #0]
 8084bb8:	3101      	adds	r1, #1
 8084bba:	f7ff fdc9 	bl	8084750 <realloc>
	if (newbuffer) {
 8084bbe:	b110      	cbz	r0, 8084bc6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 8084bc0:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 8084bc4:	2001      	movs	r0, #1
	}
	return 0;
}
 8084bc6:	bd38      	pop	{r3, r4, r5, pc}

08084bc8 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8084bc8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 8084bca:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8084bcc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 8084bce:	b113      	cbz	r3, 8084bd6 <_ZN6String7reserveEj+0xe>
 8084bd0:	6843      	ldr	r3, [r0, #4]
 8084bd2:	428b      	cmp	r3, r1
 8084bd4:	d207      	bcs.n	8084be6 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 8084bd6:	4620      	mov	r0, r4
 8084bd8:	f7ff ffea 	bl	8084bb0 <_ZN6String12changeBufferEj>
 8084bdc:	b120      	cbz	r0, 8084be8 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 8084bde:	68a3      	ldr	r3, [r4, #8]
 8084be0:	b90b      	cbnz	r3, 8084be6 <_ZN6String7reserveEj+0x1e>
 8084be2:	6822      	ldr	r2, [r4, #0]
 8084be4:	7013      	strb	r3, [r2, #0]
 8084be6:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 8084be8:	bd10      	pop	{r4, pc}

08084bea <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8084bea:	b570      	push	{r4, r5, r6, lr}
 8084bec:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8084bee:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8084bf0:	4604      	mov	r4, r0
 8084bf2:	4615      	mov	r5, r2
	if (!reserve(length)) {
 8084bf4:	f7ff ffe8 	bl	8084bc8 <_ZN6String7reserveEj>
 8084bf8:	b918      	cbnz	r0, 8084c02 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 8084bfa:	4620      	mov	r0, r4
 8084bfc:	f7ff ffcd 	bl	8084b9a <_ZN6String10invalidateEv>
		return *this;
 8084c00:	e009      	b.n	8084c16 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 8084c02:	462a      	mov	r2, r5
 8084c04:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 8084c06:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 8084c08:	6820      	ldr	r0, [r4, #0]
 8084c0a:	f004 faed 	bl	80891e8 <memcpy>
	buffer[len] = 0;
 8084c0e:	6822      	ldr	r2, [r4, #0]
 8084c10:	68a3      	ldr	r3, [r4, #8]
 8084c12:	2100      	movs	r1, #0
 8084c14:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 8084c16:	4620      	mov	r0, r4
 8084c18:	bd70      	pop	{r4, r5, r6, pc}

08084c1a <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8084c1a:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8084c1c:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8084c1e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8084c20:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8084c22:	6043      	str	r3, [r0, #4]
	len = 0;
 8084c24:	6083      	str	r3, [r0, #8]
	flags = 0;
 8084c26:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 8084c28:	460d      	mov	r5, r1
 8084c2a:	b139      	cbz	r1, 8084c3c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 8084c2c:	4608      	mov	r0, r1
 8084c2e:	f005 f88b 	bl	8089d48 <strlen>
 8084c32:	4629      	mov	r1, r5
 8084c34:	4602      	mov	r2, r0
 8084c36:	4620      	mov	r0, r4
 8084c38:	f7ff ffd7 	bl	8084bea <_ZN6String4copyEPKcj>
}
 8084c3c:	4620      	mov	r0, r4
 8084c3e:	bd38      	pop	{r3, r4, r5, pc}

08084c40 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 8084c40:	b538      	push	{r3, r4, r5, lr}
 8084c42:	4605      	mov	r5, r0
	if (buffer) {
 8084c44:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 8084c46:	460c      	mov	r4, r1
	if (buffer) {
 8084c48:	b160      	cbz	r0, 8084c64 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
 8084c4a:	686a      	ldr	r2, [r5, #4]
 8084c4c:	688b      	ldr	r3, [r1, #8]
 8084c4e:	429a      	cmp	r2, r3
 8084c50:	d306      	bcc.n	8084c60 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
 8084c52:	6809      	ldr	r1, [r1, #0]
 8084c54:	f004 fb40 	bl	80892d8 <strcpy>
			len = rhs.len;
 8084c58:	68a3      	ldr	r3, [r4, #8]
 8084c5a:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 8084c5c:	2300      	movs	r3, #0
 8084c5e:	e00a      	b.n	8084c76 <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
 8084c60:	f7ff fd6e 	bl	8084740 <free>
		}
	}
	buffer = rhs.buffer;
 8084c64:	6823      	ldr	r3, [r4, #0]
 8084c66:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 8084c68:	6863      	ldr	r3, [r4, #4]
 8084c6a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 8084c6c:	68a3      	ldr	r3, [r4, #8]
 8084c6e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 8084c70:	2300      	movs	r3, #0
 8084c72:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
 8084c74:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
 8084c76:	60a3      	str	r3, [r4, #8]
 8084c78:	bd38      	pop	{r3, r4, r5, pc}

08084c7a <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8084c7a:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 8084c7c:	b510      	push	{r4, lr}
 8084c7e:	460b      	mov	r3, r1
 8084c80:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 8084c82:	d007      	beq.n	8084c94 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 8084c84:	6809      	ldr	r1, [r1, #0]
 8084c86:	b119      	cbz	r1, 8084c90 <_ZN6StringaSERKS_+0x16>
 8084c88:	689a      	ldr	r2, [r3, #8]
 8084c8a:	f7ff ffae 	bl	8084bea <_ZN6String4copyEPKcj>
 8084c8e:	e001      	b.n	8084c94 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 8084c90:	f7ff ff83 	bl	8084b9a <_ZN6String10invalidateEv>

	return *this;
}
 8084c94:	4620      	mov	r0, r4
 8084c96:	bd10      	pop	{r4, pc}

08084c98 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 8084c98:	b510      	push	{r4, lr}
 8084c9a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8084c9c:	2300      	movs	r3, #0
 8084c9e:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8084ca0:	6043      	str	r3, [r0, #4]
	len = 0;
 8084ca2:	6083      	str	r3, [r0, #8]
	flags = 0;
 8084ca4:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 8084ca6:	f7ff ffe8 	bl	8084c7a <_ZN6StringaSERKS_>
}
 8084caa:	4620      	mov	r0, r4
 8084cac:	bd10      	pop	{r4, pc}

08084cae <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 8084cae:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
 8084cb0:	b510      	push	{r4, lr}
 8084cb2:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 8084cb4:	d001      	beq.n	8084cba <_ZN6StringaSEOS_+0xc>
 8084cb6:	f7ff ffc3 	bl	8084c40 <_ZN6String4moveERS_>
	return *this;
}
 8084cba:	4620      	mov	r0, r4
 8084cbc:	bd10      	pop	{r4, pc}

08084cbe <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 8084cbe:	b538      	push	{r3, r4, r5, lr}
 8084cc0:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 8084cc2:	460c      	mov	r4, r1
 8084cc4:	b141      	cbz	r1, 8084cd8 <_ZN6StringaSEPKc+0x1a>
 8084cc6:	4608      	mov	r0, r1
 8084cc8:	f005 f83e 	bl	8089d48 <strlen>
 8084ccc:	4621      	mov	r1, r4
 8084cce:	4602      	mov	r2, r0
 8084cd0:	4628      	mov	r0, r5
 8084cd2:	f7ff ff8a 	bl	8084bea <_ZN6String4copyEPKcj>
 8084cd6:	e001      	b.n	8084cdc <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 8084cd8:	f7ff ff5f 	bl	8084b9a <_ZN6String10invalidateEv>

	return *this;
}
 8084cdc:	4628      	mov	r0, r5
 8084cde:	bd38      	pop	{r3, r4, r5, pc}

08084ce0 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 8084ce0:	b570      	push	{r4, r5, r6, lr}
 8084ce2:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 8084ce4:	460e      	mov	r6, r1
 8084ce6:	b909      	cbnz	r1, 8084cec <_ZN6String6concatEPKcj+0xc>
 8084ce8:	2000      	movs	r0, #0
 8084cea:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 8084cec:	b16a      	cbz	r2, 8084d0a <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 8084cee:	6883      	ldr	r3, [r0, #8]
 8084cf0:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 8084cf2:	4629      	mov	r1, r5
 8084cf4:	f7ff ff68 	bl	8084bc8 <_ZN6String7reserveEj>
 8084cf8:	2800      	cmp	r0, #0
 8084cfa:	d0f5      	beq.n	8084ce8 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 8084cfc:	6820      	ldr	r0, [r4, #0]
 8084cfe:	68a3      	ldr	r3, [r4, #8]
 8084d00:	4631      	mov	r1, r6
 8084d02:	4418      	add	r0, r3
 8084d04:	f004 fae8 	bl	80892d8 <strcpy>
	len = newlen;
 8084d08:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 8084d0a:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 8084d0c:	bd70      	pop	{r4, r5, r6, pc}

08084d0e <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 8084d0e:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 8084d10:	688a      	ldr	r2, [r1, #8]
 8084d12:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 8084d14:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 8084d16:	f7ff ffe3 	bl	8084ce0 <_ZN6String6concatEPKcj>
 8084d1a:	b910      	cbnz	r0, 8084d22 <_ZplRK15StringSumHelperRK6String+0x14>
 8084d1c:	4620      	mov	r0, r4
 8084d1e:	f7ff ff3c 	bl	8084b9a <_ZN6String10invalidateEv>
	return a;
}
 8084d22:	4620      	mov	r0, r4
 8084d24:	bd10      	pop	{r4, pc}

08084d26 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 8084d26:	b538      	push	{r3, r4, r5, lr}
 8084d28:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 8084d2a:	460d      	mov	r5, r1
 8084d2c:	b141      	cbz	r1, 8084d40 <_ZplRK15StringSumHelperPKc+0x1a>
 8084d2e:	4608      	mov	r0, r1
 8084d30:	f005 f80a 	bl	8089d48 <strlen>
 8084d34:	4629      	mov	r1, r5
 8084d36:	4602      	mov	r2, r0
 8084d38:	4620      	mov	r0, r4
 8084d3a:	f7ff ffd1 	bl	8084ce0 <_ZN6String6concatEPKcj>
 8084d3e:	b910      	cbnz	r0, 8084d46 <_ZplRK15StringSumHelperPKc+0x20>
 8084d40:	4620      	mov	r0, r4
 8084d42:	f7ff ff2a 	bl	8084b9a <_ZN6String10invalidateEv>
	return a;
}
 8084d46:	4620      	mov	r0, r4
 8084d48:	bd38      	pop	{r3, r4, r5, pc}

08084d4a <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8084d4a:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8084d4c:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8084d4e:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8084d50:	b912      	cbnz	r2, 8084d58 <_ZNK6String6equalsEPKc+0xe>
 8084d52:	b919      	cbnz	r1, 8084d5c <_ZNK6String6equalsEPKc+0x12>
 8084d54:	2001      	movs	r0, #1
 8084d56:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 8084d58:	b911      	cbnz	r1, 8084d60 <_ZNK6String6equalsEPKc+0x16>
 8084d5a:	6803      	ldr	r3, [r0, #0]
 8084d5c:	7818      	ldrb	r0, [r3, #0]
 8084d5e:	e002      	b.n	8084d66 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 8084d60:	6800      	ldr	r0, [r0, #0]
 8084d62:	f004 faaf 	bl	80892c4 <strcmp>
 8084d66:	fab0 f080 	clz	r0, r0
 8084d6a:	0940      	lsrs	r0, r0, #5
}
 8084d6c:	bd08      	pop	{r3, pc}

08084d6e <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
 8084d6e:	b510      	push	{r4, lr}
 8084d70:	4614      	mov	r4, r2
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
 8084d72:	6883      	ldr	r3, [r0, #8]
 8084d74:	688a      	ldr	r2, [r1, #8]
 8084d76:	1a9b      	subs	r3, r3, r2
 8084d78:	42a3      	cmp	r3, r4
 8084d7a:	d30a      	bcc.n	8084d92 <_ZNK6String10startsWithERKS_j+0x24>
 8084d7c:	6800      	ldr	r0, [r0, #0]
 8084d7e:	b158      	cbz	r0, 8084d98 <_ZNK6String10startsWithERKS_j+0x2a>
 8084d80:	6809      	ldr	r1, [r1, #0]
 8084d82:	b141      	cbz	r1, 8084d96 <_ZNK6String10startsWithERKS_j+0x28>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
 8084d84:	4420      	add	r0, r4
 8084d86:	f004 ffe7 	bl	8089d58 <strncmp>
 8084d8a:	fab0 f080 	clz	r0, r0
 8084d8e:	0940      	lsrs	r0, r0, #5
 8084d90:	bd10      	pop	{r4, pc}
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
 8084d92:	2000      	movs	r0, #0
 8084d94:	bd10      	pop	{r4, pc}
 8084d96:	4608      	mov	r0, r1
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}
 8084d98:	bd10      	pop	{r4, pc}

08084d9a <_ZNK6String10startsWithERKS_>:
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
 8084d9a:	6882      	ldr	r2, [r0, #8]
 8084d9c:	688b      	ldr	r3, [r1, #8]
 8084d9e:	429a      	cmp	r2, r3
 8084da0:	d302      	bcc.n	8084da8 <_ZNK6String10startsWithERKS_+0xe>
	return startsWith(s2, 0);
 8084da2:	2200      	movs	r2, #0
 8084da4:	f7ff bfe3 	b.w	8084d6e <_ZNK6String10startsWithERKS_j>
}
 8084da8:	2000      	movs	r0, #0
 8084daa:	4770      	bx	lr

08084dac <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
 8084dac:	6883      	ldr	r3, [r0, #8]
 8084dae:	428b      	cmp	r3, r1
 8084db0:	d903      	bls.n	8084dba <_ZNK6StringixEj+0xe>
 8084db2:	6800      	ldr	r0, [r0, #0]
 8084db4:	b110      	cbz	r0, 8084dbc <_ZNK6StringixEj+0x10>
	return buffer[index];
 8084db6:	5c40      	ldrb	r0, [r0, r1]
 8084db8:	4770      	bx	lr
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
 8084dba:	2000      	movs	r0, #0
	return buffer[index];
}
 8084dbc:	4770      	bx	lr

08084dbe <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
 8084dbe:	f7ff bff5 	b.w	8084dac <_ZNK6StringixEj>

08084dc2 <_ZNK6String7indexOfEcj>:
{
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
 8084dc2:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
 8084dc4:	6883      	ldr	r3, [r0, #8]
 8084dc6:	4293      	cmp	r3, r2
 8084dc8:	d906      	bls.n	8084dd8 <_ZNK6String7indexOfEcj+0x16>
	const char* temp = strchr(buffer + fromIndex, ch);
 8084dca:	6804      	ldr	r4, [r0, #0]
 8084dcc:	18a0      	adds	r0, r4, r2
 8084dce:	f004 fa61 	bl	8089294 <strchr>
	if (temp == NULL) return -1;
 8084dd2:	b108      	cbz	r0, 8084dd8 <_ZNK6String7indexOfEcj+0x16>
	return temp - buffer;
 8084dd4:	1b00      	subs	r0, r0, r4
 8084dd6:	bd10      	pop	{r4, pc}
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
	if (fromIndex >= len) return -1;
 8084dd8:	f04f 30ff 	mov.w	r0, #4294967295
	const char* temp = strchr(buffer + fromIndex, ch);
	if (temp == NULL) return -1;
	return temp - buffer;
}
 8084ddc:	bd10      	pop	{r4, pc}

08084dde <_ZNK6String7indexOfEc>:
/*  Search                                   */
/*********************************************/

int String::indexOf(char c) const
{
	return indexOf(c, 0);
 8084dde:	2200      	movs	r2, #0
 8084de0:	f7ff bfef 	b.w	8084dc2 <_ZNK6String7indexOfEcj>

08084de4 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 8084de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8084de6:	461d      	mov	r5, r3
	if (left > right) {
 8084de8:	429a      	cmp	r2, r3
 8084dea:	bf88      	it	hi
 8084dec:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 8084dee:	460f      	mov	r7, r1
 8084df0:	4614      	mov	r4, r2
	if (left > right) {
 8084df2:	bf88      	it	hi
 8084df4:	462c      	movhi	r4, r5
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 8084df6:	490b      	ldr	r1, [pc, #44]	; (8084e24 <_ZNK6String9substringEjj+0x40>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
 8084df8:	bf88      	it	hi
 8084dfa:	461d      	movhi	r5, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 8084dfc:	4606      	mov	r6, r0
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 8084dfe:	f7ff ff0c 	bl	8084c1a <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
 8084e02:	68ba      	ldr	r2, [r7, #8]
 8084e04:	4294      	cmp	r4, r2
 8084e06:	d80a      	bhi.n	8084e1e <_ZNK6String9substringEjj+0x3a>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
 8084e08:	6839      	ldr	r1, [r7, #0]
 8084e0a:	4295      	cmp	r5, r2
 8084e0c:	bf94      	ite	ls
 8084e0e:	ebc4 0205 	rsbls	r2, r4, r5
 8084e12:	ebc4 0202 	rsbhi	r2, r4, r2
 8084e16:	4421      	add	r1, r4
 8084e18:	4630      	mov	r0, r6
 8084e1a:	f7ff fee6 	bl	8084bea <_ZN6String4copyEPKcj>
	return out;
}
 8084e1e:	4630      	mov	r0, r6
 8084e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8084e22:	bf00      	nop
 8084e24:	0808acc4 	.word	0x0808acc4

08084e28 <_ZNK6String9substringEj>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
 8084e28:	b510      	push	{r4, lr}
 8084e2a:	4604      	mov	r4, r0
	return substring(left, len);
 8084e2c:	688b      	ldr	r3, [r1, #8]
 8084e2e:	f7ff ffd9 	bl	8084de4 <_ZNK6String9substringEjj>
}
 8084e32:	4620      	mov	r0, r4
 8084e34:	bd10      	pop	{r4, pc}

08084e36 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 8084e36:	6800      	ldr	r0, [r0, #0]
 8084e38:	b108      	cbz	r0, 8084e3e <_ZNK6String5toIntEv+0x8>
 8084e3a:	f004 b8cb 	b.w	8088fd4 <atol>
	return 0;
}
 8084e3e:	4770      	bx	lr

08084e40 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
 8084e40:	b40e      	push	{r1, r2, r3}
 8084e42:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
 8084e44:	ac09      	add	r4, sp, #36	; 0x24
 8084e46:	f854 7b04 	ldr.w	r7, [r4], #4
 8084e4a:	4605      	mov	r5, r0
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 8084e4c:	4623      	mov	r3, r4
 8084e4e:	463a      	mov	r2, r7
 8084e50:	2105      	movs	r1, #5
 8084e52:	a802      	add	r0, sp, #8
}

String String::format(const char* fmt, ...)
{
    va_list marker;
    va_start(marker, fmt);
 8084e54:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 8084e56:	f7ff fca3 	bl	80847a0 <vsnprintf>
 8084e5a:	4606      	mov	r6, r0
    va_end(marker);

    String result;
 8084e5c:	490b      	ldr	r1, [pc, #44]	; (8084e8c <_ZN6String6formatEPKcz+0x4c>)
 8084e5e:	4628      	mov	r0, r5
 8084e60:	f7ff fedb 	bl	8084c1a <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
 8084e64:	4631      	mov	r1, r6
 8084e66:	4628      	mov	r0, r5
 8084e68:	f7ff feae 	bl	8084bc8 <_ZN6String7reserveEj>
    if (result.buffer) {
 8084e6c:	6828      	ldr	r0, [r5, #0]
 8084e6e:	b130      	cbz	r0, 8084e7e <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 8084e70:	4623      	mov	r3, r4
 8084e72:	463a      	mov	r2, r7
 8084e74:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
 8084e76:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 8084e78:	f7ff fc92 	bl	80847a0 <vsnprintf>
        va_end(marker);
        result.len = n;
 8084e7c:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
 8084e7e:	4628      	mov	r0, r5
 8084e80:	b004      	add	sp, #16
 8084e82:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8084e86:	b003      	add	sp, #12
 8084e88:	4770      	bx	lr
 8084e8a:	bf00      	nop
 8084e8c:	0808acc4 	.word	0x0808acc4

08084e90 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8084e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8084e92:	4606      	mov	r6, r0
 8084e94:	460d      	mov	r5, r1
 8084e96:	188f      	adds	r7, r1, r2
  size_t n = 0;
 8084e98:	2400      	movs	r4, #0
  while (size--) {
 8084e9a:	42bd      	cmp	r5, r7
 8084e9c:	d00c      	beq.n	8084eb8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 8084e9e:	6833      	ldr	r3, [r6, #0]
 8084ea0:	f815 1b01 	ldrb.w	r1, [r5], #1
 8084ea4:	689b      	ldr	r3, [r3, #8]
 8084ea6:	4630      	mov	r0, r6
 8084ea8:	4798      	blx	r3
     if (chunk>=0)
 8084eaa:	2800      	cmp	r0, #0
 8084eac:	db01      	blt.n	8084eb2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 8084eae:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 8084eb0:	e7f3      	b.n	8084e9a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 8084eb2:	2c00      	cmp	r4, #0
 8084eb4:	bf08      	it	eq
 8084eb6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 8084eb8:	4620      	mov	r0, r4
 8084eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08084ebc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8084ebc:	b570      	push	{r4, r5, r6, lr}
 8084ebe:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8084ec0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 8084ec2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 8084ec4:	b149      	cbz	r1, 8084eda <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8084ec6:	f004 ff3f 	bl	8089d48 <strlen>
 8084eca:	682b      	ldr	r3, [r5, #0]
 8084ecc:	4602      	mov	r2, r0
 8084ece:	4621      	mov	r1, r4
 8084ed0:	4628      	mov	r0, r5
    }
 8084ed2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 8084ed6:	68db      	ldr	r3, [r3, #12]
 8084ed8:	4718      	bx	r3
    }
 8084eda:	bd70      	pop	{r4, r5, r6, pc}

08084edc <_ZN5Print5printEPKc>:
 8084edc:	b508      	push	{r3, lr}
 8084ede:	f7ff ffed 	bl	8084ebc <_ZN5Print5writeEPKc>
 8084ee2:	bd08      	pop	{r3, pc}

08084ee4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8084ee4:	6803      	ldr	r3, [r0, #0]
 8084ee6:	689b      	ldr	r3, [r3, #8]
 8084ee8:	4718      	bx	r3

08084eea <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8084eea:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 8084eec:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8084eee:	4605      	mov	r5, r0
  size_t n = print('\r');
 8084ef0:	f7ff fff8 	bl	8084ee4 <_ZN5Print5printEc>
  n += print('\n');
 8084ef4:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 8084ef6:	4604      	mov	r4, r0
  n += print('\n');
 8084ef8:	4628      	mov	r0, r5
 8084efa:	f7ff fff3 	bl	8084ee4 <_ZN5Print5printEc>
  return n;
}
 8084efe:	4420      	add	r0, r4
 8084f00:	bd38      	pop	{r3, r4, r5, pc}

08084f02 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 8084f02:	b538      	push	{r3, r4, r5, lr}
 8084f04:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8084f06:	f7ff ffd9 	bl	8084ebc <_ZN5Print5writeEPKc>
 8084f0a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 8084f0c:	4628      	mov	r0, r5
 8084f0e:	f7ff ffec 	bl	8084eea <_ZN5Print7printlnEv>
  return n;
}
 8084f12:	4420      	add	r0, r4
 8084f14:	bd38      	pop	{r3, r4, r5, pc}

08084f16 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8084f16:	2a01      	cmp	r2, #1
 8084f18:	bf98      	it	ls
 8084f1a:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 8084f1c:	b530      	push	{r4, r5, lr}
 8084f1e:	460b      	mov	r3, r1
 8084f20:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8084f22:	2100      	movs	r1, #0
 8084f24:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8084f28:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 8084f2c:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 8084f30:	fb05 3312 	mls	r3, r5, r2, r3
 8084f34:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8084f36:	2b09      	cmp	r3, #9
 8084f38:	bf94      	ite	ls
 8084f3a:	3330      	addls	r3, #48	; 0x30
 8084f3c:	3337      	addhi	r3, #55	; 0x37
 8084f3e:	b2db      	uxtb	r3, r3
 8084f40:	4621      	mov	r1, r4
 8084f42:	f804 3901 	strb.w	r3, [r4], #-1
 8084f46:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 8084f48:	2d00      	cmp	r5, #0
 8084f4a:	d1ef      	bne.n	8084f2c <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 8084f4c:	f7ff ffb6 	bl	8084ebc <_ZN5Print5writeEPKc>
}
 8084f50:	b00b      	add	sp, #44	; 0x2c
 8084f52:	bd30      	pop	{r4, r5, pc}

08084f54 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 8084f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 8084f58:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 8084f5a:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 8084f5c:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 8084f5e:	4617      	mov	r7, r2
 8084f60:	461e      	mov	r6, r3
 8084f62:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 8084f66:	f003 fc37 	bl	80887d8 <__aeabi_dcmpun>
 8084f6a:	b108      	cbz	r0, 8084f70 <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8084f6c:	494d      	ldr	r1, [pc, #308]	; (80850a4 <_ZN5Print10printFloatEdh+0x150>)
 8084f6e:	e012      	b.n	8084f96 <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 8084f70:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8084f74:	f04f 32ff 	mov.w	r2, #4294967295
 8084f78:	4b4b      	ldr	r3, [pc, #300]	; (80850a8 <_ZN5Print10printFloatEdh+0x154>)
 8084f7a:	4638      	mov	r0, r7
 8084f7c:	4621      	mov	r1, r4
 8084f7e:	f003 fc2b 	bl	80887d8 <__aeabi_dcmpun>
 8084f82:	b968      	cbnz	r0, 8084fa0 <_ZN5Print10printFloatEdh+0x4c>
 8084f84:	f04f 32ff 	mov.w	r2, #4294967295
 8084f88:	4b47      	ldr	r3, [pc, #284]	; (80850a8 <_ZN5Print10printFloatEdh+0x154>)
 8084f8a:	4638      	mov	r0, r7
 8084f8c:	4621      	mov	r1, r4
 8084f8e:	f003 fc05 	bl	808879c <__aeabi_dcmple>
 8084f92:	b928      	cbnz	r0, 8084fa0 <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8084f94:	4945      	ldr	r1, [pc, #276]	; (80850ac <_ZN5Print10printFloatEdh+0x158>)
 8084f96:	4640      	mov	r0, r8
 8084f98:	f7ff ff90 	bl	8084ebc <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 8084f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 8084fa0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8084fa4:	4b42      	ldr	r3, [pc, #264]	; (80850b0 <_ZN5Print10printFloatEdh+0x15c>)
 8084fa6:	4638      	mov	r0, r7
 8084fa8:	4631      	mov	r1, r6
 8084faa:	f003 fc0b 	bl	80887c4 <__aeabi_dcmpgt>
 8084fae:	b108      	cbz	r0, 8084fb4 <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8084fb0:	4940      	ldr	r1, [pc, #256]	; (80850b4 <_ZN5Print10printFloatEdh+0x160>)
 8084fb2:	e7f0      	b.n	8084f96 <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 8084fb4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8084fb8:	4b3f      	ldr	r3, [pc, #252]	; (80850b8 <_ZN5Print10printFloatEdh+0x164>)
 8084fba:	4638      	mov	r0, r7
 8084fbc:	4631      	mov	r1, r6
 8084fbe:	f003 fbe3 	bl	8088788 <__aeabi_dcmplt>
 8084fc2:	2800      	cmp	r0, #0
 8084fc4:	d1f4      	bne.n	8084fb0 <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 8084fc6:	2200      	movs	r2, #0
 8084fc8:	2300      	movs	r3, #0
 8084fca:	4638      	mov	r0, r7
 8084fcc:	4631      	mov	r1, r6
 8084fce:	f003 fbdb 	bl	8088788 <__aeabi_dcmplt>
 8084fd2:	b138      	cbz	r0, 8084fe4 <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 8084fd4:	212d      	movs	r1, #45	; 0x2d
 8084fd6:	4640      	mov	r0, r8
 8084fd8:	f7ff ff84 	bl	8084ee4 <_ZN5Print5printEc>
     number = -number;
 8084fdc:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 8084fe0:	4604      	mov	r4, r0
 8084fe2:	e000      	b.n	8084fe6 <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 8084fe4:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 8084fe6:	4935      	ldr	r1, [pc, #212]	; (80850bc <_ZN5Print10printFloatEdh+0x168>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 8084fe8:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 8084fec:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 8084fee:	fa5f f389 	uxtb.w	r3, r9
 8084ff2:	429d      	cmp	r5, r3
 8084ff4:	d906      	bls.n	8085004 <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 8084ff6:	2200      	movs	r2, #0
 8084ff8:	4b31      	ldr	r3, [pc, #196]	; (80850c0 <_ZN5Print10printFloatEdh+0x16c>)
 8084ffa:	f003 fa7d 	bl	80884f8 <__aeabi_ddiv>
 8084ffe:	f109 0901 	add.w	r9, r9, #1
 8085002:	e7f4      	b.n	8084fee <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 8085004:	463a      	mov	r2, r7
 8085006:	4633      	mov	r3, r6
 8085008:	f002 ff9a 	bl	8087f40 <__adddf3>
 808500c:	460f      	mov	r7, r1
 808500e:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 8085010:	f003 fc20 	bl	8088854 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 8085014:	220a      	movs	r2, #10
 8085016:	4601      	mov	r1, r0
 8085018:	4681      	mov	r9, r0
 808501a:	4640      	mov	r0, r8
 808501c:	f7ff ff7b 	bl	8084f16 <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
 8085020:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 8085022:	b3e5      	cbz	r5, 808509e <_ZN5Print10printFloatEdh+0x14a>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 8085024:	4648      	mov	r0, r9
 8085026:	f003 f8c7 	bl	80881b8 <__aeabi_ui2d>
 808502a:	4602      	mov	r2, r0
 808502c:	460b      	mov	r3, r1
 808502e:	4630      	mov	r0, r6
 8085030:	4639      	mov	r1, r7
 8085032:	f002 ff83 	bl	8087f3c <__aeabi_dsub>
 8085036:	4606      	mov	r6, r0
 8085038:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 808503a:	4640      	mov	r0, r8
 808503c:	4921      	ldr	r1, [pc, #132]	; (80850c4 <_ZN5Print10printFloatEdh+0x170>)
 808503e:	f7ff ff3d 	bl	8084ebc <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 8085042:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 8085044:	2200      	movs	r2, #0
 8085046:	4b1e      	ldr	r3, [pc, #120]	; (80850c0 <_ZN5Print10printFloatEdh+0x16c>)
 8085048:	4630      	mov	r0, r6
 808504a:	4639      	mov	r1, r7
 808504c:	f003 f92a 	bl	80882a4 <__aeabi_dmul>
 8085050:	4606      	mov	r6, r0
 8085052:	460f      	mov	r7, r1
    int toPrint = int(remainder);
 8085054:	f003 fbd6 	bl	8088804 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
 8085058:	f1b0 0a00 	subs.w	sl, r0, #0
 808505c:	da07      	bge.n	808506e <_ZN5Print10printFloatEdh+0x11a>
            t = print('-');
 808505e:	212d      	movs	r1, #45	; 0x2d
 8085060:	4640      	mov	r0, r8
 8085062:	f7ff ff3f 	bl	8084ee4 <_ZN5Print5printEc>
            val = -n;
 8085066:	f1ca 0100 	rsb	r1, sl, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
 808506a:	4681      	mov	r9, r0
 808506c:	e002      	b.n	8085074 <_ZN5Print10printFloatEdh+0x120>
            val = -n;
        } else {
            val = n;
 808506e:	4651      	mov	r1, sl
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
 8085070:	f04f 0900 	mov.w	r9, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 8085074:	220a      	movs	r2, #10
 8085076:	4640      	mov	r0, r8
 8085078:	f7ff ff4d 	bl	8084f16 <_ZN5Print11printNumberEmh>
    n += print(toPrint);
 808507c:	4448      	add	r0, r9
 808507e:	4404      	add	r4, r0
    remainder -= toPrint;
 8085080:	4650      	mov	r0, sl
 8085082:	f003 f8a9 	bl	80881d8 <__aeabi_i2d>
 8085086:	4602      	mov	r2, r0
 8085088:	460b      	mov	r3, r1
 808508a:	4630      	mov	r0, r6
 808508c:	4639      	mov	r1, r7
 808508e:	f002 ff55 	bl	8087f3c <__aeabi_dsub>
 8085092:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 8085094:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 8085098:	4606      	mov	r6, r0
 808509a:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 808509c:	d1d2      	bne.n	8085044 <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 808509e:	4620      	mov	r0, r4
 80850a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80850a4:	0808b1e5 	.word	0x0808b1e5
 80850a8:	7fefffff 	.word	0x7fefffff
 80850ac:	0808b1ed 	.word	0x0808b1ed
 80850b0:	41efffff 	.word	0x41efffff
 80850b4:	0808b1e9 	.word	0x0808b1e9
 80850b8:	c1efffff 	.word	0xc1efffff
 80850bc:	3fe00000 	.word	0x3fe00000
 80850c0:	40240000 	.word	0x40240000
 80850c4:	0808a9af 	.word	0x0808a9af

080850c8 <_ZN5Print7printlnEdi>:
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
 80850c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80850ca:	f89d 1018 	ldrb.w	r1, [sp, #24]
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
 80850ce:	4605      	mov	r5, r0
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80850d0:	9100      	str	r1, [sp, #0]
 80850d2:	f7ff ff3f 	bl	8084f54 <_ZN5Print10printFloatEdh>
 80850d6:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
 80850d8:	4628      	mov	r0, r5
 80850da:	f7ff ff06 	bl	8084eea <_ZN5Print7printlnEv>
  return n;
}
 80850de:	4420      	add	r0, r4
 80850e0:	b003      	add	sp, #12
 80850e2:	bd30      	pop	{r4, r5, pc}

080850e4 <_ZN5Print7printlnEfi>:
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
 80850e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80850e6:	4604      	mov	r4, r0
    return println((double)num, digits);
 80850e8:	4608      	mov	r0, r1
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
 80850ea:	4615      	mov	r5, r2
    return println((double)num, digits);
 80850ec:	f003 f886 	bl	80881fc <__aeabi_f2d>
 80850f0:	9500      	str	r5, [sp, #0]
 80850f2:	4602      	mov	r2, r0
 80850f4:	460b      	mov	r3, r1
 80850f6:	4620      	mov	r0, r4
 80850f8:	f7ff ffe6 	bl	80850c8 <_ZN5Print7printlnEdi>
}
 80850fc:	b003      	add	sp, #12
 80850fe:	bd30      	pop	{r4, r5, pc}

08085100 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 8085100:	b40c      	push	{r2, r3}
 8085102:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8085106:	b087      	sub	sp, #28
 8085108:	af00      	add	r7, sp, #0
 808510a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 808510e:	f854 9b04 	ldr.w	r9, [r4], #4
 8085112:	4605      	mov	r5, r0
 8085114:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 8085116:	4623      	mov	r3, r4
 8085118:	464a      	mov	r2, r9
 808511a:	2114      	movs	r1, #20
 808511c:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 808511e:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 8085120:	f7ff fb3e 	bl	80847a0 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 8085124:	2813      	cmp	r0, #19
 8085126:	d805      	bhi.n	8085134 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8085128:	1d39      	adds	r1, r7, #4
 808512a:	4628      	mov	r0, r5
 808512c:	f7ff fec6 	bl	8084ebc <_ZN5Print5writeEPKc>
 8085130:	4604      	mov	r4, r0
 8085132:	e013      	b.n	808515c <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 8085134:	f100 0308 	add.w	r3, r0, #8
 8085138:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 808513c:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 808513e:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 8085142:	1c41      	adds	r1, r0, #1
 8085144:	4623      	mov	r3, r4
 8085146:	464a      	mov	r2, r9
 8085148:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 808514a:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 808514c:	f7ff fb28 	bl	80847a0 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8085150:	4669      	mov	r1, sp
 8085152:	4628      	mov	r0, r5
 8085154:	f7ff feb2 	bl	8084ebc <_ZN5Print5writeEPKc>
 8085158:	4604      	mov	r4, r0
 808515a:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 808515c:	b11e      	cbz	r6, 8085166 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 808515e:	4628      	mov	r0, r5
 8085160:	f7ff fec3 	bl	8084eea <_ZN5Print7printlnEv>
 8085164:	4404      	add	r4, r0
    return n;
}
 8085166:	4620      	mov	r0, r4
 8085168:	371c      	adds	r7, #28
 808516a:	46bd      	mov	sp, r7
 808516c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8085170:	b002      	add	sp, #8
 8085172:	4770      	bx	lr

08085174 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 8085174:	6880      	ldr	r0, [r0, #8]
 8085176:	6803      	ldr	r3, [r0, #0]
 8085178:	68db      	ldr	r3, [r3, #12]
 808517a:	4718      	bx	r3

0808517c <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
inline void spark::StreamLogHandler::printf(const char *fmt, ArgsT... args) {
    stream_->printf(fmt, args...);
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
 808517c:	4770      	bx	lr

0808517e <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 808517e:	b119      	cbz	r1, 8085188 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 8085180:	680b      	ldr	r3, [r1, #0]
 8085182:	4608      	mov	r0, r1
 8085184:	685b      	ldr	r3, [r3, #4]
 8085186:	4718      	bx	r3
 8085188:	4770      	bx	lr

0808518a <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>:
}

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 808518a:	b119      	cbz	r1, 8085194 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print+0xa>
 808518c:	680b      	ldr	r3, [r1, #0]
 808518e:	4608      	mov	r0, r1
 8085190:	685b      	ldr	r3, [r3, #4]
 8085192:	4718      	bx	r3
 8085194:	4770      	bx	lr

08085196 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
 8085196:	4770      	bx	lr

08085198 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
    virtual LogHandler* createHandler(const char *type, LogLevel level, LogCategoryFilters filters, Print *stream,
            const JSONValue &params) = 0; // TODO: Use some generic container or a buffer instead of JSONValue
    virtual void destroyHandler(LogHandler *handler);
};

class DefaultLogHandlerFactory: public LogHandlerFactory {
 8085198:	4770      	bx	lr

0808519a <_ZN5spark16JSONStreamWriterD1Ev>:
    void writeSeparator();
    void writeEscaped(const char *data, size_t size);
    void write(char c);
};

class JSONStreamWriter: public JSONWriter {
 808519a:	4770      	bx	lr

0808519c <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
 808519c:	b538      	push	{r3, r4, r5, lr}
 808519e:	4604      	mov	r4, r0
 80851a0:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 80851a2:	6800      	ldr	r0, [r0, #0]
 80851a4:	212e      	movs	r1, #46	; 0x2e
 80851a6:	f004 f883 	bl	80892b0 <strchrnul>
    size = s - category;
 80851aa:	6823      	ldr	r3, [r4, #0]
 80851ac:	1ac3      	subs	r3, r0, r3
 80851ae:	602b      	str	r3, [r5, #0]
    if (size) {
 80851b0:	b123      	cbz	r3, 80851bc <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
 80851b2:	7803      	ldrb	r3, [r0, #0]
 80851b4:	b103      	cbz	r3, 80851b8 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
 80851b6:	3001      	adds	r0, #1
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80851b8:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80851ba:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
 80851bc:	4618      	mov	r0, r3
}
 80851be:	bd38      	pop	{r3, r4, r5, pc}

080851c0 <_ZN5spark16JSONStreamWriterD0Ev>:
 80851c0:	b510      	push	{r4, lr}
 80851c2:	4604      	mov	r4, r0
 80851c4:	210c      	movs	r1, #12
 80851c6:	f002 fc35 	bl	8087a34 <_ZdlPvj>
 80851ca:	4620      	mov	r0, r4
 80851cc:	bd10      	pop	{r4, pc}

080851ce <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 80851ce:	b510      	push	{r4, lr}
 80851d0:	4604      	mov	r4, r0
 80851d2:	2104      	movs	r1, #4
 80851d4:	f002 fc2e 	bl	8087a34 <_ZdlPvj>
 80851d8:	4620      	mov	r0, r4
 80851da:	bd10      	pop	{r4, pc}

080851dc <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
 80851dc:	b510      	push	{r4, lr}
 80851de:	4604      	mov	r4, r0
 80851e0:	2104      	movs	r1, #4
 80851e2:	f002 fc27 	bl	8087a34 <_ZdlPvj>
 80851e6:	4620      	mov	r0, r4
 80851e8:	bd10      	pop	{r4, pc}

080851ea <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 80851ea:	b538      	push	{r3, r4, r5, lr}
 80851ec:	460c      	mov	r4, r1
 80851ee:	4605      	mov	r5, r0
#if PLATFORM_ID != 3
    if (stream == &Serial) {
 80851f0:	f001 fdbc 	bl	8086d6c <_Z16_fetch_usbserialv>
 80851f4:	4284      	cmp	r4, r0
 80851f6:	d102      	bne.n	80851fe <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x14>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 80851f8:	f001 fdb8 	bl	8086d6c <_Z16_fetch_usbserialv>
 80851fc:	e005      	b.n	808520a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
#endif
        return;
    }
#if Wiring_USBSerial1
    if (stream == &USBSerial1) {
 80851fe:	f001 fde3 	bl	8086dc8 <_Z17_fetch_usbserial1v>
 8085202:	4284      	cmp	r4, r0
 8085204:	d105      	bne.n	8085212 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x28>
        USBSerial1.end();
 8085206:	f001 fddf 	bl	8086dc8 <_Z17_fetch_usbserial1v>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
 808520a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
        return;
    }
#if Wiring_USBSerial1
    if (stream == &USBSerial1) {
        USBSerial1.end();
 808520e:	f001 bda1 	b.w	8086d54 <_ZN9USBSerial3endEv>
        return;
    }
#endif
    if (stream == &Serial1) {
 8085212:	f001 ff3d 	bl	8087090 <_Z22__fetch_global_Serial1v>
 8085216:	4284      	cmp	r4, r0
 8085218:	d105      	bne.n	8085226 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3c>
        Serial1.end();
 808521a:	f001 ff39 	bl	8087090 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
 808521e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
        Serial1.end();
 8085222:	f001 bf2e 	b.w	8087082 <_ZN11USARTSerial3endEv>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
 8085226:	4621      	mov	r1, r4
 8085228:	4628      	mov	r0, r5
 808522a:	f7ff ffae 	bl	808518a <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>
 808522e:	bd38      	pop	{r3, r4, r5, pc}

08085230 <_ZNK5spark10JSONStringeqEPKc.isra.7>:

inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
 8085230:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 8085232:	f004 f847 	bl	80892c4 <strcmp>
}
 8085236:	fab0 f080 	clz	r0, r0
 808523a:	0940      	lsrs	r0, r0, #5
 808523c:	bd08      	pop	{r3, pc}

0808523e <_ZN5spark10JSONWriter5valueEPKc>:

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 808523e:	b538      	push	{r3, r4, r5, lr}
 8085240:	4605      	mov	r5, r0
    return value(val, strlen(val));
 8085242:	4608      	mov	r0, r1

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 8085244:	460c      	mov	r4, r1
    return value(val, strlen(val));
 8085246:	f004 fd7f 	bl	8089d48 <strlen>
 808524a:	4621      	mov	r1, r4
 808524c:	4602      	mov	r2, r0
 808524e:	4628      	mov	r0, r5
}
 8085250:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
 8085254:	f002 b9e1 	b.w	808761a <_ZN5spark10JSONWriter5valueEPKcj>

08085258 <_ZN5spark16StreamLogHandler5writeEPKc>:

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
 8085258:	b570      	push	{r4, r5, r6, lr}
 808525a:	4604      	mov	r4, r0
    write(str, strlen(str));
 808525c:	4608      	mov	r0, r1

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
 808525e:	460d      	mov	r5, r1
    write(str, strlen(str));
 8085260:	f004 fd72 	bl	8089d48 <strlen>
 8085264:	6823      	ldr	r3, [r4, #0]
 8085266:	4602      	mov	r2, r0
 8085268:	4629      	mov	r1, r5
 808526a:	4620      	mov	r0, r4
}
 808526c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
 8085270:	68db      	ldr	r3, [r3, #12]
 8085272:	4718      	bx	r3

08085274 <_ZN5spark16StreamLogHandler5writeEc>:
}

inline void spark::StreamLogHandler::write(char c) {
 8085274:	b513      	push	{r0, r1, r4, lr}
    write(&c, 1);
 8085276:	6802      	ldr	r2, [r0, #0]

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
}

inline void spark::StreamLogHandler::write(char c) {
 8085278:	ab02      	add	r3, sp, #8
 808527a:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
 808527e:	68d4      	ldr	r4, [r2, #12]
 8085280:	4619      	mov	r1, r3
 8085282:	2201      	movs	r2, #1
 8085284:	47a0      	blx	r4
}
 8085286:	b002      	add	sp, #8
 8085288:	bd10      	pop	{r4, pc}
	...

0808528c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 808528c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8085290:	6807      	ldr	r7, [r0, #0]
 8085292:	468b      	mov	fp, r1
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 8085294:	463c      	mov	r4, r7
 8085296:	6845      	ldr	r5, [r0, #4]
 8085298:	4691      	mov	r9, r2
 808529a:	2214      	movs	r2, #20
 808529c:	4355      	muls	r5, r2
 808529e:	b085      	sub	sp, #20
 80852a0:	9301      	str	r3, [sp, #4]
 80852a2:	10ab      	asrs	r3, r5, #2
 80852a4:	4d18      	ldr	r5, [pc, #96]	; (8085308 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
 80852a6:	9202      	str	r2, [sp, #8]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 80852a8:	435d      	muls	r5, r3
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
 80852aa:	2301      	movs	r3, #1
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 80852ac:	2d00      	cmp	r5, #0
 80852ae:	9303      	str	r3, [sp, #12]
 80852b0:	dd23      	ble.n	80852fa <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x6e>
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
 80852b2:	9b02      	ldr	r3, [sp, #8]
	{
	  _DistanceType __half = __len >> 1;
 80852b4:	106e      	asrs	r6, r5, #1
 80852b6:	fb03 f006 	mul.w	r0, r3, r6
 80852ba:	eb04 0800 	add.w	r8, r4, r0

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
    // Using binary search to find existent node or suitable position for new node
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 80852be:	f8b8 a004 	ldrh.w	sl, [r8, #4]
 80852c2:	464a      	mov	r2, r9
 80852c4:	45d1      	cmp	r9, sl
 80852c6:	bf28      	it	cs
 80852c8:	4652      	movcs	r2, sl
 80852ca:	4659      	mov	r1, fp
 80852cc:	5820      	ldr	r0, [r4, r0]
 80852ce:	f004 fd43 	bl	8089d58 <strncmp>
                if (cmp == 0) {
 80852d2:	9b03      	ldr	r3, [sp, #12]
 80852d4:	b948      	cbnz	r0, 80852ea <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x5e>
                    if (node.size == value.second) { // Lengths are equal
 80852d6:	45d1      	cmp	r9, sl
 80852d8:	d103      	bne.n	80852e2 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 80852da:	9a01      	ldr	r2, [sp, #4]
 80852dc:	7013      	strb	r3, [r2, #0]
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 80852de:	4635      	mov	r5, r6
 80852e0:	e7e4      	b.n	80852ac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x20>
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
                        return false;
                    }
                    return node.size < value.second;
 80852e2:	bf8c      	ite	hi
 80852e4:	2001      	movhi	r0, #1
 80852e6:	2000      	movls	r0, #0
 80852e8:	e000      	b.n	80852ec <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                }
                return cmp < 0;
 80852ea:	0fc0      	lsrs	r0, r0, #31
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 80852ec:	2800      	cmp	r0, #0
 80852ee:	d0f6      	beq.n	80852de <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 80852f0:	1bae      	subs	r6, r5, r6
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
	    {
	      __first = __middle;
	      ++__first;
 80852f2:	f108 0414 	add.w	r4, r8, #20
	      __len = __len - __half - 1;
 80852f6:	3e01      	subs	r6, #1
 80852f8:	e7f1      	b.n	80852de <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
            }));
 80852fa:	1be4      	subs	r4, r4, r7
}
 80852fc:	4802      	ldr	r0, [pc, #8]	; (8085308 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
                        return false;
                    }
                    return node.size < value.second;
                }
                return cmp < 0;
            }));
 80852fe:	10a4      	asrs	r4, r4, #2
}
 8085300:	4360      	muls	r0, r4
 8085302:	b005      	add	sp, #20
 8085304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8085308:	cccccccd 	.word	0xcccccccd

0808530c <_ZNK5spark6detail9LogFilter5levelEPKc>:
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
 808530c:	b5f0      	push	{r4, r5, r6, r7, lr}
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
 808530e:	6903      	ldr	r3, [r0, #16]
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
 8085310:	b085      	sub	sp, #20
 8085312:	9101      	str	r1, [sp, #4]
    LogLevel level = level_; // Default level
 8085314:	7e06      	ldrb	r6, [r0, #24]
    if (!nodes_.isEmpty() && category) {
 8085316:	b313      	cbz	r3, 808535e <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
 8085318:	b309      	cbz	r1, 808535e <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
 808531a:	2300      	movs	r3, #0
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
 808531c:	461d      	mov	r5, r3
LogLevel spark::detail::LogFilter::level(const char *category) const {
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
 808531e:	af04      	add	r7, sp, #16
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 8085320:	f100 040c 	add.w	r4, r0, #12
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
 8085324:	f847 3d04 	str.w	r3, [r7, #-4]!
        while ((name = nextSubcategoryName(category, size))) {
 8085328:	4639      	mov	r1, r7
 808532a:	a801      	add	r0, sp, #4
 808532c:	f7ff ff36 	bl	808519c <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 8085330:	4601      	mov	r1, r0
 8085332:	b1a0      	cbz	r0, 808535e <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
            bool found = false;
 8085334:	ab04      	add	r3, sp, #16
 8085336:	f803 5d05 	strb.w	r5, [r3, #-5]!
            const int index = nodeIndex(*pNodes, name, size, found);
 808533a:	9a03      	ldr	r2, [sp, #12]
 808533c:	4620      	mov	r0, r4
 808533e:	f7ff ffa5 	bl	808528c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 8085342:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8085346:	b153      	cbz	r3, 808535e <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::at(int i) const {
    return data_[i];
 8085348:	6823      	ldr	r3, [r4, #0]
 808534a:	2414      	movs	r4, #20
 808534c:	fb04 3400 	mla	r4, r4, r0, r3
                break;
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
 8085350:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
                level = (LogLevel)node.level;
            }
            pNodes = &node.nodes;
 8085354:	3408      	adds	r4, #8
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found) {
                break;
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
 8085356:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 8085358:	bfa8      	it	ge
 808535a:	b2de      	uxtbge	r6, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
 808535c:	e7e4      	b.n	8085328 <_ZNK5spark6detail9LogFilter5levelEPKc+0x1c>
            }
            pNodes = &node.nodes;
        }
    }
    return level;
}
 808535e:	4630      	mov	r0, r6
 8085360:	b005      	add	sp, #20
 8085362:	bdf0      	pop	{r4, r5, r6, r7, pc}

08085364 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 8085364:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 8085366:	4c09      	ldr	r4, [pc, #36]	; (808538c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 8085368:	6823      	ldr	r3, [r4, #0]
 808536a:	07db      	lsls	r3, r3, #31
 808536c:	d40b      	bmi.n	8085386 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
 808536e:	4620      	mov	r0, r4
 8085370:	f7fa fea4 	bl	80800bc <__cxa_guard_acquire>
 8085374:	b138      	cbz	r0, 8085386 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
 8085376:	4620      	mov	r0, r4
 8085378:	f7fa fea5 	bl	80800c6 <__cxa_guard_release>
 808537c:	4a04      	ldr	r2, [pc, #16]	; (8085390 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 808537e:	4905      	ldr	r1, [pc, #20]	; (8085394 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
 8085380:	4805      	ldr	r0, [pc, #20]	; (8085398 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
 8085382:	f002 fb49 	bl	8087a18 <__aeabi_atexit>
    return &factory;
}
 8085386:	4804      	ldr	r0, [pc, #16]	; (8085398 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
 8085388:	bd10      	pop	{r4, pc}
 808538a:	bf00      	nop
 808538c:	200003e0 	.word	0x200003e0
 8085390:	20000180 	.word	0x20000180
 8085394:	08085199 	.word	0x08085199
 8085398:	200000bc 	.word	0x200000bc

0808539c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 808539c:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 808539e:	4c09      	ldr	r4, [pc, #36]	; (80853c4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 80853a0:	6823      	ldr	r3, [r4, #0]
 80853a2:	07db      	lsls	r3, r3, #31
 80853a4:	d40b      	bmi.n	80853be <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
 80853a6:	4620      	mov	r0, r4
 80853a8:	f7fa fe88 	bl	80800bc <__cxa_guard_acquire>
 80853ac:	b138      	cbz	r0, 80853be <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
 80853ae:	4620      	mov	r0, r4
 80853b0:	f7fa fe89 	bl	80800c6 <__cxa_guard_release>
 80853b4:	4a04      	ldr	r2, [pc, #16]	; (80853c8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 80853b6:	4905      	ldr	r1, [pc, #20]	; (80853cc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
 80853b8:	4805      	ldr	r0, [pc, #20]	; (80853d0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
 80853ba:	f002 fb2d 	bl	8087a18 <__aeabi_atexit>
    return &factory;
}
 80853be:	4804      	ldr	r0, [pc, #16]	; (80853d0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
 80853c0:	bd10      	pop	{r4, pc}
 80853c2:	bf00      	nop
 80853c4:	20000410 	.word	0x20000410
 80853c8:	20000180 	.word	0x20000180
 80853cc:	08085197 	.word	0x08085197
 80853d0:	200000b8 	.word	0x200000b8

080853d4 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 80853d4:	b538      	push	{r3, r4, r5, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80853d6:	2500      	movs	r5, #0
 80853d8:	4604      	mov	r4, r0
 80853da:	6005      	str	r5, [r0, #0]
 80853dc:	6045      	str	r5, [r0, #4]
 80853de:	6085      	str	r5, [r0, #8]
 80853e0:	6105      	str	r5, [r0, #16]
 80853e2:	6145      	str	r5, [r0, #20]
 80853e4:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80853e6:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
 80853ea:	f7fe ff3b 	bl	8084264 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 80853ee:	f7ff ffb9 	bl	8085364 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 80853f2:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 80853f4:	f7ff ffd2 	bl	808539c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 80853f8:	7325      	strb	r5, [r4, #12]
#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
    streamFactory_ = DefaultOutputStreamFactory::instance();
 80853fa:	6220      	str	r0, [r4, #32]
#endif
    outputActive_ = false;
}
 80853fc:	4620      	mov	r0, r4
 80853fe:	bd38      	pop	{r3, r4, r5, pc}

08085400 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 8085400:	b510      	push	{r4, lr}
    static LogManager mgr;
 8085402:	4c0a      	ldr	r4, [pc, #40]	; (808542c <_ZN5spark10LogManager8instanceEv+0x2c>)
 8085404:	6823      	ldr	r3, [r4, #0]
 8085406:	07db      	lsls	r3, r3, #31
 8085408:	d40e      	bmi.n	8085428 <_ZN5spark10LogManager8instanceEv+0x28>
 808540a:	4620      	mov	r0, r4
 808540c:	f7fa fe56 	bl	80800bc <__cxa_guard_acquire>
 8085410:	b150      	cbz	r0, 8085428 <_ZN5spark10LogManager8instanceEv+0x28>
 8085412:	4807      	ldr	r0, [pc, #28]	; (8085430 <_ZN5spark10LogManager8instanceEv+0x30>)
 8085414:	f7ff ffde 	bl	80853d4 <_ZN5spark10LogManagerC1Ev>
 8085418:	4620      	mov	r0, r4
 808541a:	f7fa fe54 	bl	80800c6 <__cxa_guard_release>
 808541e:	4a05      	ldr	r2, [pc, #20]	; (8085434 <_ZN5spark10LogManager8instanceEv+0x34>)
 8085420:	4905      	ldr	r1, [pc, #20]	; (8085438 <_ZN5spark10LogManager8instanceEv+0x38>)
 8085422:	4803      	ldr	r0, [pc, #12]	; (8085430 <_ZN5spark10LogManager8instanceEv+0x30>)
 8085424:	f002 faf8 	bl	8087a18 <__aeabi_atexit>
    return &mgr;
}
 8085428:	4801      	ldr	r0, [pc, #4]	; (8085430 <_ZN5spark10LogManager8instanceEv+0x30>)
 808542a:	bd10      	pop	{r4, pc}
 808542c:	200003e4 	.word	0x200003e4
 8085430:	200003e8 	.word	0x200003e8
 8085434:	20000180 	.word	0x20000180
 8085438:	08085899 	.word	0x08085899

0808543c <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 808543c:	2300      	movs	r3, #0
 808543e:	4a02      	ldr	r2, [pc, #8]	; (8085448 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 8085440:	4902      	ldr	r1, [pc, #8]	; (808544c <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 8085442:	4803      	ldr	r0, [pc, #12]	; (8085450 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 8085444:	f7ff b85e 	b.w	8084504 <log_set_callbacks>
 8085448:	0808577d 	.word	0x0808577d
 808544c:	0808570d 	.word	0x0808570d
 8085450:	08085695 	.word	0x08085695

08085454 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 8085454:	2300      	movs	r3, #0
 8085456:	461a      	mov	r2, r3
 8085458:	4619      	mov	r1, r3
 808545a:	4618      	mov	r0, r3
 808545c:	f7ff b852 	b.w	8084504 <log_set_callbacks>

08085460 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 8085460:	680b      	ldr	r3, [r1, #0]
 8085462:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 8085464:	b113      	cbz	r3, 808546c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 8085466:	685a      	ldr	r2, [r3, #4]
 8085468:	3201      	adds	r2, #1
 808546a:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 808546c:	4770      	bx	lr

0808546e <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 808546e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8085470:	4605      	mov	r5, r0
        JSONObjectIterator(value.t_, value.d_) {
 8085472:	688e      	ldr	r6, [r1, #8]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8085474:	f851 3b04 	ldr.w	r3, [r1], #4
 8085478:	ac02      	add	r4, sp, #8
 808547a:	f844 3d08 	str.w	r3, [r4, #-8]!
 808547e:	a801      	add	r0, sp, #4
 8085480:	f7ff ffee 	bl	8085460 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8085484:	4622      	mov	r2, r4
 8085486:	4631      	mov	r1, r6
 8085488:	4628      	mov	r0, r5
 808548a:	f002 f913 	bl	80876b4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808548e:	a801      	add	r0, sp, #4
 8085490:	f7fa ff62 	bl	8080358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 8085494:	4628      	mov	r0, r5
 8085496:	b002      	add	sp, #8
 8085498:	bd70      	pop	{r4, r5, r6, pc}

0808549a <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
 808549a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 808549c:	4605      	mov	r5, r0
    return JSONValue(v_, d_);
 808549e:	690e      	ldr	r6, [r1, #16]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80854a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80854a4:	ac02      	add	r4, sp, #8
 80854a6:	f844 3d08 	str.w	r3, [r4, #-8]!
 80854aa:	a801      	add	r0, sp, #4
 80854ac:	f7ff ffd8 	bl	8085460 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80854b0:	4622      	mov	r2, r4
 80854b2:	4631      	mov	r1, r6
 80854b4:	4628      	mov	r0, r5
 80854b6:	f002 f918 	bl	80876ea <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80854ba:	a801      	add	r0, sp, #4
 80854bc:	f7fa ff4c 	bl	8080358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80854c0:	4628      	mov	r0, r5
 80854c2:	b002      	add	sp, #8
 80854c4:	bd70      	pop	{r4, r5, r6, pc}

080854c6 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
 80854c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80854c8:	4605      	mov	r5, r0
    return JSONString(k_, d_);
 80854ca:	68ce      	ldr	r6, [r1, #12]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80854cc:	f851 3b04 	ldr.w	r3, [r1], #4
 80854d0:	ac02      	add	r4, sp, #8
 80854d2:	f844 3d08 	str.w	r3, [r4, #-8]!
 80854d6:	a801      	add	r0, sp, #4
 80854d8:	f7ff ffc2 	bl	8085460 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80854dc:	4622      	mov	r2, r4
 80854de:	4631      	mov	r1, r6
 80854e0:	4628      	mov	r0, r5
 80854e2:	f002 f8bf 	bl	8087664 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80854e6:	a801      	add	r0, sp, #4
 80854e8:	f7fa ff36 	bl	8080358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80854ec:	4628      	mov	r0, r5
 80854ee:	b002      	add	sp, #8
 80854f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080854f4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
    static DefaultOutputStreamFactory factory;
    return &factory;
}

void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 80854f4:	b530      	push	{r4, r5, lr}
 80854f6:	b08b      	sub	sp, #44	; 0x2c
 80854f8:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 80854fa:	4601      	mov	r1, r0
 80854fc:	a804      	add	r0, sp, #16
 80854fe:	f7ff ffb6 	bl	808546e <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
    while (it.next()) {
 8085502:	a804      	add	r0, sp, #16
 8085504:	f001 ffcb 	bl	808749e <_ZN5spark18JSONObjectIterator4nextEv>
 8085508:	b1e8      	cbz	r0, 8085546 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x52>
        if (it.name() == "baud" && baudRate) {
 808550a:	a904      	add	r1, sp, #16
 808550c:	4668      	mov	r0, sp
 808550e:	f7ff ffda 	bl	80854c6 <_ZNK5spark18JSONObjectIterator4nameEv>
 8085512:	490f      	ldr	r1, [pc, #60]	; (8085550 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x5c>)
 8085514:	9802      	ldr	r0, [sp, #8]
 8085516:	f7ff fe8b 	bl	8085230 <_ZNK5spark10JSONStringeqEPKc.isra.7>
 808551a:	4604      	mov	r4, r0
 808551c:	b110      	cbz	r0, 8085524 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x30>
 808551e:	1c2c      	adds	r4, r5, #0
 8085520:	bf18      	it	ne
 8085522:	2401      	movne	r4, #1
 8085524:	a801      	add	r0, sp, #4
 8085526:	f7fa ff17 	bl	8080358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808552a:	2c00      	cmp	r4, #0
 808552c:	d0e9      	beq.n	8085502 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
            *baudRate = it.value().toInt();
 808552e:	a904      	add	r1, sp, #16
 8085530:	4668      	mov	r0, sp
 8085532:	f7ff ffb2 	bl	808549a <_ZNK5spark18JSONObjectIterator5valueEv>
 8085536:	4668      	mov	r0, sp
 8085538:	f001 ff91 	bl	808745e <_ZNK5spark9JSONValue5toIntEv>
 808553c:	6028      	str	r0, [r5, #0]
 808553e:	a801      	add	r0, sp, #4
 8085540:	f7fa ff0a 	bl	8080358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8085544:	e7dd      	b.n	8085502 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
 8085546:	a805      	add	r0, sp, #20
 8085548:	f7fa ff06 	bl	8080358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
 808554c:	b00b      	add	sp, #44	; 0x2c
 808554e:	bd30      	pop	{r4, r5, pc}
 8085550:	0808b224 	.word	0x0808b224

08085554 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 8085554:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8085556:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
 8085558:	491a      	ldr	r1, [pc, #104]	; (80855c4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x70>)
 808555a:	4620      	mov	r0, r4
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 808555c:	4615      	mov	r5, r2
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
 808555e:	f003 feb1 	bl	80892c4 <strcmp>
 8085562:	b940      	cbnz	r0, 8085576 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x22>
        Serial.begin();
 8085564:	f001 fc02 	bl	8086d6c <_Z16_fetch_usbserialv>
 8085568:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 808556c:	f001 fbee 	bl	8086d4c <_ZN9USBSerial5beginEl>
        return &Serial;
 8085570:	f001 fbfc 	bl	8086d6c <_Z16_fetch_usbserialv>
 8085574:	e023      	b.n	80855be <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x6a>
    }
#if Wiring_USBSerial1
    if (strcmp(type, "USBSerial1") == 0) {
 8085576:	4914      	ldr	r1, [pc, #80]	; (80855c8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x74>)
 8085578:	4620      	mov	r0, r4
 808557a:	f003 fea3 	bl	80892c4 <strcmp>
 808557e:	b940      	cbnz	r0, 8085592 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x3e>
        USBSerial1.begin();
 8085580:	f001 fc22 	bl	8086dc8 <_Z17_fetch_usbserial1v>
 8085584:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8085588:	f001 fbe0 	bl	8086d4c <_ZN9USBSerial5beginEl>
        return &USBSerial1;
 808558c:	f001 fc1c 	bl	8086dc8 <_Z17_fetch_usbserial1v>
 8085590:	e015      	b.n	80855be <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x6a>
    }
#endif
    if (strcmp(type, "Serial1") == 0) {
 8085592:	490e      	ldr	r1, [pc, #56]	; (80855cc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x78>)
 8085594:	4620      	mov	r0, r4
 8085596:	f003 fe95 	bl	80892c4 <strcmp>
 808559a:	b978      	cbnz	r0, 80855bc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x68>
        int baud = 9600;
 808559c:	a902      	add	r1, sp, #8
 808559e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80855a2:	f841 3d04 	str.w	r3, [r1, #-4]!
        getParams(params, &baud);
 80855a6:	4628      	mov	r0, r5
 80855a8:	f7ff ffa4 	bl	80854f4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 80855ac:	f001 fd70 	bl	8087090 <_Z22__fetch_global_Serial1v>
 80855b0:	9901      	ldr	r1, [sp, #4]
 80855b2:	f001 fd63 	bl	808707c <_ZN11USARTSerial5beginEm>
        return &Serial1;
 80855b6:	f001 fd6b 	bl	8087090 <_Z22__fetch_global_Serial1v>
 80855ba:	e000      	b.n	80855be <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x6a>
    }
#endif // PLATFORM_ID != 3
    return nullptr;
 80855bc:	2000      	movs	r0, #0
}
 80855be:	b003      	add	sp, #12
 80855c0:	bd30      	pop	{r4, r5, pc}
 80855c2:	bf00      	nop
 80855c4:	0808b229 	.word	0x0808b229
 80855c8:	0808b230 	.word	0x0808b230
 80855cc:	0808b233 	.word	0x0808b233

080855d0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 80855d0:	b570      	push	{r4, r5, r6, lr}
 80855d2:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
 80855d4:	6804      	ldr	r4, [r0, #0]
 80855d6:	6843      	ldr	r3, [r0, #4]
 80855d8:	2614      	movs	r6, #20
 80855da:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
 80855de:	42a6      	cmp	r6, r4
 80855e0:	d005      	beq.n	80855ee <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
 80855e2:	f104 0008 	add.w	r0, r4, #8
 80855e6:	f7ff fff3 	bl	80855d0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80855ea:	3414      	adds	r4, #20
 80855ec:	e7f7      	b.n	80855de <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 80855ee:	6828      	ldr	r0, [r5, #0]
 80855f0:	f7ff f8a6 	bl	8084740 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
 80855f4:	4628      	mov	r0, r5
 80855f6:	bd70      	pop	{r4, r5, r6, pc}

080855f8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 80855f8:	b570      	push	{r4, r5, r6, lr}
 80855fa:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
 80855fc:	6804      	ldr	r4, [r0, #0]
 80855fe:	6843      	ldr	r3, [r0, #4]
 8085600:	eb04 1603 	add.w	r6, r4, r3, lsl #4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
 8085604:	42a6      	cmp	r6, r4
 8085606:	d004      	beq.n	8085612 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 8085608:	4620      	mov	r0, r4
 808560a:	f7ff fabf 	bl	8084b8c <_ZN6StringD1Ev>
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
 808560e:	3410      	adds	r4, #16
 8085610:	e7f8      	b.n	8085604 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 8085612:	6828      	ldr	r0, [r5, #0]
 8085614:	f7ff f894 	bl	8084740 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
 8085618:	4628      	mov	r0, r5
 808561a:	bd70      	pop	{r4, r5, r6, pc}

0808561c <_ZN5spark6detail9LogFilterD1Ev>:
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}

spark::detail::LogFilter::~LogFilter() {
 808561c:	b510      	push	{r4, lr}
 808561e:	4604      	mov	r4, r0
 8085620:	300c      	adds	r0, #12
 8085622:	f7ff ffd5 	bl	80855d0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 8085626:	4620      	mov	r0, r4
 8085628:	f7ff ffe6 	bl	80855f8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 808562c:	4620      	mov	r0, r4
 808562e:	bd10      	pop	{r4, pc}

08085630 <_ZN5spark16StreamLogHandlerD1Ev>:
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
 8085630:	b510      	push	{r4, lr}
 8085632:	4604      	mov	r4, r0
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
 8085634:	4b03      	ldr	r3, [pc, #12]	; (8085644 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 8085636:	f840 3b04 	str.w	r3, [r0], #4
 808563a:	f7ff ffef 	bl	808561c <_ZN5spark6detail9LogFilterD1Ev>
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
 808563e:	4620      	mov	r0, r4
 8085640:	bd10      	pop	{r4, pc}
 8085642:	bf00      	nop
 8085644:	0808a73c 	.word	0x0808a73c

08085648 <_ZN5spark16StreamLogHandlerD0Ev>:
 8085648:	b510      	push	{r4, lr}
 808564a:	4604      	mov	r4, r0
 808564c:	f7ff fff0 	bl	8085630 <_ZN5spark16StreamLogHandlerD1Ev>
 8085650:	4620      	mov	r0, r4
 8085652:	2124      	movs	r1, #36	; 0x24
 8085654:	f002 f9ee 	bl	8087a34 <_ZdlPvj>
 8085658:	4620      	mov	r0, r4
 808565a:	bd10      	pop	{r4, pc}

0808565c <_ZN5spark20JSONStreamLogHandlerD1Ev>:

private:
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
 808565c:	b510      	push	{r4, lr}
 808565e:	4604      	mov	r4, r0
 8085660:	4b02      	ldr	r3, [pc, #8]	; (808566c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 8085662:	6003      	str	r3, [r0, #0]
 8085664:	f7ff ffe4 	bl	8085630 <_ZN5spark16StreamLogHandlerD1Ev>
 8085668:	4620      	mov	r0, r4
 808566a:	bd10      	pop	{r4, pc}
 808566c:	0808b214 	.word	0x0808b214

08085670 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 8085670:	b510      	push	{r4, lr}
 8085672:	4604      	mov	r4, r0
 8085674:	f7ff fff2 	bl	808565c <_ZN5spark20JSONStreamLogHandlerD1Ev>
 8085678:	4620      	mov	r0, r4
 808567a:	2124      	movs	r1, #36	; 0x24
 808567c:	f002 f9da 	bl	8087a34 <_ZdlPvj>
 8085680:	4620      	mov	r0, r4
 8085682:	bd10      	pop	{r4, pc}

08085684 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 8085684:	b510      	push	{r4, lr}
 8085686:	4604      	mov	r4, r0
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 8085688:	6803      	ldr	r3, [r0, #0]
 808568a:	6818      	ldr	r0, [r3, #0]
 808568c:	f7fe fe02 	bl	8084294 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 8085690:	4620      	mov	r0, r4
 8085692:	bd10      	pop	{r4, pc}

08085694 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 8085694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8085698:	469b      	mov	fp, r3
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 808569a:	4b1b      	ldr	r3, [pc, #108]	; (8085708 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>)
 808569c:	b085      	sub	sp, #20
 808569e:	685b      	ldr	r3, [r3, #4]
 80856a0:	4682      	mov	sl, r0
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 80856a2:	f3c3 0308 	ubfx	r3, r3, #0, #9

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 80856a6:	460e      	mov	r6, r1
 80856a8:	4690      	mov	r8, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 80856aa:	bb53      	cbnz	r3, 8085702 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x6e>
        return;
    }
#endif
    LogManager *that = instance();
 80856ac:	f7ff fea8 	bl	8085400 <_ZN5spark10LogManager8instanceEv>
 80856b0:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 80856b2:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80856b4:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
 80856b6:	f7ff f8ec 	bl	8084892 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
 80856ba:	7b23      	ldrb	r3, [r4, #12]
 80856bc:	b9f3      	cbnz	r3, 80856fc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x68>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 80856be:	2301      	movs	r3, #1
 80856c0:	7323      	strb	r3, [r4, #12]
 80856c2:	6825      	ldr	r5, [r4, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
 80856c4:	6863      	ldr	r3, [r4, #4]
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
 80856c6:	b2f6      	uxtb	r6, r6
 80856c8:	eb05 0983 	add.w	r9, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
 80856cc:	454d      	cmp	r5, r9
 80856ce:	d013      	beq.n	80856f8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x64>
 80856d0:	f855 7b04 	ldr.w	r7, [r5], #4
inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
}

inline void spark::LogHandler::message(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
    if (level >= filter_.level(category)) {
 80856d4:	4641      	mov	r1, r8
 80856d6:	1d38      	adds	r0, r7, #4
 80856d8:	f7ff fe18 	bl	808530c <_ZNK5spark6detail9LogFilter5levelEPKc>
 80856dc:	4286      	cmp	r6, r0
 80856de:	d3f5      	bcc.n	80856cc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
        logMessage(msg, level, category, attr);
 80856e0:	683b      	ldr	r3, [r7, #0]
 80856e2:	f8cd b000 	str.w	fp, [sp]
 80856e6:	689b      	ldr	r3, [r3, #8]
 80856e8:	4638      	mov	r0, r7
 80856ea:	469e      	mov	lr, r3
 80856ec:	4632      	mov	r2, r6
 80856ee:	4643      	mov	r3, r8
 80856f0:	4651      	mov	r1, sl
 80856f2:	4677      	mov	r7, lr
 80856f4:	47b8      	blx	r7
 80856f6:	e7e9      	b.n	80856cc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 80856f8:	2300      	movs	r3, #0
 80856fa:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
 80856fc:	a803      	add	r0, sp, #12
 80856fe:	f7ff ffc1 	bl	8085684 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 8085702:	b005      	add	sp, #20
 8085704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8085708:	e000ed00 	.word	0xe000ed00

0808570c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 808570c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8085710:	4699      	mov	r9, r3
 8085712:	4b19      	ldr	r3, [pc, #100]	; (8085778 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x6c>)
 8085714:	4607      	mov	r7, r0
 8085716:	685b      	ldr	r3, [r3, #4]
 8085718:	4688      	mov	r8, r1
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 808571a:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 808571e:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 8085720:	bb33      	cbnz	r3, 8085770 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x64>
        return;
    }
#endif
    LogManager *that = instance();
 8085722:	f7ff fe6d 	bl	8085400 <_ZN5spark10LogManager8instanceEv>
 8085726:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 8085728:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808572a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 808572c:	f7ff f8b1 	bl	8084892 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
 8085730:	7b23      	ldrb	r3, [r4, #12]
 8085732:	b9d3      	cbnz	r3, 808576a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5e>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 8085734:	2301      	movs	r3, #1
 8085736:	7323      	strb	r3, [r4, #12]
 8085738:	6825      	ldr	r5, [r4, #0]
 808573a:	6863      	ldr	r3, [r4, #4]
    }
}

inline void spark::LogHandler::write(const char *data, size_t size, LogLevel level, const char *category) {
    if (level >= filter_.level(category)) {
 808573c:	fa5f fb86 	uxtb.w	fp, r6
 8085740:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
 8085744:	4555      	cmp	r5, sl
 8085746:	d00e      	beq.n	8085766 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5a>
 8085748:	f855 6b04 	ldr.w	r6, [r5], #4
 808574c:	4649      	mov	r1, r9
 808574e:	1d30      	adds	r0, r6, #4
 8085750:	f7ff fddc 	bl	808530c <_ZNK5spark6detail9LogFilter5levelEPKc>
 8085754:	4583      	cmp	fp, r0
 8085756:	d3f5      	bcc.n	8085744 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
        write(data, size);
 8085758:	6833      	ldr	r3, [r6, #0]
 808575a:	4642      	mov	r2, r8
 808575c:	68db      	ldr	r3, [r3, #12]
 808575e:	4639      	mov	r1, r7
 8085760:	4630      	mov	r0, r6
 8085762:	4798      	blx	r3
 8085764:	e7ee      	b.n	8085744 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 8085766:	2300      	movs	r3, #0
 8085768:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
 808576a:	a801      	add	r0, sp, #4
 808576c:	f7ff ff8a 	bl	8085684 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->write(data, size, (LogLevel)level, category);
        }
        that->setActive(false);
    }
}
 8085770:	b003      	add	sp, #12
 8085772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8085776:	bf00      	nop
 8085778:	e000ed00 	.word	0xe000ed00

0808577c <_ZN5spark10LogManager10logEnabledEiPKcPv>:

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 808577c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8085780:	4b15      	ldr	r3, [pc, #84]	; (80857d8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5c>)
 8085782:	4604      	mov	r4, r0
 8085784:	685b      	ldr	r3, [r3, #4]
 8085786:	4688      	mov	r8, r1
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 8085788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 808578c:	b9fb      	cbnz	r3, 80857ce <_ZN5spark10LogManager10logEnabledEiPKcPv+0x52>
        return 0;
    }
#endif
    LogManager *that = instance();
 808578e:	f7ff fe37 	bl	8085400 <_ZN5spark10LogManager8instanceEv>
 8085792:	4606      	mov	r6, r0
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
 8085794:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8085796:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8085798:	f7ff f87b 	bl	8084892 <_ZN14RecursiveMutex4lockEv>
 808579c:	e896 00a0 	ldmia.w	r6, {r5, r7}
 80857a0:	2646      	movs	r6, #70	; 0x46
 80857a2:	eb05 0787 	add.w	r7, r5, r7, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 80857a6:	42af      	cmp	r7, r5
 80857a8:	d107      	bne.n	80857ba <_ZN5spark10LogManager10logEnabledEiPKcPv+0x3e>
        return 0;
    }
#endif
    LogManager *that = instance();
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
 80857aa:	a801      	add	r0, sp, #4
 80857ac:	f7ff ff6a 	bl	8085684 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            if (level < minLevel) {
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
 80857b0:	42b4      	cmp	r4, r6
 80857b2:	bfb4      	ite	lt
 80857b4:	2000      	movlt	r0, #0
 80857b6:	2001      	movge	r0, #1
 80857b8:	e00a      	b.n	80857d0 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x54>
inline LogLevel spark::LogHandler::level() const {
    return filter_.level();
}

inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
 80857ba:	f855 0b04 	ldr.w	r0, [r5], #4
 80857be:	4641      	mov	r1, r8
 80857c0:	3004      	adds	r0, #4
 80857c2:	f7ff fda3 	bl	808530c <_ZNK5spark6detail9LogFilter5levelEPKc>
 80857c6:	4286      	cmp	r6, r0
 80857c8:	bfa8      	it	ge
 80857ca:	4606      	movge	r6, r0
 80857cc:	e7eb      	b.n	80857a6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2a>
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
        return 0;
 80857ce:	2000      	movs	r0, #0
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
}
 80857d0:	b002      	add	sp, #8
 80857d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80857d6:	bf00      	nop
 80857d8:	e000ed00 	.word	0xe000ed00

080857dc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 80857dc:	b570      	push	{r4, r5, r6, lr}
 80857de:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 80857e0:	6803      	ldr	r3, [r0, #0]
 80857e2:	6842      	ldr	r2, [r0, #4]
 80857e4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
 80857e8:	429a      	cmp	r2, r3
 80857ea:	4618      	mov	r0, r3
 80857ec:	d00d      	beq.n	808580a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
            if (*p == value) {
 80857ee:	6806      	ldr	r6, [r0, #0]
 80857f0:	680d      	ldr	r5, [r1, #0]
 80857f2:	3304      	adds	r3, #4
 80857f4:	42ae      	cmp	r6, r5
 80857f6:	d1f7      	bne.n	80857e8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
 80857f8:	1d01      	adds	r1, r0, #4
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
 80857fa:	1a52      	subs	r2, r2, r1
 80857fc:	f003 fcff 	bl	80891fe <memmove>
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
 8085800:	6863      	ldr	r3, [r4, #4]
    return true;
 8085802:	2001      	movs	r0, #1
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
 8085804:	3b01      	subs	r3, #1
 8085806:	6063      	str	r3, [r4, #4]
    return true;
}
 8085808:	bd70      	pop	{r4, r5, r6, pc}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
 808580a:	2000      	movs	r0, #0
 808580c:	bd70      	pop	{r4, r5, r6, pc}

0808580e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
 808580e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8085810:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 8085812:	3024      	adds	r0, #36	; 0x24
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
 8085814:	9101      	str	r1, [sp, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8085816:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
 8085818:	f7ff f83b 	bl	8084892 <_ZN14RecursiveMutex4lockEv>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 808581c:	a901      	add	r1, sp, #4
 808581e:	4620      	mov	r0, r4
 8085820:	f7ff ffdc 	bl	80857dc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 8085824:	b920      	cbnz	r0, 8085830 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x22>
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
 8085826:	a803      	add	r0, sp, #12
 8085828:	f7ff ff2c 	bl	8085684 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
            resetSystemCallbacks();
        }
    }
}
 808582c:	b004      	add	sp, #16
 808582e:	bd10      	pop	{r4, pc}
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 8085830:	6863      	ldr	r3, [r4, #4]
 8085832:	2b00      	cmp	r3, #0
 8085834:	d1f7      	bne.n	8085826 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>
            resetSystemCallbacks();
 8085836:	f7ff fe0d 	bl	8085454 <_ZN5spark10LogManager20resetSystemCallbacksEv>
 808583a:	e7f4      	b.n	8085826 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>

0808583c <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
            break;
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
 808583c:	b570      	push	{r4, r5, r6, lr}
 808583e:	4604      	mov	r4, r0
 8085840:	6905      	ldr	r5, [r0, #16]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
 8085842:	6943      	ldr	r3, [r0, #20]
 8085844:	2618      	movs	r6, #24
 8085846:	fb06 5603 	mla	r6, r6, r3, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 808584a:	42ae      	cmp	r6, r5
 808584c:	d015      	beq.n	808587a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 808584e:	f105 0110 	add.w	r1, r5, #16
 8085852:	4620      	mov	r0, r4
 8085854:	f7ff ffc2 	bl	80857dc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 8085858:	6863      	ldr	r3, [r4, #4]
 808585a:	b90b      	cbnz	r3, 8085860 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 808585c:	f7ff fdfa 	bl	8085454 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        }
        handlerFactory_->destroyHandler(h.handler);
 8085860:	69e0      	ldr	r0, [r4, #28]
 8085862:	6929      	ldr	r1, [r5, #16]
 8085864:	6803      	ldr	r3, [r0, #0]
 8085866:	68db      	ldr	r3, [r3, #12]
 8085868:	4798      	blx	r3
        if (h.stream) {
 808586a:	6969      	ldr	r1, [r5, #20]
 808586c:	b119      	cbz	r1, 8085876 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 808586e:	6a20      	ldr	r0, [r4, #32]
 8085870:	6803      	ldr	r3, [r0, #0]
 8085872:	68db      	ldr	r3, [r3, #12]
 8085874:	4798      	blx	r3
 8085876:	3518      	adds	r5, #24
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
    for (const FactoryHandler &h: factoryHandlers_) {
 8085878:	e7e7      	b.n	808584a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
 808587a:	6925      	ldr	r5, [r4, #16]
 808587c:	6963      	ldr	r3, [r4, #20]
 808587e:	2618      	movs	r6, #24
 8085880:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
 8085884:	42b5      	cmp	r5, r6
 8085886:	d004      	beq.n	8085892 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
 8085888:	4628      	mov	r0, r5
 808588a:	f7ff f97f 	bl	8084b8c <_ZN6StringD1Ev>
 808588e:	3518      	adds	r5, #24
 8085890:	e7f8      	b.n	8085884 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
 8085892:	2300      	movs	r3, #0
 8085894:	6163      	str	r3, [r4, #20]
 8085896:	bd70      	pop	{r4, r5, r6, pc}

08085898 <_ZN5spark10LogManagerD1Ev>:
    streamFactory_ = DefaultOutputStreamFactory::instance();
#endif
    outputActive_ = false;
}

spark::LogManager::~LogManager() {
 8085898:	b573      	push	{r0, r1, r4, r5, r6, lr}
 808589a:	4604      	mov	r4, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808589c:	ad02      	add	r5, sp, #8
    resetSystemCallbacks();
 808589e:	f7ff fdd9 	bl	8085454 <_ZN5spark10LogManager20resetSystemCallbacksEv>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
 80858a2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80858a6:	f845 0d04 	str.w	r0, [r5, #-4]!
      { _M_device.lock(); }
 80858aa:	f7fe fff2 	bl	8084892 <_ZN14RecursiveMutex4lockEv>
         destroyFactoryHandlers();
 80858ae:	4620      	mov	r0, r4
 80858b0:	f7ff ffc4 	bl	808583c <_ZN5spark10LogManager22destroyFactoryHandlersEv>
}

spark::LogManager::~LogManager() {
    resetSystemCallbacks();
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
 80858b4:	4628      	mov	r0, r5
 80858b6:	f7ff fee5 	bl	8085684 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80858ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80858bc:	b108      	cbz	r0, 80858c2 <_ZN5spark10LogManagerD1Ev+0x2a>
            os_mutex_recursive_destroy(handle_);
 80858be:	f7fe fcd9 	bl	8084274 <os_mutex_recursive_destroy>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
 80858c2:	6925      	ldr	r5, [r4, #16]
 80858c4:	6963      	ldr	r3, [r4, #20]
 80858c6:	2618      	movs	r6, #24
 80858c8:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
 80858cc:	42b5      	cmp	r5, r6
 80858ce:	d004      	beq.n	80858da <_ZN5spark10LogManagerD1Ev+0x42>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
 80858d0:	4628      	mov	r0, r5
 80858d2:	f7ff f95b 	bl	8084b8c <_ZN6StringD1Ev>
 80858d6:	3518      	adds	r5, #24
 80858d8:	e7f8      	b.n	80858cc <_ZN5spark10LogManagerD1Ev+0x34>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 80858da:	6920      	ldr	r0, [r4, #16]
 80858dc:	f7fe ff30 	bl	8084740 <free>
 80858e0:	6820      	ldr	r0, [r4, #0]
 80858e2:	f7fe ff2d 	bl	8084740 <free>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
         destroyFactoryHandlers();
    }
#endif
}
 80858e6:	4620      	mov	r0, r4
 80858e8:	b002      	add	sp, #8
 80858ea:	bd70      	pop	{r4, r5, r6, pc}

080858ec <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>:
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80858ec:	6803      	ldr	r3, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 80858ee:	680a      	ldr	r2, [r1, #0]
 80858f0:	6002      	str	r2, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80858f2:	600b      	str	r3, [r1, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80858f4:	6843      	ldr	r3, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 80858f6:	684a      	ldr	r2, [r1, #4]
 80858f8:	6042      	str	r2, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80858fa:	604b      	str	r3, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80858fc:	6883      	ldr	r3, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
 80858fe:	688a      	ldr	r2, [r1, #8]
 8085900:	6082      	str	r2, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8085902:	608b      	str	r3, [r1, #8]
 8085904:	4770      	bx	lr

08085906 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 8085906:	b510      	push	{r4, lr}
 8085908:	4604      	mov	r4, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 808590a:	2300      	movs	r3, #0
 808590c:	6003      	str	r3, [r0, #0]
 808590e:	6043      	str	r3, [r0, #4]
 8085910:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
 8085912:	f7ff ffeb 	bl	80858ec <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
}
 8085916:	4620      	mov	r0, r4
 8085918:	bd10      	pop	{r4, pc}

0808591a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
 808591a:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
 808591c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808591e:	4604      	mov	r4, r0
 8085920:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 8085922:	d925      	bls.n	8085970 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
 8085924:	4290      	cmp	r0, r2
 8085926:	d224      	bcs.n	8085972 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x58>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
 8085928:	1a55      	subs	r5, r2, r1
 808592a:	3d14      	subs	r5, #20
 808592c:	442c      	add	r4, r5
 808592e:	f1a1 0714 	sub.w	r7, r1, #20
 8085932:	f1a2 050c 	sub.w	r5, r2, #12
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 8085936:	2600      	movs	r6, #0
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
 8085938:	f1a5 0308 	sub.w	r3, r5, #8
 808593c:	429f      	cmp	r7, r3
 808593e:	d037      	beq.n	80859b0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*end));
 8085940:	b184      	cbz	r4, 8085964 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4a>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
 8085942:	f855 3c08 	ldr.w	r3, [r5, #-8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
 8085946:	4629      	mov	r1, r5
 8085948:	6023      	str	r3, [r4, #0]
 808594a:	f835 3c04 	ldrh.w	r3, [r5, #-4]
 808594e:	f104 0008 	add.w	r0, r4, #8
 8085952:	80a3      	strh	r3, [r4, #4]
 8085954:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 8085958:	60a6      	str	r6, [r4, #8]
 808595a:	80e3      	strh	r3, [r4, #6]
 808595c:	60e6      	str	r6, [r4, #12]
 808595e:	6126      	str	r6, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
 8085960:	f7ff ffc4 	bl	80858ec <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
 8085964:	4628      	mov	r0, r5
 8085966:	f7ff fe33 	bl	80855d0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
 808596a:	3c14      	subs	r4, #20
 808596c:	3d14      	subs	r5, #20
 808596e:	e7e3      	b.n	8085938 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
 8085970:	d01e      	beq.n	80859b0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
 8085972:	f101 0508 	add.w	r5, r1, #8
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 8085976:	2700      	movs	r7, #0
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
 8085978:	f1a5 0308 	sub.w	r3, r5, #8
 808597c:	429e      	cmp	r6, r3
 808597e:	d017      	beq.n	80859b0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*p));
 8085980:	b184      	cbz	r4, 80859a4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x8a>
 8085982:	f855 3c08 	ldr.w	r3, [r5, #-8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
 8085986:	4629      	mov	r1, r5
 8085988:	6023      	str	r3, [r4, #0]
 808598a:	f835 3c04 	ldrh.w	r3, [r5, #-4]
 808598e:	f104 0008 	add.w	r0, r4, #8
 8085992:	80a3      	strh	r3, [r4, #4]
 8085994:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 8085998:	60a7      	str	r7, [r4, #8]
 808599a:	80e3      	strh	r3, [r4, #6]
 808599c:	60e7      	str	r7, [r4, #12]
 808599e:	6127      	str	r7, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
 80859a0:	f7ff ffa4 	bl	80858ec <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
 80859a4:	4628      	mov	r0, r5
 80859a6:	f7ff fe13 	bl	80855d0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
 80859aa:	3414      	adds	r4, #20
 80859ac:	3514      	adds	r5, #20
 80859ae:	e7e3      	b.n	8085978 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
 80859b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080859b2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 80859b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80859b4:	6845      	ldr	r5, [r0, #4]
 80859b6:	6883      	ldr	r3, [r0, #8]
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 80859b8:	4604      	mov	r4, r0
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80859ba:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 80859bc:	460e      	mov	r6, r1
 80859be:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80859c0:	db0e      	blt.n	80859e0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2e>
 80859c2:	3501      	adds	r5, #1
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
 80859c4:	2d00      	cmp	r5, #0
 80859c6:	dd05      	ble.n	80859d4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
 80859c8:	00a9      	lsls	r1, r5, #2
 80859ca:	6800      	ldr	r0, [r0, #0]
 80859cc:	f7fe fec0 	bl	8084750 <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
 80859d0:	b920      	cbnz	r0, 80859dc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2a>
 80859d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 80859d4:	6800      	ldr	r0, [r0, #0]
 80859d6:	f7fe feb3 	bl	8084740 <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
 80859da:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
 80859dc:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 80859de:	60a5      	str	r5, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
 80859e0:	6825      	ldr	r5, [r4, #0]
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
 80859e2:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
 80859e4:	eb05 0186 	add.w	r1, r5, r6, lsl #2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
 80859e8:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80859ec:	1a52      	subs	r2, r2, r1
 80859ee:	1d08      	adds	r0, r1, #4
 80859f0:	f003 fc05 	bl	80891fe <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
 80859f4:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
 80859f8:	6863      	ldr	r3, [r4, #4]
 80859fa:	2001      	movs	r0, #1
 80859fc:	3301      	adds	r3, #1
 80859fe:	6063      	str	r3, [r4, #4]
    return true;
}
 8085a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08085a02 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
 8085a02:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8085a04:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 8085a06:	3024      	adds	r0, #36	; 0x24
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
 8085a08:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8085a0a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8085a0c:	f7fe ff41 	bl	8084892 <_ZN14RecursiveMutex4lockEv>
    return p - data_;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::contains(const T &value) const {
    return find(data_, data_ + size_, value);
 8085a10:	6823      	ldr	r3, [r4, #0]
 8085a12:	6861      	ldr	r1, [r4, #4]
 8085a14:	eb03 0081 	add.w	r0, r3, r1, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
 8085a18:	4283      	cmp	r3, r0
 8085a1a:	461a      	mov	r2, r3
 8085a1c:	d008      	beq.n	8085a30 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2e>
            if (*p == value) {
 8085a1e:	6812      	ldr	r2, [r2, #0]
 8085a20:	3304      	adds	r3, #4
 8085a22:	42aa      	cmp	r2, r5
 8085a24:	d1f8      	bne.n	8085a18 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x16>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
            return false;
 8085a26:	a801      	add	r0, sp, #4
 8085a28:	f7ff fe2c 	bl	8085684 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 8085a2c:	2500      	movs	r5, #0
 8085a2e:	e00e      	b.n	8085a4e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4c>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
 8085a30:	462a      	mov	r2, r5
 8085a32:	4620      	mov	r0, r4
 8085a34:	f7ff ffbd 	bl	80859b2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 8085a38:	4605      	mov	r5, r0
 8085a3a:	2800      	cmp	r0, #0
 8085a3c:	d0f3      	beq.n	8085a26 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x24>
            return false;
        }
        if (activeHandlers_.size() == 1) {
 8085a3e:	6863      	ldr	r3, [r4, #4]
 8085a40:	2b01      	cmp	r3, #1
 8085a42:	d101      	bne.n	8085a48 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x46>
            setSystemCallbacks();
 8085a44:	f7ff fcfa 	bl	808543c <_ZN5spark10LogManager18setSystemCallbacksEv>
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
 8085a48:	a801      	add	r0, sp, #4
 8085a4a:	f7ff fe1b 	bl	8085684 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.size() == 1) {
            setSystemCallbacks();
        }
    }
    return true;
}
 8085a4e:	4628      	mov	r0, r5
 8085a50:	b003      	add	sp, #12
 8085a52:	bd30      	pop	{r4, r5, pc}

08085a54 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
 8085a54:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
 8085a56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8085a58:	4606      	mov	r6, r0
 8085a5a:	460c      	mov	r4, r1
 8085a5c:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
 8085a5e:	d914      	bls.n	8085a8a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 8085a60:	4290      	cmp	r0, r2
 8085a62:	d213      	bcs.n	8085a8c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            // Move elements in reverse order
            --p;
            --end;
 8085a64:	f1a2 0510 	sub.w	r5, r2, #16
            dest += end - p - 1;
 8085a68:	1a6c      	subs	r4, r5, r1
 8085a6a:	f1a1 0710 	sub.w	r7, r1, #16
 8085a6e:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
 8085a70:	42af      	cmp	r7, r5
 8085a72:	d018      	beq.n	8085aa6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 8085a74:	b11c      	cbz	r4, 8085a7e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 8085a76:	4629      	mov	r1, r5
 8085a78:	4620      	mov	r0, r4
 8085a7a:	f7ff f877 	bl	8084b6c <_ZN6StringC1EOS_>
                end->~T();
 8085a7e:	4628      	mov	r0, r5
 8085a80:	f7ff f884 	bl	8084b8c <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
 8085a84:	3d10      	subs	r5, #16
 8085a86:	3c10      	subs	r4, #16
 8085a88:	e7f2      	b.n	8085a70 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
 8085a8a:	d00c      	beq.n	8085aa6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 8085a8c:	42ac      	cmp	r4, r5
 8085a8e:	d00a      	beq.n	8085aa6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 8085a90:	b11e      	cbz	r6, 8085a9a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 8085a92:	4621      	mov	r1, r4
 8085a94:	4630      	mov	r0, r6
 8085a96:	f7ff f869 	bl	8084b6c <_ZN6StringC1EOS_>
                p->~T();
 8085a9a:	4620      	mov	r0, r4
 8085a9c:	f7ff f876 	bl	8084b8c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
 8085aa0:	3410      	adds	r4, #16
 8085aa2:	3610      	adds	r6, #16
 8085aa4:	e7f2      	b.n	8085a8c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
 8085aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08085aa8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
 8085aa8:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
 8085aaa:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
 8085aac:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
 8085aae:	dd0b      	ble.n	8085ac8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
 8085ab0:	0130      	lsls	r0, r6, #4
 8085ab2:	f7fe fe3d 	bl	8084730 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
 8085ab6:	4604      	mov	r4, r0
 8085ab8:	b170      	cbz	r0, 8085ad8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
 8085aba:	e895 0006 	ldmia.w	r5, {r1, r2}
 8085abe:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8085ac2:	f7ff ffc7 	bl	8085a54 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
 8085ac6:	e000      	b.n	8085aca <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
 8085ac8:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 8085aca:	6828      	ldr	r0, [r5, #0]
 8085acc:	f7fe fe38 	bl	8084740 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
 8085ad0:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 8085ad2:	60ae      	str	r6, [r5, #8]
        return true;
 8085ad4:	2001      	movs	r0, #1
 8085ad6:	bd70      	pop	{r4, r5, r6, pc}
    }
 8085ad8:	bd70      	pop	{r4, r5, r6, pc}

08085ada <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 8085ada:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8085ade:	4692      	mov	sl, r2
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 8085ae0:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 8085ae2:	2246      	movs	r2, #70	; 0x46

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 8085ae4:	b095      	sub	sp, #84	; 0x54
 8085ae6:	6003      	str	r3, [r0, #0]
 8085ae8:	6043      	str	r3, [r0, #4]
 8085aea:	6083      	str	r3, [r0, #8]
 8085aec:	60c3      	str	r3, [r0, #12]
 8085aee:	6103      	str	r3, [r0, #16]
 8085af0:	6143      	str	r3, [r0, #20]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 8085af2:	7602      	strb	r2, [r0, #24]

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 8085af4:	9102      	str	r1, [sp, #8]
 8085af6:	f8da 1004 	ldr.w	r1, [sl, #4]
 8085afa:	4605      	mov	r5, r0
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
 8085afc:	4299      	cmp	r1, r3
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 8085afe:	9308      	str	r3, [sp, #32]
 8085b00:	9309      	str	r3, [sp, #36]	; 0x24
 8085b02:	930a      	str	r3, [sp, #40]	; 0x28
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
 8085b04:	f340 809d 	ble.w	8085c42 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
 8085b08:	a808      	add	r0, sp, #32
 8085b0a:	f7ff ffcd 	bl	8085aa8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 8085b0e:	2800      	cmp	r0, #0
 8085b10:	f040 8097 	bne.w	8085c42 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
 8085b14:	e08e      	b.n	8085c34 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15a>
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
 8085b16:	4621      	mov	r1, r4
 8085b18:	a80b      	add	r0, sp, #44	; 0x2c
 8085b1a:	f7ff f827 	bl	8084b6c <_ZN6StringC1EOS_>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
 8085b1e:	a90b      	add	r1, sp, #44	; 0x2c
 8085b20:	a80f      	add	r0, sp, #60	; 0x3c
 8085b22:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8085b24:	f7ff f822 	bl	8084b6c <_ZN6StringC1EOS_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 8085b28:	9909      	ldr	r1, [sp, #36]	; 0x24
 8085b2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8085b2c:	4299      	cmp	r1, r3
 8085b2e:	f2c0 80ce 	blt.w	8085cce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
 8085b32:	3101      	adds	r1, #1
 8085b34:	a808      	add	r0, sp, #32
 8085b36:	f7ff ffb7 	bl	8085aa8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 8085b3a:	2800      	cmp	r0, #0
 8085b3c:	f040 80c7 	bne.w	8085cce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
 8085b40:	a80f      	add	r0, sp, #60	; 0x3c
 8085b42:	f7ff f823 	bl	8084b8c <_ZN6StringD1Ev>
 8085b46:	a80b      	add	r0, sp, #44	; 0x2c
 8085b48:	f7ff f820 	bl	8084b8c <_ZN6StringD1Ev>
 8085b4c:	3414      	adds	r4, #20
    // Store category names
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
 8085b4e:	42a7      	cmp	r7, r4
 8085b50:	d1e1      	bne.n	8085b16 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x3c>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 8085b52:	2600      	movs	r6, #0
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
 8085b54:	46b1      	mov	r9, r6
 8085b56:	960b      	str	r6, [sp, #44]	; 0x2c
 8085b58:	960c      	str	r6, [sp, #48]	; 0x30
 8085b5a:	960d      	str	r6, [sp, #52]	; 0x34
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
 8085b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8085b5e:	429e      	cmp	r6, r3
 8085b60:	f280 80a8 	bge.w	8085cb4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
 8085b64:	9a08      	ldr	r2, [sp, #32]
 8085b66:	0133      	lsls	r3, r6, #4
 8085b68:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 8085b6a:	9306      	str	r3, [sp, #24]
        if (!category) {
 8085b6c:	2b00      	cmp	r3, #0
 8085b6e:	f000 809f 	beq.w	8085cb0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
 8085b72:	2314      	movs	r3, #20
 8085b74:	4373      	muls	r3, r6
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
 8085b76:	f8cd 901c 	str.w	r9, [sp, #28]
 8085b7a:	9301      	str	r3, [sp, #4]
    for (int i = 0; i < cats.size(); ++i) {
        const char *category = cats.at(i).c_str();
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
 8085b7c:	ac0b      	add	r4, sp, #44	; 0x2c
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
 8085b7e:	a907      	add	r1, sp, #28
 8085b80:	a806      	add	r0, sp, #24
 8085b82:	f7ff fb0b 	bl	808519c <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 8085b86:	4607      	mov	r7, r0
 8085b88:	2800      	cmp	r0, #0
 8085b8a:	f000 8091 	beq.w	8085cb0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
            bool found = false;
 8085b8e:	ab14      	add	r3, sp, #80	; 0x50
            const int index = nodeIndex(*pNodes, name, size, found);
 8085b90:	4601      	mov	r1, r0
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
 8085b92:	f803 9d39 	strb.w	r9, [r3, #-57]!
            const int index = nodeIndex(*pNodes, name, size, found);
 8085b96:	9a07      	ldr	r2, [sp, #28]
 8085b98:	4620      	mov	r0, r4
 8085b9a:	f7ff fb77 	bl	808528c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 8085b9e:	f89d 8017 	ldrb.w	r8, [sp, #23]
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
 8085ba2:	9000      	str	r0, [sp, #0]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 8085ba4:	f1b8 0f00 	cmp.w	r8, #0
 8085ba8:	d153      	bne.n	8085c52 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
 8085baa:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    Vector<Node> nodes; // Children nodes

    Node(const char *name, uint16_t size) :
            name(name),
            size(size),
            level(-1) {
 8085bae:	970f      	str	r7, [sp, #60]	; 0x3c
 8085bb0:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8085bb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8085bb8:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 8085bbc:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8085bc0:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
 8085bc4:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 8085bc8:	6867      	ldr	r7, [r4, #4]
 8085bca:	68a3      	ldr	r3, [r4, #8]
 8085bcc:	429f      	cmp	r7, r3
 8085bce:	da4f      	bge.n	8085c70 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x196>
        return false;
    }
    T* const p = data_ + i;
 8085bd0:	9b00      	ldr	r3, [sp, #0]
 8085bd2:	2214      	movs	r2, #20
 8085bd4:	4353      	muls	r3, r2
 8085bd6:	f8d4 b000 	ldr.w	fp, [r4]
    move(p + 1, p, data_ + size_);
 8085bda:	6861      	ldr	r1, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
 8085bdc:	eb0b 0703 	add.w	r7, fp, r3
    move(p + 1, p, data_ + size_);
 8085be0:	fb02 b201 	mla	r2, r2, r1, fp
 8085be4:	f107 0014 	add.w	r0, r7, #20
 8085be8:	4639      	mov	r1, r7
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
 8085bea:	9303      	str	r3, [sp, #12]
    move(p + 1, p, data_ + size_);
 8085bec:	f7ff fe95 	bl	808591a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 8085bf0:	b1a7      	cbz	r7, 8085c1c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x142>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
 8085bf2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8085bf4:	9b03      	ldr	r3, [sp, #12]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
 8085bf6:	a911      	add	r1, sp, #68	; 0x44
 8085bf8:	f84b 2003 	str.w	r2, [fp, r3]
 8085bfc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8085c00:	f107 0008 	add.w	r0, r7, #8
 8085c04:	80bb      	strh	r3, [r7, #4]
 8085c06:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 8085c0a:	f8c7 9008 	str.w	r9, [r7, #8]
 8085c0e:	80fb      	strh	r3, [r7, #6]
 8085c10:	f8c7 900c 	str.w	r9, [r7, #12]
 8085c14:	f8c7 9010 	str.w	r9, [r7, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
 8085c18:	f7ff fe68 	bl	80858ec <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
    ++size_;
 8085c1c:	6863      	ldr	r3, [r4, #4]
 8085c1e:	3301      	adds	r3, #1
 8085c20:	6063      	str	r3, [r4, #4]
 8085c22:	a811      	add	r0, sp, #68	; 0x44
 8085c24:	f7ff fcd4 	bl	80855d0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 8085c28:	f1b8 0f00 	cmp.w	r8, #0
 8085c2c:	d011      	beq.n	8085c52 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
 8085c2e:	a80b      	add	r0, sp, #44	; 0x2c
 8085c30:	f7ff fcce 	bl	80855d0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 8085c34:	a808      	add	r0, sp, #32
 8085c36:	f7ff fcdf 	bl	80855f8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
    using std::swap;
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}
 8085c3a:	4628      	mov	r0, r5
 8085c3c:	b015      	add	sp, #84	; 0x54
 8085c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8085c42:	f8da 4000 	ldr.w	r4, [sl]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
 8085c46:	f8da 3004 	ldr.w	r3, [sl, #4]
 8085c4a:	2714      	movs	r7, #20
 8085c4c:	fb07 4703 	mla	r7, r7, r3, r4
 8085c50:	e77d      	b.n	8085b4e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_[size_ - 1];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::at(int i) {
    return data_[i];
 8085c52:	6823      	ldr	r3, [r4, #0]
 8085c54:	9a00      	ldr	r2, [sp, #0]
 8085c56:	2414      	movs	r4, #20
 8085c58:	fb04 3402 	mla	r4, r4, r2, r3
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
                return;
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
 8085c5c:	9b06      	ldr	r3, [sp, #24]
 8085c5e:	781b      	ldrb	r3, [r3, #0]
 8085c60:	bb23      	cbnz	r3, 8085cac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
                node.level = filters.at(i).level_;
 8085c62:	f8da 3000 	ldr.w	r3, [sl]
 8085c66:	9a01      	ldr	r2, [sp, #4]
 8085c68:	4413      	add	r3, r2
 8085c6a:	7c1b      	ldrb	r3, [r3, #16]
 8085c6c:	80e3      	strh	r3, [r4, #6]
 8085c6e:	e01d      	b.n	8085cac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 8085c70:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
 8085c72:	2f00      	cmp	r7, #0
 8085c74:	dd0f      	ble.n	8085c96 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
 8085c76:	2314      	movs	r3, #20
 8085c78:	fb03 f007 	mul.w	r0, r3, r7
 8085c7c:	9303      	str	r3, [sp, #12]
 8085c7e:	f7fe fd57 	bl	8084730 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
 8085c82:	4683      	mov	fp, r0
 8085c84:	b178      	cbz	r0, 8085ca6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1cc>
                return false;
            }
            move(d, data_, data_ + size_);
 8085c86:	e894 0006 	ldmia.w	r4, {r1, r2}
 8085c8a:	9b03      	ldr	r3, [sp, #12]
 8085c8c:	fb03 1202 	mla	r2, r3, r2, r1
 8085c90:	f7ff fe43 	bl	808591a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
 8085c94:	e000      	b.n	8085c98 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1be>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
 8085c96:	46c3      	mov	fp, r8
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 8085c98:	6820      	ldr	r0, [r4, #0]
 8085c9a:	f7fe fd51 	bl	8084740 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
 8085c9e:	f8c4 b000 	str.w	fp, [r4]
        capacity_ = n;
 8085ca2:	60a7      	str	r7, [r4, #8]
 8085ca4:	e794      	b.n	8085bd0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xf6>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 8085ca6:	f04f 0801 	mov.w	r8, #1
 8085caa:	e7ba      	b.n	8085c22 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x148>
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
                node.level = filters.at(i).level_;
            }
            pNodes = &node.nodes;
 8085cac:	3408      	adds	r4, #8
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
 8085cae:	e766      	b.n	8085b7e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa4>
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
 8085cb0:	3601      	adds	r6, #1
 8085cb2:	e753      	b.n	8085b5c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x82>
            }
            pNodes = &node.nodes;
        }
    }
    using std::swap;
    swap(cats_, cats);
 8085cb4:	a908      	add	r1, sp, #32
 8085cb6:	4628      	mov	r0, r5
 8085cb8:	f7ff fe18 	bl	80858ec <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    swap(nodes_, nodes);
 8085cbc:	a90b      	add	r1, sp, #44	; 0x2c
 8085cbe:	f105 000c 	add.w	r0, r5, #12
 8085cc2:	f7ff fe13 	bl	80858ec <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    level_ = level;
 8085cc6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8085cca:	762b      	strb	r3, [r5, #24]
 8085ccc:	e7af      	b.n	8085c2e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x154>
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
 8085cce:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 8085cd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
 8085cd2:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 8085cd6:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8085cda:	4631      	mov	r1, r6
 8085cdc:	f106 0010 	add.w	r0, r6, #16
 8085ce0:	f7ff feb8 	bl	8085a54 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 8085ce4:	b11e      	cbz	r6, 8085cee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x214>
 8085ce6:	a90f      	add	r1, sp, #60	; 0x3c
 8085ce8:	4630      	mov	r0, r6
 8085cea:	f7fe ff3f 	bl	8084b6c <_ZN6StringC1EOS_>
    ++size_;
 8085cee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8085cf0:	3301      	adds	r3, #1
 8085cf2:	9309      	str	r3, [sp, #36]	; 0x24
 8085cf4:	e724      	b.n	8085b40 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x66>
	...

08085cf8 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
 8085cf8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
 8085cfa:	4604      	mov	r4, r0
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
 8085cfc:	460e      	mov	r6, r1
 8085cfe:	4605      	mov	r5, r0
        filter_(level, filters) {
 8085d00:	4b08      	ldr	r3, [pc, #32]	; (8085d24 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
 8085d02:	4611      	mov	r1, r2
 8085d04:	f844 3b04 	str.w	r3, [r4], #4
 8085d08:	a801      	add	r0, sp, #4
 8085d0a:	f7fb fc75 	bl	80815f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 8085d0e:	aa01      	add	r2, sp, #4
 8085d10:	4631      	mov	r1, r6
 8085d12:	4620      	mov	r0, r4
 8085d14:	f7ff fee1 	bl	8085ada <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 8085d18:	a801      	add	r0, sp, #4
 8085d1a:	f7fb f885 	bl	8080e28 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 8085d1e:	4628      	mov	r0, r5
 8085d20:	b004      	add	sp, #16
 8085d22:	bd70      	pop	{r4, r5, r6, pc}
 8085d24:	0808a73c 	.word	0x0808a73c

08085d28 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
 8085d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8085d2a:	460f      	mov	r7, r1
 8085d2c:	b08b      	sub	sp, #44	; 0x2c
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 8085d2e:	492b      	ldr	r1, [pc, #172]	; (8085ddc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb4>)
 8085d30:	4638      	mov	r0, r7

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
 8085d32:	4616      	mov	r6, r2
 8085d34:	461d      	mov	r5, r3
 8085d36:	9c10      	ldr	r4, [sp, #64]	; 0x40
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 8085d38:	f003 fac4 	bl	80892c4 <strcmp>
 8085d3c:	bb28      	cbnz	r0, 8085d8a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x62>
        if (!stream) {
 8085d3e:	2c00      	cmp	r4, #0
 8085d40:	d049      	beq.n	8085dd6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr; // Output stream is not specified
        }
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 8085d42:	4629      	mov	r1, r5
 8085d44:	a801      	add	r0, sp, #4
 8085d46:	f7ff fdde 	bl	8085906 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 8085d4a:	4925      	ldr	r1, [pc, #148]	; (8085de0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
 8085d4c:	2024      	movs	r0, #36	; 0x24
 8085d4e:	f001 fe75 	bl	8087a3c <_ZnwjRKSt9nothrow_t>
 8085d52:	4605      	mov	r5, r0
 8085d54:	b1b8      	cbz	r0, 8085d86 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x5e>
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
 8085d56:	a901      	add	r1, sp, #4
 8085d58:	a804      	add	r0, sp, #16
 8085d5a:	f7ff fdd4 	bl	8085906 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
 8085d5e:	a904      	add	r1, sp, #16
 8085d60:	a807      	add	r0, sp, #28
 8085d62:	f7fb fc49 	bl	80815f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 8085d66:	aa07      	add	r2, sp, #28
 8085d68:	4631      	mov	r1, r6
 8085d6a:	4628      	mov	r0, r5
 8085d6c:	f7ff ffc4 	bl	8085cf8 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 8085d70:	a807      	add	r0, sp, #28
 8085d72:	f7fb f859 	bl	8080e28 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 8085d76:	4b1b      	ldr	r3, [pc, #108]	; (8085de4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
 8085d78:	622c      	str	r4, [r5, #32]
 8085d7a:	602b      	str	r3, [r5, #0]
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
 8085d7c:	a804      	add	r0, sp, #16
 8085d7e:	f7fb f853 	bl	8080e28 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 8085d82:	4b19      	ldr	r3, [pc, #100]	; (8085de8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc0>)
 8085d84:	602b      	str	r3, [r5, #0]
 8085d86:	a801      	add	r0, sp, #4
 8085d88:	e01f      	b.n	8085dca <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa2>
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 8085d8a:	4918      	ldr	r1, [pc, #96]	; (8085dec <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc4>)
 8085d8c:	4638      	mov	r0, r7
 8085d8e:	f003 fa99 	bl	80892c4 <strcmp>
 8085d92:	b9f0      	cbnz	r0, 8085dd2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xaa>
        if (!stream) {
 8085d94:	b1fc      	cbz	r4, 8085dd6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 8085d96:	4629      	mov	r1, r5
 8085d98:	a804      	add	r0, sp, #16
 8085d9a:	f7ff fdb4 	bl	8085906 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 8085d9e:	4910      	ldr	r1, [pc, #64]	; (8085de0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
 8085da0:	2024      	movs	r0, #36	; 0x24
 8085da2:	f001 fe4b 	bl	8087a3c <_ZnwjRKSt9nothrow_t>
 8085da6:	4605      	mov	r5, r0
 8085da8:	b170      	cbz	r0, 8085dc8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
 8085daa:	a904      	add	r1, sp, #16
 8085dac:	a807      	add	r0, sp, #28
 8085dae:	f7fb fc23 	bl	80815f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 8085db2:	aa07      	add	r2, sp, #28
 8085db4:	4631      	mov	r1, r6
 8085db6:	4628      	mov	r0, r5
 8085db8:	f7ff ff9e 	bl	8085cf8 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 8085dbc:	a807      	add	r0, sp, #28
 8085dbe:	f7fb f833 	bl	8080e28 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 8085dc2:	4b08      	ldr	r3, [pc, #32]	; (8085de4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
 8085dc4:	622c      	str	r4, [r5, #32]
 8085dc6:	602b      	str	r3, [r5, #0]
 8085dc8:	a804      	add	r0, sp, #16
 8085dca:	f7fb f82d 	bl	8080e28 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 8085dce:	4628      	mov	r0, r5
 8085dd0:	e002      	b.n	8085dd8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
        if (!stream) {
            return nullptr; // Output stream is not specified
 8085dd2:	2000      	movs	r0, #0
 8085dd4:	e000      	b.n	8085dd8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
 8085dd6:	4620      	mov	r0, r4
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}
 8085dd8:	b00b      	add	sp, #44	; 0x2c
 8085dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8085ddc:	0808b285 	.word	0x0808b285
 8085de0:	0808b4b6 	.word	0x0808b4b6
 8085de4:	0808b308 	.word	0x0808b308
 8085de8:	0808b214 	.word	0x0808b214
 8085dec:	0808b289 	.word	0x0808b289

08085df0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8085df0:	4a01      	ldr	r2, [pc, #4]	; (8085df8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 8085df2:	4b02      	ldr	r3, [pc, #8]	; (8085dfc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8085df4:	601a      	str	r2, [r3, #0]
 8085df6:	4770      	bx	lr
 8085df8:	0808b29a 	.word	0x0808b29a
 8085dfc:	20000414 	.word	0x20000414

08085e00 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 8085e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8085e04:	9d08      	ldr	r5, [sp, #32]
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
 8085e06:	f8d0 9020 	ldr.w	r9, [r0, #32]
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 8085e0a:	4604      	mov	r4, r0
 8085e0c:	460e      	mov	r6, r1
 8085e0e:	4617      	mov	r7, r2
 8085e10:	4698      	mov	r8, r3
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
 8085e12:	f000 ffab 	bl	8086d6c <_Z16_fetch_usbserialv>
 8085e16:	4581      	cmp	r9, r0
 8085e18:	d105      	bne.n	8085e26 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x26>
 8085e1a:	485a      	ldr	r0, [pc, #360]	; (8085f84 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 8085e1c:	f001 fa54 	bl	80872c8 <_ZN5spark12NetworkClass9listeningEv>
 8085e20:	2800      	cmp	r0, #0
 8085e22:	f040 80ac 	bne.w	8085f7e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17e>
        return; // Do not mix logging and serial console output
    }
#endif
    const char *s = nullptr;
    // Timestamp
    if (attr.has_time) {
 8085e26:	792b      	ldrb	r3, [r5, #4]
 8085e28:	071b      	lsls	r3, r3, #28
 8085e2a:	d505      	bpl.n	8085e38 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x38>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 8085e2c:	696b      	ldr	r3, [r5, #20]
 8085e2e:	4a56      	ldr	r2, [pc, #344]	; (8085f88 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 8085e30:	2100      	movs	r1, #0
 8085e32:	6a20      	ldr	r0, [r4, #32]
 8085e34:	f7ff f964 	bl	8085100 <_ZN5Print11printf_implEbPKcz>
        printf("%010u ", (unsigned)attr.time);
    }
    // Category
    if (category) {
 8085e38:	f1b8 0f00 	cmp.w	r8, #0
 8085e3c:	d00d      	beq.n	8085e5a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x5a>
        write('[');
 8085e3e:	215b      	movs	r1, #91	; 0x5b
 8085e40:	4620      	mov	r0, r4
 8085e42:	f7ff fa17 	bl	8085274 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 8085e46:	4641      	mov	r1, r8
 8085e48:	4620      	mov	r0, r4
 8085e4a:	f7ff fa05 	bl	8085258 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 8085e4e:	6823      	ldr	r3, [r4, #0]
 8085e50:	2202      	movs	r2, #2
 8085e52:	68db      	ldr	r3, [r3, #12]
 8085e54:	494d      	ldr	r1, [pc, #308]	; (8085f8c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 8085e56:	4620      	mov	r0, r4
 8085e58:	4798      	blx	r3
    }
    // Source file
    if (attr.has_file) {
 8085e5a:	792b      	ldrb	r3, [r5, #4]
 8085e5c:	07d9      	lsls	r1, r3, #31
 8085e5e:	d525      	bpl.n	8085eac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xac>
        s = extractFileName(attr.file); // Strip directory path
 8085e60:	f8d5 8008 	ldr.w	r8, [r5, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
 8085e64:	212f      	movs	r1, #47	; 0x2f
 8085e66:	4640      	mov	r0, r8
 8085e68:	f003 ff9e 	bl	8089da8 <strrchr>
    if (s1) {
 8085e6c:	b108      	cbz	r0, 8085e72 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x72>
        return s1 + 1;
 8085e6e:	f100 0801 	add.w	r8, r0, #1
        write("] ", 2);
    }
    // Source file
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        write(s); // File name
 8085e72:	4641      	mov	r1, r8
 8085e74:	4620      	mov	r0, r4
 8085e76:	f7ff f9ef 	bl	8085258 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 8085e7a:	792b      	ldrb	r3, [r5, #4]
 8085e7c:	079a      	lsls	r2, r3, #30
 8085e7e:	d509      	bpl.n	8085e94 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x94>
            write(':');
 8085e80:	213a      	movs	r1, #58	; 0x3a
 8085e82:	4620      	mov	r0, r4
 8085e84:	f7ff f9f6 	bl	8085274 <_ZN5spark16StreamLogHandler5writeEc>
 8085e88:	68eb      	ldr	r3, [r5, #12]
 8085e8a:	4a41      	ldr	r2, [pc, #260]	; (8085f90 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 8085e8c:	2100      	movs	r1, #0
 8085e8e:	6a20      	ldr	r0, [r4, #32]
 8085e90:	f7ff f936 	bl	8085100 <_ZN5Print11printf_implEbPKcz>
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
 8085e94:	792b      	ldrb	r3, [r5, #4]
            write(", ", 2);
 8085e96:	2202      	movs	r2, #2
        write(s); // File name
        if (attr.has_line) {
            write(':');
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
 8085e98:	f013 0f04 	tst.w	r3, #4
 8085e9c:	6823      	ldr	r3, [r4, #0]
            write(", ", 2);
 8085e9e:	bf18      	it	ne
 8085ea0:	493c      	ldrne	r1, [pc, #240]	; (8085f94 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 8085ea2:	68db      	ldr	r3, [r3, #12]
        } else {
            write(": ", 2);
 8085ea4:	bf08      	it	eq
 8085ea6:	493c      	ldreq	r1, [pc, #240]	; (8085f98 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 8085ea8:	4620      	mov	r0, r4
 8085eaa:	4798      	blx	r3
        }
    }
    // Function name
    if (attr.has_function) {
 8085eac:	792b      	ldrb	r3, [r5, #4]
 8085eae:	075b      	lsls	r3, r3, #29
 8085eb0:	d518      	bpl.n	8085ee4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe4>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 8085eb2:	6929      	ldr	r1, [r5, #16]
 8085eb4:	460a      	mov	r2, r1
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
 8085eb6:	4613      	mov	r3, r2
 8085eb8:	f813 0b01 	ldrb.w	r0, [r3], #1
 8085ebc:	b138      	cbz	r0, 8085ece <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
        if (*s == ' ') {
 8085ebe:	2820      	cmp	r0, #32
 8085ec0:	d101      	bne.n	8085ec6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
            s1 = s + 1; // Skip return type
 8085ec2:	4619      	mov	r1, r3
 8085ec4:	e001      	b.n	8085eca <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xca>
        } else if (*s == '(') {
 8085ec6:	2828      	cmp	r0, #40	; 0x28
 8085ec8:	d001      	beq.n	8085ece <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 8085eca:	461a      	mov	r2, r3
 8085ecc:	e7f3      	b.n	8085eb6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        write(s, n);
 8085ece:	6823      	ldr	r3, [r4, #0]
 8085ed0:	1a52      	subs	r2, r2, r1
 8085ed2:	68db      	ldr	r3, [r3, #12]
 8085ed4:	4620      	mov	r0, r4
 8085ed6:	4798      	blx	r3
        write("(): ", 4);
 8085ed8:	6823      	ldr	r3, [r4, #0]
 8085eda:	2204      	movs	r2, #4
 8085edc:	68db      	ldr	r3, [r3, #12]
 8085ede:	492f      	ldr	r1, [pc, #188]	; (8085f9c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 8085ee0:	4620      	mov	r0, r4
 8085ee2:	4798      	blx	r3
inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
}

inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
 8085ee4:	2100      	movs	r1, #0
 8085ee6:	4638      	mov	r0, r7
 8085ee8:	f7fe fb04 	bl	80844f4 <log_level_name>
    }
    // Level
    s = levelName(level);
    write(s);
 8085eec:	4601      	mov	r1, r0
 8085eee:	4620      	mov	r0, r4
 8085ef0:	f7ff f9b2 	bl	8085258 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 8085ef4:	6823      	ldr	r3, [r4, #0]
 8085ef6:	2202      	movs	r2, #2
 8085ef8:	68db      	ldr	r3, [r3, #12]
 8085efa:	4927      	ldr	r1, [pc, #156]	; (8085f98 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 8085efc:	4620      	mov	r0, r4
 8085efe:	4798      	blx	r3
    // Message
    if (msg) {
 8085f00:	b11e      	cbz	r6, 8085f0a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x10a>
        write(msg);
 8085f02:	4631      	mov	r1, r6
 8085f04:	4620      	mov	r0, r4
 8085f06:	f7ff f9a7 	bl	8085258 <_ZN5spark16StreamLogHandler5writeEPKc>
    }
    // Additional attributes
    if (attr.has_code || attr.has_details) {
 8085f0a:	792b      	ldrb	r3, [r5, #4]
 8085f0c:	f013 0f30 	tst.w	r3, #48	; 0x30
 8085f10:	d02d      	beq.n	8085f6e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16e>
        write(" [", 2);
 8085f12:	6823      	ldr	r3, [r4, #0]
 8085f14:	4620      	mov	r0, r4
 8085f16:	68db      	ldr	r3, [r3, #12]
 8085f18:	2202      	movs	r2, #2
 8085f1a:	4921      	ldr	r1, [pc, #132]	; (8085fa0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 8085f1c:	4798      	blx	r3
        // Code
        if (attr.has_code) {
 8085f1e:	792b      	ldrb	r3, [r5, #4]
 8085f20:	06d8      	lsls	r0, r3, #27
 8085f22:	d50b      	bpl.n	8085f3c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
            write("code = ", 7);
 8085f24:	6823      	ldr	r3, [r4, #0]
 8085f26:	2207      	movs	r2, #7
 8085f28:	68db      	ldr	r3, [r3, #12]
 8085f2a:	491e      	ldr	r1, [pc, #120]	; (8085fa4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 8085f2c:	4620      	mov	r0, r4
 8085f2e:	4798      	blx	r3
 8085f30:	69ab      	ldr	r3, [r5, #24]
 8085f32:	4a1d      	ldr	r2, [pc, #116]	; (8085fa8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a8>)
 8085f34:	2100      	movs	r1, #0
 8085f36:	6a20      	ldr	r0, [r4, #32]
 8085f38:	f7ff f8e2 	bl	8085100 <_ZN5Print11printf_implEbPKcz>
            printf("%" PRIiPTR, (intptr_t)attr.code);
        }
        // Details
        if (attr.has_details) {
 8085f3c:	792b      	ldrb	r3, [r5, #4]
 8085f3e:	0699      	lsls	r1, r3, #26
 8085f40:	d511      	bpl.n	8085f66 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
            if (attr.has_code) {
 8085f42:	06da      	lsls	r2, r3, #27
 8085f44:	d505      	bpl.n	8085f52 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x152>
                write(", ", 2);
 8085f46:	6823      	ldr	r3, [r4, #0]
 8085f48:	2202      	movs	r2, #2
 8085f4a:	68db      	ldr	r3, [r3, #12]
 8085f4c:	4911      	ldr	r1, [pc, #68]	; (8085f94 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 8085f4e:	4620      	mov	r0, r4
 8085f50:	4798      	blx	r3
            }
            write("details = ", 10);
 8085f52:	6823      	ldr	r3, [r4, #0]
 8085f54:	4915      	ldr	r1, [pc, #84]	; (8085fac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1ac>)
 8085f56:	4620      	mov	r0, r4
 8085f58:	68db      	ldr	r3, [r3, #12]
 8085f5a:	220a      	movs	r2, #10
 8085f5c:	4798      	blx	r3
            write(attr.details);
 8085f5e:	69e9      	ldr	r1, [r5, #28]
 8085f60:	4620      	mov	r0, r4
 8085f62:	f7ff f979 	bl	8085258 <_ZN5spark16StreamLogHandler5writeEPKc>
        }
        write(']');
 8085f66:	215d      	movs	r1, #93	; 0x5d
 8085f68:	4620      	mov	r0, r4
 8085f6a:	f7ff f983 	bl	8085274 <_ZN5spark16StreamLogHandler5writeEc>
    }
    write("\r\n", 2);
 8085f6e:	6823      	ldr	r3, [r4, #0]
 8085f70:	4620      	mov	r0, r4
}
 8085f72:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            write("details = ", 10);
            write(attr.details);
        }
        write(']');
    }
    write("\r\n", 2);
 8085f76:	68db      	ldr	r3, [r3, #12]
 8085f78:	2202      	movs	r2, #2
 8085f7a:	490d      	ldr	r1, [pc, #52]	; (8085fb0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1b0>)
 8085f7c:	4718      	bx	r3
 8085f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8085f82:	bf00      	nop
 8085f84:	2000057c 	.word	0x2000057c
 8085f88:	0808b29e 	.word	0x0808b29e
 8085f8c:	0808b2a5 	.word	0x0808b2a5
 8085f90:	0808b70b 	.word	0x0808b70b
 8085f94:	0808b2a8 	.word	0x0808b2a8
 8085f98:	0808b2ad 	.word	0x0808b2ad
 8085f9c:	0808b2ab 	.word	0x0808b2ab
 8085fa0:	0808b2b0 	.word	0x0808b2b0
 8085fa4:	0808b2b3 	.word	0x0808b2b3
 8085fa8:	0808b2bb 	.word	0x0808b2bb
 8085fac:	0808b2be 	.word	0x0808b2be
 8085fb0:	0808acc2 	.word	0x0808acc2

08085fb4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 8085fb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8085fb8:	b085      	sub	sp, #20
 8085fba:	f8d0 8020 	ldr.w	r8, [r0, #32]
 8085fbe:	4606      	mov	r6, r0
 8085fc0:	460f      	mov	r7, r1
 8085fc2:	4691      	mov	r9, r2
 8085fc4:	461d      	mov	r5, r3
 8085fc6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    // TODO: Move this check to a base class (see also StreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (this->stream() == &Serial && Network.listening()) {
 8085fc8:	f000 fed0 	bl	8086d6c <_Z16_fetch_usbserialv>
 8085fcc:	4580      	cmp	r8, r0
 8085fce:	d105      	bne.n	8085fdc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 8085fd0:	484a      	ldr	r0, [pc, #296]	; (80860fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
 8085fd2:	f001 f979 	bl	80872c8 <_ZN5spark12NetworkClass9listeningEv>
 8085fd6:	2800      	cmp	r0, #0
 8085fd8:	f040 808c 	bne.w	80860f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x140>
 8085fdc:	6a33      	ldr	r3, [r6, #32]
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
 8085fde:	4a48      	ldr	r2, [pc, #288]	; (8086100 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
 8085fe0:	f04f 0800 	mov.w	r8, #0
        return; // Do not mix logging and serial console output
    }
#endif
    JSONStreamWriter json(*this->stream());
    json.beginObject();
 8085fe4:	a801      	add	r0, sp, #4
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
 8085fe6:	9201      	str	r2, [sp, #4]
 8085fe8:	9303      	str	r3, [sp, #12]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
 8085fea:	f88d 8008 	strb.w	r8, [sp, #8]
 8085fee:	f001 fa80 	bl	80874f2 <_ZN5spark10JSONWriter11beginObjectEv>
 8085ff2:	4641      	mov	r1, r8
 8085ff4:	4648      	mov	r0, r9
 8085ff6:	f7fe fa7d 	bl	80844f4 <log_level_name>
 8085ffa:	4680      	mov	r8, r0
    // Level
    const char *s = levelName(level);
    json.name("l", 1).value(s);
 8085ffc:	4941      	ldr	r1, [pc, #260]	; (8086104 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 8085ffe:	2201      	movs	r2, #1
 8086000:	a801      	add	r0, sp, #4
 8086002:	f001 fafb 	bl	80875fc <_ZN5spark10JSONWriter4nameEPKcj>
 8086006:	4641      	mov	r1, r8
 8086008:	f7ff f919 	bl	808523e <_ZN5spark10JSONWriter5valueEPKc>
    // Message
    if (msg) {
 808600c:	b13f      	cbz	r7, 808601e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 808600e:	493e      	ldr	r1, [pc, #248]	; (8086108 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 8086010:	2201      	movs	r2, #1
 8086012:	a801      	add	r0, sp, #4
 8086014:	f001 faf2 	bl	80875fc <_ZN5spark10JSONWriter4nameEPKcj>
 8086018:	4639      	mov	r1, r7
 808601a:	f7ff f910 	bl	808523e <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Category
    if (category) {
 808601e:	b13d      	cbz	r5, 8086030 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 8086020:	493a      	ldr	r1, [pc, #232]	; (808610c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 8086022:	2201      	movs	r2, #1
 8086024:	a801      	add	r0, sp, #4
 8086026:	f001 fae9 	bl	80875fc <_ZN5spark10JSONWriter4nameEPKcj>
 808602a:	4629      	mov	r1, r5
 808602c:	f7ff f907 	bl	808523e <_ZN5spark10JSONWriter5valueEPKc>
    }
    // File name
    if (attr.has_file) {
 8086030:	7923      	ldrb	r3, [r4, #4]
 8086032:	07df      	lsls	r7, r3, #31
 8086034:	d50e      	bpl.n	8086054 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 8086036:	68a5      	ldr	r5, [r4, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
 8086038:	212f      	movs	r1, #47	; 0x2f
 808603a:	4628      	mov	r0, r5
 808603c:	f003 feb4 	bl	8089da8 <strrchr>
    if (s1) {
 8086040:	b100      	cbz	r0, 8086044 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 8086042:	1c45      	adds	r5, r0, #1
        json.name("c", 1).value(category);
    }
    // File name
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        json.name("f", 1).value(s);
 8086044:	4932      	ldr	r1, [pc, #200]	; (8086110 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 8086046:	2201      	movs	r2, #1
 8086048:	a801      	add	r0, sp, #4
 808604a:	f001 fad7 	bl	80875fc <_ZN5spark10JSONWriter4nameEPKcj>
 808604e:	4629      	mov	r1, r5
 8086050:	f7ff f8f5 	bl	808523e <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Line number
    if (attr.has_line) {
 8086054:	7923      	ldrb	r3, [r4, #4]
 8086056:	079d      	lsls	r5, r3, #30
 8086058:	d507      	bpl.n	808606a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 808605a:	492e      	ldr	r1, [pc, #184]	; (8086114 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 808605c:	2202      	movs	r2, #2
 808605e:	a801      	add	r0, sp, #4
 8086060:	f001 facc 	bl	80875fc <_ZN5spark10JSONWriter4nameEPKcj>
 8086064:	68e1      	ldr	r1, [r4, #12]
 8086066:	f001 fa51 	bl	808750c <_ZN5spark10JSONWriter5valueEi>
    }
    // Function name
    if (attr.has_function) {
 808606a:	7923      	ldrb	r3, [r4, #4]
 808606c:	0758      	lsls	r0, r3, #29
 808606e:	d516      	bpl.n	808609e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xea>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 8086070:	6925      	ldr	r5, [r4, #16]
 8086072:	462f      	mov	r7, r5
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
 8086074:	463b      	mov	r3, r7
 8086076:	f813 2b01 	ldrb.w	r2, [r3], #1
 808607a:	b13a      	cbz	r2, 808608c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
        if (*s == ' ') {
 808607c:	2a20      	cmp	r2, #32
 808607e:	d101      	bne.n	8086084 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 8086080:	461d      	mov	r5, r3
 8086082:	e001      	b.n	8086088 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        } else if (*s == '(') {
 8086084:	2a28      	cmp	r2, #40	; 0x28
 8086086:	d001      	beq.n	808608c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
    }
    write("\r\n", 2);
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 8086088:	461f      	mov	r7, r3
 808608a:	e7f3      	b.n	8086074 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        json.name("fn", 2).value(s, n);
 808608c:	2202      	movs	r2, #2
 808608e:	4922      	ldr	r1, [pc, #136]	; (8086118 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 8086090:	a801      	add	r0, sp, #4
 8086092:	f001 fab3 	bl	80875fc <_ZN5spark10JSONWriter4nameEPKcj>
 8086096:	1b7a      	subs	r2, r7, r5
 8086098:	4629      	mov	r1, r5
 808609a:	f001 fabe 	bl	808761a <_ZN5spark10JSONWriter5valueEPKcj>
    }
    // Timestamp
    if (attr.has_time) {
 808609e:	7923      	ldrb	r3, [r4, #4]
 80860a0:	0719      	lsls	r1, r3, #28
 80860a2:	d507      	bpl.n	80860b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x100>
        json.name("t", 1).value((unsigned)attr.time);
 80860a4:	491d      	ldr	r1, [pc, #116]	; (808611c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 80860a6:	2201      	movs	r2, #1
 80860a8:	a801      	add	r0, sp, #4
 80860aa:	f001 faa7 	bl	80875fc <_ZN5spark10JSONWriter4nameEPKcj>
 80860ae:	6961      	ldr	r1, [r4, #20]
 80860b0:	f001 fa3e 	bl	8087530 <_ZN5spark10JSONWriter5valueEj>
    }
    // Code (additional attribute)
    if (attr.has_code) {
 80860b4:	7923      	ldrb	r3, [r4, #4]
 80860b6:	06da      	lsls	r2, r3, #27
 80860b8:	d508      	bpl.n	80860cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x118>
        json.name("code", 4).value((int)attr.code);
 80860ba:	2204      	movs	r2, #4
 80860bc:	4918      	ldr	r1, [pc, #96]	; (8086120 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 80860be:	eb0d 0002 	add.w	r0, sp, r2
 80860c2:	f001 fa9b 	bl	80875fc <_ZN5spark10JSONWriter4nameEPKcj>
 80860c6:	69a1      	ldr	r1, [r4, #24]
 80860c8:	f001 fa20 	bl	808750c <_ZN5spark10JSONWriter5valueEi>
    }
    // Details (additional attribute)
    if (attr.has_details) {
 80860cc:	7923      	ldrb	r3, [r4, #4]
 80860ce:	069b      	lsls	r3, r3, #26
 80860d0:	d507      	bpl.n	80860e2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12e>
        json.name("detail", 6).value(attr.details);
 80860d2:	4914      	ldr	r1, [pc, #80]	; (8086124 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 80860d4:	2206      	movs	r2, #6
 80860d6:	a801      	add	r0, sp, #4
 80860d8:	f001 fa90 	bl	80875fc <_ZN5spark10JSONWriter4nameEPKcj>
 80860dc:	69e1      	ldr	r1, [r4, #28]
 80860de:	f7ff f8ae 	bl	808523e <_ZN5spark10JSONWriter5valueEPKc>
    }
    json.endObject();
 80860e2:	a801      	add	r0, sp, #4
 80860e4:	f001 f9ef 	bl	80874c6 <_ZN5spark10JSONWriter9endObjectEv>
 80860e8:	6a30      	ldr	r0, [r6, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 80860ea:	2202      	movs	r2, #2
 80860ec:	6803      	ldr	r3, [r0, #0]
 80860ee:	490e      	ldr	r1, [pc, #56]	; (8086128 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
 80860f0:	68db      	ldr	r3, [r3, #12]
 80860f2:	4798      	blx	r3
}
 80860f4:	b005      	add	sp, #20
 80860f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80860fa:	bf00      	nop
 80860fc:	2000057c 	.word	0x2000057c
 8086100:	0808b1fc 	.word	0x0808b1fc
 8086104:	0808a9bf 	.word	0x0808a9bf
 8086108:	0808b0b9 	.word	0x0808b0b9
 808610c:	0808a95f 	.word	0x0808a95f
 8086110:	0808ae60 	.word	0x0808ae60
 8086114:	0808b2c9 	.word	0x0808b2c9
 8086118:	0808b2cc 	.word	0x0808b2cc
 808611c:	0808b7db 	.word	0x0808b7db
 8086120:	0808b2cf 	.word	0x0808b2cf
 8086124:	0808b2d4 	.word	0x0808b2d4
 8086128:	0808acc2 	.word	0x0808acc2

0808612c <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 808612c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 808612e:	2000      	movs	r0, #0
 8086130:	f7fe faee 	bl	8084710 <spark_sync_time_pending>
 8086134:	b128      	cbz	r0, 8086142 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8086136:	f7fe facb 	bl	80846d0 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 808613a:	f080 0001 	eor.w	r0, r0, #1
 808613e:	b2c0      	uxtb	r0, r0
 8086140:	bd08      	pop	{r3, pc}
 8086142:	2001      	movs	r0, #1
    }
 8086144:	bd08      	pop	{r3, pc}
	...

08086148 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 8086148:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
 808614a:	4b0e      	ldr	r3, [pc, #56]	; (8086184 <_ZN9TimeClass7timeStrEl+0x3c>)
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 808614c:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
 808614e:	681b      	ldr	r3, [r3, #0]
 8086150:	a802      	add	r0, sp, #8
 8086152:	4419      	add	r1, r3
 8086154:	4b0c      	ldr	r3, [pc, #48]	; (8086188 <_ZN9TimeClass7timeStrEl+0x40>)
 8086156:	681b      	ldr	r3, [r3, #0]
 8086158:	4419      	add	r1, r3
 808615a:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
 808615e:	f002 ff4b 	bl	8088ff8 <localtime>
        char* ascstr = asctime(calendar_time);
 8086162:	f002 fef7 	bl	8088f54 <asctime>
 8086166:	4605      	mov	r5, r0
        int len = strlen(ascstr);
 8086168:	f003 fdee 	bl	8089d48 <strlen>
        ascstr[len-1] = 0; // remove final newline
 808616c:	2300      	movs	r3, #0
 808616e:	4428      	add	r0, r5
 8086170:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
 8086174:	4629      	mov	r1, r5
 8086176:	4620      	mov	r0, r4
 8086178:	f7fe fd4f 	bl	8084c1a <_ZN6StringC1EPK19__FlashStringHelper>
}
 808617c:	4620      	mov	r0, r4
 808617e:	b003      	add	sp, #12
 8086180:	bd30      	pop	{r4, r5, pc}
 8086182:	bf00      	nop
 8086184:	20000420 	.word	0x20000420
 8086188:	2000041c 	.word	0x2000041c

0808618c <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 808618c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8086190:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 8086192:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 8086194:	4607      	mov	r7, r0
 8086196:	4689      	mov	r9, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 8086198:	4620      	mov	r0, r4
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 808619a:	4611      	mov	r1, r2
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 808619c:	223f      	movs	r2, #63	; 0x3f
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 808619e:	461d      	mov	r5, r3
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80861a0:	f003 fdef 	bl	8089d82 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 80861a4:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 80861a6:	4620      	mov	r0, r4
String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 80861a8:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 80861ac:	f003 fdcc 	bl	8089d48 <strlen>
 80861b0:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 80861b2:	b925      	cbnz	r5, 80861be <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        strcpy(time_zone_str, "Z");
 80861b4:	4924      	ldr	r1, [pc, #144]	; (8086248 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xbc>)
 80861b6:	a803      	add	r0, sp, #12
 80861b8:	f003 f88e 	bl	80892d8 <strcpy>
 80861bc:	e013      	b.n	80861e6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5a>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 80861be:	213c      	movs	r1, #60	; 0x3c
 80861c0:	fb95 f2f1 	sdiv	r2, r5, r1
 80861c4:	2a00      	cmp	r2, #0
 80861c6:	bfb8      	it	lt
 80861c8:	4252      	neglt	r2, r2
 80861ca:	fb92 f3f1 	sdiv	r3, r2, r1
 80861ce:	fb01 2213 	mls	r2, r1, r3, r2
 80861d2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80861d6:	9200      	str	r2, [sp, #0]
 80861d8:	fb95 f3f3 	sdiv	r3, r5, r3
 80861dc:	4a1b      	ldr	r2, [pc, #108]	; (808624c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xc0>)
 80861de:	2110      	movs	r1, #16
 80861e0:	a803      	add	r0, sp, #12
 80861e2:	f7fe facd 	bl	8084780 <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80861e6:	4625      	mov	r5, r4
 80861e8:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 80861ea:	f108 3aff 	add.w	sl, r8, #4294967295
 80861ee:	45b2      	cmp	sl, r6
 80861f0:	d91b      	bls.n	808622a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9e>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 80861f2:	782b      	ldrb	r3, [r5, #0]
 80861f4:	2b25      	cmp	r3, #37	; 0x25
 80861f6:	d116      	bne.n	8086226 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
 80861f8:	786b      	ldrb	r3, [r5, #1]
 80861fa:	2b7a      	cmp	r3, #122	; 0x7a
 80861fc:	d113      	bne.n	8086226 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
        {
            size_t tzlen = strlen(time_zone_str);
 80861fe:	a803      	add	r0, sp, #12
 8086200:	f003 fda2 	bl	8089d48 <strlen>
 8086204:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 8086206:	4430      	add	r0, r6
 8086208:	ebc6 020a 	rsb	r2, r6, sl
 808620c:	1ca9      	adds	r1, r5, #2
 808620e:	4420      	add	r0, r4
 8086210:	f002 ffea 	bl	80891e8 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 8086214:	4642      	mov	r2, r8
 8086216:	a903      	add	r1, sp, #12
 8086218:	4628      	mov	r0, r5
 808621a:	f002 ffe5 	bl	80891e8 <memcpy>
            len = strlen(format_str);
 808621e:	4620      	mov	r0, r4
 8086220:	f003 fd92 	bl	8089d48 <strlen>
 8086224:	4680      	mov	r8, r0
 8086226:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 8086228:	e7de      	b.n	80861e8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5c>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
 808622a:	464b      	mov	r3, r9
 808622c:	4622      	mov	r2, r4
 808622e:	2132      	movs	r1, #50	; 0x32
 8086230:	a807      	add	r0, sp, #28
 8086232:	f003 f8d5 	bl	80893e0 <strftime>
    return String(buf);
 8086236:	a907      	add	r1, sp, #28
 8086238:	4638      	mov	r0, r7
 808623a:	f7fe fcee 	bl	8084c1a <_ZN6StringC1EPK19__FlashStringHelper>
}
 808623e:	4638      	mov	r0, r7
 8086240:	b024      	add	sp, #144	; 0x90
 8086242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8086246:	bf00      	nop
 8086248:	0808b965 	.word	0x0808b965
 808624c:	0808b348 	.word	0x0808b348

08086250 <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
 8086250:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8086252:	4605      	mov	r5, r0
 8086254:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
 8086256:	461c      	mov	r4, r3
 8086258:	b913      	cbnz	r3, 8086260 <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
 808625a:	4b12      	ldr	r3, [pc, #72]	; (80862a4 <_ZN9TimeClass6formatElPKc+0x54>)
 808625c:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
 808625e:	b12c      	cbz	r4, 808626c <_ZN9TimeClass6formatElPKc+0x1c>
 8086260:	4b11      	ldr	r3, [pc, #68]	; (80862a8 <_ZN9TimeClass6formatElPKc+0x58>)
 8086262:	4620      	mov	r0, r4
 8086264:	6819      	ldr	r1, [r3, #0]
 8086266:	f003 f82d 	bl	80892c4 <strcmp>
 808626a:	b920      	cbnz	r0, 8086276 <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
 808626c:	9901      	ldr	r1, [sp, #4]
 808626e:	4628      	mov	r0, r5
 8086270:	f7ff ff6a 	bl	8086148 <_ZN9TimeClass7timeStrEl>
 8086274:	e013      	b.n	808629e <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
 8086276:	4f0d      	ldr	r7, [pc, #52]	; (80862ac <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
 8086278:	9a01      	ldr	r2, [sp, #4]
 808627a:	683b      	ldr	r3, [r7, #0]
 808627c:	4e0c      	ldr	r6, [pc, #48]	; (80862b0 <_ZN9TimeClass6formatElPKc+0x60>)
 808627e:	441a      	add	r2, r3
 8086280:	6833      	ldr	r3, [r6, #0]
 8086282:	a802      	add	r0, sp, #8
 8086284:	4413      	add	r3, r2
 8086286:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
 808628a:	f002 feb5 	bl	8088ff8 <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
 808628e:	683a      	ldr	r2, [r7, #0]
 8086290:	6833      	ldr	r3, [r6, #0]
 8086292:	4601      	mov	r1, r0
 8086294:	4413      	add	r3, r2
 8086296:	4628      	mov	r0, r5
 8086298:	4622      	mov	r2, r4
 808629a:	f7ff ff77 	bl	808618c <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
 808629e:	4628      	mov	r0, r5
 80862a0:	b003      	add	sp, #12
 80862a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80862a4:	20000418 	.word	0x20000418
 80862a8:	200000c4 	.word	0x200000c4
 80862ac:	20000420 	.word	0x20000420
 80862b0:	2000041c 	.word	0x2000041c

080862b4 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80862b4:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 80862b6:	2000      	movs	r0, #0
 80862b8:	f7fd ff64 	bl	8084184 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 80862bc:	4604      	mov	r4, r0
 80862be:	b968      	cbnz	r0, 80862dc <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80862c0:	f7fe f928 	bl	8084514 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80862c4:	2801      	cmp	r0, #1
 80862c6:	d10b      	bne.n	80862e0 <_ZN9TimeClass7isValidEv+0x2c>
 80862c8:	4620      	mov	r0, r4
 80862ca:	f7fe f963 	bl	8084594 <system_thread_get_state>
 80862ce:	b938      	cbnz	r0, 80862e0 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 80862d0:	f7ff ff2c 	bl	808612c <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80862d4:	b930      	cbnz	r0, 80862e4 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 80862d6:	f7fe f9e3 	bl	80846a0 <spark_process>
 80862da:	e7f9      	b.n	80862d0 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 80862dc:	2001      	movs	r0, #1
 80862de:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 80862e0:	2000      	movs	r0, #0
 80862e2:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 80862e4:	f7ff ff22 	bl	808612c <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 80862e8:	2000      	movs	r0, #0
 80862ea:	f7fd ff4b 	bl	8084184 <HAL_RTC_Time_Is_Valid>
 80862ee:	3000      	adds	r0, #0
 80862f0:	bf18      	it	ne
 80862f2:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 80862f4:	bd10      	pop	{r4, pc}

080862f6 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 80862f6:	b508      	push	{r3, lr}
    (void)isValid();
 80862f8:	f7ff ffdc 	bl	80862b4 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 80862fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 8086300:	f7fd bf38 	b.w	8084174 <HAL_RTC_Get_UnixTime>

08086304 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8086304:	4b02      	ldr	r3, [pc, #8]	; (8086310 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8086306:	681a      	ldr	r2, [r3, #0]
 8086308:	4b02      	ldr	r3, [pc, #8]	; (8086314 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 808630a:	601a      	str	r2, [r3, #0]
 808630c:	4770      	bx	lr
 808630e:	bf00      	nop
 8086310:	200000c4 	.word	0x200000c4
 8086314:	20000418 	.word	0x20000418

08086318 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8086318:	2100      	movs	r1, #0
 808631a:	f7fe b90b 	b.w	8084534 <system_delay_ms>

0808631e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 808631e:	b510      	push	{r4, lr}
 8086320:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8086322:	f7f9 ffd3 	bl	80802cc <_ZNSt14_Function_baseD1Ev>
 8086326:	4620      	mov	r0, r4
 8086328:	bd10      	pop	{r4, pc}

0808632a <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 808632a:	b513      	push	{r0, r1, r4, lr}
 808632c:	460b      	mov	r3, r1
 808632e:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8086330:	c803      	ldmia	r0, {r0, r1}
 8086332:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8086336:	e893 0003 	ldmia.w	r3, {r0, r1}
 808633a:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 808633e:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8086342:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8086346:	b002      	add	sp, #8
 8086348:	bd10      	pop	{r4, pc}
	...

0808634c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808634c:	4803      	ldr	r0, [pc, #12]	; (808635c <_GLOBAL__sub_I_RGB+0x10>)
 808634e:	2300      	movs	r3, #0
 8086350:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8086352:	4a03      	ldr	r2, [pc, #12]	; (8086360 <_GLOBAL__sub_I_RGB+0x14>)
 8086354:	4903      	ldr	r1, [pc, #12]	; (8086364 <_GLOBAL__sub_I_RGB+0x18>)
 8086356:	f001 bb5f 	b.w	8087a18 <__aeabi_atexit>
 808635a:	bf00      	nop
 808635c:	20000428 	.word	0x20000428
 8086360:	20000180 	.word	0x20000180
 8086364:	0808631f 	.word	0x0808631f

08086368 <_ZN6detail9_getVCellEhh>:
    return i2c_.isEnabled();
}

namespace detail {
	// Converts VCELL_REGISTER reading to Battery Voltage
	float _getVCell(byte MSB, byte LSB) {
 8086368:	b508      	push	{r3, lr}
		// VCELL = 12-bit value, 1.25mV (1V/800) per bit
		float value = (float)((MSB << 4) | (LSB >> 4));
		return value / 800.0;
 808636a:	0909      	lsrs	r1, r1, #4
 808636c:	ea41 1000 	orr.w	r0, r1, r0, lsl #4
 8086370:	f002 fb9a 	bl	8088aa8 <__aeabi_i2f>
 8086374:	4901      	ldr	r1, [pc, #4]	; (808637c <_ZN6detail9_getVCellEhh+0x14>)
 8086376:	f002 fc9f 	bl	8088cb8 <__aeabi_fdiv>
	}
 808637a:	bd08      	pop	{r3, pc}
 808637c:	44480000 	.word	0x44480000

08086380 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
 8086380:	6800      	ldr	r0, [r0, #0]
 8086382:	f000 bf60 	b.w	8087246 <_ZN7TwoWire4lockEv>

08086386 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 8086386:	b510      	push	{r4, lr}
 8086388:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
 808638a:	6001      	str	r1, [r0, #0]
 808638c:	7102      	strb	r2, [r0, #4]

    if (lock_) {
 808638e:	b10a      	cbz	r2, 8086394 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 8086390:	f7ff fff6 	bl	8086380 <_ZN9FuelGauge4lockEv>
    }
}
 8086394:	4620      	mov	r0, r4
 8086396:	bd10      	pop	{r4, pc}

08086398 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
 8086398:	b538      	push	{r3, r4, r5, lr}
 808639a:	4604      	mov	r4, r0
 808639c:	460d      	mov	r5, r1
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808639e:	f001 fb15 	bl	80879cc <_Z20__fetch_global_Wire3v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
 80863a2:	462a      	mov	r2, r5
 80863a4:	4601      	mov	r1, r0
 80863a6:	4620      	mov	r0, r4
 80863a8:	f7ff ffed 	bl	8086386 <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
 80863ac:	4620      	mov	r0, r4
 80863ae:	bd38      	pop	{r3, r4, r5, pc}

080863b0 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
 80863b0:	6800      	ldr	r0, [r0, #0]
 80863b2:	f000 bf51 	b.w	8087258 <_ZN7TwoWire6unlockEv>

080863b6 <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 80863b6:	b510      	push	{r4, lr}
{
    if (lock_) {
 80863b8:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 80863ba:	4604      	mov	r4, r0
{
    if (lock_) {
 80863bc:	b10b      	cbz	r3, 80863c2 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
 80863be:	f7ff fff7 	bl	80863b0 <_ZN9FuelGauge6unlockEv>
    }
}
 80863c2:	4620      	mov	r0, r4
 80863c4:	bd10      	pop	{r4, pc}

080863c6 <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
 80863c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80863c8:	4604      	mov	r4, r0
 80863ca:	460f      	mov	r7, r1
 80863cc:	4616      	mov	r6, r2
 80863ce:	461d      	mov	r5, r3
 80863d0:	f7ff ffd6 	bl	8086380 <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
 80863d4:	6820      	ldr	r0, [r4, #0]
 80863d6:	2136      	movs	r1, #54	; 0x36
 80863d8:	f000 ff27 	bl	808722a <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
 80863dc:	6820      	ldr	r0, [r4, #0]
 80863de:	4639      	mov	r1, r7
 80863e0:	6803      	ldr	r3, [r0, #0]
 80863e2:	689b      	ldr	r3, [r3, #8]
 80863e4:	4798      	blx	r3
    i2c_.endTransmission(true);
 80863e6:	2101      	movs	r1, #1
 80863e8:	6820      	ldr	r0, [r4, #0]
 80863ea:	f000 ff21 	bl	8087230 <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
 80863ee:	2202      	movs	r2, #2
 80863f0:	2136      	movs	r1, #54	; 0x36
 80863f2:	2301      	movs	r3, #1
 80863f4:	6820      	ldr	r0, [r4, #0]
 80863f6:	f000 feff 	bl	80871f8 <_ZN7TwoWire11requestFromEhjh>
    MSB = i2c_.read();
 80863fa:	6820      	ldr	r0, [r4, #0]
 80863fc:	6803      	ldr	r3, [r0, #0]
 80863fe:	695b      	ldr	r3, [r3, #20]
 8086400:	4798      	blx	r3
 8086402:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
 8086404:	6820      	ldr	r0, [r4, #0]
 8086406:	6803      	ldr	r3, [r0, #0]
 8086408:	695b      	ldr	r3, [r3, #20]
 808640a:	4798      	blx	r3
 808640c:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
 808640e:	4620      	mov	r0, r4
}
 8086410:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8086414:	f7ff bfcc 	b.w	80863b0 <_ZN9FuelGauge6unlockEv>

08086418 <_ZN9FuelGauge8getVCellEv>:
		return MSB + decimal;
	}
} // namespace detail

// Read and return the cell voltage
float FuelGauge::getVCell() {
 8086418:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
 808641a:	2200      	movs	r2, #0
	byte LSB = 0;
 808641c:	ab02      	add	r3, sp, #8
} // namespace detail

// Read and return the cell voltage
float FuelGauge::getVCell() {

	byte MSB = 0;
 808641e:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;
 8086422:	f803 2d01 	strb.w	r2, [r3, #-1]!

	readRegister(VCELL_REGISTER, MSB, LSB);
 8086426:	2102      	movs	r1, #2
 8086428:	f10d 0206 	add.w	r2, sp, #6
 808642c:	f7ff ffcb 	bl	80863c6 <_ZN9FuelGauge12readRegisterEhRhS0_>
	return detail::_getVCell(MSB, LSB);
 8086430:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8086434:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
 8086438:	b003      	add	sp, #12
 808643a:	f85d eb04 	ldr.w	lr, [sp], #4

	byte MSB = 0;
	byte LSB = 0;

	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
 808643e:	f7ff bf93 	b.w	8086368 <_ZN6detail9_getVCellEhh>
	...

08086444 <_ZN9FuelGauge6getSoCEv>:
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
 8086444:	b513      	push	{r0, r1, r4, lr}

	byte MSB = 0;
 8086446:	2200      	movs	r2, #0
	byte LSB = 0;
 8086448:	ab02      	add	r3, sp, #8
 808644a:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
 808644e:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
 8086452:	2104      	movs	r1, #4
 8086454:	f10d 0206 	add.w	r2, sp, #6
 8086458:	f7ff ffb5 	bl	80863c6 <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
 808645c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8086460:	f001 feba 	bl	80881d8 <__aeabi_i2d>
 8086464:	2200      	movs	r2, #0
 8086466:	4b08      	ldr	r3, [pc, #32]	; (8086488 <_ZN9FuelGauge6getSoCEv+0x44>)
 8086468:	f001 ff1c 	bl	80882a4 <__aeabi_dmul>
 808646c:	f002 fa12 	bl	8088894 <__aeabi_d2f>
 8086470:	4604      	mov	r4, r0
 8086472:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8086476:	f002 fb17 	bl	8088aa8 <__aeabi_i2f>
 808647a:	4601      	mov	r1, r0
 808647c:	4620      	mov	r0, r4
 808647e:	f002 fa5f 	bl	8088940 <__addsf3>
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
 8086482:	b002      	add	sp, #8
 8086484:	bd10      	pop	{r4, pc}
 8086486:	bf00      	nop
 8086488:	3f700000 	.word	0x3f700000

0808648c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 808648c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 808648e:	4b18      	ldr	r3, [pc, #96]	; (80864f0 <serialEventRun+0x64>)
 8086490:	b133      	cbz	r3, 80864a0 <serialEventRun+0x14>
 8086492:	f000 fc6b 	bl	8086d6c <_Z16_fetch_usbserialv>
 8086496:	6803      	ldr	r3, [r0, #0]
 8086498:	691b      	ldr	r3, [r3, #16]
 808649a:	4798      	blx	r3
 808649c:	2800      	cmp	r0, #0
 808649e:	dc1e      	bgt.n	80864de <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80864a0:	4b14      	ldr	r3, [pc, #80]	; (80864f4 <serialEventRun+0x68>)
 80864a2:	b133      	cbz	r3, 80864b2 <serialEventRun+0x26>
 80864a4:	f000 fdf4 	bl	8087090 <_Z22__fetch_global_Serial1v>
 80864a8:	6803      	ldr	r3, [r0, #0]
 80864aa:	691b      	ldr	r3, [r3, #16]
 80864ac:	4798      	blx	r3
 80864ae:	2800      	cmp	r0, #0
 80864b0:	dc18      	bgt.n	80864e4 <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80864b2:	4b11      	ldr	r3, [pc, #68]	; (80864f8 <serialEventRun+0x6c>)
 80864b4:	b10b      	cbz	r3, 80864ba <serialEventRun+0x2e>
 80864b6:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 80864ba:	4b10      	ldr	r3, [pc, #64]	; (80864fc <serialEventRun+0x70>)
 80864bc:	b10b      	cbz	r3, 80864c2 <serialEventRun+0x36>
 80864be:	f3af 8000 	nop.w
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 80864c2:	4b0f      	ldr	r3, [pc, #60]	; (8086500 <serialEventRun+0x74>)
 80864c4:	b10b      	cbz	r3, 80864ca <serialEventRun+0x3e>
 80864c6:	f3af 8000 	nop.w
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80864ca:	4b0e      	ldr	r3, [pc, #56]	; (8086504 <serialEventRun+0x78>)
 80864cc:	b17b      	cbz	r3, 80864ee <serialEventRun+0x62>
 80864ce:	f000 fc7b 	bl	8086dc8 <_Z17_fetch_usbserial1v>
 80864d2:	6803      	ldr	r3, [r0, #0]
 80864d4:	691b      	ldr	r3, [r3, #16]
 80864d6:	4798      	blx	r3
 80864d8:	2800      	cmp	r0, #0
 80864da:	dc06      	bgt.n	80864ea <serialEventRun+0x5e>
 80864dc:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80864de:	f3af 8000 	nop.w
 80864e2:	e7dd      	b.n	80864a0 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80864e4:	f3af 8000 	nop.w
 80864e8:	e7e3      	b.n	80864b2 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80864ea:	f3af 8000 	nop.w
 80864ee:	bd08      	pop	{r3, pc}
	...

08086508 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 8086508:	b508      	push	{r3, lr}
	serialEventRun();
 808650a:	f7ff ffbf 	bl	808648c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 808650e:	f7fd fe29 	bl	8084164 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8086512:	4b01      	ldr	r3, [pc, #4]	; (8086518 <_post_loop+0x10>)
 8086514:	6018      	str	r0, [r3, #0]
 8086516:	bd08      	pop	{r3, pc}
 8086518:	20000584 	.word	0x20000584

0808651c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 808651c:	4802      	ldr	r0, [pc, #8]	; (8086528 <_Z33system_initialize_user_backup_ramv+0xc>)
 808651e:	4a03      	ldr	r2, [pc, #12]	; (808652c <_Z33system_initialize_user_backup_ramv+0x10>)
 8086520:	4903      	ldr	r1, [pc, #12]	; (8086530 <_Z33system_initialize_user_backup_ramv+0x14>)
 8086522:	1a12      	subs	r2, r2, r0
 8086524:	f002 be60 	b.w	80891e8 <memcpy>
 8086528:	40024000 	.word	0x40024000
 808652c:	4002421c 	.word	0x4002421c
 8086530:	0808ba00 	.word	0x0808ba00

08086534 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8086534:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8086536:	2300      	movs	r3, #0
 8086538:	9300      	str	r3, [sp, #0]
 808653a:	461a      	mov	r2, r3
 808653c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8086540:	f7fe f83a 	bl	80845b8 <system_ctrl_set_result>
}
 8086544:	b003      	add	sp, #12
 8086546:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0808654c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 808654c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 808654e:	8843      	ldrh	r3, [r0, #2]
 8086550:	2b0a      	cmp	r3, #10
 8086552:	d008      	beq.n	8086566 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8086554:	2b50      	cmp	r3, #80	; 0x50
 8086556:	d109      	bne.n	808656c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 8086558:	4b09      	ldr	r3, [pc, #36]	; (8086580 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 808655a:	681b      	ldr	r3, [r3, #0]
 808655c:	b13b      	cbz	r3, 808656e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 808655e:	b003      	add	sp, #12
 8086560:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 8086564:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 8086566:	f7ff ffe5 	bl	8086534 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 808656a:	e006      	b.n	808657a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 808656c:	2300      	movs	r3, #0
 808656e:	9300      	str	r3, [sp, #0]
 8086570:	461a      	mov	r2, r3
 8086572:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8086576:	f7fe f81f 	bl	80845b8 <system_ctrl_set_result>
        break;
    }
}
 808657a:	b003      	add	sp, #12
 808657c:	f85d fb04 	ldr.w	pc, [sp], #4
 8086580:	20000438 	.word	0x20000438

08086584 <module_user_init_hook>:

void module_user_init_hook()
{
 8086584:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8086586:	4c10      	ldr	r4, [pc, #64]	; (80865c8 <module_user_init_hook+0x44>)
 8086588:	4d10      	ldr	r5, [pc, #64]	; (80865cc <module_user_init_hook+0x48>)
 808658a:	6823      	ldr	r3, [r4, #0]
 808658c:	42ab      	cmp	r3, r5
 808658e:	4b10      	ldr	r3, [pc, #64]	; (80865d0 <module_user_init_hook+0x4c>)
 8086590:	bf0c      	ite	eq
 8086592:	2201      	moveq	r2, #1
 8086594:	2200      	movne	r2, #0
 8086596:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8086598:	d002      	beq.n	80865a0 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 808659a:	f7ff ffbf 	bl	808651c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 808659e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80865a0:	f7fd fdc8 	bl	8084134 <HAL_RNG_GetRandomNumber>
 80865a4:	4604      	mov	r4, r0
    srand(seed);
 80865a6:	f002 fe4d 	bl	8089244 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80865aa:	4b0a      	ldr	r3, [pc, #40]	; (80865d4 <module_user_init_hook+0x50>)
 80865ac:	b113      	cbz	r3, 80865b4 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80865ae:	4620      	mov	r0, r4
 80865b0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80865b4:	2100      	movs	r1, #0
 80865b6:	4807      	ldr	r0, [pc, #28]	; (80865d4 <module_user_init_hook+0x50>)
 80865b8:	f7fe f8b2 	bl	8084720 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80865bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80865c0:	2100      	movs	r1, #0
 80865c2:	4805      	ldr	r0, [pc, #20]	; (80865d8 <module_user_init_hook+0x54>)
 80865c4:	f7fd bfee 	b.w	80845a4 <system_ctrl_set_app_request_handler>
 80865c8:	40024218 	.word	0x40024218
 80865cc:	9a271c1e 	.word	0x9a271c1e
 80865d0:	2000043c 	.word	0x2000043c
 80865d4:	00000000 	.word	0x00000000
 80865d8:	0808654d 	.word	0x0808654d

080865dc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80865dc:	4770      	bx	lr

080865de <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80865de:	2000      	movs	r0, #0
 80865e0:	4770      	bx	lr

080865e2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80865e2:	b510      	push	{r4, lr}
 80865e4:	4604      	mov	r4, r0
 80865e6:	2110      	movs	r1, #16
 80865e8:	f001 fa24 	bl	8087a34 <_ZdlPvj>
 80865ec:	4620      	mov	r0, r4
 80865ee:	bd10      	pop	{r4, pc}

080865f0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80865f0:	b508      	push	{r3, lr}
      { delete this; }
 80865f2:	b108      	cbz	r0, 80865f8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80865f4:	f7ff fff5 	bl	80865e2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80865f8:	bd08      	pop	{r3, pc}

080865fa <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80865fa:	2200      	movs	r2, #0
 80865fc:	6002      	str	r2, [r0, #0]
 80865fe:	f64f 729c 	movw	r2, #65436	; 0xff9c
 8086602:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 8086604:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8086606:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 808660a:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 808660c:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808660e:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 8086610:	680c      	ldr	r4, [r1, #0]
 8086612:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8086614:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 8086616:	bd10      	pop	{r4, pc}

08086618 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 8086618:	b510      	push	{r4, lr}
 808661a:	4604      	mov	r4, r0
    free((void*)msg_);
 808661c:	6800      	ldr	r0, [r0, #0]
 808661e:	f7fe f88f 	bl	8084740 <free>
}
 8086622:	4620      	mov	r0, r4
 8086624:	bd10      	pop	{r4, pc}

08086626 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 8086626:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 8086628:	68c4      	ldr	r4, [r0, #12]
 808662a:	b1f4      	cbz	r4, 808666a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 808662c:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 808662e:	2b02      	cmp	r3, #2
 8086630:	d103      	bne.n	808663a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 8086632:	f104 000c 	add.w	r0, r4, #12
 8086636:	f7ff ffef 	bl	8086618 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 808663a:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 808663c:	b135      	cbz	r5, 808664c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808663e:	4628      	mov	r0, r5
 8086640:	f7f9 fe44 	bl	80802cc <_ZNSt14_Function_baseD1Ev>
 8086644:	2110      	movs	r1, #16
 8086646:	4628      	mov	r0, r5
 8086648:	f001 f9f4 	bl	8087a34 <_ZdlPvj>
 808664c:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 808664e:	b135      	cbz	r5, 808665e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 8086650:	4628      	mov	r0, r5
 8086652:	f7f9 fe3b 	bl	80802cc <_ZNSt14_Function_baseD1Ev>
 8086656:	2110      	movs	r1, #16
 8086658:	4628      	mov	r0, r5
 808665a:	f001 f9eb 	bl	8087a34 <_ZdlPvj>
 808665e:	4620      	mov	r0, r4
 8086660:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8086664:	2114      	movs	r1, #20
 8086666:	f001 b9e5 	b.w	8087a34 <_ZdlPvj>
 808666a:	bd38      	pop	{r3, r4, r5, pc}

0808666c <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 808666c:	b510      	push	{r4, lr}
 808666e:	b088      	sub	sp, #32
 8086670:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 8086672:	4668      	mov	r0, sp
 8086674:	f7fe fad1 	bl	8084c1a <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 8086678:	4669      	mov	r1, sp
 808667a:	a804      	add	r0, sp, #16
 808667c:	f7fe fb0c 	bl	8084c98 <_ZN6StringC1ERKS_>
 8086680:	a804      	add	r0, sp, #16
 8086682:	47a0      	blx	r4
 8086684:	4604      	mov	r4, r0
 8086686:	a804      	add	r0, sp, #16
 8086688:	f7fe fa80 	bl	8084b8c <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 808668c:	4668      	mov	r0, sp
 808668e:	f7fe fa7d 	bl	8084b8c <_ZN6StringD1Ev>
    return (*fn)(p);
}
 8086692:	4620      	mov	r0, r4
 8086694:	b008      	add	sp, #32
 8086696:	bd10      	pop	{r4, pc}

08086698 <_ZN10CloudClass22call_std_user_functionEPvPKcS0_>:

int CloudClass::call_std_user_function(void* data, const char* param, void* reserved)
{
 8086698:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 808669a:	4604      	mov	r4, r0
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
 808669c:	4668      	mov	r0, sp
 808669e:	f7fe fabc 	bl	8084c1a <_ZN6StringC1EPK19__FlashStringHelper>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80866a2:	68a3      	ldr	r3, [r4, #8]
 80866a4:	b90b      	cbnz	r3, 80866aa <_ZN10CloudClass22call_std_user_functionEPvPKcS0_+0x12>
	__throw_bad_function_call();
 80866a6:	f001 f9d8 	bl	8087a5a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80866aa:	68e3      	ldr	r3, [r4, #12]
 80866ac:	4669      	mov	r1, sp
 80866ae:	4620      	mov	r0, r4
 80866b0:	4798      	blx	r3
 80866b2:	4604      	mov	r4, r0
 80866b4:	4668      	mov	r0, sp
 80866b6:	f7fe fa69 	bl	8084b8c <_ZN6StringD1Ev>
}
 80866ba:	4620      	mov	r0, r4
 80866bc:	b004      	add	sp, #16
 80866be:	bd10      	pop	{r4, pc}

080866c0 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_>:

void CloudClass::call_wiring_event_handler(const void* handler_data, const char *event_name, const char *data)
{
 80866c0:	b507      	push	{r0, r1, r2, lr}
 80866c2:	e88d 0006 	stmia.w	sp, {r1, r2}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80866c6:	6882      	ldr	r2, [r0, #8]
 80866c8:	b90a      	cbnz	r2, 80866ce <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_+0xe>
	__throw_bad_function_call();
 80866ca:	f001 f9c6 	bl	8087a5a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80866ce:	68c3      	ldr	r3, [r0, #12]
 80866d0:	aa01      	add	r2, sp, #4
 80866d2:	4669      	mov	r1, sp
 80866d4:	4798      	blx	r3
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}
 80866d6:	b003      	add	sp, #12
 80866d8:	f85d fb04 	ldr.w	pc, [sp], #4

080866dc <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80866dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80866de:	4607      	mov	r7, r0
 80866e0:	460e      	mov	r6, r1
 80866e2:	4615      	mov	r5, r2
 80866e4:	b085      	sub	sp, #20
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 80866e6:	2410      	movs	r4, #16
 80866e8:	4622      	mov	r2, r4
 80866ea:	2100      	movs	r1, #0
 80866ec:	4668      	mov	r0, sp
 80866ee:	f002 fda1 	bl	8089234 <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80866f2:	2200      	movs	r2, #0
 80866f4:	4669      	mov	r1, sp
 80866f6:	4610      	mov	r0, r2
         size = sizeof(*this);
 80866f8:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
 80866fc:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 80866fe:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 8086700:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 8086702:	f7fd ffc5 	bl	8084690 <spark_function>
}
 8086706:	b005      	add	sp, #20
 8086708:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808670a <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 808670a:	b513      	push	{r0, r1, r4, lr}
 808670c:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 808670e:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 8086712:	2300      	movs	r3, #0
 8086714:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8086716:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 8086718:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 808671a:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808671c:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 808671e:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8086720:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8086722:	f7f9 fe19 	bl	8080358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8086726:	4620      	mov	r0, r4
 8086728:	b002      	add	sp, #8
 808672a:	bd10      	pop	{r4, pc}

0808672c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 808672c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 808672e:	460c      	mov	r4, r1
 8086730:	4606      	mov	r6, r0
 8086732:	460f      	mov	r7, r1
 8086734:	f854 3b04 	ldr.w	r3, [r4], #4
 8086738:	ad02      	add	r5, sp, #8
 808673a:	f845 3d08 	str.w	r3, [r5, #-8]!
 808673e:	4621      	mov	r1, r4
 8086740:	a801      	add	r0, sp, #4
 8086742:	f7fe fe8d 	bl	8085460 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 8086746:	4629      	mov	r1, r5
 8086748:	4630      	mov	r0, r6
 808674a:	f7ff ffde 	bl	808670a <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808674e:	a801      	add	r0, sp, #4
 8086750:	f7f9 fe02 	bl	8080358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8086754:	4620      	mov	r0, r4
 8086756:	f7f9 fdff 	bl	8080358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 808675a:	4638      	mov	r0, r7
 808675c:	2108      	movs	r1, #8
 808675e:	f001 f969 	bl	8087a34 <_ZdlPvj>
        return p;
    }
 8086762:	4630      	mov	r0, r6
 8086764:	b003      	add	sp, #12
 8086766:	bdf0      	pop	{r4, r5, r6, r7, pc}

08086768 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8086768:	b538      	push	{r3, r4, r5, lr}
 808676a:	2300      	movs	r3, #0
 808676c:	4604      	mov	r4, r0
 808676e:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8086770:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8086772:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8086774:	f7f9 fc93 	bl	808009e <_Znwj>
 8086778:	b128      	cbz	r0, 8086786 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 808677a:	2301      	movs	r3, #1
 808677c:	6043      	str	r3, [r0, #4]
 808677e:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 8086780:	4b02      	ldr	r3, [pc, #8]	; (808678c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 8086782:	60c5      	str	r5, [r0, #12]
 8086784:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8086786:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 8086788:	4620      	mov	r0, r4
 808678a:	bd38      	pop	{r3, r4, r5, pc}
 808678c:	0808b378 	.word	0x0808b378

08086790 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8086790:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8086792:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8086794:	b90a      	cbnz	r2, 808679a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 8086796:	f001 f960 	bl	8087a5a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808679a:	68c3      	ldr	r3, [r0, #12]
    }
 808679c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80867a0:	4718      	bx	r3

080867a2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80867a2:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80867a4:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80867a6:	f100 0110 	add.w	r1, r0, #16
 80867aa:	f7ff fff1 	bl	8086790 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80867ae:	bd08      	pop	{r3, pc}

080867b0 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80867b0:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80867b2:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80867b4:	b90a      	cbnz	r2, 80867ba <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80867b6:	f001 f950 	bl	8087a5a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80867ba:	68c3      	ldr	r3, [r0, #12]
    }
 80867bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80867c0:	4718      	bx	r3

080867c2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80867c2:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80867c4:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80867c6:	f100 0110 	add.w	r1, r0, #16
 80867ca:	f7ff fff1 	bl	80867b0 <_ZNKSt8functionIFvRKbEEclES1_>
 80867ce:	bd08      	pop	{r3, pc}

080867d0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80867d0:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80867d2:	2300      	movs	r3, #0
 80867d4:	6083      	str	r3, [r0, #8]
 80867d6:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80867d8:	4604      	mov	r4, r0
 80867da:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80867dc:	b12b      	cbz	r3, 80867ea <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80867de:	2202      	movs	r2, #2
 80867e0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80867e2:	68eb      	ldr	r3, [r5, #12]
 80867e4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80867e6:	68ab      	ldr	r3, [r5, #8]
 80867e8:	60a3      	str	r3, [r4, #8]
	}
    }
 80867ea:	4620      	mov	r0, r4
 80867ec:	bd38      	pop	{r3, r4, r5, pc}
	...

080867f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80867f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80867f2:	b089      	sub	sp, #36	; 0x24
 80867f4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80867f6:	4668      	mov	r0, sp
 80867f8:	f7ff feff 	bl	80865fa <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80867fc:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8086800:	2300      	movs	r3, #0
 8086802:	f88d 3008 	strb.w	r3, [sp, #8]
 8086806:	e8d4 3f4f 	ldrexb	r3, [r4]
 808680a:	2b00      	cmp	r3, #0
 808680c:	d103      	bne.n	8086816 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 808680e:	e8c4 2f41 	strexb	r1, r2, [r4]
 8086812:	2900      	cmp	r1, #0
 8086814:	d1f7      	bne.n	8086806 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 8086816:	d002      	beq.n	808681e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 8086818:	f88d 3008 	strb.w	r3, [sp, #8]
 808681c:	e063      	b.n	80868e6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 808681e:	f114 050c 	adds.w	r5, r4, #12
 8086822:	d003      	beq.n	808682c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 8086824:	4669      	mov	r1, sp
 8086826:	4628      	mov	r0, r5
 8086828:	f7ff fee7 	bl	80865fa <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 808682c:	f3bf 8f5f 	dmb	sy
 8086830:	2301      	movs	r3, #1
 8086832:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8086834:	f3bf 8f5f 	dmb	sy
 8086838:	f104 0308 	add.w	r3, r4, #8
 808683c:	2000      	movs	r0, #0
 808683e:	e853 6f00 	ldrex	r6, [r3]
 8086842:	e843 0200 	strex	r2, r0, [r3]
 8086846:	2a00      	cmp	r2, #0
 8086848:	d1f9      	bne.n	808683e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 808684a:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 808684e:	2e00      	cmp	r6, #0
 8086850:	d049      	beq.n	80868e6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8086852:	f7fd fe8f 	bl	8084574 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8086856:	b120      	cbz	r0, 8086862 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8086858:	4629      	mov	r1, r5
 808685a:	4630      	mov	r0, r6
 808685c:	f7ff ff98 	bl	8086790 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8086860:	e03a      	b.n	80868d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8086862:	4631      	mov	r1, r6
 8086864:	a802      	add	r0, sp, #8
 8086866:	f7ff ffb3 	bl	80867d0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 808686a:	68e0      	ldr	r0, [r4, #12]
 808686c:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8086870:	b108      	cbz	r0, 8086876 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 8086872:	f002 fd39 	bl	80892e8 <strdup>
 8086876:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8086878:	2010      	movs	r0, #16
 808687a:	f8ad 501c 	strh.w	r5, [sp, #28]
 808687e:	f7f9 fc0e 	bl	808009e <_Znwj>
 8086882:	4605      	mov	r5, r0
 8086884:	b1e8      	cbz	r0, 80868c2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8086886:	2700      	movs	r7, #0
 8086888:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808688a:	2018      	movs	r0, #24
 808688c:	f7f9 fc07 	bl	808009e <_Znwj>
 8086890:	4604      	mov	r4, r0
 8086892:	b188      	cbz	r0, 80868b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8086894:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8086896:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8086898:	a802      	add	r0, sp, #8
 808689a:	f7ff fd46 	bl	808632a <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808689e:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80868a0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80868a2:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80868a4:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80868a6:	9204      	str	r2, [sp, #16]
 80868a8:	68e2      	ldr	r2, [r4, #12]
 80868aa:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80868ac:	60e3      	str	r3, [r4, #12]
 80868ae:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80868b2:	9205      	str	r2, [sp, #20]
 80868b4:	f7ff fea1 	bl	80865fa <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80868b8:	4b0d      	ldr	r3, [pc, #52]	; (80868f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80868ba:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80868bc:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80868be:	4b0d      	ldr	r3, [pc, #52]	; (80868f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 80868c0:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 80868c2:	a806      	add	r0, sp, #24
 80868c4:	f7ff fea8 	bl	8086618 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80868c8:	a802      	add	r0, sp, #8
 80868ca:	f7f9 fcff 	bl	80802cc <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80868ce:	2200      	movs	r2, #0
 80868d0:	4629      	mov	r1, r5
 80868d2:	4809      	ldr	r0, [pc, #36]	; (80868f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 80868d4:	f7fd fe56 	bl	8084584 <application_thread_invoke>
 80868d8:	4630      	mov	r0, r6
 80868da:	f7f9 fcf7 	bl	80802cc <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80868de:	2110      	movs	r1, #16
 80868e0:	4630      	mov	r0, r6
 80868e2:	f001 f8a7 	bl	8087a34 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 80868e6:	4668      	mov	r0, sp
 80868e8:	f7ff fe96 	bl	8086618 <_ZN8particle5ErrorD1Ev>
    }
 80868ec:	b009      	add	sp, #36	; 0x24
 80868ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80868f0:	080867a3 	.word	0x080867a3
 80868f4:	08086a19 	.word	0x08086a19
 80868f8:	08087111 	.word	0x08087111

080868fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80868fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8086900:	b08b      	sub	sp, #44	; 0x2c
 8086902:	4606      	mov	r6, r0
 8086904:	460f      	mov	r7, r1
 8086906:	4690      	mov	r8, r2
 8086908:	4699      	mov	r9, r3
 808690a:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 808690e:	f7fd fedf 	bl	80846d0 <spark_cloud_flag_connected>
 8086912:	ad07      	add	r5, sp, #28
    if (!connected()) {
 8086914:	4683      	mov	fp, r0
 8086916:	bb30      	cbnz	r0, 8086966 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8086918:	f64f 732e 	movw	r3, #65326	; 0xff2e
 808691c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 808691e:	a905      	add	r1, sp, #20
 8086920:	4628      	mov	r0, r5
 8086922:	f8ad 3018 	strh.w	r3, [sp, #24]
 8086926:	f7ff fe68 	bl	80865fa <_ZN8particle5ErrorC1EOS0_>
 808692a:	2014      	movs	r0, #20
 808692c:	f7f9 fbb7 	bl	808009e <_Znwj>
 8086930:	4604      	mov	r4, r0
 8086932:	b158      	cbz	r0, 808694c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 8086934:	2302      	movs	r3, #2
 8086936:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8086938:	2301      	movs	r3, #1
 808693a:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 808693c:	f8c0 b004 	str.w	fp, [r0, #4]
 8086940:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 8086944:	4629      	mov	r1, r5
 8086946:	300c      	adds	r0, #12
 8086948:	f7ff fe57 	bl	80865fa <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 808694c:	4630      	mov	r0, r6
 808694e:	4621      	mov	r1, r4
 8086950:	f840 4b04 	str.w	r4, [r0], #4
 8086954:	f7ff ff08 	bl	8086768 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8086958:	4628      	mov	r0, r5
 808695a:	f7ff fe5d 	bl	8086618 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 808695e:	a805      	add	r0, sp, #20
 8086960:	f7ff fe5a 	bl	8086618 <_ZN8particle5ErrorD1Ev>
 8086964:	e052      	b.n	8086a0c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8086966:	2400      	movs	r4, #0
 8086968:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 808696a:	2014      	movs	r0, #20
 808696c:	606c      	str	r4, [r5, #4]
 808696e:	60ac      	str	r4, [r5, #8]
 8086970:	9307      	str	r3, [sp, #28]
 8086972:	f7f9 fb94 	bl	808009e <_Znwj>
 8086976:	4601      	mov	r1, r0
 8086978:	b118      	cbz	r0, 8086982 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 808697a:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 808697c:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 808697e:	6044      	str	r4, [r0, #4]
 8086980:	6084      	str	r4, [r0, #8]
 8086982:	a804      	add	r0, sp, #16
 8086984:	9103      	str	r1, [sp, #12]
 8086986:	f7ff feef 	bl	8086768 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 808698a:	4b22      	ldr	r3, [pc, #136]	; (8086a14 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 808698c:	2008      	movs	r0, #8
 808698e:	9308      	str	r3, [sp, #32]
 8086990:	f7f9 fb85 	bl	808009e <_Znwj>
 8086994:	4604      	mov	r4, r0
 8086996:	b128      	cbz	r0, 80869a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8086998:	9b03      	ldr	r3, [sp, #12]
 808699a:	a904      	add	r1, sp, #16
 808699c:	f840 3b04 	str.w	r3, [r0], #4
 80869a0:	f7fe fd5e 	bl	8085460 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80869a4:	9500      	str	r5, [sp, #0]
 80869a6:	fa5f f38a 	uxtb.w	r3, sl
 80869aa:	464a      	mov	r2, r9
 80869ac:	4641      	mov	r1, r8
 80869ae:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80869b0:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80869b2:	f7fd fe9d 	bl	80846f0 <spark_send_event>
 80869b6:	b920      	cbnz	r0, 80869c2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80869b8:	9b03      	ldr	r3, [sp, #12]
 80869ba:	785b      	ldrb	r3, [r3, #1]
 80869bc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80869c0:	b183      	cbz	r3, 80869e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 80869c2:	9b03      	ldr	r3, [sp, #12]
 80869c4:	a904      	add	r1, sp, #16
 80869c6:	a806      	add	r0, sp, #24
 80869c8:	9305      	str	r3, [sp, #20]
 80869ca:	f7fe fd49 	bl	8085460 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80869ce:	a905      	add	r1, sp, #20
 80869d0:	4630      	mov	r0, r6
 80869d2:	f7ff fe9a 	bl	808670a <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80869d6:	a806      	add	r0, sp, #24
 80869d8:	f7f9 fcbe 	bl	8080358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80869dc:	a804      	add	r0, sp, #16
 80869de:	f7f9 fcbb 	bl	8080358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80869e2:	e013      	b.n	8086a0c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 80869e4:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80869e8:	a905      	add	r1, sp, #20
 80869ea:	a803      	add	r0, sp, #12
 80869ec:	9205      	str	r2, [sp, #20]
 80869ee:	f8ad 3018 	strh.w	r3, [sp, #24]
 80869f2:	f7ff fefd 	bl	80867f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80869f6:	a805      	add	r0, sp, #20
 80869f8:	f7ff fe0e 	bl	8086618 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80869fc:	a805      	add	r0, sp, #20
 80869fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8086a00:	f7ff fe94 	bl	808672c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 8086a04:	a806      	add	r0, sp, #24
 8086a06:	f7f9 fca7 	bl	8080358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8086a0a:	e7da      	b.n	80869c2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
 8086a0c:	4630      	mov	r0, r6
 8086a0e:	b00b      	add	sp, #44	; 0x2c
 8086a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8086a14:	08086b89 	.word	0x08086b89

08086a18 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8086a18:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8086a1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8086a1c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8086a1e:	d006      	beq.n	8086a2e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 8086a20:	2a03      	cmp	r2, #3
 8086a22:	d017      	beq.n	8086a54 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 8086a24:	2a01      	cmp	r2, #1
 8086a26:	d122      	bne.n	8086a6e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8086a28:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8086a2a:	6003      	str	r3, [r0, #0]
	      break;
 8086a2c:	e01f      	b.n	8086a6e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8086a2e:	2018      	movs	r0, #24
 8086a30:	680e      	ldr	r6, [r1, #0]
 8086a32:	f7f9 fb34 	bl	808009e <_Znwj>
 8086a36:	4605      	mov	r5, r0
 8086a38:	b150      	cbz	r0, 8086a50 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8086a3a:	4631      	mov	r1, r6
 8086a3c:	f7ff fec8 	bl	80867d0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8086a40:	6930      	ldr	r0, [r6, #16]
 8086a42:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8086a46:	b108      	cbz	r0, 8086a4c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 8086a48:	f002 fc4e 	bl	80892e8 <strdup>
 8086a4c:	6128      	str	r0, [r5, #16]
 8086a4e:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8086a50:	6025      	str	r5, [r4, #0]
 8086a52:	e00c      	b.n	8086a6e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8086a54:	6804      	ldr	r4, [r0, #0]
 8086a56:	b154      	cbz	r4, 8086a6e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 8086a58:	f104 0010 	add.w	r0, r4, #16
 8086a5c:	f7ff fddc 	bl	8086618 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8086a60:	4620      	mov	r0, r4
 8086a62:	f7f9 fc33 	bl	80802cc <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8086a66:	2118      	movs	r1, #24
 8086a68:	4620      	mov	r0, r4
 8086a6a:	f000 ffe3 	bl	8087a34 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8086a6e:	2000      	movs	r0, #0
 8086a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08086a72 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8086a72:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8086a74:	2300      	movs	r3, #0
 8086a76:	6083      	str	r3, [r0, #8]
 8086a78:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8086a7a:	4604      	mov	r4, r0
 8086a7c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8086a7e:	b12b      	cbz	r3, 8086a8c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8086a80:	2202      	movs	r2, #2
 8086a82:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8086a84:	68eb      	ldr	r3, [r5, #12]
 8086a86:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8086a88:	68ab      	ldr	r3, [r5, #8]
 8086a8a:	60a3      	str	r3, [r4, #8]
	}
    }
 8086a8c:	4620      	mov	r0, r4
 8086a8e:	bd38      	pop	{r3, r4, r5, pc}

08086a90 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8086a90:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8086a92:	b570      	push	{r4, r5, r6, lr}
 8086a94:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8086a96:	d006      	beq.n	8086aa6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 8086a98:	2a03      	cmp	r2, #3
 8086a9a:	d011      	beq.n	8086ac0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 8086a9c:	2a01      	cmp	r2, #1
 8086a9e:	d118      	bne.n	8086ad2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8086aa0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8086aa2:	6003      	str	r3, [r0, #0]
	      break;
 8086aa4:	e015      	b.n	8086ad2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8086aa6:	2014      	movs	r0, #20
 8086aa8:	680e      	ldr	r6, [r1, #0]
 8086aaa:	f7f9 faf8 	bl	808009e <_Znwj>
 8086aae:	4605      	mov	r5, r0
 8086ab0:	b120      	cbz	r0, 8086abc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8086ab2:	4631      	mov	r1, r6
 8086ab4:	f7ff ffdd 	bl	8086a72 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 8086ab8:	7c33      	ldrb	r3, [r6, #16]
 8086aba:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8086abc:	6025      	str	r5, [r4, #0]
 8086abe:	e008      	b.n	8086ad2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8086ac0:	6804      	ldr	r4, [r0, #0]
 8086ac2:	b134      	cbz	r4, 8086ad2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8086ac4:	4620      	mov	r0, r4
 8086ac6:	f7f9 fc01 	bl	80802cc <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8086aca:	2114      	movs	r1, #20
 8086acc:	4620      	mov	r0, r4
 8086ace:	f000 ffb1 	bl	8087a34 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8086ad2:	2000      	movs	r0, #0
 8086ad4:	bd70      	pop	{r4, r5, r6, pc}
	...

08086ad8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 8086ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8086ada:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8086adc:	f3bf 8f5f 	dmb	sy
 8086ae0:	b087      	sub	sp, #28
 8086ae2:	2300      	movs	r3, #0
 8086ae4:	e850 6f00 	ldrex	r6, [r0]
 8086ae8:	e840 3200 	strex	r2, r3, [r0]
 8086aec:	2a00      	cmp	r2, #0
 8086aee:	d1f9      	bne.n	8086ae4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 8086af0:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8086af4:	2e00      	cmp	r6, #0
 8086af6:	d03f      	beq.n	8086b78 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8086af8:	4618      	mov	r0, r3
 8086afa:	f7fd fd3b 	bl	8084574 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8086afe:	4607      	mov	r7, r0
 8086b00:	b120      	cbz	r0, 8086b0c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8086b02:	4621      	mov	r1, r4
 8086b04:	4630      	mov	r0, r6
 8086b06:	f7ff fe53 	bl	80867b0 <_ZNKSt8functionIFvRKbEEclES1_>
 8086b0a:	e02e      	b.n	8086b6a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8086b0c:	4631      	mov	r1, r6
 8086b0e:	a801      	add	r0, sp, #4
 8086b10:	f7ff ffaf 	bl	8086a72 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8086b14:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8086b16:	2010      	movs	r0, #16
 8086b18:	f88d 3014 	strb.w	r3, [sp, #20]
 8086b1c:	f7f9 fabf 	bl	808009e <_Znwj>
 8086b20:	4605      	mov	r5, r0
 8086b22:	b1d0      	cbz	r0, 8086b5a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8086b24:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8086b26:	2014      	movs	r0, #20
 8086b28:	f7f9 fab9 	bl	808009e <_Znwj>
 8086b2c:	4604      	mov	r4, r0
 8086b2e:	b178      	cbz	r0, 8086b50 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8086b30:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8086b32:	4601      	mov	r1, r0
 8086b34:	a801      	add	r0, sp, #4
 8086b36:	f7ff fbf8 	bl	808632a <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8086b3a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8086b3c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8086b3e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8086b40:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8086b42:	9203      	str	r2, [sp, #12]
 8086b44:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8086b46:	60e3      	str	r3, [r4, #12]
 8086b48:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8086b4c:	9204      	str	r2, [sp, #16]
 8086b4e:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8086b50:	4b0a      	ldr	r3, [pc, #40]	; (8086b7c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8086b52:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8086b54:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8086b56:	4b0a      	ldr	r3, [pc, #40]	; (8086b80 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 8086b58:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8086b5a:	a801      	add	r0, sp, #4
 8086b5c:	f7f9 fbb6 	bl	80802cc <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8086b60:	2200      	movs	r2, #0
 8086b62:	4629      	mov	r1, r5
 8086b64:	4807      	ldr	r0, [pc, #28]	; (8086b84 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 8086b66:	f7fd fd0d 	bl	8084584 <application_thread_invoke>
 8086b6a:	4630      	mov	r0, r6
 8086b6c:	f7f9 fbae 	bl	80802cc <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8086b70:	2110      	movs	r1, #16
 8086b72:	4630      	mov	r0, r6
 8086b74:	f000 ff5e 	bl	8087a34 <_ZdlPvj>
        }
    }
 8086b78:	b007      	add	sp, #28
 8086b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8086b7c:	080867c3 	.word	0x080867c3
 8086b80:	08086a91 	.word	0x08086a91
 8086b84:	08087111 	.word	0x08087111

08086b88 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 8086b88:	b530      	push	{r4, r5, lr}
 8086b8a:	4604      	mov	r4, r0
 8086b8c:	b085      	sub	sp, #20
 8086b8e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 8086b90:	4668      	mov	r0, sp
 8086b92:	4611      	mov	r1, r2
 8086b94:	f7ff fdca 	bl	808672c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 8086b98:	b17c      	cbz	r4, 8086bba <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 8086b9a:	b224      	sxth	r4, r4
 8086b9c:	4628      	mov	r0, r5
 8086b9e:	b10d      	cbz	r5, 8086ba4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 8086ba0:	f002 fba2 	bl	80892e8 <strdup>
 8086ba4:	9002      	str	r0, [sp, #8]
 8086ba6:	a902      	add	r1, sp, #8
 8086ba8:	4668      	mov	r0, sp
 8086baa:	f8ad 400c 	strh.w	r4, [sp, #12]
 8086bae:	f7ff fe1f 	bl	80867f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8086bb2:	a802      	add	r0, sp, #8
 8086bb4:	f7ff fd30 	bl	8086618 <_ZN8particle5ErrorD1Ev>
 8086bb8:	e01d      	b.n	8086bf6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8086bba:	f04f 0201 	mov.w	r2, #1
 8086bbe:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8086bc0:	f88d 4008 	strb.w	r4, [sp, #8]
 8086bc4:	e8d0 3f4f 	ldrexb	r3, [r0]
 8086bc8:	42a3      	cmp	r3, r4
 8086bca:	d103      	bne.n	8086bd4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 8086bcc:	e8c0 2f41 	strexb	r1, r2, [r0]
 8086bd0:	2900      	cmp	r1, #0
 8086bd2:	d1f7      	bne.n	8086bc4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 8086bd4:	d002      	beq.n	8086bdc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 8086bd6:	f88d 3008 	strb.w	r3, [sp, #8]
 8086bda:	e00c      	b.n	8086bf6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 8086bdc:	f110 010c 	adds.w	r1, r0, #12
 8086be0:	f04f 0301 	mov.w	r3, #1
 8086be4:	bf18      	it	ne
 8086be6:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8086be8:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 8086bec:	3004      	adds	r0, #4
 8086bee:	f800 3c03 	strb.w	r3, [r0, #-3]
 8086bf2:	f7ff ff71 	bl	8086ad8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 8086bf6:	a801      	add	r0, sp, #4
 8086bf8:	f7f9 fbae 	bl	8080358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 8086bfc:	b005      	add	sp, #20
 8086bfe:	bd30      	pop	{r4, r5, pc}

08086c00 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8086c00:	4770      	bx	lr

08086c02 <_ZN9IPAddressD0Ev>:
 8086c02:	b510      	push	{r4, lr}
 8086c04:	4604      	mov	r4, r0
 8086c06:	2108      	movs	r1, #8
 8086c08:	f000 ff14 	bl	8087a34 <_ZdlPvj>
 8086c0c:	4620      	mov	r0, r4
 8086c0e:	bd10      	pop	{r4, pc}

08086c10 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8086c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8086c12:	460f      	mov	r7, r1
 8086c14:	f100 0608 	add.w	r6, r0, #8
 8086c18:	1d05      	adds	r5, r0, #4
 8086c1a:	2400      	movs	r4, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 8086c1c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8086c20:	220a      	movs	r2, #10
 8086c22:	4638      	mov	r0, r7
 8086c24:	f7fe f977 	bl	8084f16 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8086c28:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8086c2a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8086c2c:	d007      	beq.n	8086c3e <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 8086c2e:	2c00      	cmp	r4, #0
 8086c30:	d0f4      	beq.n	8086c1c <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8086c32:	212e      	movs	r1, #46	; 0x2e
 8086c34:	4638      	mov	r0, r7
 8086c36:	f7fe f955 	bl	8084ee4 <_ZN5Print5printEc>
 8086c3a:	4404      	add	r4, r0
 8086c3c:	e7ee      	b.n	8086c1c <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 8086c3e:	4620      	mov	r0, r4
 8086c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08086c44 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 8086c44:	4a02      	ldr	r2, [pc, #8]	; (8086c50 <_ZN9IPAddressC1Ev+0xc>)
 8086c46:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8086c48:	2200      	movs	r2, #0
 8086c4a:	6042      	str	r2, [r0, #4]
{
    clear();
}
 8086c4c:	4770      	bx	lr
 8086c4e:	bf00      	nop
 8086c50:	0808b394 	.word	0x0808b394

08086c54 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 8086c54:	4a02      	ldr	r2, [pc, #8]	; (8086c60 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 8086c56:	6002      	str	r2, [r0, #0]
{
    memcpy(&this->address, &address, sizeof(address));
 8086c58:	680a      	ldr	r2, [r1, #0]
 8086c5a:	6042      	str	r2, [r0, #4]
}
 8086c5c:	4770      	bx	lr
 8086c5e:	bf00      	nop
 8086c60:	0808b394 	.word	0x0808b394

08086c64 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8086c64:	4a01      	ldr	r2, [pc, #4]	; (8086c6c <_ZN9IPAddressC1Em+0x8>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 8086c66:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8086c68:	6002      	str	r2, [r0, #0]
{
    *this = address;
}
 8086c6a:	4770      	bx	lr
 8086c6c:	0808b394 	.word	0x0808b394

08086c70 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 8086c70:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8086c72:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8086c76:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 8086c7a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8086c7e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8086c82:	6041      	str	r1, [r0, #4]
 8086c84:	bd10      	pop	{r4, pc}
	...

08086c88 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8086c88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8086c8a:	4d04      	ldr	r5, [pc, #16]	; (8086c9c <_ZN9IPAddressC1Ehhhh+0x14>)
 8086c8c:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 8086c8e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8086c92:	9500      	str	r5, [sp, #0]
 8086c94:	f7ff ffec 	bl	8086c70 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8086c98:	b003      	add	sp, #12
 8086c9a:	bd30      	pop	{r4, r5, pc}
 8086c9c:	0808b394 	.word	0x0808b394

08086ca0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8086ca0:	7441      	strb	r1, [r0, #17]
 8086ca2:	4770      	bx	lr

08086ca4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 8086ca4:	4770      	bx	lr

08086ca6 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 8086ca6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 8086ca8:	2100      	movs	r1, #0
 8086caa:	7c00      	ldrb	r0, [r0, #16]
 8086cac:	f7fd fbfa 	bl	80844a4 <HAL_USB_USART_Receive_Data>
}
 8086cb0:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8086cb4:	bf28      	it	cs
 8086cb6:	f04f 30ff 	movcs.w	r0, #4294967295
 8086cba:	bd08      	pop	{r3, pc}

08086cbc <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 8086cbc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 8086cbe:	2101      	movs	r1, #1
 8086cc0:	7c00      	ldrb	r0, [r0, #16]
 8086cc2:	f7fd fbef 	bl	80844a4 <HAL_USB_USART_Receive_Data>
}
 8086cc6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8086cca:	bf28      	it	cs
 8086ccc:	f04f 30ff 	movcs.w	r0, #4294967295
 8086cd0:	bd08      	pop	{r3, pc}

08086cd2 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 8086cd2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 8086cd4:	7c00      	ldrb	r0, [r0, #16]
 8086cd6:	f7fd fbdd 	bl	8084494 <HAL_USB_USART_Available_Data_For_Write>
}
 8086cda:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8086cde:	bd08      	pop	{r3, pc}

08086ce0 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 8086ce0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 8086ce2:	7c00      	ldrb	r0, [r0, #16]
 8086ce4:	f7fd fbce 	bl	8084484 <HAL_USB_USART_Available_Data>
}
 8086ce8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8086cec:	bd08      	pop	{r3, pc}

08086cee <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 8086cee:	7c00      	ldrb	r0, [r0, #16]
 8086cf0:	f7fd bbe8 	b.w	80844c4 <HAL_USB_USART_Flush_Data>

08086cf4 <_ZN9USBSerialD0Ev>:
 8086cf4:	b510      	push	{r4, lr}
 8086cf6:	4604      	mov	r4, r0
 8086cf8:	2114      	movs	r1, #20
 8086cfa:	f000 fe9b 	bl	8087a34 <_ZdlPvj>
 8086cfe:	4620      	mov	r0, r4
 8086d00:	bd10      	pop	{r4, pc}

08086d02 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 8086d02:	b538      	push	{r3, r4, r5, lr}
 8086d04:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8086d06:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 8086d08:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8086d0a:	f7fd fbc3 	bl	8084494 <HAL_USB_USART_Available_Data_For_Write>
 8086d0e:	2800      	cmp	r0, #0
 8086d10:	dc01      	bgt.n	8086d16 <_ZN9USBSerial5writeEh+0x14>
 8086d12:	7c60      	ldrb	r0, [r4, #17]
 8086d14:	b128      	cbz	r0, 8086d22 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 8086d16:	4629      	mov	r1, r5
 8086d18:	7c20      	ldrb	r0, [r4, #16]
 8086d1a:	f7fd fbcb 	bl	80844b4 <HAL_USB_USART_Send_Data>
 8086d1e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 8086d22:	bd38      	pop	{r3, r4, r5, pc}

08086d24 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8086d24:	b510      	push	{r4, lr}
 8086d26:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8086d28:	2300      	movs	r3, #0
 8086d2a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8086d2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8086d30:	60a3      	str	r3, [r4, #8]
 8086d32:	4b05      	ldr	r3, [pc, #20]	; (8086d48 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 8086d34:	4608      	mov	r0, r1
 8086d36:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 8086d38:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 8086d3a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 8086d3c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 8086d3e:	4611      	mov	r1, r2
 8086d40:	f7fd fb88 	bl	8084454 <HAL_USB_USART_Init>
}
 8086d44:	4620      	mov	r0, r4
 8086d46:	bd10      	pop	{r4, pc}
 8086d48:	0808b3a8 	.word	0x0808b3a8

08086d4c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 8086d4c:	2200      	movs	r2, #0
 8086d4e:	7c00      	ldrb	r0, [r0, #16]
 8086d50:	f7fd bb88 	b.w	8084464 <HAL_USB_USART_Begin>

08086d54 <_ZN9USBSerial3endEv>:
}

void USBSerial::end()
{
    HAL_USB_USART_End(_serial);
 8086d54:	7c00      	ldrb	r0, [r0, #16]
 8086d56:	f7fd bb8d 	b.w	8084474 <HAL_USB_USART_End>

08086d5a <_Z19acquireSerialBufferv>:
 8086d5a:	b510      	push	{r4, lr}
 8086d5c:	4604      	mov	r4, r0
 8086d5e:	2214      	movs	r2, #20
 8086d60:	2100      	movs	r1, #0
 8086d62:	f002 fa67 	bl	8089234 <memset>
 8086d66:	4620      	mov	r0, r4
 8086d68:	bd10      	pop	{r4, pc}
	...

08086d6c <_Z16_fetch_usbserialv>:

  return conf;
}

USBSerial& _fetch_usbserial()
{
 8086d6c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8086d6e:	4d0e      	ldr	r5, [pc, #56]	; (8086da8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 8086d70:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 8086d72:	a801      	add	r0, sp, #4
 8086d74:	f7ff fff1 	bl	8086d5a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8086d78:	6829      	ldr	r1, [r5, #0]
 8086d7a:	f011 0401 	ands.w	r4, r1, #1
 8086d7e:	d110      	bne.n	8086da2 <_Z16_fetch_usbserialv+0x36>
 8086d80:	4628      	mov	r0, r5
 8086d82:	f7f9 f99b 	bl	80800bc <__cxa_guard_acquire>
 8086d86:	b160      	cbz	r0, 8086da2 <_Z16_fetch_usbserialv+0x36>
 8086d88:	aa01      	add	r2, sp, #4
 8086d8a:	4621      	mov	r1, r4
 8086d8c:	4807      	ldr	r0, [pc, #28]	; (8086dac <_Z16_fetch_usbserialv+0x40>)
 8086d8e:	f7ff ffc9 	bl	8086d24 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8086d92:	4628      	mov	r0, r5
 8086d94:	f7f9 f997 	bl	80800c6 <__cxa_guard_release>
 8086d98:	4a05      	ldr	r2, [pc, #20]	; (8086db0 <_Z16_fetch_usbserialv+0x44>)
 8086d9a:	4906      	ldr	r1, [pc, #24]	; (8086db4 <_Z16_fetch_usbserialv+0x48>)
 8086d9c:	4803      	ldr	r0, [pc, #12]	; (8086dac <_Z16_fetch_usbserialv+0x40>)
 8086d9e:	f000 fe3b 	bl	8087a18 <__aeabi_atexit>
	return _usbserial;
}
 8086da2:	4802      	ldr	r0, [pc, #8]	; (8086dac <_Z16_fetch_usbserialv+0x40>)
 8086da4:	b007      	add	sp, #28
 8086da6:	bd30      	pop	{r4, r5, pc}
 8086da8:	20000440 	.word	0x20000440
 8086dac:	20000448 	.word	0x20000448
 8086db0:	20000180 	.word	0x20000180
 8086db4:	08086ca5 	.word	0x08086ca5

08086db8 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8086db8:	b510      	push	{r4, lr}
 8086dba:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8086dbc:	2214      	movs	r2, #20
 8086dbe:	2100      	movs	r1, #0
 8086dc0:	f002 fa38 	bl	8089234 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8086dc4:	4620      	mov	r0, r4
 8086dc6:	bd10      	pop	{r4, pc}

08086dc8 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8086dc8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8086dca:	4c0e      	ldr	r4, [pc, #56]	; (8086e04 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 8086dcc:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8086dce:	a801      	add	r0, sp, #4
 8086dd0:	f7ff fff2 	bl	8086db8 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8086dd4:	6823      	ldr	r3, [r4, #0]
 8086dd6:	07db      	lsls	r3, r3, #31
 8086dd8:	d410      	bmi.n	8086dfc <_Z17_fetch_usbserial1v+0x34>
 8086dda:	4620      	mov	r0, r4
 8086ddc:	f7f9 f96e 	bl	80800bc <__cxa_guard_acquire>
 8086de0:	b160      	cbz	r0, 8086dfc <_Z17_fetch_usbserial1v+0x34>
 8086de2:	aa01      	add	r2, sp, #4
 8086de4:	2101      	movs	r1, #1
 8086de6:	4808      	ldr	r0, [pc, #32]	; (8086e08 <_Z17_fetch_usbserial1v+0x40>)
 8086de8:	f7ff ff9c 	bl	8086d24 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8086dec:	4620      	mov	r0, r4
 8086dee:	f7f9 f96a 	bl	80800c6 <__cxa_guard_release>
 8086df2:	4a06      	ldr	r2, [pc, #24]	; (8086e0c <_Z17_fetch_usbserial1v+0x44>)
 8086df4:	4906      	ldr	r1, [pc, #24]	; (8086e10 <_Z17_fetch_usbserial1v+0x48>)
 8086df6:	4804      	ldr	r0, [pc, #16]	; (8086e08 <_Z17_fetch_usbserial1v+0x40>)
 8086df8:	f000 fe0e 	bl	8087a18 <__aeabi_atexit>
  return _usbserial1;
}
 8086dfc:	4802      	ldr	r0, [pc, #8]	; (8086e08 <_Z17_fetch_usbserial1v+0x40>)
 8086dfe:	b006      	add	sp, #24
 8086e00:	bd10      	pop	{r4, pc}
 8086e02:	bf00      	nop
 8086e04:	20000444 	.word	0x20000444
 8086e08:	2000045c 	.word	0x2000045c
 8086e0c:	20000180 	.word	0x20000180
 8086e10:	08086ca5 	.word	0x08086ca5

08086e14 <_Z29call_wiring_interrupt_handlerPv>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8086e14:	6882      	ldr	r2, [r0, #8]
    delete handlers[pin];
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
}

void call_wiring_interrupt_handler(void* data)
{
 8086e16:	b510      	push	{r4, lr}
 8086e18:	b90a      	cbnz	r2, 8086e1e <_Z29call_wiring_interrupt_handlerPv+0xa>
	__throw_bad_function_call();
 8086e1a:	f000 fe1e 	bl	8087a5a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8086e1e:	68c3      	ldr	r3, [r0, #12]
    wiring_interrupt_handler_t* handler = (wiring_interrupt_handler_t*)data;
    (*handler)();
}
 8086e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8086e24:	4718      	bx	r3

08086e26 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
 8086e26:	f7fd b925 	b.w	8084074 <HAL_Interrupts_Disable_All>

08086e2a <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
 8086e2a:	f7fd b91b 	b.w	8084064 <HAL_Interrupts_Enable_All>

08086e2e <_ZNSt8functionIFvvEEC1ERKS1_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8086e2e:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8086e30:	2300      	movs	r3, #0
 8086e32:	6083      	str	r3, [r0, #8]
 8086e34:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8086e36:	4604      	mov	r4, r0
 8086e38:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8086e3a:	b12b      	cbz	r3, 8086e48 <_ZNSt8functionIFvvEEC1ERKS1_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8086e3c:	2202      	movs	r2, #2
 8086e3e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8086e40:	68eb      	ldr	r3, [r5, #12]
 8086e42:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8086e44:	68ab      	ldr	r3, [r5, #8]
 8086e46:	60a3      	str	r3, [r4, #8]
	}
    }
 8086e48:	4620      	mov	r0, r4
 8086e4a:	bd38      	pop	{r3, r4, r5, pc}

08086e4c <_Z16allocate_handlertRSt8functionIFvvEE>:
#include "system_error.h"

static wiring_interrupt_handler_t* handlers[TOTAL_PINS];

wiring_interrupt_handler_t* allocate_handler(uint16_t pin, wiring_interrupt_handler_t& fn)
{
 8086e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    delete handlers[pin];
 8086e4e:	4b0d      	ldr	r3, [pc, #52]	; (8086e84 <_Z16allocate_handlertRSt8functionIFvvEE+0x38>)
#include "system_error.h"

static wiring_interrupt_handler_t* handlers[TOTAL_PINS];

wiring_interrupt_handler_t* allocate_handler(uint16_t pin, wiring_interrupt_handler_t& fn)
{
 8086e50:	4606      	mov	r6, r0
    delete handlers[pin];
 8086e52:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
#include "system_error.h"

static wiring_interrupt_handler_t* handlers[TOTAL_PINS];

wiring_interrupt_handler_t* allocate_handler(uint16_t pin, wiring_interrupt_handler_t& fn)
{
 8086e56:	460f      	mov	r7, r1
 8086e58:	461c      	mov	r4, r3
    delete handlers[pin];
 8086e5a:	b135      	cbz	r5, 8086e6a <_Z16allocate_handlertRSt8functionIFvvEE+0x1e>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8086e5c:	4628      	mov	r0, r5
 8086e5e:	f7f9 fa35 	bl	80802cc <_ZNSt14_Function_baseD1Ev>
 8086e62:	2110      	movs	r1, #16
 8086e64:	4628      	mov	r0, r5
 8086e66:	f000 fde5 	bl	8087a34 <_ZdlPvj>
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
 8086e6a:	2010      	movs	r0, #16
 8086e6c:	f7f9 f917 	bl	808009e <_Znwj>
 8086e70:	4605      	mov	r5, r0
 8086e72:	b110      	cbz	r0, 8086e7a <_Z16allocate_handlertRSt8functionIFvvEE+0x2e>
 8086e74:	4639      	mov	r1, r7
 8086e76:	f7ff ffda 	bl	8086e2e <_ZNSt8functionIFvvEEC1ERKS1_>
 8086e7a:	f844 5026 	str.w	r5, [r4, r6, lsl #2]
}
 8086e7e:	4628      	mov	r0, r5
 8086e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8086e82:	bf00      	nop
 8086e84:	20000470 	.word	0x20000470

08086e88 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>:
  }
  return nullptr;
}

bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t fn, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 8086e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8086e8a:	460c      	mov	r4, r1
 8086e8c:	4605      	mov	r5, r0
 8086e8e:	b085      	sub	sp, #20
 8086e90:	4617      	mov	r7, r2
 8086e92:	461e      	mov	r6, r3
    HAL_Interrupts_Detach(pin);
 8086e94:	f7fd f8de 	bl	8084054 <HAL_Interrupts_Detach>
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
 8086e98:	4621      	mov	r1, r4
 8086e9a:	4628      	mov	r0, r5
 8086e9c:	f7ff ffd6 	bl	8086e4c <_Z16allocate_handlertRSt8functionIFvvEE>
    if (handler) {
 8086ea0:	4604      	mov	r4, r0
 8086ea2:	b1d0      	cbz	r0, 8086eda <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x52>
        HAL_InterruptExtraConfiguration extra = {0};
 8086ea4:	2100      	movs	r1, #0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 8086ea6:	2304      	movs	r3, #4
  if (priority >= 0) {
 8086ea8:	428e      	cmp	r6, r1
bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t fn, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
 8086eaa:	9103      	str	r1, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 8086eac:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
  }
  return nullptr;
 8086eb0:	bfb4      	ite	lt
 8086eb2:	460b      	movlt	r3, r1
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 8086eb4:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
{
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
 8086eb8:	4602      	mov	r2, r0
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 8086eba:	bfa4      	itt	ge
 8086ebc:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
 8086ec0:	ab03      	addge	r3, sp, #12
{
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
 8086ec2:	9300      	str	r3, [sp, #0]
 8086ec4:	4907      	ldr	r1, [pc, #28]	; (8086ee4 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x5c>)
 8086ec6:	463b      	mov	r3, r7
 8086ec8:	4628      	mov	r0, r5

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 8086eca:	bfa8      	it	ge
 8086ecc:	f88d 600d 	strbge.w	r6, [sp, #13]
{
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
 8086ed0:	f7fd f8b8 	bl	8084044 <HAL_Interrupts_Attach>
 8086ed4:	b108      	cbz	r0, 8086eda <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x52>
            return false;
 8086ed6:	2000      	movs	r0, #0
 8086ed8:	e002      	b.n	8086ee0 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x58>
        }
    }
    return handler!=NULL;
 8086eda:	1c20      	adds	r0, r4, #0
 8086edc:	bf18      	it	ne
 8086ede:	2001      	movne	r0, #1
}
 8086ee0:	b005      	add	sp, #20
 8086ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8086ee4:	08086e15 	.word	0x08086e15

08086ee8 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8086ee8:	2200      	movs	r2, #0
 8086eea:	4611      	mov	r1, r2
 8086eec:	6840      	ldr	r0, [r0, #4]
 8086eee:	f7fd bb8f 	b.w	8084610 <network_ready>

08086ef2 <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8086ef2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    {
        HAL_IPAddress ip = {0};
 8086ef6:	2600      	movs	r6, #0
 8086ef8:	ac04      	add	r4, sp, #16
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8086efa:	4605      	mov	r5, r0
    {
        HAL_IPAddress ip = {0};
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8086efc:	4610      	mov	r0, r2
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8086efe:	4688      	mov	r8, r1
 8086f00:	4617      	mov	r7, r2
    {
        HAL_IPAddress ip = {0};
 8086f02:	f844 6d04 	str.w	r6, [r4, #-4]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8086f06:	f002 ff1f 	bl	8089d48 <strlen>
 8086f0a:	9600      	str	r6, [sp, #0]
 8086f0c:	b281      	uxth	r1, r0
 8086f0e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8086f12:	4622      	mov	r2, r4
 8086f14:	4638      	mov	r0, r7
 8086f16:	f7fd fa8d 	bl	8084434 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8086f1a:	b120      	cbz	r0, 8086f26 <_ZN5spark13CellularClass7resolveEPKc+0x34>
 8086f1c:	4631      	mov	r1, r6
 8086f1e:	4628      	mov	r0, r5
 8086f20:	f7ff fea0 	bl	8086c64 <_ZN9IPAddressC1Em>
 8086f24:	e003      	b.n	8086f2e <_ZN5spark13CellularClass7resolveEPKc+0x3c>
 8086f26:	4621      	mov	r1, r4
 8086f28:	4628      	mov	r0, r5
 8086f2a:	f7ff fe93 	bl	8086c54 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 8086f2e:	4628      	mov	r0, r5
 8086f30:	b004      	add	sp, #16
 8086f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08086f36 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 8086f36:	2200      	movs	r2, #0
 8086f38:	4611      	mov	r1, r2
 8086f3a:	6840      	ldr	r0, [r0, #4]
 8086f3c:	f7fd bb88 	b.w	8084650 <network_listening>

08086f40 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 8086f40:	2200      	movs	r2, #0
 8086f42:	4611      	mov	r1, r2
 8086f44:	6840      	ldr	r0, [r0, #4]
 8086f46:	f7fd bb93 	b.w	8084670 <network_get_listen_timeout>

08086f4a <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 8086f4a:	2200      	movs	r2, #0
 8086f4c:	6840      	ldr	r0, [r0, #4]
 8086f4e:	f7fd bb87 	b.w	8084660 <network_set_listen_timeout>

08086f52 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 8086f52:	2200      	movs	r2, #0
 8086f54:	f081 0101 	eor.w	r1, r1, #1
 8086f58:	6840      	ldr	r0, [r0, #4]
 8086f5a:	f7fd bb71 	b.w	8084640 <network_listen>

08086f5e <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 8086f5e:	2300      	movs	r3, #0
 8086f60:	461a      	mov	r2, r3
 8086f62:	4619      	mov	r1, r3
 8086f64:	6840      	ldr	r0, [r0, #4]
 8086f66:	f7fd bb63 	b.w	8084630 <network_off>

08086f6a <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 8086f6a:	2300      	movs	r3, #0
 8086f6c:	461a      	mov	r2, r3
 8086f6e:	4619      	mov	r1, r3
 8086f70:	6840      	ldr	r0, [r0, #4]
 8086f72:	f7fd bb55 	b.w	8084620 <network_on>

08086f76 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 8086f76:	2200      	movs	r2, #0
 8086f78:	4611      	mov	r1, r2
 8086f7a:	6840      	ldr	r0, [r0, #4]
 8086f7c:	f7fd bb38 	b.w	80845f0 <network_connecting>

08086f80 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 8086f80:	2200      	movs	r2, #0
 8086f82:	2102      	movs	r1, #2
 8086f84:	6840      	ldr	r0, [r0, #4]
 8086f86:	f7fd bb3b 	b.w	8084600 <network_disconnect>

08086f8a <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 8086f8a:	2300      	movs	r3, #0
 8086f8c:	461a      	mov	r2, r3
 8086f8e:	6840      	ldr	r0, [r0, #4]
 8086f90:	f7fd bb26 	b.w	80845e0 <network_connect>

08086f94 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 8086f94:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 8086f96:	4c08      	ldr	r4, [pc, #32]	; (8086fb8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 8086f98:	2528      	movs	r5, #40	; 0x28
 8086f9a:	462a      	mov	r2, r5
 8086f9c:	2100      	movs	r1, #0
 8086f9e:	4620      	mov	r0, r4
 8086fa0:	f002 f948 	bl	8089234 <memset>
        cid = -1;
 8086fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8086fa8:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 8086faa:	4b04      	ldr	r3, [pc, #16]	; (8086fbc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
 8086fac:	2204      	movs	r2, #4
 8086fae:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 8086fb0:	4a03      	ldr	r2, [pc, #12]	; (8086fc0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
        size = sizeof(*this);
 8086fb2:	8025      	strh	r5, [r4, #0]
 8086fb4:	601a      	str	r2, [r3, #0]
 8086fb6:	bd38      	pop	{r3, r4, r5, pc}
 8086fb8:	20000534 	.word	0x20000534
 8086fbc:	2000052c 	.word	0x2000052c
 8086fc0:	0808b3d8 	.word	0x0808b3d8

08086fc4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 8086fc4:	4770      	bx	lr

08086fc6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8086fc6:	7441      	strb	r1, [r0, #17]
 8086fc8:	4770      	bx	lr

08086fca <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 8086fca:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 8086fcc:	7c00      	ldrb	r0, [r0, #16]
 8086fce:	f7fd f9b9 	bl	8084344 <HAL_USART_Available_Data_For_Write>
}
 8086fd2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8086fd6:	bd08      	pop	{r3, pc}

08086fd8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 8086fd8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 8086fda:	7c00      	ldrb	r0, [r0, #16]
 8086fdc:	f7fd f98a 	bl	80842f4 <HAL_USART_Available_Data>
}
 8086fe0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8086fe4:	bd08      	pop	{r3, pc}

08086fe6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 8086fe6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 8086fe8:	7c00      	ldrb	r0, [r0, #16]
 8086fea:	f7fd f993 	bl	8084314 <HAL_USART_Peek_Data>
}
 8086fee:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8086ff2:	bf28      	it	cs
 8086ff4:	f04f 30ff 	movcs.w	r0, #4294967295
 8086ff8:	bd08      	pop	{r3, pc}

08086ffa <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 8086ffa:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 8086ffc:	7c00      	ldrb	r0, [r0, #16]
 8086ffe:	f7fd f981 	bl	8084304 <HAL_USART_Read_Data>
}
 8087002:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8087006:	bf28      	it	cs
 8087008:	f04f 30ff 	movcs.w	r0, #4294967295
 808700c:	bd08      	pop	{r3, pc}

0808700e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 808700e:	7c00      	ldrb	r0, [r0, #16]
 8087010:	f7fd b988 	b.w	8084324 <HAL_USART_Flush_Data>

08087014 <_ZN11USARTSerialD0Ev>:
 8087014:	b510      	push	{r4, lr}
 8087016:	4604      	mov	r4, r0
 8087018:	2114      	movs	r1, #20
 808701a:	f000 fd0b 	bl	8087a34 <_ZdlPvj>
 808701e:	4620      	mov	r0, r4
 8087020:	bd10      	pop	{r4, pc}

08087022 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 8087022:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8087024:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 8087026:	4604      	mov	r4, r0
 8087028:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 808702a:	b925      	cbnz	r5, 8087036 <_ZN11USARTSerial5writeEh+0x14>
 808702c:	7c00      	ldrb	r0, [r0, #16]
 808702e:	f7fd f989 	bl	8084344 <HAL_USART_Available_Data_For_Write>
 8087032:	2800      	cmp	r0, #0
 8087034:	dd05      	ble.n	8087042 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8087036:	4631      	mov	r1, r6
 8087038:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 808703a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 808703e:	f7fd b951 	b.w	80842e4 <HAL_USART_Write_Data>
  }
  return 0;
}
 8087042:	4628      	mov	r0, r5
 8087044:	bd70      	pop	{r4, r5, r6, pc}
	...

08087048 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8087048:	b510      	push	{r4, lr}
 808704a:	4604      	mov	r4, r0
 808704c:	4608      	mov	r0, r1
 808704e:	4611      	mov	r1, r2
 8087050:	2200      	movs	r2, #0
 8087052:	6062      	str	r2, [r4, #4]
 8087054:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8087058:	60a2      	str	r2, [r4, #8]
 808705a:	4a05      	ldr	r2, [pc, #20]	; (8087070 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 808705c:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 808705e:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 8087060:	2201      	movs	r2, #1
 8087062:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 8087064:	461a      	mov	r2, r3
 8087066:	f7fd f92d 	bl	80842c4 <HAL_USART_Init>
}
 808706a:	4620      	mov	r0, r4
 808706c:	bd10      	pop	{r4, pc}
 808706e:	bf00      	nop
 8087070:	0808b40c 	.word	0x0808b40c

08087074 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 8087074:	2300      	movs	r3, #0
 8087076:	7c00      	ldrb	r0, [r0, #16]
 8087078:	f7fd b96c 	b.w	8084354 <HAL_USART_BeginConfig>

0808707c <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 808707c:	2200      	movs	r2, #0
 808707e:	f7ff bff9 	b.w	8087074 <_ZN11USARTSerial5beginEmm>

08087082 <_ZN11USARTSerial3endEv>:
  HAL_USART_BeginConfig(_serial, baud, config, 0);
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
 8087082:	7c00      	ldrb	r0, [r0, #16]
 8087084:	f7fd b926 	b.w	80842d4 <HAL_USART_End>

08087088 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 8087088:	7c00      	ldrb	r0, [r0, #16]
 808708a:	f7fd b953 	b.w	8084334 <HAL_USART_Is_Enabled>
	...

08087090 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 8087090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 8087092:	4c19      	ldr	r4, [pc, #100]	; (80870f8 <_Z22__fetch_global_Serial1v+0x68>)
 8087094:	6825      	ldr	r5, [r4, #0]
 8087096:	b94d      	cbnz	r5, 80870ac <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
 8087098:	2084      	movs	r0, #132	; 0x84
 808709a:	f7f9 f800 	bl	808009e <_Znwj>
 808709e:	4606      	mov	r6, r0
 80870a0:	b118      	cbz	r0, 80870aa <_Z22__fetch_global_Serial1v+0x1a>
 80870a2:	2284      	movs	r2, #132	; 0x84
 80870a4:	4629      	mov	r1, r5
 80870a6:	f002 f8c5 	bl	8089234 <memset>
 80870aa:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80870ac:	4d13      	ldr	r5, [pc, #76]	; (80870fc <_Z22__fetch_global_Serial1v+0x6c>)
 80870ae:	682e      	ldr	r6, [r5, #0]
 80870b0:	b94e      	cbnz	r6, 80870c6 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
 80870b2:	2084      	movs	r0, #132	; 0x84
 80870b4:	f7f8 fff3 	bl	808009e <_Znwj>
 80870b8:	4607      	mov	r7, r0
 80870ba:	b118      	cbz	r0, 80870c4 <_Z22__fetch_global_Serial1v+0x34>
 80870bc:	2284      	movs	r2, #132	; 0x84
 80870be:	4631      	mov	r1, r6
 80870c0:	f002 f8b8 	bl	8089234 <memset>
 80870c4:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80870c6:	4f0e      	ldr	r7, [pc, #56]	; (8087100 <_Z22__fetch_global_Serial1v+0x70>)
 80870c8:	6839      	ldr	r1, [r7, #0]
 80870ca:	f011 0601 	ands.w	r6, r1, #1
 80870ce:	d111      	bne.n	80870f4 <_Z22__fetch_global_Serial1v+0x64>
 80870d0:	4638      	mov	r0, r7
 80870d2:	f7f8 fff3 	bl	80800bc <__cxa_guard_acquire>
 80870d6:	b168      	cbz	r0, 80870f4 <_Z22__fetch_global_Serial1v+0x64>
 80870d8:	6822      	ldr	r2, [r4, #0]
 80870da:	4631      	mov	r1, r6
 80870dc:	682b      	ldr	r3, [r5, #0]
 80870de:	4809      	ldr	r0, [pc, #36]	; (8087104 <_Z22__fetch_global_Serial1v+0x74>)
 80870e0:	f7ff ffb2 	bl	8087048 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80870e4:	4638      	mov	r0, r7
 80870e6:	f7f8 ffee 	bl	80800c6 <__cxa_guard_release>
 80870ea:	4a07      	ldr	r2, [pc, #28]	; (8087108 <_Z22__fetch_global_Serial1v+0x78>)
 80870ec:	4907      	ldr	r1, [pc, #28]	; (808710c <_Z22__fetch_global_Serial1v+0x7c>)
 80870ee:	4805      	ldr	r0, [pc, #20]	; (8087104 <_Z22__fetch_global_Serial1v+0x74>)
 80870f0:	f000 fc92 	bl	8087a18 <__aeabi_atexit>
#endif
	return serial1;
}
 80870f4:	4803      	ldr	r0, [pc, #12]	; (8087104 <_Z22__fetch_global_Serial1v+0x74>)
 80870f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80870f8:	20000578 	.word	0x20000578
 80870fc:	20000570 	.word	0x20000570
 8087100:	20000574 	.word	0x20000574
 8087104:	2000055c 	.word	0x2000055c
 8087108:	20000180 	.word	0x20000180
 808710c:	08086fc5 	.word	0x08086fc5

08087110 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 8087110:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8087112:	6883      	ldr	r3, [r0, #8]
 8087114:	4604      	mov	r4, r0
 8087116:	b90b      	cbnz	r3, 808711c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 8087118:	f000 fc9f 	bl	8087a5a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808711c:	68c3      	ldr	r3, [r0, #12]
 808711e:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 8087120:	68a3      	ldr	r3, [r4, #8]
 8087122:	b11b      	cbz	r3, 808712c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8087124:	2203      	movs	r2, #3
 8087126:	4621      	mov	r1, r4
 8087128:	4620      	mov	r0, r4
 808712a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 808712c:	4620      	mov	r0, r4
}
 808712e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8087132:	2110      	movs	r1, #16
 8087134:	f000 bc7e 	b.w	8087a34 <_ZdlPvj>

08087138 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 8087138:	4770      	bx	lr

0808713a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 808713a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808713c:	4606      	mov	r6, r0
 808713e:	4615      	mov	r5, r2
 8087140:	460c      	mov	r4, r1
 8087142:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8087144:	42bc      	cmp	r4, r7
 8087146:	d006      	beq.n	8087156 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 8087148:	6833      	ldr	r3, [r6, #0]
 808714a:	f814 1b01 	ldrb.w	r1, [r4], #1
 808714e:	689b      	ldr	r3, [r3, #8]
 8087150:	4630      	mov	r0, r6
 8087152:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8087154:	e7f6      	b.n	8087144 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 8087156:	4628      	mov	r0, r5
 8087158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808715a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 808715a:	2200      	movs	r2, #0
 808715c:	7c00      	ldrb	r0, [r0, #16]
 808715e:	f7fd b919 	b.w	8084394 <HAL_I2C_Write_Data>

08087162 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 8087162:	2100      	movs	r1, #0
 8087164:	7c00      	ldrb	r0, [r0, #16]
 8087166:	f7fd b91d 	b.w	80843a4 <HAL_I2C_Available_Data>

0808716a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 808716a:	2100      	movs	r1, #0
 808716c:	7c00      	ldrb	r0, [r0, #16]
 808716e:	f7fd b921 	b.w	80843b4 <HAL_I2C_Read_Data>

08087172 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 8087172:	2100      	movs	r1, #0
 8087174:	7c00      	ldrb	r0, [r0, #16]
 8087176:	f7fd b925 	b.w	80843c4 <HAL_I2C_Peek_Data>

0808717a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 808717a:	2100      	movs	r1, #0
 808717c:	7c00      	ldrb	r0, [r0, #16]
 808717e:	f7fd b929 	b.w	80843d4 <HAL_I2C_Flush_Data>

08087182 <_ZN7TwoWireD0Ev>:
 8087182:	b510      	push	{r4, lr}
 8087184:	4604      	mov	r4, r0
 8087186:	2114      	movs	r1, #20
 8087188:	f000 fc54 	bl	8087a34 <_ZdlPvj>
 808718c:	4620      	mov	r0, r4
 808718e:	bd10      	pop	{r4, pc}

08087190 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 8087190:	b510      	push	{r4, lr}
 8087192:	4604      	mov	r4, r0
 8087194:	2300      	movs	r3, #0
 8087196:	6063      	str	r3, [r4, #4]
 8087198:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808719c:	60a3      	str	r3, [r4, #8]
 808719e:	4b04      	ldr	r3, [pc, #16]	; (80871b0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 80871a0:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80871a2:	4608      	mov	r0, r1
 80871a4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 80871a6:	4611      	mov	r1, r2
 80871a8:	f7fd f924 	bl	80843f4 <HAL_I2C_Init>
}
 80871ac:	4620      	mov	r0, r4
 80871ae:	bd10      	pop	{r4, pc}
 80871b0:	0808b43c 	.word	0x0808b43c

080871b4 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80871b4:	2300      	movs	r3, #0
 80871b6:	461a      	mov	r2, r3
 80871b8:	4619      	mov	r1, r3
 80871ba:	7c00      	ldrb	r0, [r0, #16]
 80871bc:	f7fd b8d2 	b.w	8084364 <HAL_I2C_Begin>

080871c0 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 80871c0:	b570      	push	{r4, r5, r6, lr}
 80871c2:	460c      	mov	r4, r1
 80871c4:	4606      	mov	r6, r0
 80871c6:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
 80871c8:	2514      	movs	r5, #20
 80871ca:	462a      	mov	r2, r5
 80871cc:	2100      	movs	r1, #0
 80871ce:	a801      	add	r0, sp, #4
 80871d0:	f002 f830 	bl	8089234 <memset>
 80871d4:	7823      	ldrb	r3, [r4, #0]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
 80871d6:	2200      	movs	r2, #0
 80871d8:	f88d 3008 	strb.w	r3, [sp, #8]
 80871dc:	6863      	ldr	r3, [r4, #4]
 80871de:	a901      	add	r1, sp, #4
 80871e0:	9303      	str	r3, [sp, #12]
 80871e2:	68e3      	ldr	r3, [r4, #12]
 80871e4:	7c30      	ldrb	r0, [r6, #16]
 80871e6:	9304      	str	r3, [sp, #16]
 80871e8:	7a23      	ldrb	r3, [r4, #8]
 80871ea:	f8ad 5004 	strh.w	r5, [sp, #4]
 80871ee:	9305      	str	r3, [sp, #20]
 80871f0:	f7fd f918 	bl	8084424 <HAL_I2C_Request_Data_Ex>
}
 80871f4:	b006      	add	sp, #24
 80871f6:	bd70      	pop	{r4, r5, r6, pc}

080871f8 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
 80871f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
 80871fa:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 80871fc:	f88d 1000 	strb.w	r1, [sp]
 8087200:	f04f 0164 	mov.w	r1, #100	; 0x64
 8087204:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
 8087206:	bf18      	it	ne
 8087208:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 808720a:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
 808720c:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
 808720e:	f88d 3008 	strb.w	r3, [sp, #8]
 8087212:	f7ff ffd5 	bl	80871c0 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 8087216:	b005      	add	sp, #20
 8087218:	f85d fb04 	ldr.w	pc, [sp], #4

0808721c <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
 808721c:	2301      	movs	r3, #1
 808721e:	f7ff bfeb 	b.w	80871f8 <_ZN7TwoWire11requestFromEhjh>

08087222 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 8087222:	2200      	movs	r2, #0
 8087224:	7c00      	ldrb	r0, [r0, #16]
 8087226:	f7fd b8a5 	b.w	8084374 <HAL_I2C_Begin_Transmission>

0808722a <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 808722a:	b2c9      	uxtb	r1, r1
 808722c:	f7ff bff9 	b.w	8087222 <_ZN7TwoWire17beginTransmissionEh>

08087230 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 8087230:	2200      	movs	r2, #0
 8087232:	7c00      	ldrb	r0, [r0, #16]
 8087234:	f7fd b8a6 	b.w	8084384 <HAL_I2C_End_Transmission>

08087238 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 8087238:	2101      	movs	r1, #1
 808723a:	f7ff bff9 	b.w	8087230 <_ZN7TwoWire15endTransmissionEh>

0808723e <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 808723e:	2100      	movs	r1, #0
 8087240:	7c00      	ldrb	r0, [r0, #16]
 8087242:	f7fd b8cf 	b.w	80843e4 <HAL_I2C_Is_Enabled>

08087246 <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 8087246:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
 8087248:	2100      	movs	r1, #0
 808724a:	7c00      	ldrb	r0, [r0, #16]
 808724c:	f7fd f8da 	bl	8084404 <HAL_I2C_Acquire>
}
 8087250:	fab0 f080 	clz	r0, r0
 8087254:	0940      	lsrs	r0, r0, #5
 8087256:	bd08      	pop	{r3, pc}

08087258 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 8087258:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
 808725a:	2100      	movs	r1, #0
 808725c:	7c00      	ldrb	r0, [r0, #16]
 808725e:	f7fd f8d9 	bl	8084414 <HAL_I2C_Release>
}
 8087262:	fab0 f080 	clz	r0, r0
 8087266:	0940      	lsrs	r0, r0, #5
 8087268:	bd08      	pop	{r3, pc}

0808726a <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 808726a:	2300      	movs	r3, #0
 808726c:	461a      	mov	r2, r3
 808726e:	6840      	ldr	r0, [r0, #4]
 8087270:	f7fd b9b6 	b.w	80845e0 <network_connect>

08087274 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 8087274:	2200      	movs	r2, #0
 8087276:	2102      	movs	r1, #2
 8087278:	6840      	ldr	r0, [r0, #4]
 808727a:	f7fd b9c1 	b.w	8084600 <network_disconnect>

0808727e <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 808727e:	2200      	movs	r2, #0
 8087280:	4611      	mov	r1, r2
 8087282:	6840      	ldr	r0, [r0, #4]
 8087284:	f7fd b9b4 	b.w	80845f0 <network_connecting>

08087288 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 8087288:	2200      	movs	r2, #0
 808728a:	4611      	mov	r1, r2
 808728c:	6840      	ldr	r0, [r0, #4]
 808728e:	f7fd b9bf 	b.w	8084610 <network_ready>

08087292 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 8087292:	2300      	movs	r3, #0
 8087294:	461a      	mov	r2, r3
 8087296:	4619      	mov	r1, r3
 8087298:	6840      	ldr	r0, [r0, #4]
 808729a:	f7fd b9c1 	b.w	8084620 <network_on>

0808729e <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 808729e:	2300      	movs	r3, #0
 80872a0:	461a      	mov	r2, r3
 80872a2:	4619      	mov	r1, r3
 80872a4:	6840      	ldr	r0, [r0, #4]
 80872a6:	f7fd b9c3 	b.w	8084630 <network_off>

080872aa <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80872aa:	2200      	movs	r2, #0
 80872ac:	f081 0101 	eor.w	r1, r1, #1
 80872b0:	6840      	ldr	r0, [r0, #4]
 80872b2:	f7fd b9c5 	b.w	8084640 <network_listen>

080872b6 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80872b6:	2200      	movs	r2, #0
 80872b8:	6840      	ldr	r0, [r0, #4]
 80872ba:	f7fd b9d1 	b.w	8084660 <network_set_listen_timeout>

080872be <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80872be:	2200      	movs	r2, #0
 80872c0:	4611      	mov	r1, r2
 80872c2:	6840      	ldr	r0, [r0, #4]
 80872c4:	f7fd b9d4 	b.w	8084670 <network_get_listen_timeout>

080872c8 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80872c8:	2200      	movs	r2, #0
 80872ca:	4611      	mov	r1, r2
 80872cc:	6840      	ldr	r0, [r0, #4]
 80872ce:	f7fd b9bf 	b.w	8084650 <network_listening>
	...

080872d4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80872d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80872d6:	4617      	mov	r7, r2
 80872d8:	b087      	sub	sp, #28
 80872da:	4605      	mov	r5, r0
    IPAddress addr;
 80872dc:	a804      	add	r0, sp, #16
 80872de:	f7ff fcb1 	bl	8086c44 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 80872e2:	2600      	movs	r6, #0
 80872e4:	ac06      	add	r4, sp, #24
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80872e6:	4638      	mov	r0, r7
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 80872e8:	f844 6d0c 	str.w	r6, [r4, #-12]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80872ec:	f002 fd2c 	bl	8089d48 <strlen>
 80872f0:	4b0a      	ldr	r3, [pc, #40]	; (808731c <_ZN5spark12NetworkClass7resolveEPKc+0x48>)
 80872f2:	9600      	str	r6, [sp, #0]
 80872f4:	b281      	uxth	r1, r0
 80872f6:	685b      	ldr	r3, [r3, #4]
 80872f8:	4622      	mov	r2, r4
 80872fa:	4638      	mov	r0, r7
 80872fc:	f7fd f89a 	bl	8084434 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8087300:	b120      	cbz	r0, 808730c <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 8087302:	4631      	mov	r1, r6
 8087304:	4628      	mov	r0, r5
 8087306:	f7ff fcad 	bl	8086c64 <_ZN9IPAddressC1Em>
 808730a:	e003      	b.n	8087314 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 808730c:	4621      	mov	r1, r4
 808730e:	4628      	mov	r0, r5
 8087310:	f7ff fca0 	bl	8086c54 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 8087314:	4628      	mov	r0, r5
 8087316:	b007      	add	sp, #28
 8087318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808731a:	bf00      	nop
 808731c:	2000052c 	.word	0x2000052c

08087320 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 8087320:	4b02      	ldr	r3, [pc, #8]	; (808732c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 8087322:	4a03      	ldr	r2, [pc, #12]	; (8087330 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 8087324:	601a      	str	r2, [r3, #0]
 8087326:	2200      	movs	r2, #0
 8087328:	605a      	str	r2, [r3, #4]
 808732a:	4770      	bx	lr
 808732c:	2000057c 	.word	0x2000057c
 8087330:	0808b464 	.word	0x0808b464

08087334 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:
#include <cstdarg>

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
 8087334:	f100 0210 	add.w	r2, r0, #16
    size_t n = 1;
 8087338:	2301      	movs	r3, #1
    do {
        if (t->type == JSMN_OBJECT) {
 808733a:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 808733e:	4610      	mov	r0, r2
 8087340:	2901      	cmp	r1, #1
 8087342:	d104      	bne.n	808734e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x1a>
            n += t->size * 2; // Number of name and value tokens
 8087344:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8087348:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 808734c:	e004      	b.n	8087358 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x24>
        } else if (t->type == JSMN_ARRAY) {
 808734e:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 8087350:	bf04      	itt	eq
 8087352:	f852 1c04 	ldreq.w	r1, [r2, #-4]
 8087356:	185b      	addeq	r3, r3, r1
namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
    do {
 8087358:	3b01      	subs	r3, #1
 808735a:	f102 0210 	add.w	r2, r2, #16
 808735e:	d1ec      	bne.n	808733a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
        }
        ++t;
        --n;
    } while (n);
    return t;
}
 8087360:	4770      	bx	lr

08087362 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 8087362:	b40e      	push	{r1, r2, r3}
 8087364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8087368:	b087      	sub	sp, #28
 808736a:	af00      	add	r7, sp, #0
 808736c:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8087370:	f854 6b04 	ldr.w	r6, [r4], #4
 8087374:	4605      	mov	r5, r0
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 8087376:	4623      	mov	r3, r4
 8087378:	4632      	mov	r2, r6
 808737a:	2110      	movs	r1, #16
 808737c:	f107 0008 	add.w	r0, r7, #8
}

void spark::JSONWriter::printf(const char *fmt, ...) {
    char buf[16];
    va_list args;
    va_start(args, fmt);
 8087380:	607c      	str	r4, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 8087382:	f7fd fa0d 	bl	80847a0 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 8087386:	280f      	cmp	r0, #15
 8087388:	d916      	bls.n	80873b8 <_ZN5spark10JSONWriter6printfEPKcz+0x56>
        char buf[n + 1]; // Use larger buffer
 808738a:	f100 0308 	add.w	r3, r0, #8
 808738e:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 8087392:	46e8      	mov	r8, sp
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
 8087394:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 8087398:	4632      	mov	r2, r6
 808739a:	1c41      	adds	r1, r0, #1
 808739c:	4623      	mov	r3, r4
 808739e:	4668      	mov	r0, sp
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
        va_start(args, fmt);
 80873a0:	607c      	str	r4, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 80873a2:	f7fd f9fd 	bl	80847a0 <vsnprintf>
        va_end(args);
        if (n > 0) {
 80873a6:	1e02      	subs	r2, r0, #0
 80873a8:	dd04      	ble.n	80873b4 <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
 80873aa:	682b      	ldr	r3, [r5, #0]
 80873ac:	4669      	mov	r1, sp
 80873ae:	689b      	ldr	r3, [r3, #8]
 80873b0:	4628      	mov	r0, r5
 80873b2:	4798      	blx	r3
 80873b4:	46c5      	mov	sp, r8
 80873b6:	e007      	b.n	80873c8 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        }
    } else if (n > 0) {
 80873b8:	b130      	cbz	r0, 80873c8 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        write(buf, n);
 80873ba:	682b      	ldr	r3, [r5, #0]
 80873bc:	4602      	mov	r2, r0
 80873be:	689b      	ldr	r3, [r3, #8]
 80873c0:	f107 0108 	add.w	r1, r7, #8
 80873c4:	4628      	mov	r0, r5
 80873c6:	4798      	blx	r3
    }
}
 80873c8:	371c      	adds	r7, #28
 80873ca:	46bd      	mov	sp, r7
 80873cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80873d0:	b003      	add	sp, #12
 80873d2:	4770      	bx	lr

080873d4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.3.constprop.12>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80873d4:	b510      	push	{r4, lr}
 80873d6:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 80873d8:	6803      	ldr	r3, [r0, #0]
 80873da:	689b      	ldr	r3, [r3, #8]
 80873dc:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80873de:	68a3      	ldr	r3, [r4, #8]
 80873e0:	3b01      	subs	r3, #1
 80873e2:	60a3      	str	r3, [r4, #8]
 80873e4:	b92b      	cbnz	r3, 80873f2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.3.constprop.12+0x1e>
            _M_destroy();
 80873e6:	6823      	ldr	r3, [r4, #0]
 80873e8:	4620      	mov	r0, r4
        }
    }
 80873ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 80873ee:	68db      	ldr	r3, [r3, #12]
 80873f0:	4718      	bx	r3
 80873f2:	bd10      	pop	{r4, pc}

080873f4 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 80873f4:	b513      	push	{r0, r1, r4, lr}
    write(&c, 1);
 80873f6:	6802      	ldr	r2, [r0, #0]

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 80873f8:	ab02      	add	r3, sp, #8
 80873fa:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
 80873fe:	6894      	ldr	r4, [r2, #8]
 8087400:	4619      	mov	r1, r3
 8087402:	2201      	movs	r2, #1
 8087404:	47a0      	blx	r4
}
 8087406:	b002      	add	sp, #8
 8087408:	bd10      	pop	{r4, pc}

0808740a <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
 808740a:	6883      	ldr	r3, [r0, #8]
 808740c:	b1fb      	cbz	r3, 808744e <_ZNK5spark9JSONValue4typeEv+0x44>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
 808740e:	781a      	ldrb	r2, [r3, #0]
 8087410:	2a03      	cmp	r2, #3
 8087412:	d81a      	bhi.n	808744a <_ZNK5spark9JSONValue4typeEv+0x40>
 8087414:	e8df f002 	tbb	[pc, r2]
 8087418:	1d021704 	.word	0x1d021704
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
 808741c:	2005      	movs	r0, #5
 808741e:	4770      	bx	lr
    if (!t_) {
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
 8087420:	6802      	ldr	r2, [r0, #0]
 8087422:	685b      	ldr	r3, [r3, #4]
 8087424:	6852      	ldr	r2, [r2, #4]
 8087426:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 8087428:	282d      	cmp	r0, #45	; 0x2d
 808742a:	d014      	beq.n	8087456 <_ZNK5spark9JSONValue4typeEv+0x4c>
 808742c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8087430:	2b09      	cmp	r3, #9
 8087432:	d910      	bls.n	8087456 <_ZNK5spark9JSONValue4typeEv+0x4c>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 8087434:	2874      	cmp	r0, #116	; 0x74
 8087436:	d010      	beq.n	808745a <_ZNK5spark9JSONValue4typeEv+0x50>
 8087438:	2866      	cmp	r0, #102	; 0x66
 808743a:	d00e      	beq.n	808745a <_ZNK5spark9JSONValue4typeEv+0x50>
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
 808743c:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 8087440:	4258      	negs	r0, r3
 8087442:	4158      	adcs	r0, r3
 8087444:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
 8087446:	2006      	movs	r0, #6
 8087448:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
 808744a:	2000      	movs	r0, #0
 808744c:	4770      	bx	lr
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
 808744e:	4618      	mov	r0, r3
 8087450:	4770      	bx	lr
            return JSON_TYPE_NULL;
        }
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
 8087452:	2004      	movs	r0, #4
 8087454:	4770      	bx	lr
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
        if (c == '-' || (c >= '0' && c <= '9')) {
            return JSON_TYPE_NUMBER;
 8087456:	2003      	movs	r0, #3
 8087458:	4770      	bx	lr
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
            return JSON_TYPE_BOOL;
 808745a:	2002      	movs	r0, #2
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
    default:
        return JSON_TYPE_INVALID;
    }
}
 808745c:	4770      	bx	lr

0808745e <_ZNK5spark9JSONValue5toIntEv>:
    default:
        return false;
    }
}

int spark::JSONValue::toInt() const {
 808745e:	b510      	push	{r4, lr}
 8087460:	4604      	mov	r4, r0
    switch (type()) {
 8087462:	f7ff ffd2 	bl	808740a <_ZNK5spark9JSONValue4typeEv>
 8087466:	2802      	cmp	r0, #2
 8087468:	d00d      	beq.n	8087486 <_ZNK5spark9JSONValue5toIntEv+0x28>
 808746a:	d316      	bcc.n	808749a <_ZNK5spark9JSONValue5toIntEv+0x3c>
 808746c:	2804      	cmp	r0, #4
 808746e:	d814      	bhi.n	808749a <_ZNK5spark9JSONValue5toIntEv+0x3c>
    }
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
 8087470:	6822      	ldr	r2, [r4, #0]
 8087472:	68a3      	ldr	r3, [r4, #8]
        return strtol(s, nullptr, 10);
 8087474:	6850      	ldr	r0, [r2, #4]
 8087476:	685b      	ldr	r3, [r3, #4]
 8087478:	220a      	movs	r2, #10
 808747a:	2100      	movs	r1, #0
 808747c:	4418      	add	r0, r3
    }
    default:
        return 0;
    }
}
 808747e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
 8087482:	f002 bd89 	b.w	8089f98 <strtol>
}

int spark::JSONValue::toInt() const {
    switch (type()) {
    case JSON_TYPE_BOOL: {
        const char* const s = d_->json + t_->start;
 8087486:	6822      	ldr	r2, [r4, #0]
 8087488:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 808748a:	6852      	ldr	r2, [r2, #4]
 808748c:	685b      	ldr	r3, [r3, #4]
 808748e:	5cd0      	ldrb	r0, [r2, r3]
 8087490:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 8087494:	4258      	negs	r0, r3
 8087496:	4158      	adcs	r0, r3
 8087498:	bd10      	pop	{r4, pc}
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
    }
    default:
        return 0;
 808749a:	2000      	movs	r0, #0
    }
}
 808749c:	bd10      	pop	{r4, pc}

0808749e <_ZN5spark18JSONObjectIterator4nextEv>:
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
 808749e:	b510      	push	{r4, lr}
    if (!n_) {
 80874a0:	6943      	ldr	r3, [r0, #20]
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
 80874a2:	4604      	mov	r4, r0
    if (!n_) {
 80874a4:	b15b      	cbz	r3, 80874be <_ZN5spark18JSONObjectIterator4nextEv+0x20>
        return false;
    }
    k_ = t_; // Name
 80874a6:	6880      	ldr	r0, [r0, #8]
    ++t_;
    v_ = t_; // Value
    --n_;
 80874a8:	3b01      	subs	r3, #1

bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
    }
    k_ = t_; // Name
 80874aa:	60e0      	str	r0, [r4, #12]
    ++t_;
 80874ac:	3010      	adds	r0, #16
 80874ae:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 80874b0:	6120      	str	r0, [r4, #16]
    --n_;
 80874b2:	6163      	str	r3, [r4, #20]
    if (n_) {
 80874b4:	b12b      	cbz	r3, 80874c2 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        t_ = skipToken(t_);
 80874b6:	f7ff ff3d 	bl	8087334 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 80874ba:	60a0      	str	r0, [r4, #8]
 80874bc:	e001      	b.n	80874c2 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
    }
}

bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
 80874be:	4618      	mov	r0, r3
 80874c0:	bd10      	pop	{r4, pc}
    v_ = t_; // Value
    --n_;
    if (n_) {
        t_ = skipToken(t_);
    }
    return true;
 80874c2:	2001      	movs	r0, #1
}
 80874c4:	bd10      	pop	{r4, pc}

080874c6 <_ZN5spark10JSONWriter9endObjectEv>:
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
 80874c6:	b510      	push	{r4, lr}
 80874c8:	4604      	mov	r4, r0
    write('}');
 80874ca:	217d      	movs	r1, #125	; 0x7d
 80874cc:	f7ff ff92 	bl	80873f4 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 80874d0:	2301      	movs	r3, #1
 80874d2:	7123      	strb	r3, [r4, #4]
    return *this;
}
 80874d4:	4620      	mov	r0, r4
 80874d6:	bd10      	pop	{r4, pc}

080874d8 <_ZN5spark10JSONWriter14writeSeparatorEv>:
    } else if (n > 0) {
        write(buf, n);
    }
}

void spark::JSONWriter::writeSeparator() {
 80874d8:	b508      	push	{r3, lr}
    switch (state_) {
 80874da:	7903      	ldrb	r3, [r0, #4]
 80874dc:	2b01      	cmp	r3, #1
 80874de:	d002      	beq.n	80874e6 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 80874e0:	2b02      	cmp	r3, #2
 80874e2:	d002      	beq.n	80874ea <_ZN5spark10JSONWriter14writeSeparatorEv+0x12>
 80874e4:	bd08      	pop	{r3, pc}
    case NEXT:
        write(',');
 80874e6:	212c      	movs	r1, #44	; 0x2c
 80874e8:	e000      	b.n	80874ec <_ZN5spark10JSONWriter14writeSeparatorEv+0x14>
        break;
    case VALUE:
        write(':');
 80874ea:	213a      	movs	r1, #58	; 0x3a
 80874ec:	f7ff ff82 	bl	80873f4 <_ZN5spark10JSONWriter5writeEc>
 80874f0:	bd08      	pop	{r3, pc}

080874f2 <_ZN5spark10JSONWriter11beginObjectEv>:
    write(']');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::beginObject() {
 80874f2:	b510      	push	{r4, lr}
 80874f4:	4604      	mov	r4, r0
    writeSeparator();
 80874f6:	f7ff ffef 	bl	80874d8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 80874fa:	4620      	mov	r0, r4
 80874fc:	217b      	movs	r1, #123	; 0x7b
 80874fe:	f7ff ff79 	bl	80873f4 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 8087502:	2300      	movs	r3, #0
 8087504:	7123      	strb	r3, [r4, #4]
    return *this;
}
 8087506:	4620      	mov	r0, r4
 8087508:	bd10      	pop	{r4, pc}
	...

0808750c <_ZN5spark10JSONWriter5valueEi>:
    }
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(int val) {
 808750c:	b538      	push	{r3, r4, r5, lr}
 808750e:	4604      	mov	r4, r0
 8087510:	460d      	mov	r5, r1
    writeSeparator();
 8087512:	f7ff ffe1 	bl	80874d8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 8087516:	6823      	ldr	r3, [r4, #0]
 8087518:	4620      	mov	r0, r4
 808751a:	68db      	ldr	r3, [r3, #12]
 808751c:	462a      	mov	r2, r5
 808751e:	4903      	ldr	r1, [pc, #12]	; (808752c <_ZN5spark10JSONWriter5valueEi+0x20>)
 8087520:	4798      	blx	r3
    state_ = NEXT;
 8087522:	2301      	movs	r3, #1
 8087524:	7123      	strb	r3, [r4, #4]
    return *this;
}
 8087526:	4620      	mov	r0, r4
 8087528:	bd38      	pop	{r3, r4, r5, pc}
 808752a:	bf00      	nop
 808752c:	0808b70b 	.word	0x0808b70b

08087530 <_ZN5spark10JSONWriter5valueEj>:

spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 8087530:	b538      	push	{r3, r4, r5, lr}
 8087532:	4604      	mov	r4, r0
 8087534:	460d      	mov	r5, r1
    writeSeparator();
 8087536:	f7ff ffcf 	bl	80874d8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 808753a:	6823      	ldr	r3, [r4, #0]
 808753c:	4620      	mov	r0, r4
 808753e:	68db      	ldr	r3, [r3, #12]
 8087540:	462a      	mov	r2, r5
 8087542:	4903      	ldr	r1, [pc, #12]	; (8087550 <_ZN5spark10JSONWriter5valueEj+0x20>)
 8087544:	4798      	blx	r3
    state_ = NEXT;
 8087546:	2301      	movs	r3, #1
 8087548:	7123      	strb	r3, [r4, #4]
    return *this;
}
 808754a:	4620      	mov	r0, r4
 808754c:	bd38      	pop	{r3, r4, r5, pc}
 808754e:	bf00      	nop
 8087550:	0808b49f 	.word	0x0808b49f

08087554 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 8087554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8087556:	460d      	mov	r5, r1
 8087558:	4617      	mov	r7, r2
    write('"');
 808755a:	2122      	movs	r1, #34	; 0x22
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 808755c:	4604      	mov	r4, r0
    write('"');
 808755e:	f7ff ff49 	bl	80873f4 <_ZN5spark10JSONWriter5writeEc>
 8087562:	462a      	mov	r2, r5
    const char* const end = str + size;
 8087564:	4629      	mov	r1, r5
 8087566:	442f      	add	r7, r5
    const char *s = str;
    while (s != end) {
 8087568:	42ba      	cmp	r2, r7
 808756a:	d038      	beq.n	80875de <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8a>
        const char c = *s;
 808756c:	4616      	mov	r6, r2
 808756e:	f816 5b01 	ldrb.w	r5, [r6], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
 8087572:	2d22      	cmp	r5, #34	; 0x22
 8087574:	d003      	beq.n	808757e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
 8087576:	2d5c      	cmp	r5, #92	; 0x5c
 8087578:	d001      	beq.n	808757e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
 808757a:	2d1f      	cmp	r5, #31
 808757c:	d82d      	bhi.n	80875da <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x86>
            write(str, s - str); // Write preceeding characters
 808757e:	6823      	ldr	r3, [r4, #0]
 8087580:	1a52      	subs	r2, r2, r1
 8087582:	689b      	ldr	r3, [r3, #8]
 8087584:	4620      	mov	r0, r4
 8087586:	4798      	blx	r3
            write('\\');
 8087588:	215c      	movs	r1, #92	; 0x5c
 808758a:	4620      	mov	r0, r4
 808758c:	f7ff ff32 	bl	80873f4 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 8087590:	2d0c      	cmp	r5, #12
 8087592:	d019      	beq.n	80875c8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
 8087594:	d807      	bhi.n	80875a6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x52>
 8087596:	2d09      	cmp	r5, #9
 8087598:	d00f      	beq.n	80875ba <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
 808759a:	2d0a      	cmp	r5, #10
 808759c:	d012      	beq.n	80875c4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x70>
 808759e:	2d08      	cmp	r5, #8
 80875a0:	d114      	bne.n	80875cc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
 80875a2:	2162      	movs	r1, #98	; 0x62
 80875a4:	e00a      	b.n	80875bc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
    while (s != end) {
        const char c = *s;
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
 80875a6:	2d22      	cmp	r5, #34	; 0x22
 80875a8:	d005      	beq.n	80875b6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
 80875aa:	2d5c      	cmp	r5, #92	; 0x5c
 80875ac:	d003      	beq.n	80875b6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
 80875ae:	2d0d      	cmp	r5, #13
 80875b0:	d10c      	bne.n	80875cc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
                break;
            case 0x0c: // Form feed
                write('f');
                break;
            case 0x0d: // Carriage return
                write('r');
 80875b2:	2172      	movs	r1, #114	; 0x72
 80875b4:	e002      	b.n	80875bc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
            case '"':
            case '\\':
                write(c);
 80875b6:	4629      	mov	r1, r5
 80875b8:	e000      	b.n	80875bc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x08: // Backspace
                write('b');
                break;
            case 0x09: // Tab
                write('t');
 80875ba:	2174      	movs	r1, #116	; 0x74
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
 80875bc:	4620      	mov	r0, r4
 80875be:	f7ff ff19 	bl	80873f4 <_ZN5spark10JSONWriter5writeEc>
                break;
 80875c2:	e009      	b.n	80875d8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
            case 0x09: // Tab
                write('t');
                break;
            case 0x0a: // Line feed
                write('n');
 80875c4:	216e      	movs	r1, #110	; 0x6e
 80875c6:	e7f9      	b.n	80875bc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x0c: // Form feed
                write('f');
 80875c8:	2166      	movs	r1, #102	; 0x66
 80875ca:	e7f7      	b.n	80875bc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 80875cc:	6823      	ldr	r3, [r4, #0]
 80875ce:	462a      	mov	r2, r5
 80875d0:	68db      	ldr	r3, [r3, #12]
 80875d2:	4909      	ldr	r1, [pc, #36]	; (80875f8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xa4>)
 80875d4:	4620      	mov	r0, r4
 80875d6:	4798      	blx	r3
                break;
            }
            str = s + 1;
 80875d8:	4631      	mov	r1, r6

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
    write('"');
    const char* const end = str + size;
    const char *s = str;
    while (s != end) {
 80875da:	4632      	mov	r2, r6
 80875dc:	e7c4      	b.n	8087568 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x14>
            }
            str = s + 1;
        }
        ++s;
    }
    if (s != str) {
 80875de:	4291      	cmp	r1, r2
 80875e0:	d004      	beq.n	80875ec <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x98>
        write(str, s - str); // Write remaining characters
 80875e2:	6823      	ldr	r3, [r4, #0]
 80875e4:	1a52      	subs	r2, r2, r1
 80875e6:	689d      	ldr	r5, [r3, #8]
 80875e8:	4620      	mov	r0, r4
 80875ea:	47a8      	blx	r5
    }
    write('"');
 80875ec:	2122      	movs	r1, #34	; 0x22
 80875ee:	4620      	mov	r0, r4
 80875f0:	f7ff ff00 	bl	80873f4 <_ZN5spark10JSONWriter5writeEc>
 80875f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80875f6:	bf00      	nop
 80875f8:	0808b4b0 	.word	0x0808b4b0

080875fc <_ZN5spark10JSONWriter4nameEPKcj>:
    write('}');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 80875fc:	b570      	push	{r4, r5, r6, lr}
 80875fe:	4604      	mov	r4, r0
 8087600:	460d      	mov	r5, r1
 8087602:	4616      	mov	r6, r2
    writeSeparator();
 8087604:	f7ff ff68 	bl	80874d8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 8087608:	4620      	mov	r0, r4
 808760a:	4632      	mov	r2, r6
 808760c:	4629      	mov	r1, r5
 808760e:	f7ff ffa1 	bl	8087554 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 8087612:	2302      	movs	r3, #2
 8087614:	7123      	strb	r3, [r4, #4]
    return *this;
}
 8087616:	4620      	mov	r0, r4
 8087618:	bd70      	pop	{r4, r5, r6, pc}

0808761a <_ZN5spark10JSONWriter5valueEPKcj>:
    printf("%g", val);
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 808761a:	b570      	push	{r4, r5, r6, lr}
 808761c:	4604      	mov	r4, r0
 808761e:	460d      	mov	r5, r1
 8087620:	4616      	mov	r6, r2
    writeSeparator();
 8087622:	f7ff ff59 	bl	80874d8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 8087626:	4620      	mov	r0, r4
 8087628:	4632      	mov	r2, r6
 808762a:	4629      	mov	r1, r5
 808762c:	f7ff ff92 	bl	8087554 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 8087630:	2301      	movs	r3, #1
 8087632:	7123      	strb	r3, [r4, #4]
    return *this;
}
 8087634:	4620      	mov	r0, r4
 8087636:	bd70      	pop	{r4, r5, r6, pc}

08087638 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
 8087638:	b538      	push	{r3, r4, r5, lr}
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 808763a:	680c      	ldr	r4, [r1, #0]
	if (__tmp != _M_pi)
 808763c:	6803      	ldr	r3, [r0, #0]
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
 808763e:	4605      	mov	r5, r0
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
 8087640:	429c      	cmp	r4, r3
 8087642:	d00c      	beq.n	808765e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	  {
	    if (__tmp != 0)
 8087644:	b114      	cbz	r4, 808764c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x14>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 8087646:	6863      	ldr	r3, [r4, #4]
 8087648:	3301      	adds	r3, #1
 808764a:	6063      	str	r3, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
 808764c:	6828      	ldr	r0, [r5, #0]
 808764e:	b128      	cbz	r0, 808765c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 8087650:	6843      	ldr	r3, [r0, #4]
 8087652:	3b01      	subs	r3, #1
 8087654:	6043      	str	r3, [r0, #4]
 8087656:	b90b      	cbnz	r3, 808765c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>
 8087658:	f7ff febc 	bl	80873d4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.3.constprop.12>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
 808765c:	602c      	str	r4, [r5, #0]
	  }
	return *this;
      }
 808765e:	4628      	mov	r0, r5
 8087660:	bd38      	pop	{r3, r4, r5, pc}
	...

08087664 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
    t->end = str - json; // Update string length
    return true;
}

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 8087664:	b510      	push	{r4, lr}
 8087666:	4604      	mov	r4, r0

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
 8087668:	2300      	movs	r3, #0
 808766a:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 808766c:	6043      	str	r3, [r0, #4]
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
 808766e:	4810      	ldr	r0, [pc, #64]	; (80876b0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x4c>)
 8087670:	60e3      	str	r3, [r4, #12]
 8087672:	60a0      	str	r0, [r4, #8]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 8087674:	b1d1      	cbz	r1, 80876ac <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
 8087676:	780b      	ldrb	r3, [r1, #0]
 8087678:	2b03      	cmp	r3, #3
 808767a:	d006      	beq.n	808768a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
 808767c:	b9b3      	cbnz	r3, 80876ac <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 808767e:	6813      	ldr	r3, [r2, #0]
 8087680:	6858      	ldr	r0, [r3, #4]
 8087682:	684b      	ldr	r3, [r1, #4]
 8087684:	5cc3      	ldrb	r3, [r0, r3]
 8087686:	2b6e      	cmp	r3, #110	; 0x6e
 8087688:	d008      	beq.n	808769c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x38>
            s_ = d->json + t->start;
 808768a:	6813      	ldr	r3, [r2, #0]
 808768c:	6858      	ldr	r0, [r3, #4]
 808768e:	684b      	ldr	r3, [r1, #4]
 8087690:	4403      	add	r3, r0
 8087692:	60a3      	str	r3, [r4, #8]
            n_ = t->end - t->start;
 8087694:	688b      	ldr	r3, [r1, #8]
 8087696:	6849      	ldr	r1, [r1, #4]
 8087698:	1a5b      	subs	r3, r3, r1
 808769a:	60e3      	str	r3, [r4, #12]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
 808769c:	4611      	mov	r1, r2
 808769e:	4620      	mov	r0, r4
 80876a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80876a4:	f840 3b04 	str.w	r3, [r0], #4
 80876a8:	f7ff ffc6 	bl	8087638 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        }
        d_ = d;
    }
}
 80876ac:	4620      	mov	r0, r4
 80876ae:	bd10      	pop	{r4, pc}
 80876b0:	0808acc4 	.word	0x0808acc4

080876b4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
 80876b4:	2300      	movs	r3, #0
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 80876b6:	b510      	push	{r4, lr}
 80876b8:	4604      	mov	r4, r0
 80876ba:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 80876bc:	6043      	str	r3, [r0, #4]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
 80876be:	6083      	str	r3, [r0, #8]
 80876c0:	60c3      	str	r3, [r0, #12]
 80876c2:	6103      	str	r3, [r0, #16]
 80876c4:	6143      	str	r3, [r0, #20]
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
 80876c6:	b171      	cbz	r1, 80876e6 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
 80876c8:	780b      	ldrb	r3, [r1, #0]
 80876ca:	2b01      	cmp	r3, #1
 80876cc:	d10b      	bne.n	80876e6 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
        t_ = t + 1; // First property's name
 80876ce:	f101 0310 	add.w	r3, r1, #16
 80876d2:	6083      	str	r3, [r0, #8]
        n_ = t->size; // Number of properties
 80876d4:	68cb      	ldr	r3, [r1, #12]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
 80876d6:	4611      	mov	r1, r2
 80876d8:	6143      	str	r3, [r0, #20]
 80876da:	f851 3b04 	ldr.w	r3, [r1], #4
 80876de:	f840 3b04 	str.w	r3, [r0], #4
 80876e2:	f7ff ffa9 	bl	8087638 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        d_ = d;
    }
}
 80876e6:	4620      	mov	r0, r4
 80876e8:	bd10      	pop	{r4, pc}

080876ea <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
 80876ea:	2300      	movs	r3, #0
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 80876ec:	b510      	push	{r4, lr}
 80876ee:	4604      	mov	r4, r0
 80876f0:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 80876f2:	6043      	str	r3, [r0, #4]
        JSONValue() {
    if (t) {
        t_ = t;
 80876f4:	6081      	str	r1, [r0, #8]
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
        JSONValue() {
    if (t) {
 80876f6:	b131      	cbz	r1, 8087706 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x1c>
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
 80876f8:	4611      	mov	r1, r2
 80876fa:	f851 3b04 	ldr.w	r3, [r1], #4
 80876fe:	f840 3b04 	str.w	r3, [r0], #4
 8087702:	f7ff ff99 	bl	8087638 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        t_ = t;
        d_ = d;
    }
}
 8087706:	4620      	mov	r0, r4
 8087708:	bd10      	pop	{r4, pc}
	...

0808770c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 808770c:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 808770e:	4e1a      	ldr	r6, [pc, #104]	; (8087778 <pinAvailable+0x6c>)
 8087710:	4604      	mov	r4, r0
 8087712:	6831      	ldr	r1, [r6, #0]
 8087714:	f011 0501 	ands.w	r5, r1, #1
 8087718:	d10f      	bne.n	808773a <pinAvailable+0x2e>
 808771a:	4630      	mov	r0, r6
 808771c:	f7f8 fcce 	bl	80800bc <__cxa_guard_acquire>
 8087720:	b158      	cbz	r0, 808773a <pinAvailable+0x2e>
 8087722:	4629      	mov	r1, r5
 8087724:	4815      	ldr	r0, [pc, #84]	; (808777c <pinAvailable+0x70>)
 8087726:	f7fd f8ba 	bl	808489e <_ZN8SPIClassC1E17HAL_SPI_Interface>
 808772a:	4630      	mov	r0, r6
 808772c:	f7f8 fccb 	bl	80800c6 <__cxa_guard_release>
 8087730:	4a13      	ldr	r2, [pc, #76]	; (8087780 <pinAvailable+0x74>)
 8087732:	4914      	ldr	r1, [pc, #80]	; (8087784 <pinAvailable+0x78>)
 8087734:	4811      	ldr	r0, [pc, #68]	; (808777c <pinAvailable+0x70>)
 8087736:	f000 f96f 	bl	8087a18 <__aeabi_atexit>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
 808773a:	4810      	ldr	r0, [pc, #64]	; (808777c <pinAvailable+0x70>)
 808773c:	f7fd f93b 	bl	80849b6 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 8087740:	b128      	cbz	r0, 808774e <pinAvailable+0x42>
 8087742:	f1a4 030d 	sub.w	r3, r4, #13
 8087746:	2b02      	cmp	r3, #2
 8087748:	d801      	bhi.n	808774e <pinAvailable+0x42>
  {
    return 0; // 'pin' is used
 808774a:	2000      	movs	r0, #0
 808774c:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 808774e:	f000 f917 	bl	8087980 <_Z19__fetch_global_Wirev>
 8087752:	f7ff fd74 	bl	808723e <_ZN7TwoWire9isEnabledEv>
 8087756:	b108      	cbz	r0, 808775c <pinAvailable+0x50>
 8087758:	2c01      	cmp	r4, #1
 808775a:	d9f6      	bls.n	808774a <pinAvailable+0x3e>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 808775c:	f7ff fc98 	bl	8087090 <_Z22__fetch_global_Serial1v>
 8087760:	f7ff fc92 	bl	8087088 <_ZN11USARTSerial9isEnabledEv>
 8087764:	b118      	cbz	r0, 808776e <pinAvailable+0x62>
 8087766:	f1a4 0312 	sub.w	r3, r4, #18
 808776a:	2b01      	cmp	r3, #1
 808776c:	d9ed      	bls.n	808774a <pinAvailable+0x3e>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 808776e:	2c2e      	cmp	r4, #46	; 0x2e
 8087770:	bf8c      	ite	hi
 8087772:	2000      	movhi	r0, #0
 8087774:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 8087776:	bd70      	pop	{r4, r5, r6, pc}
 8087778:	20000378 	.word	0x20000378
 808777c:	2000037c 	.word	0x2000037c
 8087780:	20000180 	.word	0x20000180
 8087784:	08082e01 	.word	0x08082e01

08087788 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8087788:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 808778a:	b538      	push	{r3, r4, r5, lr}
 808778c:	4604      	mov	r4, r0
 808778e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8087790:	d80a      	bhi.n	80877a8 <pinMode+0x20>
 8087792:	29ff      	cmp	r1, #255	; 0xff
 8087794:	d008      	beq.n	80877a8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 8087796:	f7ff ffb9 	bl	808770c <pinAvailable>
 808779a:	b128      	cbz	r0, 80877a8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 808779c:	4629      	mov	r1, r5
 808779e:	4620      	mov	r0, r4
}
 80877a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80877a4:	f7fc bc2e 	b.w	8084004 <HAL_Pin_Mode>
 80877a8:	bd38      	pop	{r3, r4, r5, pc}

080877aa <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80877aa:	b538      	push	{r3, r4, r5, lr}
 80877ac:	4604      	mov	r4, r0
 80877ae:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80877b0:	f7fc fc30 	bl	8084014 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80877b4:	28ff      	cmp	r0, #255	; 0xff
 80877b6:	d010      	beq.n	80877da <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80877b8:	2806      	cmp	r0, #6
 80877ba:	d804      	bhi.n	80877c6 <digitalWrite+0x1c>
 80877bc:	234d      	movs	r3, #77	; 0x4d
 80877be:	fa23 f000 	lsr.w	r0, r3, r0
 80877c2:	07c3      	lsls	r3, r0, #31
 80877c4:	d409      	bmi.n	80877da <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80877c6:	4620      	mov	r0, r4
 80877c8:	f7ff ffa0 	bl	808770c <pinAvailable>
 80877cc:	b128      	cbz	r0, 80877da <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80877ce:	4629      	mov	r1, r5
 80877d0:	4620      	mov	r0, r4
}
 80877d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80877d6:	f7fc bc25 	b.w	8084024 <HAL_GPIO_Write>
 80877da:	bd38      	pop	{r3, r4, r5, pc}

080877dc <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80877dc:	b510      	push	{r4, lr}
 80877de:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80877e0:	f7fc fc18 	bl	8084014 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80877e4:	3804      	subs	r0, #4
 80877e6:	b2c0      	uxtb	r0, r0
 80877e8:	2801      	cmp	r0, #1
 80877ea:	d908      	bls.n	80877fe <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80877ec:	4620      	mov	r0, r4
 80877ee:	f7ff ff8d 	bl	808770c <pinAvailable>
 80877f2:	b120      	cbz	r0, 80877fe <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80877f4:	4620      	mov	r0, r4
}
 80877f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80877fa:	f7fc bc1b 	b.w	8084034 <HAL_GPIO_Read>
}
 80877fe:	2000      	movs	r0, #0
 8087800:	bd10      	pop	{r4, pc}

08087802 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 8087802:	b510      	push	{r4, lr}
 8087804:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 8087806:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 8087808:	bf9c      	itt	ls
 808780a:	340a      	addls	r4, #10
 808780c:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 808780e:	4620      	mov	r0, r4
 8087810:	f7ff ff7c 	bl	808770c <pinAvailable>
 8087814:	b150      	cbz	r0, 808782c <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 8087816:	2103      	movs	r1, #3
 8087818:	4620      	mov	r0, r4
 808781a:	f7fc fbeb 	bl	8083ff4 <HAL_Validate_Pin_Function>
 808781e:	2803      	cmp	r0, #3
 8087820:	d104      	bne.n	808782c <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 8087822:	4620      	mov	r0, r4
}
 8087824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 8087828:	f7fc bc34 	b.w	8084094 <HAL_ADC_Read>
}
 808782c:	2000      	movs	r0, #0
 808782e:	bd10      	pop	{r4, pc}

08087830 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
 8087830:	b538      	push	{r3, r4, r5, lr}
 8087832:	4604      	mov	r4, r0
 8087834:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
 8087836:	f7ff ff69 	bl	808770c <pinAvailable>
 808783a:	b1f0      	cbz	r0, 808787a <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
 808783c:	2104      	movs	r1, #4
 808783e:	4620      	mov	r0, r4
 8087840:	f7fc fbd8 	bl	8083ff4 <HAL_Validate_Pin_Function>
 8087844:	2804      	cmp	r0, #4
 8087846:	d105      	bne.n	8087854 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
 8087848:	b2a9      	uxth	r1, r5
 808784a:	4620      	mov	r0, r4
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
    }
}
 808784c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
    {
        HAL_DAC_Write(pin, value);
 8087850:	f7fc bc18 	b.w	8084084 <HAL_DAC_Write>
    }
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
 8087854:	2102      	movs	r1, #2
 8087856:	4620      	mov	r0, r4
 8087858:	f7fc fbcc 	bl	8083ff4 <HAL_Validate_Pin_Function>
 808785c:	2802      	cmp	r0, #2
 808785e:	d10c      	bne.n	808787a <_Z11analogWritetm+0x4a>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
 8087860:	4620      	mov	r0, r4
 8087862:	f7fc fbd7 	bl	8084014 <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
 8087866:	2801      	cmp	r0, #1
 8087868:	d001      	beq.n	808786e <_Z11analogWritetm+0x3e>
 808786a:	2804      	cmp	r0, #4
 808786c:	d105      	bne.n	808787a <_Z11analogWritetm+0x4a>
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
 808786e:	4629      	mov	r1, r5
 8087870:	4620      	mov	r0, r4
    }
}
 8087872:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
 8087876:	f7fc bc15 	b.w	80840a4 <HAL_PWM_Write_Ext>
 808787a:	bd38      	pop	{r3, r4, r5, pc}

0808787c <_ZN19ApplicationWatchdog4loopEv>:
	wd.loop();
	os_thread_cleanup(nullptr);
}

void ApplicationWatchdog::loop()
{
 808787c:	b530      	push	{r4, r5, lr}
 808787e:	4604      	mov	r4, r0
	bool done = false;
	system_tick_t now;
	while (!done) {
		HAL_Delay_Milliseconds(timeout);
		now = current_time();
		done = (now-last_checkin)>=timeout;
 8087880:	4d1b      	ldr	r5, [pc, #108]	; (80878f0 <_ZN19ApplicationWatchdog4loopEv+0x74>)
	wd.loop();
	os_thread_cleanup(nullptr);
}

void ApplicationWatchdog::loop()
{
 8087882:	b089      	sub	sp, #36	; 0x24
	bool done = false;
	system_tick_t now;
	while (!done) {
		HAL_Delay_Milliseconds(timeout);
 8087884:	6820      	ldr	r0, [r4, #0]
 8087886:	f7fc fc5d 	bl	8084144 <HAL_Delay_Milliseconds>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 808788a:	f7fc fc6b 	bl	8084164 <HAL_Timer_Get_Milli_Seconds>
		now = current_time();
		done = (now-last_checkin)>=timeout;
 808788e:	682b      	ldr	r3, [r5, #0]
 8087890:	6822      	ldr	r2, [r4, #0]

void ApplicationWatchdog::loop()
{
	bool done = false;
	system_tick_t now;
	while (!done) {
 8087892:	1ac0      	subs	r0, r0, r3
 8087894:	4290      	cmp	r0, r2
 8087896:	d3f5      	bcc.n	8087884 <_ZN19ApplicationWatchdog4loopEv+0x8>
		HAL_Delay_Milliseconds(timeout);
		now = current_time();
		done = (now-last_checkin)>=timeout;
	}

	if (timeout>0 && timeout_fn) {
 8087898:	6823      	ldr	r3, [r4, #0]
 808789a:	b333      	cbz	r3, 80878ea <_ZN19ApplicationWatchdog4loopEv+0x6e>
 808789c:	68e3      	ldr	r3, [r4, #12]
 808789e:	b323      	cbz	r3, 80878ea <_ZN19ApplicationWatchdog4loopEv+0x6e>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80878a0:	1d25      	adds	r5, r4, #4
 80878a2:	6923      	ldr	r3, [r4, #16]
 80878a4:	4628      	mov	r0, r5
 80878a6:	4798      	blx	r3
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80878a8:	2300      	movs	r3, #0
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80878aa:	a904      	add	r1, sp, #16
 80878ac:	4668      	mov	r0, sp
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80878ae:	9302      	str	r3, [sp, #8]
 80878b0:	9306      	str	r3, [sp, #24]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80878b2:	f7fe fd3a 	bl	808632a <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80878b6:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 80878b8:	9a06      	ldr	r2, [sp, #24]
      __b = _GLIBCXX_MOVE(__tmp);
 80878ba:	9306      	str	r3, [sp, #24]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80878bc:	9202      	str	r2, [sp, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80878be:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80878c0:	9a07      	ldr	r2, [sp, #28]
 80878c2:	4629      	mov	r1, r5
 80878c4:	a804      	add	r0, sp, #16
 80878c6:	9203      	str	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80878c8:	9307      	str	r3, [sp, #28]
 80878ca:	f7fe fd2e 	bl	808632a <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80878ce:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80878d0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80878d2:	60e3      	str	r3, [r4, #12]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80878d4:	9b07      	ldr	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80878d6:	9206      	str	r2, [sp, #24]
 80878d8:	6922      	ldr	r2, [r4, #16]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80878da:	a804      	add	r0, sp, #16
      __b = _GLIBCXX_MOVE(__tmp);
 80878dc:	6123      	str	r3, [r4, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80878de:	9207      	str	r2, [sp, #28]
 80878e0:	f7f8 fcf4 	bl	80802cc <_ZNSt14_Function_baseD1Ev>
 80878e4:	4668      	mov	r0, sp
 80878e6:	f7f8 fcf1 	bl	80802cc <_ZNSt14_Function_baseD1Ev>
		timeout_fn();
		timeout_fn = std::function<void(void)>();
	}
}
 80878ea:	b009      	add	sp, #36	; 0x24
 80878ec:	bd30      	pop	{r4, r5, pc}
 80878ee:	bf00      	nop
 80878f0:	20000584 	.word	0x20000584

080878f4 <_ZN19ApplicationWatchdog5startEPv>:
#if PLATFORM_THREADING

volatile system_tick_t ApplicationWatchdog::last_checkin;

os_thread_return_t ApplicationWatchdog::start(void* pointer)
{
 80878f4:	b508      	push	{r3, lr}
	ApplicationWatchdog& wd = *(ApplicationWatchdog*)pointer;
	wd.loop();
 80878f6:	f7ff ffc1 	bl	808787c <_ZN19ApplicationWatchdog4loopEv>
	os_thread_cleanup(nullptr);
}
 80878fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

os_thread_return_t ApplicationWatchdog::start(void* pointer)
{
	ApplicationWatchdog& wd = *(ApplicationWatchdog*)pointer;
	wd.loop();
	os_thread_cleanup(nullptr);
 80878fe:	2000      	movs	r0, #0
 8087900:	f7fc bc80 	b.w	8084204 <os_thread_cleanup>

08087904 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 8087904:	b513      	push	{r0, r1, r4, lr}
 8087906:	4c08      	ldr	r4, [pc, #32]	; (8087928 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 8087908:	2300      	movs	r3, #0
 808790a:	461a      	mov	r2, r3
 808790c:	4619      	mov	r1, r3
 808790e:	9300      	str	r3, [sp, #0]
 8087910:	4620      	mov	r0, r4
 8087912:	f7ff f9b9 	bl	8086c88 <_ZN9IPAddressC1Ehhhh>
 8087916:	4620      	mov	r0, r4
 8087918:	4a04      	ldr	r2, [pc, #16]	; (808792c <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 808791a:	4905      	ldr	r1, [pc, #20]	; (8087930 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 808791c:	b002      	add	sp, #8
 808791e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8087922:	f000 b879 	b.w	8087a18 <__aeabi_atexit>
 8087926:	bf00      	nop
 8087928:	20000588 	.word	0x20000588
 808792c:	20000180 	.word	0x20000180
 8087930:	08086c01 	.word	0x08086c01

08087934 <_ZN12_GLOBAL__N_117defaultWireConfigEv>:

#ifndef SPARK_WIRING_NO_I2C

namespace {

HAL_I2C_Config defaultWireConfig() {
 8087934:	b570      	push	{r4, r5, r6, lr}
 8087936:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 8087938:	2514      	movs	r5, #20
 808793a:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808793c:	4e09      	ldr	r6, [pc, #36]	; (8087964 <_ZN12_GLOBAL__N_117defaultWireConfigEv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 808793e:	2100      	movs	r1, #0
 8087940:	f001 fc78 	bl	8089234 <memset>
 8087944:	8025      	strh	r5, [r4, #0]
 8087946:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8087948:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 808794a:	60a5      	str	r5, [r4, #8]
 808794c:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808794e:	4628      	mov	r0, r5
 8087950:	f000 f872 	bl	8087a38 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8087954:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 8087956:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8087958:	4628      	mov	r0, r5
 808795a:	f000 f86d 	bl	8087a38 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 808795e:	60e0      	str	r0, [r4, #12]

	return config;
}
 8087960:	4620      	mov	r0, r4
 8087962:	bd70      	pop	{r4, r5, r6, pc}
 8087964:	0808b4b6 	.word	0x0808b4b6

08087968 <_Z17acquireWireBufferv>:
 8087968:	b510      	push	{r4, lr}
 808796a:	4604      	mov	r4, r0
 808796c:	f7ff ffe2 	bl	8087934 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
 8087970:	4620      	mov	r0, r4
 8087972:	bd10      	pop	{r4, pc}

08087974 <_Z18acquireWire3Bufferv>:
}
#endif

#if Wiring_Wire3
HAL_I2C_Config __attribute__((weak)) acquireWire3Buffer()
{
 8087974:	b510      	push	{r4, lr}
 8087976:	4604      	mov	r4, r0
	return defaultWireConfig();
 8087978:	f7ff ffdc 	bl	8087934 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
}
 808797c:	4620      	mov	r0, r4
 808797e:	bd10      	pop	{r4, pc}

08087980 <_Z19__fetch_global_Wirev>:
#endif

TwoWire& __fetch_global_Wire()
{
 8087980:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 8087982:	4d0e      	ldr	r5, [pc, #56]	; (80879bc <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 8087984:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 8087986:	6829      	ldr	r1, [r5, #0]
 8087988:	f011 0401 	ands.w	r4, r1, #1
 808798c:	d113      	bne.n	80879b6 <_Z19__fetch_global_Wirev+0x36>
 808798e:	4628      	mov	r0, r5
 8087990:	f7f8 fb94 	bl	80800bc <__cxa_guard_acquire>
 8087994:	b178      	cbz	r0, 80879b6 <_Z19__fetch_global_Wirev+0x36>
 8087996:	a801      	add	r0, sp, #4
 8087998:	f7ff ffe6 	bl	8087968 <_Z17acquireWireBufferv>
 808799c:	aa01      	add	r2, sp, #4
 808799e:	4621      	mov	r1, r4
 80879a0:	4807      	ldr	r0, [pc, #28]	; (80879c0 <_Z19__fetch_global_Wirev+0x40>)
 80879a2:	f7ff fbf5 	bl	8087190 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 80879a6:	4628      	mov	r0, r5
 80879a8:	f7f8 fb8d 	bl	80800c6 <__cxa_guard_release>
 80879ac:	4a05      	ldr	r2, [pc, #20]	; (80879c4 <_Z19__fetch_global_Wirev+0x44>)
 80879ae:	4906      	ldr	r1, [pc, #24]	; (80879c8 <_Z19__fetch_global_Wirev+0x48>)
 80879b0:	4803      	ldr	r0, [pc, #12]	; (80879c0 <_Z19__fetch_global_Wirev+0x40>)
 80879b2:	f000 f831 	bl	8087a18 <__aeabi_atexit>
	return wire;
}
 80879b6:	4802      	ldr	r0, [pc, #8]	; (80879c0 <_Z19__fetch_global_Wirev+0x40>)
 80879b8:	b007      	add	sp, #28
 80879ba:	bd30      	pop	{r4, r5, pc}
 80879bc:	20000590 	.word	0x20000590
 80879c0:	200005a8 	.word	0x200005a8
 80879c4:	20000180 	.word	0x20000180
 80879c8:	08087139 	.word	0x08087139

080879cc <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 80879cc:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 80879ce:	4c0e      	ldr	r4, [pc, #56]	; (8087a08 <_Z20__fetch_global_Wire3v+0x3c>)
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 80879d0:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 80879d2:	6823      	ldr	r3, [r4, #0]
 80879d4:	07db      	lsls	r3, r3, #31
 80879d6:	d413      	bmi.n	8087a00 <_Z20__fetch_global_Wire3v+0x34>
 80879d8:	4620      	mov	r0, r4
 80879da:	f7f8 fb6f 	bl	80800bc <__cxa_guard_acquire>
 80879de:	b178      	cbz	r0, 8087a00 <_Z20__fetch_global_Wire3v+0x34>
 80879e0:	a801      	add	r0, sp, #4
 80879e2:	f7ff ffc7 	bl	8087974 <_Z18acquireWire3Bufferv>
 80879e6:	aa01      	add	r2, sp, #4
 80879e8:	2102      	movs	r1, #2
 80879ea:	4808      	ldr	r0, [pc, #32]	; (8087a0c <_Z20__fetch_global_Wire3v+0x40>)
 80879ec:	f7ff fbd0 	bl	8087190 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 80879f0:	4620      	mov	r0, r4
 80879f2:	f7f8 fb68 	bl	80800c6 <__cxa_guard_release>
 80879f6:	4a06      	ldr	r2, [pc, #24]	; (8087a10 <_Z20__fetch_global_Wire3v+0x44>)
 80879f8:	4906      	ldr	r1, [pc, #24]	; (8087a14 <_Z20__fetch_global_Wire3v+0x48>)
 80879fa:	4804      	ldr	r0, [pc, #16]	; (8087a0c <_Z20__fetch_global_Wire3v+0x40>)
 80879fc:	f000 f80c 	bl	8087a18 <__aeabi_atexit>
	return wire;
}
 8087a00:	4802      	ldr	r0, [pc, #8]	; (8087a0c <_Z20__fetch_global_Wire3v+0x40>)
 8087a02:	b006      	add	sp, #24
 8087a04:	bd10      	pop	{r4, pc}
 8087a06:	bf00      	nop
 8087a08:	200005bc 	.word	0x200005bc
 8087a0c:	20000594 	.word	0x20000594
 8087a10:	20000180 	.word	0x20000180
 8087a14:	08087139 	.word	0x08087139

08087a18 <__aeabi_atexit>:
 8087a18:	460b      	mov	r3, r1
 8087a1a:	4601      	mov	r1, r0
 8087a1c:	4618      	mov	r0, r3
 8087a1e:	f001 badd 	b.w	8088fdc <__cxa_atexit>
	...

08087a24 <_ZSt15get_new_handlerv>:
 8087a24:	4b02      	ldr	r3, [pc, #8]	; (8087a30 <_ZSt15get_new_handlerv+0xc>)
 8087a26:	6818      	ldr	r0, [r3, #0]
 8087a28:	f3bf 8f5f 	dmb	sy
 8087a2c:	4770      	bx	lr
 8087a2e:	bf00      	nop
 8087a30:	200005c0 	.word	0x200005c0

08087a34 <_ZdlPvj>:
 8087a34:	f7f8 bb35 	b.w	80800a2 <_ZdlPv>

08087a38 <_ZnajRKSt9nothrow_t>:
 8087a38:	f000 b800 	b.w	8087a3c <_ZnwjRKSt9nothrow_t>

08087a3c <_ZnwjRKSt9nothrow_t>:
 8087a3c:	b510      	push	{r4, lr}
 8087a3e:	2800      	cmp	r0, #0
 8087a40:	bf14      	ite	ne
 8087a42:	4604      	movne	r4, r0
 8087a44:	2401      	moveq	r4, #1
 8087a46:	4620      	mov	r0, r4
 8087a48:	f7fc fe72 	bl	8084730 <malloc>
 8087a4c:	b920      	cbnz	r0, 8087a58 <_ZnwjRKSt9nothrow_t+0x1c>
 8087a4e:	f7ff ffe9 	bl	8087a24 <_ZSt15get_new_handlerv>
 8087a52:	b108      	cbz	r0, 8087a58 <_ZnwjRKSt9nothrow_t+0x1c>
 8087a54:	4780      	blx	r0
 8087a56:	e7f6      	b.n	8087a46 <_ZnwjRKSt9nothrow_t+0xa>
 8087a58:	bd10      	pop	{r4, pc}

08087a5a <_ZSt25__throw_bad_function_callv>:
 8087a5a:	b508      	push	{r3, lr}
 8087a5c:	f7fc fea8 	bl	80847b0 <abort>

08087a60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8087a60:	4b18      	ldr	r3, [pc, #96]	; (8087ac4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8087a62:	681a      	ldr	r2, [r3, #0]
 8087a64:	07d1      	lsls	r1, r2, #31
 8087a66:	bf5c      	itt	pl
 8087a68:	2201      	movpl	r2, #1
 8087a6a:	601a      	strpl	r2, [r3, #0]
 8087a6c:	4b16      	ldr	r3, [pc, #88]	; (8087ac8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8087a6e:	681a      	ldr	r2, [r3, #0]
 8087a70:	07d2      	lsls	r2, r2, #31
 8087a72:	bf5c      	itt	pl
 8087a74:	2201      	movpl	r2, #1
 8087a76:	601a      	strpl	r2, [r3, #0]
 8087a78:	4b14      	ldr	r3, [pc, #80]	; (8087acc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8087a7a:	681a      	ldr	r2, [r3, #0]
 8087a7c:	07d0      	lsls	r0, r2, #31
 8087a7e:	bf5c      	itt	pl
 8087a80:	2201      	movpl	r2, #1
 8087a82:	601a      	strpl	r2, [r3, #0]
 8087a84:	4b12      	ldr	r3, [pc, #72]	; (8087ad0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8087a86:	681a      	ldr	r2, [r3, #0]
 8087a88:	07d1      	lsls	r1, r2, #31
 8087a8a:	bf5c      	itt	pl
 8087a8c:	2201      	movpl	r2, #1
 8087a8e:	601a      	strpl	r2, [r3, #0]
 8087a90:	4b10      	ldr	r3, [pc, #64]	; (8087ad4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8087a92:	681a      	ldr	r2, [r3, #0]
 8087a94:	07d2      	lsls	r2, r2, #31
 8087a96:	bf5c      	itt	pl
 8087a98:	2201      	movpl	r2, #1
 8087a9a:	601a      	strpl	r2, [r3, #0]
 8087a9c:	4b0e      	ldr	r3, [pc, #56]	; (8087ad8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8087a9e:	681a      	ldr	r2, [r3, #0]
 8087aa0:	07d0      	lsls	r0, r2, #31
 8087aa2:	bf5c      	itt	pl
 8087aa4:	2201      	movpl	r2, #1
 8087aa6:	601a      	strpl	r2, [r3, #0]
 8087aa8:	4b0c      	ldr	r3, [pc, #48]	; (8087adc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8087aaa:	681a      	ldr	r2, [r3, #0]
 8087aac:	07d1      	lsls	r1, r2, #31
 8087aae:	bf5c      	itt	pl
 8087ab0:	2201      	movpl	r2, #1
 8087ab2:	601a      	strpl	r2, [r3, #0]
 8087ab4:	4b0a      	ldr	r3, [pc, #40]	; (8087ae0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8087ab6:	681a      	ldr	r2, [r3, #0]
 8087ab8:	07d2      	lsls	r2, r2, #31
 8087aba:	bf5c      	itt	pl
 8087abc:	2201      	movpl	r2, #1
 8087abe:	601a      	strpl	r2, [r3, #0]
 8087ac0:	4770      	bx	lr
 8087ac2:	bf00      	nop
 8087ac4:	200005e0 	.word	0x200005e0
 8087ac8:	200005dc 	.word	0x200005dc
 8087acc:	200005d8 	.word	0x200005d8
 8087ad0:	200005d4 	.word	0x200005d4
 8087ad4:	200005d0 	.word	0x200005d0
 8087ad8:	200005cc 	.word	0x200005cc
 8087adc:	200005c8 	.word	0x200005c8
 8087ae0:	200005c4 	.word	0x200005c4

08087ae4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 8087ae4:	4b24      	ldr	r3, [pc, #144]	; (8087b78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 8087ae6:	681a      	ldr	r2, [r3, #0]
 8087ae8:	07d0      	lsls	r0, r2, #31
 8087aea:	bf5c      	itt	pl
 8087aec:	2201      	movpl	r2, #1
 8087aee:	601a      	strpl	r2, [r3, #0]
 8087af0:	4b22      	ldr	r3, [pc, #136]	; (8087b7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 8087af2:	681a      	ldr	r2, [r3, #0]
 8087af4:	07d1      	lsls	r1, r2, #31
 8087af6:	bf5c      	itt	pl
 8087af8:	2201      	movpl	r2, #1
 8087afa:	601a      	strpl	r2, [r3, #0]
 8087afc:	4b20      	ldr	r3, [pc, #128]	; (8087b80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8087afe:	681a      	ldr	r2, [r3, #0]
 8087b00:	07d2      	lsls	r2, r2, #31
 8087b02:	bf5c      	itt	pl
 8087b04:	2201      	movpl	r2, #1
 8087b06:	601a      	strpl	r2, [r3, #0]
 8087b08:	4b1e      	ldr	r3, [pc, #120]	; (8087b84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 8087b0a:	681a      	ldr	r2, [r3, #0]
 8087b0c:	07d0      	lsls	r0, r2, #31
 8087b0e:	bf5c      	itt	pl
 8087b10:	2201      	movpl	r2, #1
 8087b12:	601a      	strpl	r2, [r3, #0]
 8087b14:	4b1c      	ldr	r3, [pc, #112]	; (8087b88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 8087b16:	681a      	ldr	r2, [r3, #0]
 8087b18:	07d1      	lsls	r1, r2, #31
 8087b1a:	bf5c      	itt	pl
 8087b1c:	2201      	movpl	r2, #1
 8087b1e:	601a      	strpl	r2, [r3, #0]
 8087b20:	4b1a      	ldr	r3, [pc, #104]	; (8087b8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 8087b22:	681a      	ldr	r2, [r3, #0]
 8087b24:	07d2      	lsls	r2, r2, #31
 8087b26:	bf5c      	itt	pl
 8087b28:	2201      	movpl	r2, #1
 8087b2a:	601a      	strpl	r2, [r3, #0]
 8087b2c:	4b18      	ldr	r3, [pc, #96]	; (8087b90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 8087b2e:	681a      	ldr	r2, [r3, #0]
 8087b30:	07d0      	lsls	r0, r2, #31
 8087b32:	bf5c      	itt	pl
 8087b34:	2201      	movpl	r2, #1
 8087b36:	601a      	strpl	r2, [r3, #0]
 8087b38:	4b16      	ldr	r3, [pc, #88]	; (8087b94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 8087b3a:	681a      	ldr	r2, [r3, #0]
 8087b3c:	07d1      	lsls	r1, r2, #31
 8087b3e:	bf5c      	itt	pl
 8087b40:	2201      	movpl	r2, #1
 8087b42:	601a      	strpl	r2, [r3, #0]
 8087b44:	4b14      	ldr	r3, [pc, #80]	; (8087b98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 8087b46:	681a      	ldr	r2, [r3, #0]
 8087b48:	07d2      	lsls	r2, r2, #31
 8087b4a:	bf5c      	itt	pl
 8087b4c:	2201      	movpl	r2, #1
 8087b4e:	601a      	strpl	r2, [r3, #0]
 8087b50:	4b12      	ldr	r3, [pc, #72]	; (8087b9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 8087b52:	681a      	ldr	r2, [r3, #0]
 8087b54:	07d0      	lsls	r0, r2, #31
 8087b56:	bf5c      	itt	pl
 8087b58:	2201      	movpl	r2, #1
 8087b5a:	601a      	strpl	r2, [r3, #0]
 8087b5c:	4b10      	ldr	r3, [pc, #64]	; (8087ba0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 8087b5e:	681a      	ldr	r2, [r3, #0]
 8087b60:	07d1      	lsls	r1, r2, #31
 8087b62:	bf5c      	itt	pl
 8087b64:	2201      	movpl	r2, #1
 8087b66:	601a      	strpl	r2, [r3, #0]
 8087b68:	4b0e      	ldr	r3, [pc, #56]	; (8087ba4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 8087b6a:	681a      	ldr	r2, [r3, #0]
 8087b6c:	07d2      	lsls	r2, r2, #31
 8087b6e:	bf5c      	itt	pl
 8087b70:	2201      	movpl	r2, #1
 8087b72:	601a      	strpl	r2, [r3, #0]
 8087b74:	4770      	bx	lr
 8087b76:	bf00      	nop
 8087b78:	20000610 	.word	0x20000610
 8087b7c:	2000060c 	.word	0x2000060c
 8087b80:	20000608 	.word	0x20000608
 8087b84:	20000604 	.word	0x20000604
 8087b88:	20000600 	.word	0x20000600
 8087b8c:	200005fc 	.word	0x200005fc
 8087b90:	200005f8 	.word	0x200005f8
 8087b94:	200005f4 	.word	0x200005f4
 8087b98:	200005f0 	.word	0x200005f0
 8087b9c:	200005ec 	.word	0x200005ec
 8087ba0:	200005e8 	.word	0x200005e8
 8087ba4:	200005e4 	.word	0x200005e4

08087ba8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 8087ba8:	4b24      	ldr	r3, [pc, #144]	; (8087c3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 8087baa:	681a      	ldr	r2, [r3, #0]
 8087bac:	07d0      	lsls	r0, r2, #31
 8087bae:	bf5c      	itt	pl
 8087bb0:	2201      	movpl	r2, #1
 8087bb2:	601a      	strpl	r2, [r3, #0]
 8087bb4:	4b22      	ldr	r3, [pc, #136]	; (8087c40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 8087bb6:	681a      	ldr	r2, [r3, #0]
 8087bb8:	07d1      	lsls	r1, r2, #31
 8087bba:	bf5c      	itt	pl
 8087bbc:	2201      	movpl	r2, #1
 8087bbe:	601a      	strpl	r2, [r3, #0]
 8087bc0:	4b20      	ldr	r3, [pc, #128]	; (8087c44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 8087bc2:	681a      	ldr	r2, [r3, #0]
 8087bc4:	07d2      	lsls	r2, r2, #31
 8087bc6:	bf5c      	itt	pl
 8087bc8:	2201      	movpl	r2, #1
 8087bca:	601a      	strpl	r2, [r3, #0]
 8087bcc:	4b1e      	ldr	r3, [pc, #120]	; (8087c48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 8087bce:	681a      	ldr	r2, [r3, #0]
 8087bd0:	07d0      	lsls	r0, r2, #31
 8087bd2:	bf5c      	itt	pl
 8087bd4:	2201      	movpl	r2, #1
 8087bd6:	601a      	strpl	r2, [r3, #0]
 8087bd8:	4b1c      	ldr	r3, [pc, #112]	; (8087c4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 8087bda:	681a      	ldr	r2, [r3, #0]
 8087bdc:	07d1      	lsls	r1, r2, #31
 8087bde:	bf5c      	itt	pl
 8087be0:	2201      	movpl	r2, #1
 8087be2:	601a      	strpl	r2, [r3, #0]
 8087be4:	4b1a      	ldr	r3, [pc, #104]	; (8087c50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 8087be6:	681a      	ldr	r2, [r3, #0]
 8087be8:	07d2      	lsls	r2, r2, #31
 8087bea:	bf5c      	itt	pl
 8087bec:	2201      	movpl	r2, #1
 8087bee:	601a      	strpl	r2, [r3, #0]
 8087bf0:	4b18      	ldr	r3, [pc, #96]	; (8087c54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 8087bf2:	681a      	ldr	r2, [r3, #0]
 8087bf4:	07d0      	lsls	r0, r2, #31
 8087bf6:	bf5c      	itt	pl
 8087bf8:	2201      	movpl	r2, #1
 8087bfa:	601a      	strpl	r2, [r3, #0]
 8087bfc:	4b16      	ldr	r3, [pc, #88]	; (8087c58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 8087bfe:	681a      	ldr	r2, [r3, #0]
 8087c00:	07d1      	lsls	r1, r2, #31
 8087c02:	bf5c      	itt	pl
 8087c04:	2201      	movpl	r2, #1
 8087c06:	601a      	strpl	r2, [r3, #0]
 8087c08:	4b14      	ldr	r3, [pc, #80]	; (8087c5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 8087c0a:	681a      	ldr	r2, [r3, #0]
 8087c0c:	07d2      	lsls	r2, r2, #31
 8087c0e:	bf5c      	itt	pl
 8087c10:	2201      	movpl	r2, #1
 8087c12:	601a      	strpl	r2, [r3, #0]
 8087c14:	4b12      	ldr	r3, [pc, #72]	; (8087c60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 8087c16:	681a      	ldr	r2, [r3, #0]
 8087c18:	07d0      	lsls	r0, r2, #31
 8087c1a:	bf5c      	itt	pl
 8087c1c:	2201      	movpl	r2, #1
 8087c1e:	601a      	strpl	r2, [r3, #0]
 8087c20:	4b10      	ldr	r3, [pc, #64]	; (8087c64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 8087c22:	681a      	ldr	r2, [r3, #0]
 8087c24:	07d1      	lsls	r1, r2, #31
 8087c26:	bf5c      	itt	pl
 8087c28:	2201      	movpl	r2, #1
 8087c2a:	601a      	strpl	r2, [r3, #0]
 8087c2c:	4b0e      	ldr	r3, [pc, #56]	; (8087c68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 8087c2e:	681a      	ldr	r2, [r3, #0]
 8087c30:	07d2      	lsls	r2, r2, #31
 8087c32:	bf5c      	itt	pl
 8087c34:	2201      	movpl	r2, #1
 8087c36:	601a      	strpl	r2, [r3, #0]
 8087c38:	4770      	bx	lr
 8087c3a:	bf00      	nop
 8087c3c:	20000640 	.word	0x20000640
 8087c40:	2000063c 	.word	0x2000063c
 8087c44:	20000638 	.word	0x20000638
 8087c48:	20000634 	.word	0x20000634
 8087c4c:	20000630 	.word	0x20000630
 8087c50:	2000062c 	.word	0x2000062c
 8087c54:	20000628 	.word	0x20000628
 8087c58:	20000624 	.word	0x20000624
 8087c5c:	20000620 	.word	0x20000620
 8087c60:	2000061c 	.word	0x2000061c
 8087c64:	20000618 	.word	0x20000618
 8087c68:	20000614 	.word	0x20000614

08087c6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8087c6c:	4b18      	ldr	r3, [pc, #96]	; (8087cd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8087c6e:	681a      	ldr	r2, [r3, #0]
 8087c70:	07d1      	lsls	r1, r2, #31
 8087c72:	bf5c      	itt	pl
 8087c74:	2201      	movpl	r2, #1
 8087c76:	601a      	strpl	r2, [r3, #0]
 8087c78:	4b16      	ldr	r3, [pc, #88]	; (8087cd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8087c7a:	681a      	ldr	r2, [r3, #0]
 8087c7c:	07d2      	lsls	r2, r2, #31
 8087c7e:	bf5c      	itt	pl
 8087c80:	2201      	movpl	r2, #1
 8087c82:	601a      	strpl	r2, [r3, #0]
 8087c84:	4b14      	ldr	r3, [pc, #80]	; (8087cd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8087c86:	681a      	ldr	r2, [r3, #0]
 8087c88:	07d0      	lsls	r0, r2, #31
 8087c8a:	bf5c      	itt	pl
 8087c8c:	2201      	movpl	r2, #1
 8087c8e:	601a      	strpl	r2, [r3, #0]
 8087c90:	4b12      	ldr	r3, [pc, #72]	; (8087cdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8087c92:	681a      	ldr	r2, [r3, #0]
 8087c94:	07d1      	lsls	r1, r2, #31
 8087c96:	bf5c      	itt	pl
 8087c98:	2201      	movpl	r2, #1
 8087c9a:	601a      	strpl	r2, [r3, #0]
 8087c9c:	4b10      	ldr	r3, [pc, #64]	; (8087ce0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8087c9e:	681a      	ldr	r2, [r3, #0]
 8087ca0:	07d2      	lsls	r2, r2, #31
 8087ca2:	bf5c      	itt	pl
 8087ca4:	2201      	movpl	r2, #1
 8087ca6:	601a      	strpl	r2, [r3, #0]
 8087ca8:	4b0e      	ldr	r3, [pc, #56]	; (8087ce4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8087caa:	681a      	ldr	r2, [r3, #0]
 8087cac:	07d0      	lsls	r0, r2, #31
 8087cae:	bf5c      	itt	pl
 8087cb0:	2201      	movpl	r2, #1
 8087cb2:	601a      	strpl	r2, [r3, #0]
 8087cb4:	4b0c      	ldr	r3, [pc, #48]	; (8087ce8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8087cb6:	681a      	ldr	r2, [r3, #0]
 8087cb8:	07d1      	lsls	r1, r2, #31
 8087cba:	bf5c      	itt	pl
 8087cbc:	2201      	movpl	r2, #1
 8087cbe:	601a      	strpl	r2, [r3, #0]
 8087cc0:	4b0a      	ldr	r3, [pc, #40]	; (8087cec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8087cc2:	681a      	ldr	r2, [r3, #0]
 8087cc4:	07d2      	lsls	r2, r2, #31
 8087cc6:	bf5c      	itt	pl
 8087cc8:	2201      	movpl	r2, #1
 8087cca:	601a      	strpl	r2, [r3, #0]
 8087ccc:	4770      	bx	lr
 8087cce:	bf00      	nop
 8087cd0:	20000660 	.word	0x20000660
 8087cd4:	2000065c 	.word	0x2000065c
 8087cd8:	20000658 	.word	0x20000658
 8087cdc:	20000654 	.word	0x20000654
 8087ce0:	20000650 	.word	0x20000650
 8087ce4:	2000064c 	.word	0x2000064c
 8087ce8:	20000648 	.word	0x20000648
 8087cec:	20000644 	.word	0x20000644

08087cf0 <sqrt>:
 8087cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8087cf4:	b08b      	sub	sp, #44	; 0x2c
 8087cf6:	4604      	mov	r4, r0
 8087cf8:	460d      	mov	r5, r1
 8087cfa:	f000 f855 	bl	8087da8 <__ieee754_sqrt>
 8087cfe:	4b28      	ldr	r3, [pc, #160]	; (8087da0 <sqrt+0xb0>)
 8087d00:	4606      	mov	r6, r0
 8087d02:	f993 a000 	ldrsb.w	sl, [r3]
 8087d06:	460f      	mov	r7, r1
 8087d08:	f1ba 3fff 	cmp.w	sl, #4294967295
 8087d0c:	d012      	beq.n	8087d34 <sqrt+0x44>
 8087d0e:	4622      	mov	r2, r4
 8087d10:	462b      	mov	r3, r5
 8087d12:	4620      	mov	r0, r4
 8087d14:	4629      	mov	r1, r5
 8087d16:	f000 fd5f 	bl	80887d8 <__aeabi_dcmpun>
 8087d1a:	4683      	mov	fp, r0
 8087d1c:	b950      	cbnz	r0, 8087d34 <sqrt+0x44>
 8087d1e:	f04f 0800 	mov.w	r8, #0
 8087d22:	f04f 0900 	mov.w	r9, #0
 8087d26:	4620      	mov	r0, r4
 8087d28:	4629      	mov	r1, r5
 8087d2a:	4642      	mov	r2, r8
 8087d2c:	464b      	mov	r3, r9
 8087d2e:	f000 fd2b 	bl	8088788 <__aeabi_dcmplt>
 8087d32:	b920      	cbnz	r0, 8087d3e <sqrt+0x4e>
 8087d34:	4630      	mov	r0, r6
 8087d36:	4639      	mov	r1, r7
 8087d38:	b00b      	add	sp, #44	; 0x2c
 8087d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8087d3e:	4a19      	ldr	r2, [pc, #100]	; (8087da4 <sqrt+0xb4>)
 8087d40:	2301      	movs	r3, #1
 8087d42:	f8cd b020 	str.w	fp, [sp, #32]
 8087d46:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8087d4a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8087d4e:	9201      	str	r2, [sp, #4]
 8087d50:	9300      	str	r3, [sp, #0]
 8087d52:	f1ba 0f00 	cmp.w	sl, #0
 8087d56:	d015      	beq.n	8087d84 <sqrt+0x94>
 8087d58:	4642      	mov	r2, r8
 8087d5a:	464b      	mov	r3, r9
 8087d5c:	4640      	mov	r0, r8
 8087d5e:	4649      	mov	r1, r9
 8087d60:	f000 fbca 	bl	80884f8 <__aeabi_ddiv>
 8087d64:	f1ba 0f02 	cmp.w	sl, #2
 8087d68:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8087d6c:	d10c      	bne.n	8087d88 <sqrt+0x98>
 8087d6e:	f7fc fd2f 	bl	80847d0 <__errno>
 8087d72:	2321      	movs	r3, #33	; 0x21
 8087d74:	6003      	str	r3, [r0, #0]
 8087d76:	9b08      	ldr	r3, [sp, #32]
 8087d78:	b963      	cbnz	r3, 8087d94 <sqrt+0xa4>
 8087d7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8087d7e:	b00b      	add	sp, #44	; 0x2c
 8087d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8087d84:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8087d88:	4668      	mov	r0, sp
 8087d8a:	f000 f8d1 	bl	8087f30 <matherr>
 8087d8e:	2800      	cmp	r0, #0
 8087d90:	d1f1      	bne.n	8087d76 <sqrt+0x86>
 8087d92:	e7ec      	b.n	8087d6e <sqrt+0x7e>
 8087d94:	f7fc fd1c 	bl	80847d0 <__errno>
 8087d98:	9b08      	ldr	r3, [sp, #32]
 8087d9a:	6003      	str	r3, [r0, #0]
 8087d9c:	e7ed      	b.n	8087d7a <sqrt+0x8a>
 8087d9e:	bf00      	nop
 8087da0:	200000c8 	.word	0x200000c8
 8087da4:	0808b4b8 	.word	0x0808b4b8

08087da8 <__ieee754_sqrt>:
 8087da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8087dac:	4e5f      	ldr	r6, [pc, #380]	; (8087f2c <__ieee754_sqrt+0x184>)
 8087dae:	460c      	mov	r4, r1
 8087db0:	46b6      	mov	lr, r6
 8087db2:	400e      	ands	r6, r1
 8087db4:	4576      	cmp	r6, lr
 8087db6:	4605      	mov	r5, r0
 8087db8:	f000 8098 	beq.w	8087eec <__ieee754_sqrt+0x144>
 8087dbc:	2900      	cmp	r1, #0
 8087dbe:	460b      	mov	r3, r1
 8087dc0:	4602      	mov	r2, r0
 8087dc2:	dd74      	ble.n	8087eae <__ieee754_sqrt+0x106>
 8087dc4:	ea5f 5e21 	movs.w	lr, r1, asr #20
 8087dc8:	d07f      	beq.n	8087eca <__ieee754_sqrt+0x122>
 8087dca:	f2ae 3eff 	subw	lr, lr, #1023	; 0x3ff
 8087dce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8087dd2:	f01e 0f01 	tst.w	lr, #1
 8087dd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8087dda:	d163      	bne.n	8087ea4 <__ieee754_sqrt+0xfc>
 8087ddc:	2700      	movs	r7, #0
 8087dde:	463e      	mov	r6, r7
 8087de0:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
 8087de4:	440b      	add	r3, r1
 8087de6:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 8087dea:	0052      	lsls	r2, r2, #1
 8087dec:	2016      	movs	r0, #22
 8087dee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8087df2:	1874      	adds	r4, r6, r1
 8087df4:	429c      	cmp	r4, r3
 8087df6:	ea4f 75d2 	mov.w	r5, r2, lsr #31
 8087dfa:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8087dfe:	dc02      	bgt.n	8087e06 <__ieee754_sqrt+0x5e>
 8087e00:	1b1b      	subs	r3, r3, r4
 8087e02:	1866      	adds	r6, r4, r1
 8087e04:	440f      	add	r7, r1
 8087e06:	3801      	subs	r0, #1
 8087e08:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8087e0c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8087e10:	d1ef      	bne.n	8087df2 <__ieee754_sqrt+0x4a>
 8087e12:	4684      	mov	ip, r0
 8087e14:	2420      	movs	r4, #32
 8087e16:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8087e1a:	e009      	b.n	8087e30 <__ieee754_sqrt+0x88>
 8087e1c:	d020      	beq.n	8087e60 <__ieee754_sqrt+0xb8>
 8087e1e:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
 8087e22:	3c01      	subs	r4, #1
 8087e24:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8087e28:	442b      	add	r3, r5
 8087e2a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8087e2e:	d020      	beq.n	8087e72 <__ieee754_sqrt+0xca>
 8087e30:	429e      	cmp	r6, r3
 8087e32:	eb01 050c 	add.w	r5, r1, ip
 8087e36:	daf1      	bge.n	8087e1c <__ieee754_sqrt+0x74>
 8087e38:	2d00      	cmp	r5, #0
 8087e3a:	eb05 0c01 	add.w	ip, r5, r1
 8087e3e:	db09      	blt.n	8087e54 <__ieee754_sqrt+0xac>
 8087e40:	46b0      	mov	r8, r6
 8087e42:	4295      	cmp	r5, r2
 8087e44:	eba3 0306 	sub.w	r3, r3, r6
 8087e48:	d900      	bls.n	8087e4c <__ieee754_sqrt+0xa4>
 8087e4a:	3b01      	subs	r3, #1
 8087e4c:	4646      	mov	r6, r8
 8087e4e:	1b52      	subs	r2, r2, r5
 8087e50:	4408      	add	r0, r1
 8087e52:	e7e4      	b.n	8087e1e <__ieee754_sqrt+0x76>
 8087e54:	f1bc 0f00 	cmp.w	ip, #0
 8087e58:	dbf2      	blt.n	8087e40 <__ieee754_sqrt+0x98>
 8087e5a:	f106 0801 	add.w	r8, r6, #1
 8087e5e:	e7f0      	b.n	8087e42 <__ieee754_sqrt+0x9a>
 8087e60:	4295      	cmp	r5, r2
 8087e62:	d817      	bhi.n	8087e94 <__ieee754_sqrt+0xec>
 8087e64:	2d00      	cmp	r5, #0
 8087e66:	eb05 0c01 	add.w	ip, r5, r1
 8087e6a:	db49      	blt.n	8087f00 <__ieee754_sqrt+0x158>
 8087e6c:	4698      	mov	r8, r3
 8087e6e:	2300      	movs	r3, #0
 8087e70:	e7ec      	b.n	8087e4c <__ieee754_sqrt+0xa4>
 8087e72:	4313      	orrs	r3, r2
 8087e74:	d110      	bne.n	8087e98 <__ieee754_sqrt+0xf0>
 8087e76:	0840      	lsrs	r0, r0, #1
 8087e78:	107b      	asrs	r3, r7, #1
 8087e7a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8087e7e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8087e82:	07fa      	lsls	r2, r7, #31
 8087e84:	eb03 570e 	add.w	r7, r3, lr, lsl #20
 8087e88:	4639      	mov	r1, r7
 8087e8a:	bf48      	it	mi
 8087e8c:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
 8087e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8087e94:	4633      	mov	r3, r6
 8087e96:	e7c2      	b.n	8087e1e <__ieee754_sqrt+0x76>
 8087e98:	1c41      	adds	r1, r0, #1
 8087e9a:	d035      	beq.n	8087f08 <__ieee754_sqrt+0x160>
 8087e9c:	f000 0301 	and.w	r3, r0, #1
 8087ea0:	4418      	add	r0, r3
 8087ea2:	e7e8      	b.n	8087e76 <__ieee754_sqrt+0xce>
 8087ea4:	005b      	lsls	r3, r3, #1
 8087ea6:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8087eaa:	0052      	lsls	r2, r2, #1
 8087eac:	e796      	b.n	8087ddc <__ieee754_sqrt+0x34>
 8087eae:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8087eb2:	4306      	orrs	r6, r0
 8087eb4:	d0ec      	beq.n	8087e90 <__ieee754_sqrt+0xe8>
 8087eb6:	bb79      	cbnz	r1, 8087f18 <__ieee754_sqrt+0x170>
 8087eb8:	468e      	mov	lr, r1
 8087eba:	0ad3      	lsrs	r3, r2, #11
 8087ebc:	f1ae 0e15 	sub.w	lr, lr, #21
 8087ec0:	0552      	lsls	r2, r2, #21
 8087ec2:	2b00      	cmp	r3, #0
 8087ec4:	d0f9      	beq.n	8087eba <__ieee754_sqrt+0x112>
 8087ec6:	02dd      	lsls	r5, r3, #11
 8087ec8:	d421      	bmi.n	8087f0e <__ieee754_sqrt+0x166>
 8087eca:	2100      	movs	r1, #0
 8087ecc:	e000      	b.n	8087ed0 <__ieee754_sqrt+0x128>
 8087ece:	4601      	mov	r1, r0
 8087ed0:	005b      	lsls	r3, r3, #1
 8087ed2:	02dc      	lsls	r4, r3, #11
 8087ed4:	f101 0001 	add.w	r0, r1, #1
 8087ed8:	d5f9      	bpl.n	8087ece <__ieee754_sqrt+0x126>
 8087eda:	f1c0 0420 	rsb	r4, r0, #32
 8087ede:	fa22 f404 	lsr.w	r4, r2, r4
 8087ee2:	4323      	orrs	r3, r4
 8087ee4:	ebc1 0e0e 	rsb	lr, r1, lr
 8087ee8:	4082      	lsls	r2, r0
 8087eea:	e76e      	b.n	8087dca <__ieee754_sqrt+0x22>
 8087eec:	4602      	mov	r2, r0
 8087eee:	460b      	mov	r3, r1
 8087ef0:	f000 f9d8 	bl	80882a4 <__aeabi_dmul>
 8087ef4:	462a      	mov	r2, r5
 8087ef6:	4623      	mov	r3, r4
 8087ef8:	f000 f822 	bl	8087f40 <__adddf3>
 8087efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8087f00:	f1bc 0f00 	cmp.w	ip, #0
 8087f04:	daa9      	bge.n	8087e5a <__ieee754_sqrt+0xb2>
 8087f06:	e7b1      	b.n	8087e6c <__ieee754_sqrt+0xc4>
 8087f08:	3701      	adds	r7, #1
 8087f0a:	4620      	mov	r0, r4
 8087f0c:	e7b4      	b.n	8087e78 <__ieee754_sqrt+0xd0>
 8087f0e:	2420      	movs	r4, #32
 8087f10:	f04f 31ff 	mov.w	r1, #4294967295
 8087f14:	2000      	movs	r0, #0
 8087f16:	e7e2      	b.n	8087ede <__ieee754_sqrt+0x136>
 8087f18:	4602      	mov	r2, r0
 8087f1a:	460b      	mov	r3, r1
 8087f1c:	f000 f80e 	bl	8087f3c <__aeabi_dsub>
 8087f20:	4602      	mov	r2, r0
 8087f22:	460b      	mov	r3, r1
 8087f24:	f000 fae8 	bl	80884f8 <__aeabi_ddiv>
 8087f28:	e7b2      	b.n	8087e90 <__ieee754_sqrt+0xe8>
 8087f2a:	bf00      	nop
 8087f2c:	7ff00000 	.word	0x7ff00000

08087f30 <matherr>:
 8087f30:	2000      	movs	r0, #0
 8087f32:	4770      	bx	lr

08087f34 <__aeabi_drsub>:
 8087f34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8087f38:	e002      	b.n	8087f40 <__adddf3>
 8087f3a:	bf00      	nop

08087f3c <__aeabi_dsub>:
 8087f3c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08087f40 <__adddf3>:
 8087f40:	b530      	push	{r4, r5, lr}
 8087f42:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8087f46:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8087f4a:	ea94 0f05 	teq	r4, r5
 8087f4e:	bf08      	it	eq
 8087f50:	ea90 0f02 	teqeq	r0, r2
 8087f54:	bf1f      	itttt	ne
 8087f56:	ea54 0c00 	orrsne.w	ip, r4, r0
 8087f5a:	ea55 0c02 	orrsne.w	ip, r5, r2
 8087f5e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8087f62:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8087f66:	f000 80e2 	beq.w	808812e <__adddf3+0x1ee>
 8087f6a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8087f6e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8087f72:	bfb8      	it	lt
 8087f74:	426d      	neglt	r5, r5
 8087f76:	dd0c      	ble.n	8087f92 <__adddf3+0x52>
 8087f78:	442c      	add	r4, r5
 8087f7a:	ea80 0202 	eor.w	r2, r0, r2
 8087f7e:	ea81 0303 	eor.w	r3, r1, r3
 8087f82:	ea82 0000 	eor.w	r0, r2, r0
 8087f86:	ea83 0101 	eor.w	r1, r3, r1
 8087f8a:	ea80 0202 	eor.w	r2, r0, r2
 8087f8e:	ea81 0303 	eor.w	r3, r1, r3
 8087f92:	2d36      	cmp	r5, #54	; 0x36
 8087f94:	bf88      	it	hi
 8087f96:	bd30      	pophi	{r4, r5, pc}
 8087f98:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8087f9c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8087fa0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8087fa4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8087fa8:	d002      	beq.n	8087fb0 <__adddf3+0x70>
 8087faa:	4240      	negs	r0, r0
 8087fac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8087fb0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8087fb4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8087fb8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8087fbc:	d002      	beq.n	8087fc4 <__adddf3+0x84>
 8087fbe:	4252      	negs	r2, r2
 8087fc0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8087fc4:	ea94 0f05 	teq	r4, r5
 8087fc8:	f000 80a7 	beq.w	808811a <__adddf3+0x1da>
 8087fcc:	f1a4 0401 	sub.w	r4, r4, #1
 8087fd0:	f1d5 0e20 	rsbs	lr, r5, #32
 8087fd4:	db0d      	blt.n	8087ff2 <__adddf3+0xb2>
 8087fd6:	fa02 fc0e 	lsl.w	ip, r2, lr
 8087fda:	fa22 f205 	lsr.w	r2, r2, r5
 8087fde:	1880      	adds	r0, r0, r2
 8087fe0:	f141 0100 	adc.w	r1, r1, #0
 8087fe4:	fa03 f20e 	lsl.w	r2, r3, lr
 8087fe8:	1880      	adds	r0, r0, r2
 8087fea:	fa43 f305 	asr.w	r3, r3, r5
 8087fee:	4159      	adcs	r1, r3
 8087ff0:	e00e      	b.n	8088010 <__adddf3+0xd0>
 8087ff2:	f1a5 0520 	sub.w	r5, r5, #32
 8087ff6:	f10e 0e20 	add.w	lr, lr, #32
 8087ffa:	2a01      	cmp	r2, #1
 8087ffc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8088000:	bf28      	it	cs
 8088002:	f04c 0c02 	orrcs.w	ip, ip, #2
 8088006:	fa43 f305 	asr.w	r3, r3, r5
 808800a:	18c0      	adds	r0, r0, r3
 808800c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8088010:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8088014:	d507      	bpl.n	8088026 <__adddf3+0xe6>
 8088016:	f04f 0e00 	mov.w	lr, #0
 808801a:	f1dc 0c00 	rsbs	ip, ip, #0
 808801e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8088022:	eb6e 0101 	sbc.w	r1, lr, r1
 8088026:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 808802a:	d31b      	bcc.n	8088064 <__adddf3+0x124>
 808802c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8088030:	d30c      	bcc.n	808804c <__adddf3+0x10c>
 8088032:	0849      	lsrs	r1, r1, #1
 8088034:	ea5f 0030 	movs.w	r0, r0, rrx
 8088038:	ea4f 0c3c 	mov.w	ip, ip, rrx
 808803c:	f104 0401 	add.w	r4, r4, #1
 8088040:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8088044:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8088048:	f080 809a 	bcs.w	8088180 <__adddf3+0x240>
 808804c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8088050:	bf08      	it	eq
 8088052:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8088056:	f150 0000 	adcs.w	r0, r0, #0
 808805a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808805e:	ea41 0105 	orr.w	r1, r1, r5
 8088062:	bd30      	pop	{r4, r5, pc}
 8088064:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8088068:	4140      	adcs	r0, r0
 808806a:	eb41 0101 	adc.w	r1, r1, r1
 808806e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8088072:	f1a4 0401 	sub.w	r4, r4, #1
 8088076:	d1e9      	bne.n	808804c <__adddf3+0x10c>
 8088078:	f091 0f00 	teq	r1, #0
 808807c:	bf04      	itt	eq
 808807e:	4601      	moveq	r1, r0
 8088080:	2000      	moveq	r0, #0
 8088082:	fab1 f381 	clz	r3, r1
 8088086:	bf08      	it	eq
 8088088:	3320      	addeq	r3, #32
 808808a:	f1a3 030b 	sub.w	r3, r3, #11
 808808e:	f1b3 0220 	subs.w	r2, r3, #32
 8088092:	da0c      	bge.n	80880ae <__adddf3+0x16e>
 8088094:	320c      	adds	r2, #12
 8088096:	dd08      	ble.n	80880aa <__adddf3+0x16a>
 8088098:	f102 0c14 	add.w	ip, r2, #20
 808809c:	f1c2 020c 	rsb	r2, r2, #12
 80880a0:	fa01 f00c 	lsl.w	r0, r1, ip
 80880a4:	fa21 f102 	lsr.w	r1, r1, r2
 80880a8:	e00c      	b.n	80880c4 <__adddf3+0x184>
 80880aa:	f102 0214 	add.w	r2, r2, #20
 80880ae:	bfd8      	it	le
 80880b0:	f1c2 0c20 	rsble	ip, r2, #32
 80880b4:	fa01 f102 	lsl.w	r1, r1, r2
 80880b8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80880bc:	bfdc      	itt	le
 80880be:	ea41 010c 	orrle.w	r1, r1, ip
 80880c2:	4090      	lslle	r0, r2
 80880c4:	1ae4      	subs	r4, r4, r3
 80880c6:	bfa2      	ittt	ge
 80880c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80880cc:	4329      	orrge	r1, r5
 80880ce:	bd30      	popge	{r4, r5, pc}
 80880d0:	ea6f 0404 	mvn.w	r4, r4
 80880d4:	3c1f      	subs	r4, #31
 80880d6:	da1c      	bge.n	8088112 <__adddf3+0x1d2>
 80880d8:	340c      	adds	r4, #12
 80880da:	dc0e      	bgt.n	80880fa <__adddf3+0x1ba>
 80880dc:	f104 0414 	add.w	r4, r4, #20
 80880e0:	f1c4 0220 	rsb	r2, r4, #32
 80880e4:	fa20 f004 	lsr.w	r0, r0, r4
 80880e8:	fa01 f302 	lsl.w	r3, r1, r2
 80880ec:	ea40 0003 	orr.w	r0, r0, r3
 80880f0:	fa21 f304 	lsr.w	r3, r1, r4
 80880f4:	ea45 0103 	orr.w	r1, r5, r3
 80880f8:	bd30      	pop	{r4, r5, pc}
 80880fa:	f1c4 040c 	rsb	r4, r4, #12
 80880fe:	f1c4 0220 	rsb	r2, r4, #32
 8088102:	fa20 f002 	lsr.w	r0, r0, r2
 8088106:	fa01 f304 	lsl.w	r3, r1, r4
 808810a:	ea40 0003 	orr.w	r0, r0, r3
 808810e:	4629      	mov	r1, r5
 8088110:	bd30      	pop	{r4, r5, pc}
 8088112:	fa21 f004 	lsr.w	r0, r1, r4
 8088116:	4629      	mov	r1, r5
 8088118:	bd30      	pop	{r4, r5, pc}
 808811a:	f094 0f00 	teq	r4, #0
 808811e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8088122:	bf06      	itte	eq
 8088124:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8088128:	3401      	addeq	r4, #1
 808812a:	3d01      	subne	r5, #1
 808812c:	e74e      	b.n	8087fcc <__adddf3+0x8c>
 808812e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8088132:	bf18      	it	ne
 8088134:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8088138:	d029      	beq.n	808818e <__adddf3+0x24e>
 808813a:	ea94 0f05 	teq	r4, r5
 808813e:	bf08      	it	eq
 8088140:	ea90 0f02 	teqeq	r0, r2
 8088144:	d005      	beq.n	8088152 <__adddf3+0x212>
 8088146:	ea54 0c00 	orrs.w	ip, r4, r0
 808814a:	bf04      	itt	eq
 808814c:	4619      	moveq	r1, r3
 808814e:	4610      	moveq	r0, r2
 8088150:	bd30      	pop	{r4, r5, pc}
 8088152:	ea91 0f03 	teq	r1, r3
 8088156:	bf1e      	ittt	ne
 8088158:	2100      	movne	r1, #0
 808815a:	2000      	movne	r0, #0
 808815c:	bd30      	popne	{r4, r5, pc}
 808815e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8088162:	d105      	bne.n	8088170 <__adddf3+0x230>
 8088164:	0040      	lsls	r0, r0, #1
 8088166:	4149      	adcs	r1, r1
 8088168:	bf28      	it	cs
 808816a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 808816e:	bd30      	pop	{r4, r5, pc}
 8088170:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8088174:	bf3c      	itt	cc
 8088176:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 808817a:	bd30      	popcc	{r4, r5, pc}
 808817c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8088180:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8088184:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8088188:	f04f 0000 	mov.w	r0, #0
 808818c:	bd30      	pop	{r4, r5, pc}
 808818e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8088192:	bf1a      	itte	ne
 8088194:	4619      	movne	r1, r3
 8088196:	4610      	movne	r0, r2
 8088198:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 808819c:	bf1c      	itt	ne
 808819e:	460b      	movne	r3, r1
 80881a0:	4602      	movne	r2, r0
 80881a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80881a6:	bf06      	itte	eq
 80881a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80881ac:	ea91 0f03 	teqeq	r1, r3
 80881b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80881b4:	bd30      	pop	{r4, r5, pc}
 80881b6:	bf00      	nop

080881b8 <__aeabi_ui2d>:
 80881b8:	f090 0f00 	teq	r0, #0
 80881bc:	bf04      	itt	eq
 80881be:	2100      	moveq	r1, #0
 80881c0:	4770      	bxeq	lr
 80881c2:	b530      	push	{r4, r5, lr}
 80881c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80881c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80881cc:	f04f 0500 	mov.w	r5, #0
 80881d0:	f04f 0100 	mov.w	r1, #0
 80881d4:	e750      	b.n	8088078 <__adddf3+0x138>
 80881d6:	bf00      	nop

080881d8 <__aeabi_i2d>:
 80881d8:	f090 0f00 	teq	r0, #0
 80881dc:	bf04      	itt	eq
 80881de:	2100      	moveq	r1, #0
 80881e0:	4770      	bxeq	lr
 80881e2:	b530      	push	{r4, r5, lr}
 80881e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80881e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80881ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80881f0:	bf48      	it	mi
 80881f2:	4240      	negmi	r0, r0
 80881f4:	f04f 0100 	mov.w	r1, #0
 80881f8:	e73e      	b.n	8088078 <__adddf3+0x138>
 80881fa:	bf00      	nop

080881fc <__aeabi_f2d>:
 80881fc:	0042      	lsls	r2, r0, #1
 80881fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8088202:	ea4f 0131 	mov.w	r1, r1, rrx
 8088206:	ea4f 7002 	mov.w	r0, r2, lsl #28
 808820a:	bf1f      	itttt	ne
 808820c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8088210:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8088214:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8088218:	4770      	bxne	lr
 808821a:	f092 0f00 	teq	r2, #0
 808821e:	bf14      	ite	ne
 8088220:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8088224:	4770      	bxeq	lr
 8088226:	b530      	push	{r4, r5, lr}
 8088228:	f44f 7460 	mov.w	r4, #896	; 0x380
 808822c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8088230:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8088234:	e720      	b.n	8088078 <__adddf3+0x138>
 8088236:	bf00      	nop

08088238 <__aeabi_ul2d>:
 8088238:	ea50 0201 	orrs.w	r2, r0, r1
 808823c:	bf08      	it	eq
 808823e:	4770      	bxeq	lr
 8088240:	b530      	push	{r4, r5, lr}
 8088242:	f04f 0500 	mov.w	r5, #0
 8088246:	e00a      	b.n	808825e <__aeabi_l2d+0x16>

08088248 <__aeabi_l2d>:
 8088248:	ea50 0201 	orrs.w	r2, r0, r1
 808824c:	bf08      	it	eq
 808824e:	4770      	bxeq	lr
 8088250:	b530      	push	{r4, r5, lr}
 8088252:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8088256:	d502      	bpl.n	808825e <__aeabi_l2d+0x16>
 8088258:	4240      	negs	r0, r0
 808825a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808825e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8088262:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8088266:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 808826a:	f43f aedc 	beq.w	8088026 <__adddf3+0xe6>
 808826e:	f04f 0203 	mov.w	r2, #3
 8088272:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8088276:	bf18      	it	ne
 8088278:	3203      	addne	r2, #3
 808827a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 808827e:	bf18      	it	ne
 8088280:	3203      	addne	r2, #3
 8088282:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8088286:	f1c2 0320 	rsb	r3, r2, #32
 808828a:	fa00 fc03 	lsl.w	ip, r0, r3
 808828e:	fa20 f002 	lsr.w	r0, r0, r2
 8088292:	fa01 fe03 	lsl.w	lr, r1, r3
 8088296:	ea40 000e 	orr.w	r0, r0, lr
 808829a:	fa21 f102 	lsr.w	r1, r1, r2
 808829e:	4414      	add	r4, r2
 80882a0:	e6c1      	b.n	8088026 <__adddf3+0xe6>
 80882a2:	bf00      	nop

080882a4 <__aeabi_dmul>:
 80882a4:	b570      	push	{r4, r5, r6, lr}
 80882a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80882aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80882ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80882b2:	bf1d      	ittte	ne
 80882b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80882b8:	ea94 0f0c 	teqne	r4, ip
 80882bc:	ea95 0f0c 	teqne	r5, ip
 80882c0:	f000 f8de 	bleq	8088480 <__aeabi_dmul+0x1dc>
 80882c4:	442c      	add	r4, r5
 80882c6:	ea81 0603 	eor.w	r6, r1, r3
 80882ca:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80882ce:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80882d2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80882d6:	bf18      	it	ne
 80882d8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80882dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80882e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80882e4:	d038      	beq.n	8088358 <__aeabi_dmul+0xb4>
 80882e6:	fba0 ce02 	umull	ip, lr, r0, r2
 80882ea:	f04f 0500 	mov.w	r5, #0
 80882ee:	fbe1 e502 	umlal	lr, r5, r1, r2
 80882f2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80882f6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80882fa:	f04f 0600 	mov.w	r6, #0
 80882fe:	fbe1 5603 	umlal	r5, r6, r1, r3
 8088302:	f09c 0f00 	teq	ip, #0
 8088306:	bf18      	it	ne
 8088308:	f04e 0e01 	orrne.w	lr, lr, #1
 808830c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8088310:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8088314:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8088318:	d204      	bcs.n	8088324 <__aeabi_dmul+0x80>
 808831a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 808831e:	416d      	adcs	r5, r5
 8088320:	eb46 0606 	adc.w	r6, r6, r6
 8088324:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8088328:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 808832c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8088330:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8088334:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8088338:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808833c:	bf88      	it	hi
 808833e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8088342:	d81e      	bhi.n	8088382 <__aeabi_dmul+0xde>
 8088344:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8088348:	bf08      	it	eq
 808834a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 808834e:	f150 0000 	adcs.w	r0, r0, #0
 8088352:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8088356:	bd70      	pop	{r4, r5, r6, pc}
 8088358:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 808835c:	ea46 0101 	orr.w	r1, r6, r1
 8088360:	ea40 0002 	orr.w	r0, r0, r2
 8088364:	ea81 0103 	eor.w	r1, r1, r3
 8088368:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 808836c:	bfc2      	ittt	gt
 808836e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8088372:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8088376:	bd70      	popgt	{r4, r5, r6, pc}
 8088378:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808837c:	f04f 0e00 	mov.w	lr, #0
 8088380:	3c01      	subs	r4, #1
 8088382:	f300 80ab 	bgt.w	80884dc <__aeabi_dmul+0x238>
 8088386:	f114 0f36 	cmn.w	r4, #54	; 0x36
 808838a:	bfde      	ittt	le
 808838c:	2000      	movle	r0, #0
 808838e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8088392:	bd70      	pople	{r4, r5, r6, pc}
 8088394:	f1c4 0400 	rsb	r4, r4, #0
 8088398:	3c20      	subs	r4, #32
 808839a:	da35      	bge.n	8088408 <__aeabi_dmul+0x164>
 808839c:	340c      	adds	r4, #12
 808839e:	dc1b      	bgt.n	80883d8 <__aeabi_dmul+0x134>
 80883a0:	f104 0414 	add.w	r4, r4, #20
 80883a4:	f1c4 0520 	rsb	r5, r4, #32
 80883a8:	fa00 f305 	lsl.w	r3, r0, r5
 80883ac:	fa20 f004 	lsr.w	r0, r0, r4
 80883b0:	fa01 f205 	lsl.w	r2, r1, r5
 80883b4:	ea40 0002 	orr.w	r0, r0, r2
 80883b8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80883bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80883c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80883c4:	fa21 f604 	lsr.w	r6, r1, r4
 80883c8:	eb42 0106 	adc.w	r1, r2, r6
 80883cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80883d0:	bf08      	it	eq
 80883d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80883d6:	bd70      	pop	{r4, r5, r6, pc}
 80883d8:	f1c4 040c 	rsb	r4, r4, #12
 80883dc:	f1c4 0520 	rsb	r5, r4, #32
 80883e0:	fa00 f304 	lsl.w	r3, r0, r4
 80883e4:	fa20 f005 	lsr.w	r0, r0, r5
 80883e8:	fa01 f204 	lsl.w	r2, r1, r4
 80883ec:	ea40 0002 	orr.w	r0, r0, r2
 80883f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80883f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80883f8:	f141 0100 	adc.w	r1, r1, #0
 80883fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8088400:	bf08      	it	eq
 8088402:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8088406:	bd70      	pop	{r4, r5, r6, pc}
 8088408:	f1c4 0520 	rsb	r5, r4, #32
 808840c:	fa00 f205 	lsl.w	r2, r0, r5
 8088410:	ea4e 0e02 	orr.w	lr, lr, r2
 8088414:	fa20 f304 	lsr.w	r3, r0, r4
 8088418:	fa01 f205 	lsl.w	r2, r1, r5
 808841c:	ea43 0302 	orr.w	r3, r3, r2
 8088420:	fa21 f004 	lsr.w	r0, r1, r4
 8088424:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8088428:	fa21 f204 	lsr.w	r2, r1, r4
 808842c:	ea20 0002 	bic.w	r0, r0, r2
 8088430:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8088434:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8088438:	bf08      	it	eq
 808843a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808843e:	bd70      	pop	{r4, r5, r6, pc}
 8088440:	f094 0f00 	teq	r4, #0
 8088444:	d10f      	bne.n	8088466 <__aeabi_dmul+0x1c2>
 8088446:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 808844a:	0040      	lsls	r0, r0, #1
 808844c:	eb41 0101 	adc.w	r1, r1, r1
 8088450:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8088454:	bf08      	it	eq
 8088456:	3c01      	subeq	r4, #1
 8088458:	d0f7      	beq.n	808844a <__aeabi_dmul+0x1a6>
 808845a:	ea41 0106 	orr.w	r1, r1, r6
 808845e:	f095 0f00 	teq	r5, #0
 8088462:	bf18      	it	ne
 8088464:	4770      	bxne	lr
 8088466:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 808846a:	0052      	lsls	r2, r2, #1
 808846c:	eb43 0303 	adc.w	r3, r3, r3
 8088470:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8088474:	bf08      	it	eq
 8088476:	3d01      	subeq	r5, #1
 8088478:	d0f7      	beq.n	808846a <__aeabi_dmul+0x1c6>
 808847a:	ea43 0306 	orr.w	r3, r3, r6
 808847e:	4770      	bx	lr
 8088480:	ea94 0f0c 	teq	r4, ip
 8088484:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8088488:	bf18      	it	ne
 808848a:	ea95 0f0c 	teqne	r5, ip
 808848e:	d00c      	beq.n	80884aa <__aeabi_dmul+0x206>
 8088490:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8088494:	bf18      	it	ne
 8088496:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808849a:	d1d1      	bne.n	8088440 <__aeabi_dmul+0x19c>
 808849c:	ea81 0103 	eor.w	r1, r1, r3
 80884a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80884a4:	f04f 0000 	mov.w	r0, #0
 80884a8:	bd70      	pop	{r4, r5, r6, pc}
 80884aa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80884ae:	bf06      	itte	eq
 80884b0:	4610      	moveq	r0, r2
 80884b2:	4619      	moveq	r1, r3
 80884b4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80884b8:	d019      	beq.n	80884ee <__aeabi_dmul+0x24a>
 80884ba:	ea94 0f0c 	teq	r4, ip
 80884be:	d102      	bne.n	80884c6 <__aeabi_dmul+0x222>
 80884c0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80884c4:	d113      	bne.n	80884ee <__aeabi_dmul+0x24a>
 80884c6:	ea95 0f0c 	teq	r5, ip
 80884ca:	d105      	bne.n	80884d8 <__aeabi_dmul+0x234>
 80884cc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80884d0:	bf1c      	itt	ne
 80884d2:	4610      	movne	r0, r2
 80884d4:	4619      	movne	r1, r3
 80884d6:	d10a      	bne.n	80884ee <__aeabi_dmul+0x24a>
 80884d8:	ea81 0103 	eor.w	r1, r1, r3
 80884dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80884e0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80884e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80884e8:	f04f 0000 	mov.w	r0, #0
 80884ec:	bd70      	pop	{r4, r5, r6, pc}
 80884ee:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80884f2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80884f6:	bd70      	pop	{r4, r5, r6, pc}

080884f8 <__aeabi_ddiv>:
 80884f8:	b570      	push	{r4, r5, r6, lr}
 80884fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80884fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8088502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8088506:	bf1d      	ittte	ne
 8088508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 808850c:	ea94 0f0c 	teqne	r4, ip
 8088510:	ea95 0f0c 	teqne	r5, ip
 8088514:	f000 f8a7 	bleq	8088666 <__aeabi_ddiv+0x16e>
 8088518:	eba4 0405 	sub.w	r4, r4, r5
 808851c:	ea81 0e03 	eor.w	lr, r1, r3
 8088520:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8088524:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8088528:	f000 8088 	beq.w	808863c <__aeabi_ddiv+0x144>
 808852c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8088530:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8088534:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8088538:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 808853c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8088540:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8088544:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8088548:	ea4f 2600 	mov.w	r6, r0, lsl #8
 808854c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8088550:	429d      	cmp	r5, r3
 8088552:	bf08      	it	eq
 8088554:	4296      	cmpeq	r6, r2
 8088556:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 808855a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 808855e:	d202      	bcs.n	8088566 <__aeabi_ddiv+0x6e>
 8088560:	085b      	lsrs	r3, r3, #1
 8088562:	ea4f 0232 	mov.w	r2, r2, rrx
 8088566:	1ab6      	subs	r6, r6, r2
 8088568:	eb65 0503 	sbc.w	r5, r5, r3
 808856c:	085b      	lsrs	r3, r3, #1
 808856e:	ea4f 0232 	mov.w	r2, r2, rrx
 8088572:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8088576:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 808857a:	ebb6 0e02 	subs.w	lr, r6, r2
 808857e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8088582:	bf22      	ittt	cs
 8088584:	1ab6      	subcs	r6, r6, r2
 8088586:	4675      	movcs	r5, lr
 8088588:	ea40 000c 	orrcs.w	r0, r0, ip
 808858c:	085b      	lsrs	r3, r3, #1
 808858e:	ea4f 0232 	mov.w	r2, r2, rrx
 8088592:	ebb6 0e02 	subs.w	lr, r6, r2
 8088596:	eb75 0e03 	sbcs.w	lr, r5, r3
 808859a:	bf22      	ittt	cs
 808859c:	1ab6      	subcs	r6, r6, r2
 808859e:	4675      	movcs	r5, lr
 80885a0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80885a4:	085b      	lsrs	r3, r3, #1
 80885a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80885aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80885ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80885b2:	bf22      	ittt	cs
 80885b4:	1ab6      	subcs	r6, r6, r2
 80885b6:	4675      	movcs	r5, lr
 80885b8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80885bc:	085b      	lsrs	r3, r3, #1
 80885be:	ea4f 0232 	mov.w	r2, r2, rrx
 80885c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80885c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80885ca:	bf22      	ittt	cs
 80885cc:	1ab6      	subcs	r6, r6, r2
 80885ce:	4675      	movcs	r5, lr
 80885d0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80885d4:	ea55 0e06 	orrs.w	lr, r5, r6
 80885d8:	d018      	beq.n	808860c <__aeabi_ddiv+0x114>
 80885da:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80885de:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80885e2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80885e6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80885ea:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80885ee:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80885f2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80885f6:	d1c0      	bne.n	808857a <__aeabi_ddiv+0x82>
 80885f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80885fc:	d10b      	bne.n	8088616 <__aeabi_ddiv+0x11e>
 80885fe:	ea41 0100 	orr.w	r1, r1, r0
 8088602:	f04f 0000 	mov.w	r0, #0
 8088606:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 808860a:	e7b6      	b.n	808857a <__aeabi_ddiv+0x82>
 808860c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8088610:	bf04      	itt	eq
 8088612:	4301      	orreq	r1, r0
 8088614:	2000      	moveq	r0, #0
 8088616:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808861a:	bf88      	it	hi
 808861c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8088620:	f63f aeaf 	bhi.w	8088382 <__aeabi_dmul+0xde>
 8088624:	ebb5 0c03 	subs.w	ip, r5, r3
 8088628:	bf04      	itt	eq
 808862a:	ebb6 0c02 	subseq.w	ip, r6, r2
 808862e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8088632:	f150 0000 	adcs.w	r0, r0, #0
 8088636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808863a:	bd70      	pop	{r4, r5, r6, pc}
 808863c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8088640:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8088644:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8088648:	bfc2      	ittt	gt
 808864a:	ebd4 050c 	rsbsgt	r5, r4, ip
 808864e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8088652:	bd70      	popgt	{r4, r5, r6, pc}
 8088654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8088658:	f04f 0e00 	mov.w	lr, #0
 808865c:	3c01      	subs	r4, #1
 808865e:	e690      	b.n	8088382 <__aeabi_dmul+0xde>
 8088660:	ea45 0e06 	orr.w	lr, r5, r6
 8088664:	e68d      	b.n	8088382 <__aeabi_dmul+0xde>
 8088666:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808866a:	ea94 0f0c 	teq	r4, ip
 808866e:	bf08      	it	eq
 8088670:	ea95 0f0c 	teqeq	r5, ip
 8088674:	f43f af3b 	beq.w	80884ee <__aeabi_dmul+0x24a>
 8088678:	ea94 0f0c 	teq	r4, ip
 808867c:	d10a      	bne.n	8088694 <__aeabi_ddiv+0x19c>
 808867e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8088682:	f47f af34 	bne.w	80884ee <__aeabi_dmul+0x24a>
 8088686:	ea95 0f0c 	teq	r5, ip
 808868a:	f47f af25 	bne.w	80884d8 <__aeabi_dmul+0x234>
 808868e:	4610      	mov	r0, r2
 8088690:	4619      	mov	r1, r3
 8088692:	e72c      	b.n	80884ee <__aeabi_dmul+0x24a>
 8088694:	ea95 0f0c 	teq	r5, ip
 8088698:	d106      	bne.n	80886a8 <__aeabi_ddiv+0x1b0>
 808869a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 808869e:	f43f aefd 	beq.w	808849c <__aeabi_dmul+0x1f8>
 80886a2:	4610      	mov	r0, r2
 80886a4:	4619      	mov	r1, r3
 80886a6:	e722      	b.n	80884ee <__aeabi_dmul+0x24a>
 80886a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80886ac:	bf18      	it	ne
 80886ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80886b2:	f47f aec5 	bne.w	8088440 <__aeabi_dmul+0x19c>
 80886b6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80886ba:	f47f af0d 	bne.w	80884d8 <__aeabi_dmul+0x234>
 80886be:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80886c2:	f47f aeeb 	bne.w	808849c <__aeabi_dmul+0x1f8>
 80886c6:	e712      	b.n	80884ee <__aeabi_dmul+0x24a>

080886c8 <__gedf2>:
 80886c8:	f04f 3cff 	mov.w	ip, #4294967295
 80886cc:	e006      	b.n	80886dc <__cmpdf2+0x4>
 80886ce:	bf00      	nop

080886d0 <__ledf2>:
 80886d0:	f04f 0c01 	mov.w	ip, #1
 80886d4:	e002      	b.n	80886dc <__cmpdf2+0x4>
 80886d6:	bf00      	nop

080886d8 <__cmpdf2>:
 80886d8:	f04f 0c01 	mov.w	ip, #1
 80886dc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80886e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80886e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80886e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80886ec:	bf18      	it	ne
 80886ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80886f2:	d01b      	beq.n	808872c <__cmpdf2+0x54>
 80886f4:	b001      	add	sp, #4
 80886f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80886fa:	bf0c      	ite	eq
 80886fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8088700:	ea91 0f03 	teqne	r1, r3
 8088704:	bf02      	ittt	eq
 8088706:	ea90 0f02 	teqeq	r0, r2
 808870a:	2000      	moveq	r0, #0
 808870c:	4770      	bxeq	lr
 808870e:	f110 0f00 	cmn.w	r0, #0
 8088712:	ea91 0f03 	teq	r1, r3
 8088716:	bf58      	it	pl
 8088718:	4299      	cmppl	r1, r3
 808871a:	bf08      	it	eq
 808871c:	4290      	cmpeq	r0, r2
 808871e:	bf2c      	ite	cs
 8088720:	17d8      	asrcs	r0, r3, #31
 8088722:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8088726:	f040 0001 	orr.w	r0, r0, #1
 808872a:	4770      	bx	lr
 808872c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8088730:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8088734:	d102      	bne.n	808873c <__cmpdf2+0x64>
 8088736:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808873a:	d107      	bne.n	808874c <__cmpdf2+0x74>
 808873c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8088740:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8088744:	d1d6      	bne.n	80886f4 <__cmpdf2+0x1c>
 8088746:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 808874a:	d0d3      	beq.n	80886f4 <__cmpdf2+0x1c>
 808874c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8088750:	4770      	bx	lr
 8088752:	bf00      	nop

08088754 <__aeabi_cdrcmple>:
 8088754:	4684      	mov	ip, r0
 8088756:	4610      	mov	r0, r2
 8088758:	4662      	mov	r2, ip
 808875a:	468c      	mov	ip, r1
 808875c:	4619      	mov	r1, r3
 808875e:	4663      	mov	r3, ip
 8088760:	e000      	b.n	8088764 <__aeabi_cdcmpeq>
 8088762:	bf00      	nop

08088764 <__aeabi_cdcmpeq>:
 8088764:	b501      	push	{r0, lr}
 8088766:	f7ff ffb7 	bl	80886d8 <__cmpdf2>
 808876a:	2800      	cmp	r0, #0
 808876c:	bf48      	it	mi
 808876e:	f110 0f00 	cmnmi.w	r0, #0
 8088772:	bd01      	pop	{r0, pc}

08088774 <__aeabi_dcmpeq>:
 8088774:	f84d ed08 	str.w	lr, [sp, #-8]!
 8088778:	f7ff fff4 	bl	8088764 <__aeabi_cdcmpeq>
 808877c:	bf0c      	ite	eq
 808877e:	2001      	moveq	r0, #1
 8088780:	2000      	movne	r0, #0
 8088782:	f85d fb08 	ldr.w	pc, [sp], #8
 8088786:	bf00      	nop

08088788 <__aeabi_dcmplt>:
 8088788:	f84d ed08 	str.w	lr, [sp, #-8]!
 808878c:	f7ff ffea 	bl	8088764 <__aeabi_cdcmpeq>
 8088790:	bf34      	ite	cc
 8088792:	2001      	movcc	r0, #1
 8088794:	2000      	movcs	r0, #0
 8088796:	f85d fb08 	ldr.w	pc, [sp], #8
 808879a:	bf00      	nop

0808879c <__aeabi_dcmple>:
 808879c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80887a0:	f7ff ffe0 	bl	8088764 <__aeabi_cdcmpeq>
 80887a4:	bf94      	ite	ls
 80887a6:	2001      	movls	r0, #1
 80887a8:	2000      	movhi	r0, #0
 80887aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80887ae:	bf00      	nop

080887b0 <__aeabi_dcmpge>:
 80887b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80887b4:	f7ff ffce 	bl	8088754 <__aeabi_cdrcmple>
 80887b8:	bf94      	ite	ls
 80887ba:	2001      	movls	r0, #1
 80887bc:	2000      	movhi	r0, #0
 80887be:	f85d fb08 	ldr.w	pc, [sp], #8
 80887c2:	bf00      	nop

080887c4 <__aeabi_dcmpgt>:
 80887c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80887c8:	f7ff ffc4 	bl	8088754 <__aeabi_cdrcmple>
 80887cc:	bf34      	ite	cc
 80887ce:	2001      	movcc	r0, #1
 80887d0:	2000      	movcs	r0, #0
 80887d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80887d6:	bf00      	nop

080887d8 <__aeabi_dcmpun>:
 80887d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80887dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80887e0:	d102      	bne.n	80887e8 <__aeabi_dcmpun+0x10>
 80887e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80887e6:	d10a      	bne.n	80887fe <__aeabi_dcmpun+0x26>
 80887e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80887ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80887f0:	d102      	bne.n	80887f8 <__aeabi_dcmpun+0x20>
 80887f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80887f6:	d102      	bne.n	80887fe <__aeabi_dcmpun+0x26>
 80887f8:	f04f 0000 	mov.w	r0, #0
 80887fc:	4770      	bx	lr
 80887fe:	f04f 0001 	mov.w	r0, #1
 8088802:	4770      	bx	lr

08088804 <__aeabi_d2iz>:
 8088804:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8088808:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 808880c:	d215      	bcs.n	808883a <__aeabi_d2iz+0x36>
 808880e:	d511      	bpl.n	8088834 <__aeabi_d2iz+0x30>
 8088810:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8088814:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8088818:	d912      	bls.n	8088840 <__aeabi_d2iz+0x3c>
 808881a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808881e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8088822:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8088826:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808882a:	fa23 f002 	lsr.w	r0, r3, r2
 808882e:	bf18      	it	ne
 8088830:	4240      	negne	r0, r0
 8088832:	4770      	bx	lr
 8088834:	f04f 0000 	mov.w	r0, #0
 8088838:	4770      	bx	lr
 808883a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808883e:	d105      	bne.n	808884c <__aeabi_d2iz+0x48>
 8088840:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8088844:	bf08      	it	eq
 8088846:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808884a:	4770      	bx	lr
 808884c:	f04f 0000 	mov.w	r0, #0
 8088850:	4770      	bx	lr
 8088852:	bf00      	nop

08088854 <__aeabi_d2uiz>:
 8088854:	004a      	lsls	r2, r1, #1
 8088856:	d211      	bcs.n	808887c <__aeabi_d2uiz+0x28>
 8088858:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 808885c:	d211      	bcs.n	8088882 <__aeabi_d2uiz+0x2e>
 808885e:	d50d      	bpl.n	808887c <__aeabi_d2uiz+0x28>
 8088860:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8088864:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8088868:	d40e      	bmi.n	8088888 <__aeabi_d2uiz+0x34>
 808886a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808886e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8088872:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8088876:	fa23 f002 	lsr.w	r0, r3, r2
 808887a:	4770      	bx	lr
 808887c:	f04f 0000 	mov.w	r0, #0
 8088880:	4770      	bx	lr
 8088882:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8088886:	d102      	bne.n	808888e <__aeabi_d2uiz+0x3a>
 8088888:	f04f 30ff 	mov.w	r0, #4294967295
 808888c:	4770      	bx	lr
 808888e:	f04f 0000 	mov.w	r0, #0
 8088892:	4770      	bx	lr

08088894 <__aeabi_d2f>:
 8088894:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8088898:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 808889c:	bf24      	itt	cs
 808889e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80888a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80888a6:	d90d      	bls.n	80888c4 <__aeabi_d2f+0x30>
 80888a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80888ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80888b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80888b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80888b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80888bc:	bf08      	it	eq
 80888be:	f020 0001 	biceq.w	r0, r0, #1
 80888c2:	4770      	bx	lr
 80888c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80888c8:	d121      	bne.n	808890e <__aeabi_d2f+0x7a>
 80888ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80888ce:	bfbc      	itt	lt
 80888d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80888d4:	4770      	bxlt	lr
 80888d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80888da:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80888de:	f1c2 0218 	rsb	r2, r2, #24
 80888e2:	f1c2 0c20 	rsb	ip, r2, #32
 80888e6:	fa10 f30c 	lsls.w	r3, r0, ip
 80888ea:	fa20 f002 	lsr.w	r0, r0, r2
 80888ee:	bf18      	it	ne
 80888f0:	f040 0001 	orrne.w	r0, r0, #1
 80888f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80888f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80888fc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8088900:	ea40 000c 	orr.w	r0, r0, ip
 8088904:	fa23 f302 	lsr.w	r3, r3, r2
 8088908:	ea4f 0343 	mov.w	r3, r3, lsl #1
 808890c:	e7cc      	b.n	80888a8 <__aeabi_d2f+0x14>
 808890e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8088912:	d107      	bne.n	8088924 <__aeabi_d2f+0x90>
 8088914:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8088918:	bf1e      	ittt	ne
 808891a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 808891e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8088922:	4770      	bxne	lr
 8088924:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8088928:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808892c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8088930:	4770      	bx	lr
 8088932:	bf00      	nop

08088934 <__aeabi_frsub>:
 8088934:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8088938:	e002      	b.n	8088940 <__addsf3>
 808893a:	bf00      	nop

0808893c <__aeabi_fsub>:
 808893c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08088940 <__addsf3>:
 8088940:	0042      	lsls	r2, r0, #1
 8088942:	bf1f      	itttt	ne
 8088944:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8088948:	ea92 0f03 	teqne	r2, r3
 808894c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8088950:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8088954:	d06a      	beq.n	8088a2c <__addsf3+0xec>
 8088956:	ea4f 6212 	mov.w	r2, r2, lsr #24
 808895a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 808895e:	bfc1      	itttt	gt
 8088960:	18d2      	addgt	r2, r2, r3
 8088962:	4041      	eorgt	r1, r0
 8088964:	4048      	eorgt	r0, r1
 8088966:	4041      	eorgt	r1, r0
 8088968:	bfb8      	it	lt
 808896a:	425b      	neglt	r3, r3
 808896c:	2b19      	cmp	r3, #25
 808896e:	bf88      	it	hi
 8088970:	4770      	bxhi	lr
 8088972:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8088976:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808897a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 808897e:	bf18      	it	ne
 8088980:	4240      	negne	r0, r0
 8088982:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8088986:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 808898a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 808898e:	bf18      	it	ne
 8088990:	4249      	negne	r1, r1
 8088992:	ea92 0f03 	teq	r2, r3
 8088996:	d03f      	beq.n	8088a18 <__addsf3+0xd8>
 8088998:	f1a2 0201 	sub.w	r2, r2, #1
 808899c:	fa41 fc03 	asr.w	ip, r1, r3
 80889a0:	eb10 000c 	adds.w	r0, r0, ip
 80889a4:	f1c3 0320 	rsb	r3, r3, #32
 80889a8:	fa01 f103 	lsl.w	r1, r1, r3
 80889ac:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80889b0:	d502      	bpl.n	80889b8 <__addsf3+0x78>
 80889b2:	4249      	negs	r1, r1
 80889b4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80889b8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80889bc:	d313      	bcc.n	80889e6 <__addsf3+0xa6>
 80889be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80889c2:	d306      	bcc.n	80889d2 <__addsf3+0x92>
 80889c4:	0840      	lsrs	r0, r0, #1
 80889c6:	ea4f 0131 	mov.w	r1, r1, rrx
 80889ca:	f102 0201 	add.w	r2, r2, #1
 80889ce:	2afe      	cmp	r2, #254	; 0xfe
 80889d0:	d251      	bcs.n	8088a76 <__addsf3+0x136>
 80889d2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80889d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80889da:	bf08      	it	eq
 80889dc:	f020 0001 	biceq.w	r0, r0, #1
 80889e0:	ea40 0003 	orr.w	r0, r0, r3
 80889e4:	4770      	bx	lr
 80889e6:	0049      	lsls	r1, r1, #1
 80889e8:	eb40 0000 	adc.w	r0, r0, r0
 80889ec:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80889f0:	f1a2 0201 	sub.w	r2, r2, #1
 80889f4:	d1ed      	bne.n	80889d2 <__addsf3+0x92>
 80889f6:	fab0 fc80 	clz	ip, r0
 80889fa:	f1ac 0c08 	sub.w	ip, ip, #8
 80889fe:	ebb2 020c 	subs.w	r2, r2, ip
 8088a02:	fa00 f00c 	lsl.w	r0, r0, ip
 8088a06:	bfaa      	itet	ge
 8088a08:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8088a0c:	4252      	neglt	r2, r2
 8088a0e:	4318      	orrge	r0, r3
 8088a10:	bfbc      	itt	lt
 8088a12:	40d0      	lsrlt	r0, r2
 8088a14:	4318      	orrlt	r0, r3
 8088a16:	4770      	bx	lr
 8088a18:	f092 0f00 	teq	r2, #0
 8088a1c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8088a20:	bf06      	itte	eq
 8088a22:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8088a26:	3201      	addeq	r2, #1
 8088a28:	3b01      	subne	r3, #1
 8088a2a:	e7b5      	b.n	8088998 <__addsf3+0x58>
 8088a2c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8088a30:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8088a34:	bf18      	it	ne
 8088a36:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8088a3a:	d021      	beq.n	8088a80 <__addsf3+0x140>
 8088a3c:	ea92 0f03 	teq	r2, r3
 8088a40:	d004      	beq.n	8088a4c <__addsf3+0x10c>
 8088a42:	f092 0f00 	teq	r2, #0
 8088a46:	bf08      	it	eq
 8088a48:	4608      	moveq	r0, r1
 8088a4a:	4770      	bx	lr
 8088a4c:	ea90 0f01 	teq	r0, r1
 8088a50:	bf1c      	itt	ne
 8088a52:	2000      	movne	r0, #0
 8088a54:	4770      	bxne	lr
 8088a56:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8088a5a:	d104      	bne.n	8088a66 <__addsf3+0x126>
 8088a5c:	0040      	lsls	r0, r0, #1
 8088a5e:	bf28      	it	cs
 8088a60:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8088a64:	4770      	bx	lr
 8088a66:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8088a6a:	bf3c      	itt	cc
 8088a6c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8088a70:	4770      	bxcc	lr
 8088a72:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8088a76:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8088a7a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8088a7e:	4770      	bx	lr
 8088a80:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8088a84:	bf16      	itet	ne
 8088a86:	4608      	movne	r0, r1
 8088a88:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8088a8c:	4601      	movne	r1, r0
 8088a8e:	0242      	lsls	r2, r0, #9
 8088a90:	bf06      	itte	eq
 8088a92:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8088a96:	ea90 0f01 	teqeq	r0, r1
 8088a9a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8088a9e:	4770      	bx	lr

08088aa0 <__aeabi_ui2f>:
 8088aa0:	f04f 0300 	mov.w	r3, #0
 8088aa4:	e004      	b.n	8088ab0 <__aeabi_i2f+0x8>
 8088aa6:	bf00      	nop

08088aa8 <__aeabi_i2f>:
 8088aa8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8088aac:	bf48      	it	mi
 8088aae:	4240      	negmi	r0, r0
 8088ab0:	ea5f 0c00 	movs.w	ip, r0
 8088ab4:	bf08      	it	eq
 8088ab6:	4770      	bxeq	lr
 8088ab8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8088abc:	4601      	mov	r1, r0
 8088abe:	f04f 0000 	mov.w	r0, #0
 8088ac2:	e01c      	b.n	8088afe <__aeabi_l2f+0x2a>

08088ac4 <__aeabi_ul2f>:
 8088ac4:	ea50 0201 	orrs.w	r2, r0, r1
 8088ac8:	bf08      	it	eq
 8088aca:	4770      	bxeq	lr
 8088acc:	f04f 0300 	mov.w	r3, #0
 8088ad0:	e00a      	b.n	8088ae8 <__aeabi_l2f+0x14>
 8088ad2:	bf00      	nop

08088ad4 <__aeabi_l2f>:
 8088ad4:	ea50 0201 	orrs.w	r2, r0, r1
 8088ad8:	bf08      	it	eq
 8088ada:	4770      	bxeq	lr
 8088adc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8088ae0:	d502      	bpl.n	8088ae8 <__aeabi_l2f+0x14>
 8088ae2:	4240      	negs	r0, r0
 8088ae4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8088ae8:	ea5f 0c01 	movs.w	ip, r1
 8088aec:	bf02      	ittt	eq
 8088aee:	4684      	moveq	ip, r0
 8088af0:	4601      	moveq	r1, r0
 8088af2:	2000      	moveq	r0, #0
 8088af4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8088af8:	bf08      	it	eq
 8088afa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8088afe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8088b02:	fabc f28c 	clz	r2, ip
 8088b06:	3a08      	subs	r2, #8
 8088b08:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8088b0c:	db10      	blt.n	8088b30 <__aeabi_l2f+0x5c>
 8088b0e:	fa01 fc02 	lsl.w	ip, r1, r2
 8088b12:	4463      	add	r3, ip
 8088b14:	fa00 fc02 	lsl.w	ip, r0, r2
 8088b18:	f1c2 0220 	rsb	r2, r2, #32
 8088b1c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8088b20:	fa20 f202 	lsr.w	r2, r0, r2
 8088b24:	eb43 0002 	adc.w	r0, r3, r2
 8088b28:	bf08      	it	eq
 8088b2a:	f020 0001 	biceq.w	r0, r0, #1
 8088b2e:	4770      	bx	lr
 8088b30:	f102 0220 	add.w	r2, r2, #32
 8088b34:	fa01 fc02 	lsl.w	ip, r1, r2
 8088b38:	f1c2 0220 	rsb	r2, r2, #32
 8088b3c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8088b40:	fa21 f202 	lsr.w	r2, r1, r2
 8088b44:	eb43 0002 	adc.w	r0, r3, r2
 8088b48:	bf08      	it	eq
 8088b4a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8088b4e:	4770      	bx	lr

08088b50 <__aeabi_fmul>:
 8088b50:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8088b54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8088b58:	bf1e      	ittt	ne
 8088b5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8088b5e:	ea92 0f0c 	teqne	r2, ip
 8088b62:	ea93 0f0c 	teqne	r3, ip
 8088b66:	d06f      	beq.n	8088c48 <__aeabi_fmul+0xf8>
 8088b68:	441a      	add	r2, r3
 8088b6a:	ea80 0c01 	eor.w	ip, r0, r1
 8088b6e:	0240      	lsls	r0, r0, #9
 8088b70:	bf18      	it	ne
 8088b72:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8088b76:	d01e      	beq.n	8088bb6 <__aeabi_fmul+0x66>
 8088b78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8088b7c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8088b80:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8088b84:	fba0 3101 	umull	r3, r1, r0, r1
 8088b88:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8088b8c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8088b90:	bf3e      	ittt	cc
 8088b92:	0049      	lslcc	r1, r1, #1
 8088b94:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8088b98:	005b      	lslcc	r3, r3, #1
 8088b9a:	ea40 0001 	orr.w	r0, r0, r1
 8088b9e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8088ba2:	2afd      	cmp	r2, #253	; 0xfd
 8088ba4:	d81d      	bhi.n	8088be2 <__aeabi_fmul+0x92>
 8088ba6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8088baa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8088bae:	bf08      	it	eq
 8088bb0:	f020 0001 	biceq.w	r0, r0, #1
 8088bb4:	4770      	bx	lr
 8088bb6:	f090 0f00 	teq	r0, #0
 8088bba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8088bbe:	bf08      	it	eq
 8088bc0:	0249      	lsleq	r1, r1, #9
 8088bc2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8088bc6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8088bca:	3a7f      	subs	r2, #127	; 0x7f
 8088bcc:	bfc2      	ittt	gt
 8088bce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8088bd2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8088bd6:	4770      	bxgt	lr
 8088bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8088bdc:	f04f 0300 	mov.w	r3, #0
 8088be0:	3a01      	subs	r2, #1
 8088be2:	dc5d      	bgt.n	8088ca0 <__aeabi_fmul+0x150>
 8088be4:	f112 0f19 	cmn.w	r2, #25
 8088be8:	bfdc      	itt	le
 8088bea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8088bee:	4770      	bxle	lr
 8088bf0:	f1c2 0200 	rsb	r2, r2, #0
 8088bf4:	0041      	lsls	r1, r0, #1
 8088bf6:	fa21 f102 	lsr.w	r1, r1, r2
 8088bfa:	f1c2 0220 	rsb	r2, r2, #32
 8088bfe:	fa00 fc02 	lsl.w	ip, r0, r2
 8088c02:	ea5f 0031 	movs.w	r0, r1, rrx
 8088c06:	f140 0000 	adc.w	r0, r0, #0
 8088c0a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8088c0e:	bf08      	it	eq
 8088c10:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8088c14:	4770      	bx	lr
 8088c16:	f092 0f00 	teq	r2, #0
 8088c1a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8088c1e:	bf02      	ittt	eq
 8088c20:	0040      	lsleq	r0, r0, #1
 8088c22:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8088c26:	3a01      	subeq	r2, #1
 8088c28:	d0f9      	beq.n	8088c1e <__aeabi_fmul+0xce>
 8088c2a:	ea40 000c 	orr.w	r0, r0, ip
 8088c2e:	f093 0f00 	teq	r3, #0
 8088c32:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8088c36:	bf02      	ittt	eq
 8088c38:	0049      	lsleq	r1, r1, #1
 8088c3a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8088c3e:	3b01      	subeq	r3, #1
 8088c40:	d0f9      	beq.n	8088c36 <__aeabi_fmul+0xe6>
 8088c42:	ea41 010c 	orr.w	r1, r1, ip
 8088c46:	e78f      	b.n	8088b68 <__aeabi_fmul+0x18>
 8088c48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8088c4c:	ea92 0f0c 	teq	r2, ip
 8088c50:	bf18      	it	ne
 8088c52:	ea93 0f0c 	teqne	r3, ip
 8088c56:	d00a      	beq.n	8088c6e <__aeabi_fmul+0x11e>
 8088c58:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8088c5c:	bf18      	it	ne
 8088c5e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8088c62:	d1d8      	bne.n	8088c16 <__aeabi_fmul+0xc6>
 8088c64:	ea80 0001 	eor.w	r0, r0, r1
 8088c68:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8088c6c:	4770      	bx	lr
 8088c6e:	f090 0f00 	teq	r0, #0
 8088c72:	bf17      	itett	ne
 8088c74:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8088c78:	4608      	moveq	r0, r1
 8088c7a:	f091 0f00 	teqne	r1, #0
 8088c7e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8088c82:	d014      	beq.n	8088cae <__aeabi_fmul+0x15e>
 8088c84:	ea92 0f0c 	teq	r2, ip
 8088c88:	d101      	bne.n	8088c8e <__aeabi_fmul+0x13e>
 8088c8a:	0242      	lsls	r2, r0, #9
 8088c8c:	d10f      	bne.n	8088cae <__aeabi_fmul+0x15e>
 8088c8e:	ea93 0f0c 	teq	r3, ip
 8088c92:	d103      	bne.n	8088c9c <__aeabi_fmul+0x14c>
 8088c94:	024b      	lsls	r3, r1, #9
 8088c96:	bf18      	it	ne
 8088c98:	4608      	movne	r0, r1
 8088c9a:	d108      	bne.n	8088cae <__aeabi_fmul+0x15e>
 8088c9c:	ea80 0001 	eor.w	r0, r0, r1
 8088ca0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8088ca4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8088ca8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8088cac:	4770      	bx	lr
 8088cae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8088cb2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8088cb6:	4770      	bx	lr

08088cb8 <__aeabi_fdiv>:
 8088cb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8088cbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8088cc0:	bf1e      	ittt	ne
 8088cc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8088cc6:	ea92 0f0c 	teqne	r2, ip
 8088cca:	ea93 0f0c 	teqne	r3, ip
 8088cce:	d069      	beq.n	8088da4 <__aeabi_fdiv+0xec>
 8088cd0:	eba2 0203 	sub.w	r2, r2, r3
 8088cd4:	ea80 0c01 	eor.w	ip, r0, r1
 8088cd8:	0249      	lsls	r1, r1, #9
 8088cda:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8088cde:	d037      	beq.n	8088d50 <__aeabi_fdiv+0x98>
 8088ce0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8088ce4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8088ce8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8088cec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8088cf0:	428b      	cmp	r3, r1
 8088cf2:	bf38      	it	cc
 8088cf4:	005b      	lslcc	r3, r3, #1
 8088cf6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8088cfa:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8088cfe:	428b      	cmp	r3, r1
 8088d00:	bf24      	itt	cs
 8088d02:	1a5b      	subcs	r3, r3, r1
 8088d04:	ea40 000c 	orrcs.w	r0, r0, ip
 8088d08:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8088d0c:	bf24      	itt	cs
 8088d0e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8088d12:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8088d16:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8088d1a:	bf24      	itt	cs
 8088d1c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8088d20:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8088d24:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8088d28:	bf24      	itt	cs
 8088d2a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8088d2e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8088d32:	011b      	lsls	r3, r3, #4
 8088d34:	bf18      	it	ne
 8088d36:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8088d3a:	d1e0      	bne.n	8088cfe <__aeabi_fdiv+0x46>
 8088d3c:	2afd      	cmp	r2, #253	; 0xfd
 8088d3e:	f63f af50 	bhi.w	8088be2 <__aeabi_fmul+0x92>
 8088d42:	428b      	cmp	r3, r1
 8088d44:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8088d48:	bf08      	it	eq
 8088d4a:	f020 0001 	biceq.w	r0, r0, #1
 8088d4e:	4770      	bx	lr
 8088d50:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8088d54:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8088d58:	327f      	adds	r2, #127	; 0x7f
 8088d5a:	bfc2      	ittt	gt
 8088d5c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8088d60:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8088d64:	4770      	bxgt	lr
 8088d66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8088d6a:	f04f 0300 	mov.w	r3, #0
 8088d6e:	3a01      	subs	r2, #1
 8088d70:	e737      	b.n	8088be2 <__aeabi_fmul+0x92>
 8088d72:	f092 0f00 	teq	r2, #0
 8088d76:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8088d7a:	bf02      	ittt	eq
 8088d7c:	0040      	lsleq	r0, r0, #1
 8088d7e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8088d82:	3a01      	subeq	r2, #1
 8088d84:	d0f9      	beq.n	8088d7a <__aeabi_fdiv+0xc2>
 8088d86:	ea40 000c 	orr.w	r0, r0, ip
 8088d8a:	f093 0f00 	teq	r3, #0
 8088d8e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8088d92:	bf02      	ittt	eq
 8088d94:	0049      	lsleq	r1, r1, #1
 8088d96:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8088d9a:	3b01      	subeq	r3, #1
 8088d9c:	d0f9      	beq.n	8088d92 <__aeabi_fdiv+0xda>
 8088d9e:	ea41 010c 	orr.w	r1, r1, ip
 8088da2:	e795      	b.n	8088cd0 <__aeabi_fdiv+0x18>
 8088da4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8088da8:	ea92 0f0c 	teq	r2, ip
 8088dac:	d108      	bne.n	8088dc0 <__aeabi_fdiv+0x108>
 8088dae:	0242      	lsls	r2, r0, #9
 8088db0:	f47f af7d 	bne.w	8088cae <__aeabi_fmul+0x15e>
 8088db4:	ea93 0f0c 	teq	r3, ip
 8088db8:	f47f af70 	bne.w	8088c9c <__aeabi_fmul+0x14c>
 8088dbc:	4608      	mov	r0, r1
 8088dbe:	e776      	b.n	8088cae <__aeabi_fmul+0x15e>
 8088dc0:	ea93 0f0c 	teq	r3, ip
 8088dc4:	d104      	bne.n	8088dd0 <__aeabi_fdiv+0x118>
 8088dc6:	024b      	lsls	r3, r1, #9
 8088dc8:	f43f af4c 	beq.w	8088c64 <__aeabi_fmul+0x114>
 8088dcc:	4608      	mov	r0, r1
 8088dce:	e76e      	b.n	8088cae <__aeabi_fmul+0x15e>
 8088dd0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8088dd4:	bf18      	it	ne
 8088dd6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8088dda:	d1ca      	bne.n	8088d72 <__aeabi_fdiv+0xba>
 8088ddc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8088de0:	f47f af5c 	bne.w	8088c9c <__aeabi_fmul+0x14c>
 8088de4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8088de8:	f47f af3c 	bne.w	8088c64 <__aeabi_fmul+0x114>
 8088dec:	e75f      	b.n	8088cae <__aeabi_fmul+0x15e>
 8088dee:	bf00      	nop

08088df0 <__gesf2>:
 8088df0:	f04f 3cff 	mov.w	ip, #4294967295
 8088df4:	e006      	b.n	8088e04 <__cmpsf2+0x4>
 8088df6:	bf00      	nop

08088df8 <__lesf2>:
 8088df8:	f04f 0c01 	mov.w	ip, #1
 8088dfc:	e002      	b.n	8088e04 <__cmpsf2+0x4>
 8088dfe:	bf00      	nop

08088e00 <__cmpsf2>:
 8088e00:	f04f 0c01 	mov.w	ip, #1
 8088e04:	f84d cd04 	str.w	ip, [sp, #-4]!
 8088e08:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8088e0c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8088e10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8088e14:	bf18      	it	ne
 8088e16:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8088e1a:	d011      	beq.n	8088e40 <__cmpsf2+0x40>
 8088e1c:	b001      	add	sp, #4
 8088e1e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8088e22:	bf18      	it	ne
 8088e24:	ea90 0f01 	teqne	r0, r1
 8088e28:	bf58      	it	pl
 8088e2a:	ebb2 0003 	subspl.w	r0, r2, r3
 8088e2e:	bf88      	it	hi
 8088e30:	17c8      	asrhi	r0, r1, #31
 8088e32:	bf38      	it	cc
 8088e34:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8088e38:	bf18      	it	ne
 8088e3a:	f040 0001 	orrne.w	r0, r0, #1
 8088e3e:	4770      	bx	lr
 8088e40:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8088e44:	d102      	bne.n	8088e4c <__cmpsf2+0x4c>
 8088e46:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8088e4a:	d105      	bne.n	8088e58 <__cmpsf2+0x58>
 8088e4c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8088e50:	d1e4      	bne.n	8088e1c <__cmpsf2+0x1c>
 8088e52:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8088e56:	d0e1      	beq.n	8088e1c <__cmpsf2+0x1c>
 8088e58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8088e5c:	4770      	bx	lr
 8088e5e:	bf00      	nop

08088e60 <__aeabi_cfrcmple>:
 8088e60:	4684      	mov	ip, r0
 8088e62:	4608      	mov	r0, r1
 8088e64:	4661      	mov	r1, ip
 8088e66:	e7ff      	b.n	8088e68 <__aeabi_cfcmpeq>

08088e68 <__aeabi_cfcmpeq>:
 8088e68:	b50f      	push	{r0, r1, r2, r3, lr}
 8088e6a:	f7ff ffc9 	bl	8088e00 <__cmpsf2>
 8088e6e:	2800      	cmp	r0, #0
 8088e70:	bf48      	it	mi
 8088e72:	f110 0f00 	cmnmi.w	r0, #0
 8088e76:	bd0f      	pop	{r0, r1, r2, r3, pc}

08088e78 <__aeabi_fcmpeq>:
 8088e78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8088e7c:	f7ff fff4 	bl	8088e68 <__aeabi_cfcmpeq>
 8088e80:	bf0c      	ite	eq
 8088e82:	2001      	moveq	r0, #1
 8088e84:	2000      	movne	r0, #0
 8088e86:	f85d fb08 	ldr.w	pc, [sp], #8
 8088e8a:	bf00      	nop

08088e8c <__aeabi_fcmplt>:
 8088e8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8088e90:	f7ff ffea 	bl	8088e68 <__aeabi_cfcmpeq>
 8088e94:	bf34      	ite	cc
 8088e96:	2001      	movcc	r0, #1
 8088e98:	2000      	movcs	r0, #0
 8088e9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8088e9e:	bf00      	nop

08088ea0 <__aeabi_fcmple>:
 8088ea0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8088ea4:	f7ff ffe0 	bl	8088e68 <__aeabi_cfcmpeq>
 8088ea8:	bf94      	ite	ls
 8088eaa:	2001      	movls	r0, #1
 8088eac:	2000      	movhi	r0, #0
 8088eae:	f85d fb08 	ldr.w	pc, [sp], #8
 8088eb2:	bf00      	nop

08088eb4 <__aeabi_fcmpge>:
 8088eb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8088eb8:	f7ff ffd2 	bl	8088e60 <__aeabi_cfrcmple>
 8088ebc:	bf94      	ite	ls
 8088ebe:	2001      	movls	r0, #1
 8088ec0:	2000      	movhi	r0, #0
 8088ec2:	f85d fb08 	ldr.w	pc, [sp], #8
 8088ec6:	bf00      	nop

08088ec8 <__aeabi_fcmpgt>:
 8088ec8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8088ecc:	f7ff ffc8 	bl	8088e60 <__aeabi_cfrcmple>
 8088ed0:	bf34      	ite	cc
 8088ed2:	2001      	movcc	r0, #1
 8088ed4:	2000      	movcs	r0, #0
 8088ed6:	f85d fb08 	ldr.w	pc, [sp], #8
 8088eda:	bf00      	nop

08088edc <__aeabi_fcmpun>:
 8088edc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8088ee0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8088ee4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8088ee8:	d102      	bne.n	8088ef0 <__aeabi_fcmpun+0x14>
 8088eea:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8088eee:	d108      	bne.n	8088f02 <__aeabi_fcmpun+0x26>
 8088ef0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8088ef4:	d102      	bne.n	8088efc <__aeabi_fcmpun+0x20>
 8088ef6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8088efa:	d102      	bne.n	8088f02 <__aeabi_fcmpun+0x26>
 8088efc:	f04f 0000 	mov.w	r0, #0
 8088f00:	4770      	bx	lr
 8088f02:	f04f 0001 	mov.w	r0, #1
 8088f06:	4770      	bx	lr

08088f08 <__aeabi_f2iz>:
 8088f08:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8088f0c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8088f10:	d30f      	bcc.n	8088f32 <__aeabi_f2iz+0x2a>
 8088f12:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8088f16:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8088f1a:	d90d      	bls.n	8088f38 <__aeabi_f2iz+0x30>
 8088f1c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8088f20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8088f24:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8088f28:	fa23 f002 	lsr.w	r0, r3, r2
 8088f2c:	bf18      	it	ne
 8088f2e:	4240      	negne	r0, r0
 8088f30:	4770      	bx	lr
 8088f32:	f04f 0000 	mov.w	r0, #0
 8088f36:	4770      	bx	lr
 8088f38:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8088f3c:	d101      	bne.n	8088f42 <__aeabi_f2iz+0x3a>
 8088f3e:	0242      	lsls	r2, r0, #9
 8088f40:	d105      	bne.n	8088f4e <__aeabi_f2iz+0x46>
 8088f42:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8088f46:	bf08      	it	eq
 8088f48:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8088f4c:	4770      	bx	lr
 8088f4e:	f04f 0000 	mov.w	r0, #0
 8088f52:	4770      	bx	lr

08088f54 <asctime>:
 8088f54:	4b09      	ldr	r3, [pc, #36]	; (8088f7c <asctime+0x28>)
 8088f56:	b570      	push	{r4, r5, r6, lr}
 8088f58:	681c      	ldr	r4, [r3, #0]
 8088f5a:	4606      	mov	r6, r0
 8088f5c:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8088f5e:	b93d      	cbnz	r5, 8088f70 <asctime+0x1c>
 8088f60:	201a      	movs	r0, #26
 8088f62:	f7fb fbe5 	bl	8084730 <malloc>
 8088f66:	221a      	movs	r2, #26
 8088f68:	6420      	str	r0, [r4, #64]	; 0x40
 8088f6a:	4629      	mov	r1, r5
 8088f6c:	f000 f962 	bl	8089234 <memset>
 8088f70:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8088f72:	4630      	mov	r0, r6
 8088f74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8088f78:	f000 b802 	b.w	8088f80 <asctime_r>
 8088f7c:	20000130 	.word	0x20000130

08088f80 <asctime_r>:
 8088f80:	b510      	push	{r4, lr}
 8088f82:	460c      	mov	r4, r1
 8088f84:	6941      	ldr	r1, [r0, #20]
 8088f86:	b086      	sub	sp, #24
 8088f88:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 8088f8c:	6903      	ldr	r3, [r0, #16]
 8088f8e:	6982      	ldr	r2, [r0, #24]
 8088f90:	9104      	str	r1, [sp, #16]
 8088f92:	6801      	ldr	r1, [r0, #0]
 8088f94:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8088f98:	9103      	str	r1, [sp, #12]
 8088f9a:	6841      	ldr	r1, [r0, #4]
 8088f9c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8088fa0:	9102      	str	r1, [sp, #8]
 8088fa2:	6881      	ldr	r1, [r0, #8]
 8088fa4:	9101      	str	r1, [sp, #4]
 8088fa6:	68c1      	ldr	r1, [r0, #12]
 8088fa8:	4620      	mov	r0, r4
 8088faa:	9100      	str	r1, [sp, #0]
 8088fac:	4904      	ldr	r1, [pc, #16]	; (8088fc0 <asctime_r+0x40>)
 8088fae:	440b      	add	r3, r1
 8088fb0:	4904      	ldr	r1, [pc, #16]	; (8088fc4 <asctime_r+0x44>)
 8088fb2:	440a      	add	r2, r1
 8088fb4:	4904      	ldr	r1, [pc, #16]	; (8088fc8 <asctime_r+0x48>)
 8088fb6:	f7fb fbd3 	bl	8084760 <siprintf>
 8088fba:	4620      	mov	r0, r4
 8088fbc:	b006      	add	sp, #24
 8088fbe:	bd10      	pop	{r4, pc}
 8088fc0:	0808b4d5 	.word	0x0808b4d5
 8088fc4:	0808b4c0 	.word	0x0808b4c0
 8088fc8:	0808b4f9 	.word	0x0808b4f9

08088fcc <atoi>:
 8088fcc:	220a      	movs	r2, #10
 8088fce:	2100      	movs	r1, #0
 8088fd0:	f000 bfe2 	b.w	8089f98 <strtol>

08088fd4 <atol>:
 8088fd4:	220a      	movs	r2, #10
 8088fd6:	2100      	movs	r1, #0
 8088fd8:	f000 bfde 	b.w	8089f98 <strtol>

08088fdc <__cxa_atexit>:
 8088fdc:	b510      	push	{r4, lr}
 8088fde:	4c05      	ldr	r4, [pc, #20]	; (8088ff4 <__cxa_atexit+0x18>)
 8088fe0:	4613      	mov	r3, r2
 8088fe2:	b12c      	cbz	r4, 8088ff0 <__cxa_atexit+0x14>
 8088fe4:	460a      	mov	r2, r1
 8088fe6:	4601      	mov	r1, r0
 8088fe8:	2002      	movs	r0, #2
 8088fea:	f3af 8000 	nop.w
 8088fee:	bd10      	pop	{r4, pc}
 8088ff0:	4620      	mov	r0, r4
 8088ff2:	bd10      	pop	{r4, pc}
 8088ff4:	00000000 	.word	0x00000000

08088ff8 <localtime>:
 8088ff8:	b538      	push	{r3, r4, r5, lr}
 8088ffa:	4b07      	ldr	r3, [pc, #28]	; (8089018 <localtime+0x20>)
 8088ffc:	4605      	mov	r5, r0
 8088ffe:	681c      	ldr	r4, [r3, #0]
 8089000:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8089002:	b91b      	cbnz	r3, 808900c <localtime+0x14>
 8089004:	2024      	movs	r0, #36	; 0x24
 8089006:	f7fb fb93 	bl	8084730 <malloc>
 808900a:	63e0      	str	r0, [r4, #60]	; 0x3c
 808900c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 808900e:	4628      	mov	r0, r5
 8089010:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8089014:	f000 b802 	b.w	808901c <localtime_r>
 8089018:	20000130 	.word	0x20000130

0808901c <localtime_r>:
 808901c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8089020:	460c      	mov	r4, r1
 8089022:	4680      	mov	r8, r0
 8089024:	f001 fad2 	bl	808a5cc <__gettzinfo>
 8089028:	4621      	mov	r1, r4
 808902a:	4607      	mov	r7, r0
 808902c:	4640      	mov	r0, r8
 808902e:	f001 fad1 	bl	808a5d4 <gmtime_r>
 8089032:	6946      	ldr	r6, [r0, #20]
 8089034:	4604      	mov	r4, r0
 8089036:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 808903a:	07b3      	lsls	r3, r6, #30
 808903c:	d105      	bne.n	808904a <localtime_r+0x2e>
 808903e:	2264      	movs	r2, #100	; 0x64
 8089040:	fb96 f3f2 	sdiv	r3, r6, r2
 8089044:	fb02 6313 	mls	r3, r2, r3, r6
 8089048:	b94b      	cbnz	r3, 808905e <localtime_r+0x42>
 808904a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 808904e:	fb96 f3f5 	sdiv	r3, r6, r5
 8089052:	fb05 6513 	mls	r5, r5, r3, r6
 8089056:	fab5 f385 	clz	r3, r5
 808905a:	095b      	lsrs	r3, r3, #5
 808905c:	e000      	b.n	8089060 <localtime_r+0x44>
 808905e:	2301      	movs	r3, #1
 8089060:	4a5f      	ldr	r2, [pc, #380]	; (80891e0 <localtime_r+0x1c4>)
 8089062:	2530      	movs	r5, #48	; 0x30
 8089064:	fb05 2503 	mla	r5, r5, r3, r2
 8089068:	f001 f8e0 	bl	808a22c <__tz_lock>
 808906c:	f001 f8e0 	bl	808a230 <_tzset_unlocked>
 8089070:	4b5c      	ldr	r3, [pc, #368]	; (80891e4 <localtime_r+0x1c8>)
 8089072:	681b      	ldr	r3, [r3, #0]
 8089074:	b1f3      	cbz	r3, 80890b4 <localtime_r+0x98>
 8089076:	687b      	ldr	r3, [r7, #4]
 8089078:	429e      	cmp	r6, r3
 808907a:	d105      	bne.n	8089088 <localtime_r+0x6c>
 808907c:	6839      	ldr	r1, [r7, #0]
 808907e:	f8d8 3000 	ldr.w	r3, [r8]
 8089082:	69fa      	ldr	r2, [r7, #28]
 8089084:	b941      	cbnz	r1, 8089098 <localtime_r+0x7c>
 8089086:	e00a      	b.n	808909e <localtime_r+0x82>
 8089088:	4630      	mov	r0, r6
 808908a:	f001 f827 	bl	808a0dc <__tzcalc_limits>
 808908e:	2800      	cmp	r0, #0
 8089090:	d1f4      	bne.n	808907c <localtime_r+0x60>
 8089092:	f04f 33ff 	mov.w	r3, #4294967295
 8089096:	e00d      	b.n	80890b4 <localtime_r+0x98>
 8089098:	4293      	cmp	r3, r2
 808909a:	db08      	blt.n	80890ae <localtime_r+0x92>
 808909c:	e001      	b.n	80890a2 <localtime_r+0x86>
 808909e:	4293      	cmp	r3, r2
 80890a0:	da07      	bge.n	80890b2 <localtime_r+0x96>
 80890a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80890a4:	4293      	cmp	r3, r2
 80890a6:	bfac      	ite	ge
 80890a8:	2300      	movge	r3, #0
 80890aa:	2301      	movlt	r3, #1
 80890ac:	e002      	b.n	80890b4 <localtime_r+0x98>
 80890ae:	2300      	movs	r3, #0
 80890b0:	e000      	b.n	80890b4 <localtime_r+0x98>
 80890b2:	2301      	movs	r3, #1
 80890b4:	6223      	str	r3, [r4, #32]
 80890b6:	6a23      	ldr	r3, [r4, #32]
 80890b8:	203c      	movs	r0, #60	; 0x3c
 80890ba:	2b01      	cmp	r3, #1
 80890bc:	bf0c      	ite	eq
 80890be:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 80890c0:	6a39      	ldrne	r1, [r7, #32]
 80890c2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80890c6:	fb91 f6f3 	sdiv	r6, r1, r3
 80890ca:	fb03 1316 	mls	r3, r3, r6, r1
 80890ce:	fb93 f2f0 	sdiv	r2, r3, r0
 80890d2:	fb00 3012 	mls	r0, r0, r2, r3
 80890d6:	6861      	ldr	r1, [r4, #4]
 80890d8:	6823      	ldr	r3, [r4, #0]
 80890da:	1a89      	subs	r1, r1, r2
 80890dc:	68a2      	ldr	r2, [r4, #8]
 80890de:	1a1b      	subs	r3, r3, r0
 80890e0:	1b92      	subs	r2, r2, r6
 80890e2:	2b3b      	cmp	r3, #59	; 0x3b
 80890e4:	6023      	str	r3, [r4, #0]
 80890e6:	6061      	str	r1, [r4, #4]
 80890e8:	60a2      	str	r2, [r4, #8]
 80890ea:	dd03      	ble.n	80890f4 <localtime_r+0xd8>
 80890ec:	3101      	adds	r1, #1
 80890ee:	6061      	str	r1, [r4, #4]
 80890f0:	3b3c      	subs	r3, #60	; 0x3c
 80890f2:	e004      	b.n	80890fe <localtime_r+0xe2>
 80890f4:	2b00      	cmp	r3, #0
 80890f6:	da03      	bge.n	8089100 <localtime_r+0xe4>
 80890f8:	3901      	subs	r1, #1
 80890fa:	6061      	str	r1, [r4, #4]
 80890fc:	333c      	adds	r3, #60	; 0x3c
 80890fe:	6023      	str	r3, [r4, #0]
 8089100:	6863      	ldr	r3, [r4, #4]
 8089102:	2b3b      	cmp	r3, #59	; 0x3b
 8089104:	dd03      	ble.n	808910e <localtime_r+0xf2>
 8089106:	3201      	adds	r2, #1
 8089108:	60a2      	str	r2, [r4, #8]
 808910a:	3b3c      	subs	r3, #60	; 0x3c
 808910c:	e004      	b.n	8089118 <localtime_r+0xfc>
 808910e:	2b00      	cmp	r3, #0
 8089110:	da03      	bge.n	808911a <localtime_r+0xfe>
 8089112:	3a01      	subs	r2, #1
 8089114:	60a2      	str	r2, [r4, #8]
 8089116:	333c      	adds	r3, #60	; 0x3c
 8089118:	6063      	str	r3, [r4, #4]
 808911a:	68a3      	ldr	r3, [r4, #8]
 808911c:	2b17      	cmp	r3, #23
 808911e:	dd22      	ble.n	8089166 <localtime_r+0x14a>
 8089120:	69e2      	ldr	r2, [r4, #28]
 8089122:	3b18      	subs	r3, #24
 8089124:	3201      	adds	r2, #1
 8089126:	61e2      	str	r2, [r4, #28]
 8089128:	69a2      	ldr	r2, [r4, #24]
 808912a:	60a3      	str	r3, [r4, #8]
 808912c:	3201      	adds	r2, #1
 808912e:	2a06      	cmp	r2, #6
 8089130:	bfc8      	it	gt
 8089132:	2200      	movgt	r2, #0
 8089134:	61a2      	str	r2, [r4, #24]
 8089136:	68e2      	ldr	r2, [r4, #12]
 8089138:	6923      	ldr	r3, [r4, #16]
 808913a:	3201      	adds	r2, #1
 808913c:	60e2      	str	r2, [r4, #12]
 808913e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8089142:	428a      	cmp	r2, r1
 8089144:	dd46      	ble.n	80891d4 <localtime_r+0x1b8>
 8089146:	3301      	adds	r3, #1
 8089148:	2b0c      	cmp	r3, #12
 808914a:	bf08      	it	eq
 808914c:	6963      	ldreq	r3, [r4, #20]
 808914e:	eba2 0201 	sub.w	r2, r2, r1
 8089152:	60e2      	str	r2, [r4, #12]
 8089154:	bf05      	ittet	eq
 8089156:	3301      	addeq	r3, #1
 8089158:	2200      	moveq	r2, #0
 808915a:	6123      	strne	r3, [r4, #16]
 808915c:	6122      	streq	r2, [r4, #16]
 808915e:	bf04      	itt	eq
 8089160:	6163      	streq	r3, [r4, #20]
 8089162:	61e2      	streq	r2, [r4, #28]
 8089164:	e036      	b.n	80891d4 <localtime_r+0x1b8>
 8089166:	2b00      	cmp	r3, #0
 8089168:	da34      	bge.n	80891d4 <localtime_r+0x1b8>
 808916a:	69e2      	ldr	r2, [r4, #28]
 808916c:	3318      	adds	r3, #24
 808916e:	3a01      	subs	r2, #1
 8089170:	61e2      	str	r2, [r4, #28]
 8089172:	69a2      	ldr	r2, [r4, #24]
 8089174:	60a3      	str	r3, [r4, #8]
 8089176:	3a01      	subs	r2, #1
 8089178:	bf48      	it	mi
 808917a:	2206      	movmi	r2, #6
 808917c:	61a2      	str	r2, [r4, #24]
 808917e:	68e2      	ldr	r2, [r4, #12]
 8089180:	3a01      	subs	r2, #1
 8089182:	60e2      	str	r2, [r4, #12]
 8089184:	bb32      	cbnz	r2, 80891d4 <localtime_r+0x1b8>
 8089186:	6923      	ldr	r3, [r4, #16]
 8089188:	3b01      	subs	r3, #1
 808918a:	d401      	bmi.n	8089190 <localtime_r+0x174>
 808918c:	6123      	str	r3, [r4, #16]
 808918e:	e01d      	b.n	80891cc <localtime_r+0x1b0>
 8089190:	230b      	movs	r3, #11
 8089192:	6123      	str	r3, [r4, #16]
 8089194:	6963      	ldr	r3, [r4, #20]
 8089196:	1e5a      	subs	r2, r3, #1
 8089198:	f012 0f03 	tst.w	r2, #3
 808919c:	6162      	str	r2, [r4, #20]
 808919e:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80891a2:	d105      	bne.n	80891b0 <localtime_r+0x194>
 80891a4:	2164      	movs	r1, #100	; 0x64
 80891a6:	fb93 f2f1 	sdiv	r2, r3, r1
 80891aa:	fb01 3212 	mls	r2, r1, r2, r3
 80891ae:	b94a      	cbnz	r2, 80891c4 <localtime_r+0x1a8>
 80891b0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80891b4:	fb93 f2f1 	sdiv	r2, r3, r1
 80891b8:	fb01 3312 	mls	r3, r1, r2, r3
 80891bc:	fab3 f383 	clz	r3, r3
 80891c0:	095b      	lsrs	r3, r3, #5
 80891c2:	e000      	b.n	80891c6 <localtime_r+0x1aa>
 80891c4:	2301      	movs	r3, #1
 80891c6:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80891ca:	61e3      	str	r3, [r4, #28]
 80891cc:	6923      	ldr	r3, [r4, #16]
 80891ce:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80891d2:	60e3      	str	r3, [r4, #12]
 80891d4:	f001 f82b 	bl	808a22e <__tz_unlock>
 80891d8:	4620      	mov	r0, r4
 80891da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80891de:	bf00      	nop
 80891e0:	0808b680 	.word	0x0808b680
 80891e4:	20000780 	.word	0x20000780

080891e8 <memcpy>:
 80891e8:	b510      	push	{r4, lr}
 80891ea:	1e43      	subs	r3, r0, #1
 80891ec:	440a      	add	r2, r1
 80891ee:	4291      	cmp	r1, r2
 80891f0:	d004      	beq.n	80891fc <memcpy+0x14>
 80891f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80891f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80891fa:	e7f8      	b.n	80891ee <memcpy+0x6>
 80891fc:	bd10      	pop	{r4, pc}

080891fe <memmove>:
 80891fe:	4288      	cmp	r0, r1
 8089200:	b510      	push	{r4, lr}
 8089202:	eb01 0302 	add.w	r3, r1, r2
 8089206:	d801      	bhi.n	808920c <memmove+0xe>
 8089208:	1e42      	subs	r2, r0, #1
 808920a:	e00b      	b.n	8089224 <memmove+0x26>
 808920c:	4298      	cmp	r0, r3
 808920e:	d2fb      	bcs.n	8089208 <memmove+0xa>
 8089210:	1881      	adds	r1, r0, r2
 8089212:	1ad2      	subs	r2, r2, r3
 8089214:	42d3      	cmn	r3, r2
 8089216:	d004      	beq.n	8089222 <memmove+0x24>
 8089218:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 808921c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8089220:	e7f8      	b.n	8089214 <memmove+0x16>
 8089222:	bd10      	pop	{r4, pc}
 8089224:	4299      	cmp	r1, r3
 8089226:	d004      	beq.n	8089232 <memmove+0x34>
 8089228:	f811 4b01 	ldrb.w	r4, [r1], #1
 808922c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8089230:	e7f8      	b.n	8089224 <memmove+0x26>
 8089232:	bd10      	pop	{r4, pc}

08089234 <memset>:
 8089234:	4603      	mov	r3, r0
 8089236:	4402      	add	r2, r0
 8089238:	4293      	cmp	r3, r2
 808923a:	d002      	beq.n	8089242 <memset+0xe>
 808923c:	f803 1b01 	strb.w	r1, [r3], #1
 8089240:	e7fa      	b.n	8089238 <memset+0x4>
 8089242:	4770      	bx	lr

08089244 <srand>:
 8089244:	b538      	push	{r3, r4, r5, lr}
 8089246:	4b12      	ldr	r3, [pc, #72]	; (8089290 <srand+0x4c>)
 8089248:	4605      	mov	r5, r0
 808924a:	681c      	ldr	r4, [r3, #0]
 808924c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 808924e:	b9d3      	cbnz	r3, 8089286 <srand+0x42>
 8089250:	2018      	movs	r0, #24
 8089252:	f7fb fa6d 	bl	8084730 <malloc>
 8089256:	f243 330e 	movw	r3, #13070	; 0x330e
 808925a:	63a0      	str	r0, [r4, #56]	; 0x38
 808925c:	8003      	strh	r3, [r0, #0]
 808925e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8089262:	8043      	strh	r3, [r0, #2]
 8089264:	f241 2334 	movw	r3, #4660	; 0x1234
 8089268:	8083      	strh	r3, [r0, #4]
 808926a:	f24e 636d 	movw	r3, #58989	; 0xe66d
 808926e:	80c3      	strh	r3, [r0, #6]
 8089270:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8089274:	8103      	strh	r3, [r0, #8]
 8089276:	2305      	movs	r3, #5
 8089278:	8143      	strh	r3, [r0, #10]
 808927a:	230b      	movs	r3, #11
 808927c:	8183      	strh	r3, [r0, #12]
 808927e:	2201      	movs	r2, #1
 8089280:	2300      	movs	r3, #0
 8089282:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8089286:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8089288:	2200      	movs	r2, #0
 808928a:	611d      	str	r5, [r3, #16]
 808928c:	615a      	str	r2, [r3, #20]
 808928e:	bd38      	pop	{r3, r4, r5, pc}
 8089290:	20000130 	.word	0x20000130

08089294 <strchr>:
 8089294:	b2c9      	uxtb	r1, r1
 8089296:	4603      	mov	r3, r0
 8089298:	f810 2b01 	ldrb.w	r2, [r0], #1
 808929c:	b11a      	cbz	r2, 80892a6 <strchr+0x12>
 808929e:	4291      	cmp	r1, r2
 80892a0:	d1f9      	bne.n	8089296 <strchr+0x2>
 80892a2:	4618      	mov	r0, r3
 80892a4:	4770      	bx	lr
 80892a6:	2900      	cmp	r1, #0
 80892a8:	bf0c      	ite	eq
 80892aa:	4618      	moveq	r0, r3
 80892ac:	2000      	movne	r0, #0
 80892ae:	4770      	bx	lr

080892b0 <strchrnul>:
 80892b0:	b510      	push	{r4, lr}
 80892b2:	4604      	mov	r4, r0
 80892b4:	f7ff ffee 	bl	8089294 <strchr>
 80892b8:	b918      	cbnz	r0, 80892c2 <strchrnul+0x12>
 80892ba:	4620      	mov	r0, r4
 80892bc:	f000 fd44 	bl	8089d48 <strlen>
 80892c0:	4420      	add	r0, r4
 80892c2:	bd10      	pop	{r4, pc}

080892c4 <strcmp>:
 80892c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80892c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80892cc:	2a01      	cmp	r2, #1
 80892ce:	bf28      	it	cs
 80892d0:	429a      	cmpcs	r2, r3
 80892d2:	d0f7      	beq.n	80892c4 <strcmp>
 80892d4:	1ad0      	subs	r0, r2, r3
 80892d6:	4770      	bx	lr

080892d8 <strcpy>:
 80892d8:	4603      	mov	r3, r0
 80892da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80892de:	f803 2b01 	strb.w	r2, [r3], #1
 80892e2:	2a00      	cmp	r2, #0
 80892e4:	d1f9      	bne.n	80892da <strcpy+0x2>
 80892e6:	4770      	bx	lr

080892e8 <strdup>:
 80892e8:	4b02      	ldr	r3, [pc, #8]	; (80892f4 <strdup+0xc>)
 80892ea:	4601      	mov	r1, r0
 80892ec:	6818      	ldr	r0, [r3, #0]
 80892ee:	f000 b803 	b.w	80892f8 <_strdup_r>
 80892f2:	bf00      	nop
 80892f4:	20000130 	.word	0x20000130

080892f8 <_strdup_r>:
 80892f8:	b570      	push	{r4, r5, r6, lr}
 80892fa:	4606      	mov	r6, r0
 80892fc:	4608      	mov	r0, r1
 80892fe:	460c      	mov	r4, r1
 8089300:	f000 fd22 	bl	8089d48 <strlen>
 8089304:	1c45      	adds	r5, r0, #1
 8089306:	4629      	mov	r1, r5
 8089308:	4630      	mov	r0, r6
 808930a:	f7fb fa59 	bl	80847c0 <_malloc_r>
 808930e:	4606      	mov	r6, r0
 8089310:	b118      	cbz	r0, 808931a <_strdup_r+0x22>
 8089312:	462a      	mov	r2, r5
 8089314:	4621      	mov	r1, r4
 8089316:	f7ff ff67 	bl	80891e8 <memcpy>
 808931a:	4630      	mov	r0, r6
 808931c:	bd70      	pop	{r4, r5, r6, pc}

0808931e <iso_year_adjust>:
 808931e:	6941      	ldr	r1, [r0, #20]
 8089320:	b510      	push	{r4, lr}
 8089322:	078b      	lsls	r3, r1, #30
 8089324:	d10c      	bne.n	8089340 <iso_year_adjust+0x22>
 8089326:	f240 736c 	movw	r3, #1900	; 0x76c
 808932a:	2900      	cmp	r1, #0
 808932c:	bfa8      	it	ge
 808932e:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 8089332:	440b      	add	r3, r1
 8089334:	2464      	movs	r4, #100	; 0x64
 8089336:	fb93 f2f4 	sdiv	r2, r3, r4
 808933a:	fb04 3312 	mls	r3, r4, r2, r3
 808933e:	b983      	cbnz	r3, 8089362 <iso_year_adjust+0x44>
 8089340:	f240 736c 	movw	r3, #1900	; 0x76c
 8089344:	2900      	cmp	r1, #0
 8089346:	bfa8      	it	ge
 8089348:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 808934c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8089350:	440b      	add	r3, r1
 8089352:	fb93 f1f2 	sdiv	r1, r3, r2
 8089356:	fb02 3311 	mls	r3, r2, r1, r3
 808935a:	fab3 f283 	clz	r2, r3
 808935e:	0952      	lsrs	r2, r2, #5
 8089360:	e000      	b.n	8089364 <iso_year_adjust+0x46>
 8089362:	2201      	movs	r2, #1
 8089364:	6983      	ldr	r3, [r0, #24]
 8089366:	69c1      	ldr	r1, [r0, #28]
 8089368:	005b      	lsls	r3, r3, #1
 808936a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 808936e:	4413      	add	r3, r2
 8089370:	2b21      	cmp	r3, #33	; 0x21
 8089372:	dc0e      	bgt.n	8089392 <iso_year_adjust+0x74>
 8089374:	2b20      	cmp	r3, #32
 8089376:	da2f      	bge.n	80893d8 <iso_year_adjust+0xba>
 8089378:	2b0d      	cmp	r3, #13
 808937a:	dc02      	bgt.n	8089382 <iso_year_adjust+0x64>
 808937c:	2b0a      	cmp	r3, #10
 808937e:	db05      	blt.n	808938c <iso_year_adjust+0x6e>
 8089380:	e02a      	b.n	80893d8 <iso_year_adjust+0xba>
 8089382:	2b10      	cmp	r3, #16
 8089384:	db26      	blt.n	80893d4 <iso_year_adjust+0xb6>
 8089386:	2b11      	cmp	r3, #17
 8089388:	dd26      	ble.n	80893d8 <iso_year_adjust+0xba>
 808938a:	3b1c      	subs	r3, #28
 808938c:	2b01      	cmp	r3, #1
 808938e:	d923      	bls.n	80893d8 <iso_year_adjust+0xba>
 8089390:	e020      	b.n	80893d4 <iso_year_adjust+0xb6>
 8089392:	f241 62c6 	movw	r2, #5830	; 0x16c6
 8089396:	4293      	cmp	r3, r2
 8089398:	dc0e      	bgt.n	80893b8 <iso_year_adjust+0x9a>
 808939a:	f241 62c2 	movw	r2, #5826	; 0x16c2
 808939e:	4293      	cmp	r3, r2
 80893a0:	da16      	bge.n	80893d0 <iso_year_adjust+0xb2>
 80893a2:	f241 62a2 	movw	r2, #5794	; 0x16a2
 80893a6:	4293      	cmp	r3, r2
 80893a8:	d012      	beq.n	80893d0 <iso_year_adjust+0xb2>
 80893aa:	db13      	blt.n	80893d4 <iso_year_adjust+0xb6>
 80893ac:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
 80893b0:	3b12      	subs	r3, #18
 80893b2:	2b02      	cmp	r3, #2
 80893b4:	d90c      	bls.n	80893d0 <iso_year_adjust+0xb2>
 80893b6:	e00d      	b.n	80893d4 <iso_year_adjust+0xb6>
 80893b8:	f241 62d5 	movw	r2, #5845	; 0x16d5
 80893bc:	4293      	cmp	r3, r2
 80893be:	d007      	beq.n	80893d0 <iso_year_adjust+0xb2>
 80893c0:	f241 62d7 	movw	r2, #5847	; 0x16d7
 80893c4:	4293      	cmp	r3, r2
 80893c6:	d003      	beq.n	80893d0 <iso_year_adjust+0xb2>
 80893c8:	f241 62d3 	movw	r2, #5843	; 0x16d3
 80893cc:	4293      	cmp	r3, r2
 80893ce:	d101      	bne.n	80893d4 <iso_year_adjust+0xb6>
 80893d0:	2001      	movs	r0, #1
 80893d2:	bd10      	pop	{r4, pc}
 80893d4:	2000      	movs	r0, #0
 80893d6:	bd10      	pop	{r4, pc}
 80893d8:	f04f 30ff 	mov.w	r0, #4294967295
 80893dc:	bd10      	pop	{r4, pc}
	...

080893e0 <strftime>:
 80893e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80893e4:	460e      	mov	r6, r1
 80893e6:	b093      	sub	sp, #76	; 0x4c
 80893e8:	461d      	mov	r5, r3
 80893ea:	4607      	mov	r7, r0
 80893ec:	4691      	mov	r9, r2
 80893ee:	f000 fe65 	bl	808a0bc <__get_current_time_locale>
 80893f2:	2300      	movs	r3, #0
 80893f4:	9306      	str	r3, [sp, #24]
 80893f6:	461c      	mov	r4, r3
 80893f8:	1e73      	subs	r3, r6, #1
 80893fa:	9003      	str	r0, [sp, #12]
 80893fc:	9302      	str	r3, [sp, #8]
 80893fe:	f899 3000 	ldrb.w	r3, [r9]
 8089402:	2b00      	cmp	r3, #0
 8089404:	f000 8492 	beq.w	8089d2c <strftime+0x94c>
 8089408:	2b25      	cmp	r3, #37	; 0x25
 808940a:	d008      	beq.n	808941e <strftime+0x3e>
 808940c:	9a02      	ldr	r2, [sp, #8]
 808940e:	4294      	cmp	r4, r2
 8089410:	f080 8490 	bcs.w	8089d34 <strftime+0x954>
 8089414:	553b      	strb	r3, [r7, r4]
 8089416:	f109 0901 	add.w	r9, r9, #1
 808941a:	3401      	adds	r4, #1
 808941c:	e7ef      	b.n	80893fe <strftime+0x1e>
 808941e:	f899 a001 	ldrb.w	sl, [r9, #1]
 8089422:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 8089426:	d007      	beq.n	8089438 <strftime+0x58>
 8089428:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808942c:	d004      	beq.n	8089438 <strftime+0x58>
 808942e:	f109 0901 	add.w	r9, r9, #1
 8089432:	f04f 0a00 	mov.w	sl, #0
 8089436:	e001      	b.n	808943c <strftime+0x5c>
 8089438:	f109 0902 	add.w	r9, r9, #2
 808943c:	f899 3000 	ldrb.w	r3, [r9]
 8089440:	3b31      	subs	r3, #49	; 0x31
 8089442:	2b08      	cmp	r3, #8
 8089444:	d808      	bhi.n	8089458 <strftime+0x78>
 8089446:	4648      	mov	r0, r9
 8089448:	220a      	movs	r2, #10
 808944a:	a90a      	add	r1, sp, #40	; 0x28
 808944c:	f000 fe2c 	bl	808a0a8 <strtoul>
 8089450:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8089454:	4680      	mov	r8, r0
 8089456:	e001      	b.n	808945c <strftime+0x7c>
 8089458:	f04f 0800 	mov.w	r8, #0
 808945c:	f899 3000 	ldrb.w	r3, [r9]
 8089460:	2b45      	cmp	r3, #69	; 0x45
 8089462:	d001      	beq.n	8089468 <strftime+0x88>
 8089464:	2b4f      	cmp	r3, #79	; 0x4f
 8089466:	d101      	bne.n	808946c <strftime+0x8c>
 8089468:	f109 0901 	add.w	r9, r9, #1
 808946c:	f899 0000 	ldrb.w	r0, [r9]
 8089470:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 8089474:	2b55      	cmp	r3, #85	; 0x55
 8089476:	f200 845d 	bhi.w	8089d34 <strftime+0x954>
 808947a:	e8df f013 	tbh	[pc, r3, lsl #1]
 808947e:	044a      	.short	0x044a
 8089480:	045b045b 	.word	0x045b045b
 8089484:	045b045b 	.word	0x045b045b
 8089488:	045b045b 	.word	0x045b045b
 808948c:	045b045b 	.word	0x045b045b
 8089490:	045b045b 	.word	0x045b045b
 8089494:	045b045b 	.word	0x045b045b
 8089498:	045b045b 	.word	0x045b045b
 808949c:	045b045b 	.word	0x045b045b
 80894a0:	045b045b 	.word	0x045b045b
 80894a4:	045b045b 	.word	0x045b045b
 80894a8:	045b045b 	.word	0x045b045b
 80894ac:	045b045b 	.word	0x045b045b
 80894b0:	045b045b 	.word	0x045b045b
 80894b4:	006f045b 	.word	0x006f045b
 80894b8:	00d400a1 	.word	0x00d400a1
 80894bc:	045b011a 	.word	0x045b011a
 80894c0:	01a0013f 	.word	0x01a0013f
 80894c4:	022d0226 	.word	0x022d0226
 80894c8:	045b045b 	.word	0x045b045b
 80894cc:	0260045b 	.word	0x0260045b
 80894d0:	045b045b 	.word	0x045b045b
 80894d4:	045b0268 	.word	0x045b0268
 80894d8:	031c0296 	.word	0x031c0296
 80894dc:	033a0324 	.word	0x033a0324
 80894e0:	03850342 	.word	0x03850342
 80894e4:	039f00c6 	.word	0x039f00c6
 80894e8:	045b041f 	.word	0x045b041f
 80894ec:	045b045b 	.word	0x045b045b
 80894f0:	045b045b 	.word	0x045b045b
 80894f4:	0056045b 	.word	0x0056045b
 80894f8:	00ba0089 	.word	0x00ba0089
 80894fc:	010c010c 	.word	0x010c010c
 8089500:	0171045b 	.word	0x0171045b
 8089504:	045b0089 	.word	0x045b0089
 8089508:	0226023d 	.word	0x0226023d
 808950c:	025d022d 	.word	0x025d022d
 8089510:	045b0262 	.word	0x045b0262
 8089514:	045b0268 	.word	0x045b0268
 8089518:	029b00be 	.word	0x029b00be
 808951c:	032d031e 	.word	0x032d031e
 8089520:	037e045b 	.word	0x037e045b
 8089524:	039100c2 	.word	0x039100c2
 8089528:	03e7      	.short	0x03e7
 808952a:	69ab      	ldr	r3, [r5, #24]
 808952c:	9a03      	ldr	r2, [sp, #12]
 808952e:	3318      	adds	r3, #24
 8089530:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 8089534:	4640      	mov	r0, r8
 8089536:	f000 fc07 	bl	8089d48 <strlen>
 808953a:	f108 38ff 	add.w	r8, r8, #4294967295
 808953e:	193b      	adds	r3, r7, r4
 8089540:	4420      	add	r0, r4
 8089542:	4284      	cmp	r4, r0
 8089544:	f000 83eb 	beq.w	8089d1e <strftime+0x93e>
 8089548:	9a02      	ldr	r2, [sp, #8]
 808954a:	4294      	cmp	r4, r2
 808954c:	f080 83f2 	bcs.w	8089d34 <strftime+0x954>
 8089550:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 8089554:	3401      	adds	r4, #1
 8089556:	f803 2b01 	strb.w	r2, [r3], #1
 808955a:	e7f2      	b.n	8089542 <strftime+0x162>
 808955c:	69ab      	ldr	r3, [r5, #24]
 808955e:	9a03      	ldr	r2, [sp, #12]
 8089560:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8089564:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
 8089568:	4640      	mov	r0, r8
 808956a:	f000 fbed 	bl	8089d48 <strlen>
 808956e:	f108 38ff 	add.w	r8, r8, #4294967295
 8089572:	193b      	adds	r3, r7, r4
 8089574:	4420      	add	r0, r4
 8089576:	4284      	cmp	r4, r0
 8089578:	f000 83d1 	beq.w	8089d1e <strftime+0x93e>
 808957c:	9a02      	ldr	r2, [sp, #8]
 808957e:	4294      	cmp	r4, r2
 8089580:	f080 83d8 	bcs.w	8089d34 <strftime+0x954>
 8089584:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 8089588:	3401      	adds	r4, #1
 808958a:	f803 2b01 	strb.w	r2, [r3], #1
 808958e:	e7f2      	b.n	8089576 <strftime+0x196>
 8089590:	692b      	ldr	r3, [r5, #16]
 8089592:	9a03      	ldr	r2, [sp, #12]
 8089594:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 8089598:	4640      	mov	r0, r8
 808959a:	f000 fbd5 	bl	8089d48 <strlen>
 808959e:	f108 38ff 	add.w	r8, r8, #4294967295
 80895a2:	193b      	adds	r3, r7, r4
 80895a4:	4420      	add	r0, r4
 80895a6:	4284      	cmp	r4, r0
 80895a8:	f000 83b9 	beq.w	8089d1e <strftime+0x93e>
 80895ac:	9a02      	ldr	r2, [sp, #8]
 80895ae:	4294      	cmp	r4, r2
 80895b0:	f080 83c0 	bcs.w	8089d34 <strftime+0x954>
 80895b4:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80895b8:	3401      	adds	r4, #1
 80895ba:	f803 2b01 	strb.w	r2, [r3], #1
 80895be:	e7f2      	b.n	80895a6 <strftime+0x1c6>
 80895c0:	692b      	ldr	r3, [r5, #16]
 80895c2:	9a03      	ldr	r2, [sp, #12]
 80895c4:	330c      	adds	r3, #12
 80895c6:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80895ca:	4640      	mov	r0, r8
 80895cc:	f000 fbbc 	bl	8089d48 <strlen>
 80895d0:	f108 38ff 	add.w	r8, r8, #4294967295
 80895d4:	193b      	adds	r3, r7, r4
 80895d6:	4420      	add	r0, r4
 80895d8:	4284      	cmp	r4, r0
 80895da:	f000 83a0 	beq.w	8089d1e <strftime+0x93e>
 80895de:	9a02      	ldr	r2, [sp, #8]
 80895e0:	4294      	cmp	r4, r2
 80895e2:	f080 83a7 	bcs.w	8089d34 <strftime+0x954>
 80895e6:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80895ea:	3401      	adds	r4, #1
 80895ec:	f803 2b01 	strb.w	r2, [r3], #1
 80895f0:	e7f2      	b.n	80895d8 <strftime+0x1f8>
 80895f2:	9b03      	ldr	r3, [sp, #12]
 80895f4:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
 80895f8:	e00a      	b.n	8089610 <strftime+0x230>
 80895fa:	9b03      	ldr	r3, [sp, #12]
 80895fc:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
 8089600:	e006      	b.n	8089610 <strftime+0x230>
 8089602:	9b03      	ldr	r3, [sp, #12]
 8089604:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
 8089608:	e002      	b.n	8089610 <strftime+0x230>
 808960a:	9b03      	ldr	r3, [sp, #12]
 808960c:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
 8089610:	4640      	mov	r0, r8
 8089612:	f000 fb99 	bl	8089d48 <strlen>
 8089616:	f898 3000 	ldrb.w	r3, [r8]
 808961a:	2b00      	cmp	r3, #0
 808961c:	f000 837f 	beq.w	8089d1e <strftime+0x93e>
 8089620:	462b      	mov	r3, r5
 8089622:	4642      	mov	r2, r8
 8089624:	e093      	b.n	808974e <strftime+0x36e>
 8089626:	49b6      	ldr	r1, [pc, #728]	; (8089900 <strftime+0x520>)
 8089628:	f8d5 b014 	ldr.w	fp, [r5, #20]
 808962c:	458b      	cmp	fp, r1
 808962e:	bfac      	ite	ge
 8089630:	2100      	movge	r1, #0
 8089632:	2101      	movlt	r1, #1
 8089634:	f1bb 0f00 	cmp.w	fp, #0
 8089638:	db04      	blt.n	8089644 <strftime+0x264>
 808963a:	2064      	movs	r0, #100	; 0x64
 808963c:	fb9b f0f0 	sdiv	r0, fp, r0
 8089640:	3013      	adds	r0, #19
 8089642:	e008      	b.n	8089656 <strftime+0x276>
 8089644:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
 8089648:	9107      	str	r1, [sp, #28]
 808964a:	f000 ff77 	bl	808a53c <abs>
 808964e:	2364      	movs	r3, #100	; 0x64
 8089650:	fb90 f0f3 	sdiv	r0, r0, r3
 8089654:	9907      	ldr	r1, [sp, #28]
 8089656:	f1ba 0f00 	cmp.w	sl, #0
 808965a:	d008      	beq.n	808966e <strftime+0x28e>
 808965c:	2863      	cmp	r0, #99	; 0x63
 808965e:	dd09      	ble.n	8089674 <strftime+0x294>
 8089660:	4ba8      	ldr	r3, [pc, #672]	; (8089904 <strftime+0x524>)
 8089662:	4aa9      	ldr	r2, [pc, #676]	; (8089908 <strftime+0x528>)
 8089664:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 8089668:	bf18      	it	ne
 808966a:	4613      	movne	r3, r2
 808966c:	e003      	b.n	8089676 <strftime+0x296>
 808966e:	4ba6      	ldr	r3, [pc, #664]	; (8089908 <strftime+0x528>)
 8089670:	4aa6      	ldr	r2, [pc, #664]	; (808990c <strftime+0x52c>)
 8089672:	e001      	b.n	8089678 <strftime+0x298>
 8089674:	4ba4      	ldr	r3, [pc, #656]	; (8089908 <strftime+0x528>)
 8089676:	4aa6      	ldr	r2, [pc, #664]	; (8089910 <strftime+0x530>)
 8089678:	f1b8 0f01 	cmp.w	r8, #1
 808967c:	bf98      	it	ls
 808967e:	f04f 0802 	movls.w	r8, #2
 8089682:	ebc1 0108 	rsb	r1, r1, r8
 8089686:	9001      	str	r0, [sp, #4]
 8089688:	9100      	str	r1, [sp, #0]
 808968a:	489d      	ldr	r0, [pc, #628]	; (8089900 <strftime+0x520>)
 808968c:	49a1      	ldr	r1, [pc, #644]	; (8089914 <strftime+0x534>)
 808968e:	4583      	cmp	fp, r0
 8089690:	bfb8      	it	lt
 8089692:	460b      	movlt	r3, r1
 8089694:	e21d      	b.n	8089ad2 <strftime+0x6f2>
 8089696:	4aa0      	ldr	r2, [pc, #640]	; (8089918 <strftime+0x538>)
 8089698:	49a0      	ldr	r1, [pc, #640]	; (808991c <strftime+0x53c>)
 808969a:	68eb      	ldr	r3, [r5, #12]
 808969c:	2864      	cmp	r0, #100	; 0x64
 808969e:	bf08      	it	eq
 80896a0:	460a      	moveq	r2, r1
 80896a2:	1b31      	subs	r1, r6, r4
 80896a4:	1938      	adds	r0, r7, r4
 80896a6:	f7fb f873 	bl	8084790 <sniprintf>
 80896aa:	2800      	cmp	r0, #0
 80896ac:	f280 8302 	bge.w	8089cb4 <strftime+0x8d4>
 80896b0:	e340      	b.n	8089d34 <strftime+0x954>
 80896b2:	6968      	ldr	r0, [r5, #20]
 80896b4:	692b      	ldr	r3, [r5, #16]
 80896b6:	2800      	cmp	r0, #0
 80896b8:	f103 0b01 	add.w	fp, r3, #1
 80896bc:	eb07 0804 	add.w	r8, r7, r4
 80896c0:	ebc4 0a06 	rsb	sl, r4, r6
 80896c4:	68eb      	ldr	r3, [r5, #12]
 80896c6:	db05      	blt.n	80896d4 <strftime+0x2f4>
 80896c8:	2264      	movs	r2, #100	; 0x64
 80896ca:	fb90 f1f2 	sdiv	r1, r0, r2
 80896ce:	fb02 0011 	mls	r0, r2, r1, r0
 80896d2:	e00a      	b.n	80896ea <strftime+0x30a>
 80896d4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80896d8:	9307      	str	r3, [sp, #28]
 80896da:	f000 ff2f 	bl	808a53c <abs>
 80896de:	2264      	movs	r2, #100	; 0x64
 80896e0:	fb90 f1f2 	sdiv	r1, r0, r2
 80896e4:	fb01 0012 	mls	r0, r1, r2, r0
 80896e8:	9b07      	ldr	r3, [sp, #28]
 80896ea:	9001      	str	r0, [sp, #4]
 80896ec:	9300      	str	r3, [sp, #0]
 80896ee:	4651      	mov	r1, sl
 80896f0:	465b      	mov	r3, fp
 80896f2:	4640      	mov	r0, r8
 80896f4:	4a8a      	ldr	r2, [pc, #552]	; (8089920 <strftime+0x540>)
 80896f6:	f7fb f84b 	bl	8084790 <sniprintf>
 80896fa:	e7d6      	b.n	80896aa <strftime+0x2ca>
 80896fc:	2325      	movs	r3, #37	; 0x25
 80896fe:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8089702:	f1ba 0f00 	cmp.w	sl, #0
 8089706:	d007      	beq.n	8089718 <strftime+0x338>
 8089708:	f1b8 0f05 	cmp.w	r8, #5
 808970c:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
 8089710:	bf98      	it	ls
 8089712:	f04f 0806 	movls.w	r8, #6
 8089716:	e004      	b.n	8089722 <strftime+0x342>
 8089718:	232b      	movs	r3, #43	; 0x2b
 808971a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 808971e:	f04f 080a 	mov.w	r8, #10
 8089722:	f1b8 0306 	subs.w	r3, r8, #6
 8089726:	d102      	bne.n	808972e <strftime+0x34e>
 8089728:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 808972c:	e00a      	b.n	8089744 <strftime+0x364>
 808972e:	4a7d      	ldr	r2, [pc, #500]	; (8089924 <strftime+0x544>)
 8089730:	211e      	movs	r1, #30
 8089732:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 8089736:	f7fb f82b 	bl	8084790 <sniprintf>
 808973a:	2800      	cmp	r0, #0
 808973c:	ddf4      	ble.n	8089728 <strftime+0x348>
 808973e:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 8089742:	4418      	add	r0, r3
 8089744:	4978      	ldr	r1, [pc, #480]	; (8089928 <strftime+0x548>)
 8089746:	f7ff fdc7 	bl	80892d8 <strcpy>
 808974a:	462b      	mov	r3, r5
 808974c:	aa0a      	add	r2, sp, #40	; 0x28
 808974e:	1b31      	subs	r1, r6, r4
 8089750:	1938      	adds	r0, r7, r4
 8089752:	f7ff fe45 	bl	80893e0 <strftime>
 8089756:	2800      	cmp	r0, #0
 8089758:	f340 82ec 	ble.w	8089d34 <strftime+0x954>
 808975c:	4404      	add	r4, r0
 808975e:	e2de      	b.n	8089d1e <strftime+0x93e>
 8089760:	4628      	mov	r0, r5
 8089762:	f7ff fddc 	bl	808931e <iso_year_adjust>
 8089766:	4680      	mov	r8, r0
 8089768:	6968      	ldr	r0, [r5, #20]
 808976a:	2800      	cmp	r0, #0
 808976c:	db05      	blt.n	808977a <strftime+0x39a>
 808976e:	2264      	movs	r2, #100	; 0x64
 8089770:	fb90 f1f2 	sdiv	r1, r0, r2
 8089774:	fb02 0011 	mls	r0, r2, r1, r0
 8089778:	e008      	b.n	808978c <strftime+0x3ac>
 808977a:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808977e:	f000 fedd 	bl	808a53c <abs>
 8089782:	2264      	movs	r2, #100	; 0x64
 8089784:	fb90 f3f2 	sdiv	r3, r0, r2
 8089788:	fb03 0012 	mls	r0, r3, r2, r0
 808978c:	f1b8 0f00 	cmp.w	r8, #0
 8089790:	da06      	bge.n	80897a0 <strftime+0x3c0>
 8089792:	696a      	ldr	r2, [r5, #20]
 8089794:	4b65      	ldr	r3, [pc, #404]	; (808992c <strftime+0x54c>)
 8089796:	429a      	cmp	r2, r3
 8089798:	bfb8      	it	lt
 808979a:	f04f 0801 	movlt.w	r8, #1
 808979e:	e006      	b.n	80897ae <strftime+0x3ce>
 80897a0:	d005      	beq.n	80897ae <strftime+0x3ce>
 80897a2:	696a      	ldr	r2, [r5, #20]
 80897a4:	4b56      	ldr	r3, [pc, #344]	; (8089900 <strftime+0x520>)
 80897a6:	429a      	cmp	r2, r3
 80897a8:	bfb8      	it	lt
 80897aa:	f04f 38ff 	movlt.w	r8, #4294967295
 80897ae:	2364      	movs	r3, #100	; 0x64
 80897b0:	4440      	add	r0, r8
 80897b2:	fb90 f2f3 	sdiv	r2, r0, r3
 80897b6:	fb03 0012 	mls	r0, r3, r2, r0
 80897ba:	4418      	add	r0, r3
 80897bc:	e1f8      	b.n	8089bb0 <strftime+0x7d0>
 80897be:	4b50      	ldr	r3, [pc, #320]	; (8089900 <strftime+0x520>)
 80897c0:	6969      	ldr	r1, [r5, #20]
 80897c2:	4628      	mov	r0, r5
 80897c4:	4299      	cmp	r1, r3
 80897c6:	bfac      	ite	ge
 80897c8:	2300      	movge	r3, #0
 80897ca:	2301      	movlt	r3, #1
 80897cc:	9108      	str	r1, [sp, #32]
 80897ce:	9307      	str	r3, [sp, #28]
 80897d0:	f7ff fda5 	bl	808931e <iso_year_adjust>
 80897d4:	9908      	ldr	r1, [sp, #32]
 80897d6:	4683      	mov	fp, r0
 80897d8:	2900      	cmp	r1, #0
 80897da:	db04      	blt.n	80897e6 <strftime+0x406>
 80897dc:	2364      	movs	r3, #100	; 0x64
 80897de:	fb91 f3f3 	sdiv	r3, r1, r3
 80897e2:	3313      	adds	r3, #19
 80897e4:	e008      	b.n	80897f8 <strftime+0x418>
 80897e6:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 80897ea:	9108      	str	r1, [sp, #32]
 80897ec:	f000 fea6 	bl	808a53c <abs>
 80897f0:	2364      	movs	r3, #100	; 0x64
 80897f2:	fb90 f3f3 	sdiv	r3, r0, r3
 80897f6:	9908      	ldr	r1, [sp, #32]
 80897f8:	6968      	ldr	r0, [r5, #20]
 80897fa:	2800      	cmp	r0, #0
 80897fc:	db06      	blt.n	808980c <strftime+0x42c>
 80897fe:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8089802:	fb90 fcfe 	sdiv	ip, r0, lr
 8089806:	fb0e 001c 	mls	r0, lr, ip, r0
 808980a:	e00d      	b.n	8089828 <strftime+0x448>
 808980c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8089810:	9109      	str	r1, [sp, #36]	; 0x24
 8089812:	9308      	str	r3, [sp, #32]
 8089814:	f000 fe92 	bl	808a53c <abs>
 8089818:	f04f 0e64 	mov.w	lr, #100	; 0x64
 808981c:	fb90 fcfe 	sdiv	ip, r0, lr
 8089820:	fb0c 001e 	mls	r0, ip, lr, r0
 8089824:	9909      	ldr	r1, [sp, #36]	; 0x24
 8089826:	9b08      	ldr	r3, [sp, #32]
 8089828:	f1bb 0f00 	cmp.w	fp, #0
 808982c:	da08      	bge.n	8089840 <strftime+0x460>
 808982e:	6969      	ldr	r1, [r5, #20]
 8089830:	4a3e      	ldr	r2, [pc, #248]	; (808992c <strftime+0x54c>)
 8089832:	4291      	cmp	r1, r2
 8089834:	da0a      	bge.n	808984c <strftime+0x46c>
 8089836:	f04f 0b01 	mov.w	fp, #1
 808983a:	f8cd b01c 	str.w	fp, [sp, #28]
 808983e:	e005      	b.n	808984c <strftime+0x46c>
 8089840:	d004      	beq.n	808984c <strftime+0x46c>
 8089842:	4a2f      	ldr	r2, [pc, #188]	; (8089900 <strftime+0x520>)
 8089844:	4291      	cmp	r1, r2
 8089846:	bfb8      	it	lt
 8089848:	f04f 3bff 	movlt.w	fp, #4294967295
 808984c:	eb0b 0200 	add.w	r2, fp, r0
 8089850:	1c50      	adds	r0, r2, #1
 8089852:	d102      	bne.n	808985a <strftime+0x47a>
 8089854:	3b01      	subs	r3, #1
 8089856:	2263      	movs	r2, #99	; 0x63
 8089858:	e003      	b.n	8089862 <strftime+0x482>
 808985a:	2a64      	cmp	r2, #100	; 0x64
 808985c:	bf04      	itt	eq
 808985e:	3301      	addeq	r3, #1
 8089860:	2200      	moveq	r2, #0
 8089862:	2064      	movs	r0, #100	; 0x64
 8089864:	fb00 2303 	mla	r3, r0, r3, r2
 8089868:	9a07      	ldr	r2, [sp, #28]
 808986a:	b142      	cbz	r2, 808987e <strftime+0x49e>
 808986c:	222d      	movs	r2, #45	; 0x2d
 808986e:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
 8089872:	f1b8 0f00 	cmp.w	r8, #0
 8089876:	d013      	beq.n	80898a0 <strftime+0x4c0>
 8089878:	f108 38ff 	add.w	r8, r8, #4294967295
 808987c:	e010      	b.n	80898a0 <strftime+0x4c0>
 808987e:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 8089882:	d110      	bne.n	80898a6 <strftime+0x4c6>
 8089884:	f242 720f 	movw	r2, #9999	; 0x270f
 8089888:	4293      	cmp	r3, r2
 808988a:	d90c      	bls.n	80898a6 <strftime+0x4c6>
 808988c:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 8089890:	f1b8 0f00 	cmp.w	r8, #0
 8089894:	d1f0      	bne.n	8089878 <strftime+0x498>
 8089896:	aa12      	add	r2, sp, #72	; 0x48
 8089898:	2125      	movs	r1, #37	; 0x25
 808989a:	f802 1d1f 	strb.w	r1, [r2, #-31]!
 808989e:	e00a      	b.n	80898b6 <strftime+0x4d6>
 80898a0:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 80898a4:	e000      	b.n	80898a8 <strftime+0x4c8>
 80898a6:	aa0a      	add	r2, sp, #40	; 0x28
 80898a8:	2125      	movs	r1, #37	; 0x25
 80898aa:	7011      	strb	r1, [r2, #0]
 80898ac:	f1ba 0f00 	cmp.w	sl, #0
 80898b0:	d101      	bne.n	80898b6 <strftime+0x4d6>
 80898b2:	1c50      	adds	r0, r2, #1
 80898b4:	e002      	b.n	80898bc <strftime+0x4dc>
 80898b6:	2130      	movs	r1, #48	; 0x30
 80898b8:	1c90      	adds	r0, r2, #2
 80898ba:	7051      	strb	r1, [r2, #1]
 80898bc:	491c      	ldr	r1, [pc, #112]	; (8089930 <strftime+0x550>)
 80898be:	9307      	str	r3, [sp, #28]
 80898c0:	f7ff fd0a 	bl	80892d8 <strcpy>
 80898c4:	9b07      	ldr	r3, [sp, #28]
 80898c6:	9300      	str	r3, [sp, #0]
 80898c8:	e1ac      	b.n	8089c24 <strftime+0x844>
 80898ca:	4a14      	ldr	r2, [pc, #80]	; (808991c <strftime+0x53c>)
 80898cc:	4912      	ldr	r1, [pc, #72]	; (8089918 <strftime+0x538>)
 80898ce:	68ab      	ldr	r3, [r5, #8]
 80898d0:	286b      	cmp	r0, #107	; 0x6b
 80898d2:	bf08      	it	eq
 80898d4:	460a      	moveq	r2, r1
 80898d6:	e6e4      	b.n	80896a2 <strftime+0x2c2>
 80898d8:	68a9      	ldr	r1, [r5, #8]
 80898da:	230c      	movs	r3, #12
 80898dc:	b131      	cbz	r1, 80898ec <strftime+0x50c>
 80898de:	4299      	cmp	r1, r3
 80898e0:	bf16      	itet	ne
 80898e2:	fb91 f2f3 	sdivne	r2, r1, r3
 80898e6:	460b      	moveq	r3, r1
 80898e8:	fb03 1312 	mlsne	r3, r3, r2, r1
 80898ec:	4a0a      	ldr	r2, [pc, #40]	; (8089918 <strftime+0x538>)
 80898ee:	490b      	ldr	r1, [pc, #44]	; (808991c <strftime+0x53c>)
 80898f0:	2849      	cmp	r0, #73	; 0x49
 80898f2:	bf08      	it	eq
 80898f4:	460a      	moveq	r2, r1
 80898f6:	e6d4      	b.n	80896a2 <strftime+0x2c2>
 80898f8:	69eb      	ldr	r3, [r5, #28]
 80898fa:	4a0e      	ldr	r2, [pc, #56]	; (8089934 <strftime+0x554>)
 80898fc:	3301      	adds	r3, #1
 80898fe:	e6d0      	b.n	80896a2 <strftime+0x2c2>
 8089900:	fffff894 	.word	0xfffff894
 8089904:	0808b6ef 	.word	0x0808b6ef
 8089908:	0808acc4 	.word	0x0808acc4
 808990c:	0808b6e0 	.word	0x0808b6e0
 8089910:	0808b6e7 	.word	0x0808b6e7
 8089914:	0808b6f1 	.word	0x0808b6f1
 8089918:	0808b6f3 	.word	0x0808b6f3
 808991c:	0808b701 	.word	0x0808b701
 8089920:	0808b6f7 	.word	0x0808b6f7
 8089924:	0808a955 	.word	0x0808a955
 8089928:	0808b706 	.word	0x0808b706
 808992c:	fffff895 	.word	0xfffff895
 8089930:	0808b70e 	.word	0x0808b70e
 8089934:	0808b712 	.word	0x0808b712
 8089938:	692b      	ldr	r3, [r5, #16]
 808993a:	3301      	adds	r3, #1
 808993c:	e13c      	b.n	8089bb8 <strftime+0x7d8>
 808993e:	686b      	ldr	r3, [r5, #4]
 8089940:	e13a      	b.n	8089bb8 <strftime+0x7d8>
 8089942:	9b02      	ldr	r3, [sp, #8]
 8089944:	429c      	cmp	r4, r3
 8089946:	f080 81f5 	bcs.w	8089d34 <strftime+0x954>
 808994a:	230a      	movs	r3, #10
 808994c:	e1e5      	b.n	8089d1a <strftime+0x93a>
 808994e:	68ab      	ldr	r3, [r5, #8]
 8089950:	9a03      	ldr	r2, [sp, #12]
 8089952:	2b0b      	cmp	r3, #11
 8089954:	bfcc      	ite	gt
 8089956:	23a4      	movgt	r3, #164	; 0xa4
 8089958:	23a0      	movle	r3, #160	; 0xa0
 808995a:	4413      	add	r3, r2
 808995c:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8089960:	4640      	mov	r0, r8
 8089962:	f000 f9f1 	bl	8089d48 <strlen>
 8089966:	4642      	mov	r2, r8
 8089968:	4bb1      	ldr	r3, [pc, #708]	; (8089c30 <strftime+0x850>)
 808996a:	1939      	adds	r1, r7, r4
 808996c:	f8d3 e000 	ldr.w	lr, [r3]
 8089970:	4420      	add	r0, r4
 8089972:	4284      	cmp	r4, r0
 8089974:	f000 81d3 	beq.w	8089d1e <strftime+0x93e>
 8089978:	9b02      	ldr	r3, [sp, #8]
 808997a:	429c      	cmp	r4, r3
 808997c:	f080 81da 	bcs.w	8089d34 <strftime+0x954>
 8089980:	f899 3000 	ldrb.w	r3, [r9]
 8089984:	3401      	adds	r4, #1
 8089986:	2b50      	cmp	r3, #80	; 0x50
 8089988:	7813      	ldrb	r3, [r2, #0]
 808998a:	d10a      	bne.n	80899a2 <strftime+0x5c2>
 808998c:	eb0e 0c03 	add.w	ip, lr, r3
 8089990:	f89c c001 	ldrb.w	ip, [ip, #1]
 8089994:	f00c 0c03 	and.w	ip, ip, #3
 8089998:	f1bc 0f01 	cmp.w	ip, #1
 808999c:	bf08      	it	eq
 808999e:	3320      	addeq	r3, #32
 80899a0:	b2db      	uxtb	r3, r3
 80899a2:	f801 3b01 	strb.w	r3, [r1], #1
 80899a6:	3201      	adds	r2, #1
 80899a8:	e7e3      	b.n	8089972 <strftime+0x592>
 80899aa:	686b      	ldr	r3, [r5, #4]
 80899ac:	4aa1      	ldr	r2, [pc, #644]	; (8089c34 <strftime+0x854>)
 80899ae:	9300      	str	r3, [sp, #0]
 80899b0:	68ab      	ldr	r3, [r5, #8]
 80899b2:	e139      	b.n	8089c28 <strftime+0x848>
 80899b4:	6a2b      	ldr	r3, [r5, #32]
 80899b6:	2b00      	cmp	r3, #0
 80899b8:	db17      	blt.n	80899ea <strftime+0x60a>
 80899ba:	f000 fc37 	bl	808a22c <__tz_lock>
 80899be:	9b06      	ldr	r3, [sp, #24]
 80899c0:	b91b      	cbnz	r3, 80899ca <strftime+0x5ea>
 80899c2:	f000 fc35 	bl	808a230 <_tzset_unlocked>
 80899c6:	2301      	movs	r3, #1
 80899c8:	9306      	str	r3, [sp, #24]
 80899ca:	f000 fdff 	bl	808a5cc <__gettzinfo>
 80899ce:	6a2b      	ldr	r3, [r5, #32]
 80899d0:	221c      	movs	r2, #28
 80899d2:	2b00      	cmp	r3, #0
 80899d4:	bfd4      	ite	le
 80899d6:	2300      	movle	r3, #0
 80899d8:	2301      	movgt	r3, #1
 80899da:	fb02 0003 	mla	r0, r2, r3, r0
 80899de:	6a03      	ldr	r3, [r0, #32]
 80899e0:	f1c3 0800 	rsb	r8, r3, #0
 80899e4:	f000 fc23 	bl	808a22e <__tz_unlock>
 80899e8:	e001      	b.n	80899ee <strftime+0x60e>
 80899ea:	f04f 0800 	mov.w	r8, #0
 80899ee:	f8d5 e014 	ldr.w	lr, [r5, #20]
 80899f2:	ebc4 0c06 	rsb	ip, r4, r6
 80899f6:	4670      	mov	r0, lr
 80899f8:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
 80899fc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8089a00:	f141 33ff 	adc.w	r3, r1, #4294967295
 8089a04:	2a00      	cmp	r2, #0
 8089a06:	f173 0b00 	sbcs.w	fp, r3, #0
 8089a0a:	eb07 0a04 	add.w	sl, r7, r4
 8089a0e:	da03      	bge.n	8089a18 <strftime+0x638>
 8089a10:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
 8089a14:	f141 33ff 	adc.w	r3, r1, #4294967295
 8089a18:	0891      	lsrs	r1, r2, #2
 8089a1a:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
 8089a1e:	109b      	asrs	r3, r3, #2
 8089a20:	9104      	str	r1, [sp, #16]
 8089a22:	9305      	str	r3, [sp, #20]
 8089a24:	f10e 31ff 	add.w	r1, lr, #4294967295
 8089a28:	2364      	movs	r3, #100	; 0x64
 8089a2a:	fb91 f1f3 	sdiv	r1, r1, r3
 8089a2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8089a32:	1a52      	subs	r2, r2, r1
 8089a34:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
 8089a38:	f20e 102b 	addw	r0, lr, #299	; 0x12b
 8089a3c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8089a40:	fb90 f1f1 	sdiv	r1, r0, r1
 8089a44:	1852      	adds	r2, r2, r1
 8089a46:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 8089a4a:	f240 116d 	movw	r1, #365	; 0x16d
 8089a4e:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
 8089a52:	fb01 fe0e 	mul.w	lr, r1, lr
 8089a56:	69e9      	ldr	r1, [r5, #28]
 8089a58:	eb12 020e 	adds.w	r2, r2, lr
 8089a5c:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
 8089a60:	1852      	adds	r2, r2, r1
 8089a62:	f04f 0e18 	mov.w	lr, #24
 8089a66:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 8089a6a:	fba2 010e 	umull	r0, r1, r2, lr
 8089a6e:	fb0e 1103 	mla	r1, lr, r3, r1
 8089a72:	68ab      	ldr	r3, [r5, #8]
 8089a74:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
 8089a78:	18c0      	adds	r0, r0, r3
 8089a7a:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 8089a7e:	fba0 230e 	umull	r2, r3, r0, lr
 8089a82:	fb0e 3301 	mla	r3, lr, r1, r3
 8089a86:	6869      	ldr	r1, [r5, #4]
 8089a88:	1852      	adds	r2, r2, r1
 8089a8a:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 8089a8e:	fba2 010e 	umull	r0, r1, r2, lr
 8089a92:	fb0e 1103 	mla	r1, lr, r3, r1
 8089a96:	682b      	ldr	r3, [r5, #0]
 8089a98:	4a67      	ldr	r2, [pc, #412]	; (8089c38 <strftime+0x858>)
 8089a9a:	18c0      	adds	r0, r0, r3
 8089a9c:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 8089aa0:	ebb0 0008 	subs.w	r0, r0, r8
 8089aa4:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
 8089aa8:	e9cd 0100 	strd	r0, r1, [sp]
 8089aac:	4661      	mov	r1, ip
 8089aae:	4650      	mov	r0, sl
 8089ab0:	f7fa fe6e 	bl	8084790 <sniprintf>
 8089ab4:	e5f9      	b.n	80896aa <strftime+0x2ca>
 8089ab6:	682b      	ldr	r3, [r5, #0]
 8089ab8:	e07e      	b.n	8089bb8 <strftime+0x7d8>
 8089aba:	9b02      	ldr	r3, [sp, #8]
 8089abc:	429c      	cmp	r4, r3
 8089abe:	f080 8139 	bcs.w	8089d34 <strftime+0x954>
 8089ac2:	2309      	movs	r3, #9
 8089ac4:	e129      	b.n	8089d1a <strftime+0x93a>
 8089ac6:	682b      	ldr	r3, [r5, #0]
 8089ac8:	4a5c      	ldr	r2, [pc, #368]	; (8089c3c <strftime+0x85c>)
 8089aca:	9301      	str	r3, [sp, #4]
 8089acc:	686b      	ldr	r3, [r5, #4]
 8089ace:	9300      	str	r3, [sp, #0]
 8089ad0:	68ab      	ldr	r3, [r5, #8]
 8089ad2:	1b31      	subs	r1, r6, r4
 8089ad4:	1938      	adds	r0, r7, r4
 8089ad6:	e60e      	b.n	80896f6 <strftime+0x316>
 8089ad8:	9b02      	ldr	r3, [sp, #8]
 8089ada:	429c      	cmp	r4, r3
 8089adc:	f080 812a 	bcs.w	8089d34 <strftime+0x954>
 8089ae0:	69ab      	ldr	r3, [r5, #24]
 8089ae2:	1c62      	adds	r2, r4, #1
 8089ae4:	b90b      	cbnz	r3, 8089aea <strftime+0x70a>
 8089ae6:	2337      	movs	r3, #55	; 0x37
 8089ae8:	e000      	b.n	8089aec <strftime+0x70c>
 8089aea:	3330      	adds	r3, #48	; 0x30
 8089aec:	553b      	strb	r3, [r7, r4]
 8089aee:	4614      	mov	r4, r2
 8089af0:	e115      	b.n	8089d1e <strftime+0x93e>
 8089af2:	69eb      	ldr	r3, [r5, #28]
 8089af4:	69aa      	ldr	r2, [r5, #24]
 8089af6:	3307      	adds	r3, #7
 8089af8:	1a9b      	subs	r3, r3, r2
 8089afa:	2207      	movs	r2, #7
 8089afc:	fb93 f3f2 	sdiv	r3, r3, r2
 8089b00:	e05a      	b.n	8089bb8 <strftime+0x7d8>
 8089b02:	4628      	mov	r0, r5
 8089b04:	f7ff fc0b 	bl	808931e <iso_year_adjust>
 8089b08:	69aa      	ldr	r2, [r5, #24]
 8089b0a:	b10a      	cbz	r2, 8089b10 <strftime+0x730>
 8089b0c:	1e53      	subs	r3, r2, #1
 8089b0e:	e000      	b.n	8089b12 <strftime+0x732>
 8089b10:	2306      	movs	r3, #6
 8089b12:	2800      	cmp	r0, #0
 8089b14:	dc2f      	bgt.n	8089b76 <strftime+0x796>
 8089b16:	69ea      	ldr	r2, [r5, #28]
 8089b18:	d101      	bne.n	8089b1e <strftime+0x73e>
 8089b1a:	320a      	adds	r2, #10
 8089b1c:	e03b      	b.n	8089b96 <strftime+0x7b6>
 8089b1e:	f240 716b 	movw	r1, #1899	; 0x76b
 8089b22:	1a9a      	subs	r2, r3, r2
 8089b24:	696b      	ldr	r3, [r5, #20]
 8089b26:	2b00      	cmp	r3, #0
 8089b28:	bfb4      	ite	lt
 8089b2a:	4608      	movlt	r0, r1
 8089b2c:	f06f 0064 	mvnge.w	r0, #100	; 0x64
 8089b30:	4418      	add	r0, r3
 8089b32:	0781      	lsls	r1, r0, #30
 8089b34:	d107      	bne.n	8089b46 <strftime+0x766>
 8089b36:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8089b3a:	4601      	mov	r1, r0
 8089b3c:	fb90 f0fe 	sdiv	r0, r0, lr
 8089b40:	fb0e 1110 	mls	r1, lr, r0, r1
 8089b44:	b981      	cbnz	r1, 8089b68 <strftime+0x788>
 8089b46:	f240 716b 	movw	r1, #1899	; 0x76b
 8089b4a:	2b00      	cmp	r3, #0
 8089b4c:	bfa8      	it	ge
 8089b4e:	f06f 0164 	mvnge.w	r1, #100	; 0x64
 8089b52:	4419      	add	r1, r3
 8089b54:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8089b58:	fb91 f0f3 	sdiv	r0, r1, r3
 8089b5c:	fb03 1110 	mls	r1, r3, r0, r1
 8089b60:	fab1 f181 	clz	r1, r1
 8089b64:	0949      	lsrs	r1, r1, #5
 8089b66:	e000      	b.n	8089b6a <strftime+0x78a>
 8089b68:	2101      	movs	r1, #1
 8089b6a:	1a52      	subs	r2, r2, r1
 8089b6c:	2a05      	cmp	r2, #5
 8089b6e:	bfb4      	ite	lt
 8089b70:	2335      	movlt	r3, #53	; 0x35
 8089b72:	2334      	movge	r3, #52	; 0x34
 8089b74:	e020      	b.n	8089bb8 <strftime+0x7d8>
 8089b76:	2301      	movs	r3, #1
 8089b78:	e01e      	b.n	8089bb8 <strftime+0x7d8>
 8089b7a:	9b02      	ldr	r3, [sp, #8]
 8089b7c:	429c      	cmp	r4, r3
 8089b7e:	f080 80d9 	bcs.w	8089d34 <strftime+0x954>
 8089b82:	69ab      	ldr	r3, [r5, #24]
 8089b84:	3330      	adds	r3, #48	; 0x30
 8089b86:	e0c8      	b.n	8089d1a <strftime+0x93a>
 8089b88:	69aa      	ldr	r2, [r5, #24]
 8089b8a:	b10a      	cbz	r2, 8089b90 <strftime+0x7b0>
 8089b8c:	1e53      	subs	r3, r2, #1
 8089b8e:	e000      	b.n	8089b92 <strftime+0x7b2>
 8089b90:	2306      	movs	r3, #6
 8089b92:	69ea      	ldr	r2, [r5, #28]
 8089b94:	3207      	adds	r2, #7
 8089b96:	1ad2      	subs	r2, r2, r3
 8089b98:	2307      	movs	r3, #7
 8089b9a:	fb92 f3f3 	sdiv	r3, r2, r3
 8089b9e:	e00b      	b.n	8089bb8 <strftime+0x7d8>
 8089ba0:	6968      	ldr	r0, [r5, #20]
 8089ba2:	2800      	cmp	r0, #0
 8089ba4:	da03      	bge.n	8089bae <strftime+0x7ce>
 8089ba6:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8089baa:	f000 fcc7 	bl	808a53c <abs>
 8089bae:	2364      	movs	r3, #100	; 0x64
 8089bb0:	fb90 f2f3 	sdiv	r2, r0, r3
 8089bb4:	fb02 0313 	mls	r3, r2, r3, r0
 8089bb8:	4a21      	ldr	r2, [pc, #132]	; (8089c40 <strftime+0x860>)
 8089bba:	e572      	b.n	80896a2 <strftime+0x2c2>
 8089bbc:	696b      	ldr	r3, [r5, #20]
 8089bbe:	4a21      	ldr	r2, [pc, #132]	; (8089c44 <strftime+0x864>)
 8089bc0:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
 8089bc4:	4293      	cmp	r3, r2
 8089bc6:	da05      	bge.n	8089bd4 <strftime+0x7f4>
 8089bc8:	232d      	movs	r3, #45	; 0x2d
 8089bca:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8089bce:	f1cb 0b00 	rsb	fp, fp, #0
 8089bd2:	e008      	b.n	8089be6 <strftime+0x806>
 8089bd4:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 8089bd8:	d10d      	bne.n	8089bf6 <strftime+0x816>
 8089bda:	f242 730f 	movw	r3, #9999	; 0x270f
 8089bde:	459b      	cmp	fp, r3
 8089be0:	d911      	bls.n	8089c06 <strftime+0x826>
 8089be2:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 8089be6:	f1b8 0f00 	cmp.w	r8, #0
 8089bea:	d001      	beq.n	8089bf0 <strftime+0x810>
 8089bec:	f108 38ff 	add.w	r8, r8, #4294967295
 8089bf0:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 8089bf4:	e000      	b.n	8089bf8 <strftime+0x818>
 8089bf6:	ab0a      	add	r3, sp, #40	; 0x28
 8089bf8:	2225      	movs	r2, #37	; 0x25
 8089bfa:	701a      	strb	r2, [r3, #0]
 8089bfc:	f1ba 0f00 	cmp.w	sl, #0
 8089c00:	d108      	bne.n	8089c14 <strftime+0x834>
 8089c02:	1c58      	adds	r0, r3, #1
 8089c04:	e009      	b.n	8089c1a <strftime+0x83a>
 8089c06:	f1b8 0f00 	cmp.w	r8, #0
 8089c0a:	d1f4      	bne.n	8089bf6 <strftime+0x816>
 8089c0c:	2325      	movs	r3, #37	; 0x25
 8089c0e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8089c12:	ab0a      	add	r3, sp, #40	; 0x28
 8089c14:	2230      	movs	r2, #48	; 0x30
 8089c16:	1c98      	adds	r0, r3, #2
 8089c18:	705a      	strb	r2, [r3, #1]
 8089c1a:	490b      	ldr	r1, [pc, #44]	; (8089c48 <strftime+0x868>)
 8089c1c:	f7ff fb5c 	bl	80892d8 <strcpy>
 8089c20:	f8cd b000 	str.w	fp, [sp]
 8089c24:	4643      	mov	r3, r8
 8089c26:	aa0a      	add	r2, sp, #40	; 0x28
 8089c28:	1b31      	subs	r1, r6, r4
 8089c2a:	1938      	adds	r0, r7, r4
 8089c2c:	e03f      	b.n	8089cae <strftime+0x8ce>
 8089c2e:	bf00      	nop
 8089c30:	200000cc 	.word	0x200000cc
 8089c34:	0808b721 	.word	0x0808b721
 8089c38:	0808b717 	.word	0x0808b717
 8089c3c:	0808b71c 	.word	0x0808b71c
 8089c40:	0808b701 	.word	0x0808b701
 8089c44:	fffff894 	.word	0xfffff894
 8089c48:	0808b70e 	.word	0x0808b70e
 8089c4c:	6a2b      	ldr	r3, [r5, #32]
 8089c4e:	2b00      	cmp	r3, #0
 8089c50:	db65      	blt.n	8089d1e <strftime+0x93e>
 8089c52:	f000 faeb 	bl	808a22c <__tz_lock>
 8089c56:	9b06      	ldr	r3, [sp, #24]
 8089c58:	b91b      	cbnz	r3, 8089c62 <strftime+0x882>
 8089c5a:	f000 fae9 	bl	808a230 <_tzset_unlocked>
 8089c5e:	2301      	movs	r3, #1
 8089c60:	9306      	str	r3, [sp, #24]
 8089c62:	f000 fcb3 	bl	808a5cc <__gettzinfo>
 8089c66:	6a2b      	ldr	r3, [r5, #32]
 8089c68:	221c      	movs	r2, #28
 8089c6a:	2b00      	cmp	r3, #0
 8089c6c:	bfd4      	ite	le
 8089c6e:	2300      	movle	r3, #0
 8089c70:	2301      	movgt	r3, #1
 8089c72:	fb02 0003 	mla	r0, r2, r3, r0
 8089c76:	6a03      	ldr	r3, [r0, #32]
 8089c78:	eb07 0a04 	add.w	sl, r7, r4
 8089c7c:	f1c3 0800 	rsb	r8, r3, #0
 8089c80:	f000 fad5 	bl	808a22e <__tz_unlock>
 8089c84:	233c      	movs	r3, #60	; 0x3c
 8089c86:	fb98 f0f3 	sdiv	r0, r8, r3
 8089c8a:	9307      	str	r3, [sp, #28]
 8089c8c:	f000 fd38 	bl	808a700 <labs>
 8089c90:	9b07      	ldr	r3, [sp, #28]
 8089c92:	ebc4 0b06 	rsb	fp, r4, r6
 8089c96:	fb90 f2f3 	sdiv	r2, r0, r3
 8089c9a:	fb02 0013 	mls	r0, r2, r3, r0
 8089c9e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8089ca2:	9000      	str	r0, [sp, #0]
 8089ca4:	fb98 f3f3 	sdiv	r3, r8, r3
 8089ca8:	4659      	mov	r1, fp
 8089caa:	4650      	mov	r0, sl
 8089cac:	4a24      	ldr	r2, [pc, #144]	; (8089d40 <strftime+0x960>)
 8089cae:	f7fa fd6f 	bl	8084790 <sniprintf>
 8089cb2:	e4fa      	b.n	80896aa <strftime+0x2ca>
 8089cb4:	4404      	add	r4, r0
 8089cb6:	42a6      	cmp	r6, r4
 8089cb8:	d831      	bhi.n	8089d1e <strftime+0x93e>
 8089cba:	e03b      	b.n	8089d34 <strftime+0x954>
 8089cbc:	6a2b      	ldr	r3, [r5, #32]
 8089cbe:	2b00      	cmp	r3, #0
 8089cc0:	db2d      	blt.n	8089d1e <strftime+0x93e>
 8089cc2:	f000 fab3 	bl	808a22c <__tz_lock>
 8089cc6:	9b06      	ldr	r3, [sp, #24]
 8089cc8:	b91b      	cbnz	r3, 8089cd2 <strftime+0x8f2>
 8089cca:	f000 fab1 	bl	808a230 <_tzset_unlocked>
 8089cce:	2301      	movs	r3, #1
 8089cd0:	9306      	str	r3, [sp, #24]
 8089cd2:	6a2b      	ldr	r3, [r5, #32]
 8089cd4:	4a1b      	ldr	r2, [pc, #108]	; (8089d44 <strftime+0x964>)
 8089cd6:	2b00      	cmp	r3, #0
 8089cd8:	bfd4      	ite	le
 8089cda:	2300      	movle	r3, #0
 8089cdc:	2301      	movgt	r3, #1
 8089cde:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 8089ce2:	4640      	mov	r0, r8
 8089ce4:	f000 f830 	bl	8089d48 <strlen>
 8089ce8:	f108 38ff 	add.w	r8, r8, #4294967295
 8089cec:	193b      	adds	r3, r7, r4
 8089cee:	4420      	add	r0, r4
 8089cf0:	4284      	cmp	r4, r0
 8089cf2:	d00b      	beq.n	8089d0c <strftime+0x92c>
 8089cf4:	9a02      	ldr	r2, [sp, #8]
 8089cf6:	4294      	cmp	r4, r2
 8089cf8:	d205      	bcs.n	8089d06 <strftime+0x926>
 8089cfa:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 8089cfe:	3401      	adds	r4, #1
 8089d00:	f803 2b01 	strb.w	r2, [r3], #1
 8089d04:	e7f4      	b.n	8089cf0 <strftime+0x910>
 8089d06:	f000 fa92 	bl	808a22e <__tz_unlock>
 8089d0a:	e013      	b.n	8089d34 <strftime+0x954>
 8089d0c:	f000 fa8f 	bl	808a22e <__tz_unlock>
 8089d10:	e005      	b.n	8089d1e <strftime+0x93e>
 8089d12:	9b02      	ldr	r3, [sp, #8]
 8089d14:	429c      	cmp	r4, r3
 8089d16:	d20d      	bcs.n	8089d34 <strftime+0x954>
 8089d18:	2325      	movs	r3, #37	; 0x25
 8089d1a:	553b      	strb	r3, [r7, r4]
 8089d1c:	3401      	adds	r4, #1
 8089d1e:	f899 3000 	ldrb.w	r3, [r9]
 8089d22:	b11b      	cbz	r3, 8089d2c <strftime+0x94c>
 8089d24:	f109 0901 	add.w	r9, r9, #1
 8089d28:	f7ff bb69 	b.w	80893fe <strftime+0x1e>
 8089d2c:	b126      	cbz	r6, 8089d38 <strftime+0x958>
 8089d2e:	2300      	movs	r3, #0
 8089d30:	553b      	strb	r3, [r7, r4]
 8089d32:	e001      	b.n	8089d38 <strftime+0x958>
 8089d34:	2000      	movs	r0, #0
 8089d36:	e000      	b.n	8089d3a <strftime+0x95a>
 8089d38:	4620      	mov	r0, r4
 8089d3a:	b013      	add	sp, #76	; 0x4c
 8089d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8089d40:	0808b72b 	.word	0x0808b72b
 8089d44:	20000134 	.word	0x20000134

08089d48 <strlen>:
 8089d48:	4603      	mov	r3, r0
 8089d4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8089d4e:	2a00      	cmp	r2, #0
 8089d50:	d1fb      	bne.n	8089d4a <strlen+0x2>
 8089d52:	1a18      	subs	r0, r3, r0
 8089d54:	3801      	subs	r0, #1
 8089d56:	4770      	bx	lr

08089d58 <strncmp>:
 8089d58:	b530      	push	{r4, r5, lr}
 8089d5a:	b182      	cbz	r2, 8089d7e <strncmp+0x26>
 8089d5c:	1e45      	subs	r5, r0, #1
 8089d5e:	3901      	subs	r1, #1
 8089d60:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8089d64:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8089d68:	42a3      	cmp	r3, r4
 8089d6a:	d106      	bne.n	8089d7a <strncmp+0x22>
 8089d6c:	43ec      	mvns	r4, r5
 8089d6e:	4414      	add	r4, r2
 8089d70:	42e0      	cmn	r0, r4
 8089d72:	d001      	beq.n	8089d78 <strncmp+0x20>
 8089d74:	2b00      	cmp	r3, #0
 8089d76:	d1f3      	bne.n	8089d60 <strncmp+0x8>
 8089d78:	461c      	mov	r4, r3
 8089d7a:	1b18      	subs	r0, r3, r4
 8089d7c:	bd30      	pop	{r4, r5, pc}
 8089d7e:	4610      	mov	r0, r2
 8089d80:	bd30      	pop	{r4, r5, pc}

08089d82 <strncpy>:
 8089d82:	4603      	mov	r3, r0
 8089d84:	b510      	push	{r4, lr}
 8089d86:	b142      	cbz	r2, 8089d9a <strncpy+0x18>
 8089d88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8089d8c:	3a01      	subs	r2, #1
 8089d8e:	f803 4b01 	strb.w	r4, [r3], #1
 8089d92:	2c00      	cmp	r4, #0
 8089d94:	d1f7      	bne.n	8089d86 <strncpy+0x4>
 8089d96:	441a      	add	r2, r3
 8089d98:	e000      	b.n	8089d9c <strncpy+0x1a>
 8089d9a:	bd10      	pop	{r4, pc}
 8089d9c:	4293      	cmp	r3, r2
 8089d9e:	d002      	beq.n	8089da6 <strncpy+0x24>
 8089da0:	f803 4b01 	strb.w	r4, [r3], #1
 8089da4:	e7fa      	b.n	8089d9c <strncpy+0x1a>
 8089da6:	bd10      	pop	{r4, pc}

08089da8 <strrchr>:
 8089da8:	b538      	push	{r3, r4, r5, lr}
 8089daa:	4603      	mov	r3, r0
 8089dac:	460d      	mov	r5, r1
 8089dae:	b141      	cbz	r1, 8089dc2 <strrchr+0x1a>
 8089db0:	2400      	movs	r4, #0
 8089db2:	4629      	mov	r1, r5
 8089db4:	4618      	mov	r0, r3
 8089db6:	f7ff fa6d 	bl	8089294 <strchr>
 8089dba:	b130      	cbz	r0, 8089dca <strrchr+0x22>
 8089dbc:	1c43      	adds	r3, r0, #1
 8089dbe:	4604      	mov	r4, r0
 8089dc0:	e7f7      	b.n	8089db2 <strrchr+0xa>
 8089dc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8089dc6:	f7ff ba65 	b.w	8089294 <strchr>
 8089dca:	4620      	mov	r0, r4
 8089dcc:	bd38      	pop	{r3, r4, r5, pc}
	...

08089dd0 <strtok>:
 8089dd0:	4b17      	ldr	r3, [pc, #92]	; (8089e30 <strtok+0x60>)
 8089dd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8089dd6:	681d      	ldr	r5, [r3, #0]
 8089dd8:	4606      	mov	r6, r0
 8089dda:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8089ddc:	460f      	mov	r7, r1
 8089dde:	b9fc      	cbnz	r4, 8089e20 <strtok+0x50>
 8089de0:	2050      	movs	r0, #80	; 0x50
 8089de2:	f7fa fca5 	bl	8084730 <malloc>
 8089de6:	65a8      	str	r0, [r5, #88]	; 0x58
 8089de8:	6084      	str	r4, [r0, #8]
 8089dea:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8089dec:	6004      	str	r4, [r0, #0]
 8089dee:	6044      	str	r4, [r0, #4]
 8089df0:	611c      	str	r4, [r3, #16]
 8089df2:	60dc      	str	r4, [r3, #12]
 8089df4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8089df6:	619c      	str	r4, [r3, #24]
 8089df8:	615c      	str	r4, [r3, #20]
 8089dfa:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8089dfc:	62dc      	str	r4, [r3, #44]	; 0x2c
 8089dfe:	629c      	str	r4, [r3, #40]	; 0x28
 8089e00:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8089e02:	635c      	str	r4, [r3, #52]	; 0x34
 8089e04:	631c      	str	r4, [r3, #48]	; 0x30
 8089e06:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8089e08:	63dc      	str	r4, [r3, #60]	; 0x3c
 8089e0a:	639c      	str	r4, [r3, #56]	; 0x38
 8089e0c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8089e0e:	645c      	str	r4, [r3, #68]	; 0x44
 8089e10:	641c      	str	r4, [r3, #64]	; 0x40
 8089e12:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8089e14:	64dc      	str	r4, [r3, #76]	; 0x4c
 8089e16:	649c      	str	r4, [r3, #72]	; 0x48
 8089e18:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8089e1a:	771c      	strb	r4, [r3, #28]
 8089e1c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8089e1e:	625c      	str	r4, [r3, #36]	; 0x24
 8089e20:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8089e22:	4639      	mov	r1, r7
 8089e24:	4630      	mov	r0, r6
 8089e26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8089e2a:	2301      	movs	r3, #1
 8089e2c:	f000 b802 	b.w	8089e34 <__strtok_r>
 8089e30:	20000130 	.word	0x20000130

08089e34 <__strtok_r>:
 8089e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8089e36:	b948      	cbnz	r0, 8089e4c <__strtok_r+0x18>
 8089e38:	6810      	ldr	r0, [r2, #0]
 8089e3a:	b938      	cbnz	r0, 8089e4c <__strtok_r+0x18>
 8089e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8089e3e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8089e42:	b15e      	cbz	r6, 8089e5c <__strtok_r+0x28>
 8089e44:	42b5      	cmp	r5, r6
 8089e46:	d1fa      	bne.n	8089e3e <__strtok_r+0xa>
 8089e48:	b12b      	cbz	r3, 8089e56 <__strtok_r+0x22>
 8089e4a:	4620      	mov	r0, r4
 8089e4c:	4604      	mov	r4, r0
 8089e4e:	460f      	mov	r7, r1
 8089e50:	f814 5b01 	ldrb.w	r5, [r4], #1
 8089e54:	e7f3      	b.n	8089e3e <__strtok_r+0xa>
 8089e56:	6014      	str	r4, [r2, #0]
 8089e58:	7003      	strb	r3, [r0, #0]
 8089e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8089e5c:	b94d      	cbnz	r5, 8089e72 <__strtok_r+0x3e>
 8089e5e:	6015      	str	r5, [r2, #0]
 8089e60:	4628      	mov	r0, r5
 8089e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8089e64:	f817 6b01 	ldrb.w	r6, [r7], #1
 8089e68:	42b5      	cmp	r5, r6
 8089e6a:	d007      	beq.n	8089e7c <__strtok_r+0x48>
 8089e6c:	2e00      	cmp	r6, #0
 8089e6e:	d1f9      	bne.n	8089e64 <__strtok_r+0x30>
 8089e70:	461c      	mov	r4, r3
 8089e72:	4623      	mov	r3, r4
 8089e74:	460f      	mov	r7, r1
 8089e76:	f813 5b01 	ldrb.w	r5, [r3], #1
 8089e7a:	e7f3      	b.n	8089e64 <__strtok_r+0x30>
 8089e7c:	b115      	cbz	r5, 8089e84 <__strtok_r+0x50>
 8089e7e:	2100      	movs	r1, #0
 8089e80:	7021      	strb	r1, [r4, #0]
 8089e82:	e000      	b.n	8089e86 <__strtok_r+0x52>
 8089e84:	462b      	mov	r3, r5
 8089e86:	6013      	str	r3, [r2, #0]
 8089e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08089e8c <_strtol_r>:
 8089e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8089e90:	460f      	mov	r7, r1
 8089e92:	4680      	mov	r8, r0
 8089e94:	483f      	ldr	r0, [pc, #252]	; (8089f94 <_strtol_r+0x108>)
 8089e96:	f8d0 9000 	ldr.w	r9, [r0]
 8089e9a:	463d      	mov	r5, r7
 8089e9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8089ea0:	eb09 0004 	add.w	r0, r9, r4
 8089ea4:	7840      	ldrb	r0, [r0, #1]
 8089ea6:	f000 0008 	and.w	r0, r0, #8
 8089eaa:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 8089eae:	b108      	cbz	r0, 8089eb4 <_strtol_r+0x28>
 8089eb0:	462f      	mov	r7, r5
 8089eb2:	e7f2      	b.n	8089e9a <_strtol_r+0xe>
 8089eb4:	2c2d      	cmp	r4, #45	; 0x2d
 8089eb6:	d103      	bne.n	8089ec0 <_strtol_r+0x34>
 8089eb8:	1cbd      	adds	r5, r7, #2
 8089eba:	787c      	ldrb	r4, [r7, #1]
 8089ebc:	2601      	movs	r6, #1
 8089ebe:	e003      	b.n	8089ec8 <_strtol_r+0x3c>
 8089ec0:	2c2b      	cmp	r4, #43	; 0x2b
 8089ec2:	bf04      	itt	eq
 8089ec4:	787c      	ldrbeq	r4, [r7, #1]
 8089ec6:	1cbd      	addeq	r5, r7, #2
 8089ec8:	b113      	cbz	r3, 8089ed0 <_strtol_r+0x44>
 8089eca:	2b10      	cmp	r3, #16
 8089ecc:	d10a      	bne.n	8089ee4 <_strtol_r+0x58>
 8089ece:	e05b      	b.n	8089f88 <_strtol_r+0xfc>
 8089ed0:	2c30      	cmp	r4, #48	; 0x30
 8089ed2:	d157      	bne.n	8089f84 <_strtol_r+0xf8>
 8089ed4:	7828      	ldrb	r0, [r5, #0]
 8089ed6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8089eda:	2858      	cmp	r0, #88	; 0x58
 8089edc:	d14d      	bne.n	8089f7a <_strtol_r+0xee>
 8089ede:	786c      	ldrb	r4, [r5, #1]
 8089ee0:	2310      	movs	r3, #16
 8089ee2:	3502      	adds	r5, #2
 8089ee4:	2e00      	cmp	r6, #0
 8089ee6:	bf14      	ite	ne
 8089ee8:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 8089eec:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 8089ef0:	fbbc faf3 	udiv	sl, ip, r3
 8089ef4:	2700      	movs	r7, #0
 8089ef6:	4638      	mov	r0, r7
 8089ef8:	fb03 cc1a 	mls	ip, r3, sl, ip
 8089efc:	eb09 0e04 	add.w	lr, r9, r4
 8089f00:	f89e e001 	ldrb.w	lr, [lr, #1]
 8089f04:	f01e 0f04 	tst.w	lr, #4
 8089f08:	d001      	beq.n	8089f0e <_strtol_r+0x82>
 8089f0a:	3c30      	subs	r4, #48	; 0x30
 8089f0c:	e00b      	b.n	8089f26 <_strtol_r+0x9a>
 8089f0e:	f01e 0e03 	ands.w	lr, lr, #3
 8089f12:	d01b      	beq.n	8089f4c <_strtol_r+0xc0>
 8089f14:	f1be 0f01 	cmp.w	lr, #1
 8089f18:	bf0c      	ite	eq
 8089f1a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 8089f1e:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8089f22:	ebce 0404 	rsb	r4, lr, r4
 8089f26:	42a3      	cmp	r3, r4
 8089f28:	dd10      	ble.n	8089f4c <_strtol_r+0xc0>
 8089f2a:	f1b7 3fff 	cmp.w	r7, #4294967295
 8089f2e:	d00a      	beq.n	8089f46 <_strtol_r+0xba>
 8089f30:	4550      	cmp	r0, sl
 8089f32:	d806      	bhi.n	8089f42 <_strtol_r+0xb6>
 8089f34:	d101      	bne.n	8089f3a <_strtol_r+0xae>
 8089f36:	4564      	cmp	r4, ip
 8089f38:	dc03      	bgt.n	8089f42 <_strtol_r+0xb6>
 8089f3a:	fb03 4000 	mla	r0, r3, r0, r4
 8089f3e:	2701      	movs	r7, #1
 8089f40:	e001      	b.n	8089f46 <_strtol_r+0xba>
 8089f42:	f04f 37ff 	mov.w	r7, #4294967295
 8089f46:	f815 4b01 	ldrb.w	r4, [r5], #1
 8089f4a:	e7d7      	b.n	8089efc <_strtol_r+0x70>
 8089f4c:	1c7b      	adds	r3, r7, #1
 8089f4e:	d10c      	bne.n	8089f6a <_strtol_r+0xde>
 8089f50:	2e00      	cmp	r6, #0
 8089f52:	f04f 0322 	mov.w	r3, #34	; 0x22
 8089f56:	bf14      	ite	ne
 8089f58:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8089f5c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8089f60:	f8c8 3000 	str.w	r3, [r8]
 8089f64:	b92a      	cbnz	r2, 8089f72 <_strtol_r+0xe6>
 8089f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8089f6a:	b106      	cbz	r6, 8089f6e <_strtol_r+0xe2>
 8089f6c:	4240      	negs	r0, r0
 8089f6e:	b172      	cbz	r2, 8089f8e <_strtol_r+0x102>
 8089f70:	b107      	cbz	r7, 8089f74 <_strtol_r+0xe8>
 8089f72:	1e69      	subs	r1, r5, #1
 8089f74:	6011      	str	r1, [r2, #0]
 8089f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8089f7a:	2430      	movs	r4, #48	; 0x30
 8089f7c:	2b00      	cmp	r3, #0
 8089f7e:	d1b1      	bne.n	8089ee4 <_strtol_r+0x58>
 8089f80:	2308      	movs	r3, #8
 8089f82:	e7af      	b.n	8089ee4 <_strtol_r+0x58>
 8089f84:	230a      	movs	r3, #10
 8089f86:	e7ad      	b.n	8089ee4 <_strtol_r+0x58>
 8089f88:	2c30      	cmp	r4, #48	; 0x30
 8089f8a:	d0a3      	beq.n	8089ed4 <_strtol_r+0x48>
 8089f8c:	e7aa      	b.n	8089ee4 <_strtol_r+0x58>
 8089f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8089f92:	bf00      	nop
 8089f94:	200000cc 	.word	0x200000cc

08089f98 <strtol>:
 8089f98:	4613      	mov	r3, r2
 8089f9a:	460a      	mov	r2, r1
 8089f9c:	4601      	mov	r1, r0
 8089f9e:	4802      	ldr	r0, [pc, #8]	; (8089fa8 <strtol+0x10>)
 8089fa0:	6800      	ldr	r0, [r0, #0]
 8089fa2:	f7ff bf73 	b.w	8089e8c <_strtol_r>
 8089fa6:	bf00      	nop
 8089fa8:	20000130 	.word	0x20000130

08089fac <_strtoul_r>:
 8089fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8089fb0:	460e      	mov	r6, r1
 8089fb2:	4680      	mov	r8, r0
 8089fb4:	483b      	ldr	r0, [pc, #236]	; (808a0a4 <_strtoul_r+0xf8>)
 8089fb6:	f8d0 9000 	ldr.w	r9, [r0]
 8089fba:	4635      	mov	r5, r6
 8089fbc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8089fc0:	eb09 0004 	add.w	r0, r9, r4
 8089fc4:	7840      	ldrb	r0, [r0, #1]
 8089fc6:	f000 0008 	and.w	r0, r0, #8
 8089fca:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 8089fce:	b108      	cbz	r0, 8089fd4 <_strtoul_r+0x28>
 8089fd0:	462e      	mov	r6, r5
 8089fd2:	e7f2      	b.n	8089fba <_strtoul_r+0xe>
 8089fd4:	2c2d      	cmp	r4, #45	; 0x2d
 8089fd6:	d103      	bne.n	8089fe0 <_strtoul_r+0x34>
 8089fd8:	1cb5      	adds	r5, r6, #2
 8089fda:	7874      	ldrb	r4, [r6, #1]
 8089fdc:	2701      	movs	r7, #1
 8089fde:	e003      	b.n	8089fe8 <_strtoul_r+0x3c>
 8089fe0:	2c2b      	cmp	r4, #43	; 0x2b
 8089fe2:	bf04      	itt	eq
 8089fe4:	7874      	ldrbeq	r4, [r6, #1]
 8089fe6:	1cb5      	addeq	r5, r6, #2
 8089fe8:	b113      	cbz	r3, 8089ff0 <_strtoul_r+0x44>
 8089fea:	2b10      	cmp	r3, #16
 8089fec:	d10a      	bne.n	808a004 <_strtoul_r+0x58>
 8089fee:	e053      	b.n	808a098 <_strtoul_r+0xec>
 8089ff0:	2c30      	cmp	r4, #48	; 0x30
 8089ff2:	d14f      	bne.n	808a094 <_strtoul_r+0xe8>
 8089ff4:	7828      	ldrb	r0, [r5, #0]
 8089ff6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8089ffa:	2858      	cmp	r0, #88	; 0x58
 8089ffc:	d145      	bne.n	808a08a <_strtoul_r+0xde>
 8089ffe:	786c      	ldrb	r4, [r5, #1]
 808a000:	2310      	movs	r3, #16
 808a002:	3502      	adds	r5, #2
 808a004:	f04f 3cff 	mov.w	ip, #4294967295
 808a008:	fbbc fcf3 	udiv	ip, ip, r3
 808a00c:	fb03 fa0c 	mul.w	sl, r3, ip
 808a010:	2600      	movs	r6, #0
 808a012:	ea6f 0a0a 	mvn.w	sl, sl
 808a016:	4630      	mov	r0, r6
 808a018:	eb09 0e04 	add.w	lr, r9, r4
 808a01c:	f89e e001 	ldrb.w	lr, [lr, #1]
 808a020:	f01e 0f04 	tst.w	lr, #4
 808a024:	d001      	beq.n	808a02a <_strtoul_r+0x7e>
 808a026:	3c30      	subs	r4, #48	; 0x30
 808a028:	e00b      	b.n	808a042 <_strtoul_r+0x96>
 808a02a:	f01e 0e03 	ands.w	lr, lr, #3
 808a02e:	d01a      	beq.n	808a066 <_strtoul_r+0xba>
 808a030:	f1be 0f01 	cmp.w	lr, #1
 808a034:	bf0c      	ite	eq
 808a036:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 808a03a:	f04f 0e57 	movne.w	lr, #87	; 0x57
 808a03e:	ebce 0404 	rsb	r4, lr, r4
 808a042:	42a3      	cmp	r3, r4
 808a044:	dd0f      	ble.n	808a066 <_strtoul_r+0xba>
 808a046:	2e00      	cmp	r6, #0
 808a048:	db08      	blt.n	808a05c <_strtoul_r+0xb0>
 808a04a:	4560      	cmp	r0, ip
 808a04c:	d806      	bhi.n	808a05c <_strtoul_r+0xb0>
 808a04e:	d101      	bne.n	808a054 <_strtoul_r+0xa8>
 808a050:	4554      	cmp	r4, sl
 808a052:	dc03      	bgt.n	808a05c <_strtoul_r+0xb0>
 808a054:	fb03 4000 	mla	r0, r3, r0, r4
 808a058:	2601      	movs	r6, #1
 808a05a:	e001      	b.n	808a060 <_strtoul_r+0xb4>
 808a05c:	f04f 36ff 	mov.w	r6, #4294967295
 808a060:	f815 4b01 	ldrb.w	r4, [r5], #1
 808a064:	e7d8      	b.n	808a018 <_strtoul_r+0x6c>
 808a066:	2e00      	cmp	r6, #0
 808a068:	da07      	bge.n	808a07a <_strtoul_r+0xce>
 808a06a:	2322      	movs	r3, #34	; 0x22
 808a06c:	f8c8 3000 	str.w	r3, [r8]
 808a070:	f04f 30ff 	mov.w	r0, #4294967295
 808a074:	b92a      	cbnz	r2, 808a082 <_strtoul_r+0xd6>
 808a076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808a07a:	b107      	cbz	r7, 808a07e <_strtoul_r+0xd2>
 808a07c:	4240      	negs	r0, r0
 808a07e:	b172      	cbz	r2, 808a09e <_strtoul_r+0xf2>
 808a080:	b106      	cbz	r6, 808a084 <_strtoul_r+0xd8>
 808a082:	1e69      	subs	r1, r5, #1
 808a084:	6011      	str	r1, [r2, #0]
 808a086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808a08a:	2430      	movs	r4, #48	; 0x30
 808a08c:	2b00      	cmp	r3, #0
 808a08e:	d1b9      	bne.n	808a004 <_strtoul_r+0x58>
 808a090:	2308      	movs	r3, #8
 808a092:	e7b7      	b.n	808a004 <_strtoul_r+0x58>
 808a094:	230a      	movs	r3, #10
 808a096:	e7b5      	b.n	808a004 <_strtoul_r+0x58>
 808a098:	2c30      	cmp	r4, #48	; 0x30
 808a09a:	d0ab      	beq.n	8089ff4 <_strtoul_r+0x48>
 808a09c:	e7b2      	b.n	808a004 <_strtoul_r+0x58>
 808a09e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808a0a2:	bf00      	nop
 808a0a4:	200000cc 	.word	0x200000cc

0808a0a8 <strtoul>:
 808a0a8:	4613      	mov	r3, r2
 808a0aa:	460a      	mov	r2, r1
 808a0ac:	4601      	mov	r1, r0
 808a0ae:	4802      	ldr	r0, [pc, #8]	; (808a0b8 <strtoul+0x10>)
 808a0b0:	6800      	ldr	r0, [r0, #0]
 808a0b2:	f7ff bf7b 	b.w	8089fac <_strtoul_r>
 808a0b6:	bf00      	nop
 808a0b8:	20000130 	.word	0x20000130

0808a0bc <__get_current_time_locale>:
 808a0bc:	4b04      	ldr	r3, [pc, #16]	; (808a0d0 <__get_current_time_locale+0x14>)
 808a0be:	4a05      	ldr	r2, [pc, #20]	; (808a0d4 <__get_current_time_locale+0x18>)
 808a0c0:	6818      	ldr	r0, [r3, #0]
 808a0c2:	4b05      	ldr	r3, [pc, #20]	; (808a0d8 <__get_current_time_locale+0x1c>)
 808a0c4:	2800      	cmp	r0, #0
 808a0c6:	bf14      	ite	ne
 808a0c8:	4610      	movne	r0, r2
 808a0ca:	4618      	moveq	r0, r3
 808a0cc:	4770      	bx	lr
 808a0ce:	bf00      	nop
 808a0d0:	20000664 	.word	0x20000664
 808a0d4:	20000668 	.word	0x20000668
 808a0d8:	0808b868 	.word	0x0808b868

0808a0dc <__tzcalc_limits>:
 808a0dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808a0e0:	4604      	mov	r4, r0
 808a0e2:	f000 fa73 	bl	808a5cc <__gettzinfo>
 808a0e6:	f240 73b1 	movw	r3, #1969	; 0x7b1
 808a0ea:	429c      	cmp	r4, r3
 808a0ec:	f340 8096 	ble.w	808a21c <__tzcalc_limits+0x140>
 808a0f0:	f240 156d 	movw	r5, #365	; 0x16d
 808a0f4:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 808a0f8:	18e3      	adds	r3, r4, r3
 808a0fa:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 808a0fe:	109b      	asrs	r3, r3, #2
 808a100:	fb05 3502 	mla	r5, r5, r2, r3
 808a104:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 808a108:	f06f 0363 	mvn.w	r3, #99	; 0x63
 808a10c:	fb92 f3f3 	sdiv	r3, r2, r3
 808a110:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 808a114:	442b      	add	r3, r5
 808a116:	18a5      	adds	r5, r4, r2
 808a118:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808a11c:	fb94 f7f2 	sdiv	r7, r4, r2
 808a120:	fb95 f5f2 	sdiv	r5, r5, r2
 808a124:	fb02 4717 	mls	r7, r2, r7, r4
 808a128:	441d      	add	r5, r3
 808a12a:	2364      	movs	r3, #100	; 0x64
 808a12c:	fb94 f6f3 	sdiv	r6, r4, r3
 808a130:	fab7 fe87 	clz	lr, r7
 808a134:	4601      	mov	r1, r0
 808a136:	fb03 4616 	mls	r6, r3, r6, r4
 808a13a:	f100 0338 	add.w	r3, r0, #56	; 0x38
 808a13e:	9301      	str	r3, [sp, #4]
 808a140:	f004 0303 	and.w	r3, r4, #3
 808a144:	6044      	str	r4, [r0, #4]
 808a146:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 808a14a:	9300      	str	r3, [sp, #0]
 808a14c:	f04f 0c07 	mov.w	ip, #7
 808a150:	7a0b      	ldrb	r3, [r1, #8]
 808a152:	2b4a      	cmp	r3, #74	; 0x4a
 808a154:	d10e      	bne.n	808a174 <__tzcalc_limits+0x98>
 808a156:	694b      	ldr	r3, [r1, #20]
 808a158:	9a00      	ldr	r2, [sp, #0]
 808a15a:	18ec      	adds	r4, r5, r3
 808a15c:	b902      	cbnz	r2, 808a160 <__tzcalc_limits+0x84>
 808a15e:	b906      	cbnz	r6, 808a162 <__tzcalc_limits+0x86>
 808a160:	b927      	cbnz	r7, 808a16c <__tzcalc_limits+0x90>
 808a162:	2b3b      	cmp	r3, #59	; 0x3b
 808a164:	bfd4      	ite	le
 808a166:	2300      	movle	r3, #0
 808a168:	2301      	movgt	r3, #1
 808a16a:	e000      	b.n	808a16e <__tzcalc_limits+0x92>
 808a16c:	2300      	movs	r3, #0
 808a16e:	4423      	add	r3, r4
 808a170:	3b01      	subs	r3, #1
 808a172:	e03f      	b.n	808a1f4 <__tzcalc_limits+0x118>
 808a174:	2b44      	cmp	r3, #68	; 0x44
 808a176:	d102      	bne.n	808a17e <__tzcalc_limits+0xa2>
 808a178:	694b      	ldr	r3, [r1, #20]
 808a17a:	442b      	add	r3, r5
 808a17c:	e03a      	b.n	808a1f4 <__tzcalc_limits+0x118>
 808a17e:	9b00      	ldr	r3, [sp, #0]
 808a180:	b92b      	cbnz	r3, 808a18e <__tzcalc_limits+0xb2>
 808a182:	2e00      	cmp	r6, #0
 808a184:	bf0c      	ite	eq
 808a186:	46f0      	moveq	r8, lr
 808a188:	f04f 0801 	movne.w	r8, #1
 808a18c:	e000      	b.n	808a190 <__tzcalc_limits+0xb4>
 808a18e:	46f0      	mov	r8, lr
 808a190:	46a9      	mov	r9, r5
 808a192:	4b24      	ldr	r3, [pc, #144]	; (808a224 <__tzcalc_limits+0x148>)
 808a194:	2230      	movs	r2, #48	; 0x30
 808a196:	fb02 3808 	mla	r8, r2, r8, r3
 808a19a:	68cc      	ldr	r4, [r1, #12]
 808a19c:	f1a8 0a04 	sub.w	sl, r8, #4
 808a1a0:	2301      	movs	r3, #1
 808a1a2:	42a3      	cmp	r3, r4
 808a1a4:	da04      	bge.n	808a1b0 <__tzcalc_limits+0xd4>
 808a1a6:	f85a bf04 	ldr.w	fp, [sl, #4]!
 808a1aa:	3301      	adds	r3, #1
 808a1ac:	44d9      	add	r9, fp
 808a1ae:	e7f8      	b.n	808a1a2 <__tzcalc_limits+0xc6>
 808a1b0:	f109 0304 	add.w	r3, r9, #4
 808a1b4:	fb93 fbfc 	sdiv	fp, r3, ip
 808a1b8:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 808a1bc:	ebca 0a03 	rsb	sl, sl, r3
 808a1c0:	694b      	ldr	r3, [r1, #20]
 808a1c2:	2c01      	cmp	r4, #1
 808a1c4:	bfb8      	it	lt
 808a1c6:	2401      	movlt	r4, #1
 808a1c8:	ebb3 0a0a 	subs.w	sl, r3, sl
 808a1cc:	690b      	ldr	r3, [r1, #16]
 808a1ce:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 808a1d2:	f103 33ff 	add.w	r3, r3, #4294967295
 808a1d6:	f104 34ff 	add.w	r4, r4, #4294967295
 808a1da:	bf48      	it	mi
 808a1dc:	f10a 0a07 	addmi.w	sl, sl, #7
 808a1e0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 808a1e4:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 808a1e8:	4453      	add	r3, sl
 808a1ea:	42a3      	cmp	r3, r4
 808a1ec:	db01      	blt.n	808a1f2 <__tzcalc_limits+0x116>
 808a1ee:	3b07      	subs	r3, #7
 808a1f0:	e7fb      	b.n	808a1ea <__tzcalc_limits+0x10e>
 808a1f2:	444b      	add	r3, r9
 808a1f4:	698c      	ldr	r4, [r1, #24]
 808a1f6:	4a0c      	ldr	r2, [pc, #48]	; (808a228 <__tzcalc_limits+0x14c>)
 808a1f8:	fb02 4303 	mla	r3, r2, r3, r4
 808a1fc:	6a0c      	ldr	r4, [r1, #32]
 808a1fe:	4423      	add	r3, r4
 808a200:	f841 3f1c 	str.w	r3, [r1, #28]!
 808a204:	9b01      	ldr	r3, [sp, #4]
 808a206:	4299      	cmp	r1, r3
 808a208:	d1a2      	bne.n	808a150 <__tzcalc_limits+0x74>
 808a20a:	69c3      	ldr	r3, [r0, #28]
 808a20c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 808a20e:	4293      	cmp	r3, r2
 808a210:	bfac      	ite	ge
 808a212:	2300      	movge	r3, #0
 808a214:	2301      	movlt	r3, #1
 808a216:	6003      	str	r3, [r0, #0]
 808a218:	2001      	movs	r0, #1
 808a21a:	e000      	b.n	808a21e <__tzcalc_limits+0x142>
 808a21c:	2000      	movs	r0, #0
 808a21e:	b003      	add	sp, #12
 808a220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808a224:	0808b680 	.word	0x0808b680
 808a228:	00015180 	.word	0x00015180

0808a22c <__tz_lock>:
 808a22c:	4770      	bx	lr

0808a22e <__tz_unlock>:
 808a22e:	4770      	bx	lr

0808a230 <_tzset_unlocked>:
 808a230:	4b01      	ldr	r3, [pc, #4]	; (808a238 <_tzset_unlocked+0x8>)
 808a232:	6818      	ldr	r0, [r3, #0]
 808a234:	f000 b802 	b.w	808a23c <_tzset_unlocked_r>
 808a238:	20000130 	.word	0x20000130

0808a23c <_tzset_unlocked_r>:
 808a23c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808a240:	b08d      	sub	sp, #52	; 0x34
 808a242:	4607      	mov	r7, r0
 808a244:	f000 f9c2 	bl	808a5cc <__gettzinfo>
 808a248:	49b0      	ldr	r1, [pc, #704]	; (808a50c <_tzset_unlocked_r+0x2d0>)
 808a24a:	4604      	mov	r4, r0
 808a24c:	4638      	mov	r0, r7
 808a24e:	f000 f9b5 	bl	808a5bc <_getenv_r>
 808a252:	4eaf      	ldr	r6, [pc, #700]	; (808a510 <_tzset_unlocked_r+0x2d4>)
 808a254:	4605      	mov	r5, r0
 808a256:	b960      	cbnz	r0, 808a272 <_tzset_unlocked_r+0x36>
 808a258:	4bae      	ldr	r3, [pc, #696]	; (808a514 <_tzset_unlocked_r+0x2d8>)
 808a25a:	4aaf      	ldr	r2, [pc, #700]	; (808a518 <_tzset_unlocked_r+0x2dc>)
 808a25c:	6018      	str	r0, [r3, #0]
 808a25e:	4baf      	ldr	r3, [pc, #700]	; (808a51c <_tzset_unlocked_r+0x2e0>)
 808a260:	6018      	str	r0, [r3, #0]
 808a262:	4baf      	ldr	r3, [pc, #700]	; (808a520 <_tzset_unlocked_r+0x2e4>)
 808a264:	6830      	ldr	r0, [r6, #0]
 808a266:	601a      	str	r2, [r3, #0]
 808a268:	605a      	str	r2, [r3, #4]
 808a26a:	f7fa fa69 	bl	8084740 <free>
 808a26e:	6035      	str	r5, [r6, #0]
 808a270:	e148      	b.n	808a504 <_tzset_unlocked_r+0x2c8>
 808a272:	6831      	ldr	r1, [r6, #0]
 808a274:	b979      	cbnz	r1, 808a296 <_tzset_unlocked_r+0x5a>
 808a276:	6830      	ldr	r0, [r6, #0]
 808a278:	f7fa fa62 	bl	8084740 <free>
 808a27c:	4628      	mov	r0, r5
 808a27e:	f7ff fd63 	bl	8089d48 <strlen>
 808a282:	1c41      	adds	r1, r0, #1
 808a284:	4638      	mov	r0, r7
 808a286:	f7fa fa9b 	bl	80847c0 <_malloc_r>
 808a28a:	6030      	str	r0, [r6, #0]
 808a28c:	b148      	cbz	r0, 808a2a2 <_tzset_unlocked_r+0x66>
 808a28e:	4629      	mov	r1, r5
 808a290:	f7ff f822 	bl	80892d8 <strcpy>
 808a294:	e005      	b.n	808a2a2 <_tzset_unlocked_r+0x66>
 808a296:	f7ff f815 	bl	80892c4 <strcmp>
 808a29a:	2800      	cmp	r0, #0
 808a29c:	f000 8132 	beq.w	808a504 <_tzset_unlocked_r+0x2c8>
 808a2a0:	e7e9      	b.n	808a276 <_tzset_unlocked_r+0x3a>
 808a2a2:	782b      	ldrb	r3, [r5, #0]
 808a2a4:	ae0a      	add	r6, sp, #40	; 0x28
 808a2a6:	2b3a      	cmp	r3, #58	; 0x3a
 808a2a8:	bf08      	it	eq
 808a2aa:	3501      	addeq	r5, #1
 808a2ac:	4633      	mov	r3, r6
 808a2ae:	4a9d      	ldr	r2, [pc, #628]	; (808a524 <_tzset_unlocked_r+0x2e8>)
 808a2b0:	499d      	ldr	r1, [pc, #628]	; (808a528 <_tzset_unlocked_r+0x2ec>)
 808a2b2:	4628      	mov	r0, r5
 808a2b4:	f7fa fa5c 	bl	8084770 <siscanf>
 808a2b8:	2800      	cmp	r0, #0
 808a2ba:	f340 8123 	ble.w	808a504 <_tzset_unlocked_r+0x2c8>
 808a2be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808a2c0:	18ef      	adds	r7, r5, r3
 808a2c2:	5ceb      	ldrb	r3, [r5, r3]
 808a2c4:	2b2d      	cmp	r3, #45	; 0x2d
 808a2c6:	d103      	bne.n	808a2d0 <_tzset_unlocked_r+0x94>
 808a2c8:	3701      	adds	r7, #1
 808a2ca:	f04f 35ff 	mov.w	r5, #4294967295
 808a2ce:	e003      	b.n	808a2d8 <_tzset_unlocked_r+0x9c>
 808a2d0:	2b2b      	cmp	r3, #43	; 0x2b
 808a2d2:	bf08      	it	eq
 808a2d4:	3701      	addeq	r7, #1
 808a2d6:	2501      	movs	r5, #1
 808a2d8:	f10d 0a20 	add.w	sl, sp, #32
 808a2dc:	f10d 0b1e 	add.w	fp, sp, #30
 808a2e0:	f04f 0800 	mov.w	r8, #0
 808a2e4:	9603      	str	r6, [sp, #12]
 808a2e6:	f8cd a008 	str.w	sl, [sp, #8]
 808a2ea:	9601      	str	r6, [sp, #4]
 808a2ec:	f8cd b000 	str.w	fp, [sp]
 808a2f0:	4633      	mov	r3, r6
 808a2f2:	aa07      	add	r2, sp, #28
 808a2f4:	498d      	ldr	r1, [pc, #564]	; (808a52c <_tzset_unlocked_r+0x2f0>)
 808a2f6:	4638      	mov	r0, r7
 808a2f8:	f8ad 801e 	strh.w	r8, [sp, #30]
 808a2fc:	f8ad 8020 	strh.w	r8, [sp, #32]
 808a300:	f7fa fa36 	bl	8084770 <siscanf>
 808a304:	4540      	cmp	r0, r8
 808a306:	f340 80fd 	ble.w	808a504 <_tzset_unlocked_r+0x2c8>
 808a30a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 808a30e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 808a312:	213c      	movs	r1, #60	; 0x3c
 808a314:	fb01 3302 	mla	r3, r1, r2, r3
 808a318:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 808a31c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 808a320:	fb01 3302 	mla	r3, r1, r2, r3
 808a324:	435d      	muls	r5, r3
 808a326:	4b7f      	ldr	r3, [pc, #508]	; (808a524 <_tzset_unlocked_r+0x2e8>)
 808a328:	6225      	str	r5, [r4, #32]
 808a32a:	4d7d      	ldr	r5, [pc, #500]	; (808a520 <_tzset_unlocked_r+0x2e4>)
 808a32c:	f8df 9208 	ldr.w	r9, [pc, #520]	; 808a538 <_tzset_unlocked_r+0x2fc>
 808a330:	602b      	str	r3, [r5, #0]
 808a332:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808a334:	464a      	mov	r2, r9
 808a336:	441f      	add	r7, r3
 808a338:	497b      	ldr	r1, [pc, #492]	; (808a528 <_tzset_unlocked_r+0x2ec>)
 808a33a:	4633      	mov	r3, r6
 808a33c:	4638      	mov	r0, r7
 808a33e:	f7fa fa17 	bl	8084770 <siscanf>
 808a342:	4540      	cmp	r0, r8
 808a344:	dc08      	bgt.n	808a358 <_tzset_unlocked_r+0x11c>
 808a346:	682b      	ldr	r3, [r5, #0]
 808a348:	6a22      	ldr	r2, [r4, #32]
 808a34a:	606b      	str	r3, [r5, #4]
 808a34c:	4b71      	ldr	r3, [pc, #452]	; (808a514 <_tzset_unlocked_r+0x2d8>)
 808a34e:	601a      	str	r2, [r3, #0]
 808a350:	4b72      	ldr	r3, [pc, #456]	; (808a51c <_tzset_unlocked_r+0x2e0>)
 808a352:	f8c3 8000 	str.w	r8, [r3]
 808a356:	e0d5      	b.n	808a504 <_tzset_unlocked_r+0x2c8>
 808a358:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808a35a:	f8c5 9004 	str.w	r9, [r5, #4]
 808a35e:	18fd      	adds	r5, r7, r3
 808a360:	5cfb      	ldrb	r3, [r7, r3]
 808a362:	2b2d      	cmp	r3, #45	; 0x2d
 808a364:	d103      	bne.n	808a36e <_tzset_unlocked_r+0x132>
 808a366:	3501      	adds	r5, #1
 808a368:	f04f 37ff 	mov.w	r7, #4294967295
 808a36c:	e003      	b.n	808a376 <_tzset_unlocked_r+0x13a>
 808a36e:	2b2b      	cmp	r3, #43	; 0x2b
 808a370:	bf08      	it	eq
 808a372:	3501      	addeq	r5, #1
 808a374:	2701      	movs	r7, #1
 808a376:	2300      	movs	r3, #0
 808a378:	f8ad 301c 	strh.w	r3, [sp, #28]
 808a37c:	f8ad 301e 	strh.w	r3, [sp, #30]
 808a380:	f8ad 3020 	strh.w	r3, [sp, #32]
 808a384:	930a      	str	r3, [sp, #40]	; 0x28
 808a386:	9603      	str	r6, [sp, #12]
 808a388:	f8cd a008 	str.w	sl, [sp, #8]
 808a38c:	9601      	str	r6, [sp, #4]
 808a38e:	f8cd b000 	str.w	fp, [sp]
 808a392:	4633      	mov	r3, r6
 808a394:	aa07      	add	r2, sp, #28
 808a396:	4965      	ldr	r1, [pc, #404]	; (808a52c <_tzset_unlocked_r+0x2f0>)
 808a398:	4628      	mov	r0, r5
 808a39a:	f7fa f9e9 	bl	8084770 <siscanf>
 808a39e:	2800      	cmp	r0, #0
 808a3a0:	dc04      	bgt.n	808a3ac <_tzset_unlocked_r+0x170>
 808a3a2:	6a23      	ldr	r3, [r4, #32]
 808a3a4:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 808a3a8:	63e3      	str	r3, [r4, #60]	; 0x3c
 808a3aa:	e00e      	b.n	808a3ca <_tzset_unlocked_r+0x18e>
 808a3ac:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 808a3b0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 808a3b4:	213c      	movs	r1, #60	; 0x3c
 808a3b6:	fb01 3302 	mla	r3, r1, r2, r3
 808a3ba:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 808a3be:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 808a3c2:	fb01 3302 	mla	r3, r1, r2, r3
 808a3c6:	435f      	muls	r7, r3
 808a3c8:	63e7      	str	r7, [r4, #60]	; 0x3c
 808a3ca:	4627      	mov	r7, r4
 808a3cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808a3ce:	f04f 0900 	mov.w	r9, #0
 808a3d2:	441d      	add	r5, r3
 808a3d4:	782b      	ldrb	r3, [r5, #0]
 808a3d6:	2b2c      	cmp	r3, #44	; 0x2c
 808a3d8:	bf08      	it	eq
 808a3da:	3501      	addeq	r5, #1
 808a3dc:	f895 8000 	ldrb.w	r8, [r5]
 808a3e0:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 808a3e4:	d126      	bne.n	808a434 <_tzset_unlocked_r+0x1f8>
 808a3e6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 808a3ea:	9302      	str	r3, [sp, #8]
 808a3ec:	ab09      	add	r3, sp, #36	; 0x24
 808a3ee:	9300      	str	r3, [sp, #0]
 808a3f0:	9603      	str	r6, [sp, #12]
 808a3f2:	9601      	str	r6, [sp, #4]
 808a3f4:	4633      	mov	r3, r6
 808a3f6:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 808a3fa:	494d      	ldr	r1, [pc, #308]	; (808a530 <_tzset_unlocked_r+0x2f4>)
 808a3fc:	4628      	mov	r0, r5
 808a3fe:	f7fa f9b7 	bl	8084770 <siscanf>
 808a402:	2803      	cmp	r0, #3
 808a404:	d17e      	bne.n	808a504 <_tzset_unlocked_r+0x2c8>
 808a406:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 808a40a:	1e4b      	subs	r3, r1, #1
 808a40c:	2b0b      	cmp	r3, #11
 808a40e:	d879      	bhi.n	808a504 <_tzset_unlocked_r+0x2c8>
 808a410:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 808a414:	1e53      	subs	r3, r2, #1
 808a416:	2b04      	cmp	r3, #4
 808a418:	d874      	bhi.n	808a504 <_tzset_unlocked_r+0x2c8>
 808a41a:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 808a41e:	2b06      	cmp	r3, #6
 808a420:	d870      	bhi.n	808a504 <_tzset_unlocked_r+0x2c8>
 808a422:	f887 8008 	strb.w	r8, [r7, #8]
 808a426:	60f9      	str	r1, [r7, #12]
 808a428:	613a      	str	r2, [r7, #16]
 808a42a:	617b      	str	r3, [r7, #20]
 808a42c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808a42e:	eb05 0803 	add.w	r8, r5, r3
 808a432:	e02a      	b.n	808a48a <_tzset_unlocked_r+0x24e>
 808a434:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 808a438:	bf06      	itte	eq
 808a43a:	4643      	moveq	r3, r8
 808a43c:	3501      	addeq	r5, #1
 808a43e:	2344      	movne	r3, #68	; 0x44
 808a440:	220a      	movs	r2, #10
 808a442:	a90b      	add	r1, sp, #44	; 0x2c
 808a444:	4628      	mov	r0, r5
 808a446:	9305      	str	r3, [sp, #20]
 808a448:	f7ff fe2e 	bl	808a0a8 <strtoul>
 808a44c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 808a450:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 808a454:	4545      	cmp	r5, r8
 808a456:	9b05      	ldr	r3, [sp, #20]
 808a458:	d114      	bne.n	808a484 <_tzset_unlocked_r+0x248>
 808a45a:	234d      	movs	r3, #77	; 0x4d
 808a45c:	f1b9 0f00 	cmp.w	r9, #0
 808a460:	d107      	bne.n	808a472 <_tzset_unlocked_r+0x236>
 808a462:	7223      	strb	r3, [r4, #8]
 808a464:	2303      	movs	r3, #3
 808a466:	60e3      	str	r3, [r4, #12]
 808a468:	2302      	movs	r3, #2
 808a46a:	6123      	str	r3, [r4, #16]
 808a46c:	f8c4 9014 	str.w	r9, [r4, #20]
 808a470:	e00b      	b.n	808a48a <_tzset_unlocked_r+0x24e>
 808a472:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 808a476:	230b      	movs	r3, #11
 808a478:	62a3      	str	r3, [r4, #40]	; 0x28
 808a47a:	2301      	movs	r3, #1
 808a47c:	62e3      	str	r3, [r4, #44]	; 0x2c
 808a47e:	2300      	movs	r3, #0
 808a480:	6323      	str	r3, [r4, #48]	; 0x30
 808a482:	e002      	b.n	808a48a <_tzset_unlocked_r+0x24e>
 808a484:	b280      	uxth	r0, r0
 808a486:	723b      	strb	r3, [r7, #8]
 808a488:	6178      	str	r0, [r7, #20]
 808a48a:	2302      	movs	r3, #2
 808a48c:	f8ad 301c 	strh.w	r3, [sp, #28]
 808a490:	2300      	movs	r3, #0
 808a492:	f8ad 301e 	strh.w	r3, [sp, #30]
 808a496:	f8ad 3020 	strh.w	r3, [sp, #32]
 808a49a:	930a      	str	r3, [sp, #40]	; 0x28
 808a49c:	f898 3000 	ldrb.w	r3, [r8]
 808a4a0:	2b2f      	cmp	r3, #47	; 0x2f
 808a4a2:	d10b      	bne.n	808a4bc <_tzset_unlocked_r+0x280>
 808a4a4:	9603      	str	r6, [sp, #12]
 808a4a6:	f8cd a008 	str.w	sl, [sp, #8]
 808a4aa:	9601      	str	r6, [sp, #4]
 808a4ac:	f8cd b000 	str.w	fp, [sp]
 808a4b0:	4633      	mov	r3, r6
 808a4b2:	aa07      	add	r2, sp, #28
 808a4b4:	491f      	ldr	r1, [pc, #124]	; (808a534 <_tzset_unlocked_r+0x2f8>)
 808a4b6:	4640      	mov	r0, r8
 808a4b8:	f7fa f95a 	bl	8084770 <siscanf>
 808a4bc:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 808a4c0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 808a4c4:	213c      	movs	r1, #60	; 0x3c
 808a4c6:	fb01 3302 	mla	r3, r1, r2, r3
 808a4ca:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 808a4ce:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 808a4d2:	fb01 3302 	mla	r3, r1, r2, r3
 808a4d6:	61bb      	str	r3, [r7, #24]
 808a4d8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 808a4da:	f109 0901 	add.w	r9, r9, #1
 808a4de:	f1b9 0f02 	cmp.w	r9, #2
 808a4e2:	4445      	add	r5, r8
 808a4e4:	f107 071c 	add.w	r7, r7, #28
 808a4e8:	f47f af74 	bne.w	808a3d4 <_tzset_unlocked_r+0x198>
 808a4ec:	6860      	ldr	r0, [r4, #4]
 808a4ee:	f7ff fdf5 	bl	808a0dc <__tzcalc_limits>
 808a4f2:	6a22      	ldr	r2, [r4, #32]
 808a4f4:	4b07      	ldr	r3, [pc, #28]	; (808a514 <_tzset_unlocked_r+0x2d8>)
 808a4f6:	601a      	str	r2, [r3, #0]
 808a4f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 808a4fa:	1a9b      	subs	r3, r3, r2
 808a4fc:	4a07      	ldr	r2, [pc, #28]	; (808a51c <_tzset_unlocked_r+0x2e0>)
 808a4fe:	bf18      	it	ne
 808a500:	2301      	movne	r3, #1
 808a502:	6013      	str	r3, [r2, #0]
 808a504:	b00d      	add	sp, #52	; 0x34
 808a506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808a50a:	bf00      	nop
 808a50c:	0808b964 	.word	0x0808b964
 808a510:	2000077c 	.word	0x2000077c
 808a514:	20000784 	.word	0x20000784
 808a518:	0808b967 	.word	0x0808b967
 808a51c:	20000780 	.word	0x20000780
 808a520:	20000134 	.word	0x20000134
 808a524:	2000076f 	.word	0x2000076f
 808a528:	0808b96b 	.word	0x0808b96b
 808a52c:	0808b98e 	.word	0x0808b98e
 808a530:	0808b97a 	.word	0x0808b97a
 808a534:	0808b98d 	.word	0x0808b98d
 808a538:	20000764 	.word	0x20000764

0808a53c <abs>:
 808a53c:	2800      	cmp	r0, #0
 808a53e:	bfb8      	it	lt
 808a540:	4240      	neglt	r0, r0
 808a542:	4770      	bx	lr

0808a544 <_findenv_r>:
 808a544:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808a548:	4607      	mov	r7, r0
 808a54a:	468b      	mov	fp, r1
 808a54c:	4690      	mov	r8, r2
 808a54e:	f000 f8db 	bl	808a708 <__env_lock>
 808a552:	4b19      	ldr	r3, [pc, #100]	; (808a5b8 <_findenv_r+0x74>)
 808a554:	681d      	ldr	r5, [r3, #0]
 808a556:	469a      	mov	sl, r3
 808a558:	b13d      	cbz	r5, 808a56a <_findenv_r+0x26>
 808a55a:	465c      	mov	r4, fp
 808a55c:	4623      	mov	r3, r4
 808a55e:	f813 2b01 	ldrb.w	r2, [r3], #1
 808a562:	b142      	cbz	r2, 808a576 <_findenv_r+0x32>
 808a564:	2a3d      	cmp	r2, #61	; 0x3d
 808a566:	461c      	mov	r4, r3
 808a568:	d1f8      	bne.n	808a55c <_findenv_r+0x18>
 808a56a:	4638      	mov	r0, r7
 808a56c:	f000 f8cd 	bl	808a70a <__env_unlock>
 808a570:	2000      	movs	r0, #0
 808a572:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808a576:	ebcb 0404 	rsb	r4, fp, r4
 808a57a:	46a9      	mov	r9, r5
 808a57c:	f859 0b04 	ldr.w	r0, [r9], #4
 808a580:	2800      	cmp	r0, #0
 808a582:	d0f2      	beq.n	808a56a <_findenv_r+0x26>
 808a584:	4622      	mov	r2, r4
 808a586:	4659      	mov	r1, fp
 808a588:	f7ff fbe6 	bl	8089d58 <strncmp>
 808a58c:	b988      	cbnz	r0, 808a5b2 <_findenv_r+0x6e>
 808a58e:	f859 3c04 	ldr.w	r3, [r9, #-4]
 808a592:	191e      	adds	r6, r3, r4
 808a594:	5d1b      	ldrb	r3, [r3, r4]
 808a596:	2b3d      	cmp	r3, #61	; 0x3d
 808a598:	d10b      	bne.n	808a5b2 <_findenv_r+0x6e>
 808a59a:	f8da 3000 	ldr.w	r3, [sl]
 808a59e:	4638      	mov	r0, r7
 808a5a0:	1aed      	subs	r5, r5, r3
 808a5a2:	10ad      	asrs	r5, r5, #2
 808a5a4:	f8c8 5000 	str.w	r5, [r8]
 808a5a8:	f000 f8af 	bl	808a70a <__env_unlock>
 808a5ac:	1c70      	adds	r0, r6, #1
 808a5ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808a5b2:	464d      	mov	r5, r9
 808a5b4:	e7e1      	b.n	808a57a <_findenv_r+0x36>
 808a5b6:	bf00      	nop
 808a5b8:	2000017c 	.word	0x2000017c

0808a5bc <_getenv_r>:
 808a5bc:	b507      	push	{r0, r1, r2, lr}
 808a5be:	aa01      	add	r2, sp, #4
 808a5c0:	f7ff ffc0 	bl	808a544 <_findenv_r>
 808a5c4:	b003      	add	sp, #12
 808a5c6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0808a5cc <__gettzinfo>:
 808a5cc:	4800      	ldr	r0, [pc, #0]	; (808a5d0 <__gettzinfo+0x4>)
 808a5ce:	4770      	bx	lr
 808a5d0:	2000013c 	.word	0x2000013c

0808a5d4 <gmtime_r>:
 808a5d4:	6802      	ldr	r2, [r0, #0]
 808a5d6:	4b46      	ldr	r3, [pc, #280]	; (808a6f0 <gmtime_r+0x11c>)
 808a5d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 808a5da:	fb92 f4f3 	sdiv	r4, r2, r3
 808a5de:	fb03 2214 	mls	r2, r3, r4, r2
 808a5e2:	2a00      	cmp	r2, #0
 808a5e4:	bfbc      	itt	lt
 808a5e6:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 808a5ea:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 808a5ee:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 808a5f2:	fb92 f3f0 	sdiv	r3, r2, r0
 808a5f6:	fb00 2213 	mls	r2, r0, r3, r2
 808a5fa:	f04f 003c 	mov.w	r0, #60	; 0x3c
 808a5fe:	608b      	str	r3, [r1, #8]
 808a600:	fb92 f3f0 	sdiv	r3, r2, r0
 808a604:	fb00 2213 	mls	r2, r0, r3, r2
 808a608:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 808a60c:	bfac      	ite	ge
 808a60e:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 808a612:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 808a616:	604b      	str	r3, [r1, #4]
 808a618:	600a      	str	r2, [r1, #0]
 808a61a:	2307      	movs	r3, #7
 808a61c:	1ce2      	adds	r2, r4, #3
 808a61e:	fb92 f3f3 	sdiv	r3, r2, r3
 808a622:	4d34      	ldr	r5, [pc, #208]	; (808a6f4 <gmtime_r+0x120>)
 808a624:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 808a628:	fb94 f5f5 	sdiv	r5, r4, r5
 808a62c:	1ad3      	subs	r3, r2, r3
 808a62e:	f648 62ac 	movw	r2, #36524	; 0x8eac
 808a632:	f240 57b4 	movw	r7, #1460	; 0x5b4
 808a636:	618b      	str	r3, [r1, #24]
 808a638:	4b2f      	ldr	r3, [pc, #188]	; (808a6f8 <gmtime_r+0x124>)
 808a63a:	4830      	ldr	r0, [pc, #192]	; (808a6fc <gmtime_r+0x128>)
 808a63c:	fb03 4405 	mla	r4, r3, r5, r4
 808a640:	fbb4 f2f2 	udiv	r2, r4, r2
 808a644:	fbb4 f3f7 	udiv	r3, r4, r7
 808a648:	fbb4 f0f0 	udiv	r0, r4, r0
 808a64c:	4422      	add	r2, r4
 808a64e:	1ad2      	subs	r2, r2, r3
 808a650:	f648 6694 	movw	r6, #36500	; 0x8e94
 808a654:	1a13      	subs	r3, r2, r0
 808a656:	f240 126d 	movw	r2, #365	; 0x16d
 808a65a:	fbb3 f6f6 	udiv	r6, r3, r6
 808a65e:	fbb3 f0f2 	udiv	r0, r3, r2
 808a662:	fbb3 f3f7 	udiv	r3, r3, r7
 808a666:	4434      	add	r4, r6
 808a668:	1ae3      	subs	r3, r4, r3
 808a66a:	fb02 3310 	mls	r3, r2, r0, r3
 808a66e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 808a672:	2499      	movs	r4, #153	; 0x99
 808a674:	3202      	adds	r2, #2
 808a676:	fbb2 f2f4 	udiv	r2, r2, r4
 808a67a:	4354      	muls	r4, r2
 808a67c:	1ca6      	adds	r6, r4, #2
 808a67e:	2405      	movs	r4, #5
 808a680:	fbb6 f4f4 	udiv	r4, r6, r4
 808a684:	2a0a      	cmp	r2, #10
 808a686:	bf34      	ite	cc
 808a688:	2602      	movcc	r6, #2
 808a68a:	f06f 0609 	mvncs.w	r6, #9
 808a68e:	4416      	add	r6, r2
 808a690:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808a694:	fb02 0505 	mla	r5, r2, r5, r0
 808a698:	1c5f      	adds	r7, r3, #1
 808a69a:	2e01      	cmp	r6, #1
 808a69c:	bf98      	it	ls
 808a69e:	3501      	addls	r5, #1
 808a6a0:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 808a6a4:	eba7 0704 	sub.w	r7, r7, r4
 808a6a8:	d302      	bcc.n	808a6b0 <gmtime_r+0xdc>
 808a6aa:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 808a6ae:	e014      	b.n	808a6da <gmtime_r+0x106>
 808a6b0:	0782      	lsls	r2, r0, #30
 808a6b2:	d105      	bne.n	808a6c0 <gmtime_r+0xec>
 808a6b4:	2464      	movs	r4, #100	; 0x64
 808a6b6:	fbb0 f2f4 	udiv	r2, r0, r4
 808a6ba:	fb04 0212 	mls	r2, r4, r2, r0
 808a6be:	b94a      	cbnz	r2, 808a6d4 <gmtime_r+0x100>
 808a6c0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808a6c4:	fbb0 f4f2 	udiv	r4, r0, r2
 808a6c8:	fb02 0014 	mls	r0, r2, r4, r0
 808a6cc:	fab0 f280 	clz	r2, r0
 808a6d0:	0952      	lsrs	r2, r2, #5
 808a6d2:	e000      	b.n	808a6d6 <gmtime_r+0x102>
 808a6d4:	2201      	movs	r2, #1
 808a6d6:	333b      	adds	r3, #59	; 0x3b
 808a6d8:	441a      	add	r2, r3
 808a6da:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 808a6de:	2300      	movs	r3, #0
 808a6e0:	61ca      	str	r2, [r1, #28]
 808a6e2:	614d      	str	r5, [r1, #20]
 808a6e4:	610e      	str	r6, [r1, #16]
 808a6e6:	60cf      	str	r7, [r1, #12]
 808a6e8:	620b      	str	r3, [r1, #32]
 808a6ea:	4608      	mov	r0, r1
 808a6ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808a6ee:	bf00      	nop
 808a6f0:	00015180 	.word	0x00015180
 808a6f4:	00023ab1 	.word	0x00023ab1
 808a6f8:	fffdc54f 	.word	0xfffdc54f
 808a6fc:	00023ab0 	.word	0x00023ab0

0808a700 <labs>:
 808a700:	2800      	cmp	r0, #0
 808a702:	bfb8      	it	lt
 808a704:	4240      	neglt	r0, r0
 808a706:	4770      	bx	lr

0808a708 <__env_lock>:
 808a708:	4770      	bx	lr

0808a70a <__env_unlock>:
 808a70a:	4770      	bx	lr

0808a70c <dynalib_user>:
 808a70c:	0021 0808 0061 0808 008d 0808 0091 0808     !...a...........
 808a71c:	0000 0000                                   ....

0808a720 <_ZTV5Timer>:
	...
 808a728:	02fd 0808 0345 0808 01e5 0808               ....E.......

0808a734 <_ZTVN5spark10LogHandlerE>:
	...
 808a744:	00a9 0808 00cd 0808                         ........

0808a74c <_ZTVN5spark16SerialLogHandlerE>:
	...
 808a754:	0285 0808 02b9 0808 5e01 0808 00cf 0808     .........^......
 808a764:	7562 7474 6e6f 7720 7361 6320 696c 6b63     button was click
 808a774:	6465 2520 2064 6974 656d 0073 6e69 6574     ed %d times.inte
 808a784:	6e72 6c61 6500 7478 7265 616e 006c 227b     rnal.external.{"
 808a794:	616c 3a22 6625 222c 6f6c 3a22 6625 222c     la":%f,"lo":%f,"
 808a7a4:	7468 3a22 6625 222c 6361 3a22 6625 222c     ht":%f,"ac":%f,"
 808a7b4:	6d74 3a22 2522 2273 007d 4a4c 5047 4653     tm":"%s"}.LJGPSF
 808a7c4:	5849 7b00 7322 3a22 2520 2c64 6e22 3a22     IX.{"s": %d,"n":
 808a7d4:	3020 222c 2276 253a 322e 2c66 6322 3a22      0,"v":%.2f,"c":
 808a7e4:	2e25 6632 007d 4a4c 5750 5352 4154 0054     %.2f}.LJPWRSTAT.
 808a7f4:	227b 2278 253a 2c64 7922 3a22 6425 222c     {"x":%d,"y":%d,"
 808a804:	227a 253a 2c64 6d22 3a22 6425 007d 4a4c     z":%d,"m":%d}.LJ
 808a814:	4341 4c45 5452 4600 6961 656c 2064 6f74     ACELRT.Failed to
 808a824:	7220 6165 2064 7266 6d6f 4420 5448 7320      read from DHT s
 808a834:	6e65 6f73 2172 7b00 7422 3a22 2e25 6632     ensor!.{"t":%.2f
 808a844:	222c 2268 253a 322e 7d66 4c00 454a 564e     ,"h":%.2f}.LJENV
 808a854:	544d 7000 7277 6700 7370 6100 6363 6500     MT.pwr.gps.acc.e
 808a864:	766e 7b00 6322 646d 3a22 2522 2273 007d     nv.{"cmd":"%s"}.
 808a874:	4a4c 4d43 4544 5252 7b00 7322 3a22 2520     LJCMDERR.{"s": %
 808a884:	2c64 6e22 3a22 3120 222c 2276 253a 322e     d,"n": 1,"v":%.2
 808a894:	2c66 6322 3a22 2e25 6632 007d 6e45 2064     f,"c":%.2f}.End 
 808a8a4:	664f 6c20 6f6f 2870 2029 7566 636e 6974     Of loop() functi
 808a8b4:	6e6f 6900 696e 4374 6d6f 6c70 7465 0065     on.initComplete.
 808a8c4:	6f68 7275 6d00 6e69 7475 0065 6f6d 746e     hour.minute.mont
 808a8d4:	0068 6579 7261 6d00 6c69 696c 6573 6f63     h.year.milliseco
 808a8e4:	646e 0073 616c 6974 7574 6564 6c00 6e6f     nds.latitude.lon
 808a8f4:	6967 7574 6564 6c00 7461 7469 6475 4465     gitude.latitudeD
 808a904:	6765 6572 7365 6c00 6e6f 6967 7574 6564     egrees.longitude
 808a914:	6544 7267 6565 0073 6567 696f 6864 6965     Degrees.geoidhei
 808a924:	6867 0074 6c61 6974 7574 6564 7300 6570     ght.altitude.spe
 808a934:	6465 6600 7869 7571 6c61 7469 0079 6173     ed.fixquality.sa
 808a944:	6574 6c6c 7469 7365 6800 726f 417a 6363     tellites.horzAcc
 808a954:	2500 756c 7600 7265 4174 6363 7600 6c65     .%lu.vertAcc.vel
 808a964:	004e 6c25 0064 6576 456c 7600 6c65 0044     N.%ld.velE.velD.
 808a974:	5367 6570 6465 6f00 6f64 7254 7069 6f00     gSpeed.odoTrip.o
 808a984:	6f64 6f54 6174 006c 6f44 276e 2074 6e6b     doTotal.Don't kn
 808a994:	776f 7420 6168 2074 6e6f 2e65 4320 6568     ow that one. Che
 808a9a4:	6b63 7320 6570 6c6c 6e69 2e67 4c00 434a     ck spelling..LJC
 808a9b4:	444d 4156 004c 7570 5662 6c61 7300 7465     MDVAL.pubVal.set
 808a9c4:	4341 5443 7268 7300 7465 5047 4453 796c     ACCThr.setGPSDly
 808a9d4:	7300 7465 4341 4443 796c 7300 7465 4844     .setACCDly.setDH
 808a9e4:	4454 796c 6700 7370 6152 6574 7200 7365     TDly.gpsRate.res
 808a9f4:	7465 444f 004f 6873 776f 6c41 006c 6f70     etODO.showAll.po
 808aa04:	7473 6156 756c 0065 6964 6967 6174 726c     stValue.digitalr
 808aa14:	6165 0064 6964 6967 6174 776c 6972 6574     ead.digitalwrite
 808aa24:	6100 616e 6f6c 7267 6165 0064 6e61 6c61     .analogread.anal
 808aa34:	676f 7277 7469 0065 616c 7473 6f50 6577     ogwrite.lastPowe
 808aa44:	0072 6361 6563 546c 7268 7365 0068 7274     r.accelThresh.tr
 808aa54:	6e61 6d73 7469 614d 6b73 6c00 7361 4774     ansmitMask.lastG
 808aa64:	5350 7550 0062 616c 7473 4341 5043 6275     PSPub.lastACCPub
 808aa74:	6c00 7361 4474 5448 7550 0062 6564 616c     .lastDHTPub.dela
 808aa84:	4779 5350 694d 006e 6564 616c 4179 4343     yGPSMin.delayACC
 808aa94:	694d 006e 6564 616c 4479 5448 694d 006e     Min.delayDHTMin.
 808aaa4:	7067 4573 7478 7265 616e 006c 6e45 2064     gpsExternal.End 
 808aab4:	666f 7320 7465 7075 2928 6620 6e75 7463     of setup() funct
 808aac4:	6f69 006e 6573 6774 7370 6e61 0074 6e69     ion.setgpsant.in
 808aad4:	7469 6f43 706d 656c 6574 203a 6800 756f     itComplete: .hou
 808aae4:	3a72 0020 696d 756e 6574 203a 6d00 6e6f     r: .minute: .mon
 808aaf4:	6874 203a 6400 7961 203a 7900 6165 3a72     th: .day: .year:
 808ab04:	0020 696d 6c6c 7369 6365 6e6f 7364 203a      .milliseconds: 
 808ab14:	6c00 7461 7469 6475 3a65 0020 6f6c 676e     .latitude: .long
 808ab24:	7469 6475 3a65 0020 616c 6974 7574 6564     itude: .latitude
 808ab34:	6544 7267 6565 3a73 0020 6f6c 676e 7469     Degrees: .longit
 808ab44:	6475 4465 6765 6572 7365 203a 6700 6f65     udeDegrees: .geo
 808ab54:	6469 6568 6769 7468 203a 6100 746c 7469     idheight: .altit
 808ab64:	6475 3a65 0020 6966 7178 6175 696c 7974     ude: .fixquality
 808ab74:	203a 7300 7461 6c65 696c 6574 3a73 0020     : .satellites: .
 808ab84:	6f68 7a72 6341 3a63 0020 6576 7472 6341     horzAcc: .vertAc
 808ab94:	3a63 0020 6576 4e6c 203a 7600 6c65 3a45     c: .velN: .velE:
 808aba4:	0020 6576 446c 203a 6700 7053 6565 3a64      .velD: .gSpeed:
 808abb4:	0020 646f 546f 6972 3a70 0020 646f 546f      .odoTrip: .odoT
 808abc4:	746f 6c61 203a 7200 7461 3a65 0020 6e20     otal: .rate: . n
 808abd4:	7661 203a 6300 6e6f 456e 6576 746e 7453     av: .connEventSt
 808abe4:	7461 0073 6573 7373 6f69 436e 6568 6b63     ats.sessionCheck
 808abf4:	7400 7365 6574 4672 006e 0000               .testerFn...

0808ac00 <_ZTV12BatteryCheck>:
	...
 808ac08:	18f5 0808 18f7 0808                         ........

0808ac10 <_ZTV6Tester>:
	...
 808ac18:	19ed 0808 19ef 0808 6572 6573 0074 6f6d     ........reset.mo
 808ac28:	6564 526d 7365 7465 7200 7365 7465 6553     demReset.resetSe
 808ac38:	7373 6f69 006e 7073 7261 2f6b 6564 6976     ssion.spark/devi
 808ac48:	6563 732f 7365 6973 6e6f 652f 646e 7300     ce/session/end.s
 808ac58:	6661 4d65 646f 0065 7061 5770 7461 6863     afeMode.appWatch
 808ac68:	6f64 0067 6c73 6565 0070 6564 7065 6400     dog.sleep.deep.d
 808ac78:	6565 5370 6174 646e 7962 7300 6f74 0070     eepStandby.stop.
 808ac88:	7473 706f 7453 6e61 6264 0079 6970 676e     stopStandby.ping
 808ac98:	7300 6174 7472 0000                         .start..

0808aca0 <_ZTV15ConnectionCheck>:
	...
 808aca8:	1dd1 0808 1dd3 0808 5441 552b 4950 474e     ........AT+UPING
 808acb8:	223d 2e38 2e38 2e38 2238 0a0d 4100 2b54     ="8.8.8.8"...AT+
 808acc8:	5055 4e49 3d47 6122 6970 702e 7261 6974     UPING="api.parti
 808acd8:	6c63 2e65 6f69 0d22 000a 6572 6573 7474     cle.io"...resett
 808ace8:	6e69 2067 6f6d 6564 006d 5441 432b 5546     ing modem.AT+CFU
 808acf8:	3d4e 3631 0a0d 7500 0070 6f64 6e77 6300     N=16...up.down.c
 808ad08:	6c65 756c 616c 2072 7325 6300 6f6c 6475     ellular %s.cloud
 808ad18:	6320 6e6f 656e 7463 6f69 206e 7325 6500      connection %s.e
 808ad28:	746e 7265 6465 6c20 7369 6574 696e 676e     ntered listening
 808ad38:	6d20 646f 0065 7061 7770 7464 0000 0000      mode.appwdt....

0808ad48 <_ZTV18AppWatchdogWrapper>:
	...
 808ad50:	20c5 0808 2111 0808 002f 7570 6c62 7369     . ...!../.publis
 808ad60:	6968 676e 7320 7365 6973 6e6f 6320 6568     hing session che
 808ad70:	6b63 6520 6576 746e 2520 0073               ck event %s.

0808ad7c <_ZTV12SessionCheck>:
	...
 808ad84:	227d 0808 229d 0808 6c25 2c75 6c25 2c75     }"..."..%lu,%lu,
 808ad94:	6425 252c 3b64 6300 756f 646c 276e 2074     %d,%d;.couldn't 
 808ada4:	6573 646e 6120 6c6c 6520 6576 746e 2c73     send all events,
 808adb4:	7320 7661 6e69 2067 6425 6620 726f 6c20      saving %d for l
 808adc4:	7461 7265 7300 6e65 2074 6425 6520 6576     ater.sent %d eve
 808add4:	746e 0073 6964 6373 7261 6964 676e 6f20     nts.discarding o
 808ade4:	646c 6520 6576 746e 6300 6e6f 656e 7463     ld event.connect
 808adf4:	6f69 456e 6576 746e 6520 6576 746e 253d     ionEvent event=%
 808ae04:	2064 6164 6174 253d 0064 6e69 7469 6169     d data=%d.initia
 808ae14:	696c 697a 676e 6320 6e6f 656e 7463 6f69     lizing connectio
 808ae24:	206e 7665 6e65 2074 6572 6174 6e69 6465     n event retained
 808ae34:	6d20 6d65 726f 0079                          memory.

0808ae3c <_ZTV16ConnectionEvents>:
	...
 808ae44:	2595 0808 2597 0808                         .%...%..

0808ae4c <_ZTV10PowerCheck>:
	...
 808ae54:	27c9 0808 27e1 0808 6625 252c 0066 7067     .'...'..%f,%f.gp
 808ae64:	2e73 6562 6967 206e 6166 6c69 6465 203a     s.begin failed: 
 808ae74:	4700 5350 7320 6174 7472 6465 4c00 5349     .GPS started.LIS
 808ae84:	4433 0048                                   3DH.

0808ae88 <_ZTV15Adafruit_LIS3DH>:
	...
 808ae90:	28d1 0808 2bb9 0808 28cf 0808 32af 0808     .(...+...(...2..
 808aea0:	2e11 0808 002c 5024 4255 2c58 3134 312c     ....,.$PUBX,41,1
 808aeb0:	332c 312c 392c 3036 2c30 2a30 3631 0a0d     ,3,1,9600,0*16..
 808aec0:	7000 7261 6573 203a 4341 5f4b 5954 4550     .parse: ACK_TYPE
 808aed0:	203a 6d00 7365 6173 6567 6120 6b63 6465     : .message acked
 808aee0:	203a 7000 7261 6573 203a 414e 5f4b 5954     : .parse: NAK_TY
 808aef0:	4550 203a 6d00 7365 6173 6567 4e20 4b41     PE: .message NAK
 808af00:	6465 203a 7000 7261 6573 203a 6e55 6e6b     ed: .parse: Unkn
 808af10:	776f 206e 7974 6570 203a 3e00 5400 7269     own type: .>.Tir
 808af20:	6465 6f20 2066 6177 7469 6e69 2067 6f66     ed of waiting fo
 808af30:	2072 6874 2065 5047 2e53 4920 6d27 6720     r the GPS. I'm g
 808af40:	696f 676e 7320 7568 2074 7469 6f20 6666     oing shut it off
 808af50:	6120 646e 7220 6265 6f6f 2e74 7200 6165      and reboot..rea
 808af60:	5564 5842 736d 2067 6162 2064 656c 676e     dUBXmsg bad leng
 808af70:	6874 203a 7200 6165 5564 5842 736d 2067     th: .readUBXmsg 
 808af80:	6162 2064 6863 6365 206b 7573 206d 6700     bad check sum .g
 808af90:	7370 722e 6165 2064 6f67 2074 6275 4278     ps.read got ubxB
 808afa0:	4441 4c5f 4e45 5447 0048 7067 2e73 6572     AD_LENGTH.gps.re
 808afb0:	6461 6720 746f 7520 7862 4142 5f44 4843     ad got ubxBAD_CH
 808afc0:	4345 5f4b 5553 004d 7277 7469 5565 5842     ECK_SUM.writeUBX
 808afd0:	203a 7974 6570 203a 6700 7370 732e 6e65     : type: .gps.sen
 808afe0:	4364 6d6f 616d 646e 6720 746f 7520 7862     dCommand got ubx
 808aff0:	4142 5f44 454c 474e 4854 6700 7370 732e     BAD_LENGTH.gps.s
 808b000:	6e65 4364 6d6f 616d 646e 6720 746f 7520     endCommand got u
 808b010:	7862 4142 5f44 4843 4345 5f4b 5553 004d     bxBAD_CHECK_SUM.
 808b020:	7067 2e73 6573 646e 6f43 6d6d 6e61 2064     gps.sendCommand 
 808b030:	6f67 2074 6275 4e78 5f4f 4341 004b 6573     got ubxNO_ACK.se
 808b040:	5274 7461 3a65 6320 6168 676e 6465 7320     tRate: changed s
 808b050:	6570 6465 7420 206f 696d 696e 756d 206d     peed to minimum 
 808b060:	2031 6d63 732f 7300 7465 6152 6574 203a     1 cm/s.setRate: 
 808b070:	6863 6e61 6567 2064 7073 6565 2064 6f74     changed speed to
 808b080:	6d20 7861 6d69 6d75 3220 3535 6320 2f6d      maximum 255 cm/
 808b090:	0073 6573 5274 7461 3a65 6320 6168 676e     s.setRate: chang
 808b0a0:	6465 6420 7369 6174 636e 2065 6f74 6d20     ed distance to m
 808b0b0:	6e69 6d69 6d75 3120 6d20 7300 7465 6854     inimum 1 m.setTh
 808b0c0:	6572 6873 203a 7073 6565 3a64 0020 6573     resh: speed: .se
 808b0d0:	5474 7268 7365 3a68 6420 7369 6174 636e     tThresh: distanc
 808b0e0:	3a65 0020 6573 5274 7461 3a65 6320 6168     e: .setRate: cha
 808b0f0:	676e 6465 6d20 6165 7573 6572 656d 746e     nged measurement
 808b100:	7420 206f 696d 696e 756d 206d 3031 6d20      to minimum 10 m
 808b110:	0073 6573 5274 7461 3a65 6320 6168 676e     s.setRate: chang
 808b120:	6465 6e20 7661 6769 7461 6f69 536e 6c6f     ed navigationSol
 808b130:	7420 206f 696d 696e 756d 206d 0031 6573      to minimum 1.se
 808b140:	5274 7461 3a65 6320 6168 676e 6465 6e20     tRate: changed n
 808b150:	7661 6769 7461 6f69 536e 6c6f 7420 206f     avigationSol to 
 808b160:	616d 6978 756d 206d 3231 0037 6573 5274     maximum 127.setR
 808b170:	7461 3a65 6d20 6165 7573 6572 656d 746e     ate: measurement
 808b180:	203a 7300 7465 6152 6574 203a 616e 6976     : .setRate: navi
 808b190:	6167 6974 6e6f 6f53 3a6c 0020 6573 5274     gationSol: .setR
 808b1a0:	7461 3a65 7520 7862 6157 6374 6468 676f     ate: ubxWatchdog
 808b1b0:	203a 6200 6765 6e69 6620 6961 656c 2c64     : .begin failed,
 808b1c0:	7320 6174 6574 203a 2000 7265 6f72 3a72      state: . error:
 808b1d0:	0020 0041 4948 4847 4c00 574f 0000                .A.HIGH.LOW.

0808b1dd <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 808b1dd:	0800 1810 2820 3830 616e 006e 766f 0066     .... (08nan.ovf.
 808b1ed:	6e69 0066 0000 0000                              inf....

0808b1f4 <_ZTVN5spark16JSONStreamWriterE>:
	...
 808b1fc:	519b 0808 51c1 0808 5175 0808 7363 0808     .Q...Q..uQ..cs..

0808b20c <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 808b214:	565d 0808 5671 0808 5fb5 0808 517d 0808     ]V..qV..._..}Q..
 808b224:	6162 6475 5300 7265 6169 006c 5355 5342     baud.Serial.USBS
 808b234:	7265 6169 316c 7400 7079 0065 6170 6172     erial1.type.para
 808b244:	006d 6d63 0064 6469 6800 646e 7300 7274     m.cmd.id.hnd.str
 808b254:	006d 6966 746c 6c00 6c76 6100 6464 6148     m.filt.lvl.addHa
 808b264:	646e 656c 0072 6572 6f6d 6576 6148 646e     ndler.removeHand
 808b274:	656c 0072 6e65 6d75 6148 646e 656c 7372     ler.enumHandlers
 808b284:	4a00 4f53 534e 7274 6165 4c6d 676f 6148     .JSONStreamLogHa
 808b294:	646e 656c 0072 7061 0070 3025 3031 2075     ndler.app.%010u 
 808b2a4:	5d00 0020 202c 2800 3a29 0020 5b20 6300     .] ., .(): . [.c
 808b2b4:	646f 2065 203d 2500 0069 6564 6174 6c69     ode = .%i.detail
 808b2c4:	2073 203d 6c00 006e 6e66 6300 646f 0065     s = .ln.fn.code.
 808b2d4:	6564 6174 6c69 6e00 6e6f 0065 7274 6361     detail.none.trac
 808b2e4:	0065 6e69 6f66 7700 7261 006e 7265 6f72     e.info.warn.erro
 808b2f4:	0072 6170 696e 0063 6c61 006c               r.panic.all.

0808b300 <_ZTVN5spark16StreamLogHandlerE>:
	...
 808b308:	5631 0808 5649 0808 5e01 0808 00cf 0808     1V..IV...^......

0808b318 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 808b320:	5199 0808 51cf 0808 5d29 0808 517f 0808     .Q...Q..)]...Q..

0808b330 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 808b338:	5197 0808 51dd 0808 5555 0808 51eb 0808     .Q...Q..UU...Q..
 808b348:	2b25 3330 3a64 3025 7532 2500 2d59 6d25     %+03d:%02u.%Y-%m
 808b358:	252d 5464 4825 253a 3a4d 5325 7a25 6100     -%dT%H:%M:%S%z.a
 808b368:	6373 6974 656d 0000                         sctime..

0808b370 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 808b378:	65dd 0808 65e3 0808 6627 0808 65f1 0808     .e...e..'f...e..
 808b388:	65df 0808                                   .e..

0808b38c <_ZTV9IPAddress>:
	...
 808b394:	6c11 0808 6c01 0808 6c03 0808               .l...l...l..

0808b3a0 <_ZTV9USBSerial>:
	...
 808b3a8:	6ca5 0808 6cf5 0808 6d03 0808 4e91 0808     .l...l...m...N..
 808b3b8:	6ce1 0808 6ca7 0808 6cbd 0808 6cef 0808     .l...l...l...l..
 808b3c8:	6cd3 0808 6ca1 0808                         .l...l..

0808b3d0 <_ZTVN5spark13CellularClassE>:
	...
 808b3d8:	6f8b 0808 6f81 0808 6f77 0808 6ee9 0808     .o...o..wo...n..
 808b3e8:	6f6b 0808 6f5f 0808 6f53 0808 6f4b 0808     ko.._o..So..Ko..
 808b3f8:	6f41 0808 6f37 0808 6ef3 0808               Ao..7o...n..

0808b404 <_ZTV11USARTSerial>:
	...
 808b40c:	6fc5 0808 7015 0808 7023 0808 4e91 0808     .o...p..#p...N..
 808b41c:	6fd9 0808 6ffb 0808 6fe7 0808 700f 0808     .o...o...o...p..
 808b42c:	6fc7 0808 6fcb 0808                         .o...o..

0808b434 <_ZTV7TwoWire>:
	...
 808b43c:	7139 0808 7183 0808 715b 0808 713b 0808     9q...q..[q..;q..
 808b44c:	7163 0808 716b 0808 7173 0808 717b 0808     cq..kq..sq..{q..

0808b45c <_ZTVN5spark12NetworkClassE>:
	...
 808b464:	726b 0808 7275 0808 727f 0808 7289 0808     kr..ur...r...r..
 808b474:	7293 0808 729f 0808 72ab 0808 72b7 0808     .r...r...r...r..
 808b484:	72bf 0808 72c9 0808 72d5 0808 2e30 0030     .r...r...r..0.0.
 808b494:	6166 736c 0065 7274 6575 2500 0075 2e25     false.true.%u.%.
 808b4a4:	6c2a 0066 6725 6e00 6c75 006c 2575 3430     *lf.%g.null.u%04
 808b4b4:	0078                                        x.

0808b4b6 <_ZSt7nothrow>:
 808b4b6:	0000 7173 7472 0000 0000                    ..sqrt....

0808b4c0 <day_name.4723>:
 808b4c0:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 808b4d0:	6972 6153 4a74                                   riSat

0808b4d5 <mon_name.4724>:
 808b4d5:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 808b4e5:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 808b4f5:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
 808b505:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
 808b515:	6425 000a                                   %d..

0808b519 <_ctype_>:
 808b519:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 808b529:	2020 2020 2020 2020 2020 2020 2020 2020                     
 808b539:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 808b549:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 808b559:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 808b569:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 808b579:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 808b589:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 808b599:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0808b61c <__sf_fake_stdin>:
	...

0808b63c <__sf_fake_stdout>:
	...

0808b65c <__sf_fake_stderr>:
	...
 808b67c:	0043 0000                                   C...

0808b680 <__month_lengths>:
 808b680:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 808b690:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 808b6a0:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 808b6b0:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 808b6c0:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 808b6d0:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 808b6e0:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
 808b6f0:	2d00 2500 6432 2500 322e 2f64 2e25 6432     .-.%2d.%.2d/%.2d
 808b700:	252f 322e 0064 2d59 6d25 252d 0064 2a2e     /%.2d.Y-%m-%d..*
 808b710:	0075 2e25 6433 2500 6c6c 0064 2e25 6432     u.%.3d.%lld.%.2d
 808b720:	253a 322e 3a64 2e25 6432 2500 302b 6c33     :%.2d:%.2d.%+03l
 808b730:	2564 322e 646c 4c00 5f43 4954 454d 4a00     d%.2ld.LC_TIME.J
 808b740:	6e61 4600 6265 4d00 7261 4100 7270 4d00     an.Feb.Mar.Apr.M
 808b750:	7961 4a00 6e75 4a00 6c75 4100 6775 5300     ay.Jun.Jul.Aug.S
 808b760:	7065 4f00 7463 4e00 766f 4400 6365 4a00     ep.Oct.Nov.Dec.J
 808b770:	6e61 6175 7972 4600 6265 7572 7261 0079     anuary.February.
 808b780:	614d 6372 0068 7041 6972 006c 754a 656e     March.April.June
 808b790:	4a00 6c75 0079 7541 7567 7473 5300 7065     .July.August.Sep
 808b7a0:	6574 626d 7265 4f00 7463 626f 7265 4e00     tember.October.N
 808b7b0:	766f 6d65 6562 0072 6544 6563 626d 7265     ovember.December
 808b7c0:	5300 6e75 4d00 6e6f 5400 6575 5700 6465     .Sun.Mon.Tue.Wed
 808b7d0:	5400 7568 4600 6972 5300 7461 5300 6e75     .Thu.Fri.Sat.Sun
 808b7e0:	6164 0079 6f4d 646e 7961 5400 6575 6473     day.Monday.Tuesd
 808b7f0:	7961 5700 6465 656e 6473 7961 5400 7568     ay.Wednesday.Thu
 808b800:	7372 6164 0079 7246 6469 7961 5300 7461     rsday.Friday.Sat
 808b810:	7275 6164 0079 4825 253a 3a4d 5325 2500     urday.%H:%M:%S.%
 808b820:	2f6d 6425 252f 0079 6125 2520 2062 6525     m/%d/%y.%a %b %e
 808b830:	2520 3a48 4d25 253a 2053 5925 4100 004d      %H:%M:%S %Y.AM.
 808b840:	4d50 2500 2061 6225 2520 2065 4825 253a     PM.%a %b %e %H:%
 808b850:	3a4d 5325 2520 205a 5925 2500 3a49 4d25     M:%S %Z %Y.%I:%M
 808b860:	253a 2053 7025 0000                         :%S %p..

0808b868 <_C_time_locale>:
 808b868:	b73f 0808 b743 0808 b747 0808 b74b 0808     ?...C...G...K...
 808b878:	b74f 0808 b753 0808 b757 0808 b75b 0808     O...S...W...[...
 808b888:	b75f 0808 b763 0808 b767 0808 b76b 0808     _...c...g...k...
 808b898:	b76f 0808 b777 0808 b780 0808 b786 0808     o...w...........
 808b8a8:	b74f 0808 b78c 0808 b791 0808 b796 0808     O...............
 808b8b8:	b79d 0808 b7a7 0808 b7af 0808 b7b8 0808     ................
 808b8c8:	b7c1 0808 b7c5 0808 b7c9 0808 b7cd 0808     ................
 808b8d8:	b7d1 0808 b7d5 0808 b7d9 0808 b7dd 0808     ................
 808b8e8:	b7e4 0808 b7eb 0808 b7f3 0808 b7fd 0808     ................
 808b8f8:	b806 0808 b80d 0808 b816 0808 b81f 0808     ................
 808b908:	b828 0808 b83d 0808 b840 0808 b843 0808     (...=...@...C...
 808b918:	b76f 0808 b777 0808 b780 0808 b786 0808     o...w...........
 808b928:	b74f 0808 b78c 0808 b791 0808 b796 0808     O...............
 808b938:	b79d 0808 b7a7 0808 b7af 0808 b7b8 0808     ................
 808b948:	b247 0808 b85b 0808 acc4 0808 acc4 0808     G...[...........
 808b958:	acc4 0808 acc4 0808 acc4 0808 5a54 4700     ............TZ.G
 808b968:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
 808b978:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
 808b988:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
 808b998:	3a6e 6825 2575 006e                         n:%hu%n.

0808b9a0 <link_const_variable_data_end>:
 808b9a0:	08081661 	.word	0x08081661
 808b9a4:	08081999 	.word	0x08081999
 808b9a8:	08081db1 	.word	0x08081db1
 808b9ac:	0808204d 	.word	0x0808204d
 808b9b0:	080821e5 	.word	0x080821e5
 808b9b4:	08082585 	.word	0x08082585
 808b9b8:	0808279d 	.word	0x0808279d
 808b9bc:	080828cb 	.word	0x080828cb
 808b9c0:	08082bc9 	.word	0x08082bc9
 808b9c4:	08082dfd 	.word	0x08082dfd
 808b9c8:	080832e5 	.word	0x080832e5
 808b9cc:	08083d6d 	.word	0x08083d6d
 808b9d0:	08083fe1 	.word	0x08083fe1
 808b9d4:	08084b39 	.word	0x08084b39
 808b9d8:	08085df1 	.word	0x08085df1
 808b9dc:	08086305 	.word	0x08086305
 808b9e0:	0808634d 	.word	0x0808634d
 808b9e4:	08086f95 	.word	0x08086f95
 808b9e8:	08087321 	.word	0x08087321
 808b9ec:	08087905 	.word	0x08087905
 808b9f0:	08087a61 	.word	0x08087a61
 808b9f4:	08087ae5 	.word	0x08087ae5
 808b9f8:	08087ba9 	.word	0x08087ba9
 808b9fc:	08087c6d 	.word	0x08087c6d
